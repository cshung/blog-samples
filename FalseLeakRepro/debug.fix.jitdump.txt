****** START compiling FalseLeakRepro.Program:Run(System.String[]):this (MethodHash=6911424d)
Generating code for Windows x64
OPTIONS: compCodeOpt = BLENDED_CODE
OPTIONS: compDbgCode = true
OPTIONS: compDbgInfo = true
OPTIONS: compDbgEnC  = false
OPTIONS: compProcedureSplitting   = false
OPTIONS: compProcedureSplittingEH = false
OPTIONS: No PGO data
IL to import:
IL_0000  00                nop         
IL_0001  28 0d 00 00 0a    call         0xA00000D
IL_0006  0b                stloc.1     
IL_0007  12 01             ldloca.s     0x1
IL_0009  28 0e 00 00 0a    call         0xA00000E
IL_000e  72 01 00 00 70    ldstr        0x70000001
IL_0013  28 0f 00 00 0a    call         0xA00000F
IL_0018  28 10 00 00 0a    call         0xA000010
IL_001d  00                nop         
IL_001e  02                ldarg.0     
IL_001f  73 03 00 00 06    newobj       0x6000003
IL_0024  7d 05 00 00 04    stfld        0x4000005
IL_0029  02                ldarg.0     
IL_002a  7b 05 00 00 04    ldfld        0x4000005
IL_002f  7b 03 00 00 04    ldfld        0x4000003
IL_0034  73 0c 00 00 0a    newobj       0xA00000C
IL_0039  7d 02 00 00 04    stfld        0x4000002
IL_003e  02                ldarg.0     
IL_003f  fe 06 07 00 00 06 ldftn        0x6000007
IL_0045  73 11 00 00 0a    newobj       0xA000011
IL_004a  73 12 00 00 0a    newobj       0xA000012
IL_004f  0a                stloc.0     
IL_0050  06                ldloc.0     
IL_0051  6f 13 00 00 0a    callvirt     0xA000013
IL_0056  00                nop         
IL_0057  28 0d 00 00 0a    call         0xA00000D
IL_005c  0b                stloc.1     
IL_005d  12 01             ldloca.s     0x1
IL_005f  28 0e 00 00 0a    call         0xA00000E
IL_0064  72 1f 00 00 70    ldstr        0x7000001F
IL_0069  28 0f 00 00 0a    call         0xA00000F
IL_006e  28 10 00 00 0a    call         0xA000010
IL_0073  00                nop         
IL_0074  16                ldc.i4.0    
IL_0075  0c                stloc.2     
IL_0076  2b 6e             br.s         110 (IL_00e6)
IL_0078  00                nop         
IL_0079  02                ldarg.0     
IL_007a  7b 05 00 00 04    ldfld        0x4000005
IL_007f  0d                stloc.3     
IL_0080  16                ldc.i4.0    
IL_0081  13 04             stloc.s      0x4
IL_0083  09                ldloc.3     
IL_0084  12 04             ldloca.s     0x4
IL_0086  28 14 00 00 0a    call         0xA000014
IL_008b  00                nop         
IL_008c  00                nop         
IL_008d  02                ldarg.0     
IL_008e  7b 05 00 00 04    ldfld        0x4000005
IL_0093  7b 03 00 00 04    ldfld        0x4000003
IL_0098  73 01 00 00 06    newobj       0x6000001
IL_009d  7d 01 00 00 04    stfld        0x4000001
IL_00a2  02                ldarg.0     
IL_00a3  7b 05 00 00 04    ldfld        0x4000005
IL_00a8  02                ldarg.0     
IL_00a9  7b 05 00 00 04    ldfld        0x4000005
IL_00ae  7b 03 00 00 04    ldfld        0x4000003
IL_00b3  7b 01 00 00 04    ldfld        0x4000001
IL_00b8  7d 03 00 00 04    stfld        0x4000003
IL_00bd  02                ldarg.0     
IL_00be  7b 05 00 00 04    ldfld        0x4000005
IL_00c3  7b 03 00 00 04    ldfld        0x4000003
IL_00c8  73 0c 00 00 0a    newobj       0xA00000C
IL_00cd  7d 02 00 00 04    stfld        0x4000002
IL_00d2  00                nop         
IL_00d3  de 0c             leave.s      12 (IL_00e1)
IL_00d5  11 04             ldloc.s      0x4
IL_00d7  2c 07             brfalse.s    7 (IL_00e0)
IL_00d9  09                ldloc.3     
IL_00da  28 15 00 00 0a    call         0xA000015
IL_00df  00                nop         
IL_00e0  dc                endfinally  
IL_00e1  00                nop         
IL_00e2  08                ldloc.2     
IL_00e3  17                ldc.i4.1    
IL_00e4  58                add         
IL_00e5  0c                stloc.2     
IL_00e6  08                ldloc.2     
IL_00e7  1f 0a             ldc.i4.s     0xA
IL_00e9  fe 04             clt         
IL_00eb  13 05             stloc.s      0x5
IL_00ed  11 05             ldloc.s      0x5
IL_00ef  2d 87             brtrue.s     -121 (IL_0078)
IL_00f1  28 0d 00 00 0a    call         0xA00000D
IL_00f6  0b                stloc.1     
IL_00f7  12 01             ldloca.s     0x1
IL_00f9  28 0e 00 00 0a    call         0xA00000E
IL_00fe  72 75 00 00 70    ldstr        0x70000075
IL_0103  28 0f 00 00 0a    call         0xA00000F
IL_0108  28 10 00 00 0a    call         0xA000010
IL_010d  00                nop         
IL_010e  2b 51             br.s         81 (IL_0161)
IL_0110  00                nop         
IL_0111  02                ldarg.0     
IL_0112  7b 05 00 00 04    ldfld        0x4000005
IL_0117  13 06             stloc.s      0x6
IL_0119  16                ldc.i4.0    
IL_011a  13 07             stloc.s      0x7
IL_011c  11 06             ldloc.s      0x6
IL_011e  12 07             ldloca.s     0x7
IL_0120  28 14 00 00 0a    call         0xA000014
IL_0125  00                nop         
IL_0126  00                nop         
IL_0127  02                ldarg.0     
IL_0128  7b 05 00 00 04    ldfld        0x4000005
IL_012d  7b 03 00 00 04    ldfld        0x4000003
IL_0132  02                ldarg.0     
IL_0133  7b 05 00 00 04    ldfld        0x4000005
IL_0138  7b 04 00 00 04    ldfld        0x4000004
IL_013d  fe 01             ceq         
IL_013f  13 08             stloc.s      0x8
IL_0141  11 08             ldloc.s      0x8
IL_0143  2c 03             brfalse.s    3 (IL_0148)
IL_0145  00                nop         
IL_0146  de 1e             leave.s      30 (IL_0166)
IL_0148  00                nop         
IL_0149  de 0d             leave.s      13 (IL_0158)
IL_014b  11 07             ldloc.s      0x7
IL_014d  2c 08             brfalse.s    8 (IL_0157)
IL_014f  11 06             ldloc.s      0x6
IL_0151  28 15 00 00 0a    call         0xA000015
IL_0156  00                nop         
IL_0157  dc                endfinally  
IL_0158  1f 64             ldc.i4.s     0x64
IL_015a  28 16 00 00 0a    call         0xA000016
IL_015f  00                nop         
IL_0160  00                nop         
IL_0161  17                ldc.i4.1    
IL_0162  13 09             stloc.s      0x9
IL_0164  2b aa             br.s         -86 (IL_0110)
IL_0166  28 0d 00 00 0a    call         0xA00000D
IL_016b  0b                stloc.1     
IL_016c  12 01             ldloca.s     0x1
IL_016e  28 0e 00 00 0a    call         0xA00000E
IL_0173  72 cf 00 00 70    ldstr        0x700000CF
IL_0178  28 0f 00 00 0a    call         0xA00000F
IL_017d  28 10 00 00 0a    call         0xA000010
IL_0182  00                nop         
IL_0183  72 2f 01 00 70    ldstr        0x7000012F
IL_0188  28 10 00 00 0a    call         0xA000010
IL_018d  00                nop         
IL_018e  72 47 01 00 70    ldstr        0x70000147
IL_0193  28 10 00 00 0a    call         0xA000010
IL_0198  00                nop         
IL_0199  72 71 01 00 70    ldstr        0x70000171
IL_019e  28 10 00 00 0a    call         0xA000010
IL_01a3  00                nop         
IL_01a4  72 99 01 00 70    ldstr        0x70000199
IL_01a9  28 10 00 00 0a    call         0xA000010
IL_01ae  00                nop         
IL_01af  2b 74             br.s         116 (IL_0225)
IL_01b1  00                nop         
IL_01b2  28 17 00 00 0a    call         0xA000017
IL_01b7  13 0a             stloc.s      0xA
IL_01b9  12 0a             ldloca.s     0xA
IL_01bb  28 18 00 00 0a    call         0xA000018
IL_01c0  1f 47             ldc.i4.s     0x47
IL_01c2  fe 01             ceq         
IL_01c4  13 0b             stloc.s      0xB
IL_01c6  11 0b             ldloc.s      0xB
IL_01c8  2c 0f             brfalse.s    15 (IL_01d9)
IL_01ca  00                nop         
IL_01cb  28 19 00 00 0a    call         0xA000019
IL_01d0  28 1a 00 00 0a    call         0xA00001A
IL_01d5  00                nop         
IL_01d6  00                nop         
IL_01d7  2b 4b             br.s         75 (IL_0224)
IL_01d9  12 0a             ldloca.s     0xA
IL_01db  28 18 00 00 0a    call         0xA000018
IL_01e0  1f 48             ldc.i4.s     0x48
IL_01e2  fe 01             ceq         
IL_01e4  13 0c             stloc.s      0xC
IL_01e6  11 0c             ldloc.s      0xC
IL_01e8  2c 0a             brfalse.s    10 (IL_01f4)
IL_01ea  00                nop         
IL_01eb  28 1b 00 00 0a    call         0xA00001B
IL_01f0  00                nop         
IL_01f1  00                nop         
IL_01f2  2b 30             br.s         48 (IL_0224)
IL_01f4  12 0a             ldloca.s     0xA
IL_01f6  28 18 00 00 0a    call         0xA000018
IL_01fb  1f 52             ldc.i4.s     0x52
IL_01fd  fe 01             ceq         
IL_01ff  13 0d             stloc.s      0xD
IL_0201  11 0d             ldloc.s      0xD
IL_0203  2c 0b             brfalse.s    11 (IL_0210)
IL_0205  00                nop         
IL_0206  02                ldarg.0     
IL_0207  16                ldc.i4.0    
IL_0208  7d 06 00 00 04    stfld        0x4000006
IL_020d  00                nop         
IL_020e  2b 14             br.s         20 (IL_0224)
IL_0210  12 0a             ldloca.s     0xA
IL_0212  28 18 00 00 0a    call         0xA000018
IL_0217  1f 51             ldc.i4.s     0x51
IL_0219  fe 01             ceq         
IL_021b  13 0e             stloc.s      0xE
IL_021d  11 0e             ldloc.s      0xE
IL_021f  2c 03             brfalse.s    3 (IL_0224)
IL_0221  00                nop         
IL_0222  2b 06             br.s         6 (IL_022a)
IL_0224  00                nop         
IL_0225  17                ldc.i4.1    
IL_0226  13 0f             stloc.s      0xF
IL_0228  2b 87             br.s         -121 (IL_01b1)
IL_022a  02                ldarg.0     
IL_022b  16                ldc.i4.0    
IL_022c  7d 06 00 00 04    stfld        0x4000006
IL_0231  2a                ret         

lvaSetClass: setting class for V00 to (00007FFDB6F1F880) FalseLeakRepro.Program 
'this'    passed in register rcx

lvaSetClass: setting class for V01 to (00007FFDB6F1DA68) System.String[] 
Arg #1    passed in register(s) rdx

lvaSetClass: setting class for V02 to (00007FFDB6DC4E80) System.Threading.Thread 

lvaSetClass: setting class for V05 to (00007FFDB7022B70) FalseLeakRepro.List 

lvaSetClass: setting class for V08 to (00007FFDB7022B70) FalseLeakRepro.List 

lvaGrabTemp returning 18 (V18 tmp0) (a long lifetime temp) called for OutgoingArgSpace.
; Initial local variable assignments
;
;  V00 this              ref  this class-hnd
;  V01 arg1              ref  class-hnd
;  V02 loc0              ref  class-hnd
;  V03 loc1           struct <System.DateTime, 8>
;  V04 loc2              int 
;  V05 loc3              ref  class-hnd
;  V06 loc4             bool 
;  V07 loc5             bool 
;  V08 loc6              ref  class-hnd
;  V09 loc7             bool 
;  V10 loc8             bool 
;  V11 loc9             bool 
;  V12 loc10          struct <System.ConsoleKeyInfo, 12>
;  V13 loc11            bool 
;  V14 loc12            bool 
;  V15 loc13            bool 
;  V16 loc14            bool 
;  V17 loc15            bool 
;  V18 OutArgs        lclBlk <na>  "OutgoingArgSpace"
*************** In compInitDebuggingInfo() for FalseLeakRepro.Program:Run(System.String[]):this
getVars() returned cVars = 0, extendOthers = true
info.compVarScopesCount = 18
    	VarNum 	LVNum 	      Name 	Beg 	End
 0: 	00h 	00h 	  V00 this 	000h   	232h
 1: 	01h 	01h 	  V01 arg1 	000h   	232h
 2: 	02h 	02h 	  V02 loc0 	000h   	232h
 3: 	03h 	03h 	  V03 loc1 	000h   	232h
 4: 	04h 	04h 	  V04 loc2 	000h   	232h
 5: 	05h 	05h 	  V05 loc3 	000h   	232h
 6: 	06h 	06h 	  V06 loc4 	000h   	232h
 7: 	07h 	07h 	  V07 loc5 	000h   	232h
 8: 	08h 	08h 	  V08 loc6 	000h   	232h
 9: 	09h 	09h 	  V09 loc7 	000h   	232h
10: 	0Ah 	0Ah 	  V10 loc8 	000h   	232h
11: 	0Bh 	0Bh 	  V11 loc9 	000h   	232h
12: 	0Ch 	0Ch 	 V12 loc10 	000h   	232h
13: 	0Dh 	0Dh 	 V13 loc11 	000h   	232h
14: 	0Eh 	0Eh 	 V14 loc12 	000h   	232h
15: 	0Fh 	0Fh 	 V15 loc13 	000h   	232h
16: 	10h 	10h 	 V16 loc14 	000h   	232h
17: 	11h 	11h 	 V17 loc15 	000h   	232h
New Basic Block BB01 [0000] created.
New scratch BB01
Debuggable code - Add new BB01 [0000] to perform initialization of variables
info.compStmtOffsetsCount    = 0
info.compStmtOffsetsImplicit = 0007h ( STACK_EMPTY NOP CALL_SITE )
*************** In fgFindBasicBlocks() for FalseLeakRepro.Program:Run(System.String[]):this
Marked V02 as a single def local
Marked V05 as a single def local
Marked V07 as a single def local
Marked V08 as a single def local
Marked V10 as a single def local
Marked V11 as a single def local
Marked V13 as a single def local
Marked V14 as a single def local
Marked V15 as a single def local
Marked V16 as a single def local
Marked V17 as a single def local
Jump targets:
  IL_0078
  IL_0083
  IL_00d5
  IL_00e0
  IL_00e1
  IL_00e6
  IL_0110
  IL_011c
  IL_0148
  IL_014b
  IL_0157
  IL_0158
  IL_0161
  IL_0166
  IL_01b1
  IL_01d9
  IL_01f4
  IL_0210
  IL_0224
  IL_0225
  IL_022a
New Basic Block BB02 [0001] created.
BB02 [000..078)
New Basic Block BB03 [0002] created.
BB03 [078..083)
New Basic Block BB04 [0003] created.
BB04 [083..0D5)
New Basic Block BB05 [0004] created.
BB05 [0D5..0D9)
New Basic Block BB06 [0005] created.
BB06 [0D9..0E0)
New Basic Block BB07 [0006] created.
BB07 [0E0..0E1)
New Basic Block BB08 [0007] created.
BB08 [0E1..0E6)
New Basic Block BB09 [0008] created.
BB09 [0E6..0F1)
New Basic Block BB10 [0009] created.
BB10 [0F1..110)
New Basic Block BB11 [0010] created.
BB11 [110..11C)
New Basic Block BB12 [0011] created.
BB12 [11C..145)
New Basic Block BB13 [0012] created.
BB13 [145..148)
New Basic Block BB14 [0013] created.
BB14 [148..14B)
New Basic Block BB15 [0014] created.
BB15 [14B..14F)
New Basic Block BB16 [0015] created.
BB16 [14F..157)
New Basic Block BB17 [0016] created.
BB17 [157..158)
New Basic Block BB18 [0017] created.
BB18 [158..161)
New Basic Block BB19 [0018] created.
BB19 [161..166)
New Basic Block BB20 [0019] created.
BB20 [166..1B1)
New Basic Block BB21 [0020] created.
BB21 [1B1..1CA)
New Basic Block BB22 [0021] created.
BB22 [1CA..1D9)
New Basic Block BB23 [0022] created.
BB23 [1D9..1EA)
New Basic Block BB24 [0023] created.
BB24 [1EA..1F4)
New Basic Block BB25 [0024] created.
BB25 [1F4..205)
New Basic Block BB26 [0025] created.
BB26 [205..210)
New Basic Block BB27 [0026] created.
BB27 [210..221)
New Basic Block BB28 [0027] created.
BB28 [221..224)
New Basic Block BB29 [0028] created.
BB29 [224..225)
New Basic Block BB30 [0029] created.
BB30 [225..22A)
New Basic Block BB31 [0030] created.
BB31 [22A..232)
EH clause #0:
  Flags:         0x2 (finally)
  TryOffset:     0x83
  TryLength:     0x52
  HandlerOffset: 0xd5
  HandlerLength: 0xc
  ClassToken:    0x0
EH clause #1:
  Flags:         0x2 (finally)
  TryOffset:     0x11c
  TryLength:     0x2f
  HandlerOffset: 0x14b
  HandlerLength: 0xd
  ClassToken:    0x0
*************** After fgFindBasicBlocks() has created the EH table

***************  Exception Handling table
index  eTry, eHnd
  0  ::            - Try at BB04..BB04 [083..0D5), Finally at BB05..BB07 [0D5..0E1)
  1  ::            - Try at BB12..BB14 [11C..14B), Finally at BB15..BB17 [14B..158)
*************** In fgNormalizeEH()

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd                 weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [???..???)                                     i internal 
BB02 [0001]  1                             1       [000..078)-> BB09 (always)                     
BB03 [0002]  1                             1       [078..083)                                     bwd bwd-target 
BB04 [0003]  1  0                          1       [083..0D5)-> BB08 (leave ) T0      try { }     keep try bwd 
BB05 [0004]  1     0                       1       [0D5..0D9)-> BB07 ( cond )    H0   finally {   keep bwd 
BB06 [0005]  1     0                       1       [0D9..0E0)                    H0               bwd 
BB07 [0006]  2     0                       1       [0E0..0E1)        (finret)    H0   }           bwd 
BB08 [0007]  1                             1       [0E1..0E6)                                     bwd 
BB09 [0008]  2                             1       [0E6..0F1)-> BB03 ( cond )                     bwd 
BB10 [0009]  1                             1       [0F1..110)-> BB19 (always)                     
BB11 [0010]  1                             1       [110..11C)                                     bwd bwd-target 
BB12 [0011]  1  1                          1       [11C..145)-> BB14 ( cond ) T1      try {       keep try bwd 
BB13 [0012]  1  1                          1       [145..148)-> BB20 (leave ) T1                  bwd 
BB14 [0013]  1  1                          1       [148..14B)-> BB18 (leave ) T1      }           bwd 
BB15 [0014]  1     1                       1       [14B..14F)-> BB17 ( cond )    H1   finally {   keep bwd 
BB16 [0015]  1     1                       1       [14F..157)                    H1               bwd 
BB17 [0016]  2     1                       1       [157..158)        (finret)    H1   }           bwd 
BB18 [0017]  1                             1       [158..161)                                     bwd 
BB19 [0018]  2                             1       [161..166)-> BB11 (always)                     bwd 
BB20 [0019]  1                             1       [166..1B1)-> BB30 (always)                     
BB21 [0020]  1                             1       [1B1..1CA)-> BB23 ( cond )                     bwd bwd-target 
BB22 [0021]  1                             1       [1CA..1D9)-> BB29 (always)                     bwd 
BB23 [0022]  1                             1       [1D9..1EA)-> BB25 ( cond )                     bwd 
BB24 [0023]  1                             1       [1EA..1F4)-> BB29 (always)                     bwd 
BB25 [0024]  1                             1       [1F4..205)-> BB27 ( cond )                     bwd 
BB26 [0025]  1                             1       [205..210)-> BB29 (always)                     bwd 
BB27 [0026]  1                             1       [210..221)-> BB29 ( cond )                     bwd 
BB28 [0027]  1                             1       [221..224)-> BB31 (always)                     bwd 
BB29 [0028]  4                             1       [224..225)                                     bwd 
BB30 [0029]  2                             1       [225..22A)-> BB21 (always)                     bwd 
BB31 [0030]  1                             1       [22A..232)        (return)                     
-----------------------------------------------------------------------------------------------------------------------------------------

***************  Exception Handling table
index  eTry, eHnd
  0  ::            - Try at BB04..BB04 [083..0D5), Finally at BB05..BB07 [0D5..0E1)
  1  ::            - Try at BB12..BB14 [11C..14B), Finally at BB15..BB17 [14B..158)
No EH normalization performed.
CLFLG_MINOPT set for method FalseLeakRepro.Program:Run(System.String[]):this
IL Code Size,Instr  562, 209, Basic Block count  31, Local Variable Num,Ref count  19, 58 for method FalseLeakRepro.Program:Run(System.String[]):this
IL Code Size,Instr  562, 209, Basic Block count  31, Local Variable Num,Ref count  19, 58 for method FalseLeakRepro.Program:Run(System.String[]):this
OPTIONS: opts.MinOpts() == true
Basic block list for 'FalseLeakRepro.Program:Run(System.String[]):this'

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd                 weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [???..???)                                     i internal 
BB02 [0001]  1                             1       [000..078)-> BB09 (always)                     
BB03 [0002]  1                             1       [078..083)                                     bwd bwd-target 
BB04 [0003]  1  0                          1       [083..0D5)-> BB08 (leave ) T0      try { }     keep try bwd 
BB05 [0004]  1     0                       1       [0D5..0D9)-> BB07 ( cond )    H0   finally {   keep bwd 
BB06 [0005]  1     0                       1       [0D9..0E0)                    H0               bwd 
BB07 [0006]  2     0                       1       [0E0..0E1)        (finret)    H0   }           bwd 
BB08 [0007]  1                             1       [0E1..0E6)                                     bwd 
BB09 [0008]  2                             1       [0E6..0F1)-> BB03 ( cond )                     bwd 
BB10 [0009]  1                             1       [0F1..110)-> BB19 (always)                     
BB11 [0010]  1                             1       [110..11C)                                     bwd bwd-target 
BB12 [0011]  1  1                          1       [11C..145)-> BB14 ( cond ) T1      try {       keep try bwd 
BB13 [0012]  1  1                          1       [145..148)-> BB20 (leave ) T1                  bwd 
BB14 [0013]  1  1                          1       [148..14B)-> BB18 (leave ) T1      }           bwd 
BB15 [0014]  1     1                       1       [14B..14F)-> BB17 ( cond )    H1   finally {   keep bwd 
BB16 [0015]  1     1                       1       [14F..157)                    H1               bwd 
BB17 [0016]  2     1                       1       [157..158)        (finret)    H1   }           bwd 
BB18 [0017]  1                             1       [158..161)                                     bwd 
BB19 [0018]  2                             1       [161..166)-> BB11 (always)                     bwd 
BB20 [0019]  1                             1       [166..1B1)-> BB30 (always)                     
BB21 [0020]  1                             1       [1B1..1CA)-> BB23 ( cond )                     bwd bwd-target 
BB22 [0021]  1                             1       [1CA..1D9)-> BB29 (always)                     bwd 
BB23 [0022]  1                             1       [1D9..1EA)-> BB25 ( cond )                     bwd 
BB24 [0023]  1                             1       [1EA..1F4)-> BB29 (always)                     bwd 
BB25 [0024]  1                             1       [1F4..205)-> BB27 ( cond )                     bwd 
BB26 [0025]  1                             1       [205..210)-> BB29 (always)                     bwd 
BB27 [0026]  1                             1       [210..221)-> BB29 ( cond )                     bwd 
BB28 [0027]  1                             1       [221..224)-> BB31 (always)                     bwd 
BB29 [0028]  4                             1       [224..225)                                     bwd 
BB30 [0029]  2                             1       [225..22A)-> BB21 (always)                     bwd 
BB31 [0030]  1                             1       [22A..232)        (return)                     
-----------------------------------------------------------------------------------------------------------------------------------------

*************** Starting PHASE Pre-import

*************** Finishing PHASE Pre-import

*************** Starting PHASE Profile incorporation
BBOPT set, but no profile data available (hr=80004001)

*************** Finishing PHASE Profile incorporation [no changes]

*************** Starting PHASE Importation
*************** In impImport() for FalseLeakRepro.Program:Run(System.String[]):this
Marking leading BBF_INTERNAL block BB01 as BBF_IMPORTED

impImportBlockPending for BB02

Importing BB02 (PC=000) of 'FalseLeakRepro.Program:Run(System.String[]):this'
    [ 0]   0 (0x000) nop

STMT00001 (IL 0x000...  ???)
               [000001] ------------              *  NO_OP     void  

    [ 0]   1 (0x001) call 0A00000D
In Compiler::impImportCall: opcode is call, kind=0, callRetType is struct, structSize is 8

lvaGrabTemp returning 19 (V19 tmp1) called for impSpillStackEnsure.


STMT00002 (IL 0x001...  ???)
               [000005] -AC-G-------              *  ASG       struct (copy)
               [000003] D------N----              +--*  LCL_VAR   struct<System.DateTime, 8> V19 tmp1         
               [000002] --C-G-------              \--*  CALL      struct System.DateTime.get_Now

    [ 1]   6 (0x006) stloc.1

STMT00003 (IL 0x006...  ???)
               [000009] -A----------              *  ASG       struct (copy)
               [000007] D------N----              +--*  LCL_VAR   struct<System.DateTime, 8> V03 loc1         
               [000006] ------------              \--*  LCL_VAR   struct<System.DateTime, 8> V19 tmp1         

    [ 0]   7 (0x007) ldloca.s 1
    [ 1]   9 (0x009) call 0A00000E
In Compiler::impImportCall: opcode is call, kind=0, callRetType is ref, structSize is 0

lvaGrabTemp returning 20 (V20 tmp2) called for impSpillStackEnsure.


STMT00004 (IL 0x007...  ???)
               [000014] -AC-G-------              *  ASG       ref   
               [000013] D------N----              +--*  LCL_VAR   ref    V20 tmp2         
               [000012] --C-G-------              \--*  CALL      ref    System.DateTime.ToString
               [000011] ------------ this in rcx     \--*  ADDR      byref 
               [000010] -------N----                    \--*  LCL_VAR   struct<System.DateTime, 8> V03 loc1         
Marked V20 as a single def temp

lvaSetClass: setting class for V20 to (00007FFDB6DAD720) System.String 

    [ 1]  14 (0x00e) ldstr 70000001
    [ 2]  19 (0x013) call 0A00000F
In Compiler::impImportCall: opcode is call, kind=0, callRetType is ref, structSize is 0

lvaGrabTemp returning 21 (V21 tmp3) called for impSpillStackEnsure.


STMT00005 (IL 0x00E...  ???)
               [000019] -AC-G-------              *  ASG       ref   
               [000018] D------N----              +--*  LCL_VAR   ref    V21 tmp3         
               [000017] --C-G-------              \--*  CALL      ref    System.String.Concat
               [000015] ------------ arg0            +--*  LCL_VAR   ref    V20 tmp2         
               [000016] ------------ arg1            \--*  CNS_STR   ref   <string constant>
Marked V21 as a single def temp

lvaSetClass: setting class for V21 to (00007FFDB6DAD720) System.String 

    [ 1]  24 (0x018) call 0A000010
In Compiler::impImportCall: opcode is call, kind=0, callRetType is void, structSize is 0


STMT00006 (IL 0x018...  ???)
               [000021] --C-G-------              *  CALL      void   System.Console.WriteLine
               [000020] ------------ arg0         \--*  LCL_VAR   ref    V21 tmp3         

    [ 0]  29 (0x01d) nop

STMT00007 (IL 0x01D...  ???)
               [000022] ------------              *  NO_OP     void  

    [ 0]  30 (0x01e) ldarg.0
    [ 1]  31 (0x01f) newobj
lvaGrabTemp returning 22 (V22 tmp4) called for NewObj constructor temp.


STMT00008 (IL 0x01E...  ???)
               [000027] -A----------              *  ASG       ref   
               [000026] D------N----              +--*  LCL_VAR   ref    V22 tmp4         
               [000025] ------------              \--*  ALLOCOBJ  ref   
               [000024] H-----------                 \--*  CNS_INT(h) long   0x7ffdb7022b70 method
Marked V22 as a single def local

lvaSetClass: setting class for V22 to (00007FFDB7022B70) FalseLeakRepro.List  [exact]
 06000003
In Compiler::impImportCall: opcode is newobj, kind=0, callRetType is void, structSize is 0


STMT00009 (IL   ???...  ???)
               [000029] --C-G-------              *  CALL      void   FalseLeakRepro.List..ctor
               [000028] ------------ this in rcx  \--*  LCL_VAR   ref    V22 tmp4         

    [ 2]  36 (0x024) stfld 04000005

STMT00010 (IL 0x024...  ???)
               [000032] -A-XG-------              *  ASG       ref   
               [000031] ---XG--N----              +--*  FIELD     ref    _myList
               [000023] ------------              |  \--*  LCL_VAR   ref    V00 this         
               [000030] ------------              \--*  LCL_VAR   ref    V22 tmp4         

    [ 0]  41 (0x029) ldarg.0
    [ 1]  42 (0x02a) ldfld 04000005
    [ 1]  47 (0x02f) ldfld 04000003
    [ 1]  52 (0x034) newobj
lvaGrabTemp returning 23 (V23 tmp5) called for NewObj constructor temp.


STMT00011 (IL 0x029...  ???)
               [000039] -A----------              *  ASG       ref   
               [000038] D------N----              +--*  LCL_VAR   ref    V23 tmp5         
               [000037] ------------              \--*  ALLOCOBJ  ref   
               [000036] H-----------                 \--*  CNS_INT(h) long   0x7ffdb6c458b8 token
Marked V23 as a single def local

lvaSetClass: setting class for V23 to (00007FFDB6C458B8) System.Object  [exact]
 0A00000C
In Compiler::impImportCall: opcode is newobj, kind=0, callRetType is void, structSize is 0

lvaGrabTemp returning 24 (V24 tmp6) called for impAppendStmt.


STMT00013 (IL   ???...  ???)
               [000043] -A-XG-------              *  ASG       ref   
               [000042] D------N----              +--*  LCL_VAR   ref    V24 tmp6         
               [000035] ---XG-------              \--*  FIELD     ref    Head
               [000034] ---XG-------                 \--*  FIELD     ref    _myList
               [000033] ------------                    \--*  LCL_VAR   ref    V00 this         
Marked V24 as a single def temp
Querying runtime about current class of field FalseLeakRepro.List.Head (declared as FalseLeakRepro.Node)
Field's current class not available

lvaSetClass: setting class for V24 to (00007FFDB70260C8) FalseLeakRepro.Node 


STMT00012 (IL   ???...  ???)
               [000041] --C-G-------              *  CALL      void   System.Object..ctor
               [000040] ------------ this in rcx  \--*  LCL_VAR   ref    V23 tmp5         

    [ 2]  57 (0x039) stfld 04000002

STMT00014 (IL 0x039...  ???)
               [000047] -A-XG-------              *  ASG       ref   
               [000046] ---XG--N----              +--*  FIELD     ref    Data
               [000044] ------------              |  \--*  LCL_VAR   ref    V24 tmp6         
               [000045] ------------              \--*  LCL_VAR   ref    V23 tmp5         

    [ 0]  62 (0x03e) ldarg.0
    [ 1]  63 (0x03f) ldftn 06000007
    [ 2]  69 (0x045) newobj
lvaGrabTemp returning 25 (V25 tmp7) called for NewObj constructor temp.


STMT00015 (IL 0x03E...  ???)
               [000053] -A----------              *  ASG       ref   
               [000052] D------N----              +--*  LCL_VAR   ref    V25 tmp7         
               [000051] ------------              \--*  ALLOCOBJ  ref   
               [000050] H-----------                 \--*  CNS_INT(h) long   0x7ffdb7026348 token
Marked V25 as a single def local

lvaSetClass: setting class for V25 to (00007FFDB7026348) System.Threading.ParameterizedThreadStart  [exact]
 0A000011
In Compiler::impImportCall: opcode is newobj, kind=0, callRetType is void, structSize is 0

fgOptimizeDelegateConstructor: optimized


STMT00016 (IL   ???...  ???)
               [000055] --C-G-------              *  CALL      void   System.MulticastDelegate.CtorClosed
               [000054] ------------ this in rcx  +--*  LCL_VAR   ref    V25 tmp7         
               [000048] ------------ arg1         +--*  LCL_VAR   ref    V00 this         
               [000049] ------------ arg2         \--*  FTN_ADDR  long   FalseLeakRepro.Program.<Run>b__3_0


    [ 1]  74 (0x04a) newobj
lvaGrabTemp returning 26 (V26 tmp8) called for NewObj constructor temp.

Spilling stack for finalizable newobj


STMT00017 (IL 0x04A...  ???)
               [000060] -A----------              *  ASG       ref   
               [000059] D------N----              +--*  LCL_VAR   ref    V26 tmp8         
               [000058] ------------              \--*  ALLOCOBJ  ref   
               [000057] H-----------                 \--*  CNS_INT(h) long   0x7ffdb6dc4e80 token
Marked V26 as a single def local

lvaSetClass: setting class for V26 to (00007FFDB6DC4E80) System.Threading.Thread  [exact]
 0A000012
In Compiler::impImportCall: opcode is newobj, kind=0, callRetType is void, structSize is 0


STMT00018 (IL   ???...  ???)
               [000062] --C-G-------              *  CALL      void   System.Threading.Thread..ctor
               [000061] ------------ this in rcx  +--*  LCL_VAR   ref    V26 tmp8         
               [000056] ------------ arg1         \--*  LCL_VAR   ref    V25 tmp7         

    [ 1]  79 (0x04f) stloc.0
lvaUpdateClass: Updating class for V02 from (00007FFDB6DC4E80) System.Threading.Thread to (00007FFDB6DC4E80) System.Threading.Thread [exact]


STMT00019 (IL 0x04F...  ???)
               [000065] -A----------              *  ASG       ref   
               [000064] D------N----              +--*  LCL_VAR   ref    V02 loc0         
               [000063] ------------              \--*  LCL_VAR   ref    V26 tmp8         

    [ 0]  80 (0x050) ldloc.0
    [ 1]  81 (0x051) callvirt 0A000013
In Compiler::impImportCall: opcode is callvirt, kind=0, callRetType is void, structSize is 0


STMT00020 (IL 0x050...  ???)
               [000067] --C-G-------              *  CALL nullcheck void   System.Threading.Thread.Start
               [000066] ------------ this in rcx  \--*  LCL_VAR   ref    V02 loc0         

    [ 0]  86 (0x056) nop

STMT00021 (IL 0x056...  ???)
               [000068] ------------              *  NO_OP     void  

    [ 0]  87 (0x057) call 0A00000D
In Compiler::impImportCall: opcode is call, kind=0, callRetType is struct, structSize is 8

lvaGrabTemp returning 27 (V27 tmp9) called for impSpillStackEnsure.


STMT00022 (IL 0x057...  ???)
               [000072] -AC-G-------              *  ASG       struct (copy)
               [000070] D------N----              +--*  LCL_VAR   struct<System.DateTime, 8> V27 tmp9         
               [000069] --C-G-------              \--*  CALL      struct System.DateTime.get_Now

    [ 1]  92 (0x05c) stloc.1

STMT00023 (IL 0x05C...  ???)
               [000076] -A----------              *  ASG       struct (copy)
               [000074] D------N----              +--*  LCL_VAR   struct<System.DateTime, 8> V03 loc1         
               [000073] ------------              \--*  LCL_VAR   struct<System.DateTime, 8> V27 tmp9         

    [ 0]  93 (0x05d) ldloca.s 1
    [ 1]  95 (0x05f) call 0A00000E
In Compiler::impImportCall: opcode is call, kind=0, callRetType is ref, structSize is 0

lvaGrabTemp returning 28 (V28 tmp10) called for impSpillStackEnsure.


STMT00024 (IL 0x05D...  ???)
               [000081] -AC-G-------              *  ASG       ref   
               [000080] D------N----              +--*  LCL_VAR   ref    V28 tmp10        
               [000079] --C-G-------              \--*  CALL      ref    System.DateTime.ToString
               [000078] ------------ this in rcx     \--*  ADDR      byref 
               [000077] -------N----                    \--*  LCL_VAR   struct<System.DateTime, 8> V03 loc1         
Marked V28 as a single def temp

lvaSetClass: setting class for V28 to (00007FFDB6DAD720) System.String 

    [ 1] 100 (0x064) ldstr 7000001F
    [ 2] 105 (0x069) call 0A00000F
In Compiler::impImportCall: opcode is call, kind=0, callRetType is ref, structSize is 0

lvaGrabTemp returning 29 (V29 tmp11) called for impSpillStackEnsure.


STMT00025 (IL 0x064...  ???)
               [000086] -AC-G-------              *  ASG       ref   
               [000085] D------N----              +--*  LCL_VAR   ref    V29 tmp11        
               [000084] --C-G-------              \--*  CALL      ref    System.String.Concat
               [000082] ------------ arg0            +--*  LCL_VAR   ref    V28 tmp10        
               [000083] ------------ arg1            \--*  CNS_STR   ref   <string constant>
Marked V29 as a single def temp

lvaSetClass: setting class for V29 to (00007FFDB6DAD720) System.String 

    [ 1] 110 (0x06e) call 0A000010
In Compiler::impImportCall: opcode is call, kind=0, callRetType is void, structSize is 0


STMT00026 (IL 0x06E...  ???)
               [000088] --C-G-------              *  CALL      void   System.Console.WriteLine
               [000087] ------------ arg0         \--*  LCL_VAR   ref    V29 tmp11        

    [ 0] 115 (0x073) nop

STMT00027 (IL 0x073...  ???)
               [000089] ------------              *  NO_OP     void  

    [ 0] 116 (0x074) ldc.i4.0 0
    [ 1] 117 (0x075) stloc.2

STMT00028 (IL 0x074...  ???)
               [000092] -A----------              *  ASG       int   
               [000091] D------N----              +--*  LCL_VAR   int    V04 loc2         
               [000090] ------------              \--*  CNS_INT   int    0

    [ 0] 118 (0x076) br.s

STMT00029 (IL 0x076...  ???)
               [000093] ------------              *  NOP       void  

impImportBlockPending for BB09

Importing BB09 (PC=230) of 'FalseLeakRepro.Program:Run(System.String[]):this'
    [ 0] 230 (0x0e6) ldloc.2
    [ 1] 231 (0x0e7) ldc.i4.s 10
    [ 2] 233 (0x0e9) clt
    [ 1] 235 (0x0eb) stloc.s 5

STMT00030 (IL 0x0E6...  ???)
               [000098] -A----------              *  ASG       int   
               [000097] D------N----              +--*  LCL_VAR   int    V07 loc5         
               [000096] ------------              \--*  LT        int   
               [000094] ------------                 +--*  LCL_VAR   int    V04 loc2         
               [000095] ------------                 \--*  CNS_INT   int    10

    [ 0] 237 (0x0ed) ldloc.s 5
    [ 1] 239 (0x0ef) brtrue.s

STMT00031 (IL 0x0ED...  ???)
               [000102] ------------              *  JTRUE     void  
               [000101] ------------              \--*  NE        int   
               [000099] ------------                 +--*  LCL_VAR   int    V07 loc5         
               [000100] ------------                 \--*  CNS_INT   int    0

impImportBlockPending for BB10

impImportBlockPending for BB03

Importing BB03 (PC=120) of 'FalseLeakRepro.Program:Run(System.String[]):this'
    [ 0] 120 (0x078) nop

STMT00032 (IL 0x078...  ???)
               [000103] ------------              *  NO_OP     void  

    [ 0] 121 (0x079) ldarg.0
    [ 1] 122 (0x07a) ldfld 04000005
    [ 1] 127 (0x07f) stloc.3Querying runtime about current class of field FalseLeakRepro.Program._myList (declared as FalseLeakRepro.List)
Field's current class not available


STMT00033 (IL 0x079...  ???)
               [000107] -A-XG-------              *  ASG       ref   
               [000106] D------N----              +--*  LCL_VAR   ref    V05 loc3         
               [000105] ---XG-------              \--*  FIELD     ref    _myList
               [000104] ------------                 \--*  LCL_VAR   ref    V00 this         

    [ 0] 128 (0x080) ldc.i4.0 0
    [ 1] 129 (0x081) stloc.s 4

STMT00034 (IL 0x080...  ???)
               [000110] -A----------              *  ASG       int   
               [000109] D------N----              +--*  LCL_VAR   int    V06 loc4         
               [000108] ------------              \--*  CNS_INT   int    0

impImportBlockPending for BB04

impImportBlockPending for BB05

Importing BB04 (PC=131) of 'FalseLeakRepro.Program:Run(System.String[]):this'
    [ 0] 131 (0x083) ldloc.3
    [ 1] 132 (0x084) ldloca.s 4
    [ 2] 134 (0x086) call 0A000014
In Compiler::impImportCall: opcode is call, kind=0, callRetType is void, structSize is 0


STMT00035 (IL 0x083...  ???)
               [000114] --C-G-------              *  CALL      void   System.Threading.Monitor.Enter
               [000111] ------------ arg0         +--*  LCL_VAR   ref    V05 loc3         
               [000113] ------------ arg1         \--*  ADDR      byref 
               [000112] -------N----                 \--*  LCL_VAR   int    V06 loc4         

    [ 0] 139 (0x08b) nop

STMT00036 (IL 0x08B...  ???)
               [000115] ------------              *  NO_OP     void  

    [ 0] 140 (0x08c) nop

STMT00037 (IL 0x08C...  ???)
               [000116] ------------              *  NO_OP     void  

    [ 0] 141 (0x08d) ldarg.0
    [ 1] 142 (0x08e) ldfld 04000005
    [ 1] 147 (0x093) ldfld 04000003
    [ 1] 152 (0x098) newobj
lvaGrabTemp returning 30 (V30 tmp12) called for NewObj constructor temp.


STMT00038 (IL 0x08D...  ???)
               [000123] -A----------              *  ASG       ref   
               [000122] D------N----              +--*  LCL_VAR   ref    V30 tmp12        
               [000121] ------------              \--*  ALLOCOBJ  ref   
               [000120] H-----------                 \--*  CNS_INT(h) long   0x7ffdb70260c8 method
Marked V30 as a single def local

lvaSetClass: setting class for V30 to (00007FFDB70260C8) FalseLeakRepro.Node  [exact]
 06000001
In Compiler::impImportCall: opcode is newobj, kind=0, callRetType is void, structSize is 0

lvaGrabTemp returning 31 (V31 tmp13) called for impAppendStmt.


STMT00040 (IL   ???...  ???)
               [000127] -A-XG-------              *  ASG       ref   
               [000126] D------N----              +--*  LCL_VAR   ref    V31 tmp13        
               [000119] ---XG-------              \--*  FIELD     ref    Head
               [000118] ---XG-------                 \--*  FIELD     ref    _myList
               [000117] ------------                    \--*  LCL_VAR   ref    V00 this         
Marked V31 as a single def temp
Querying runtime about current class of field FalseLeakRepro.List.Head (declared as FalseLeakRepro.Node)
Field's current class not available

lvaSetClass: setting class for V31 to (00007FFDB70260C8) FalseLeakRepro.Node 


STMT00039 (IL   ???...  ???)
               [000125] --C-G-------              *  CALL      void   FalseLeakRepro.Node..ctor
               [000124] ------------ this in rcx  \--*  LCL_VAR   ref    V30 tmp12        

    [ 2] 157 (0x09d) stfld 04000001

STMT00041 (IL 0x09D...  ???)
               [000131] -A-XG-------              *  ASG       ref   
               [000130] ---XG--N----              +--*  FIELD     ref    Next
               [000128] ------------              |  \--*  LCL_VAR   ref    V31 tmp13        
               [000129] ------------              \--*  LCL_VAR   ref    V30 tmp12        

    [ 0] 162 (0x0a2) ldarg.0
    [ 1] 163 (0x0a3) ldfld 04000005
    [ 1] 168 (0x0a8) ldarg.0
    [ 2] 169 (0x0a9) ldfld 04000005
    [ 2] 174 (0x0ae) ldfld 04000003
    [ 2] 179 (0x0b3) ldfld 04000001
    [ 2] 184 (0x0b8) stfld 04000003

STMT00042 (IL 0x0A2...  ???)
               [000139] -A-XG-------              *  ASG       ref   
               [000138] ---XG--N----              +--*  FIELD     ref    Head
               [000133] ---XG-------              |  \--*  FIELD     ref    _myList
               [000132] ------------              |     \--*  LCL_VAR   ref    V00 this         
               [000137] ---XG-------              \--*  FIELD     ref    Next
               [000136] ---XG-------                 \--*  FIELD     ref    Head
               [000135] ---XG-------                    \--*  FIELD     ref    _myList
               [000134] ------------                       \--*  LCL_VAR   ref    V00 this         

    [ 0] 189 (0x0bd) ldarg.0
    [ 1] 190 (0x0be) ldfld 04000005
    [ 1] 195 (0x0c3) ldfld 04000003
    [ 1] 200 (0x0c8) newobj
lvaGrabTemp returning 32 (V32 tmp14) called for NewObj constructor temp.


STMT00043 (IL 0x0BD...  ???)
               [000146] -A----------              *  ASG       ref   
               [000145] D------N----              +--*  LCL_VAR   ref    V32 tmp14        
               [000144] ------------              \--*  ALLOCOBJ  ref   
               [000143] H-----------                 \--*  CNS_INT(h) long   0x7ffdb6c458b8 token
Marked V32 as a single def local

lvaSetClass: setting class for V32 to (00007FFDB6C458B8) System.Object  [exact]
 0A00000C
In Compiler::impImportCall: opcode is newobj, kind=0, callRetType is void, structSize is 0

lvaGrabTemp returning 33 (V33 tmp15) called for impAppendStmt.


STMT00045 (IL   ???...  ???)
               [000150] -A-XG-------              *  ASG       ref   
               [000149] D------N----              +--*  LCL_VAR   ref    V33 tmp15        
               [000142] ---XG-------              \--*  FIELD     ref    Head
               [000141] ---XG-------                 \--*  FIELD     ref    _myList
               [000140] ------------                    \--*  LCL_VAR   ref    V00 this         
Marked V33 as a single def temp
Querying runtime about current class of field FalseLeakRepro.List.Head (declared as FalseLeakRepro.Node)
Field's current class not available

lvaSetClass: setting class for V33 to (00007FFDB70260C8) FalseLeakRepro.Node 


STMT00044 (IL   ???...  ???)
               [000148] --C-G-------              *  CALL      void   System.Object..ctor
               [000147] ------------ this in rcx  \--*  LCL_VAR   ref    V32 tmp14        

    [ 2] 205 (0x0cd) stfld 04000002

STMT00046 (IL 0x0CD...  ???)
               [000154] -A-XG-------              *  ASG       ref   
               [000153] ---XG--N----              +--*  FIELD     ref    Data
               [000151] ------------              |  \--*  LCL_VAR   ref    V33 tmp15        
               [000152] ------------              \--*  LCL_VAR   ref    V32 tmp14        

    [ 0] 210 (0x0d2) nop

STMT00047 (IL 0x0D2...  ???)
               [000155] ------------              *  NO_OP     void  

    [ 0] 211 (0x0d3) leave.s 00E1
Before import CEE_LEAVE in BB04 (targetting BB08):

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd                 weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [???..???)                                     i internal 
BB02 [0001]  1                             1       [000..078)-> BB09 (always)                     i newobj 
BB03 [0002]  1                             1       [078..083)                                     i bwd bwd-target 
BB04 [0003]  1  0                          1       [083..0D5)-> BB08 (leave ) T0      try { }     keep try newobj bwd 
BB05 [0004]  1     0                       1       [0D5..0D9)-> BB07 ( cond )    H0   finally {   keep bwd 
BB06 [0005]  1     0                       1       [0D9..0E0)                    H0               bwd 
BB07 [0006]  2     0                       1       [0E0..0E1)        (finret)    H0   }           bwd 
BB08 [0007]  1                             1       [0E1..0E6)                                     bwd 
BB09 [0008]  2                             1       [0E6..0F1)-> BB03 ( cond )                     i bwd 
BB10 [0009]  1                             1       [0F1..110)-> BB19 (always)                     
BB11 [0010]  1                             1       [110..11C)                                     bwd bwd-target 
BB12 [0011]  1  1                          1       [11C..145)-> BB14 ( cond ) T1      try {       keep try bwd 
BB13 [0012]  1  1                          1       [145..148)-> BB20 (leave ) T1                  bwd 
BB14 [0013]  1  1                          1       [148..14B)-> BB18 (leave ) T1      }           bwd 
BB15 [0014]  1     1                       1       [14B..14F)-> BB17 ( cond )    H1   finally {   keep bwd 
BB16 [0015]  1     1                       1       [14F..157)                    H1               bwd 
BB17 [0016]  2     1                       1       [157..158)        (finret)    H1   }           bwd 
BB18 [0017]  1                             1       [158..161)                                     bwd 
BB19 [0018]  2                             1       [161..166)-> BB11 (always)                     bwd 
BB20 [0019]  1                             1       [166..1B1)-> BB30 (always)                     
BB21 [0020]  1                             1       [1B1..1CA)-> BB23 ( cond )                     bwd bwd-target 
BB22 [0021]  1                             1       [1CA..1D9)-> BB29 (always)                     bwd 
BB23 [0022]  1                             1       [1D9..1EA)-> BB25 ( cond )                     bwd 
BB24 [0023]  1                             1       [1EA..1F4)-> BB29 (always)                     bwd 
BB25 [0024]  1                             1       [1F4..205)-> BB27 ( cond )                     bwd 
BB26 [0025]  1                             1       [205..210)-> BB29 (always)                     bwd 
BB27 [0026]  1                             1       [210..221)-> BB29 ( cond )                     bwd 
BB28 [0027]  1                             1       [221..224)-> BB31 (always)                     bwd 
BB29 [0028]  4                             1       [224..225)                                     bwd 
BB30 [0029]  2                             1       [225..22A)-> BB21 (always)                     bwd 
BB31 [0030]  1                             1       [22A..232)        (return)                     
-----------------------------------------------------------------------------------------------------------------------------------------

***************  Exception Handling table
index  eTry, eHnd
  0  ::            - Try at BB04..BB04 [083..0D5), Finally at BB05..BB07 [0D5..0E1)
  1  ::            - Try at BB12..BB14 [11C..14B), Finally at BB15..BB17 [14B..158)
fgFindInsertPoint(regionIndex=0, putInTryRegion=true, startBlk=BB01, endBlk=BB00, nearBlk=BB04, jumpBlk=BB00, runRarely=false)
fgNewBBinRegion(jumpKind=8, tryIndex=0, hndIndex=0, putInFilter=false, runRarely=false, insertAtEnd=false): inserting after BB04
New Basic Block BB32 [0031] created.
impImportLeave - jumping out of a finally-protected try (EH#0), convert block BB04 to BBJ_ALWAYS, add BBJ_CALLFINALLY block BB32
New Basic Block BB33 [0032] created.
impImportLeave - jumping out of a finally-protected try (EH#0), created step (BBJ_ALWAYS) block BB33
impImportLeave - final destination of step blocks set to BB08

impImportBlockPending for BB08

After import CEE_LEAVE:

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd                 weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [???..???)                                     i internal 
BB02 [0001]  1                             1       [000..078)-> BB09 (always)                     i newobj 
BB03 [0002]  1                             1       [078..083)                                     i bwd bwd-target 
BB04 [0003]  1  0                          1       [083..0D5)-> BB32 (always) T0      try { }     keep try newobj bwd 
BB32 [0031]  1                             1       [???..???)-> BB05 (callf )                     i internal 
BB33 [0032]  0                             1       [???..???)-> BB08 (ALWAYS)                     i internal KEEP 
BB05 [0004]  1     0                       1       [0D5..0D9)-> BB07 ( cond )    H0   finally {   keep bwd 
BB06 [0005]  1     0                       1       [0D9..0E0)                    H0               bwd 
BB07 [0006]  2     0                       1       [0E0..0E1)        (finret)    H0   }           bwd 
BB08 [0007]  1                             1       [0E1..0E6)                                     bwd 
BB09 [0008]  2                             1       [0E6..0F1)-> BB03 ( cond )                     i bwd 
BB10 [0009]  1                             1       [0F1..110)-> BB19 (always)                     
BB11 [0010]  1                             1       [110..11C)                                     bwd bwd-target 
BB12 [0011]  1  1                          1       [11C..145)-> BB14 ( cond ) T1      try {       keep try bwd 
BB13 [0012]  1  1                          1       [145..148)-> BB20 (leave ) T1                  bwd 
BB14 [0013]  1  1                          1       [148..14B)-> BB18 (leave ) T1      }           bwd 
BB15 [0014]  1     1                       1       [14B..14F)-> BB17 ( cond )    H1   finally {   keep bwd 
BB16 [0015]  1     1                       1       [14F..157)                    H1               bwd 
BB17 [0016]  2     1                       1       [157..158)        (finret)    H1   }           bwd 
BB18 [0017]  1                             1       [158..161)                                     bwd 
BB19 [0018]  2                             1       [161..166)-> BB11 (always)                     bwd 
BB20 [0019]  1                             1       [166..1B1)-> BB30 (always)                     
BB21 [0020]  1                             1       [1B1..1CA)-> BB23 ( cond )                     bwd bwd-target 
BB22 [0021]  1                             1       [1CA..1D9)-> BB29 (always)                     bwd 
BB23 [0022]  1                             1       [1D9..1EA)-> BB25 ( cond )                     bwd 
BB24 [0023]  1                             1       [1EA..1F4)-> BB29 (always)                     bwd 
BB25 [0024]  1                             1       [1F4..205)-> BB27 ( cond )                     bwd 
BB26 [0025]  1                             1       [205..210)-> BB29 (always)                     bwd 
BB27 [0026]  1                             1       [210..221)-> BB29 ( cond )                     bwd 
BB28 [0027]  1                             1       [221..224)-> BB31 (always)                     bwd 
BB29 [0028]  4                             1       [224..225)                                     bwd 
BB30 [0029]  2                             1       [225..22A)-> BB21 (always)                     bwd 
BB31 [0030]  1                             1       [22A..232)        (return)                     
-----------------------------------------------------------------------------------------------------------------------------------------

***************  Exception Handling table
index  eTry, eHnd
  0  ::            - Try at BB04..BB04 [083..0D5), Finally at BB05..BB07 [0D5..0E1)
  1  ::            - Try at BB12..BB14 [11C..14B), Finally at BB15..BB17 [14B..158)


STMT00048 (IL 0x0D3...  ???)
               [000156] ------------              *  NOP       void  

impImportBlockPending for BB32

Importing BB08 (PC=225) of 'FalseLeakRepro.Program:Run(System.String[]):this'
    [ 0] 225 (0x0e1) nop

STMT00049 (IL 0x0E1...  ???)
               [000157] ------------              *  NO_OP     void  

    [ 0] 226 (0x0e2) ldloc.2
    [ 1] 227 (0x0e3) ldc.i4.1 1
    [ 2] 228 (0x0e4) add
    [ 1] 229 (0x0e5) stloc.2

STMT00050 (IL 0x0E2...  ???)
               [000162] -A----------              *  ASG       int   
               [000161] D------N----              +--*  LCL_VAR   int    V04 loc2         
               [000160] ------------              \--*  ADD       int   
               [000158] ------------                 +--*  LCL_VAR   int    V04 loc2         
               [000159] ------------                 \--*  CNS_INT   int    1

impImportBlockPending for BB09

Importing BB05 (PC=213) of 'FalseLeakRepro.Program:Run(System.String[]):this'
    [ 0] 213 (0x0d5) ldloc.s 4
    [ 1] 215 (0x0d7) brfalse.s

STMT00051 (IL 0x0D5...  ???)
               [000166] ------------              *  JTRUE     void  
               [000165] ------------              \--*  EQ        int   
               [000163] ------------                 +--*  LCL_VAR   int    V06 loc4         
               [000164] ------------                 \--*  CNS_INT   int    0

impImportBlockPending for BB06

impImportBlockPending for BB07

Importing BB07 (PC=224) of 'FalseLeakRepro.Program:Run(System.String[]):this'
    [ 0] 224 (0x0e0) endfinally

STMT00052 (IL 0x0E0...  ???)
               [000167] ------------              *  RETFILT   void  

Importing BB06 (PC=217) of 'FalseLeakRepro.Program:Run(System.String[]):this'
    [ 0] 217 (0x0d9) ldloc.3
    [ 1] 218 (0x0da) call 0A000015
In Compiler::impImportCall: opcode is call, kind=0, callRetType is void, structSize is 0


STMT00053 (IL 0x0D9...  ???)
               [000169] --C-G-------              *  CALL      void   System.Threading.Monitor.Exit
               [000168] ------------ arg0         \--*  LCL_VAR   ref    V05 loc3         

    [ 0] 223 (0x0df) nop

STMT00054 (IL 0x0DF...  ???)
               [000170] ------------              *  NO_OP     void  

impImportBlockPending for BB07

Importing BB10 (PC=241) of 'FalseLeakRepro.Program:Run(System.String[]):this'
    [ 0] 241 (0x0f1) call 0A00000D
In Compiler::impImportCall: opcode is call, kind=0, callRetType is struct, structSize is 8

lvaGrabTemp returning 34 (V34 tmp16) called for impSpillStackEnsure.


STMT00055 (IL 0x0F1...  ???)
               [000174] -AC-G-------              *  ASG       struct (copy)
               [000172] D------N----              +--*  LCL_VAR   struct<System.DateTime, 8> V34 tmp16        
               [000171] --C-G-------              \--*  CALL      struct System.DateTime.get_Now

    [ 1] 246 (0x0f6) stloc.1

STMT00056 (IL 0x0F6...  ???)
               [000178] -A----------              *  ASG       struct (copy)
               [000176] D------N----              +--*  LCL_VAR   struct<System.DateTime, 8> V03 loc1         
               [000175] ------------              \--*  LCL_VAR   struct<System.DateTime, 8> V34 tmp16        

    [ 0] 247 (0x0f7) ldloca.s 1
    [ 1] 249 (0x0f9) call 0A00000E
In Compiler::impImportCall: opcode is call, kind=0, callRetType is ref, structSize is 0

lvaGrabTemp returning 35 (V35 tmp17) called for impSpillStackEnsure.


STMT00057 (IL 0x0F7...  ???)
               [000183] -AC-G-------              *  ASG       ref   
               [000182] D------N----              +--*  LCL_VAR   ref    V35 tmp17        
               [000181] --C-G-------              \--*  CALL      ref    System.DateTime.ToString
               [000180] ------------ this in rcx     \--*  ADDR      byref 
               [000179] -------N----                    \--*  LCL_VAR   struct<System.DateTime, 8> V03 loc1         
Marked V35 as a single def temp

lvaSetClass: setting class for V35 to (00007FFDB6DAD720) System.String 

    [ 1] 254 (0x0fe) ldstr 70000075
    [ 2] 259 (0x103) call 0A00000F
In Compiler::impImportCall: opcode is call, kind=0, callRetType is ref, structSize is 0

lvaGrabTemp returning 36 (V36 tmp18) called for impSpillStackEnsure.


STMT00058 (IL 0x0FE...  ???)
               [000188] -AC-G-------              *  ASG       ref   
               [000187] D------N----              +--*  LCL_VAR   ref    V36 tmp18        
               [000186] --C-G-------              \--*  CALL      ref    System.String.Concat
               [000184] ------------ arg0            +--*  LCL_VAR   ref    V35 tmp17        
               [000185] ------------ arg1            \--*  CNS_STR   ref   <string constant>
Marked V36 as a single def temp

lvaSetClass: setting class for V36 to (00007FFDB6DAD720) System.String 

    [ 1] 264 (0x108) call 0A000010
In Compiler::impImportCall: opcode is call, kind=0, callRetType is void, structSize is 0


STMT00059 (IL 0x108...  ???)
               [000190] --C-G-------              *  CALL      void   System.Console.WriteLine
               [000189] ------------ arg0         \--*  LCL_VAR   ref    V36 tmp18        

    [ 0] 269 (0x10d) nop

STMT00060 (IL 0x10D...  ???)
               [000191] ------------              *  NO_OP     void  

    [ 0] 270 (0x10e) br.s

STMT00061 (IL 0x10E...  ???)
               [000192] ------------              *  NOP       void  

impImportBlockPending for BB19

Importing BB19 (PC=353) of 'FalseLeakRepro.Program:Run(System.String[]):this'
    [ 0] 353 (0x161) ldc.i4.1 1
    [ 1] 354 (0x162) stloc.s 9

STMT00062 (IL 0x161...  ???)
               [000195] -A----------              *  ASG       int   
               [000194] D------N----              +--*  LCL_VAR   int    V11 loc9         
               [000193] ------------              \--*  CNS_INT   int    1

    [ 0] 356 (0x164) br.s

STMT00063 (IL 0x164...  ???)
               [000196] ------------              *  NOP       void  

impImportBlockPending for BB11

Importing BB11 (PC=272) of 'FalseLeakRepro.Program:Run(System.String[]):this'
    [ 0] 272 (0x110) nop

STMT00064 (IL 0x110...  ???)
               [000197] ------------              *  NO_OP     void  

    [ 0] 273 (0x111) ldarg.0
    [ 1] 274 (0x112) ldfld 04000005
    [ 1] 279 (0x117) stloc.s 6Querying runtime about current class of field FalseLeakRepro.Program._myList (declared as FalseLeakRepro.List)
Field's current class not available


STMT00065 (IL 0x111...  ???)
               [000201] -A-XG-------              *  ASG       ref   
               [000200] D------N----              +--*  LCL_VAR   ref    V08 loc6         
               [000199] ---XG-------              \--*  FIELD     ref    _myList
               [000198] ------------                 \--*  LCL_VAR   ref    V00 this         

    [ 0] 281 (0x119) ldc.i4.0 0
    [ 1] 282 (0x11a) stloc.s 7

STMT00066 (IL 0x119...  ???)
               [000204] -A----------              *  ASG       int   
               [000203] D------N----              +--*  LCL_VAR   int    V09 loc7         
               [000202] ------------              \--*  CNS_INT   int    0

impImportBlockPending for BB12

impImportBlockPending for BB15

Importing BB12 (PC=284) of 'FalseLeakRepro.Program:Run(System.String[]):this'
    [ 0] 284 (0x11c) ldloc.s 6
    [ 1] 286 (0x11e) ldloca.s 7
    [ 2] 288 (0x120) call 0A000014
In Compiler::impImportCall: opcode is call, kind=0, callRetType is void, structSize is 0


STMT00067 (IL 0x11C...  ???)
               [000208] --C-G-------              *  CALL      void   System.Threading.Monitor.Enter
               [000205] ------------ arg0         +--*  LCL_VAR   ref    V08 loc6         
               [000207] ------------ arg1         \--*  ADDR      byref 
               [000206] -------N----                 \--*  LCL_VAR   int    V09 loc7         

    [ 0] 293 (0x125) nop

STMT00068 (IL 0x125...  ???)
               [000209] ------------              *  NO_OP     void  

    [ 0] 294 (0x126) nop

STMT00069 (IL 0x126...  ???)
               [000210] ------------              *  NO_OP     void  

    [ 0] 295 (0x127) ldarg.0
    [ 1] 296 (0x128) ldfld 04000005
    [ 1] 301 (0x12d) ldfld 04000003
    [ 1] 306 (0x132) ldarg.0
    [ 2] 307 (0x133) ldfld 04000005
    [ 2] 312 (0x138) ldfld 04000004
    [ 2] 317 (0x13d) ceq
    [ 1] 319 (0x13f) stloc.s 8

STMT00070 (IL 0x127...  ???)
               [000219] -A-XG-------              *  ASG       int   
               [000218] D------N----              +--*  LCL_VAR   int    V10 loc8         
               [000217] ---XG-------              \--*  EQ        int   
               [000213] ---XG-------                 +--*  FIELD     ref    Head
               [000212] ---XG-------                 |  \--*  FIELD     ref    _myList
               [000211] ------------                 |     \--*  LCL_VAR   ref    V00 this         
               [000216] ---XG-------                 \--*  FIELD     ref    Tail
               [000215] ---XG-------                    \--*  FIELD     ref    _myList
               [000214] ------------                       \--*  LCL_VAR   ref    V00 this         

    [ 0] 321 (0x141) ldloc.s 8
    [ 1] 323 (0x143) brfalse.s

STMT00071 (IL 0x141...  ???)
               [000223] ------------              *  JTRUE     void  
               [000222] ------------              \--*  EQ        int   
               [000220] ------------                 +--*  LCL_VAR   int    V10 loc8         
               [000221] ------------                 \--*  CNS_INT   int    0

impImportBlockPending for BB13

impImportBlockPending for BB14

Importing BB14 (PC=328) of 'FalseLeakRepro.Program:Run(System.String[]):this'
    [ 0] 328 (0x148) nop

STMT00072 (IL 0x148...  ???)
               [000224] ------------              *  NO_OP     void  

    [ 0] 329 (0x149) leave.s 0158
Before import CEE_LEAVE in BB14 (targetting BB18):

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd                 weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [???..???)                                     i internal 
BB02 [0001]  1                             1       [000..078)-> BB09 (always)                     i newobj 
BB03 [0002]  1                             1       [078..083)                                     i bwd bwd-target 
BB04 [0003]  1  0                          1       [083..0D5)-> BB32 (always) T0      try { }     keep i try newobj bwd 
BB32 [0031]  1                             1       [???..???)-> BB05 (callf )                     i internal 
BB33 [0032]  0                             1       [???..???)-> BB08 (ALWAYS)                     i internal KEEP 
BB05 [0004]  1     0                       1       [0D5..0D9)-> BB07 ( cond )    H0   finally {   keep i bwd 
BB06 [0005]  1     0                       1       [0D9..0E0)                    H0               i bwd 
BB07 [0006]  2     0                       1       [0E0..0E1)        (finret)    H0   }           i bwd 
BB08 [0007]  1                             1       [0E1..0E6)                                     i bwd 
BB09 [0008]  2                             1       [0E6..0F1)-> BB03 ( cond )                     i bwd 
BB10 [0009]  1                             1       [0F1..110)-> BB19 (always)                     i 
BB11 [0010]  1                             1       [110..11C)                                     i bwd bwd-target 
BB12 [0011]  1  1                          1       [11C..145)-> BB14 ( cond ) T1      try {       keep i try bwd 
BB13 [0012]  1  1                          1       [145..148)-> BB20 (leave ) T1                  bwd 
BB14 [0013]  1  1                          1       [148..14B)-> BB18 (leave ) T1      }           bwd 
BB15 [0014]  1     1                       1       [14B..14F)-> BB17 ( cond )    H1   finally {   keep bwd 
BB16 [0015]  1     1                       1       [14F..157)                    H1               bwd 
BB17 [0016]  2     1                       1       [157..158)        (finret)    H1   }           bwd 
BB18 [0017]  1                             1       [158..161)                                     bwd 
BB19 [0018]  2                             1       [161..166)-> BB11 (always)                     i bwd 
BB20 [0019]  1                             1       [166..1B1)-> BB30 (always)                     
BB21 [0020]  1                             1       [1B1..1CA)-> BB23 ( cond )                     bwd bwd-target 
BB22 [0021]  1                             1       [1CA..1D9)-> BB29 (always)                     bwd 
BB23 [0022]  1                             1       [1D9..1EA)-> BB25 ( cond )                     bwd 
BB24 [0023]  1                             1       [1EA..1F4)-> BB29 (always)                     bwd 
BB25 [0024]  1                             1       [1F4..205)-> BB27 ( cond )                     bwd 
BB26 [0025]  1                             1       [205..210)-> BB29 (always)                     bwd 
BB27 [0026]  1                             1       [210..221)-> BB29 ( cond )                     bwd 
BB28 [0027]  1                             1       [221..224)-> BB31 (always)                     bwd 
BB29 [0028]  4                             1       [224..225)                                     bwd 
BB30 [0029]  2                             1       [225..22A)-> BB21 (always)                     bwd 
BB31 [0030]  1                             1       [22A..232)        (return)                     
-----------------------------------------------------------------------------------------------------------------------------------------

***************  Exception Handling table
index  eTry, eHnd
  0  ::            - Try at BB04..BB04 [083..0D5), Finally at BB05..BB07 [0D5..0E1)
  1  ::            - Try at BB12..BB14 [11C..14B), Finally at BB15..BB17 [14B..158)
fgFindInsertPoint(regionIndex=0, putInTryRegion=true, startBlk=BB01, endBlk=BB00, nearBlk=BB14, jumpBlk=BB00, runRarely=false)
fgNewBBinRegion(jumpKind=8, tryIndex=0, hndIndex=0, putInFilter=false, runRarely=false, insertAtEnd=false): inserting after BB14
New Basic Block BB34 [0033] created.
impImportLeave - jumping out of a finally-protected try (EH#1), convert block BB14 to BBJ_ALWAYS, add BBJ_CALLFINALLY block BB34
New Basic Block BB35 [0034] created.
impImportLeave - jumping out of a finally-protected try (EH#1), created step (BBJ_ALWAYS) block BB35
impImportLeave - final destination of step blocks set to BB18

impImportBlockPending for BB18

After import CEE_LEAVE:

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd                 weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [???..???)                                     i internal 
BB02 [0001]  1                             1       [000..078)-> BB09 (always)                     i newobj 
BB03 [0002]  1                             1       [078..083)                                     i bwd bwd-target 
BB04 [0003]  1  0                          1       [083..0D5)-> BB32 (always) T0      try { }     keep i try newobj bwd 
BB32 [0031]  1                             1       [???..???)-> BB05 (callf )                     i internal 
BB33 [0032]  0                             1       [???..???)-> BB08 (ALWAYS)                     i internal KEEP 
BB05 [0004]  1     0                       1       [0D5..0D9)-> BB07 ( cond )    H0   finally {   keep i bwd 
BB06 [0005]  1     0                       1       [0D9..0E0)                    H0               i bwd 
BB07 [0006]  2     0                       1       [0E0..0E1)        (finret)    H0   }           i bwd 
BB08 [0007]  1                             1       [0E1..0E6)                                     i bwd 
BB09 [0008]  2                             1       [0E6..0F1)-> BB03 ( cond )                     i bwd 
BB10 [0009]  1                             1       [0F1..110)-> BB19 (always)                     i 
BB11 [0010]  1                             1       [110..11C)                                     i bwd bwd-target 
BB12 [0011]  1  1                          1       [11C..145)-> BB14 ( cond ) T1      try {       keep i try bwd 
BB13 [0012]  1  1                          1       [145..148)-> BB20 (leave ) T1                  bwd 
BB14 [0013]  1  1                          1       [148..14B)-> BB34 (always) T1      }           bwd 
BB34 [0033]  1                             1       [???..???)-> BB15 (callf )                     i internal 
BB35 [0034]  0                             1       [???..???)-> BB18 (ALWAYS)                     i internal KEEP 
BB15 [0014]  1     1                       1       [14B..14F)-> BB17 ( cond )    H1   finally {   keep bwd 
BB16 [0015]  1     1                       1       [14F..157)                    H1               bwd 
BB17 [0016]  2     1                       1       [157..158)        (finret)    H1   }           bwd 
BB18 [0017]  1                             1       [158..161)                                     bwd 
BB19 [0018]  2                             1       [161..166)-> BB11 (always)                     i bwd 
BB20 [0019]  1                             1       [166..1B1)-> BB30 (always)                     
BB21 [0020]  1                             1       [1B1..1CA)-> BB23 ( cond )                     bwd bwd-target 
BB22 [0021]  1                             1       [1CA..1D9)-> BB29 (always)                     bwd 
BB23 [0022]  1                             1       [1D9..1EA)-> BB25 ( cond )                     bwd 
BB24 [0023]  1                             1       [1EA..1F4)-> BB29 (always)                     bwd 
BB25 [0024]  1                             1       [1F4..205)-> BB27 ( cond )                     bwd 
BB26 [0025]  1                             1       [205..210)-> BB29 (always)                     bwd 
BB27 [0026]  1                             1       [210..221)-> BB29 ( cond )                     bwd 
BB28 [0027]  1                             1       [221..224)-> BB31 (always)                     bwd 
BB29 [0028]  4                             1       [224..225)                                     bwd 
BB30 [0029]  2                             1       [225..22A)-> BB21 (always)                     bwd 
BB31 [0030]  1                             1       [22A..232)        (return)                     
-----------------------------------------------------------------------------------------------------------------------------------------

***************  Exception Handling table
index  eTry, eHnd
  0  ::            - Try at BB04..BB04 [083..0D5), Finally at BB05..BB07 [0D5..0E1)
  1  ::            - Try at BB12..BB14 [11C..14B), Finally at BB15..BB17 [14B..158)


STMT00073 (IL 0x149...  ???)
               [000225] ------------              *  NOP       void  

impImportBlockPending for BB34

Importing BB18 (PC=344) of 'FalseLeakRepro.Program:Run(System.String[]):this'
    [ 0] 344 (0x158) ldc.i4.s 100
    [ 1] 346 (0x15a) call 0A000016
In Compiler::impImportCall: opcode is call, kind=0, callRetType is void, structSize is 0


STMT00074 (IL 0x158...  ???)
               [000227] --C-G-------              *  CALL      void   System.Threading.Thread.Sleep
               [000226] ------------ arg0         \--*  CNS_INT   int    100

    [ 0] 351 (0x15f) nop

STMT00075 (IL 0x15F...  ???)
               [000228] ------------              *  NO_OP     void  

    [ 0] 352 (0x160) nop

STMT00076 (IL 0x160...  ???)
               [000229] ------------              *  NO_OP     void  

impImportBlockPending for BB19

Importing BB13 (PC=325) of 'FalseLeakRepro.Program:Run(System.String[]):this'
    [ 0] 325 (0x145) nop

STMT00077 (IL 0x145...  ???)
               [000230] ------------              *  NO_OP     void  

    [ 0] 326 (0x146) leave.s 0166
Before import CEE_LEAVE in BB13 (targetting BB20):

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd                 weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [???..???)                                     i internal 
BB02 [0001]  1                             1       [000..078)-> BB09 (always)                     i newobj 
BB03 [0002]  1                             1       [078..083)                                     i bwd bwd-target 
BB04 [0003]  1  0                          1       [083..0D5)-> BB32 (always) T0      try { }     keep i try newobj bwd 
BB32 [0031]  1                             1       [???..???)-> BB05 (callf )                     i internal 
BB33 [0032]  0                             1       [???..???)-> BB08 (ALWAYS)                     i internal KEEP 
BB05 [0004]  1     0                       1       [0D5..0D9)-> BB07 ( cond )    H0   finally {   keep i bwd 
BB06 [0005]  1     0                       1       [0D9..0E0)                    H0               i bwd 
BB07 [0006]  2     0                       1       [0E0..0E1)        (finret)    H0   }           i bwd 
BB08 [0007]  1                             1       [0E1..0E6)                                     i bwd 
BB09 [0008]  2                             1       [0E6..0F1)-> BB03 ( cond )                     i bwd 
BB10 [0009]  1                             1       [0F1..110)-> BB19 (always)                     i 
BB11 [0010]  1                             1       [110..11C)                                     i bwd bwd-target 
BB12 [0011]  1  1                          1       [11C..145)-> BB14 ( cond ) T1      try {       keep i try bwd 
BB13 [0012]  1  1                          1       [145..148)-> BB20 (leave ) T1                  bwd 
BB14 [0013]  1  1                          1       [148..14B)-> BB34 (always) T1      }           i bwd 
BB34 [0033]  1                             1       [???..???)-> BB15 (callf )                     i internal 
BB35 [0034]  0                             1       [???..???)-> BB18 (ALWAYS)                     i internal KEEP 
BB15 [0014]  1     1                       1       [14B..14F)-> BB17 ( cond )    H1   finally {   keep bwd 
BB16 [0015]  1     1                       1       [14F..157)                    H1               bwd 
BB17 [0016]  2     1                       1       [157..158)        (finret)    H1   }           bwd 
BB18 [0017]  1                             1       [158..161)                                     i bwd 
BB19 [0018]  2                             1       [161..166)-> BB11 (always)                     i bwd 
BB20 [0019]  1                             1       [166..1B1)-> BB30 (always)                     
BB21 [0020]  1                             1       [1B1..1CA)-> BB23 ( cond )                     bwd bwd-target 
BB22 [0021]  1                             1       [1CA..1D9)-> BB29 (always)                     bwd 
BB23 [0022]  1                             1       [1D9..1EA)-> BB25 ( cond )                     bwd 
BB24 [0023]  1                             1       [1EA..1F4)-> BB29 (always)                     bwd 
BB25 [0024]  1                             1       [1F4..205)-> BB27 ( cond )                     bwd 
BB26 [0025]  1                             1       [205..210)-> BB29 (always)                     bwd 
BB27 [0026]  1                             1       [210..221)-> BB29 ( cond )                     bwd 
BB28 [0027]  1                             1       [221..224)-> BB31 (always)                     bwd 
BB29 [0028]  4                             1       [224..225)                                     bwd 
BB30 [0029]  2                             1       [225..22A)-> BB21 (always)                     bwd 
BB31 [0030]  1                             1       [22A..232)        (return)                     
-----------------------------------------------------------------------------------------------------------------------------------------

***************  Exception Handling table
index  eTry, eHnd
  0  ::            - Try at BB04..BB04 [083..0D5), Finally at BB05..BB07 [0D5..0E1)
  1  ::            - Try at BB12..BB14 [11C..14B), Finally at BB15..BB17 [14B..158)
fgFindInsertPoint(regionIndex=0, putInTryRegion=true, startBlk=BB01, endBlk=BB00, nearBlk=BB13, jumpBlk=BB00, runRarely=false)
fgNewBBinRegion(jumpKind=8, tryIndex=0, hndIndex=0, putInFilter=false, runRarely=false, insertAtEnd=false): inserting after BB14
New Basic Block BB36 [0035] created.
impImportLeave - jumping out of a finally-protected try (EH#1), convert block BB13 to BBJ_ALWAYS, add BBJ_CALLFINALLY block BB36
New Basic Block BB37 [0036] created.
impImportLeave - jumping out of a finally-protected try (EH#1), created step (BBJ_ALWAYS) block BB37
impImportLeave - final destination of step blocks set to BB20

impImportBlockPending for BB20

After import CEE_LEAVE:

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd                 weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [???..???)                                     i internal 
BB02 [0001]  1                             1       [000..078)-> BB09 (always)                     i newobj 
BB03 [0002]  1                             1       [078..083)                                     i bwd bwd-target 
BB04 [0003]  1  0                          1       [083..0D5)-> BB32 (always) T0      try { }     keep i try newobj bwd 
BB32 [0031]  1                             1       [???..???)-> BB05 (callf )                     i internal 
BB33 [0032]  0                             1       [???..???)-> BB08 (ALWAYS)                     i internal KEEP 
BB05 [0004]  1     0                       1       [0D5..0D9)-> BB07 ( cond )    H0   finally {   keep i bwd 
BB06 [0005]  1     0                       1       [0D9..0E0)                    H0               i bwd 
BB07 [0006]  2     0                       1       [0E0..0E1)        (finret)    H0   }           i bwd 
BB08 [0007]  1                             1       [0E1..0E6)                                     i bwd 
BB09 [0008]  2                             1       [0E6..0F1)-> BB03 ( cond )                     i bwd 
BB10 [0009]  1                             1       [0F1..110)-> BB19 (always)                     i 
BB11 [0010]  1                             1       [110..11C)                                     i bwd bwd-target 
BB12 [0011]  1  1                          1       [11C..145)-> BB14 ( cond ) T1      try {       keep i try bwd 
BB13 [0012]  1  1                          1       [145..148)-> BB36 (always) T1                  bwd 
BB14 [0013]  1  1                          1       [148..14B)-> BB34 (always) T1      }           i bwd 
BB36 [0035]  1                             1       [???..???)-> BB15 (callf )                     i internal 
BB37 [0036]  0                             1       [???..???)-> BB20 (ALWAYS)                     i internal KEEP 
BB34 [0033]  1                             1       [???..???)-> BB15 (callf )                     i internal 
BB35 [0034]  0                             1       [???..???)-> BB18 (ALWAYS)                     i internal KEEP 
BB15 [0014]  1     1                       1       [14B..14F)-> BB17 ( cond )    H1   finally {   keep bwd 
BB16 [0015]  1     1                       1       [14F..157)                    H1               bwd 
BB17 [0016]  2     1                       1       [157..158)        (finret)    H1   }           bwd 
BB18 [0017]  1                             1       [158..161)                                     i bwd 
BB19 [0018]  2                             1       [161..166)-> BB11 (always)                     i bwd 
BB20 [0019]  1                             1       [166..1B1)-> BB30 (always)                     
BB21 [0020]  1                             1       [1B1..1CA)-> BB23 ( cond )                     bwd bwd-target 
BB22 [0021]  1                             1       [1CA..1D9)-> BB29 (always)                     bwd 
BB23 [0022]  1                             1       [1D9..1EA)-> BB25 ( cond )                     bwd 
BB24 [0023]  1                             1       [1EA..1F4)-> BB29 (always)                     bwd 
BB25 [0024]  1                             1       [1F4..205)-> BB27 ( cond )                     bwd 
BB26 [0025]  1                             1       [205..210)-> BB29 (always)                     bwd 
BB27 [0026]  1                             1       [210..221)-> BB29 ( cond )                     bwd 
BB28 [0027]  1                             1       [221..224)-> BB31 (always)                     bwd 
BB29 [0028]  4                             1       [224..225)                                     bwd 
BB30 [0029]  2                             1       [225..22A)-> BB21 (always)                     bwd 
BB31 [0030]  1                             1       [22A..232)        (return)                     
-----------------------------------------------------------------------------------------------------------------------------------------

***************  Exception Handling table
index  eTry, eHnd
  0  ::            - Try at BB04..BB04 [083..0D5), Finally at BB05..BB07 [0D5..0E1)
  1  ::            - Try at BB12..BB14 [11C..14B), Finally at BB15..BB17 [14B..158)


STMT00078 (IL 0x146...  ???)
               [000231] ------------              *  NOP       void  

impImportBlockPending for BB36

Importing BB20 (PC=358) of 'FalseLeakRepro.Program:Run(System.String[]):this'
    [ 0] 358 (0x166) call 0A00000D
In Compiler::impImportCall: opcode is call, kind=0, callRetType is struct, structSize is 8

lvaGrabTemp returning 37 (V37 tmp19) called for impSpillStackEnsure.


STMT00079 (IL 0x166...  ???)
               [000235] -AC-G-------              *  ASG       struct (copy)
               [000233] D------N----              +--*  LCL_VAR   struct<System.DateTime, 8> V37 tmp19        
               [000232] --C-G-------              \--*  CALL      struct System.DateTime.get_Now

    [ 1] 363 (0x16b) stloc.1

STMT00080 (IL 0x16B...  ???)
               [000239] -A----------              *  ASG       struct (copy)
               [000237] D------N----              +--*  LCL_VAR   struct<System.DateTime, 8> V03 loc1         
               [000236] ------------              \--*  LCL_VAR   struct<System.DateTime, 8> V37 tmp19        

    [ 0] 364 (0x16c) ldloca.s 1
    [ 1] 366 (0x16e) call 0A00000E
In Compiler::impImportCall: opcode is call, kind=0, callRetType is ref, structSize is 0

lvaGrabTemp returning 38 (V38 tmp20) called for impSpillStackEnsure.


STMT00081 (IL 0x16C...  ???)
               [000244] -AC-G-------              *  ASG       ref   
               [000243] D------N----              +--*  LCL_VAR   ref    V38 tmp20        
               [000242] --C-G-------              \--*  CALL      ref    System.DateTime.ToString
               [000241] ------------ this in rcx     \--*  ADDR      byref 
               [000240] -------N----                    \--*  LCL_VAR   struct<System.DateTime, 8> V03 loc1         
Marked V38 as a single def temp

lvaSetClass: setting class for V38 to (00007FFDB6DAD720) System.String 

    [ 1] 371 (0x173) ldstr 700000CF
    [ 2] 376 (0x178) call 0A00000F
In Compiler::impImportCall: opcode is call, kind=0, callRetType is ref, structSize is 0

lvaGrabTemp returning 39 (V39 tmp21) called for impSpillStackEnsure.


STMT00082 (IL 0x173...  ???)
               [000249] -AC-G-------              *  ASG       ref   
               [000248] D------N----              +--*  LCL_VAR   ref    V39 tmp21        
               [000247] --C-G-------              \--*  CALL      ref    System.String.Concat
               [000245] ------------ arg0            +--*  LCL_VAR   ref    V38 tmp20        
               [000246] ------------ arg1            \--*  CNS_STR   ref   <string constant>
Marked V39 as a single def temp

lvaSetClass: setting class for V39 to (00007FFDB6DAD720) System.String 

    [ 1] 381 (0x17d) call 0A000010
In Compiler::impImportCall: opcode is call, kind=0, callRetType is void, structSize is 0


STMT00083 (IL 0x17D...  ???)
               [000251] --C-G-------              *  CALL      void   System.Console.WriteLine
               [000250] ------------ arg0         \--*  LCL_VAR   ref    V39 tmp21        

    [ 0] 386 (0x182) nop

STMT00084 (IL 0x182...  ???)
               [000252] ------------              *  NO_OP     void  

    [ 0] 387 (0x183) ldstr 7000012F
    [ 1] 392 (0x188) call 0A000010
In Compiler::impImportCall: opcode is call, kind=0, callRetType is void, structSize is 0


STMT00085 (IL 0x183...  ???)
               [000254] --C-G-------              *  CALL      void   System.Console.WriteLine
               [000253] ------------ arg0         \--*  CNS_STR   ref   <string constant>

    [ 0] 397 (0x18d) nop

STMT00086 (IL 0x18D...  ???)
               [000255] ------------              *  NO_OP     void  

    [ 0] 398 (0x18e) ldstr 70000147
    [ 1] 403 (0x193) call 0A000010
In Compiler::impImportCall: opcode is call, kind=0, callRetType is void, structSize is 0


STMT00087 (IL 0x18E...  ???)
               [000257] --C-G-------              *  CALL      void   System.Console.WriteLine
               [000256] ------------ arg0         \--*  CNS_STR   ref   <string constant>

    [ 0] 408 (0x198) nop

STMT00088 (IL 0x198...  ???)
               [000258] ------------              *  NO_OP     void  

    [ 0] 409 (0x199) ldstr 70000171
    [ 1] 414 (0x19e) call 0A000010
In Compiler::impImportCall: opcode is call, kind=0, callRetType is void, structSize is 0


STMT00089 (IL 0x199...  ???)
               [000260] --C-G-------              *  CALL      void   System.Console.WriteLine
               [000259] ------------ arg0         \--*  CNS_STR   ref   <string constant>

    [ 0] 419 (0x1a3) nop

STMT00090 (IL 0x1A3...  ???)
               [000261] ------------              *  NO_OP     void  

    [ 0] 420 (0x1a4) ldstr 70000199
    [ 1] 425 (0x1a9) call 0A000010
In Compiler::impImportCall: opcode is call, kind=0, callRetType is void, structSize is 0


STMT00091 (IL 0x1A4...  ???)
               [000263] --C-G-------              *  CALL      void   System.Console.WriteLine
               [000262] ------------ arg0         \--*  CNS_STR   ref   <string constant>

    [ 0] 430 (0x1ae) nop

STMT00092 (IL 0x1AE...  ???)
               [000264] ------------              *  NO_OP     void  

    [ 0] 431 (0x1af) br.s

STMT00093 (IL 0x1AF...  ???)
               [000265] ------------              *  NOP       void  

impImportBlockPending for BB30

Importing BB30 (PC=549) of 'FalseLeakRepro.Program:Run(System.String[]):this'
    [ 0] 549 (0x225) ldc.i4.1 1
    [ 1] 550 (0x226) stloc.s 15

STMT00094 (IL 0x225...  ???)
               [000268] -A----------              *  ASG       int   
               [000267] D------N----              +--*  LCL_VAR   int    V17 loc15        
               [000266] ------------              \--*  CNS_INT   int    1

    [ 0] 552 (0x228) br.s

STMT00095 (IL 0x228...  ???)
               [000269] ------------              *  NOP       void  

impImportBlockPending for BB21

Importing BB21 (PC=433) of 'FalseLeakRepro.Program:Run(System.String[]):this'
    [ 0] 433 (0x1b1) nop

STMT00096 (IL 0x1B1...  ???)
               [000270] ------------              *  NO_OP     void  

    [ 0] 434 (0x1b2) call 0A000017
In Compiler::impImportCall: opcode is call, kind=0, callRetType is struct, structSize is 12

lvaGrabTemp returning 40 (V40 tmp22) called for impSpillStackEnsure.


STMT00097 (IL 0x1B2...  ???)
               [000271] S-C-G-------              *  CALL      void   System.Console.ReadKey
               [000273] ------------ arg0         \--*  ADDR      byref 
               [000272] -------N----                 \--*  LCL_VAR   struct<System.ConsoleKeyInfo, 12> V40 tmp22        

    [ 1] 439 (0x1b7) stloc.s 10

STMT00098 (IL 0x1B7...  ???)
               [000277] -A----------              *  ASG       struct (copy)
               [000275] D------N----              +--*  LCL_VAR   struct<System.ConsoleKeyInfo, 12> V12 loc10        
               [000274] ------------              \--*  LCL_VAR   struct<System.ConsoleKeyInfo, 12> V40 tmp22        

    [ 0] 441 (0x1b9) ldloca.s 10
    [ 1] 443 (0x1bb) call 0A000018
In Compiler::impImportCall: opcode is call, kind=0, callRetType is int, structSize is 0

lvaGrabTemp returning 41 (V41 tmp23) called for impSpillStackEnsure.


STMT00099 (IL 0x1B9...  ???)
               [000282] -AC-G-------              *  ASG       int   
               [000281] D------N----              +--*  LCL_VAR   int    V41 tmp23        
               [000280] --C-G-------              \--*  CALL      int    System.ConsoleKeyInfo.get_Key
               [000279] ------------ this in rcx     \--*  ADDR      byref 
               [000278] -------N----                    \--*  LCL_VAR   struct<System.ConsoleKeyInfo, 12> V12 loc10        

    [ 1] 448 (0x1c0) ldc.i4.s 71
    [ 2] 450 (0x1c2) ceq
    [ 1] 452 (0x1c4) stloc.s 11

STMT00100 (IL 0x1C0...  ???)
               [000287] -A----------              *  ASG       int   
               [000286] D------N----              +--*  LCL_VAR   int    V13 loc11        
               [000285] ------------              \--*  EQ        int   
               [000283] ------------                 +--*  LCL_VAR   int    V41 tmp23        
               [000284] ------------                 \--*  CNS_INT   int    71

    [ 0] 454 (0x1c6) ldloc.s 11
    [ 1] 456 (0x1c8) brfalse.s

STMT00101 (IL 0x1C6...  ???)
               [000291] ------------              *  JTRUE     void  
               [000290] ------------              \--*  EQ        int   
               [000288] ------------                 +--*  LCL_VAR   int    V13 loc11        
               [000289] ------------                 \--*  CNS_INT   int    0

impImportBlockPending for BB22

impImportBlockPending for BB23

Importing BB23 (PC=473) of 'FalseLeakRepro.Program:Run(System.String[]):this'
    [ 0] 473 (0x1d9) ldloca.s 10
    [ 1] 475 (0x1db) call 0A000018
In Compiler::impImportCall: opcode is call, kind=0, callRetType is int, structSize is 0

lvaGrabTemp returning 42 (V42 tmp24) called for impSpillStackEnsure.


STMT00102 (IL 0x1D9...  ???)
               [000296] -AC-G-------              *  ASG       int   
               [000295] D------N----              +--*  LCL_VAR   int    V42 tmp24        
               [000294] --C-G-------              \--*  CALL      int    System.ConsoleKeyInfo.get_Key
               [000293] ------------ this in rcx     \--*  ADDR      byref 
               [000292] -------N----                    \--*  LCL_VAR   struct<System.ConsoleKeyInfo, 12> V12 loc10        

    [ 1] 480 (0x1e0) ldc.i4.s 72
    [ 2] 482 (0x1e2) ceq
    [ 1] 484 (0x1e4) stloc.s 12

STMT00103 (IL 0x1E0...  ???)
               [000301] -A----------              *  ASG       int   
               [000300] D------N----              +--*  LCL_VAR   int    V14 loc12        
               [000299] ------------              \--*  EQ        int   
               [000297] ------------                 +--*  LCL_VAR   int    V42 tmp24        
               [000298] ------------                 \--*  CNS_INT   int    72

    [ 0] 486 (0x1e6) ldloc.s 12
    [ 1] 488 (0x1e8) brfalse.s

STMT00104 (IL 0x1E6...  ???)
               [000305] ------------              *  JTRUE     void  
               [000304] ------------              \--*  EQ        int   
               [000302] ------------                 +--*  LCL_VAR   int    V14 loc12        
               [000303] ------------                 \--*  CNS_INT   int    0

impImportBlockPending for BB24

impImportBlockPending for BB25

Importing BB25 (PC=500) of 'FalseLeakRepro.Program:Run(System.String[]):this'
    [ 0] 500 (0x1f4) ldloca.s 10
    [ 1] 502 (0x1f6) call 0A000018
In Compiler::impImportCall: opcode is call, kind=0, callRetType is int, structSize is 0

lvaGrabTemp returning 43 (V43 tmp25) called for impSpillStackEnsure.


STMT00105 (IL 0x1F4...  ???)
               [000310] -AC-G-------              *  ASG       int   
               [000309] D------N----              +--*  LCL_VAR   int    V43 tmp25        
               [000308] --C-G-------              \--*  CALL      int    System.ConsoleKeyInfo.get_Key
               [000307] ------------ this in rcx     \--*  ADDR      byref 
               [000306] -------N----                    \--*  LCL_VAR   struct<System.ConsoleKeyInfo, 12> V12 loc10        

    [ 1] 507 (0x1fb) ldc.i4.s 82
    [ 2] 509 (0x1fd) ceq
    [ 1] 511 (0x1ff) stloc.s 13

STMT00106 (IL 0x1FB...  ???)
               [000315] -A----------              *  ASG       int   
               [000314] D------N----              +--*  LCL_VAR   int    V15 loc13        
               [000313] ------------              \--*  EQ        int   
               [000311] ------------                 +--*  LCL_VAR   int    V43 tmp25        
               [000312] ------------                 \--*  CNS_INT   int    82

    [ 0] 513 (0x201) ldloc.s 13
    [ 1] 515 (0x203) brfalse.s

STMT00107 (IL 0x201...  ???)
               [000319] ------------              *  JTRUE     void  
               [000318] ------------              \--*  EQ        int   
               [000316] ------------                 +--*  LCL_VAR   int    V15 loc13        
               [000317] ------------                 \--*  CNS_INT   int    0

impImportBlockPending for BB26

impImportBlockPending for BB27

Importing BB27 (PC=528) of 'FalseLeakRepro.Program:Run(System.String[]):this'
    [ 0] 528 (0x210) ldloca.s 10
    [ 1] 530 (0x212) call 0A000018
In Compiler::impImportCall: opcode is call, kind=0, callRetType is int, structSize is 0

lvaGrabTemp returning 44 (V44 tmp26) called for impSpillStackEnsure.


STMT00108 (IL 0x210...  ???)
               [000324] -AC-G-------              *  ASG       int   
               [000323] D------N----              +--*  LCL_VAR   int    V44 tmp26        
               [000322] --C-G-------              \--*  CALL      int    System.ConsoleKeyInfo.get_Key
               [000321] ------------ this in rcx     \--*  ADDR      byref 
               [000320] -------N----                    \--*  LCL_VAR   struct<System.ConsoleKeyInfo, 12> V12 loc10        

    [ 1] 535 (0x217) ldc.i4.s 81
    [ 2] 537 (0x219) ceq
    [ 1] 539 (0x21b) stloc.s 14

STMT00109 (IL 0x217...  ???)
               [000329] -A----------              *  ASG       int   
               [000328] D------N----              +--*  LCL_VAR   int    V16 loc14        
               [000327] ------------              \--*  EQ        int   
               [000325] ------------                 +--*  LCL_VAR   int    V44 tmp26        
               [000326] ------------                 \--*  CNS_INT   int    81

    [ 0] 541 (0x21d) ldloc.s 14
    [ 1] 543 (0x21f) brfalse.s

STMT00110 (IL 0x21D...  ???)
               [000333] ------------              *  JTRUE     void  
               [000332] ------------              \--*  EQ        int   
               [000330] ------------                 +--*  LCL_VAR   int    V16 loc14        
               [000331] ------------                 \--*  CNS_INT   int    0

impImportBlockPending for BB28

impImportBlockPending for BB29

Importing BB29 (PC=548) of 'FalseLeakRepro.Program:Run(System.String[]):this'
    [ 0] 548 (0x224) nop

STMT00111 (IL 0x224...  ???)
               [000334] ------------              *  NO_OP     void  

impImportBlockPending for BB30

Importing BB28 (PC=545) of 'FalseLeakRepro.Program:Run(System.String[]):this'
    [ 0] 545 (0x221) nop

STMT00112 (IL 0x221...  ???)
               [000335] ------------              *  NO_OP     void  

    [ 0] 546 (0x222) br.s

STMT00113 (IL 0x222...  ???)
               [000336] ------------              *  NOP       void  

impImportBlockPending for BB31

Importing BB31 (PC=554) of 'FalseLeakRepro.Program:Run(System.String[]):this'
    [ 0] 554 (0x22a) ldarg.0
    [ 1] 555 (0x22b) ldc.i4.0 0
    [ 2] 556 (0x22c) stfld 04000006

STMT00114 (IL 0x22A...  ???)
               [000340] -A-XG-------              *  ASG       bool  
               [000339] ---XG--N----              +--*  FIELD     bool   _running
               [000337] ------------              |  \--*  LCL_VAR   ref    V00 this         
               [000338] ------------              \--*  CNS_INT   int    0

    [ 0] 561 (0x231) ret

STMT00115 (IL 0x231...  ???)
               [000341] ------------              *  RETURN    void  

Importing BB26 (PC=517) of 'FalseLeakRepro.Program:Run(System.String[]):this'
    [ 0] 517 (0x205) nop

STMT00116 (IL 0x205...  ???)
               [000342] ------------              *  NO_OP     void  

    [ 0] 518 (0x206) ldarg.0
    [ 1] 519 (0x207) ldc.i4.0 0
    [ 2] 520 (0x208) stfld 04000006

STMT00117 (IL 0x206...  ???)
               [000346] -A-XG-------              *  ASG       bool  
               [000345] ---XG--N----              +--*  FIELD     bool   _running
               [000343] ------------              |  \--*  LCL_VAR   ref    V00 this         
               [000344] ------------              \--*  CNS_INT   int    0

    [ 0] 525 (0x20d) nop

STMT00118 (IL 0x20D...  ???)
               [000347] ------------              *  NO_OP     void  

    [ 0] 526 (0x20e) br.s

STMT00119 (IL 0x20E...  ???)
               [000348] ------------              *  NOP       void  

impImportBlockPending for BB29

Importing BB24 (PC=490) of 'FalseLeakRepro.Program:Run(System.String[]):this'
    [ 0] 490 (0x1ea) nop

STMT00120 (IL 0x1EA...  ???)
               [000349] ------------              *  NO_OP     void  

    [ 0] 491 (0x1eb) call 0A00001B
In Compiler::impImportCall: opcode is call, kind=0, callRetType is void, structSize is 0


STMT00121 (IL 0x1EB...  ???)
               [000350] --C-G-------              *  CALL      void   System.Diagnostics.Debugger.Break

    [ 0] 496 (0x1f0) nop

STMT00122 (IL 0x1F0...  ???)
               [000351] ------------              *  NO_OP     void  

    [ 0] 497 (0x1f1) nop

STMT00123 (IL 0x1F1...  ???)
               [000352] ------------              *  NO_OP     void  

    [ 0] 498 (0x1f2) br.s

STMT00124 (IL 0x1F2...  ???)
               [000353] ------------              *  NOP       void  

impImportBlockPending for BB29

Importing BB22 (PC=458) of 'FalseLeakRepro.Program:Run(System.String[]):this'
    [ 0] 458 (0x1ca) nop

STMT00125 (IL 0x1CA...  ???)
               [000354] ------------              *  NO_OP     void  

    [ 0] 459 (0x1cb) call 0A000019
In Compiler::impImportCall: opcode is call, kind=0, callRetType is int, structSize is 0

lvaGrabTemp returning 45 (V45 tmp27) called for impSpillStackEnsure.


STMT00126 (IL 0x1CB...  ???)
               [000357] -AC-G-------              *  ASG       int   
               [000356] D------N----              +--*  LCL_VAR   int    V45 tmp27        
               [000355] --C-G-------              \--*  CALL      int    System.GC.get_MaxGeneration

    [ 1] 464 (0x1d0) call 0A00001A
In Compiler::impImportCall: opcode is call, kind=0, callRetType is void, structSize is 0


STMT00127 (IL 0x1D0...  ???)
               [000359] --C-G-------              *  CALL      void   System.GC.Collect
               [000358] ------------ arg0         \--*  LCL_VAR   int    V45 tmp27        

    [ 0] 469 (0x1d5) nop

STMT00128 (IL 0x1D5...  ???)
               [000360] ------------              *  NO_OP     void  

    [ 0] 470 (0x1d6) nop

STMT00129 (IL 0x1D6...  ???)
               [000361] ------------              *  NO_OP     void  

    [ 0] 471 (0x1d7) br.s

STMT00130 (IL 0x1D7...  ???)
               [000362] ------------              *  NOP       void  

impImportBlockPending for BB29

Importing BB15 (PC=331) of 'FalseLeakRepro.Program:Run(System.String[]):this'
    [ 0] 331 (0x14b) ldloc.s 7
    [ 1] 333 (0x14d) brfalse.s

STMT00131 (IL 0x14B...  ???)
               [000366] ------------              *  JTRUE     void  
               [000365] ------------              \--*  EQ        int   
               [000363] ------------                 +--*  LCL_VAR   int    V09 loc7         
               [000364] ------------                 \--*  CNS_INT   int    0

impImportBlockPending for BB16

impImportBlockPending for BB17

Importing BB17 (PC=343) of 'FalseLeakRepro.Program:Run(System.String[]):this'
    [ 0] 343 (0x157) endfinally

STMT00132 (IL 0x157...  ???)
               [000367] ------------              *  RETFILT   void  

Importing BB16 (PC=335) of 'FalseLeakRepro.Program:Run(System.String[]):this'
    [ 0] 335 (0x14f) ldloc.s 6
    [ 1] 337 (0x151) call 0A000015
In Compiler::impImportCall: opcode is call, kind=0, callRetType is void, structSize is 0


STMT00133 (IL 0x14F...  ???)
               [000369] --C-G-------              *  CALL      void   System.Threading.Monitor.Exit
               [000368] ------------ arg0         \--*  LCL_VAR   ref    V08 loc6         

    [ 0] 342 (0x156) nop

STMT00134 (IL 0x156...  ???)
               [000370] ------------              *  NO_OP     void  

impImportBlockPending for BB17

After impImport() added block for try,catch,finally
-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd                 weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [???..???)                                     i internal 
BB02 [0001]  1                             1       [000..078)-> BB09 (always)                     i newobj 
BB03 [0002]  1                             1       [078..083)                                     i bwd bwd-target 
BB04 [0003]  1  0                          1       [083..0D5)-> BB32 (always) T0      try { }     keep i try newobj bwd 
BB32 [0031]  1                             1       [???..???)-> BB05 (callf )                     i internal 
BB33 [0032]  0                             1       [???..???)-> BB08 (ALWAYS)                     i internal KEEP 
BB05 [0004]  1     0                       1       [0D5..0D9)-> BB07 ( cond )    H0   finally {   keep i bwd 
BB06 [0005]  1     0                       1       [0D9..0E0)                    H0               i bwd 
BB07 [0006]  2     0                       1       [0E0..0E1)        (finret)    H0   }           i bwd 
BB08 [0007]  1                             1       [0E1..0E6)                                     i bwd 
BB09 [0008]  2                             1       [0E6..0F1)-> BB03 ( cond )                     i bwd 
BB10 [0009]  1                             1       [0F1..110)-> BB19 (always)                     i 
BB11 [0010]  1                             1       [110..11C)                                     i bwd bwd-target 
BB12 [0011]  1  1                          1       [11C..145)-> BB14 ( cond ) T1      try {       keep i try bwd 
BB13 [0012]  1  1                          1       [145..148)-> BB36 (always) T1                  i bwd 
BB14 [0013]  1  1                          1       [148..14B)-> BB34 (always) T1      }           i bwd 
BB36 [0035]  1                             1       [???..???)-> BB15 (callf )                     i internal 
BB37 [0036]  0                             1       [???..???)-> BB20 (ALWAYS)                     i internal KEEP 
BB34 [0033]  1                             1       [???..???)-> BB15 (callf )                     i internal 
BB35 [0034]  0                             1       [???..???)-> BB18 (ALWAYS)                     i internal KEEP 
BB15 [0014]  1     1                       1       [14B..14F)-> BB17 ( cond )    H1   finally {   keep i bwd 
BB16 [0015]  1     1                       1       [14F..157)                    H1               i bwd 
BB17 [0016]  2     1                       1       [157..158)        (finret)    H1   }           i bwd 
BB18 [0017]  1                             1       [158..161)                                     i bwd 
BB19 [0018]  2                             1       [161..166)-> BB11 (always)                     i bwd 
BB20 [0019]  1                             1       [166..1B1)-> BB30 (always)                     i 
BB21 [0020]  1                             1       [1B1..1CA)-> BB23 ( cond )                     i bwd bwd-target 
BB22 [0021]  1                             1       [1CA..1D9)-> BB29 (always)                     i bwd 
BB23 [0022]  1                             1       [1D9..1EA)-> BB25 ( cond )                     i bwd 
BB24 [0023]  1                             1       [1EA..1F4)-> BB29 (always)                     i bwd 
BB25 [0024]  1                             1       [1F4..205)-> BB27 ( cond )                     i bwd 
BB26 [0025]  1                             1       [205..210)-> BB29 (always)                     i bwd 
BB27 [0026]  1                             1       [210..221)-> BB29 ( cond )                     i bwd 
BB28 [0027]  1                             1       [221..224)-> BB31 (always)                     i bwd 
BB29 [0028]  4                             1       [224..225)                                     i bwd 
BB30 [0029]  2                             1       [225..22A)-> BB21 (always)                     i bwd 
BB31 [0030]  1                             1       [22A..232)        (return)                     i 
-----------------------------------------------------------------------------------------------------------------------------------------


*************** Finishing PHASE Importation
Trees after Importation

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd                 weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [???..???)                                     i internal 
BB02 [0001]  1                             1       [000..078)-> BB09 (always)                     i newobj 
BB03 [0002]  1                             1       [078..083)                                     i bwd bwd-target 
BB04 [0003]  1  0                          1       [083..0D5)-> BB32 (always) T0      try { }     keep i try newobj bwd 
BB32 [0031]  1                             1       [???..???)-> BB05 (callf )                     i internal 
BB33 [0032]  0                             1       [???..???)-> BB08 (ALWAYS)                     i internal KEEP 
BB05 [0004]  1     0                       1       [0D5..0D9)-> BB07 ( cond )    H0   finally {   keep i bwd 
BB06 [0005]  1     0                       1       [0D9..0E0)                    H0               i bwd 
BB07 [0006]  2     0                       1       [0E0..0E1)        (finret)    H0   }           i bwd 
BB08 [0007]  1                             1       [0E1..0E6)                                     i bwd 
BB09 [0008]  2                             1       [0E6..0F1)-> BB03 ( cond )                     i bwd 
BB10 [0009]  1                             1       [0F1..110)-> BB19 (always)                     i 
BB11 [0010]  1                             1       [110..11C)                                     i bwd bwd-target 
BB12 [0011]  1  1                          1       [11C..145)-> BB14 ( cond ) T1      try {       keep i try bwd 
BB13 [0012]  1  1                          1       [145..148)-> BB36 (always) T1                  i bwd 
BB14 [0013]  1  1                          1       [148..14B)-> BB34 (always) T1      }           i bwd 
BB36 [0035]  1                             1       [???..???)-> BB15 (callf )                     i internal 
BB37 [0036]  0                             1       [???..???)-> BB20 (ALWAYS)                     i internal KEEP 
BB34 [0033]  1                             1       [???..???)-> BB15 (callf )                     i internal 
BB35 [0034]  0                             1       [???..???)-> BB18 (ALWAYS)                     i internal KEEP 
BB15 [0014]  1     1                       1       [14B..14F)-> BB17 ( cond )    H1   finally {   keep i bwd 
BB16 [0015]  1     1                       1       [14F..157)                    H1               i bwd 
BB17 [0016]  2     1                       1       [157..158)        (finret)    H1   }           i bwd 
BB18 [0017]  1                             1       [158..161)                                     i bwd 
BB19 [0018]  2                             1       [161..166)-> BB11 (always)                     i bwd 
BB20 [0019]  1                             1       [166..1B1)-> BB30 (always)                     i 
BB21 [0020]  1                             1       [1B1..1CA)-> BB23 ( cond )                     i bwd bwd-target 
BB22 [0021]  1                             1       [1CA..1D9)-> BB29 (always)                     i bwd 
BB23 [0022]  1                             1       [1D9..1EA)-> BB25 ( cond )                     i bwd 
BB24 [0023]  1                             1       [1EA..1F4)-> BB29 (always)                     i bwd 
BB25 [0024]  1                             1       [1F4..205)-> BB27 ( cond )                     i bwd 
BB26 [0025]  1                             1       [205..210)-> BB29 (always)                     i bwd 
BB27 [0026]  1                             1       [210..221)-> BB29 ( cond )                     i bwd 
BB28 [0027]  1                             1       [221..224)-> BB31 (always)                     i bwd 
BB29 [0028]  4                             1       [224..225)                                     i bwd 
BB30 [0029]  2                             1       [225..22A)-> BB21 (always)                     i bwd 
BB31 [0030]  1                             1       [22A..232)        (return)                     i 
-----------------------------------------------------------------------------------------------------------------------------------------

------------ BB01 [???..???), preds={} succs={BB02}

***** BB01
STMT00000 (IL   ???...  ???)
               [000000] ------------              *  NOP       void  

------------ BB02 [000..078) -> BB09 (always), preds={} succs={BB09}

***** BB02
STMT00001 (IL 0x000...0x000)
               [000001] ------------              *  NO_OP     void  

***** BB02
STMT00002 (IL 0x001...0x006)
               [000005] -AC-G-------              *  ASG       struct (copy)
               [000003] D------N----              +--*  LCL_VAR   struct<System.DateTime, 8> V19 tmp1         
               [000002] --C-G-------              \--*  CALL      struct System.DateTime.get_Now

***** BB02
STMT00003 (IL 0x006...  ???)
               [000009] -A----------              *  ASG       struct (copy)
               [000007] D------N----              +--*  LCL_VAR   struct<System.DateTime, 8> V03 loc1         
               [000006] ------------              \--*  LCL_VAR   struct<System.DateTime, 8> V19 tmp1         

***** BB02
STMT00004 (IL 0x007...0x01D)
               [000014] -AC-G-------              *  ASG       ref   
               [000013] D------N----              +--*  LCL_VAR   ref    V20 tmp2         
               [000012] --C-G-------              \--*  CALL      ref    System.DateTime.ToString
               [000011] ------------ this in rcx     \--*  ADDR      byref 
               [000010] -------N----                    \--*  LCL_VAR   struct<System.DateTime, 8> V03 loc1         

***** BB02
STMT00005 (IL 0x00E...  ???)
               [000019] -AC-G-------              *  ASG       ref   
               [000018] D------N----              +--*  LCL_VAR   ref    V21 tmp3         
               [000017] --C-G-------              \--*  CALL      ref    System.String.Concat
               [000015] ------------ arg0            +--*  LCL_VAR   ref    V20 tmp2         
               [000016] ------------ arg1            \--*  CNS_STR   ref   <string constant>

***** BB02
STMT00006 (IL 0x018...  ???)
               [000021] --C-G-------              *  CALL      void   System.Console.WriteLine
               [000020] ------------ arg0         \--*  LCL_VAR   ref    V21 tmp3         

***** BB02
STMT00007 (IL 0x01D...  ???)
               [000022] ------------              *  NO_OP     void  

***** BB02
STMT00008 (IL 0x01E...0x024)
               [000027] -A----------              *  ASG       ref   
               [000026] D------N----              +--*  LCL_VAR   ref    V22 tmp4         
               [000025] ------------              \--*  ALLOCOBJ  ref   
               [000024] H-----------                 \--*  CNS_INT(h) long   0x7ffdb7022b70 method

***** BB02
STMT00009 (IL   ???...  ???)
               [000029] --C-G-------              *  CALL      void   FalseLeakRepro.List..ctor
               [000028] ------------ this in rcx  \--*  LCL_VAR   ref    V22 tmp4         

***** BB02
STMT00010 (IL 0x024...  ???)
               [000032] -A-XG-------              *  ASG       ref   
               [000031] ---XG--N----              +--*  FIELD     ref    _myList
               [000023] ------------              |  \--*  LCL_VAR   ref    V00 this         
               [000030] ------------              \--*  LCL_VAR   ref    V22 tmp4         

***** BB02
STMT00011 (IL 0x029...0x039)
               [000039] -A----------              *  ASG       ref   
               [000038] D------N----              +--*  LCL_VAR   ref    V23 tmp5         
               [000037] ------------              \--*  ALLOCOBJ  ref   
               [000036] H-----------                 \--*  CNS_INT(h) long   0x7ffdb6c458b8 token

***** BB02
STMT00013 (IL   ???...  ???)
               [000043] -A-XG-------              *  ASG       ref   
               [000042] D------N----              +--*  LCL_VAR   ref    V24 tmp6         
               [000035] ---XG-------              \--*  FIELD     ref    Head
               [000034] ---XG-------                 \--*  FIELD     ref    _myList
               [000033] ------------                    \--*  LCL_VAR   ref    V00 this         

***** BB02
STMT00012 (IL   ???...  ???)
               [000041] --C-G-------              *  CALL      void   System.Object..ctor
               [000040] ------------ this in rcx  \--*  LCL_VAR   ref    V23 tmp5         

***** BB02
STMT00014 (IL 0x039...  ???)
               [000047] -A-XG-------              *  ASG       ref   
               [000046] ---XG--N----              +--*  FIELD     ref    Data
               [000044] ------------              |  \--*  LCL_VAR   ref    V24 tmp6         
               [000045] ------------              \--*  LCL_VAR   ref    V23 tmp5         

***** BB02
STMT00015 (IL 0x03E...0x04F)
               [000053] -A----------              *  ASG       ref   
               [000052] D------N----              +--*  LCL_VAR   ref    V25 tmp7         
               [000051] ------------              \--*  ALLOCOBJ  ref   
               [000050] H-----------                 \--*  CNS_INT(h) long   0x7ffdb7026348 token

***** BB02
STMT00016 (IL   ???...  ???)
               [000055] --C-G-------              *  CALL      void   System.MulticastDelegate.CtorClosed
               [000054] ------------ this in rcx  +--*  LCL_VAR   ref    V25 tmp7         
               [000048] ------------ arg1         +--*  LCL_VAR   ref    V00 this         
               [000049] ------------ arg2         \--*  FTN_ADDR  long   FalseLeakRepro.Program.<Run>b__3_0


***** BB02
STMT00017 (IL 0x04A...  ???)
               [000060] -A----------              *  ASG       ref   
               [000059] D------N----              +--*  LCL_VAR   ref    V26 tmp8         
               [000058] ------------              \--*  ALLOCOBJ  ref   
               [000057] H-----------                 \--*  CNS_INT(h) long   0x7ffdb6dc4e80 token

***** BB02
STMT00018 (IL   ???...  ???)
               [000062] --C-G-------              *  CALL      void   System.Threading.Thread..ctor
               [000061] ------------ this in rcx  +--*  LCL_VAR   ref    V26 tmp8         
               [000056] ------------ arg1         \--*  LCL_VAR   ref    V25 tmp7         

***** BB02
STMT00019 (IL 0x04F...  ???)
               [000065] -A----------              *  ASG       ref   
               [000064] D------N----              +--*  LCL_VAR   ref    V02 loc0         
               [000063] ------------              \--*  LCL_VAR   ref    V26 tmp8         

***** BB02
STMT00020 (IL 0x050...0x056)
               [000067] --C-G-------              *  CALL nullcheck void   System.Threading.Thread.Start
               [000066] ------------ this in rcx  \--*  LCL_VAR   ref    V02 loc0         

***** BB02
STMT00021 (IL 0x056...  ???)
               [000068] ------------              *  NO_OP     void  

***** BB02
STMT00022 (IL 0x057...0x05C)
               [000072] -AC-G-------              *  ASG       struct (copy)
               [000070] D------N----              +--*  LCL_VAR   struct<System.DateTime, 8> V27 tmp9         
               [000069] --C-G-------              \--*  CALL      struct System.DateTime.get_Now

***** BB02
STMT00023 (IL 0x05C...  ???)
               [000076] -A----------              *  ASG       struct (copy)
               [000074] D------N----              +--*  LCL_VAR   struct<System.DateTime, 8> V03 loc1         
               [000073] ------------              \--*  LCL_VAR   struct<System.DateTime, 8> V27 tmp9         

***** BB02
STMT00024 (IL 0x05D...0x073)
               [000081] -AC-G-------              *  ASG       ref   
               [000080] D------N----              +--*  LCL_VAR   ref    V28 tmp10        
               [000079] --C-G-------              \--*  CALL      ref    System.DateTime.ToString
               [000078] ------------ this in rcx     \--*  ADDR      byref 
               [000077] -------N----                    \--*  LCL_VAR   struct<System.DateTime, 8> V03 loc1         

***** BB02
STMT00025 (IL 0x064...  ???)
               [000086] -AC-G-------              *  ASG       ref   
               [000085] D------N----              +--*  LCL_VAR   ref    V29 tmp11        
               [000084] --C-G-------              \--*  CALL      ref    System.String.Concat
               [000082] ------------ arg0            +--*  LCL_VAR   ref    V28 tmp10        
               [000083] ------------ arg1            \--*  CNS_STR   ref   <string constant>

***** BB02
STMT00026 (IL 0x06E...  ???)
               [000088] --C-G-------              *  CALL      void   System.Console.WriteLine
               [000087] ------------ arg0         \--*  LCL_VAR   ref    V29 tmp11        

***** BB02
STMT00027 (IL 0x073...  ???)
               [000089] ------------              *  NO_OP     void  

***** BB02
STMT00028 (IL 0x074...0x075)
               [000092] -A----------              *  ASG       int   
               [000091] D------N----              +--*  LCL_VAR   int    V04 loc2         
               [000090] ------------              \--*  CNS_INT   int    0

***** BB02
STMT00029 (IL 0x076...0x076)
               [000093] ------------              *  NOP       void  

------------ BB03 [078..083), preds={} succs={BB04}

***** BB03
STMT00032 (IL 0x078...0x078)
               [000103] ------------              *  NO_OP     void  

***** BB03
STMT00033 (IL 0x079...0x07F)
               [000107] -A-XG-------              *  ASG       ref   
               [000106] D------N----              +--*  LCL_VAR   ref    V05 loc3         
               [000105] ---XG-------              \--*  FIELD     ref    _myList
               [000104] ------------                 \--*  LCL_VAR   ref    V00 this         

***** BB03
STMT00034 (IL 0x080...0x081)
               [000110] -A----------              *  ASG       int   
               [000109] D------N----              +--*  LCL_VAR   int    V06 loc4         
               [000108] ------------              \--*  CNS_INT   int    0

------------ BB04 [083..0D5) -> BB32 (always), preds={} succs={BB32}

***** BB04
STMT00035 (IL 0x083...0x08B)
               [000114] --C-G-------              *  CALL      void   System.Threading.Monitor.Enter
               [000111] ------------ arg0         +--*  LCL_VAR   ref    V05 loc3         
               [000113] ------------ arg1         \--*  ADDR      byref 
               [000112] -------N----                 \--*  LCL_VAR   int    V06 loc4         

***** BB04
STMT00036 (IL 0x08B...  ???)
               [000115] ------------              *  NO_OP     void  

***** BB04
STMT00037 (IL 0x08C...0x08C)
               [000116] ------------              *  NO_OP     void  

***** BB04
STMT00038 (IL 0x08D...0x09D)
               [000123] -A----------              *  ASG       ref   
               [000122] D------N----              +--*  LCL_VAR   ref    V30 tmp12        
               [000121] ------------              \--*  ALLOCOBJ  ref   
               [000120] H-----------                 \--*  CNS_INT(h) long   0x7ffdb70260c8 method

***** BB04
STMT00040 (IL   ???...  ???)
               [000127] -A-XG-------              *  ASG       ref   
               [000126] D------N----              +--*  LCL_VAR   ref    V31 tmp13        
               [000119] ---XG-------              \--*  FIELD     ref    Head
               [000118] ---XG-------                 \--*  FIELD     ref    _myList
               [000117] ------------                    \--*  LCL_VAR   ref    V00 this         

***** BB04
STMT00039 (IL   ???...  ???)
               [000125] --C-G-------              *  CALL      void   FalseLeakRepro.Node..ctor
               [000124] ------------ this in rcx  \--*  LCL_VAR   ref    V30 tmp12        

***** BB04
STMT00041 (IL 0x09D...  ???)
               [000131] -A-XG-------              *  ASG       ref   
               [000130] ---XG--N----              +--*  FIELD     ref    Next
               [000128] ------------              |  \--*  LCL_VAR   ref    V31 tmp13        
               [000129] ------------              \--*  LCL_VAR   ref    V30 tmp12        

***** BB04
STMT00042 (IL 0x0A2...0x0B8)
               [000139] -A-XG-------              *  ASG       ref   
               [000138] ---XG--N----              +--*  FIELD     ref    Head
               [000133] ---XG-------              |  \--*  FIELD     ref    _myList
               [000132] ------------              |     \--*  LCL_VAR   ref    V00 this         
               [000137] ---XG-------              \--*  FIELD     ref    Next
               [000136] ---XG-------                 \--*  FIELD     ref    Head
               [000135] ---XG-------                    \--*  FIELD     ref    _myList
               [000134] ------------                       \--*  LCL_VAR   ref    V00 this         

***** BB04
STMT00043 (IL 0x0BD...0x0CD)
               [000146] -A----------              *  ASG       ref   
               [000145] D------N----              +--*  LCL_VAR   ref    V32 tmp14        
               [000144] ------------              \--*  ALLOCOBJ  ref   
               [000143] H-----------                 \--*  CNS_INT(h) long   0x7ffdb6c458b8 token

***** BB04
STMT00045 (IL   ???...  ???)
               [000150] -A-XG-------              *  ASG       ref   
               [000149] D------N----              +--*  LCL_VAR   ref    V33 tmp15        
               [000142] ---XG-------              \--*  FIELD     ref    Head
               [000141] ---XG-------                 \--*  FIELD     ref    _myList
               [000140] ------------                    \--*  LCL_VAR   ref    V00 this         

***** BB04
STMT00044 (IL   ???...  ???)
               [000148] --C-G-------              *  CALL      void   System.Object..ctor
               [000147] ------------ this in rcx  \--*  LCL_VAR   ref    V32 tmp14        

***** BB04
STMT00046 (IL 0x0CD...  ???)
               [000154] -A-XG-------              *  ASG       ref   
               [000153] ---XG--N----              +--*  FIELD     ref    Data
               [000151] ------------              |  \--*  LCL_VAR   ref    V33 tmp15        
               [000152] ------------              \--*  LCL_VAR   ref    V32 tmp14        

***** BB04
STMT00047 (IL 0x0D2...0x0D2)
               [000155] ------------              *  NO_OP     void  

***** BB04
STMT00048 (IL 0x0D3...0x0D3)
               [000156] ------------              *  NOP       void  

------------ BB32 [???..???) -> BB05 (callf), preds={} succs={BB05}

------------ BB33 [???..???) -> BB08 (ALWAYS), preds={} succs={BB08}

------------ BB05 [0D5..0D9) -> BB07 (cond), preds={} succs={BB06,BB07}

***** BB05
STMT00051 (IL 0x0D5...0x0D7)
               [000166] ------------              *  JTRUE     void  
               [000165] ------------              \--*  EQ        int   
               [000163] ------------                 +--*  LCL_VAR   int    V06 loc4         
               [000164] ------------                 \--*  CNS_INT   int    0

------------ BB06 [0D9..0E0), preds={} succs={BB07}

***** BB06
STMT00053 (IL 0x0D9...0x0DF)
               [000169] --C-G-------              *  CALL      void   System.Threading.Monitor.Exit
               [000168] ------------ arg0         \--*  LCL_VAR   ref    V05 loc3         

***** BB06
STMT00054 (IL 0x0DF...  ???)
               [000170] ------------              *  NO_OP     void  

------------ BB07 [0E0..0E1) (finret), preds={} succs={BB33}

***** BB07
STMT00052 (IL 0x0E0...0x0E0)
               [000167] ------------              *  RETFILT   void  

------------ BB08 [0E1..0E6), preds={} succs={BB09}

***** BB08
STMT00049 (IL 0x0E1...0x0E1)
               [000157] ------------              *  NO_OP     void  

***** BB08
STMT00050 (IL 0x0E2...0x0E5)
               [000162] -A----------              *  ASG       int   
               [000161] D------N----              +--*  LCL_VAR   int    V04 loc2         
               [000160] ------------              \--*  ADD       int   
               [000158] ------------                 +--*  LCL_VAR   int    V04 loc2         
               [000159] ------------                 \--*  CNS_INT   int    1

------------ BB09 [0E6..0F1) -> BB03 (cond), preds={} succs={BB10,BB03}

***** BB09
STMT00030 (IL 0x0E6...0x0EB)
               [000098] -A----------              *  ASG       int   
               [000097] D------N----              +--*  LCL_VAR   int    V07 loc5         
               [000096] ------------              \--*  LT        int   
               [000094] ------------                 +--*  LCL_VAR   int    V04 loc2         
               [000095] ------------                 \--*  CNS_INT   int    10

***** BB09
STMT00031 (IL 0x0ED...0x0EF)
               [000102] ------------              *  JTRUE     void  
               [000101] ------------              \--*  NE        int   
               [000099] ------------                 +--*  LCL_VAR   int    V07 loc5         
               [000100] ------------                 \--*  CNS_INT   int    0

------------ BB10 [0F1..110) -> BB19 (always), preds={} succs={BB19}

***** BB10
STMT00055 (IL 0x0F1...0x0F6)
               [000174] -AC-G-------              *  ASG       struct (copy)
               [000172] D------N----              +--*  LCL_VAR   struct<System.DateTime, 8> V34 tmp16        
               [000171] --C-G-------              \--*  CALL      struct System.DateTime.get_Now

***** BB10
STMT00056 (IL 0x0F6...  ???)
               [000178] -A----------              *  ASG       struct (copy)
               [000176] D------N----              +--*  LCL_VAR   struct<System.DateTime, 8> V03 loc1         
               [000175] ------------              \--*  LCL_VAR   struct<System.DateTime, 8> V34 tmp16        

***** BB10
STMT00057 (IL 0x0F7...0x10D)
               [000183] -AC-G-------              *  ASG       ref   
               [000182] D------N----              +--*  LCL_VAR   ref    V35 tmp17        
               [000181] --C-G-------              \--*  CALL      ref    System.DateTime.ToString
               [000180] ------------ this in rcx     \--*  ADDR      byref 
               [000179] -------N----                    \--*  LCL_VAR   struct<System.DateTime, 8> V03 loc1         

***** BB10
STMT00058 (IL 0x0FE...  ???)
               [000188] -AC-G-------              *  ASG       ref   
               [000187] D------N----              +--*  LCL_VAR   ref    V36 tmp18        
               [000186] --C-G-------              \--*  CALL      ref    System.String.Concat
               [000184] ------------ arg0            +--*  LCL_VAR   ref    V35 tmp17        
               [000185] ------------ arg1            \--*  CNS_STR   ref   <string constant>

***** BB10
STMT00059 (IL 0x108...  ???)
               [000190] --C-G-------              *  CALL      void   System.Console.WriteLine
               [000189] ------------ arg0         \--*  LCL_VAR   ref    V36 tmp18        

***** BB10
STMT00060 (IL 0x10D...  ???)
               [000191] ------------              *  NO_OP     void  

***** BB10
STMT00061 (IL 0x10E...0x10E)
               [000192] ------------              *  NOP       void  

------------ BB11 [110..11C), preds={} succs={BB12}

***** BB11
STMT00064 (IL 0x110...0x110)
               [000197] ------------              *  NO_OP     void  

***** BB11
STMT00065 (IL 0x111...0x117)
               [000201] -A-XG-------              *  ASG       ref   
               [000200] D------N----              +--*  LCL_VAR   ref    V08 loc6         
               [000199] ---XG-------              \--*  FIELD     ref    _myList
               [000198] ------------                 \--*  LCL_VAR   ref    V00 this         

***** BB11
STMT00066 (IL 0x119...0x11A)
               [000204] -A----------              *  ASG       int   
               [000203] D------N----              +--*  LCL_VAR   int    V09 loc7         
               [000202] ------------              \--*  CNS_INT   int    0

------------ BB12 [11C..145) -> BB14 (cond), preds={} succs={BB13,BB14}

***** BB12
STMT00067 (IL 0x11C...0x125)
               [000208] --C-G-------              *  CALL      void   System.Threading.Monitor.Enter
               [000205] ------------ arg0         +--*  LCL_VAR   ref    V08 loc6         
               [000207] ------------ arg1         \--*  ADDR      byref 
               [000206] -------N----                 \--*  LCL_VAR   int    V09 loc7         

***** BB12
STMT00068 (IL 0x125...  ???)
               [000209] ------------              *  NO_OP     void  

***** BB12
STMT00069 (IL 0x126...0x126)
               [000210] ------------              *  NO_OP     void  

***** BB12
STMT00070 (IL 0x127...0x13F)
               [000219] -A-XG-------              *  ASG       int   
               [000218] D------N----              +--*  LCL_VAR   int    V10 loc8         
               [000217] ---XG-------              \--*  EQ        int   
               [000213] ---XG-------                 +--*  FIELD     ref    Head
               [000212] ---XG-------                 |  \--*  FIELD     ref    _myList
               [000211] ------------                 |     \--*  LCL_VAR   ref    V00 this         
               [000216] ---XG-------                 \--*  FIELD     ref    Tail
               [000215] ---XG-------                    \--*  FIELD     ref    _myList
               [000214] ------------                       \--*  LCL_VAR   ref    V00 this         

***** BB12
STMT00071 (IL 0x141...0x143)
               [000223] ------------              *  JTRUE     void  
               [000222] ------------              \--*  EQ        int   
               [000220] ------------                 +--*  LCL_VAR   int    V10 loc8         
               [000221] ------------                 \--*  CNS_INT   int    0

------------ BB13 [145..148) -> BB36 (always), preds={} succs={BB36}

***** BB13
STMT00077 (IL 0x145...0x145)
               [000230] ------------              *  NO_OP     void  

***** BB13
STMT00078 (IL 0x146...0x146)
               [000231] ------------              *  NOP       void  

------------ BB14 [148..14B) -> BB34 (always), preds={} succs={BB34}

***** BB14
STMT00072 (IL 0x148...0x148)
               [000224] ------------              *  NO_OP     void  

***** BB14
STMT00073 (IL 0x149...0x149)
               [000225] ------------              *  NOP       void  

------------ BB36 [???..???) -> BB15 (callf), preds={} succs={BB15}

------------ BB37 [???..???) -> BB20 (ALWAYS), preds={} succs={BB20}

------------ BB34 [???..???) -> BB15 (callf), preds={} succs={BB15}

------------ BB35 [???..???) -> BB18 (ALWAYS), preds={} succs={BB18}

------------ BB15 [14B..14F) -> BB17 (cond), preds={} succs={BB16,BB17}

***** BB15
STMT00131 (IL 0x14B...0x14D)
               [000366] ------------              *  JTRUE     void  
               [000365] ------------              \--*  EQ        int   
               [000363] ------------                 +--*  LCL_VAR   int    V09 loc7         
               [000364] ------------                 \--*  CNS_INT   int    0

------------ BB16 [14F..157), preds={} succs={BB17}

***** BB16
STMT00133 (IL 0x14F...0x156)
               [000369] --C-G-------              *  CALL      void   System.Threading.Monitor.Exit
               [000368] ------------ arg0         \--*  LCL_VAR   ref    V08 loc6         

***** BB16
STMT00134 (IL 0x156...  ???)
               [000370] ------------              *  NO_OP     void  

------------ BB17 [157..158) (finret), preds={} succs={BB37,BB35}

***** BB17
STMT00132 (IL 0x157...0x157)
               [000367] ------------              *  RETFILT   void  

------------ BB18 [158..161), preds={} succs={BB19}

***** BB18
STMT00074 (IL 0x158...0x15F)
               [000227] --C-G-------              *  CALL      void   System.Threading.Thread.Sleep
               [000226] ------------ arg0         \--*  CNS_INT   int    100

***** BB18
STMT00075 (IL 0x15F...  ???)
               [000228] ------------              *  NO_OP     void  

***** BB18
STMT00076 (IL 0x160...0x160)
               [000229] ------------              *  NO_OP     void  

------------ BB19 [161..166) -> BB11 (always), preds={} succs={BB11}

***** BB19
STMT00062 (IL 0x161...0x162)
               [000195] -A----------              *  ASG       int   
               [000194] D------N----              +--*  LCL_VAR   int    V11 loc9         
               [000193] ------------              \--*  CNS_INT   int    1

***** BB19
STMT00063 (IL 0x164...0x164)
               [000196] ------------              *  NOP       void  

------------ BB20 [166..1B1) -> BB30 (always), preds={} succs={BB30}

***** BB20
STMT00079 (IL 0x166...0x16B)
               [000235] -AC-G-------              *  ASG       struct (copy)
               [000233] D------N----              +--*  LCL_VAR   struct<System.DateTime, 8> V37 tmp19        
               [000232] --C-G-------              \--*  CALL      struct System.DateTime.get_Now

***** BB20
STMT00080 (IL 0x16B...  ???)
               [000239] -A----------              *  ASG       struct (copy)
               [000237] D------N----              +--*  LCL_VAR   struct<System.DateTime, 8> V03 loc1         
               [000236] ------------              \--*  LCL_VAR   struct<System.DateTime, 8> V37 tmp19        

***** BB20
STMT00081 (IL 0x16C...0x182)
               [000244] -AC-G-------              *  ASG       ref   
               [000243] D------N----              +--*  LCL_VAR   ref    V38 tmp20        
               [000242] --C-G-------              \--*  CALL      ref    System.DateTime.ToString
               [000241] ------------ this in rcx     \--*  ADDR      byref 
               [000240] -------N----                    \--*  LCL_VAR   struct<System.DateTime, 8> V03 loc1         

***** BB20
STMT00082 (IL 0x173...  ???)
               [000249] -AC-G-------              *  ASG       ref   
               [000248] D------N----              +--*  LCL_VAR   ref    V39 tmp21        
               [000247] --C-G-------              \--*  CALL      ref    System.String.Concat
               [000245] ------------ arg0            +--*  LCL_VAR   ref    V38 tmp20        
               [000246] ------------ arg1            \--*  CNS_STR   ref   <string constant>

***** BB20
STMT00083 (IL 0x17D...  ???)
               [000251] --C-G-------              *  CALL      void   System.Console.WriteLine
               [000250] ------------ arg0         \--*  LCL_VAR   ref    V39 tmp21        

***** BB20
STMT00084 (IL 0x182...  ???)
               [000252] ------------              *  NO_OP     void  

***** BB20
STMT00085 (IL 0x183...0x18D)
               [000254] --C-G-------              *  CALL      void   System.Console.WriteLine
               [000253] ------------ arg0         \--*  CNS_STR   ref   <string constant>

***** BB20
STMT00086 (IL 0x18D...  ???)
               [000255] ------------              *  NO_OP     void  

***** BB20
STMT00087 (IL 0x18E...0x198)
               [000257] --C-G-------              *  CALL      void   System.Console.WriteLine
               [000256] ------------ arg0         \--*  CNS_STR   ref   <string constant>

***** BB20
STMT00088 (IL 0x198...  ???)
               [000258] ------------              *  NO_OP     void  

***** BB20
STMT00089 (IL 0x199...0x1A3)
               [000260] --C-G-------              *  CALL      void   System.Console.WriteLine
               [000259] ------------ arg0         \--*  CNS_STR   ref   <string constant>

***** BB20
STMT00090 (IL 0x1A3...  ???)
               [000261] ------------              *  NO_OP     void  

***** BB20
STMT00091 (IL 0x1A4...0x1AE)
               [000263] --C-G-------              *  CALL      void   System.Console.WriteLine
               [000262] ------------ arg0         \--*  CNS_STR   ref   <string constant>

***** BB20
STMT00092 (IL 0x1AE...  ???)
               [000264] ------------              *  NO_OP     void  

***** BB20
STMT00093 (IL 0x1AF...0x1AF)
               [000265] ------------              *  NOP       void  

------------ BB21 [1B1..1CA) -> BB23 (cond), preds={} succs={BB22,BB23}

***** BB21
STMT00096 (IL 0x1B1...0x1B1)
               [000270] ------------              *  NO_OP     void  

***** BB21
STMT00097 (IL 0x1B2...0x1B7)
               [000271] S-C-G-------              *  CALL      void   System.Console.ReadKey
               [000273] ------------ arg0         \--*  ADDR      byref 
               [000272] -------N----                 \--*  LCL_VAR   struct<System.ConsoleKeyInfo, 12> V40 tmp22        

***** BB21
STMT00098 (IL 0x1B7...  ???)
               [000277] -A----------              *  ASG       struct (copy)
               [000275] D------N----              +--*  LCL_VAR   struct<System.ConsoleKeyInfo, 12> V12 loc10        
               [000274] ------------              \--*  LCL_VAR   struct<System.ConsoleKeyInfo, 12> V40 tmp22        

***** BB21
STMT00099 (IL 0x1B9...0x1C4)
               [000282] -AC-G-------              *  ASG       int   
               [000281] D------N----              +--*  LCL_VAR   int    V41 tmp23        
               [000280] --C-G-------              \--*  CALL      int    System.ConsoleKeyInfo.get_Key
               [000279] ------------ this in rcx     \--*  ADDR      byref 
               [000278] -------N----                    \--*  LCL_VAR   struct<System.ConsoleKeyInfo, 12> V12 loc10        

***** BB21
STMT00100 (IL 0x1C0...  ???)
               [000287] -A----------              *  ASG       int   
               [000286] D------N----              +--*  LCL_VAR   int    V13 loc11        
               [000285] ------------              \--*  EQ        int   
               [000283] ------------                 +--*  LCL_VAR   int    V41 tmp23        
               [000284] ------------                 \--*  CNS_INT   int    71

***** BB21
STMT00101 (IL 0x1C6...0x1C8)
               [000291] ------------              *  JTRUE     void  
               [000290] ------------              \--*  EQ        int   
               [000288] ------------                 +--*  LCL_VAR   int    V13 loc11        
               [000289] ------------                 \--*  CNS_INT   int    0

------------ BB22 [1CA..1D9) -> BB29 (always), preds={} succs={BB29}

***** BB22
STMT00125 (IL 0x1CA...0x1CA)
               [000354] ------------              *  NO_OP     void  

***** BB22
STMT00126 (IL 0x1CB...0x1D5)
               [000357] -AC-G-------              *  ASG       int   
               [000356] D------N----              +--*  LCL_VAR   int    V45 tmp27        
               [000355] --C-G-------              \--*  CALL      int    System.GC.get_MaxGeneration

***** BB22
STMT00127 (IL 0x1D0...  ???)
               [000359] --C-G-------              *  CALL      void   System.GC.Collect
               [000358] ------------ arg0         \--*  LCL_VAR   int    V45 tmp27        

***** BB22
STMT00128 (IL 0x1D5...  ???)
               [000360] ------------              *  NO_OP     void  

***** BB22
STMT00129 (IL 0x1D6...0x1D6)
               [000361] ------------              *  NO_OP     void  

***** BB22
STMT00130 (IL 0x1D7...0x1D7)
               [000362] ------------              *  NOP       void  

------------ BB23 [1D9..1EA) -> BB25 (cond), preds={} succs={BB24,BB25}

***** BB23
STMT00102 (IL 0x1D9...0x1E4)
               [000296] -AC-G-------              *  ASG       int   
               [000295] D------N----              +--*  LCL_VAR   int    V42 tmp24        
               [000294] --C-G-------              \--*  CALL      int    System.ConsoleKeyInfo.get_Key
               [000293] ------------ this in rcx     \--*  ADDR      byref 
               [000292] -------N----                    \--*  LCL_VAR   struct<System.ConsoleKeyInfo, 12> V12 loc10        

***** BB23
STMT00103 (IL 0x1E0...  ???)
               [000301] -A----------              *  ASG       int   
               [000300] D------N----              +--*  LCL_VAR   int    V14 loc12        
               [000299] ------------              \--*  EQ        int   
               [000297] ------------                 +--*  LCL_VAR   int    V42 tmp24        
               [000298] ------------                 \--*  CNS_INT   int    72

***** BB23
STMT00104 (IL 0x1E6...0x1E8)
               [000305] ------------              *  JTRUE     void  
               [000304] ------------              \--*  EQ        int   
               [000302] ------------                 +--*  LCL_VAR   int    V14 loc12        
               [000303] ------------                 \--*  CNS_INT   int    0

------------ BB24 [1EA..1F4) -> BB29 (always), preds={} succs={BB29}

***** BB24
STMT00120 (IL 0x1EA...0x1EA)
               [000349] ------------              *  NO_OP     void  

***** BB24
STMT00121 (IL 0x1EB...0x1F0)
               [000350] --C-G-------              *  CALL      void   System.Diagnostics.Debugger.Break

***** BB24
STMT00122 (IL 0x1F0...  ???)
               [000351] ------------              *  NO_OP     void  

***** BB24
STMT00123 (IL 0x1F1...0x1F1)
               [000352] ------------              *  NO_OP     void  

***** BB24
STMT00124 (IL 0x1F2...0x1F2)
               [000353] ------------              *  NOP       void  

------------ BB25 [1F4..205) -> BB27 (cond), preds={} succs={BB26,BB27}

***** BB25
STMT00105 (IL 0x1F4...0x1FF)
               [000310] -AC-G-------              *  ASG       int   
               [000309] D------N----              +--*  LCL_VAR   int    V43 tmp25        
               [000308] --C-G-------              \--*  CALL      int    System.ConsoleKeyInfo.get_Key
               [000307] ------------ this in rcx     \--*  ADDR      byref 
               [000306] -------N----                    \--*  LCL_VAR   struct<System.ConsoleKeyInfo, 12> V12 loc10        

***** BB25
STMT00106 (IL 0x1FB...  ???)
               [000315] -A----------              *  ASG       int   
               [000314] D------N----              +--*  LCL_VAR   int    V15 loc13        
               [000313] ------------              \--*  EQ        int   
               [000311] ------------                 +--*  LCL_VAR   int    V43 tmp25        
               [000312] ------------                 \--*  CNS_INT   int    82

***** BB25
STMT00107 (IL 0x201...0x203)
               [000319] ------------              *  JTRUE     void  
               [000318] ------------              \--*  EQ        int   
               [000316] ------------                 +--*  LCL_VAR   int    V15 loc13        
               [000317] ------------                 \--*  CNS_INT   int    0

------------ BB26 [205..210) -> BB29 (always), preds={} succs={BB29}

***** BB26
STMT00116 (IL 0x205...0x205)
               [000342] ------------              *  NO_OP     void  

***** BB26
STMT00117 (IL 0x206...0x208)
               [000346] -A-XG-------              *  ASG       bool  
               [000345] ---XG--N----              +--*  FIELD     bool   _running
               [000343] ------------              |  \--*  LCL_VAR   ref    V00 this         
               [000344] ------------              \--*  CNS_INT   int    0

***** BB26
STMT00118 (IL 0x20D...0x20D)
               [000347] ------------              *  NO_OP     void  

***** BB26
STMT00119 (IL 0x20E...0x20E)
               [000348] ------------              *  NOP       void  

------------ BB27 [210..221) -> BB29 (cond), preds={} succs={BB28,BB29}

***** BB27
STMT00108 (IL 0x210...0x21B)
               [000324] -AC-G-------              *  ASG       int   
               [000323] D------N----              +--*  LCL_VAR   int    V44 tmp26        
               [000322] --C-G-------              \--*  CALL      int    System.ConsoleKeyInfo.get_Key
               [000321] ------------ this in rcx     \--*  ADDR      byref 
               [000320] -------N----                    \--*  LCL_VAR   struct<System.ConsoleKeyInfo, 12> V12 loc10        

***** BB27
STMT00109 (IL 0x217...  ???)
               [000329] -A----------              *  ASG       int   
               [000328] D------N----              +--*  LCL_VAR   int    V16 loc14        
               [000327] ------------              \--*  EQ        int   
               [000325] ------------                 +--*  LCL_VAR   int    V44 tmp26        
               [000326] ------------                 \--*  CNS_INT   int    81

***** BB27
STMT00110 (IL 0x21D...0x21F)
               [000333] ------------              *  JTRUE     void  
               [000332] ------------              \--*  EQ        int   
               [000330] ------------                 +--*  LCL_VAR   int    V16 loc14        
               [000331] ------------                 \--*  CNS_INT   int    0

------------ BB28 [221..224) -> BB31 (always), preds={} succs={BB31}

***** BB28
STMT00112 (IL 0x221...0x221)
               [000335] ------------              *  NO_OP     void  

***** BB28
STMT00113 (IL 0x222...0x222)
               [000336] ------------              *  NOP       void  

------------ BB29 [224..225), preds={} succs={BB30}

***** BB29
STMT00111 (IL 0x224...0x224)
               [000334] ------------              *  NO_OP     void  

------------ BB30 [225..22A) -> BB21 (always), preds={} succs={BB21}

***** BB30
STMT00094 (IL 0x225...0x226)
               [000268] -A----------              *  ASG       int   
               [000267] D------N----              +--*  LCL_VAR   int    V17 loc15        
               [000266] ------------              \--*  CNS_INT   int    1

***** BB30
STMT00095 (IL 0x228...0x228)
               [000269] ------------              *  NOP       void  

------------ BB31 [22A..232) (return), preds={} succs={}

***** BB31
STMT00114 (IL 0x22A...0x22C)
               [000340] -A-XG-------              *  ASG       bool  
               [000339] ---XG--N----              +--*  FIELD     bool   _running
               [000337] ------------              |  \--*  LCL_VAR   ref    V00 this         
               [000338] ------------              \--*  CNS_INT   int    0

***** BB31
STMT00115 (IL 0x231...0x231)
               [000341] ------------              *  RETURN    void  

-------------------------------------------------------------------------------------------------------------------

*************** Starting PHASE Indirect call transform

 -- no candidates to transform

*************** Finishing PHASE Indirect call transform [no changes]

*************** Starting PHASE Expand patchpoints

 -- no patchpoints to transform

*************** Finishing PHASE Expand patchpoints [no changes]

*************** Starting PHASE Post-import

*************** Finishing PHASE Post-import

*************** Starting PHASE Morph - Init

New BlockSet epoch 1, # of blocks (including unused BB00): 38, bitset array size: 1 (short)

*************** In fgRemoveEmptyBlocks

*************** Finishing PHASE Morph - Init
*************** In fgDebugCheckBBlist

*************** Starting PHASE Morph - Inlining

*************** Finishing PHASE Morph - Inlining [no changes]

*************** Starting PHASE Allocate Objects
disabled, punting

*************** Finishing PHASE Allocate Objects [no changes]

*************** Starting PHASE Morph - Add internal blocks

*************** After fgAddInternal()

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd                 weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [???..???)                                     i internal 
BB02 [0001]  1                             1       [000..078)-> BB09 (always)                     i newobj 
BB03 [0002]  1                             1       [078..083)                                     i bwd bwd-target 
BB04 [0003]  1  0                          1       [083..0D5)-> BB32 (always) T0      try { }     keep i try newobj bwd 
BB32 [0031]  1                             1       [???..???)-> BB05 (callf )                     i internal 
BB33 [0032]  0                             1       [???..???)-> BB08 (ALWAYS)                     i internal KEEP 
BB05 [0004]  1     0                       1       [0D5..0D9)-> BB07 ( cond )    H0   finally {   keep i bwd 
BB06 [0005]  1     0                       1       [0D9..0E0)                    H0               i bwd 
BB07 [0006]  2     0                       1       [0E0..0E1)        (finret)    H0   }           i bwd 
BB08 [0007]  1                             1       [0E1..0E6)                                     i bwd 
BB09 [0008]  2                             1       [0E6..0F1)-> BB03 ( cond )                     i bwd 
BB10 [0009]  1                             1       [0F1..110)-> BB19 (always)                     i 
BB11 [0010]  1                             1       [110..11C)                                     i bwd bwd-target 
BB12 [0011]  1  1                          1       [11C..145)-> BB14 ( cond ) T1      try {       keep i try bwd 
BB13 [0012]  1  1                          1       [145..148)-> BB36 (always) T1                  i bwd 
BB14 [0013]  1  1                          1       [148..14B)-> BB34 (always) T1      }           i bwd 
BB36 [0035]  1                             1       [???..???)-> BB15 (callf )                     i internal 
BB37 [0036]  0                             1       [???..???)-> BB20 (ALWAYS)                     i internal KEEP 
BB34 [0033]  1                             1       [???..???)-> BB15 (callf )                     i internal 
BB35 [0034]  0                             1       [???..???)-> BB18 (ALWAYS)                     i internal KEEP 
BB15 [0014]  1     1                       1       [14B..14F)-> BB17 ( cond )    H1   finally {   keep i bwd 
BB16 [0015]  1     1                       1       [14F..157)                    H1               i bwd 
BB17 [0016]  2     1                       1       [157..158)        (finret)    H1   }           i bwd 
BB18 [0017]  1                             1       [158..161)                                     i bwd 
BB19 [0018]  2                             1       [161..166)-> BB11 (always)                     i bwd 
BB20 [0019]  1                             1       [166..1B1)-> BB30 (always)                     i 
BB21 [0020]  1                             1       [1B1..1CA)-> BB23 ( cond )                     i bwd bwd-target 
BB22 [0021]  1                             1       [1CA..1D9)-> BB29 (always)                     i bwd 
BB23 [0022]  1                             1       [1D9..1EA)-> BB25 ( cond )                     i bwd 
BB24 [0023]  1                             1       [1EA..1F4)-> BB29 (always)                     i bwd 
BB25 [0024]  1                             1       [1F4..205)-> BB27 ( cond )                     i bwd 
BB26 [0025]  1                             1       [205..210)-> BB29 (always)                     i bwd 
BB27 [0026]  1                             1       [210..221)-> BB29 ( cond )                     i bwd 
BB28 [0027]  1                             1       [221..224)-> BB31 (always)                     i bwd 
BB29 [0028]  4                             1       [224..225)                                     i bwd 
BB30 [0029]  2                             1       [225..22A)-> BB21 (always)                     i bwd 
BB31 [0030]  1                             1       [22A..232)        (return)                     i 
-----------------------------------------------------------------------------------------------------------------------------------------

***************  Exception Handling table
index  eTry, eHnd
  0  ::            - Try at BB04..BB04 [083..0D5), Finally at BB05..BB07 [0D5..0E1)
  1  ::            - Try at BB12..BB14 [11C..14B), Finally at BB15..BB17 [14B..158)

*************** Finishing PHASE Morph - Add internal blocks

*************** Starting PHASE Remove empty try

*************** In fgRemoveEmptyTry()
Method compiled with minOpts, no removal.

*************** Finishing PHASE Remove empty try [no changes]

*************** Starting PHASE Remove empty finally
Method compiled with minOpts, no removal.

*************** Finishing PHASE Remove empty finally [no changes]

*************** Starting PHASE Merge callfinally chains
Method compiled with minOpts, no merging.

*************** Finishing PHASE Merge callfinally chains [no changes]

*************** Starting PHASE Clone finally
Method compiled with minOpts, no cloning.

*************** Finishing PHASE Clone finally [no changes]

*************** Starting PHASE Compute preds

Renumbering the basic blocks for fgComputePred

*************** Before renumbering the basic blocks

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd                 weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [???..???)                                     i internal 
BB02 [0001]  1                             1       [000..078)-> BB09 (always)                     i newobj 
BB03 [0002]  1                             1       [078..083)                                     i bwd bwd-target 
BB04 [0003]  1  0                          1       [083..0D5)-> BB32 (always) T0      try { }     keep i try newobj bwd 
BB32 [0031]  1                             1       [???..???)-> BB05 (callf )                     i internal 
BB33 [0032]  0                             1       [???..???)-> BB08 (ALWAYS)                     i internal KEEP 
BB05 [0004]  1     0                       1       [0D5..0D9)-> BB07 ( cond )    H0   finally {   keep i bwd 
BB06 [0005]  1     0                       1       [0D9..0E0)                    H0               i bwd 
BB07 [0006]  2     0                       1       [0E0..0E1)        (finret)    H0   }           i bwd 
BB08 [0007]  1                             1       [0E1..0E6)                                     i bwd 
BB09 [0008]  2                             1       [0E6..0F1)-> BB03 ( cond )                     i bwd 
BB10 [0009]  1                             1       [0F1..110)-> BB19 (always)                     i 
BB11 [0010]  1                             1       [110..11C)                                     i bwd bwd-target 
BB12 [0011]  1  1                          1       [11C..145)-> BB14 ( cond ) T1      try {       keep i try bwd 
BB13 [0012]  1  1                          1       [145..148)-> BB36 (always) T1                  i bwd 
BB14 [0013]  1  1                          1       [148..14B)-> BB34 (always) T1      }           i bwd 
BB36 [0035]  1                             1       [???..???)-> BB15 (callf )                     i internal 
BB37 [0036]  0                             1       [???..???)-> BB20 (ALWAYS)                     i internal KEEP 
BB34 [0033]  1                             1       [???..???)-> BB15 (callf )                     i internal 
BB35 [0034]  0                             1       [???..???)-> BB18 (ALWAYS)                     i internal KEEP 
BB15 [0014]  1     1                       1       [14B..14F)-> BB17 ( cond )    H1   finally {   keep i bwd 
BB16 [0015]  1     1                       1       [14F..157)                    H1               i bwd 
BB17 [0016]  2     1                       1       [157..158)        (finret)    H1   }           i bwd 
BB18 [0017]  1                             1       [158..161)                                     i bwd 
BB19 [0018]  2                             1       [161..166)-> BB11 (always)                     i bwd 
BB20 [0019]  1                             1       [166..1B1)-> BB30 (always)                     i 
BB21 [0020]  1                             1       [1B1..1CA)-> BB23 ( cond )                     i bwd bwd-target 
BB22 [0021]  1                             1       [1CA..1D9)-> BB29 (always)                     i bwd 
BB23 [0022]  1                             1       [1D9..1EA)-> BB25 ( cond )                     i bwd 
BB24 [0023]  1                             1       [1EA..1F4)-> BB29 (always)                     i bwd 
BB25 [0024]  1                             1       [1F4..205)-> BB27 ( cond )                     i bwd 
BB26 [0025]  1                             1       [205..210)-> BB29 (always)                     i bwd 
BB27 [0026]  1                             1       [210..221)-> BB29 ( cond )                     i bwd 
BB28 [0027]  1                             1       [221..224)-> BB31 (always)                     i bwd 
BB29 [0028]  4                             1       [224..225)                                     i bwd 
BB30 [0029]  2                             1       [225..22A)-> BB21 (always)                     i bwd 
BB31 [0030]  1                             1       [22A..232)        (return)                     i 
-----------------------------------------------------------------------------------------------------------------------------------------

***************  Exception Handling table
index  eTry, eHnd
  0  ::            - Try at BB04..BB04 [083..0D5), Finally at BB05..BB07 [0D5..0E1)
  1  ::            - Try at BB12..BB14 [11C..14B), Finally at BB15..BB17 [14B..158)
Renumber BB32 to BB05
Renumber BB33 to BB06
Renumber BB05 to BB07
Renumber BB06 to BB08
Renumber BB07 to BB09
Renumber BB08 to BB10
Renumber BB09 to BB11
Renumber BB10 to BB12
Renumber BB11 to BB13
Renumber BB12 to BB14
Renumber BB13 to BB15
Renumber BB14 to BB16
Renumber BB36 to BB17
Renumber BB37 to BB18
Renumber BB34 to BB19
Renumber BB35 to BB20
Renumber BB15 to BB21
Renumber BB16 to BB22
Renumber BB17 to BB23
Renumber BB18 to BB24
Renumber BB19 to BB25
Renumber BB20 to BB26
Renumber BB21 to BB27
Renumber BB22 to BB28
Renumber BB23 to BB29
Renumber BB24 to BB30
Renumber BB25 to BB31
Renumber BB26 to BB32
Renumber BB27 to BB33
Renumber BB28 to BB34
Renumber BB29 to BB35
Renumber BB30 to BB36
Renumber BB31 to BB37

*************** After renumbering the basic blocks

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd                 weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [???..???)                                     i internal 
BB02 [0001]  1                             1       [000..078)-> BB11 (always)                     i newobj 
BB03 [0002]  1                             1       [078..083)                                     i bwd bwd-target 
BB04 [0003]  1  0                          1       [083..0D5)-> BB05 (always) T0      try { }     keep i try newobj bwd 
BB05 [0031]  1                             1       [???..???)-> BB07 (callf )                     i internal 
BB06 [0032]  0                             1       [???..???)-> BB10 (ALWAYS)                     i internal KEEP 
BB07 [0004]  1     0                       1       [0D5..0D9)-> BB09 ( cond )    H0   finally {   keep i bwd 
BB08 [0005]  1     0                       1       [0D9..0E0)                    H0               i bwd 
BB09 [0006]  2     0                       1       [0E0..0E1)        (finret)    H0   }           i bwd 
BB10 [0007]  1                             1       [0E1..0E6)                                     i bwd 
BB11 [0008]  2                             1       [0E6..0F1)-> BB03 ( cond )                     i bwd 
BB12 [0009]  1                             1       [0F1..110)-> BB25 (always)                     i 
BB13 [0010]  1                             1       [110..11C)                                     i bwd bwd-target 
BB14 [0011]  1  1                          1       [11C..145)-> BB16 ( cond ) T1      try {       keep i try bwd 
BB15 [0012]  1  1                          1       [145..148)-> BB17 (always) T1                  i bwd 
BB16 [0013]  1  1                          1       [148..14B)-> BB19 (always) T1      }           i bwd 
BB17 [0035]  1                             1       [???..???)-> BB21 (callf )                     i internal 
BB18 [0036]  0                             1       [???..???)-> BB26 (ALWAYS)                     i internal KEEP 
BB19 [0033]  1                             1       [???..???)-> BB21 (callf )                     i internal 
BB20 [0034]  0                             1       [???..???)-> BB24 (ALWAYS)                     i internal KEEP 
BB21 [0014]  1     1                       1       [14B..14F)-> BB23 ( cond )    H1   finally {   keep i bwd 
BB22 [0015]  1     1                       1       [14F..157)                    H1               i bwd 
BB23 [0016]  2     1                       1       [157..158)        (finret)    H1   }           i bwd 
BB24 [0017]  1                             1       [158..161)                                     i bwd 
BB25 [0018]  2                             1       [161..166)-> BB13 (always)                     i bwd 
BB26 [0019]  1                             1       [166..1B1)-> BB36 (always)                     i 
BB27 [0020]  1                             1       [1B1..1CA)-> BB29 ( cond )                     i bwd bwd-target 
BB28 [0021]  1                             1       [1CA..1D9)-> BB35 (always)                     i bwd 
BB29 [0022]  1                             1       [1D9..1EA)-> BB31 ( cond )                     i bwd 
BB30 [0023]  1                             1       [1EA..1F4)-> BB35 (always)                     i bwd 
BB31 [0024]  1                             1       [1F4..205)-> BB33 ( cond )                     i bwd 
BB32 [0025]  1                             1       [205..210)-> BB35 (always)                     i bwd 
BB33 [0026]  1                             1       [210..221)-> BB35 ( cond )                     i bwd 
BB34 [0027]  1                             1       [221..224)-> BB37 (always)                     i bwd 
BB35 [0028]  4                             1       [224..225)                                     i bwd 
BB36 [0029]  2                             1       [225..22A)-> BB27 (always)                     i bwd 
BB37 [0030]  1                             1       [22A..232)        (return)                     i 
-----------------------------------------------------------------------------------------------------------------------------------------

***************  Exception Handling table
index  eTry, eHnd
  0  ::            - Try at BB04..BB04 [083..0D5), Finally at BB07..BB09 [0D5..0E1)
  1  ::            - Try at BB14..BB16 [11C..14B), Finally at BB21..BB23 [14B..158)

New BlockSet epoch 2, # of blocks (including unused BB00): 38, bitset array size: 1 (short)

*************** In fgComputePreds()

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd                 weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [???..???)                                     i internal 
BB02 [0001]  1                             1       [000..078)-> BB11 (always)                     i newobj 
BB03 [0002]  1                             1       [078..083)                                     i bwd bwd-target 
BB04 [0003]  1  0                          1       [083..0D5)-> BB05 (always) T0      try { }     keep i try newobj bwd 
BB05 [0031]  1                             1       [???..???)-> BB07 (callf )                     i internal 
BB06 [0032]  0                             1       [???..???)-> BB10 (ALWAYS)                     i internal KEEP 
BB07 [0004]  1     0                       1       [0D5..0D9)-> BB09 ( cond )    H0   finally {   keep i bwd 
BB08 [0005]  1     0                       1       [0D9..0E0)                    H0               i bwd 
BB09 [0006]  2     0                       1       [0E0..0E1)        (finret)    H0   }           i bwd 
BB10 [0007]  1                             1       [0E1..0E6)                                     i bwd 
BB11 [0008]  2                             1       [0E6..0F1)-> BB03 ( cond )                     i bwd 
BB12 [0009]  1                             1       [0F1..110)-> BB25 (always)                     i 
BB13 [0010]  1                             1       [110..11C)                                     i bwd bwd-target 
BB14 [0011]  1  1                          1       [11C..145)-> BB16 ( cond ) T1      try {       keep i try bwd 
BB15 [0012]  1  1                          1       [145..148)-> BB17 (always) T1                  i bwd 
BB16 [0013]  1  1                          1       [148..14B)-> BB19 (always) T1      }           i bwd 
BB17 [0035]  1                             1       [???..???)-> BB21 (callf )                     i internal 
BB18 [0036]  0                             1       [???..???)-> BB26 (ALWAYS)                     i internal KEEP 
BB19 [0033]  1                             1       [???..???)-> BB21 (callf )                     i internal 
BB20 [0034]  0                             1       [???..???)-> BB24 (ALWAYS)                     i internal KEEP 
BB21 [0014]  1     1                       1       [14B..14F)-> BB23 ( cond )    H1   finally {   keep i bwd 
BB22 [0015]  1     1                       1       [14F..157)                    H1               i bwd 
BB23 [0016]  2     1                       1       [157..158)        (finret)    H1   }           i bwd 
BB24 [0017]  1                             1       [158..161)                                     i bwd 
BB25 [0018]  2                             1       [161..166)-> BB13 (always)                     i bwd 
BB26 [0019]  1                             1       [166..1B1)-> BB36 (always)                     i 
BB27 [0020]  1                             1       [1B1..1CA)-> BB29 ( cond )                     i bwd bwd-target 
BB28 [0021]  1                             1       [1CA..1D9)-> BB35 (always)                     i bwd 
BB29 [0022]  1                             1       [1D9..1EA)-> BB31 ( cond )                     i bwd 
BB30 [0023]  1                             1       [1EA..1F4)-> BB35 (always)                     i bwd 
BB31 [0024]  1                             1       [1F4..205)-> BB33 ( cond )                     i bwd 
BB32 [0025]  1                             1       [205..210)-> BB35 (always)                     i bwd 
BB33 [0026]  1                             1       [210..221)-> BB35 ( cond )                     i bwd 
BB34 [0027]  1                             1       [221..224)-> BB37 (always)                     i bwd 
BB35 [0028]  4                             1       [224..225)                                     i bwd 
BB36 [0029]  2                             1       [225..22A)-> BB27 (always)                     i bwd 
BB37 [0030]  1                             1       [22A..232)        (return)                     i 
-----------------------------------------------------------------------------------------------------------------------------------------

Setting edge weights for BB01 -> BB02 to [0 .. 3.402823e+38]
Setting edge weights for BB02 -> BB11 to [0 .. 3.402823e+38]
Setting edge weights for BB03 -> BB04 to [0 .. 3.402823e+38]
Setting edge weights for BB04 -> BB05 to [0 .. 3.402823e+38]
Setting edge weights for BB05 -> BB07 to [0 .. 3.402823e+38]
Setting edge weights for BB06 -> BB10 to [0 .. 3.402823e+38]
Setting edge weights for BB07 -> BB09 to [0 .. 3.402823e+38]
Setting edge weights for BB07 -> BB08 to [0 .. 3.402823e+38]
Setting edge weights for BB08 -> BB09 to [0 .. 3.402823e+38]
Setting edge weights for BB09 -> BB06 to [0 .. 3.402823e+38]
Setting edge weights for BB10 -> BB11 to [0 .. 3.402823e+38]
Setting edge weights for BB11 -> BB03 to [0 .. 3.402823e+38]
Setting edge weights for BB11 -> BB12 to [0 .. 3.402823e+38]
Setting edge weights for BB12 -> BB25 to [0 .. 3.402823e+38]
Setting edge weights for BB13 -> BB14 to [0 .. 3.402823e+38]
Setting edge weights for BB14 -> BB16 to [0 .. 3.402823e+38]
Setting edge weights for BB14 -> BB15 to [0 .. 3.402823e+38]
Setting edge weights for BB15 -> BB17 to [0 .. 3.402823e+38]
Setting edge weights for BB16 -> BB19 to [0 .. 3.402823e+38]
Setting edge weights for BB17 -> BB21 to [0 .. 3.402823e+38]
Setting edge weights for BB18 -> BB26 to [0 .. 3.402823e+38]
Setting edge weights for BB19 -> BB21 to [0 .. 3.402823e+38]
Setting edge weights for BB20 -> BB24 to [0 .. 3.402823e+38]
Setting edge weights for BB21 -> BB23 to [0 .. 3.402823e+38]
Setting edge weights for BB21 -> BB22 to [0 .. 3.402823e+38]
Setting edge weights for BB22 -> BB23 to [0 .. 3.402823e+38]
Setting edge weights for BB23 -> BB18 to [0 .. 3.402823e+38]
Setting edge weights for BB23 -> BB20 to [0 .. 3.402823e+38]
Setting edge weights for BB24 -> BB25 to [0 .. 3.402823e+38]
Setting edge weights for BB25 -> BB13 to [0 .. 3.402823e+38]
Setting edge weights for BB26 -> BB36 to [0 .. 3.402823e+38]
Setting edge weights for BB27 -> BB29 to [0 .. 3.402823e+38]
Setting edge weights for BB27 -> BB28 to [0 .. 3.402823e+38]
Setting edge weights for BB28 -> BB35 to [0 .. 3.402823e+38]
Setting edge weights for BB29 -> BB31 to [0 .. 3.402823e+38]
Setting edge weights for BB29 -> BB30 to [0 .. 3.402823e+38]
Setting edge weights for BB30 -> BB35 to [0 .. 3.402823e+38]
Setting edge weights for BB31 -> BB33 to [0 .. 3.402823e+38]
Setting edge weights for BB31 -> BB32 to [0 .. 3.402823e+38]
Setting edge weights for BB32 -> BB35 to [0 .. 3.402823e+38]
Setting edge weights for BB33 -> BB35 to [0 .. 3.402823e+38]
Setting edge weights for BB33 -> BB34 to [0 .. 3.402823e+38]
Setting edge weights for BB34 -> BB37 to [0 .. 3.402823e+38]
Setting edge weights for BB35 -> BB36 to [0 .. 3.402823e+38]
Setting edge weights for BB36 -> BB27 to [0 .. 3.402823e+38]

*************** After fgComputePreds()

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [???..???)                                     i internal 
BB02 [0001]  1       BB01                  1       [000..078)-> BB11 (always)                     i newobj 
BB03 [0002]  1       BB11                  1       [078..083)                                     i bwd bwd-target 
BB04 [0003]  1  0    BB03                  1       [083..0D5)-> BB05 (always) T0      try { }     keep i try newobj bwd 
BB05 [0031]  1       BB04                  1       [???..???)-> BB07 (callf )                     i internal 
BB06 [0032]  1       BB09                  1       [???..???)-> BB10 (ALWAYS)                     i internal KEEP 
BB07 [0004]  2     0 BB05                  1       [0D5..0D9)-> BB09 ( cond )    H0   finally {   keep i bwd 
BB08 [0005]  1     0 BB07                  1       [0D9..0E0)                    H0               i bwd 
BB09 [0006]  2     0 BB07,BB08             1       [0E0..0E1)        (finret)    H0   }           i bwd 
BB10 [0007]  1       BB06                  1       [0E1..0E6)                                     i bwd 
BB11 [0008]  2       BB02,BB10             1       [0E6..0F1)-> BB03 ( cond )                     i bwd 
BB12 [0009]  1       BB11                  1       [0F1..110)-> BB25 (always)                     i 
BB13 [0010]  1       BB25                  1       [110..11C)                                     i bwd bwd-target 
BB14 [0011]  1  1    BB13                  1       [11C..145)-> BB16 ( cond ) T1      try {       keep i try bwd 
BB15 [0012]  1  1    BB14                  1       [145..148)-> BB17 (always) T1                  i bwd 
BB16 [0013]  1  1    BB14                  1       [148..14B)-> BB19 (always) T1      }           i bwd 
BB17 [0035]  1       BB15                  1       [???..???)-> BB21 (callf )                     i internal 
BB18 [0036]  1       BB23                  1       [???..???)-> BB26 (ALWAYS)                     i internal KEEP 
BB19 [0033]  1       BB16                  1       [???..???)-> BB21 (callf )                     i internal 
BB20 [0034]  1       BB23                  1       [???..???)-> BB24 (ALWAYS)                     i internal KEEP 
BB21 [0014]  3     1 BB17,BB19             1       [14B..14F)-> BB23 ( cond )    H1   finally {   keep i bwd 
BB22 [0015]  1     1 BB21                  1       [14F..157)                    H1               i bwd 
BB23 [0016]  2     1 BB21,BB22             1       [157..158)        (finret)    H1   }           i bwd 
BB24 [0017]  1       BB20                  1       [158..161)                                     i bwd 
BB25 [0018]  2       BB12,BB24             1       [161..166)-> BB13 (always)                     i bwd 
BB26 [0019]  1       BB18                  1       [166..1B1)-> BB36 (always)                     i 
BB27 [0020]  1       BB36                  1       [1B1..1CA)-> BB29 ( cond )                     i bwd bwd-target 
BB28 [0021]  1       BB27                  1       [1CA..1D9)-> BB35 (always)                     i bwd 
BB29 [0022]  1       BB27                  1       [1D9..1EA)-> BB31 ( cond )                     i bwd 
BB30 [0023]  1       BB29                  1       [1EA..1F4)-> BB35 (always)                     i bwd 
BB31 [0024]  1       BB29                  1       [1F4..205)-> BB33 ( cond )                     i bwd 
BB32 [0025]  1       BB31                  1       [205..210)-> BB35 (always)                     i bwd 
BB33 [0026]  1       BB31                  1       [210..221)-> BB35 ( cond )                     i bwd 
BB34 [0027]  1       BB33                  1       [221..224)-> BB37 (always)                     i bwd 
BB35 [0028]  4       BB28,BB30,BB32,BB33   1       [224..225)                                     i bwd 
BB36 [0029]  2       BB26,BB35             1       [225..22A)-> BB27 (always)                     i bwd 
BB37 [0030]  1       BB34                  1       [22A..232)        (return)                     i 
-----------------------------------------------------------------------------------------------------------------------------------------


*************** Finishing PHASE Compute preds

*************** Starting PHASE Morph - Promote Structs

*************** In fgResetImplicitByRefRefCount()
*************** In fgPromoteStructs()
  promotion opt flag not enabled

*************** Finishing PHASE Morph - Promote Structs

*************** Starting PHASE Morph - Structs/AddrExp

*************** In fgMarkAddressExposedLocals()
LocalAddressVisitor visiting statement:
STMT00000 (IL   ???...  ???)
               [000000] ------------              *  NOP       void  

LocalAddressVisitor visiting statement:
STMT00135 (IL   ???...  ???)
               [000378] --C-G-------              *  QMARK     void  
               [000374] Q-----------    if        +--*  EQ        int   
               [000372] ------------              |  +--*  IND       int   
               [000371] H-----------              |  |  \--*  CNS_INT(h) long   0x7ffdb6f1d838 global ptr
               [000373] ------------              |  \--*  CNS_INT   int    0
               [000377] --C-G-------    if        \--*  COLON     void  
               [000375] --C-G------- else            +--*  CALL help void   HELPER.CORINFO_HELP_DBG_IS_JUST_MY_CODE
               [000376] ------------ then            \--*  NOP       void  

LocalAddressVisitor visiting statement:
STMT00001 (IL 0x000...0x000)
               [000001] ------------              *  NO_OP     void  

LocalAddressVisitor visiting statement:
STMT00002 (IL 0x001...0x006)
               [000005] -AC-G-------              *  ASG       struct (copy)
               [000003] D------N----              +--*  LCL_VAR   struct<System.DateTime, 8> V19 tmp1         
               [000002] --C-G-------              \--*  CALL      struct System.DateTime.get_Now

LocalAddressVisitor visiting statement:
STMT00003 (IL 0x006...  ???)
               [000009] -A----------              *  ASG       struct (copy)
               [000007] D------N----              +--*  LCL_VAR   struct<System.DateTime, 8> V03 loc1         
               [000006] ------------              \--*  LCL_VAR   struct<System.DateTime, 8> V19 tmp1         

LocalAddressVisitor visiting statement:
STMT00004 (IL 0x007...0x01D)
               [000014] -AC-G-------              *  ASG       ref   
               [000013] D------N----              +--*  LCL_VAR   ref    V20 tmp2         
               [000012] --C-G-------              \--*  CALL      ref    System.DateTime.ToString
               [000011] ------------ this in rcx     \--*  ADDR      byref 
               [000010] -------N----                    \--*  LCL_VAR   struct<System.DateTime, 8> V03 loc1         

Local V03 should not be enregistered because: it is address exposed
LocalAddressVisitor modified statement:
STMT00004 (IL 0x007...0x01D)
               [000014] -AC-G-------              *  ASG       ref   
               [000013] D------N----              +--*  LCL_VAR   ref    V20 tmp2         
               [000012] --C-G-------              \--*  CALL      ref    System.DateTime.ToString
               [000011] ------------ this in rcx     \--*  LCL_VAR_ADDR byref  V03 loc1         

LocalAddressVisitor visiting statement:
STMT00005 (IL 0x00E...  ???)
               [000019] -AC-G-------              *  ASG       ref   
               [000018] D------N----              +--*  LCL_VAR   ref    V21 tmp3         
               [000017] --C-G-------              \--*  CALL      ref    System.String.Concat
               [000015] ------------ arg0            +--*  LCL_VAR   ref    V20 tmp2         
               [000016] ------------ arg1            \--*  CNS_STR   ref   <string constant>

LocalAddressVisitor visiting statement:
STMT00006 (IL 0x018...  ???)
               [000021] --C-G-------              *  CALL      void   System.Console.WriteLine
               [000020] ------------ arg0         \--*  LCL_VAR   ref    V21 tmp3         

LocalAddressVisitor visiting statement:
STMT00007 (IL 0x01D...  ???)
               [000022] ------------              *  NO_OP     void  

LocalAddressVisitor visiting statement:
STMT00008 (IL 0x01E...0x024)
               [000027] -AC---------              *  ASG       ref   
               [000026] D------N----              +--*  LCL_VAR   ref    V22 tmp4         
               [000025] --C---------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
               [000024] H----------- arg0            \--*  CNS_INT(h) long   0x7ffdb7022b70 method

LocalAddressVisitor visiting statement:
STMT00009 (IL   ???...  ???)
               [000029] --C-G-------              *  CALL      void   FalseLeakRepro.List..ctor
               [000028] ------------ this in rcx  \--*  LCL_VAR   ref    V22 tmp4         

LocalAddressVisitor visiting statement:
STMT00010 (IL 0x024...  ???)
               [000032] -A-XG-------              *  ASG       ref   
               [000031] ---XG--N----              +--*  FIELD     ref    _myList
               [000023] ------------              |  \--*  LCL_VAR   ref    V00 this         
               [000030] ------------              \--*  LCL_VAR   ref    V22 tmp4         

LocalAddressVisitor visiting statement:
STMT00011 (IL 0x029...0x039)
               [000039] -AC---------              *  ASG       ref   
               [000038] D------N----              +--*  LCL_VAR   ref    V23 tmp5         
               [000037] --C---------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
               [000036] H----------- arg0            \--*  CNS_INT(h) long   0x7ffdb6c458b8 token

LocalAddressVisitor visiting statement:
STMT00013 (IL   ???...  ???)
               [000043] -A-XG-------              *  ASG       ref   
               [000042] D------N----              +--*  LCL_VAR   ref    V24 tmp6         
               [000035] ---XG-------              \--*  FIELD     ref    Head
               [000034] ---XG-------                 \--*  FIELD     ref    _myList
               [000033] ------------                    \--*  LCL_VAR   ref    V00 this         

LocalAddressVisitor visiting statement:
STMT00012 (IL   ???...  ???)
               [000041] --C-G-------              *  CALL      void   System.Object..ctor
               [000040] ------------ this in rcx  \--*  LCL_VAR   ref    V23 tmp5         

LocalAddressVisitor visiting statement:
STMT00014 (IL 0x039...  ???)
               [000047] -A-XG-------              *  ASG       ref   
               [000046] ---XG--N----              +--*  FIELD     ref    Data
               [000044] ------------              |  \--*  LCL_VAR   ref    V24 tmp6         
               [000045] ------------              \--*  LCL_VAR   ref    V23 tmp5         

LocalAddressVisitor visiting statement:
STMT00015 (IL 0x03E...0x04F)
               [000053] -AC---------              *  ASG       ref   
               [000052] D------N----              +--*  LCL_VAR   ref    V25 tmp7         
               [000051] --C---------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
               [000050] H----------- arg0            \--*  CNS_INT(h) long   0x7ffdb7026348 token

LocalAddressVisitor visiting statement:
STMT00016 (IL   ???...  ???)
               [000055] --C-G-------              *  CALL      void   System.MulticastDelegate.CtorClosed
               [000054] ------------ this in rcx  +--*  LCL_VAR   ref    V25 tmp7         
               [000048] ------------ arg1         +--*  LCL_VAR   ref    V00 this         
               [000049] ------------ arg2         \--*  FTN_ADDR  long   FalseLeakRepro.Program.<Run>b__3_0


LocalAddressVisitor visiting statement:
STMT00017 (IL 0x04A...  ???)
               [000060] -AC---------              *  ASG       ref   
               [000059] D------N----              +--*  LCL_VAR   ref    V26 tmp8         
               [000058] --C---------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWFAST
               [000057] H----------- arg0            \--*  CNS_INT(h) long   0x7ffdb6dc4e80 token

LocalAddressVisitor visiting statement:
STMT00018 (IL   ???...  ???)
               [000062] --C-G-------              *  CALL      void   System.Threading.Thread..ctor
               [000061] ------------ this in rcx  +--*  LCL_VAR   ref    V26 tmp8         
               [000056] ------------ arg1         \--*  LCL_VAR   ref    V25 tmp7         

LocalAddressVisitor visiting statement:
STMT00019 (IL 0x04F...  ???)
               [000065] -A----------              *  ASG       ref   
               [000064] D------N----              +--*  LCL_VAR   ref    V02 loc0         
               [000063] ------------              \--*  LCL_VAR   ref    V26 tmp8         

LocalAddressVisitor visiting statement:
STMT00020 (IL 0x050...0x056)
               [000067] --C-G-------              *  CALL nullcheck void   System.Threading.Thread.Start
               [000066] ------------ this in rcx  \--*  LCL_VAR   ref    V02 loc0         

LocalAddressVisitor visiting statement:
STMT00021 (IL 0x056...  ???)
               [000068] ------------              *  NO_OP     void  

LocalAddressVisitor visiting statement:
STMT00022 (IL 0x057...0x05C)
               [000072] -AC-G-------              *  ASG       struct (copy)
               [000070] D------N----              +--*  LCL_VAR   struct<System.DateTime, 8> V27 tmp9         
               [000069] --C-G-------              \--*  CALL      struct System.DateTime.get_Now

LocalAddressVisitor visiting statement:
STMT00023 (IL 0x05C...  ???)
               [000076] -A----------              *  ASG       struct (copy)
               [000074] D------N----              +--*  LCL_VAR   struct<System.DateTime, 8>(AX) V03 loc1         
               [000073] ------------              \--*  LCL_VAR   struct<System.DateTime, 8> V27 tmp9         

LocalAddressVisitor visiting statement:
STMT00024 (IL 0x05D...0x073)
               [000081] -AC-G-------              *  ASG       ref   
               [000080] D------N----              +--*  LCL_VAR   ref    V28 tmp10        
               [000079] --C-G-------              \--*  CALL      ref    System.DateTime.ToString
               [000078] ------------ this in rcx     \--*  ADDR      byref 
               [000077] -------N----                    \--*  LCL_VAR   struct<System.DateTime, 8>(AX) V03 loc1         

Local V03 should not be enregistered because: it is address exposed
LocalAddressVisitor modified statement:
STMT00024 (IL 0x05D...0x073)
               [000081] -AC-G-------              *  ASG       ref   
               [000080] D------N----              +--*  LCL_VAR   ref    V28 tmp10        
               [000079] --C-G-------              \--*  CALL      ref    System.DateTime.ToString
               [000078] ------------ this in rcx     \--*  LCL_VAR_ADDR byref  V03 loc1         

LocalAddressVisitor visiting statement:
STMT00025 (IL 0x064...  ???)
               [000086] -AC-G-------              *  ASG       ref   
               [000085] D------N----              +--*  LCL_VAR   ref    V29 tmp11        
               [000084] --C-G-------              \--*  CALL      ref    System.String.Concat
               [000082] ------------ arg0            +--*  LCL_VAR   ref    V28 tmp10        
               [000083] ------------ arg1            \--*  CNS_STR   ref   <string constant>

LocalAddressVisitor visiting statement:
STMT00026 (IL 0x06E...  ???)
               [000088] --C-G-------              *  CALL      void   System.Console.WriteLine
               [000087] ------------ arg0         \--*  LCL_VAR   ref    V29 tmp11        

LocalAddressVisitor visiting statement:
STMT00027 (IL 0x073...  ???)
               [000089] ------------              *  NO_OP     void  

LocalAddressVisitor visiting statement:
STMT00028 (IL 0x074...0x075)
               [000092] -A----------              *  ASG       int   
               [000091] D------N----              +--*  LCL_VAR   int    V04 loc2         
               [000090] ------------              \--*  CNS_INT   int    0

LocalAddressVisitor visiting statement:
STMT00029 (IL 0x076...0x076)
               [000093] ------------              *  NOP       void  

LocalAddressVisitor visiting statement:
STMT00032 (IL 0x078...0x078)
               [000103] ------------              *  NO_OP     void  

LocalAddressVisitor visiting statement:
STMT00033 (IL 0x079...0x07F)
               [000107] -A-XG-------              *  ASG       ref   
               [000106] D------N----              +--*  LCL_VAR   ref    V05 loc3         
               [000105] ---XG-------              \--*  FIELD     ref    _myList
               [000104] ------------                 \--*  LCL_VAR   ref    V00 this         

LocalAddressVisitor visiting statement:
STMT00034 (IL 0x080...0x081)
               [000110] -A----------              *  ASG       int   
               [000109] D------N----              +--*  LCL_VAR   int    V06 loc4         
               [000108] ------------              \--*  CNS_INT   int    0

LocalAddressVisitor visiting statement:
STMT00035 (IL 0x083...0x08B)
               [000114] --C-G-------              *  CALL      void   System.Threading.Monitor.Enter
               [000111] ------------ arg0         +--*  LCL_VAR   ref    V05 loc3         
               [000113] ------------ arg1         \--*  ADDR      byref 
               [000112] -------N----                 \--*  LCL_VAR   int    V06 loc4         

Local V06 should not be enregistered because: it is address exposed
Adding a quirk for the storage size of V06 of type bool
LocalAddressVisitor modified statement:
STMT00035 (IL 0x083...0x08B)
               [000114] --C-G-------              *  CALL      void   System.Threading.Monitor.Enter
               [000111] ------------ arg0         +--*  LCL_VAR   ref    V05 loc3         
               [000113] ------------ arg1         \--*  LCL_VAR_ADDR byref  V06 loc4         

LocalAddressVisitor visiting statement:
STMT00036 (IL 0x08B...  ???)
               [000115] ------------              *  NO_OP     void  

LocalAddressVisitor visiting statement:
STMT00037 (IL 0x08C...0x08C)
               [000116] ------------              *  NO_OP     void  

LocalAddressVisitor visiting statement:
STMT00038 (IL 0x08D...0x09D)
               [000123] -AC---------              *  ASG       ref   
               [000122] D------N----              +--*  LCL_VAR   ref    V30 tmp12        
               [000121] --C---------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
               [000120] H----------- arg0            \--*  CNS_INT(h) long   0x7ffdb70260c8 method

LocalAddressVisitor visiting statement:
STMT00040 (IL   ???...  ???)
               [000127] -A-XG-------              *  ASG       ref   
               [000126] D------N----              +--*  LCL_VAR   ref    V31 tmp13        
               [000119] ---XG-------              \--*  FIELD     ref    Head
               [000118] ---XG-------                 \--*  FIELD     ref    _myList
               [000117] ------------                    \--*  LCL_VAR   ref    V00 this         

LocalAddressVisitor visiting statement:
STMT00039 (IL   ???...  ???)
               [000125] --C-G-------              *  CALL      void   FalseLeakRepro.Node..ctor
               [000124] ------------ this in rcx  \--*  LCL_VAR   ref    V30 tmp12        

LocalAddressVisitor visiting statement:
STMT00041 (IL 0x09D...  ???)
               [000131] -A-XG-------              *  ASG       ref   
               [000130] ---XG--N----              +--*  FIELD     ref    Next
               [000128] ------------              |  \--*  LCL_VAR   ref    V31 tmp13        
               [000129] ------------              \--*  LCL_VAR   ref    V30 tmp12        

LocalAddressVisitor visiting statement:
STMT00042 (IL 0x0A2...0x0B8)
               [000139] -A-XG-------              *  ASG       ref   
               [000138] ---XG--N----              +--*  FIELD     ref    Head
               [000133] ---XG-------              |  \--*  FIELD     ref    _myList
               [000132] ------------              |     \--*  LCL_VAR   ref    V00 this         
               [000137] ---XG-------              \--*  FIELD     ref    Next
               [000136] ---XG-------                 \--*  FIELD     ref    Head
               [000135] ---XG-------                    \--*  FIELD     ref    _myList
               [000134] ------------                       \--*  LCL_VAR   ref    V00 this         

LocalAddressVisitor visiting statement:
STMT00043 (IL 0x0BD...0x0CD)
               [000146] -AC---------              *  ASG       ref   
               [000145] D------N----              +--*  LCL_VAR   ref    V32 tmp14        
               [000144] --C---------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
               [000143] H----------- arg0            \--*  CNS_INT(h) long   0x7ffdb6c458b8 token

LocalAddressVisitor visiting statement:
STMT00045 (IL   ???...  ???)
               [000150] -A-XG-------              *  ASG       ref   
               [000149] D------N----              +--*  LCL_VAR   ref    V33 tmp15        
               [000142] ---XG-------              \--*  FIELD     ref    Head
               [000141] ---XG-------                 \--*  FIELD     ref    _myList
               [000140] ------------                    \--*  LCL_VAR   ref    V00 this         

LocalAddressVisitor visiting statement:
STMT00044 (IL   ???...  ???)
               [000148] --C-G-------              *  CALL      void   System.Object..ctor
               [000147] ------------ this in rcx  \--*  LCL_VAR   ref    V32 tmp14        

LocalAddressVisitor visiting statement:
STMT00046 (IL 0x0CD...  ???)
               [000154] -A-XG-------              *  ASG       ref   
               [000153] ---XG--N----              +--*  FIELD     ref    Data
               [000151] ------------              |  \--*  LCL_VAR   ref    V33 tmp15        
               [000152] ------------              \--*  LCL_VAR   ref    V32 tmp14        

LocalAddressVisitor visiting statement:
STMT00047 (IL 0x0D2...0x0D2)
               [000155] ------------              *  NO_OP     void  

LocalAddressVisitor visiting statement:
STMT00048 (IL 0x0D3...0x0D3)
               [000156] ------------              *  NOP       void  

LocalAddressVisitor visiting statement:
STMT00051 (IL 0x0D5...0x0D7)
               [000166] ------------              *  JTRUE     void  
               [000165] ------------              \--*  EQ        int   
               [000163] ------------                 +--*  LCL_VAR   int   (AX) V06 loc4         
               [000164] ------------                 \--*  CNS_INT   int    0

LocalAddressVisitor visiting statement:
STMT00053 (IL 0x0D9...0x0DF)
               [000169] --C-G-------              *  CALL      void   System.Threading.Monitor.Exit
               [000168] ------------ arg0         \--*  LCL_VAR   ref    V05 loc3         

LocalAddressVisitor visiting statement:
STMT00054 (IL 0x0DF...  ???)
               [000170] ------------              *  NO_OP     void  

LocalAddressVisitor visiting statement:
STMT00052 (IL 0x0E0...0x0E0)
               [000167] ------------              *  RETFILT   void  

LocalAddressVisitor visiting statement:
STMT00049 (IL 0x0E1...0x0E1)
               [000157] ------------              *  NO_OP     void  

LocalAddressVisitor visiting statement:
STMT00050 (IL 0x0E2...0x0E5)
               [000162] -A----------              *  ASG       int   
               [000161] D------N----              +--*  LCL_VAR   int    V04 loc2         
               [000160] ------------              \--*  ADD       int   
               [000158] ------------                 +--*  LCL_VAR   int    V04 loc2         
               [000159] ------------                 \--*  CNS_INT   int    1

LocalAddressVisitor visiting statement:
STMT00030 (IL 0x0E6...0x0EB)
               [000098] -A----------              *  ASG       int   
               [000097] D------N----              +--*  LCL_VAR   int    V07 loc5         
               [000096] ------------              \--*  LT        int   
               [000094] ------------                 +--*  LCL_VAR   int    V04 loc2         
               [000095] ------------                 \--*  CNS_INT   int    10

LocalAddressVisitor visiting statement:
STMT00031 (IL 0x0ED...0x0EF)
               [000102] ------------              *  JTRUE     void  
               [000101] ------------              \--*  NE        int   
               [000099] ------------                 +--*  LCL_VAR   int    V07 loc5         
               [000100] ------------                 \--*  CNS_INT   int    0

LocalAddressVisitor visiting statement:
STMT00055 (IL 0x0F1...0x0F6)
               [000174] -AC-G-------              *  ASG       struct (copy)
               [000172] D------N----              +--*  LCL_VAR   struct<System.DateTime, 8> V34 tmp16        
               [000171] --C-G-------              \--*  CALL      struct System.DateTime.get_Now

LocalAddressVisitor visiting statement:
STMT00056 (IL 0x0F6...  ???)
               [000178] -A----------              *  ASG       struct (copy)
               [000176] D------N----              +--*  LCL_VAR   struct<System.DateTime, 8>(AX) V03 loc1         
               [000175] ------------              \--*  LCL_VAR   struct<System.DateTime, 8> V34 tmp16        

LocalAddressVisitor visiting statement:
STMT00057 (IL 0x0F7...0x10D)
               [000183] -AC-G-------              *  ASG       ref   
               [000182] D------N----              +--*  LCL_VAR   ref    V35 tmp17        
               [000181] --C-G-------              \--*  CALL      ref    System.DateTime.ToString
               [000180] ------------ this in rcx     \--*  ADDR      byref 
               [000179] -------N----                    \--*  LCL_VAR   struct<System.DateTime, 8>(AX) V03 loc1         

Local V03 should not be enregistered because: it is address exposed
LocalAddressVisitor modified statement:
STMT00057 (IL 0x0F7...0x10D)
               [000183] -AC-G-------              *  ASG       ref   
               [000182] D------N----              +--*  LCL_VAR   ref    V35 tmp17        
               [000181] --C-G-------              \--*  CALL      ref    System.DateTime.ToString
               [000180] ------------ this in rcx     \--*  LCL_VAR_ADDR byref  V03 loc1         

LocalAddressVisitor visiting statement:
STMT00058 (IL 0x0FE...  ???)
               [000188] -AC-G-------              *  ASG       ref   
               [000187] D------N----              +--*  LCL_VAR   ref    V36 tmp18        
               [000186] --C-G-------              \--*  CALL      ref    System.String.Concat
               [000184] ------------ arg0            +--*  LCL_VAR   ref    V35 tmp17        
               [000185] ------------ arg1            \--*  CNS_STR   ref   <string constant>

LocalAddressVisitor visiting statement:
STMT00059 (IL 0x108...  ???)
               [000190] --C-G-------              *  CALL      void   System.Console.WriteLine
               [000189] ------------ arg0         \--*  LCL_VAR   ref    V36 tmp18        

LocalAddressVisitor visiting statement:
STMT00060 (IL 0x10D...  ???)
               [000191] ------------              *  NO_OP     void  

LocalAddressVisitor visiting statement:
STMT00061 (IL 0x10E...0x10E)
               [000192] ------------              *  NOP       void  

LocalAddressVisitor visiting statement:
STMT00064 (IL 0x110...0x110)
               [000197] ------------              *  NO_OP     void  

LocalAddressVisitor visiting statement:
STMT00065 (IL 0x111...0x117)
               [000201] -A-XG-------              *  ASG       ref   
               [000200] D------N----              +--*  LCL_VAR   ref    V08 loc6         
               [000199] ---XG-------              \--*  FIELD     ref    _myList
               [000198] ------------                 \--*  LCL_VAR   ref    V00 this         

LocalAddressVisitor visiting statement:
STMT00066 (IL 0x119...0x11A)
               [000204] -A----------              *  ASG       int   
               [000203] D------N----              +--*  LCL_VAR   int    V09 loc7         
               [000202] ------------              \--*  CNS_INT   int    0

LocalAddressVisitor visiting statement:
STMT00067 (IL 0x11C...0x125)
               [000208] --C-G-------              *  CALL      void   System.Threading.Monitor.Enter
               [000205] ------------ arg0         +--*  LCL_VAR   ref    V08 loc6         
               [000207] ------------ arg1         \--*  ADDR      byref 
               [000206] -------N----                 \--*  LCL_VAR   int    V09 loc7         

Local V09 should not be enregistered because: it is address exposed
Adding a quirk for the storage size of V09 of type bool
LocalAddressVisitor modified statement:
STMT00067 (IL 0x11C...0x125)
               [000208] --C-G-------              *  CALL      void   System.Threading.Monitor.Enter
               [000205] ------------ arg0         +--*  LCL_VAR   ref    V08 loc6         
               [000207] ------------ arg1         \--*  LCL_VAR_ADDR byref  V09 loc7         

LocalAddressVisitor visiting statement:
STMT00068 (IL 0x125...  ???)
               [000209] ------------              *  NO_OP     void  

LocalAddressVisitor visiting statement:
STMT00069 (IL 0x126...0x126)
               [000210] ------------              *  NO_OP     void  

LocalAddressVisitor visiting statement:
STMT00070 (IL 0x127...0x13F)
               [000219] -A-XG-------              *  ASG       int   
               [000218] D------N----              +--*  LCL_VAR   int    V10 loc8         
               [000217] ---XG-------              \--*  EQ        int   
               [000213] ---XG-------                 +--*  FIELD     ref    Head
               [000212] ---XG-------                 |  \--*  FIELD     ref    _myList
               [000211] ------------                 |     \--*  LCL_VAR   ref    V00 this         
               [000216] ---XG-------                 \--*  FIELD     ref    Tail
               [000215] ---XG-------                    \--*  FIELD     ref    _myList
               [000214] ------------                       \--*  LCL_VAR   ref    V00 this         

LocalAddressVisitor visiting statement:
STMT00071 (IL 0x141...0x143)
               [000223] ------------              *  JTRUE     void  
               [000222] ------------              \--*  EQ        int   
               [000220] ------------                 +--*  LCL_VAR   int    V10 loc8         
               [000221] ------------                 \--*  CNS_INT   int    0

LocalAddressVisitor visiting statement:
STMT00077 (IL 0x145...0x145)
               [000230] ------------              *  NO_OP     void  

LocalAddressVisitor visiting statement:
STMT00078 (IL 0x146...0x146)
               [000231] ------------              *  NOP       void  

LocalAddressVisitor visiting statement:
STMT00072 (IL 0x148...0x148)
               [000224] ------------              *  NO_OP     void  

LocalAddressVisitor visiting statement:
STMT00073 (IL 0x149...0x149)
               [000225] ------------              *  NOP       void  

LocalAddressVisitor visiting statement:
STMT00131 (IL 0x14B...0x14D)
               [000366] ------------              *  JTRUE     void  
               [000365] ------------              \--*  EQ        int   
               [000363] ------------                 +--*  LCL_VAR   int   (AX) V09 loc7         
               [000364] ------------                 \--*  CNS_INT   int    0

LocalAddressVisitor visiting statement:
STMT00133 (IL 0x14F...0x156)
               [000369] --C-G-------              *  CALL      void   System.Threading.Monitor.Exit
               [000368] ------------ arg0         \--*  LCL_VAR   ref    V08 loc6         

LocalAddressVisitor visiting statement:
STMT00134 (IL 0x156...  ???)
               [000370] ------------              *  NO_OP     void  

LocalAddressVisitor visiting statement:
STMT00132 (IL 0x157...0x157)
               [000367] ------------              *  RETFILT   void  

LocalAddressVisitor visiting statement:
STMT00074 (IL 0x158...0x15F)
               [000227] --C-G-------              *  CALL      void   System.Threading.Thread.Sleep
               [000226] ------------ arg0         \--*  CNS_INT   int    100

LocalAddressVisitor visiting statement:
STMT00075 (IL 0x15F...  ???)
               [000228] ------------              *  NO_OP     void  

LocalAddressVisitor visiting statement:
STMT00076 (IL 0x160...0x160)
               [000229] ------------              *  NO_OP     void  

LocalAddressVisitor visiting statement:
STMT00062 (IL 0x161...0x162)
               [000195] -A----------              *  ASG       int   
               [000194] D------N----              +--*  LCL_VAR   int    V11 loc9         
               [000193] ------------              \--*  CNS_INT   int    1

LocalAddressVisitor visiting statement:
STMT00063 (IL 0x164...0x164)
               [000196] ------------              *  NOP       void  

LocalAddressVisitor visiting statement:
STMT00079 (IL 0x166...0x16B)
               [000235] -AC-G-------              *  ASG       struct (copy)
               [000233] D------N----              +--*  LCL_VAR   struct<System.DateTime, 8> V37 tmp19        
               [000232] --C-G-------              \--*  CALL      struct System.DateTime.get_Now

LocalAddressVisitor visiting statement:
STMT00080 (IL 0x16B...  ???)
               [000239] -A----------              *  ASG       struct (copy)
               [000237] D------N----              +--*  LCL_VAR   struct<System.DateTime, 8>(AX) V03 loc1         
               [000236] ------------              \--*  LCL_VAR   struct<System.DateTime, 8> V37 tmp19        

LocalAddressVisitor visiting statement:
STMT00081 (IL 0x16C...0x182)
               [000244] -AC-G-------              *  ASG       ref   
               [000243] D------N----              +--*  LCL_VAR   ref    V38 tmp20        
               [000242] --C-G-------              \--*  CALL      ref    System.DateTime.ToString
               [000241] ------------ this in rcx     \--*  ADDR      byref 
               [000240] -------N----                    \--*  LCL_VAR   struct<System.DateTime, 8>(AX) V03 loc1         

Local V03 should not be enregistered because: it is address exposed
LocalAddressVisitor modified statement:
STMT00081 (IL 0x16C...0x182)
               [000244] -AC-G-------              *  ASG       ref   
               [000243] D------N----              +--*  LCL_VAR   ref    V38 tmp20        
               [000242] --C-G-------              \--*  CALL      ref    System.DateTime.ToString
               [000241] ------------ this in rcx     \--*  LCL_VAR_ADDR byref  V03 loc1         

LocalAddressVisitor visiting statement:
STMT00082 (IL 0x173...  ???)
               [000249] -AC-G-------              *  ASG       ref   
               [000248] D------N----              +--*  LCL_VAR   ref    V39 tmp21        
               [000247] --C-G-------              \--*  CALL      ref    System.String.Concat
               [000245] ------------ arg0            +--*  LCL_VAR   ref    V38 tmp20        
               [000246] ------------ arg1            \--*  CNS_STR   ref   <string constant>

LocalAddressVisitor visiting statement:
STMT00083 (IL 0x17D...  ???)
               [000251] --C-G-------              *  CALL      void   System.Console.WriteLine
               [000250] ------------ arg0         \--*  LCL_VAR   ref    V39 tmp21        

LocalAddressVisitor visiting statement:
STMT00084 (IL 0x182...  ???)
               [000252] ------------              *  NO_OP     void  

LocalAddressVisitor visiting statement:
STMT00085 (IL 0x183...0x18D)
               [000254] --C-G-------              *  CALL      void   System.Console.WriteLine
               [000253] ------------ arg0         \--*  CNS_STR   ref   <string constant>

LocalAddressVisitor visiting statement:
STMT00086 (IL 0x18D...  ???)
               [000255] ------------              *  NO_OP     void  

LocalAddressVisitor visiting statement:
STMT00087 (IL 0x18E...0x198)
               [000257] --C-G-------              *  CALL      void   System.Console.WriteLine
               [000256] ------------ arg0         \--*  CNS_STR   ref   <string constant>

LocalAddressVisitor visiting statement:
STMT00088 (IL 0x198...  ???)
               [000258] ------------              *  NO_OP     void  

LocalAddressVisitor visiting statement:
STMT00089 (IL 0x199...0x1A3)
               [000260] --C-G-------              *  CALL      void   System.Console.WriteLine
               [000259] ------------ arg0         \--*  CNS_STR   ref   <string constant>

LocalAddressVisitor visiting statement:
STMT00090 (IL 0x1A3...  ???)
               [000261] ------------              *  NO_OP     void  

LocalAddressVisitor visiting statement:
STMT00091 (IL 0x1A4...0x1AE)
               [000263] --C-G-------              *  CALL      void   System.Console.WriteLine
               [000262] ------------ arg0         \--*  CNS_STR   ref   <string constant>

LocalAddressVisitor visiting statement:
STMT00092 (IL 0x1AE...  ???)
               [000264] ------------              *  NO_OP     void  

LocalAddressVisitor visiting statement:
STMT00093 (IL 0x1AF...0x1AF)
               [000265] ------------              *  NOP       void  

LocalAddressVisitor visiting statement:
STMT00096 (IL 0x1B1...0x1B1)
               [000270] ------------              *  NO_OP     void  

LocalAddressVisitor visiting statement:
STMT00097 (IL 0x1B2...0x1B7)
               [000271] S-C-G-------              *  CALL      void   System.Console.ReadKey
               [000273] ------------ arg0         \--*  ADDR      byref 
               [000272] -------N----                 \--*  LCL_VAR   struct<System.ConsoleKeyInfo, 12> V40 tmp22        

Local V40 should not be enregistered because: it is address exposed
LocalAddressVisitor modified statement:
STMT00097 (IL 0x1B2...0x1B7)
               [000271] S-C-G-------              *  CALL      void   System.Console.ReadKey
               [000273] ------------ arg0         \--*  LCL_VAR_ADDR byref  V40 tmp22        

LocalAddressVisitor visiting statement:
STMT00098 (IL 0x1B7...  ???)
               [000277] -A----------              *  ASG       struct (copy)
               [000275] D------N----              +--*  LCL_VAR   struct<System.ConsoleKeyInfo, 12> V12 loc10        
               [000274] ------------              \--*  LCL_VAR   struct<System.ConsoleKeyInfo, 12>(AX) V40 tmp22        

LocalAddressVisitor visiting statement:
STMT00099 (IL 0x1B9...0x1C4)
               [000282] -AC-G-------              *  ASG       int   
               [000281] D------N----              +--*  LCL_VAR   int    V41 tmp23        
               [000280] --C-G-------              \--*  CALL      int    System.ConsoleKeyInfo.get_Key
               [000279] ------------ this in rcx     \--*  ADDR      byref 
               [000278] -------N----                    \--*  LCL_VAR   struct<System.ConsoleKeyInfo, 12> V12 loc10        

Local V12 should not be enregistered because: it is address exposed
LocalAddressVisitor modified statement:
STMT00099 (IL 0x1B9...0x1C4)
               [000282] -AC-G-------              *  ASG       int   
               [000281] D------N----              +--*  LCL_VAR   int    V41 tmp23        
               [000280] --C-G-------              \--*  CALL      int    System.ConsoleKeyInfo.get_Key
               [000279] ------------ this in rcx     \--*  LCL_VAR_ADDR byref  V12 loc10        

LocalAddressVisitor visiting statement:
STMT00100 (IL 0x1C0...  ???)
               [000287] -A----------              *  ASG       int   
               [000286] D------N----              +--*  LCL_VAR   int    V13 loc11        
               [000285] ------------              \--*  EQ        int   
               [000283] ------------                 +--*  LCL_VAR   int    V41 tmp23        
               [000284] ------------                 \--*  CNS_INT   int    71

LocalAddressVisitor visiting statement:
STMT00101 (IL 0x1C6...0x1C8)
               [000291] ------------              *  JTRUE     void  
               [000290] ------------              \--*  EQ        int   
               [000288] ------------                 +--*  LCL_VAR   int    V13 loc11        
               [000289] ------------                 \--*  CNS_INT   int    0

LocalAddressVisitor visiting statement:
STMT00125 (IL 0x1CA...0x1CA)
               [000354] ------------              *  NO_OP     void  

LocalAddressVisitor visiting statement:
STMT00126 (IL 0x1CB...0x1D5)
               [000357] -AC-G-------              *  ASG       int   
               [000356] D------N----              +--*  LCL_VAR   int    V45 tmp27        
               [000355] --C-G-------              \--*  CALL      int    System.GC.get_MaxGeneration

LocalAddressVisitor visiting statement:
STMT00127 (IL 0x1D0...  ???)
               [000359] --C-G-------              *  CALL      void   System.GC.Collect
               [000358] ------------ arg0         \--*  LCL_VAR   int    V45 tmp27        

LocalAddressVisitor visiting statement:
STMT00128 (IL 0x1D5...  ???)
               [000360] ------------              *  NO_OP     void  

LocalAddressVisitor visiting statement:
STMT00129 (IL 0x1D6...0x1D6)
               [000361] ------------              *  NO_OP     void  

LocalAddressVisitor visiting statement:
STMT00130 (IL 0x1D7...0x1D7)
               [000362] ------------              *  NOP       void  

LocalAddressVisitor visiting statement:
STMT00102 (IL 0x1D9...0x1E4)
               [000296] -AC-G-------              *  ASG       int   
               [000295] D------N----              +--*  LCL_VAR   int    V42 tmp24        
               [000294] --C-G-------              \--*  CALL      int    System.ConsoleKeyInfo.get_Key
               [000293] ------------ this in rcx     \--*  ADDR      byref 
               [000292] -------N----                    \--*  LCL_VAR   struct<System.ConsoleKeyInfo, 12>(AX) V12 loc10        

Local V12 should not be enregistered because: it is address exposed
LocalAddressVisitor modified statement:
STMT00102 (IL 0x1D9...0x1E4)
               [000296] -AC-G-------              *  ASG       int   
               [000295] D------N----              +--*  LCL_VAR   int    V42 tmp24        
               [000294] --C-G-------              \--*  CALL      int    System.ConsoleKeyInfo.get_Key
               [000293] ------------ this in rcx     \--*  LCL_VAR_ADDR byref  V12 loc10        

LocalAddressVisitor visiting statement:
STMT00103 (IL 0x1E0...  ???)
               [000301] -A----------              *  ASG       int   
               [000300] D------N----              +--*  LCL_VAR   int    V14 loc12        
               [000299] ------------              \--*  EQ        int   
               [000297] ------------                 +--*  LCL_VAR   int    V42 tmp24        
               [000298] ------------                 \--*  CNS_INT   int    72

LocalAddressVisitor visiting statement:
STMT00104 (IL 0x1E6...0x1E8)
               [000305] ------------              *  JTRUE     void  
               [000304] ------------              \--*  EQ        int   
               [000302] ------------                 +--*  LCL_VAR   int    V14 loc12        
               [000303] ------------                 \--*  CNS_INT   int    0

LocalAddressVisitor visiting statement:
STMT00120 (IL 0x1EA...0x1EA)
               [000349] ------------              *  NO_OP     void  

LocalAddressVisitor visiting statement:
STMT00121 (IL 0x1EB...0x1F0)
               [000350] --C-G-------              *  CALL      void   System.Diagnostics.Debugger.Break

LocalAddressVisitor visiting statement:
STMT00122 (IL 0x1F0...  ???)
               [000351] ------------              *  NO_OP     void  

LocalAddressVisitor visiting statement:
STMT00123 (IL 0x1F1...0x1F1)
               [000352] ------------              *  NO_OP     void  

LocalAddressVisitor visiting statement:
STMT00124 (IL 0x1F2...0x1F2)
               [000353] ------------              *  NOP       void  

LocalAddressVisitor visiting statement:
STMT00105 (IL 0x1F4...0x1FF)
               [000310] -AC-G-------              *  ASG       int   
               [000309] D------N----              +--*  LCL_VAR   int    V43 tmp25        
               [000308] --C-G-------              \--*  CALL      int    System.ConsoleKeyInfo.get_Key
               [000307] ------------ this in rcx     \--*  ADDR      byref 
               [000306] -------N----                    \--*  LCL_VAR   struct<System.ConsoleKeyInfo, 12>(AX) V12 loc10        

Local V12 should not be enregistered because: it is address exposed
LocalAddressVisitor modified statement:
STMT00105 (IL 0x1F4...0x1FF)
               [000310] -AC-G-------              *  ASG       int   
               [000309] D------N----              +--*  LCL_VAR   int    V43 tmp25        
               [000308] --C-G-------              \--*  CALL      int    System.ConsoleKeyInfo.get_Key
               [000307] ------------ this in rcx     \--*  LCL_VAR_ADDR byref  V12 loc10        

LocalAddressVisitor visiting statement:
STMT00106 (IL 0x1FB...  ???)
               [000315] -A----------              *  ASG       int   
               [000314] D------N----              +--*  LCL_VAR   int    V15 loc13        
               [000313] ------------              \--*  EQ        int   
               [000311] ------------                 +--*  LCL_VAR   int    V43 tmp25        
               [000312] ------------                 \--*  CNS_INT   int    82

LocalAddressVisitor visiting statement:
STMT00107 (IL 0x201...0x203)
               [000319] ------------              *  JTRUE     void  
               [000318] ------------              \--*  EQ        int   
               [000316] ------------                 +--*  LCL_VAR   int    V15 loc13        
               [000317] ------------                 \--*  CNS_INT   int    0

LocalAddressVisitor visiting statement:
STMT00116 (IL 0x205...0x205)
               [000342] ------------              *  NO_OP     void  

LocalAddressVisitor visiting statement:
STMT00117 (IL 0x206...0x208)
               [000346] -A-XG-------              *  ASG       bool  
               [000345] ---XG--N----              +--*  FIELD     bool   _running
               [000343] ------------              |  \--*  LCL_VAR   ref    V00 this         
               [000344] ------------              \--*  CNS_INT   int    0

LocalAddressVisitor visiting statement:
STMT00118 (IL 0x20D...0x20D)
               [000347] ------------              *  NO_OP     void  

LocalAddressVisitor visiting statement:
STMT00119 (IL 0x20E...0x20E)
               [000348] ------------              *  NOP       void  

LocalAddressVisitor visiting statement:
STMT00108 (IL 0x210...0x21B)
               [000324] -AC-G-------              *  ASG       int   
               [000323] D------N----              +--*  LCL_VAR   int    V44 tmp26        
               [000322] --C-G-------              \--*  CALL      int    System.ConsoleKeyInfo.get_Key
               [000321] ------------ this in rcx     \--*  ADDR      byref 
               [000320] -------N----                    \--*  LCL_VAR   struct<System.ConsoleKeyInfo, 12>(AX) V12 loc10        

Local V12 should not be enregistered because: it is address exposed
LocalAddressVisitor modified statement:
STMT00108 (IL 0x210...0x21B)
               [000324] -AC-G-------              *  ASG       int   
               [000323] D------N----              +--*  LCL_VAR   int    V44 tmp26        
               [000322] --C-G-------              \--*  CALL      int    System.ConsoleKeyInfo.get_Key
               [000321] ------------ this in rcx     \--*  LCL_VAR_ADDR byref  V12 loc10        

LocalAddressVisitor visiting statement:
STMT00109 (IL 0x217...  ???)
               [000329] -A----------              *  ASG       int   
               [000328] D------N----              +--*  LCL_VAR   int    V16 loc14        
               [000327] ------------              \--*  EQ        int   
               [000325] ------------                 +--*  LCL_VAR   int    V44 tmp26        
               [000326] ------------                 \--*  CNS_INT   int    81

LocalAddressVisitor visiting statement:
STMT00110 (IL 0x21D...0x21F)
               [000333] ------------              *  JTRUE     void  
               [000332] ------------              \--*  EQ        int   
               [000330] ------------                 +--*  LCL_VAR   int    V16 loc14        
               [000331] ------------                 \--*  CNS_INT   int    0

LocalAddressVisitor visiting statement:
STMT00112 (IL 0x221...0x221)
               [000335] ------------              *  NO_OP     void  

LocalAddressVisitor visiting statement:
STMT00113 (IL 0x222...0x222)
               [000336] ------------              *  NOP       void  

LocalAddressVisitor visiting statement:
STMT00111 (IL 0x224...0x224)
               [000334] ------------              *  NO_OP     void  

LocalAddressVisitor visiting statement:
STMT00094 (IL 0x225...0x226)
               [000268] -A----------              *  ASG       int   
               [000267] D------N----              +--*  LCL_VAR   int    V17 loc15        
               [000266] ------------              \--*  CNS_INT   int    1

LocalAddressVisitor visiting statement:
STMT00095 (IL 0x228...0x228)
               [000269] ------------              *  NOP       void  

LocalAddressVisitor visiting statement:
STMT00114 (IL 0x22A...0x22C)
               [000340] -A-XG-------              *  ASG       bool  
               [000339] ---XG--N----              +--*  FIELD     bool   _running
               [000337] ------------              |  \--*  LCL_VAR   ref    V00 this         
               [000338] ------------              \--*  CNS_INT   int    0

LocalAddressVisitor visiting statement:
STMT00115 (IL 0x231...0x231)
               [000341] ------------              *  RETURN    void  


*************** Finishing PHASE Morph - Structs/AddrExp

*************** Starting PHASE Morph - ByRefs

*************** In fgRetypeImplicitByRefArgs()

*************** Finishing PHASE Morph - ByRefs

*************** Starting PHASE Morph - Global

*************** In fgMorphBlocks()
compEnregLocals() is false, setting doNotEnreg flag for all locals.
Local V00 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V01 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V02 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V03 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V04 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V05 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V06 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V07 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V08 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V09 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V10 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V11 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V12 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V13 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V14 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V15 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V16 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V17 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V18 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V19 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V20 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V21 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V22 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V23 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V24 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V25 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V26 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V27 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V28 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V29 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V30 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V31 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V32 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V33 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V34 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V35 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V36 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V37 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V38 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V39 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V40 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V41 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V42 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V43 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V44 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V45 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Morphing BB01 of 'FalseLeakRepro.Program:Run(System.String[]):this'

fgMorphTree BB01, STMT00000 (before)
               [000000] ------------              *  NOP       void  

fgMorphTree BB01, STMT00135 (before)
               [000378] --C-G-------              *  QMARK     void  
               [000374] Q-----------    if        +--*  EQ        int   
               [000372] ------------              |  +--*  IND       int   
               [000371] H-----------              |  |  \--*  CNS_INT(h) long   0x7ffdb6f1d838 global ptr
               [000373] ------------              |  \--*  CNS_INT   int    0
               [000377] --C-G-------    if        \--*  COLON     void  
               [000375] --C-G------- else            +--*  CALL help void   HELPER.CORINFO_HELP_DBG_IS_JUST_MY_CODE
               [000376] ------------ then            \--*  NOP       void  
Initializing arg info for 375.CALL:
ArgTable for 375.CALL after fgInitArgInfo:

Morphing args for 375.CALL:
argSlots=0, preallocatedArgCount=4, nextSlotNum=4, nextSlotByteOffset=32, outgoingArgSpaceSize=32
ArgTable for 375.CALL after fgMorphArgs:


Morphing BB02 of 'FalseLeakRepro.Program:Run(System.String[]):this'

fgMorphTree BB02, STMT00001 (before)
               [000001] ------------              *  NO_OP     void  

fgMorphTree BB02, STMT00002 (before)
               [000005] -AC-G-------              *  ASG       struct (copy)
               [000003] D------N----              +--*  LCL_VAR   struct<System.DateTime, 8> V19 tmp1         
               [000002] --C-G-------              \--*  CALL      struct System.DateTime.get_Now
Notify VM instruction set (SSE2) must be supported.
Initializing arg info for 2.CALL:
ArgTable for 2.CALL after fgInitArgInfo:

Morphing args for 2.CALL:
argSlots=0, preallocatedArgCount=4, nextSlotNum=4, nextSlotByteOffset=32, outgoingArgSpaceSize=32
ArgTable for 2.CALL after fgMorphArgs:

MorphCopyBlock:
MorphBlock for dst tree, before:
               [000003] D----+-N----              *  LCL_VAR   struct<System.DateTime, 8> V19 tmp1         
MorphBlock after:
               [000003] D----+-N----              *  LCL_VAR   struct<System.DateTime, 8> V19 tmp1         
PrepareDst for [000003] have found a local var V19.
MorphBlock for src tree, before:
               [000002] --CXG+------              *  CALL      struct System.DateTime.get_Now
MorphBlock after:
               [000002] --CXG+------              *  CALL      struct System.DateTime.get_Now
block assignment to morph:
               [000005] -ACXG-------              *  ASG       struct (copy)
               [000003] D----+-N----              +--*  LCL_VAR   struct<System.DateTime, 8> V19 tmp1         
               [000002] --CXG+------              \--*  CALL      struct System.DateTime.get_Now
 src is a call this requires a CopyBlock.
MorphCopyBlock (after):
               [000005] -ACXG-------              *  ASG       struct (copy)
               [000003] D----+-N----              +--*  LCL_VAR   struct<System.DateTime, 8> V19 tmp1         
               [000002] --CXG+------              \--*  CALL      struct System.DateTime.get_Now

fgMorphTree BB02, STMT00003 (before)
               [000009] -A----------              *  ASG       struct (copy)
               [000007] D------N----              +--*  LCL_VAR   struct<System.DateTime, 8>(AX) V03 loc1         
               [000006] ------------              \--*  LCL_VAR   struct<System.DateTime, 8> V19 tmp1         
MorphCopyBlock:
MorphBlock for dst tree, before:
               [000007] D---G+-N----              *  LCL_VAR   struct<System.DateTime, 8>(AX) V03 loc1         
MorphBlock after:
               [000007] D---G+-N----              *  LCL_VAR   struct<System.DateTime, 8>(AX) V03 loc1         
PrepareDst for [000007] have found a local var V03.
MorphBlock for src tree, before:
               [000006] -----+------              *  LCL_VAR   struct<System.DateTime, 8> V19 tmp1         
MorphBlock after:
               [000006] -----+------              *  LCL_VAR   struct<System.DateTime, 8> V19 tmp1         
block assignment to morph:
               [000009] -A--G-------              *  ASG       struct (copy)
               [000007] D---G+-N----              +--*  LCL_VAR   struct<System.DateTime, 8>(AX) V03 loc1         
               [000006] -----+------              \--*  LCL_VAR   struct<System.DateTime, 8> V19 tmp1         
 with no promoted structs this requires a CopyBlock.
MorphCopyBlock (after):
               [000009] -A--G-------              *  ASG       struct (copy)
               [000007] D---G+-N----              +--*  LCL_VAR   struct<System.DateTime, 8>(AX) V03 loc1         
               [000006] -----+------              \--*  LCL_VAR   struct<System.DateTime, 8> V19 tmp1         

fgMorphTree BB02, STMT00004 (before)
               [000014] -AC-G-------              *  ASG       ref   
               [000013] D------N----              +--*  LCL_VAR   ref    V20 tmp2         
               [000012] --C-G-------              \--*  CALL      ref    System.DateTime.ToString
               [000011] ------------ this in rcx     \--*  LCL_VAR_ADDR byref  V03 loc1         
Initializing arg info for 12.CALL:
ArgTable for 12.CALL after fgInitArgInfo:
fgArgTabEntry[arg 0 11.LCL_VAR_ADDR byref (By ref), 1 reg: rcx, byteAlignment=8]

Morphing args for 12.CALL:
argSlots=1, preallocatedArgCount=4, nextSlotNum=4, nextSlotByteOffset=32, outgoingArgSpaceSize=32

Sorting the arguments:
Deferred argument ('rcx'):
               [000011] -----+------              *  LCL_VAR_ADDR byref  V03 loc1         
Replaced with placeholder node:
               [000379] ----------L-              *  ARGPLACE  byref 

Shuffled argument table:    rcx 
ArgTable for 12.CALL after fgMorphArgs:
fgArgTabEntry[arg 0 11.LCL_VAR_ADDR byref (By ref), 1 reg: rcx, byteAlignment=8, lateArgInx=0, processed]


fgMorphTree BB02, STMT00004 (after)
               [000014] -ACXG+------              *  ASG       ref   
               [000013] D----+-N----              +--*  LCL_VAR   ref    V20 tmp2         
               [000012] --CXG+------              \--*  CALL      ref    System.DateTime.ToString
               [000011] -----+------ this in rcx     \--*  LCL_VAR_ADDR byref  V03 loc1         

fgMorphTree BB02, STMT00005 (before)
               [000019] -AC-G-------              *  ASG       ref   
               [000018] D------N----              +--*  LCL_VAR   ref    V21 tmp3         
               [000017] --C-G-------              \--*  CALL      ref    System.String.Concat
               [000015] ------------ arg0            +--*  LCL_VAR   ref    V20 tmp2         
               [000016] ------------ arg1            \--*  CNS_STR   ref   <string constant>
Initializing arg info for 17.CALL:
ArgTable for 17.CALL after fgInitArgInfo:
fgArgTabEntry[arg 0 15.LCL_VAR ref (By ref), 1 reg: rcx, byteAlignment=8]
fgArgTabEntry[arg 1 16.CNS_STR ref (By ref), 1 reg: rdx, byteAlignment=8]

Morphing args for 17.CALL:
argSlots=2, preallocatedArgCount=4, nextSlotNum=4, nextSlotByteOffset=32, outgoingArgSpaceSize=32

Sorting the arguments:
Deferred argument ('rdx'):
               [000381] #---G+------              *  IND       ref   
               [000380] H----+------              \--*  CNS_INT(h) long   0xBE2A31F0 "	 Created list"
Replaced with placeholder node:
               [000382] ----------L-              *  ARGPLACE  ref   
Deferred argument ('rcx'):
               [000015] -----+------              *  LCL_VAR   ref    V20 tmp2         
Replaced with placeholder node:
               [000383] ----------L-              *  ARGPLACE  ref   

Shuffled argument table:    rdx rcx 
ArgTable for 17.CALL after fgMorphArgs:
fgArgTabEntry[arg 1 381.IND ref (By ref), 1 reg: rdx, byteAlignment=8, lateArgInx=0, processed]
fgArgTabEntry[arg 0 15.LCL_VAR ref (By ref), 1 reg: rcx, byteAlignment=8, lateArgInx=1, processed]


fgMorphTree BB02, STMT00005 (after)
               [000019] -ACXG+------              *  ASG       ref   
               [000018] D----+-N----              +--*  LCL_VAR   ref    V21 tmp3         
               [000017] --CXG+------              \--*  CALL      ref    System.String.Concat
               [000381] #---G+------ arg1 in rdx     +--*  IND       ref   
               [000380] H----+------                 |  \--*  CNS_INT(h) long   0xBE2A31F0 "	 Created list"
               [000015] -----+------ arg0 in rcx     \--*  LCL_VAR   ref    V20 tmp2         

fgMorphTree BB02, STMT00006 (before)
               [000021] --C-G-------              *  CALL      void   System.Console.WriteLine
               [000020] ------------ arg0         \--*  LCL_VAR   ref    V21 tmp3         
Initializing arg info for 21.CALL:
ArgTable for 21.CALL after fgInitArgInfo:
fgArgTabEntry[arg 0 20.LCL_VAR ref (By ref), 1 reg: rcx, byteAlignment=8]

Morphing args for 21.CALL:
argSlots=1, preallocatedArgCount=4, nextSlotNum=4, nextSlotByteOffset=32, outgoingArgSpaceSize=32

Sorting the arguments:
Deferred argument ('rcx'):
               [000020] -----+------              *  LCL_VAR   ref    V21 tmp3         
Replaced with placeholder node:
               [000384] ----------L-              *  ARGPLACE  ref   

Shuffled argument table:    rcx 
ArgTable for 21.CALL after fgMorphArgs:
fgArgTabEntry[arg 0 20.LCL_VAR ref (By ref), 1 reg: rcx, byteAlignment=8, lateArgInx=0, processed]


fgMorphTree BB02, STMT00006 (after)
               [000021] --CXG+------              *  CALL      void   System.Console.WriteLine
               [000020] -----+------ arg0 in rcx  \--*  LCL_VAR   ref    V21 tmp3         

fgMorphTree BB02, STMT00007 (before)
               [000022] ------------              *  NO_OP     void  

fgMorphTree BB02, STMT00008 (before)
               [000027] -AC---------              *  ASG       ref   
               [000026] D------N----              +--*  LCL_VAR   ref    V22 tmp4         
               [000025] --C---------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
               [000024] H----------- arg0            \--*  CNS_INT(h) long   0x7ffdb7022b70 method
Initializing arg info for 25.CALL:
ArgTable for 25.CALL after fgInitArgInfo:
fgArgTabEntry[arg 0 24.CNS_INT long (By ref), 1 reg: rcx, byteAlignment=8]

Morphing args for 25.CALL:
argSlots=1, preallocatedArgCount=4, nextSlotNum=4, nextSlotByteOffset=32, outgoingArgSpaceSize=32

Sorting the arguments:
Deferred argument ('rcx'):
               [000024] H----+------              *  CNS_INT(h) long   0x7ffdb7022b70 method
Replaced with placeholder node:
               [000385] ----------L-              *  ARGPLACE  long  

Shuffled argument table:    rcx 
ArgTable for 25.CALL after fgMorphArgs:
fgArgTabEntry[arg 0 24.CNS_INT long (By ref), 1 reg: rcx, byteAlignment=8, lateArgInx=0, processed]


fgMorphTree BB02, STMT00008 (after)
               [000027] -AC--+------              *  ASG       ref   
               [000026] D----+-N----              +--*  LCL_VAR   ref    V22 tmp4         
               [000025] --C--+------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
               [000024] H----+------ arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb7022b70 method

fgMorphTree BB02, STMT00009 (before)
               [000029] --C-G-------              *  CALL      void   FalseLeakRepro.List..ctor
               [000028] ------------ this in rcx  \--*  LCL_VAR   ref    V22 tmp4         
Initializing arg info for 29.CALL:
ArgTable for 29.CALL after fgInitArgInfo:
fgArgTabEntry[arg 0 28.LCL_VAR ref (By ref), 1 reg: rcx, byteAlignment=8]

Morphing args for 29.CALL:
argSlots=1, preallocatedArgCount=4, nextSlotNum=4, nextSlotByteOffset=32, outgoingArgSpaceSize=32

Sorting the arguments:
Deferred argument ('rcx'):
               [000028] -----+------              *  LCL_VAR   ref    V22 tmp4         
Replaced with placeholder node:
               [000386] ----------L-              *  ARGPLACE  ref   

Shuffled argument table:    rcx 
ArgTable for 29.CALL after fgMorphArgs:
fgArgTabEntry[arg 0 28.LCL_VAR ref (By ref), 1 reg: rcx, byteAlignment=8, lateArgInx=0, processed]


fgMorphTree BB02, STMT00009 (after)
               [000029] --CXG+------              *  CALL      void   FalseLeakRepro.List..ctor
               [000028] -----+------ this in rcx  \--*  LCL_VAR   ref    V22 tmp4         

fgMorphTree BB02, STMT00010 (before)
               [000032] -A-XG-------              *  ASG       ref   
               [000031] ---XG--N----              +--*  FIELD     ref    _myList
               [000023] ------------              |  \--*  LCL_VAR   ref    V00 this         
               [000030] ------------              \--*  LCL_VAR   ref    V22 tmp4         

Final value of Compiler::fgMorphField after calling fgMorphSmpOp:
               [000031] ---XG--N----              *  IND       ref   
               [000388] -----+------              \--*  ADD       byref 
               [000023] -----+------                 +--*  LCL_VAR   ref    V00 this         
               [000387] -----+------                 \--*  CNS_INT   long   8 field offset Fseq[_myList]

fgMorphTree BB02, STMT00010 (after)
               [000032] -A-XG+------              *  ASG       ref   
               [000031] ---XG+-N----              +--*  IND       ref   
               [000388] -----+------              |  \--*  ADD       byref 
               [000023] -----+------              |     +--*  LCL_VAR   ref    V00 this         
               [000387] -----+------              |     \--*  CNS_INT   long   8 field offset Fseq[_myList]
               [000030] -----+------              \--*  LCL_VAR   ref    V22 tmp4         

fgMorphTree BB02, STMT00011 (before)
               [000039] -AC---------              *  ASG       ref   
               [000038] D------N----              +--*  LCL_VAR   ref    V23 tmp5         
               [000037] --C---------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
               [000036] H----------- arg0            \--*  CNS_INT(h) long   0x7ffdb6c458b8 token
Initializing arg info for 37.CALL:
ArgTable for 37.CALL after fgInitArgInfo:
fgArgTabEntry[arg 0 36.CNS_INT long (By ref), 1 reg: rcx, byteAlignment=8]

Morphing args for 37.CALL:
argSlots=1, preallocatedArgCount=4, nextSlotNum=4, nextSlotByteOffset=32, outgoingArgSpaceSize=32

Sorting the arguments:
Deferred argument ('rcx'):
               [000036] H----+------              *  CNS_INT(h) long   0x7ffdb6c458b8 token
Replaced with placeholder node:
               [000389] ----------L-              *  ARGPLACE  long  

Shuffled argument table:    rcx 
ArgTable for 37.CALL after fgMorphArgs:
fgArgTabEntry[arg 0 36.CNS_INT long (By ref), 1 reg: rcx, byteAlignment=8, lateArgInx=0, processed]


fgMorphTree BB02, STMT00011 (after)
               [000039] -AC--+------              *  ASG       ref   
               [000038] D----+-N----              +--*  LCL_VAR   ref    V23 tmp5         
               [000037] --C--+------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
               [000036] H----+------ arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb6c458b8 token

fgMorphTree BB02, STMT00013 (before)
               [000043] -A-XG-------              *  ASG       ref   
               [000042] D------N----              +--*  LCL_VAR   ref    V24 tmp6         
               [000035] ---XG-------              \--*  FIELD     ref    Head
               [000034] ---XG-------                 \--*  FIELD     ref    _myList
               [000033] ------------                    \--*  LCL_VAR   ref    V00 this         

Final value of Compiler::fgMorphField after calling fgMorphSmpOp:
               [000034] ---XG-------              *  IND       ref   
               [000393] -----+------              \--*  ADD       byref 
               [000033] -----+------                 +--*  LCL_VAR   ref    V00 this         
               [000392] -----+------                 \--*  CNS_INT   long   8 field offset Fseq[_myList]

Final value of Compiler::fgMorphField after calling fgMorphSmpOp:
               [000035] ---XG-------              *  IND       ref   
               [000391] ---XG+------              \--*  ADD       byref 
               [000034] ---XG+------                 +--*  IND       ref   
               [000393] -----+------                 |  \--*  ADD       byref 
               [000033] -----+------                 |     +--*  LCL_VAR   ref    V00 this         
               [000392] -----+------                 |     \--*  CNS_INT   long   8 field offset Fseq[_myList]
               [000390] -----+------                 \--*  CNS_INT   long   8 field offset Fseq[Head]

fgMorphTree BB02, STMT00013 (after)
               [000043] -A-XG+------              *  ASG       ref   
               [000042] D----+-N----              +--*  LCL_VAR   ref    V24 tmp6         
               [000035] ---XG+------              \--*  IND       ref   
               [000391] ---XG+------                 \--*  ADD       byref 
               [000034] ---XG+------                    +--*  IND       ref   
               [000393] -----+------                    |  \--*  ADD       byref 
               [000033] -----+------                    |     +--*  LCL_VAR   ref    V00 this         
               [000392] -----+------                    |     \--*  CNS_INT   long   8 field offset Fseq[_myList]
               [000390] -----+------                    \--*  CNS_INT   long   8 field offset Fseq[Head]

fgMorphTree BB02, STMT00012 (before)
               [000041] --C-G-------              *  CALL      void   System.Object..ctor
               [000040] ------------ this in rcx  \--*  LCL_VAR   ref    V23 tmp5         
Initializing arg info for 41.CALL:
ArgTable for 41.CALL after fgInitArgInfo:
fgArgTabEntry[arg 0 40.LCL_VAR ref (By ref), 1 reg: rcx, byteAlignment=8]

Morphing args for 41.CALL:
argSlots=1, preallocatedArgCount=4, nextSlotNum=4, nextSlotByteOffset=32, outgoingArgSpaceSize=32

Sorting the arguments:
Deferred argument ('rcx'):
               [000040] -----+------              *  LCL_VAR   ref    V23 tmp5         
Replaced with placeholder node:
               [000394] ----------L-              *  ARGPLACE  ref   

Shuffled argument table:    rcx 
ArgTable for 41.CALL after fgMorphArgs:
fgArgTabEntry[arg 0 40.LCL_VAR ref (By ref), 1 reg: rcx, byteAlignment=8, lateArgInx=0, processed]


fgMorphTree BB02, STMT00012 (after)
               [000041] --CXG+------              *  CALL      void   System.Object..ctor
               [000040] -----+------ this in rcx  \--*  LCL_VAR   ref    V23 tmp5         

fgMorphTree BB02, STMT00014 (before)
               [000047] -A-XG-------              *  ASG       ref   
               [000046] ---XG--N----              +--*  FIELD     ref    Data
               [000044] ------------              |  \--*  LCL_VAR   ref    V24 tmp6         
               [000045] ------------              \--*  LCL_VAR   ref    V23 tmp5         

Final value of Compiler::fgMorphField after calling fgMorphSmpOp:
               [000046] ---XG--N----              *  IND       ref   
               [000396] -----+------              \--*  ADD       byref 
               [000044] -----+------                 +--*  LCL_VAR   ref    V24 tmp6         
               [000395] -----+------                 \--*  CNS_INT   long   16 field offset Fseq[Data]

fgMorphTree BB02, STMT00014 (after)
               [000047] -A-XG+------              *  ASG       ref   
               [000046] ---XG+-N----              +--*  IND       ref   
               [000396] -----+------              |  \--*  ADD       byref 
               [000044] -----+------              |     +--*  LCL_VAR   ref    V24 tmp6         
               [000395] -----+------              |     \--*  CNS_INT   long   16 field offset Fseq[Data]
               [000045] -----+------              \--*  LCL_VAR   ref    V23 tmp5         

fgMorphTree BB02, STMT00015 (before)
               [000053] -AC---------              *  ASG       ref   
               [000052] D------N----              +--*  LCL_VAR   ref    V25 tmp7         
               [000051] --C---------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
               [000050] H----------- arg0            \--*  CNS_INT(h) long   0x7ffdb7026348 token
Initializing arg info for 51.CALL:
ArgTable for 51.CALL after fgInitArgInfo:
fgArgTabEntry[arg 0 50.CNS_INT long (By ref), 1 reg: rcx, byteAlignment=8]

Morphing args for 51.CALL:
argSlots=1, preallocatedArgCount=4, nextSlotNum=4, nextSlotByteOffset=32, outgoingArgSpaceSize=32

Sorting the arguments:
Deferred argument ('rcx'):
               [000050] H----+------              *  CNS_INT(h) long   0x7ffdb7026348 token
Replaced with placeholder node:
               [000397] ----------L-              *  ARGPLACE  long  

Shuffled argument table:    rcx 
ArgTable for 51.CALL after fgMorphArgs:
fgArgTabEntry[arg 0 50.CNS_INT long (By ref), 1 reg: rcx, byteAlignment=8, lateArgInx=0, processed]


fgMorphTree BB02, STMT00015 (after)
               [000053] -AC--+------              *  ASG       ref   
               [000052] D----+-N----              +--*  LCL_VAR   ref    V25 tmp7         
               [000051] --C--+------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
               [000050] H----+------ arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb7026348 token

fgMorphTree BB02, STMT00016 (before)
               [000055] --C-G-------              *  CALL      void   System.MulticastDelegate.CtorClosed
               [000054] ------------ this in rcx  +--*  LCL_VAR   ref    V25 tmp7         
               [000048] ------------ arg1         +--*  LCL_VAR   ref    V00 this         
               [000049] ------------ arg2         \--*  FTN_ADDR  long   FalseLeakRepro.Program.<Run>b__3_0

Initializing arg info for 55.CALL:
ArgTable for 55.CALL after fgInitArgInfo:
fgArgTabEntry[arg 0 54.LCL_VAR ref (By ref), 1 reg: rcx, byteAlignment=8]
fgArgTabEntry[arg 1 48.LCL_VAR ref (By ref), 1 reg: rdx, byteAlignment=8]
fgArgTabEntry[arg 2 49.FTN_ADDR long (By ref), 1 reg: r8, byteAlignment=8]

Morphing args for 55.CALL:
argSlots=3, preallocatedArgCount=4, nextSlotNum=4, nextSlotByteOffset=32, outgoingArgSpaceSize=32

Sorting the arguments:
Deferred argument ('rcx'):
               [000054] -----+------              *  LCL_VAR   ref    V25 tmp7         
Replaced with placeholder node:
               [000398] ----------L-              *  ARGPLACE  ref   
Deferred argument ('rdx'):
               [000048] -----+------              *  LCL_VAR   ref    V00 this         
Replaced with placeholder node:
               [000399] ----------L-              *  ARGPLACE  ref   
Deferred argument ('r8'):
               [000049] H----+------              *  CNS_INT(h) long   0x7ffdb6c613f8 ftn
Replaced with placeholder node:
               [000400] ----------L-              *  ARGPLACE  long  

Shuffled argument table:    rcx rdx r8 
ArgTable for 55.CALL after fgMorphArgs:
fgArgTabEntry[arg 0 54.LCL_VAR ref (By ref), 1 reg: rcx, byteAlignment=8, lateArgInx=0, processed]
fgArgTabEntry[arg 1 48.LCL_VAR ref (By ref), 1 reg: rdx, byteAlignment=8, lateArgInx=1, processed]
fgArgTabEntry[arg 2 49.CNS_INT long (By ref), 1 reg: r8, byteAlignment=8, lateArgInx=2, processed]


fgMorphTree BB02, STMT00016 (after)
               [000055] --CXG+------              *  CALL      void   System.MulticastDelegate.CtorClosed
               [000054] -----+------ this in rcx  +--*  LCL_VAR   ref    V25 tmp7         
               [000048] -----+------ arg1 in rdx  +--*  LCL_VAR   ref    V00 this         
               [000049] H----+------ arg2 in r8   \--*  CNS_INT(h) long   0x7ffdb6c613f8 ftn

fgMorphTree BB02, STMT00017 (before)
               [000060] -AC---------              *  ASG       ref   
               [000059] D------N----              +--*  LCL_VAR   ref    V26 tmp8         
               [000058] --C---------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWFAST
               [000057] H----------- arg0            \--*  CNS_INT(h) long   0x7ffdb6dc4e80 token
Initializing arg info for 58.CALL:
ArgTable for 58.CALL after fgInitArgInfo:
fgArgTabEntry[arg 0 57.CNS_INT long (By ref), 1 reg: rcx, byteAlignment=8]

Morphing args for 58.CALL:
argSlots=1, preallocatedArgCount=4, nextSlotNum=4, nextSlotByteOffset=32, outgoingArgSpaceSize=32

Sorting the arguments:
Deferred argument ('rcx'):
               [000057] H----+------              *  CNS_INT(h) long   0x7ffdb6dc4e80 token
Replaced with placeholder node:
               [000401] ----------L-              *  ARGPLACE  long  

Shuffled argument table:    rcx 
ArgTable for 58.CALL after fgMorphArgs:
fgArgTabEntry[arg 0 57.CNS_INT long (By ref), 1 reg: rcx, byteAlignment=8, lateArgInx=0, processed]


fgMorphTree BB02, STMT00017 (after)
               [000060] -AC--+------              *  ASG       ref   
               [000059] D----+-N----              +--*  LCL_VAR   ref    V26 tmp8         
               [000058] --C--+------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWFAST
               [000057] H----+------ arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb6dc4e80 token

fgMorphTree BB02, STMT00018 (before)
               [000062] --C-G-------              *  CALL      void   System.Threading.Thread..ctor
               [000061] ------------ this in rcx  +--*  LCL_VAR   ref    V26 tmp8         
               [000056] ------------ arg1         \--*  LCL_VAR   ref    V25 tmp7         
Initializing arg info for 62.CALL:
ArgTable for 62.CALL after fgInitArgInfo:
fgArgTabEntry[arg 0 61.LCL_VAR ref (By ref), 1 reg: rcx, byteAlignment=8]
fgArgTabEntry[arg 1 56.LCL_VAR ref (By ref), 1 reg: rdx, byteAlignment=8]

Morphing args for 62.CALL:
argSlots=2, preallocatedArgCount=4, nextSlotNum=4, nextSlotByteOffset=32, outgoingArgSpaceSize=32

Sorting the arguments:
Deferred argument ('rcx'):
               [000061] -----+------              *  LCL_VAR   ref    V26 tmp8         
Replaced with placeholder node:
               [000402] ----------L-              *  ARGPLACE  ref   
Deferred argument ('rdx'):
               [000056] -----+------              *  LCL_VAR   ref    V25 tmp7         
Replaced with placeholder node:
               [000403] ----------L-              *  ARGPLACE  ref   

Shuffled argument table:    rcx rdx 
ArgTable for 62.CALL after fgMorphArgs:
fgArgTabEntry[arg 0 61.LCL_VAR ref (By ref), 1 reg: rcx, byteAlignment=8, lateArgInx=0, processed]
fgArgTabEntry[arg 1 56.LCL_VAR ref (By ref), 1 reg: rdx, byteAlignment=8, lateArgInx=1, processed]


fgMorphTree BB02, STMT00018 (after)
               [000062] --CXG+------              *  CALL      void   System.Threading.Thread..ctor
               [000061] -----+------ this in rcx  +--*  LCL_VAR   ref    V26 tmp8         
               [000056] -----+------ arg1 in rdx  \--*  LCL_VAR   ref    V25 tmp7         

fgMorphTree BB02, STMT00019 (before)
               [000065] -A----------              *  ASG       ref   
               [000064] D------N----              +--*  LCL_VAR   ref    V02 loc0         
               [000063] ------------              \--*  LCL_VAR   ref    V26 tmp8         

fgMorphTree BB02, STMT00020 (before)
               [000067] --C-G-------              *  CALL nullcheck void   System.Threading.Thread.Start
               [000066] ------------ this in rcx  \--*  LCL_VAR   ref    V02 loc0         
Initializing arg info for 67.CALL:
ArgTable for 67.CALL after fgInitArgInfo:
fgArgTabEntry[arg 0 66.LCL_VAR ref (By ref), 1 reg: rcx, byteAlignment=8]

Morphing args for 67.CALL:
argSlots=1, preallocatedArgCount=4, nextSlotNum=4, nextSlotByteOffset=32, outgoingArgSpaceSize=32

Sorting the arguments:
Deferred argument ('rcx'):
               [000066] -----+------              *  LCL_VAR   ref    V02 loc0         
Replaced with placeholder node:
               [000404] ----------L-              *  ARGPLACE  ref   

Shuffled argument table:    rcx 
ArgTable for 67.CALL after fgMorphArgs:
fgArgTabEntry[arg 0 66.LCL_VAR ref (By ref), 1 reg: rcx, byteAlignment=8, lateArgInx=0, processed]


fgMorphTree BB02, STMT00020 (after)
               [000067] --CXG+------              *  CALL nullcheck void   System.Threading.Thread.Start
               [000066] -----+------ this in rcx  \--*  LCL_VAR   ref    V02 loc0         

fgMorphTree BB02, STMT00021 (before)
               [000068] ------------              *  NO_OP     void  

fgMorphTree BB02, STMT00022 (before)
               [000072] -AC-G-------              *  ASG       struct (copy)
               [000070] D------N----              +--*  LCL_VAR   struct<System.DateTime, 8> V27 tmp9         
               [000069] --C-G-------              \--*  CALL      struct System.DateTime.get_Now
Initializing arg info for 69.CALL:
ArgTable for 69.CALL after fgInitArgInfo:

Morphing args for 69.CALL:
argSlots=0, preallocatedArgCount=4, nextSlotNum=4, nextSlotByteOffset=32, outgoingArgSpaceSize=32
ArgTable for 69.CALL after fgMorphArgs:

MorphCopyBlock:
MorphBlock for dst tree, before:
               [000070] D----+-N----              *  LCL_VAR   struct<System.DateTime, 8> V27 tmp9         
MorphBlock after:
               [000070] D----+-N----              *  LCL_VAR   struct<System.DateTime, 8> V27 tmp9         
PrepareDst for [000070] have found a local var V27.
MorphBlock for src tree, before:
               [000069] --CXG+------              *  CALL      struct System.DateTime.get_Now
MorphBlock after:
               [000069] --CXG+------              *  CALL      struct System.DateTime.get_Now
block assignment to morph:
               [000072] -ACXG-------              *  ASG       struct (copy)
               [000070] D----+-N----              +--*  LCL_VAR   struct<System.DateTime, 8> V27 tmp9         
               [000069] --CXG+------              \--*  CALL      struct System.DateTime.get_Now
 src is a call this requires a CopyBlock.
MorphCopyBlock (after):
               [000072] -ACXG-------              *  ASG       struct (copy)
               [000070] D----+-N----              +--*  LCL_VAR   struct<System.DateTime, 8> V27 tmp9         
               [000069] --CXG+------              \--*  CALL      struct System.DateTime.get_Now

fgMorphTree BB02, STMT00023 (before)
               [000076] -A----------              *  ASG       struct (copy)
               [000074] D------N----              +--*  LCL_VAR   struct<System.DateTime, 8>(AX) V03 loc1         
               [000073] ------------              \--*  LCL_VAR   struct<System.DateTime, 8> V27 tmp9         
MorphCopyBlock:
MorphBlock for dst tree, before:
               [000074] D---G+-N----              *  LCL_VAR   struct<System.DateTime, 8>(AX) V03 loc1         
MorphBlock after:
               [000074] D---G+-N----              *  LCL_VAR   struct<System.DateTime, 8>(AX) V03 loc1         
PrepareDst for [000074] have found a local var V03.
MorphBlock for src tree, before:
               [000073] -----+------              *  LCL_VAR   struct<System.DateTime, 8> V27 tmp9         
MorphBlock after:
               [000073] -----+------              *  LCL_VAR   struct<System.DateTime, 8> V27 tmp9         
block assignment to morph:
               [000076] -A--G-------              *  ASG       struct (copy)
               [000074] D---G+-N----              +--*  LCL_VAR   struct<System.DateTime, 8>(AX) V03 loc1         
               [000073] -----+------              \--*  LCL_VAR   struct<System.DateTime, 8> V27 tmp9         
 with no promoted structs this requires a CopyBlock.
MorphCopyBlock (after):
               [000076] -A--G-------              *  ASG       struct (copy)
               [000074] D---G+-N----              +--*  LCL_VAR   struct<System.DateTime, 8>(AX) V03 loc1         
               [000073] -----+------              \--*  LCL_VAR   struct<System.DateTime, 8> V27 tmp9         

fgMorphTree BB02, STMT00024 (before)
               [000081] -AC-G-------              *  ASG       ref   
               [000080] D------N----              +--*  LCL_VAR   ref    V28 tmp10        
               [000079] --C-G-------              \--*  CALL      ref    System.DateTime.ToString
               [000078] ------------ this in rcx     \--*  LCL_VAR_ADDR byref  V03 loc1         
Initializing arg info for 79.CALL:
ArgTable for 79.CALL after fgInitArgInfo:
fgArgTabEntry[arg 0 78.LCL_VAR_ADDR byref (By ref), 1 reg: rcx, byteAlignment=8]

Morphing args for 79.CALL:
argSlots=1, preallocatedArgCount=4, nextSlotNum=4, nextSlotByteOffset=32, outgoingArgSpaceSize=32

Sorting the arguments:
Deferred argument ('rcx'):
               [000078] -----+------              *  LCL_VAR_ADDR byref  V03 loc1         
Replaced with placeholder node:
               [000405] ----------L-              *  ARGPLACE  byref 

Shuffled argument table:    rcx 
ArgTable for 79.CALL after fgMorphArgs:
fgArgTabEntry[arg 0 78.LCL_VAR_ADDR byref (By ref), 1 reg: rcx, byteAlignment=8, lateArgInx=0, processed]


fgMorphTree BB02, STMT00024 (after)
               [000081] -ACXG+------              *  ASG       ref   
               [000080] D----+-N----              +--*  LCL_VAR   ref    V28 tmp10        
               [000079] --CXG+------              \--*  CALL      ref    System.DateTime.ToString
               [000078] -----+------ this in rcx     \--*  LCL_VAR_ADDR byref  V03 loc1         

fgMorphTree BB02, STMT00025 (before)
               [000086] -AC-G-------              *  ASG       ref   
               [000085] D------N----              +--*  LCL_VAR   ref    V29 tmp11        
               [000084] --C-G-------              \--*  CALL      ref    System.String.Concat
               [000082] ------------ arg0            +--*  LCL_VAR   ref    V28 tmp10        
               [000083] ------------ arg1            \--*  CNS_STR   ref   <string constant>
Initializing arg info for 84.CALL:
ArgTable for 84.CALL after fgInitArgInfo:
fgArgTabEntry[arg 0 82.LCL_VAR ref (By ref), 1 reg: rcx, byteAlignment=8]
fgArgTabEntry[arg 1 83.CNS_STR ref (By ref), 1 reg: rdx, byteAlignment=8]

Morphing args for 84.CALL:
argSlots=2, preallocatedArgCount=4, nextSlotNum=4, nextSlotByteOffset=32, outgoingArgSpaceSize=32

Sorting the arguments:
Deferred argument ('rdx'):
               [000407] #---G+------              *  IND       ref   
               [000406] H----+------              \--*  CNS_INT(h) long   0xBE2A31F8 "	 Consumer thread started, adding items..."
Replaced with placeholder node:
               [000408] ----------L-              *  ARGPLACE  ref   
Deferred argument ('rcx'):
               [000082] -----+------              *  LCL_VAR   ref    V28 tmp10        
Replaced with placeholder node:
               [000409] ----------L-              *  ARGPLACE  ref   

Shuffled argument table:    rdx rcx 
ArgTable for 84.CALL after fgMorphArgs:
fgArgTabEntry[arg 1 407.IND ref (By ref), 1 reg: rdx, byteAlignment=8, lateArgInx=0, processed]
fgArgTabEntry[arg 0 82.LCL_VAR ref (By ref), 1 reg: rcx, byteAlignment=8, lateArgInx=1, processed]


fgMorphTree BB02, STMT00025 (after)
               [000086] -ACXG+------              *  ASG       ref   
               [000085] D----+-N----              +--*  LCL_VAR   ref    V29 tmp11        
               [000084] --CXG+------              \--*  CALL      ref    System.String.Concat
               [000407] #---G+------ arg1 in rdx     +--*  IND       ref   
               [000406] H----+------                 |  \--*  CNS_INT(h) long   0xBE2A31F8 "	 Consumer thread started, adding items..."
               [000082] -----+------ arg0 in rcx     \--*  LCL_VAR   ref    V28 tmp10        

fgMorphTree BB02, STMT00026 (before)
               [000088] --C-G-------              *  CALL      void   System.Console.WriteLine
               [000087] ------------ arg0         \--*  LCL_VAR   ref    V29 tmp11        
Initializing arg info for 88.CALL:
ArgTable for 88.CALL after fgInitArgInfo:
fgArgTabEntry[arg 0 87.LCL_VAR ref (By ref), 1 reg: rcx, byteAlignment=8]

Morphing args for 88.CALL:
argSlots=1, preallocatedArgCount=4, nextSlotNum=4, nextSlotByteOffset=32, outgoingArgSpaceSize=32

Sorting the arguments:
Deferred argument ('rcx'):
               [000087] -----+------              *  LCL_VAR   ref    V29 tmp11        
Replaced with placeholder node:
               [000410] ----------L-              *  ARGPLACE  ref   

Shuffled argument table:    rcx 
ArgTable for 88.CALL after fgMorphArgs:
fgArgTabEntry[arg 0 87.LCL_VAR ref (By ref), 1 reg: rcx, byteAlignment=8, lateArgInx=0, processed]


fgMorphTree BB02, STMT00026 (after)
               [000088] --CXG+------              *  CALL      void   System.Console.WriteLine
               [000087] -----+------ arg0 in rcx  \--*  LCL_VAR   ref    V29 tmp11        

fgMorphTree BB02, STMT00027 (before)
               [000089] ------------              *  NO_OP     void  

fgMorphTree BB02, STMT00028 (before)
               [000092] -A----------              *  ASG       int   
               [000091] D------N----              +--*  LCL_VAR   int    V04 loc2         
               [000090] ------------              \--*  CNS_INT   int    0

fgMorphTree BB02, STMT00029 (before)
               [000093] ------------              *  NOP       void  

Morphing BB03 of 'FalseLeakRepro.Program:Run(System.String[]):this'

fgMorphTree BB03, STMT00032 (before)
               [000103] ------------              *  NO_OP     void  

fgMorphTree BB03, STMT00033 (before)
               [000107] -A-XG-------              *  ASG       ref   
               [000106] D------N----              +--*  LCL_VAR   ref    V05 loc3         
               [000105] ---XG-------              \--*  FIELD     ref    _myList
               [000104] ------------                 \--*  LCL_VAR   ref    V00 this         

Final value of Compiler::fgMorphField after calling fgMorphSmpOp:
               [000105] ---XG-------              *  IND       ref   
               [000412] -----+------              \--*  ADD       byref 
               [000104] -----+------                 +--*  LCL_VAR   ref    V00 this         
               [000411] -----+------                 \--*  CNS_INT   long   8 field offset Fseq[_myList]

fgMorphTree BB03, STMT00033 (after)
               [000107] -A-XG+------              *  ASG       ref   
               [000106] D----+-N----              +--*  LCL_VAR   ref    V05 loc3         
               [000105] ---XG+------              \--*  IND       ref   
               [000412] -----+------                 \--*  ADD       byref 
               [000104] -----+------                    +--*  LCL_VAR   ref    V00 this         
               [000411] -----+------                    \--*  CNS_INT   long   8 field offset Fseq[_myList]

fgMorphTree BB03, STMT00034 (before)
               [000110] -A----------              *  ASG       int   
               [000109] D------N----              +--*  LCL_VAR   int   (AX) V06 loc4         
               [000108] ------------              \--*  CNS_INT   int    0

Morphing BB04 of 'FalseLeakRepro.Program:Run(System.String[]):this'

fgMorphTree BB04, STMT00035 (before)
               [000114] --C-G-------              *  CALL      void   System.Threading.Monitor.Enter
               [000111] ------------ arg0         +--*  LCL_VAR   ref    V05 loc3         
               [000113] ------------ arg1         \--*  LCL_VAR_ADDR byref  V06 loc4         
Initializing arg info for 114.CALL:
ArgTable for 114.CALL after fgInitArgInfo:
fgArgTabEntry[arg 0 111.LCL_VAR ref (By ref), 1 reg: rcx, byteAlignment=8]
fgArgTabEntry[arg 1 113.LCL_VAR_ADDR long (By ref), 1 reg: rdx, byteAlignment=8]

Morphing args for 114.CALL:
argSlots=2, preallocatedArgCount=4, nextSlotNum=4, nextSlotByteOffset=32, outgoingArgSpaceSize=32

Sorting the arguments:
Deferred argument ('rdx'):
               [000113] -----+------              *  LCL_VAR_ADDR long   V06 loc4         
Replaced with placeholder node:
               [000413] ----------L-              *  ARGPLACE  long  
Deferred argument ('rcx'):
               [000111] -----+------              *  LCL_VAR   ref    V05 loc3         
Replaced with placeholder node:
               [000414] ----------L-              *  ARGPLACE  ref   

Shuffled argument table:    rdx rcx 
ArgTable for 114.CALL after fgMorphArgs:
fgArgTabEntry[arg 1 113.LCL_VAR_ADDR long (By ref), 1 reg: rdx, byteAlignment=8, lateArgInx=0, processed]
fgArgTabEntry[arg 0 111.LCL_VAR ref (By ref), 1 reg: rcx, byteAlignment=8, lateArgInx=1, processed]


fgMorphTree BB04, STMT00035 (after)
               [000114] --CXG+------              *  CALL      void   System.Threading.Monitor.Enter
               [000113] -----+------ arg1 in rdx  +--*  LCL_VAR_ADDR long   V06 loc4         
               [000111] -----+------ arg0 in rcx  \--*  LCL_VAR   ref    V05 loc3         

fgMorphTree BB04, STMT00036 (before)
               [000115] ------------              *  NO_OP     void  

fgMorphTree BB04, STMT00037 (before)
               [000116] ------------              *  NO_OP     void  

fgMorphTree BB04, STMT00038 (before)
               [000123] -AC---------              *  ASG       ref   
               [000122] D------N----              +--*  LCL_VAR   ref    V30 tmp12        
               [000121] --C---------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
               [000120] H----------- arg0            \--*  CNS_INT(h) long   0x7ffdb70260c8 method
Initializing arg info for 121.CALL:
ArgTable for 121.CALL after fgInitArgInfo:
fgArgTabEntry[arg 0 120.CNS_INT long (By ref), 1 reg: rcx, byteAlignment=8]

Morphing args for 121.CALL:
argSlots=1, preallocatedArgCount=4, nextSlotNum=4, nextSlotByteOffset=32, outgoingArgSpaceSize=32

Sorting the arguments:
Deferred argument ('rcx'):
               [000120] H----+------              *  CNS_INT(h) long   0x7ffdb70260c8 method
Replaced with placeholder node:
               [000415] ----------L-              *  ARGPLACE  long  

Shuffled argument table:    rcx 
ArgTable for 121.CALL after fgMorphArgs:
fgArgTabEntry[arg 0 120.CNS_INT long (By ref), 1 reg: rcx, byteAlignment=8, lateArgInx=0, processed]


fgMorphTree BB04, STMT00038 (after)
               [000123] -AC--+------              *  ASG       ref   
               [000122] D----+-N----              +--*  LCL_VAR   ref    V30 tmp12        
               [000121] --C--+------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
               [000120] H----+------ arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb70260c8 method

fgMorphTree BB04, STMT00040 (before)
               [000127] -A-XG-------              *  ASG       ref   
               [000126] D------N----              +--*  LCL_VAR   ref    V31 tmp13        
               [000119] ---XG-------              \--*  FIELD     ref    Head
               [000118] ---XG-------                 \--*  FIELD     ref    _myList
               [000117] ------------                    \--*  LCL_VAR   ref    V00 this         

Final value of Compiler::fgMorphField after calling fgMorphSmpOp:
               [000118] ---XG-------              *  IND       ref   
               [000419] -----+------              \--*  ADD       byref 
               [000117] -----+------                 +--*  LCL_VAR   ref    V00 this         
               [000418] -----+------                 \--*  CNS_INT   long   8 field offset Fseq[_myList]

Final value of Compiler::fgMorphField after calling fgMorphSmpOp:
               [000119] ---XG-------              *  IND       ref   
               [000417] ---XG+------              \--*  ADD       byref 
               [000118] ---XG+------                 +--*  IND       ref   
               [000419] -----+------                 |  \--*  ADD       byref 
               [000117] -----+------                 |     +--*  LCL_VAR   ref    V00 this         
               [000418] -----+------                 |     \--*  CNS_INT   long   8 field offset Fseq[_myList]
               [000416] -----+------                 \--*  CNS_INT   long   8 field offset Fseq[Head]

fgMorphTree BB04, STMT00040 (after)
               [000127] -A-XG+------              *  ASG       ref   
               [000126] D----+-N----              +--*  LCL_VAR   ref    V31 tmp13        
               [000119] ---XG+------              \--*  IND       ref   
               [000417] ---XG+------                 \--*  ADD       byref 
               [000118] ---XG+------                    +--*  IND       ref   
               [000419] -----+------                    |  \--*  ADD       byref 
               [000117] -----+------                    |     +--*  LCL_VAR   ref    V00 this         
               [000418] -----+------                    |     \--*  CNS_INT   long   8 field offset Fseq[_myList]
               [000416] -----+------                    \--*  CNS_INT   long   8 field offset Fseq[Head]

fgMorphTree BB04, STMT00039 (before)
               [000125] --C-G-------              *  CALL      void   FalseLeakRepro.Node..ctor
               [000124] ------------ this in rcx  \--*  LCL_VAR   ref    V30 tmp12        
Initializing arg info for 125.CALL:
ArgTable for 125.CALL after fgInitArgInfo:
fgArgTabEntry[arg 0 124.LCL_VAR ref (By ref), 1 reg: rcx, byteAlignment=8]

Morphing args for 125.CALL:
argSlots=1, preallocatedArgCount=4, nextSlotNum=4, nextSlotByteOffset=32, outgoingArgSpaceSize=32

Sorting the arguments:
Deferred argument ('rcx'):
               [000124] -----+------              *  LCL_VAR   ref    V30 tmp12        
Replaced with placeholder node:
               [000420] ----------L-              *  ARGPLACE  ref   

Shuffled argument table:    rcx 
ArgTable for 125.CALL after fgMorphArgs:
fgArgTabEntry[arg 0 124.LCL_VAR ref (By ref), 1 reg: rcx, byteAlignment=8, lateArgInx=0, processed]


fgMorphTree BB04, STMT00039 (after)
               [000125] --CXG+------              *  CALL      void   FalseLeakRepro.Node..ctor
               [000124] -----+------ this in rcx  \--*  LCL_VAR   ref    V30 tmp12        

fgMorphTree BB04, STMT00041 (before)
               [000131] -A-XG-------              *  ASG       ref   
               [000130] ---XG--N----              +--*  FIELD     ref    Next
               [000128] ------------              |  \--*  LCL_VAR   ref    V31 tmp13        
               [000129] ------------              \--*  LCL_VAR   ref    V30 tmp12        

Final value of Compiler::fgMorphField after calling fgMorphSmpOp:
               [000130] ---XG--N----              *  IND       ref   
               [000422] -----+------              \--*  ADD       byref 
               [000128] -----+------                 +--*  LCL_VAR   ref    V31 tmp13        
               [000421] -----+------                 \--*  CNS_INT   long   8 field offset Fseq[Next]

fgMorphTree BB04, STMT00041 (after)
               [000131] -A-XG+------              *  ASG       ref   
               [000130] ---XG+-N----              +--*  IND       ref   
               [000422] -----+------              |  \--*  ADD       byref 
               [000128] -----+------              |     +--*  LCL_VAR   ref    V31 tmp13        
               [000421] -----+------              |     \--*  CNS_INT   long   8 field offset Fseq[Next]
               [000129] -----+------              \--*  LCL_VAR   ref    V30 tmp12        

fgMorphTree BB04, STMT00042 (before)
               [000139] -A-XG-------              *  ASG       ref   
               [000138] ---XG--N----              +--*  FIELD     ref    Head
               [000133] ---XG-------              |  \--*  FIELD     ref    _myList
               [000132] ------------              |     \--*  LCL_VAR   ref    V00 this         
               [000137] ---XG-------              \--*  FIELD     ref    Next
               [000136] ---XG-------                 \--*  FIELD     ref    Head
               [000135] ---XG-------                    \--*  FIELD     ref    _myList
               [000134] ------------                       \--*  LCL_VAR   ref    V00 this         

Final value of Compiler::fgMorphField after calling fgMorphSmpOp:
               [000133] ---XG-------              *  IND       ref   
               [000426] -----+------              \--*  ADD       byref 
               [000132] -----+------                 +--*  LCL_VAR   ref    V00 this         
               [000425] -----+------                 \--*  CNS_INT   long   8 field offset Fseq[_myList]

Final value of Compiler::fgMorphField after calling fgMorphSmpOp:
               [000138] ---XG--N----              *  IND       ref   
               [000424] ---XG+------              \--*  ADD       byref 
               [000133] ---XG+------                 +--*  IND       ref   
               [000426] -----+------                 |  \--*  ADD       byref 
               [000132] -----+------                 |     +--*  LCL_VAR   ref    V00 this         
               [000425] -----+------                 |     \--*  CNS_INT   long   8 field offset Fseq[_myList]
               [000423] -----+------                 \--*  CNS_INT   long   8 field offset Fseq[Head]

Final value of Compiler::fgMorphField after calling fgMorphSmpOp:
               [000135] ---XG-------              *  IND       ref   
               [000432] -----+------              \--*  ADD       byref 
               [000134] -----+------                 +--*  LCL_VAR   ref    V00 this         
               [000431] -----+------                 \--*  CNS_INT   long   8 field offset Fseq[_myList]

Final value of Compiler::fgMorphField after calling fgMorphSmpOp:
               [000136] ---XG-------              *  IND       ref   
               [000430] ---XG+------              \--*  ADD       byref 
               [000135] ---XG+------                 +--*  IND       ref   
               [000432] -----+------                 |  \--*  ADD       byref 
               [000134] -----+------                 |     +--*  LCL_VAR   ref    V00 this         
               [000431] -----+------                 |     \--*  CNS_INT   long   8 field offset Fseq[_myList]
               [000429] -----+------                 \--*  CNS_INT   long   8 field offset Fseq[Head]

Final value of Compiler::fgMorphField after calling fgMorphSmpOp:
               [000137] ---XG-------              *  IND       ref   
               [000428] ---XG+------              \--*  ADD       byref 
               [000136] ---XG+------                 +--*  IND       ref   
               [000430] ---XG+------                 |  \--*  ADD       byref 
               [000135] ---XG+------                 |     +--*  IND       ref   
               [000432] -----+------                 |     |  \--*  ADD       byref 
               [000134] -----+------                 |     |     +--*  LCL_VAR   ref    V00 this         
               [000431] -----+------                 |     |     \--*  CNS_INT   long   8 field offset Fseq[_myList]
               [000429] -----+------                 |     \--*  CNS_INT   long   8 field offset Fseq[Head]
               [000427] -----+------                 \--*  CNS_INT   long   8 field offset Fseq[Next]

fgMorphTree BB04, STMT00042 (after)
               [000139] -A-XG+------              *  ASG       ref   
               [000138] ---XG+-N----              +--*  IND       ref   
               [000424] ---XG+------              |  \--*  ADD       byref 
               [000133] ---XG+------              |     +--*  IND       ref   
               [000426] -----+------              |     |  \--*  ADD       byref 
               [000132] -----+------              |     |     +--*  LCL_VAR   ref    V00 this         
               [000425] -----+------              |     |     \--*  CNS_INT   long   8 field offset Fseq[_myList]
               [000423] -----+------              |     \--*  CNS_INT   long   8 field offset Fseq[Head]
               [000137] ---XG+------              \--*  IND       ref   
               [000428] ---XG+------                 \--*  ADD       byref 
               [000136] ---XG+------                    +--*  IND       ref   
               [000430] ---XG+------                    |  \--*  ADD       byref 
               [000135] ---XG+------                    |     +--*  IND       ref   
               [000432] -----+------                    |     |  \--*  ADD       byref 
               [000134] -----+------                    |     |     +--*  LCL_VAR   ref    V00 this         
               [000431] -----+------                    |     |     \--*  CNS_INT   long   8 field offset Fseq[_myList]
               [000429] -----+------                    |     \--*  CNS_INT   long   8 field offset Fseq[Head]
               [000427] -----+------                    \--*  CNS_INT   long   8 field offset Fseq[Next]

fgMorphTree BB04, STMT00043 (before)
               [000146] -AC---------              *  ASG       ref   
               [000145] D------N----              +--*  LCL_VAR   ref    V32 tmp14        
               [000144] --C---------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
               [000143] H----------- arg0            \--*  CNS_INT(h) long   0x7ffdb6c458b8 token
Initializing arg info for 144.CALL:
ArgTable for 144.CALL after fgInitArgInfo:
fgArgTabEntry[arg 0 143.CNS_INT long (By ref), 1 reg: rcx, byteAlignment=8]

Morphing args for 144.CALL:
argSlots=1, preallocatedArgCount=4, nextSlotNum=4, nextSlotByteOffset=32, outgoingArgSpaceSize=32

Sorting the arguments:
Deferred argument ('rcx'):
               [000143] H----+------              *  CNS_INT(h) long   0x7ffdb6c458b8 token
Replaced with placeholder node:
               [000433] ----------L-              *  ARGPLACE  long  

Shuffled argument table:    rcx 
ArgTable for 144.CALL after fgMorphArgs:
fgArgTabEntry[arg 0 143.CNS_INT long (By ref), 1 reg: rcx, byteAlignment=8, lateArgInx=0, processed]


fgMorphTree BB04, STMT00043 (after)
               [000146] -AC--+------              *  ASG       ref   
               [000145] D----+-N----              +--*  LCL_VAR   ref    V32 tmp14        
               [000144] --C--+------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
               [000143] H----+------ arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb6c458b8 token

fgMorphTree BB04, STMT00045 (before)
               [000150] -A-XG-------              *  ASG       ref   
               [000149] D------N----              +--*  LCL_VAR   ref    V33 tmp15        
               [000142] ---XG-------              \--*  FIELD     ref    Head
               [000141] ---XG-------                 \--*  FIELD     ref    _myList
               [000140] ------------                    \--*  LCL_VAR   ref    V00 this         

Final value of Compiler::fgMorphField after calling fgMorphSmpOp:
               [000141] ---XG-------              *  IND       ref   
               [000437] -----+------              \--*  ADD       byref 
               [000140] -----+------                 +--*  LCL_VAR   ref    V00 this         
               [000436] -----+------                 \--*  CNS_INT   long   8 field offset Fseq[_myList]

Final value of Compiler::fgMorphField after calling fgMorphSmpOp:
               [000142] ---XG-------              *  IND       ref   
               [000435] ---XG+------              \--*  ADD       byref 
               [000141] ---XG+------                 +--*  IND       ref   
               [000437] -----+------                 |  \--*  ADD       byref 
               [000140] -----+------                 |     +--*  LCL_VAR   ref    V00 this         
               [000436] -----+------                 |     \--*  CNS_INT   long   8 field offset Fseq[_myList]
               [000434] -----+------                 \--*  CNS_INT   long   8 field offset Fseq[Head]

fgMorphTree BB04, STMT00045 (after)
               [000150] -A-XG+------              *  ASG       ref   
               [000149] D----+-N----              +--*  LCL_VAR   ref    V33 tmp15        
               [000142] ---XG+------              \--*  IND       ref   
               [000435] ---XG+------                 \--*  ADD       byref 
               [000141] ---XG+------                    +--*  IND       ref   
               [000437] -----+------                    |  \--*  ADD       byref 
               [000140] -----+------                    |     +--*  LCL_VAR   ref    V00 this         
               [000436] -----+------                    |     \--*  CNS_INT   long   8 field offset Fseq[_myList]
               [000434] -----+------                    \--*  CNS_INT   long   8 field offset Fseq[Head]

fgMorphTree BB04, STMT00044 (before)
               [000148] --C-G-------              *  CALL      void   System.Object..ctor
               [000147] ------------ this in rcx  \--*  LCL_VAR   ref    V32 tmp14        
Initializing arg info for 148.CALL:
ArgTable for 148.CALL after fgInitArgInfo:
fgArgTabEntry[arg 0 147.LCL_VAR ref (By ref), 1 reg: rcx, byteAlignment=8]

Morphing args for 148.CALL:
argSlots=1, preallocatedArgCount=4, nextSlotNum=4, nextSlotByteOffset=32, outgoingArgSpaceSize=32

Sorting the arguments:
Deferred argument ('rcx'):
               [000147] -----+------              *  LCL_VAR   ref    V32 tmp14        
Replaced with placeholder node:
               [000438] ----------L-              *  ARGPLACE  ref   

Shuffled argument table:    rcx 
ArgTable for 148.CALL after fgMorphArgs:
fgArgTabEntry[arg 0 147.LCL_VAR ref (By ref), 1 reg: rcx, byteAlignment=8, lateArgInx=0, processed]


fgMorphTree BB04, STMT00044 (after)
               [000148] --CXG+------              *  CALL      void   System.Object..ctor
               [000147] -----+------ this in rcx  \--*  LCL_VAR   ref    V32 tmp14        

fgMorphTree BB04, STMT00046 (before)
               [000154] -A-XG-------              *  ASG       ref   
               [000153] ---XG--N----              +--*  FIELD     ref    Data
               [000151] ------------              |  \--*  LCL_VAR   ref    V33 tmp15        
               [000152] ------------              \--*  LCL_VAR   ref    V32 tmp14        

Final value of Compiler::fgMorphField after calling fgMorphSmpOp:
               [000153] ---XG--N----              *  IND       ref   
               [000440] -----+------              \--*  ADD       byref 
               [000151] -----+------                 +--*  LCL_VAR   ref    V33 tmp15        
               [000439] -----+------                 \--*  CNS_INT   long   16 field offset Fseq[Data]

fgMorphTree BB04, STMT00046 (after)
               [000154] -A-XG+------              *  ASG       ref   
               [000153] ---XG+-N----              +--*  IND       ref   
               [000440] -----+------              |  \--*  ADD       byref 
               [000151] -----+------              |     +--*  LCL_VAR   ref    V33 tmp15        
               [000439] -----+------              |     \--*  CNS_INT   long   16 field offset Fseq[Data]
               [000152] -----+------              \--*  LCL_VAR   ref    V32 tmp14        

fgMorphTree BB04, STMT00047 (before)
               [000155] ------------              *  NO_OP     void  

fgMorphTree BB04, STMT00048 (before)
               [000156] ------------              *  NOP       void  

Morphing BB05 of 'FalseLeakRepro.Program:Run(System.String[]):this'

Morphing BB06 of 'FalseLeakRepro.Program:Run(System.String[]):this'

Morphing BB07 of 'FalseLeakRepro.Program:Run(System.String[]):this'

fgMorphTree BB07, STMT00051 (before)
               [000166] ------------              *  JTRUE     void  
               [000165] ------------              \--*  EQ        int   
               [000163] ------------                 +--*  LCL_VAR   int   (AX) V06 loc4         
               [000164] ------------                 \--*  CNS_INT   int    0

fgMorphTree BB07, STMT00051 (after)
               [000166] ----G+------              *  JTRUE     void  
               [000165] J---G+-N----              \--*  EQ        int   
               [000441] ----G+------                 +--*  CAST      int <- bool <- int
               [000163] ----G+------                 |  \--*  LCL_VAR   int   (AX) V06 loc4         
               [000164] -----+------                 \--*  CNS_INT   int    0

Morphing BB08 of 'FalseLeakRepro.Program:Run(System.String[]):this'

fgMorphTree BB08, STMT00053 (before)
               [000169] --C-G-------              *  CALL      void   System.Threading.Monitor.Exit
               [000168] ------------ arg0         \--*  LCL_VAR   ref    V05 loc3         
Initializing arg info for 169.CALL:
ArgTable for 169.CALL after fgInitArgInfo:
fgArgTabEntry[arg 0 168.LCL_VAR ref (By ref), 1 reg: rcx, byteAlignment=8]

Morphing args for 169.CALL:
argSlots=1, preallocatedArgCount=4, nextSlotNum=4, nextSlotByteOffset=32, outgoingArgSpaceSize=32

Sorting the arguments:
Deferred argument ('rcx'):
               [000168] -----+------              *  LCL_VAR   ref    V05 loc3         
Replaced with placeholder node:
               [000442] ----------L-              *  ARGPLACE  ref   

Shuffled argument table:    rcx 
ArgTable for 169.CALL after fgMorphArgs:
fgArgTabEntry[arg 0 168.LCL_VAR ref (By ref), 1 reg: rcx, byteAlignment=8, lateArgInx=0, processed]


fgMorphTree BB08, STMT00053 (after)
               [000169] --CXG+------              *  CALL      void   System.Threading.Monitor.Exit
               [000168] -----+------ arg0 in rcx  \--*  LCL_VAR   ref    V05 loc3         

fgMorphTree BB08, STMT00054 (before)
               [000170] ------------              *  NO_OP     void  

Morphing BB09 of 'FalseLeakRepro.Program:Run(System.String[]):this'

fgMorphTree BB09, STMT00052 (before)
               [000167] ------------              *  RETFILT   void  

Morphing BB10 of 'FalseLeakRepro.Program:Run(System.String[]):this'

fgMorphTree BB10, STMT00049 (before)
               [000157] ------------              *  NO_OP     void  

fgMorphTree BB10, STMT00050 (before)
               [000162] -A----------              *  ASG       int   
               [000161] D------N----              +--*  LCL_VAR   int    V04 loc2         
               [000160] ------------              \--*  ADD       int   
               [000158] ------------                 +--*  LCL_VAR   int    V04 loc2         
               [000159] ------------                 \--*  CNS_INT   int    1

Morphing BB11 of 'FalseLeakRepro.Program:Run(System.String[]):this'

fgMorphTree BB11, STMT00030 (before)
               [000098] -A----------              *  ASG       int   
               [000097] D------N----              +--*  LCL_VAR   int    V07 loc5         
               [000096] ------------              \--*  LT        int   
               [000094] ------------                 +--*  LCL_VAR   int    V04 loc2         
               [000095] ------------                 \--*  CNS_INT   int    10

fgMorphTree BB11, STMT00031 (before)
               [000102] ------------              *  JTRUE     void  
               [000101] ------------              \--*  NE        int   
               [000099] ------------                 +--*  LCL_VAR   int    V07 loc5         
               [000100] ------------                 \--*  CNS_INT   int    0

Morphing BB12 of 'FalseLeakRepro.Program:Run(System.String[]):this'

fgMorphTree BB12, STMT00055 (before)
               [000174] -AC-G-------              *  ASG       struct (copy)
               [000172] D------N----              +--*  LCL_VAR   struct<System.DateTime, 8> V34 tmp16        
               [000171] --C-G-------              \--*  CALL      struct System.DateTime.get_Now
Initializing arg info for 171.CALL:
ArgTable for 171.CALL after fgInitArgInfo:

Morphing args for 171.CALL:
argSlots=0, preallocatedArgCount=4, nextSlotNum=4, nextSlotByteOffset=32, outgoingArgSpaceSize=32
ArgTable for 171.CALL after fgMorphArgs:

MorphCopyBlock:
MorphBlock for dst tree, before:
               [000172] D----+-N----              *  LCL_VAR   struct<System.DateTime, 8> V34 tmp16        
MorphBlock after:
               [000172] D----+-N----              *  LCL_VAR   struct<System.DateTime, 8> V34 tmp16        
PrepareDst for [000172] have found a local var V34.
MorphBlock for src tree, before:
               [000171] --CXG+------              *  CALL      struct System.DateTime.get_Now
MorphBlock after:
               [000171] --CXG+------              *  CALL      struct System.DateTime.get_Now
block assignment to morph:
               [000174] -ACXG-------              *  ASG       struct (copy)
               [000172] D----+-N----              +--*  LCL_VAR   struct<System.DateTime, 8> V34 tmp16        
               [000171] --CXG+------              \--*  CALL      struct System.DateTime.get_Now
 src is a call this requires a CopyBlock.
MorphCopyBlock (after):
               [000174] -ACXG-------              *  ASG       struct (copy)
               [000172] D----+-N----              +--*  LCL_VAR   struct<System.DateTime, 8> V34 tmp16        
               [000171] --CXG+------              \--*  CALL      struct System.DateTime.get_Now

fgMorphTree BB12, STMT00056 (before)
               [000178] -A----------              *  ASG       struct (copy)
               [000176] D------N----              +--*  LCL_VAR   struct<System.DateTime, 8>(AX) V03 loc1         
               [000175] ------------              \--*  LCL_VAR   struct<System.DateTime, 8> V34 tmp16        
MorphCopyBlock:
MorphBlock for dst tree, before:
               [000176] D---G+-N----              *  LCL_VAR   struct<System.DateTime, 8>(AX) V03 loc1         
MorphBlock after:
               [000176] D---G+-N----              *  LCL_VAR   struct<System.DateTime, 8>(AX) V03 loc1         
PrepareDst for [000176] have found a local var V03.
MorphBlock for src tree, before:
               [000175] -----+------              *  LCL_VAR   struct<System.DateTime, 8> V34 tmp16        
MorphBlock after:
               [000175] -----+------              *  LCL_VAR   struct<System.DateTime, 8> V34 tmp16        
block assignment to morph:
               [000178] -A--G-------              *  ASG       struct (copy)
               [000176] D---G+-N----              +--*  LCL_VAR   struct<System.DateTime, 8>(AX) V03 loc1         
               [000175] -----+------              \--*  LCL_VAR   struct<System.DateTime, 8> V34 tmp16        
 with no promoted structs this requires a CopyBlock.
MorphCopyBlock (after):
               [000178] -A--G-------              *  ASG       struct (copy)
               [000176] D---G+-N----              +--*  LCL_VAR   struct<System.DateTime, 8>(AX) V03 loc1         
               [000175] -----+------              \--*  LCL_VAR   struct<System.DateTime, 8> V34 tmp16        

fgMorphTree BB12, STMT00057 (before)
               [000183] -AC-G-------              *  ASG       ref   
               [000182] D------N----              +--*  LCL_VAR   ref    V35 tmp17        
               [000181] --C-G-------              \--*  CALL      ref    System.DateTime.ToString
               [000180] ------------ this in rcx     \--*  LCL_VAR_ADDR byref  V03 loc1         
Initializing arg info for 181.CALL:
ArgTable for 181.CALL after fgInitArgInfo:
fgArgTabEntry[arg 0 180.LCL_VAR_ADDR byref (By ref), 1 reg: rcx, byteAlignment=8]

Morphing args for 181.CALL:
argSlots=1, preallocatedArgCount=4, nextSlotNum=4, nextSlotByteOffset=32, outgoingArgSpaceSize=32

Sorting the arguments:
Deferred argument ('rcx'):
               [000180] -----+------              *  LCL_VAR_ADDR byref  V03 loc1         
Replaced with placeholder node:
               [000443] ----------L-              *  ARGPLACE  byref 

Shuffled argument table:    rcx 
ArgTable for 181.CALL after fgMorphArgs:
fgArgTabEntry[arg 0 180.LCL_VAR_ADDR byref (By ref), 1 reg: rcx, byteAlignment=8, lateArgInx=0, processed]


fgMorphTree BB12, STMT00057 (after)
               [000183] -ACXG+------              *  ASG       ref   
               [000182] D----+-N----              +--*  LCL_VAR   ref    V35 tmp17        
               [000181] --CXG+------              \--*  CALL      ref    System.DateTime.ToString
               [000180] -----+------ this in rcx     \--*  LCL_VAR_ADDR byref  V03 loc1         

fgMorphTree BB12, STMT00058 (before)
               [000188] -AC-G-------              *  ASG       ref   
               [000187] D------N----              +--*  LCL_VAR   ref    V36 tmp18        
               [000186] --C-G-------              \--*  CALL      ref    System.String.Concat
               [000184] ------------ arg0            +--*  LCL_VAR   ref    V35 tmp17        
               [000185] ------------ arg1            \--*  CNS_STR   ref   <string constant>
Initializing arg info for 186.CALL:
ArgTable for 186.CALL after fgInitArgInfo:
fgArgTabEntry[arg 0 184.LCL_VAR ref (By ref), 1 reg: rcx, byteAlignment=8]
fgArgTabEntry[arg 1 185.CNS_STR ref (By ref), 1 reg: rdx, byteAlignment=8]

Morphing args for 186.CALL:
argSlots=2, preallocatedArgCount=4, nextSlotNum=4, nextSlotByteOffset=32, outgoingArgSpaceSize=32

Sorting the arguments:
Deferred argument ('rdx'):
               [000445] #---G+------              *  IND       ref   
               [000444] H----+------              \--*  CNS_INT(h) long   0xBE2A3200 "	 Waiting for list processing to complete..."
Replaced with placeholder node:
               [000446] ----------L-              *  ARGPLACE  ref   
Deferred argument ('rcx'):
               [000184] -----+------              *  LCL_VAR   ref    V35 tmp17        
Replaced with placeholder node:
               [000447] ----------L-              *  ARGPLACE  ref   

Shuffled argument table:    rdx rcx 
ArgTable for 186.CALL after fgMorphArgs:
fgArgTabEntry[arg 1 445.IND ref (By ref), 1 reg: rdx, byteAlignment=8, lateArgInx=0, processed]
fgArgTabEntry[arg 0 184.LCL_VAR ref (By ref), 1 reg: rcx, byteAlignment=8, lateArgInx=1, processed]


fgMorphTree BB12, STMT00058 (after)
               [000188] -ACXG+------              *  ASG       ref   
               [000187] D----+-N----              +--*  LCL_VAR   ref    V36 tmp18        
               [000186] --CXG+------              \--*  CALL      ref    System.String.Concat
               [000445] #---G+------ arg1 in rdx     +--*  IND       ref   
               [000444] H----+------                 |  \--*  CNS_INT(h) long   0xBE2A3200 "	 Waiting for list processing to complete..."
               [000184] -----+------ arg0 in rcx     \--*  LCL_VAR   ref    V35 tmp17        

fgMorphTree BB12, STMT00059 (before)
               [000190] --C-G-------              *  CALL      void   System.Console.WriteLine
               [000189] ------------ arg0         \--*  LCL_VAR   ref    V36 tmp18        
Initializing arg info for 190.CALL:
ArgTable for 190.CALL after fgInitArgInfo:
fgArgTabEntry[arg 0 189.LCL_VAR ref (By ref), 1 reg: rcx, byteAlignment=8]

Morphing args for 190.CALL:
argSlots=1, preallocatedArgCount=4, nextSlotNum=4, nextSlotByteOffset=32, outgoingArgSpaceSize=32

Sorting the arguments:
Deferred argument ('rcx'):
               [000189] -----+------              *  LCL_VAR   ref    V36 tmp18        
Replaced with placeholder node:
               [000448] ----------L-              *  ARGPLACE  ref   

Shuffled argument table:    rcx 
ArgTable for 190.CALL after fgMorphArgs:
fgArgTabEntry[arg 0 189.LCL_VAR ref (By ref), 1 reg: rcx, byteAlignment=8, lateArgInx=0, processed]


fgMorphTree BB12, STMT00059 (after)
               [000190] --CXG+------              *  CALL      void   System.Console.WriteLine
               [000189] -----+------ arg0 in rcx  \--*  LCL_VAR   ref    V36 tmp18        

fgMorphTree BB12, STMT00060 (before)
               [000191] ------------              *  NO_OP     void  

fgMorphTree BB12, STMT00061 (before)
               [000192] ------------              *  NOP       void  

Morphing BB13 of 'FalseLeakRepro.Program:Run(System.String[]):this'

fgMorphTree BB13, STMT00064 (before)
               [000197] ------------              *  NO_OP     void  

fgMorphTree BB13, STMT00065 (before)
               [000201] -A-XG-------              *  ASG       ref   
               [000200] D------N----              +--*  LCL_VAR   ref    V08 loc6         
               [000199] ---XG-------              \--*  FIELD     ref    _myList
               [000198] ------------                 \--*  LCL_VAR   ref    V00 this         

Final value of Compiler::fgMorphField after calling fgMorphSmpOp:
               [000199] ---XG-------              *  IND       ref   
               [000450] -----+------              \--*  ADD       byref 
               [000198] -----+------                 +--*  LCL_VAR   ref    V00 this         
               [000449] -----+------                 \--*  CNS_INT   long   8 field offset Fseq[_myList]

fgMorphTree BB13, STMT00065 (after)
               [000201] -A-XG+------              *  ASG       ref   
               [000200] D----+-N----              +--*  LCL_VAR   ref    V08 loc6         
               [000199] ---XG+------              \--*  IND       ref   
               [000450] -----+------                 \--*  ADD       byref 
               [000198] -----+------                    +--*  LCL_VAR   ref    V00 this         
               [000449] -----+------                    \--*  CNS_INT   long   8 field offset Fseq[_myList]

fgMorphTree BB13, STMT00066 (before)
               [000204] -A----------              *  ASG       int   
               [000203] D------N----              +--*  LCL_VAR   int   (AX) V09 loc7         
               [000202] ------------              \--*  CNS_INT   int    0

Morphing BB14 of 'FalseLeakRepro.Program:Run(System.String[]):this'

fgMorphTree BB14, STMT00067 (before)
               [000208] --C-G-------              *  CALL      void   System.Threading.Monitor.Enter
               [000205] ------------ arg0         +--*  LCL_VAR   ref    V08 loc6         
               [000207] ------------ arg1         \--*  LCL_VAR_ADDR byref  V09 loc7         
Initializing arg info for 208.CALL:
ArgTable for 208.CALL after fgInitArgInfo:
fgArgTabEntry[arg 0 205.LCL_VAR ref (By ref), 1 reg: rcx, byteAlignment=8]
fgArgTabEntry[arg 1 207.LCL_VAR_ADDR long (By ref), 1 reg: rdx, byteAlignment=8]

Morphing args for 208.CALL:
argSlots=2, preallocatedArgCount=4, nextSlotNum=4, nextSlotByteOffset=32, outgoingArgSpaceSize=32

Sorting the arguments:
Deferred argument ('rdx'):
               [000207] -----+------              *  LCL_VAR_ADDR long   V09 loc7         
Replaced with placeholder node:
               [000451] ----------L-              *  ARGPLACE  long  
Deferred argument ('rcx'):
               [000205] -----+------              *  LCL_VAR   ref    V08 loc6         
Replaced with placeholder node:
               [000452] ----------L-              *  ARGPLACE  ref   

Shuffled argument table:    rdx rcx 
ArgTable for 208.CALL after fgMorphArgs:
fgArgTabEntry[arg 1 207.LCL_VAR_ADDR long (By ref), 1 reg: rdx, byteAlignment=8, lateArgInx=0, processed]
fgArgTabEntry[arg 0 205.LCL_VAR ref (By ref), 1 reg: rcx, byteAlignment=8, lateArgInx=1, processed]


fgMorphTree BB14, STMT00067 (after)
               [000208] --CXG+------              *  CALL      void   System.Threading.Monitor.Enter
               [000207] -----+------ arg1 in rdx  +--*  LCL_VAR_ADDR long   V09 loc7         
               [000205] -----+------ arg0 in rcx  \--*  LCL_VAR   ref    V08 loc6         

fgMorphTree BB14, STMT00068 (before)
               [000209] ------------              *  NO_OP     void  

fgMorphTree BB14, STMT00069 (before)
               [000210] ------------              *  NO_OP     void  

fgMorphTree BB14, STMT00070 (before)
               [000219] -A-XG-------              *  ASG       int   
               [000218] D------N----              +--*  LCL_VAR   int    V10 loc8         
               [000217] ---XG-------              \--*  EQ        int   
               [000213] ---XG-------                 +--*  FIELD     ref    Head
               [000212] ---XG-------                 |  \--*  FIELD     ref    _myList
               [000211] ------------                 |     \--*  LCL_VAR   ref    V00 this         
               [000216] ---XG-------                 \--*  FIELD     ref    Tail
               [000215] ---XG-------                    \--*  FIELD     ref    _myList
               [000214] ------------                       \--*  LCL_VAR   ref    V00 this         
Querying runtime about current class of field FalseLeakRepro.List.Head (declared as FalseLeakRepro.Node)
Field's current class not available

Final value of Compiler::fgMorphField after calling fgMorphSmpOp:
               [000212] ---XG-------              *  IND       ref   
               [000456] -----+------              \--*  ADD       byref 
               [000211] -----+------                 +--*  LCL_VAR   ref    V00 this         
               [000455] -----+------                 \--*  CNS_INT   long   8 field offset Fseq[_myList]

Final value of Compiler::fgMorphField after calling fgMorphSmpOp:
               [000213] ---XG-------              *  IND       ref   
               [000454] ---XG+------              \--*  ADD       byref 
               [000212] ---XG+------                 +--*  IND       ref   
               [000456] -----+------                 |  \--*  ADD       byref 
               [000211] -----+------                 |     +--*  LCL_VAR   ref    V00 this         
               [000455] -----+------                 |     \--*  CNS_INT   long   8 field offset Fseq[_myList]
               [000453] -----+------                 \--*  CNS_INT   long   8 field offset Fseq[Head]

Final value of Compiler::fgMorphField after calling fgMorphSmpOp:
               [000215] ---XG-------              *  IND       ref   
               [000460] -----+------              \--*  ADD       byref 
               [000214] -----+------                 +--*  LCL_VAR   ref    V00 this         
               [000459] -----+------                 \--*  CNS_INT   long   8 field offset Fseq[_myList]

Final value of Compiler::fgMorphField after calling fgMorphSmpOp:
               [000216] ---XG-------              *  IND       ref   
               [000458] ---XG+------              \--*  ADD       byref 
               [000215] ---XG+------                 +--*  IND       ref   
               [000460] -----+------                 |  \--*  ADD       byref 
               [000214] -----+------                 |     +--*  LCL_VAR   ref    V00 this         
               [000459] -----+------                 |     \--*  CNS_INT   long   8 field offset Fseq[_myList]
               [000457] -----+------                 \--*  CNS_INT   long   16 field offset Fseq[Tail]

fgMorphTree BB14, STMT00070 (after)
               [000219] -A-XG+------              *  ASG       int   
               [000218] D----+-N----              +--*  LCL_VAR   int    V10 loc8         
               [000217] ---XG+------              \--*  EQ        int   
               [000213] ---XG+------                 +--*  IND       ref   
               [000454] ---XG+------                 |  \--*  ADD       byref 
               [000212] ---XG+------                 |     +--*  IND       ref   
               [000456] -----+------                 |     |  \--*  ADD       byref 
               [000211] -----+------                 |     |     +--*  LCL_VAR   ref    V00 this         
               [000455] -----+------                 |     |     \--*  CNS_INT   long   8 field offset Fseq[_myList]
               [000453] -----+------                 |     \--*  CNS_INT   long   8 field offset Fseq[Head]
               [000216] ---XG+------                 \--*  IND       ref   
               [000458] ---XG+------                    \--*  ADD       byref 
               [000215] ---XG+------                       +--*  IND       ref   
               [000460] -----+------                       |  \--*  ADD       byref 
               [000214] -----+------                       |     +--*  LCL_VAR   ref    V00 this         
               [000459] -----+------                       |     \--*  CNS_INT   long   8 field offset Fseq[_myList]
               [000457] -----+------                       \--*  CNS_INT   long   16 field offset Fseq[Tail]

fgMorphTree BB14, STMT00071 (before)
               [000223] ------------              *  JTRUE     void  
               [000222] ------------              \--*  EQ        int   
               [000220] ------------                 +--*  LCL_VAR   int    V10 loc8         
               [000221] ------------                 \--*  CNS_INT   int    0

Morphing BB15 of 'FalseLeakRepro.Program:Run(System.String[]):this'

fgMorphTree BB15, STMT00077 (before)
               [000230] ------------              *  NO_OP     void  

fgMorphTree BB15, STMT00078 (before)
               [000231] ------------              *  NOP       void  

Morphing BB16 of 'FalseLeakRepro.Program:Run(System.String[]):this'

fgMorphTree BB16, STMT00072 (before)
               [000224] ------------              *  NO_OP     void  

fgMorphTree BB16, STMT00073 (before)
               [000225] ------------              *  NOP       void  

Morphing BB17 of 'FalseLeakRepro.Program:Run(System.String[]):this'

Morphing BB18 of 'FalseLeakRepro.Program:Run(System.String[]):this'

Morphing BB19 of 'FalseLeakRepro.Program:Run(System.String[]):this'

Morphing BB20 of 'FalseLeakRepro.Program:Run(System.String[]):this'

Morphing BB21 of 'FalseLeakRepro.Program:Run(System.String[]):this'

fgMorphTree BB21, STMT00131 (before)
               [000366] ------------              *  JTRUE     void  
               [000365] ------------              \--*  EQ        int   
               [000363] ------------                 +--*  LCL_VAR   int   (AX) V09 loc7         
               [000364] ------------                 \--*  CNS_INT   int    0

fgMorphTree BB21, STMT00131 (after)
               [000366] ----G+------              *  JTRUE     void  
               [000365] J---G+-N----              \--*  EQ        int   
               [000461] ----G+------                 +--*  CAST      int <- bool <- int
               [000363] ----G+------                 |  \--*  LCL_VAR   int   (AX) V09 loc7         
               [000364] -----+------                 \--*  CNS_INT   int    0

Morphing BB22 of 'FalseLeakRepro.Program:Run(System.String[]):this'

fgMorphTree BB22, STMT00133 (before)
               [000369] --C-G-------              *  CALL      void   System.Threading.Monitor.Exit
               [000368] ------------ arg0         \--*  LCL_VAR   ref    V08 loc6         
Initializing arg info for 369.CALL:
ArgTable for 369.CALL after fgInitArgInfo:
fgArgTabEntry[arg 0 368.LCL_VAR ref (By ref), 1 reg: rcx, byteAlignment=8]

Morphing args for 369.CALL:
argSlots=1, preallocatedArgCount=4, nextSlotNum=4, nextSlotByteOffset=32, outgoingArgSpaceSize=32

Sorting the arguments:
Deferred argument ('rcx'):
               [000368] -----+------              *  LCL_VAR   ref    V08 loc6         
Replaced with placeholder node:
               [000462] ----------L-              *  ARGPLACE  ref   

Shuffled argument table:    rcx 
ArgTable for 369.CALL after fgMorphArgs:
fgArgTabEntry[arg 0 368.LCL_VAR ref (By ref), 1 reg: rcx, byteAlignment=8, lateArgInx=0, processed]


fgMorphTree BB22, STMT00133 (after)
               [000369] --CXG+------              *  CALL      void   System.Threading.Monitor.Exit
               [000368] -----+------ arg0 in rcx  \--*  LCL_VAR   ref    V08 loc6         

fgMorphTree BB22, STMT00134 (before)
               [000370] ------------              *  NO_OP     void  

Morphing BB23 of 'FalseLeakRepro.Program:Run(System.String[]):this'

fgMorphTree BB23, STMT00132 (before)
               [000367] ------------              *  RETFILT   void  

Morphing BB24 of 'FalseLeakRepro.Program:Run(System.String[]):this'

fgMorphTree BB24, STMT00074 (before)
               [000227] --C-G-------              *  CALL      void   System.Threading.Thread.Sleep
               [000226] ------------ arg0         \--*  CNS_INT   int    100
Initializing arg info for 227.CALL:
ArgTable for 227.CALL after fgInitArgInfo:
fgArgTabEntry[arg 0 226.CNS_INT int (By ref), 1 reg: rcx, byteAlignment=8]

Morphing args for 227.CALL:
argSlots=1, preallocatedArgCount=4, nextSlotNum=4, nextSlotByteOffset=32, outgoingArgSpaceSize=32

Sorting the arguments:
Deferred argument ('rcx'):
               [000226] -----+------              *  CNS_INT   int    100
Replaced with placeholder node:
               [000463] ----------L-              *  ARGPLACE  int   

Shuffled argument table:    rcx 
ArgTable for 227.CALL after fgMorphArgs:
fgArgTabEntry[arg 0 226.CNS_INT int (By ref), 1 reg: rcx, byteAlignment=8, lateArgInx=0, processed]


fgMorphTree BB24, STMT00074 (after)
               [000227] --CXG+------              *  CALL      void   System.Threading.Thread.Sleep
               [000226] -----+------ arg0 in rcx  \--*  CNS_INT   int    100

fgMorphTree BB24, STMT00075 (before)
               [000228] ------------              *  NO_OP     void  

fgMorphTree BB24, STMT00076 (before)
               [000229] ------------              *  NO_OP     void  

Morphing BB25 of 'FalseLeakRepro.Program:Run(System.String[]):this'

fgMorphTree BB25, STMT00062 (before)
               [000195] -A----------              *  ASG       int   
               [000194] D------N----              +--*  LCL_VAR   int    V11 loc9         
               [000193] ------------              \--*  CNS_INT   int    1

fgMorphTree BB25, STMT00063 (before)
               [000196] ------------              *  NOP       void  

Morphing BB26 of 'FalseLeakRepro.Program:Run(System.String[]):this'

fgMorphTree BB26, STMT00079 (before)
               [000235] -AC-G-------              *  ASG       struct (copy)
               [000233] D------N----              +--*  LCL_VAR   struct<System.DateTime, 8> V37 tmp19        
               [000232] --C-G-------              \--*  CALL      struct System.DateTime.get_Now
Initializing arg info for 232.CALL:
ArgTable for 232.CALL after fgInitArgInfo:

Morphing args for 232.CALL:
argSlots=0, preallocatedArgCount=4, nextSlotNum=4, nextSlotByteOffset=32, outgoingArgSpaceSize=32
ArgTable for 232.CALL after fgMorphArgs:

MorphCopyBlock:
MorphBlock for dst tree, before:
               [000233] D----+-N----              *  LCL_VAR   struct<System.DateTime, 8> V37 tmp19        
MorphBlock after:
               [000233] D----+-N----              *  LCL_VAR   struct<System.DateTime, 8> V37 tmp19        
PrepareDst for [000233] have found a local var V37.
MorphBlock for src tree, before:
               [000232] --CXG+------              *  CALL      struct System.DateTime.get_Now
MorphBlock after:
               [000232] --CXG+------              *  CALL      struct System.DateTime.get_Now
block assignment to morph:
               [000235] -ACXG-------              *  ASG       struct (copy)
               [000233] D----+-N----              +--*  LCL_VAR   struct<System.DateTime, 8> V37 tmp19        
               [000232] --CXG+------              \--*  CALL      struct System.DateTime.get_Now
 src is a call this requires a CopyBlock.
MorphCopyBlock (after):
               [000235] -ACXG-------              *  ASG       struct (copy)
               [000233] D----+-N----              +--*  LCL_VAR   struct<System.DateTime, 8> V37 tmp19        
               [000232] --CXG+------              \--*  CALL      struct System.DateTime.get_Now

fgMorphTree BB26, STMT00080 (before)
               [000239] -A----------              *  ASG       struct (copy)
               [000237] D------N----              +--*  LCL_VAR   struct<System.DateTime, 8>(AX) V03 loc1         
               [000236] ------------              \--*  LCL_VAR   struct<System.DateTime, 8> V37 tmp19        
MorphCopyBlock:
MorphBlock for dst tree, before:
               [000237] D---G+-N----              *  LCL_VAR   struct<System.DateTime, 8>(AX) V03 loc1         
MorphBlock after:
               [000237] D---G+-N----              *  LCL_VAR   struct<System.DateTime, 8>(AX) V03 loc1         
PrepareDst for [000237] have found a local var V03.
MorphBlock for src tree, before:
               [000236] -----+------              *  LCL_VAR   struct<System.DateTime, 8> V37 tmp19        
MorphBlock after:
               [000236] -----+------              *  LCL_VAR   struct<System.DateTime, 8> V37 tmp19        
block assignment to morph:
               [000239] -A--G-------              *  ASG       struct (copy)
               [000237] D---G+-N----              +--*  LCL_VAR   struct<System.DateTime, 8>(AX) V03 loc1         
               [000236] -----+------              \--*  LCL_VAR   struct<System.DateTime, 8> V37 tmp19        
 with no promoted structs this requires a CopyBlock.
MorphCopyBlock (after):
               [000239] -A--G-------              *  ASG       struct (copy)
               [000237] D---G+-N----              +--*  LCL_VAR   struct<System.DateTime, 8>(AX) V03 loc1         
               [000236] -----+------              \--*  LCL_VAR   struct<System.DateTime, 8> V37 tmp19        

fgMorphTree BB26, STMT00081 (before)
               [000244] -AC-G-------              *  ASG       ref   
               [000243] D------N----              +--*  LCL_VAR   ref    V38 tmp20        
               [000242] --C-G-------              \--*  CALL      ref    System.DateTime.ToString
               [000241] ------------ this in rcx     \--*  LCL_VAR_ADDR byref  V03 loc1         
Initializing arg info for 242.CALL:
ArgTable for 242.CALL after fgInitArgInfo:
fgArgTabEntry[arg 0 241.LCL_VAR_ADDR byref (By ref), 1 reg: rcx, byteAlignment=8]

Morphing args for 242.CALL:
argSlots=1, preallocatedArgCount=4, nextSlotNum=4, nextSlotByteOffset=32, outgoingArgSpaceSize=32

Sorting the arguments:
Deferred argument ('rcx'):
               [000241] -----+------              *  LCL_VAR_ADDR byref  V03 loc1         
Replaced with placeholder node:
               [000465] ----------L-              *  ARGPLACE  byref 

Shuffled argument table:    rcx 
ArgTable for 242.CALL after fgMorphArgs:
fgArgTabEntry[arg 0 241.LCL_VAR_ADDR byref (By ref), 1 reg: rcx, byteAlignment=8, lateArgInx=0, processed]


fgMorphTree BB26, STMT00081 (after)
               [000244] -ACXG+------              *  ASG       ref   
               [000243] D----+-N----              +--*  LCL_VAR   ref    V38 tmp20        
               [000242] --CXG+------              \--*  CALL      ref    System.DateTime.ToString
               [000241] -----+------ this in rcx     \--*  LCL_VAR_ADDR byref  V03 loc1         

fgMorphTree BB26, STMT00082 (before)
               [000249] -AC-G-------              *  ASG       ref   
               [000248] D------N----              +--*  LCL_VAR   ref    V39 tmp21        
               [000247] --C-G-------              \--*  CALL      ref    System.String.Concat
               [000245] ------------ arg0            +--*  LCL_VAR   ref    V38 tmp20        
               [000246] ------------ arg1            \--*  CNS_STR   ref   <string constant>
Initializing arg info for 247.CALL:
ArgTable for 247.CALL after fgInitArgInfo:
fgArgTabEntry[arg 0 245.LCL_VAR ref (By ref), 1 reg: rcx, byteAlignment=8]
fgArgTabEntry[arg 1 246.CNS_STR ref (By ref), 1 reg: rdx, byteAlignment=8]

Morphing args for 247.CALL:
argSlots=2, preallocatedArgCount=4, nextSlotNum=4, nextSlotByteOffset=32, outgoingArgSpaceSize=32

Sorting the arguments:
Deferred argument ('rdx'):
               [000467] #---G+------              *  IND       ref   
               [000466] H----+------              \--*  CNS_INT(h) long   0xBE2A3208 "	 Done.  Profiler is active, available options:"
Replaced with placeholder node:
               [000468] ----------L-              *  ARGPLACE  ref   
Deferred argument ('rcx'):
               [000245] -----+------              *  LCL_VAR   ref    V38 tmp20        
Replaced with placeholder node:
               [000469] ----------L-              *  ARGPLACE  ref   

Shuffled argument table:    rdx rcx 
ArgTable for 247.CALL after fgMorphArgs:
fgArgTabEntry[arg 1 467.IND ref (By ref), 1 reg: rdx, byteAlignment=8, lateArgInx=0, processed]
fgArgTabEntry[arg 0 245.LCL_VAR ref (By ref), 1 reg: rcx, byteAlignment=8, lateArgInx=1, processed]


fgMorphTree BB26, STMT00082 (after)
               [000249] -ACXG+------              *  ASG       ref   
               [000248] D----+-N----              +--*  LCL_VAR   ref    V39 tmp21        
               [000247] --CXG+------              \--*  CALL      ref    System.String.Concat
               [000467] #---G+------ arg1 in rdx     +--*  IND       ref   
               [000466] H----+------                 |  \--*  CNS_INT(h) long   0xBE2A3208 "	 Done.  Profiler is active, available options:"
               [000245] -----+------ arg0 in rcx     \--*  LCL_VAR   ref    V38 tmp20        

fgMorphTree BB26, STMT00083 (before)
               [000251] --C-G-------              *  CALL      void   System.Console.WriteLine
               [000250] ------------ arg0         \--*  LCL_VAR   ref    V39 tmp21        
Initializing arg info for 251.CALL:
ArgTable for 251.CALL after fgInitArgInfo:
fgArgTabEntry[arg 0 250.LCL_VAR ref (By ref), 1 reg: rcx, byteAlignment=8]

Morphing args for 251.CALL:
argSlots=1, preallocatedArgCount=4, nextSlotNum=4, nextSlotByteOffset=32, outgoingArgSpaceSize=32

Sorting the arguments:
Deferred argument ('rcx'):
               [000250] -----+------              *  LCL_VAR   ref    V39 tmp21        
Replaced with placeholder node:
               [000470] ----------L-              *  ARGPLACE  ref   

Shuffled argument table:    rcx 
ArgTable for 251.CALL after fgMorphArgs:
fgArgTabEntry[arg 0 250.LCL_VAR ref (By ref), 1 reg: rcx, byteAlignment=8, lateArgInx=0, processed]


fgMorphTree BB26, STMT00083 (after)
               [000251] --CXG+------              *  CALL      void   System.Console.WriteLine
               [000250] -----+------ arg0 in rcx  \--*  LCL_VAR   ref    V39 tmp21        

fgMorphTree BB26, STMT00084 (before)
               [000252] ------------              *  NO_OP     void  

fgMorphTree BB26, STMT00085 (before)
               [000254] --C-G-------              *  CALL      void   System.Console.WriteLine
               [000253] ------------ arg0         \--*  CNS_STR   ref   <string constant>
Initializing arg info for 254.CALL:
ArgTable for 254.CALL after fgInitArgInfo:
fgArgTabEntry[arg 0 253.CNS_STR ref (By ref), 1 reg: rcx, byteAlignment=8]

Morphing args for 254.CALL:
argSlots=1, preallocatedArgCount=4, nextSlotNum=4, nextSlotByteOffset=32, outgoingArgSpaceSize=32

Sorting the arguments:
Deferred argument ('rcx'):
               [000472] #---G+------              *  IND       ref   
               [000471] H----+------              \--*  CNS_INT(h) long   0xBE2A3210 "   Q = quit"
Replaced with placeholder node:
               [000473] ----------L-              *  ARGPLACE  ref   

Shuffled argument table:    rcx 
ArgTable for 254.CALL after fgMorphArgs:
fgArgTabEntry[arg 0 472.IND ref (By ref), 1 reg: rcx, byteAlignment=8, lateArgInx=0, processed]


fgMorphTree BB26, STMT00085 (after)
               [000254] --CXG+------              *  CALL      void   System.Console.WriteLine
               [000472] #---G+------ arg0 in rcx  \--*  IND       ref   
               [000471] H----+------                 \--*  CNS_INT(h) long   0xBE2A3210 "   Q = quit"

fgMorphTree BB26, STMT00086 (before)
               [000255] ------------              *  NO_OP     void  

fgMorphTree BB26, STMT00087 (before)
               [000257] --C-G-------              *  CALL      void   System.Console.WriteLine
               [000256] ------------ arg0         \--*  CNS_STR   ref   <string constant>
Initializing arg info for 257.CALL:
ArgTable for 257.CALL after fgInitArgInfo:
fgArgTabEntry[arg 0 256.CNS_STR ref (By ref), 1 reg: rcx, byteAlignment=8]

Morphing args for 257.CALL:
argSlots=1, preallocatedArgCount=4, nextSlotNum=4, nextSlotByteOffset=32, outgoingArgSpaceSize=32

Sorting the arguments:
Deferred argument ('rcx'):
               [000475] #---G+------              *  IND       ref   
               [000474] H----+------              \--*  CNS_INT(h) long   0xBE2A3218 "   H = heap snapshot"
Replaced with placeholder node:
               [000476] ----------L-              *  ARGPLACE  ref   

Shuffled argument table:    rcx 
ArgTable for 257.CALL after fgMorphArgs:
fgArgTabEntry[arg 0 475.IND ref (By ref), 1 reg: rcx, byteAlignment=8, lateArgInx=0, processed]


fgMorphTree BB26, STMT00087 (after)
               [000257] --CXG+------              *  CALL      void   System.Console.WriteLine
               [000475] #---G+------ arg0 in rcx  \--*  IND       ref   
               [000474] H----+------                 \--*  CNS_INT(h) long   0xBE2A3218 "   H = heap snapshot"

fgMorphTree BB26, STMT00088 (before)
               [000258] ------------              *  NO_OP     void  

fgMorphTree BB26, STMT00089 (before)
               [000260] --C-G-------              *  CALL      void   System.Console.WriteLine
               [000259] ------------ arg0         \--*  CNS_STR   ref   <string constant>
Initializing arg info for 260.CALL:
ArgTable for 260.CALL after fgInitArgInfo:
fgArgTabEntry[arg 0 259.CNS_STR ref (By ref), 1 reg: rcx, byteAlignment=8]

Morphing args for 260.CALL:
argSlots=1, preallocatedArgCount=4, nextSlotNum=4, nextSlotByteOffset=32, outgoingArgSpaceSize=32

Sorting the arguments:
Deferred argument ('rcx'):
               [000478] #---G+------              *  IND       ref   
               [000477] H----+------              \--*  CNS_INT(h) long   0xBE2A3220 "   G = GC (max gen)"
Replaced with placeholder node:
               [000479] ----------L-              *  ARGPLACE  ref   

Shuffled argument table:    rcx 
ArgTable for 260.CALL after fgMorphArgs:
fgArgTabEntry[arg 0 478.IND ref (By ref), 1 reg: rcx, byteAlignment=8, lateArgInx=0, processed]


fgMorphTree BB26, STMT00089 (after)
               [000260] --CXG+------              *  CALL      void   System.Console.WriteLine
               [000478] #---G+------ arg0 in rcx  \--*  IND       ref   
               [000477] H----+------                 \--*  CNS_INT(h) long   0xBE2A3220 "   G = GC (max gen)"

fgMorphTree BB26, STMT00090 (before)
               [000261] ------------              *  NO_OP     void  

fgMorphTree BB26, STMT00091 (before)
               [000263] --C-G-------              *  CALL      void   System.Console.WriteLine
               [000262] ------------ arg0         \--*  CNS_STR   ref   <string constant>
Initializing arg info for 263.CALL:
ArgTable for 263.CALL after fgInitArgInfo:
fgArgTabEntry[arg 0 262.CNS_STR ref (By ref), 1 reg: rcx, byteAlignment=8]

Morphing args for 263.CALL:
argSlots=1, preallocatedArgCount=4, nextSlotNum=4, nextSlotByteOffset=32, outgoingArgSpaceSize=32

Sorting the arguments:
Deferred argument ('rcx'):
               [000481] #---G+------              *  IND       ref   
               [000480] H----+------              \--*  CNS_INT(h) long   0xBE2A3228 "   R = clear the running flag to stop the consumer thread"
Replaced with placeholder node:
               [000482] ----------L-              *  ARGPLACE  ref   

Shuffled argument table:    rcx 
ArgTable for 263.CALL after fgMorphArgs:
fgArgTabEntry[arg 0 481.IND ref (By ref), 1 reg: rcx, byteAlignment=8, lateArgInx=0, processed]


fgMorphTree BB26, STMT00091 (after)
               [000263] --CXG+------              *  CALL      void   System.Console.WriteLine
               [000481] #---G+------ arg0 in rcx  \--*  IND       ref   
               [000480] H----+------                 \--*  CNS_INT(h) long   0xBE2A3228 "   R = clear the running flag to stop the consumer thread"

fgMorphTree BB26, STMT00092 (before)
               [000264] ------------              *  NO_OP     void  

fgMorphTree BB26, STMT00093 (before)
               [000265] ------------              *  NOP       void  

Morphing BB27 of 'FalseLeakRepro.Program:Run(System.String[]):this'

fgMorphTree BB27, STMT00096 (before)
               [000270] ------------              *  NO_OP     void  

fgMorphTree BB27, STMT00097 (before)
               [000271] S-C-G-------              *  CALL      void   System.Console.ReadKey
               [000273] ------------ arg0         \--*  LCL_VAR_ADDR byref  V40 tmp22        
Initializing arg info for 271.CALL:
ArgTable for 271.CALL after fgInitArgInfo:
fgArgTabEntry[arg 0 273.LCL_VAR_ADDR long (By ref), 1 reg: rcx, byteAlignment=8]

Morphing args for 271.CALL:
argSlots=1, preallocatedArgCount=4, nextSlotNum=4, nextSlotByteOffset=32, outgoingArgSpaceSize=32

Sorting the arguments:
Deferred argument ('rcx'):
               [000273] -----+------              *  LCL_VAR_ADDR long   V40 tmp22        
Replaced with placeholder node:
               [000483] ----------L-              *  ARGPLACE  long  

Shuffled argument table:    rcx 
ArgTable for 271.CALL after fgMorphArgs:
fgArgTabEntry[arg 0 273.LCL_VAR_ADDR long (By ref), 1 reg: rcx, byteAlignment=8, lateArgInx=0, processed]


fgMorphTree BB27, STMT00097 (after)
               [000271] S-CXG+------              *  CALL      void   System.Console.ReadKey
               [000273] -----+------ arg0 in rcx  \--*  LCL_VAR_ADDR long   V40 tmp22        

fgMorphTree BB27, STMT00098 (before)
               [000277] -A----------              *  ASG       struct (copy)
               [000275] D------N----              +--*  LCL_VAR   struct<System.ConsoleKeyInfo, 12>(AX) V12 loc10        
               [000274] ------------              \--*  LCL_VAR   struct<System.ConsoleKeyInfo, 12>(AX) V40 tmp22        
MorphCopyBlock:
MorphBlock for dst tree, before:
               [000275] D---G+-N----              *  LCL_VAR   struct<System.ConsoleKeyInfo, 12>(AX) V12 loc10        
MorphBlock after:
               [000275] D---G+-N----              *  LCL_VAR   struct<System.ConsoleKeyInfo, 12>(AX) V12 loc10        
PrepareDst for [000275] have found a local var V12.
MorphBlock for src tree, before:
               [000274] ----G+------              *  LCL_VAR   struct<System.ConsoleKeyInfo, 12>(AX) V40 tmp22        
MorphBlock after:
               [000274] ----G+------              *  LCL_VAR   struct<System.ConsoleKeyInfo, 12>(AX) V40 tmp22        
block assignment to morph:
               [000277] -A--G-------              *  ASG       struct (copy)
               [000275] D---G+-N----              +--*  LCL_VAR   struct<System.ConsoleKeyInfo, 12>(AX) V12 loc10        
               [000274] ----G+------              \--*  LCL_VAR   struct<System.ConsoleKeyInfo, 12>(AX) V40 tmp22        
 with no promoted structs this requires a CopyBlock.
MorphCopyBlock (after):
               [000277] -A--G-------              *  ASG       struct (copy)
               [000275] D---G+-N----              +--*  LCL_VAR   struct<System.ConsoleKeyInfo, 12>(AX) V12 loc10        
               [000274] ----G+------              \--*  LCL_VAR   struct<System.ConsoleKeyInfo, 12>(AX) V40 tmp22        

fgMorphTree BB27, STMT00099 (before)
               [000282] -AC-G-------              *  ASG       int   
               [000281] D------N----              +--*  LCL_VAR   int    V41 tmp23        
               [000280] --C-G-------              \--*  CALL      int    System.ConsoleKeyInfo.get_Key
               [000279] ------------ this in rcx     \--*  LCL_VAR_ADDR byref  V12 loc10        
Initializing arg info for 280.CALL:
ArgTable for 280.CALL after fgInitArgInfo:
fgArgTabEntry[arg 0 279.LCL_VAR_ADDR byref (By ref), 1 reg: rcx, byteAlignment=8]

Morphing args for 280.CALL:
argSlots=1, preallocatedArgCount=4, nextSlotNum=4, nextSlotByteOffset=32, outgoingArgSpaceSize=32

Sorting the arguments:
Deferred argument ('rcx'):
               [000279] -----+------              *  LCL_VAR_ADDR byref  V12 loc10        
Replaced with placeholder node:
               [000484] ----------L-              *  ARGPLACE  byref 

Shuffled argument table:    rcx 
ArgTable for 280.CALL after fgMorphArgs:
fgArgTabEntry[arg 0 279.LCL_VAR_ADDR byref (By ref), 1 reg: rcx, byteAlignment=8, lateArgInx=0, processed]


fgMorphTree BB27, STMT00099 (after)
               [000282] -ACXG+------              *  ASG       int   
               [000281] D----+-N----              +--*  LCL_VAR   int    V41 tmp23        
               [000280] --CXG+------              \--*  CALL      int    System.ConsoleKeyInfo.get_Key
               [000279] -----+------ this in rcx     \--*  LCL_VAR_ADDR byref  V12 loc10        

fgMorphTree BB27, STMT00100 (before)
               [000287] -A----------              *  ASG       int   
               [000286] D------N----              +--*  LCL_VAR   int    V13 loc11        
               [000285] ------------              \--*  EQ        int   
               [000283] ------------                 +--*  LCL_VAR   int    V41 tmp23        
               [000284] ------------                 \--*  CNS_INT   int    71

fgMorphTree BB27, STMT00101 (before)
               [000291] ------------              *  JTRUE     void  
               [000290] ------------              \--*  EQ        int   
               [000288] ------------                 +--*  LCL_VAR   int    V13 loc11        
               [000289] ------------                 \--*  CNS_INT   int    0

Morphing BB28 of 'FalseLeakRepro.Program:Run(System.String[]):this'

fgMorphTree BB28, STMT00125 (before)
               [000354] ------------              *  NO_OP     void  

fgMorphTree BB28, STMT00126 (before)
               [000357] -AC-G-------              *  ASG       int   
               [000356] D------N----              +--*  LCL_VAR   int    V45 tmp27        
               [000355] --C-G-------              \--*  CALL      int    System.GC.get_MaxGeneration
Initializing arg info for 355.CALL:
ArgTable for 355.CALL after fgInitArgInfo:

Morphing args for 355.CALL:
argSlots=0, preallocatedArgCount=4, nextSlotNum=4, nextSlotByteOffset=32, outgoingArgSpaceSize=32
ArgTable for 355.CALL after fgMorphArgs:


fgMorphTree BB28, STMT00127 (before)
               [000359] --C-G-------              *  CALL      void   System.GC.Collect
               [000358] ------------ arg0         \--*  LCL_VAR   int    V45 tmp27        
Initializing arg info for 359.CALL:
ArgTable for 359.CALL after fgInitArgInfo:
fgArgTabEntry[arg 0 358.LCL_VAR int (By ref), 1 reg: rcx, byteAlignment=8]

Morphing args for 359.CALL:
argSlots=1, preallocatedArgCount=4, nextSlotNum=4, nextSlotByteOffset=32, outgoingArgSpaceSize=32

Sorting the arguments:
Deferred argument ('rcx'):
               [000358] -----+------              *  LCL_VAR   int    V45 tmp27        
Replaced with placeholder node:
               [000485] ----------L-              *  ARGPLACE  int   

Shuffled argument table:    rcx 
ArgTable for 359.CALL after fgMorphArgs:
fgArgTabEntry[arg 0 358.LCL_VAR int (By ref), 1 reg: rcx, byteAlignment=8, lateArgInx=0, processed]


fgMorphTree BB28, STMT00127 (after)
               [000359] --CXG+------              *  CALL      void   System.GC.Collect
               [000358] -----+------ arg0 in rcx  \--*  LCL_VAR   int    V45 tmp27        

fgMorphTree BB28, STMT00128 (before)
               [000360] ------------              *  NO_OP     void  

fgMorphTree BB28, STMT00129 (before)
               [000361] ------------              *  NO_OP     void  

fgMorphTree BB28, STMT00130 (before)
               [000362] ------------              *  NOP       void  

Morphing BB29 of 'FalseLeakRepro.Program:Run(System.String[]):this'

fgMorphTree BB29, STMT00102 (before)
               [000296] -AC-G-------              *  ASG       int   
               [000295] D------N----              +--*  LCL_VAR   int    V42 tmp24        
               [000294] --C-G-------              \--*  CALL      int    System.ConsoleKeyInfo.get_Key
               [000293] ------------ this in rcx     \--*  LCL_VAR_ADDR byref  V12 loc10        
Initializing arg info for 294.CALL:
ArgTable for 294.CALL after fgInitArgInfo:
fgArgTabEntry[arg 0 293.LCL_VAR_ADDR byref (By ref), 1 reg: rcx, byteAlignment=8]

Morphing args for 294.CALL:
argSlots=1, preallocatedArgCount=4, nextSlotNum=4, nextSlotByteOffset=32, outgoingArgSpaceSize=32

Sorting the arguments:
Deferred argument ('rcx'):
               [000293] -----+------              *  LCL_VAR_ADDR byref  V12 loc10        
Replaced with placeholder node:
               [000486] ----------L-              *  ARGPLACE  byref 

Shuffled argument table:    rcx 
ArgTable for 294.CALL after fgMorphArgs:
fgArgTabEntry[arg 0 293.LCL_VAR_ADDR byref (By ref), 1 reg: rcx, byteAlignment=8, lateArgInx=0, processed]


fgMorphTree BB29, STMT00102 (after)
               [000296] -ACXG+------              *  ASG       int   
               [000295] D----+-N----              +--*  LCL_VAR   int    V42 tmp24        
               [000294] --CXG+------              \--*  CALL      int    System.ConsoleKeyInfo.get_Key
               [000293] -----+------ this in rcx     \--*  LCL_VAR_ADDR byref  V12 loc10        

fgMorphTree BB29, STMT00103 (before)
               [000301] -A----------              *  ASG       int   
               [000300] D------N----              +--*  LCL_VAR   int    V14 loc12        
               [000299] ------------              \--*  EQ        int   
               [000297] ------------                 +--*  LCL_VAR   int    V42 tmp24        
               [000298] ------------                 \--*  CNS_INT   int    72

fgMorphTree BB29, STMT00104 (before)
               [000305] ------------              *  JTRUE     void  
               [000304] ------------              \--*  EQ        int   
               [000302] ------------                 +--*  LCL_VAR   int    V14 loc12        
               [000303] ------------                 \--*  CNS_INT   int    0

Morphing BB30 of 'FalseLeakRepro.Program:Run(System.String[]):this'

fgMorphTree BB30, STMT00120 (before)
               [000349] ------------              *  NO_OP     void  

fgMorphTree BB30, STMT00121 (before)
               [000350] --C-G-------              *  CALL      void   System.Diagnostics.Debugger.Break
Initializing arg info for 350.CALL:
ArgTable for 350.CALL after fgInitArgInfo:

Morphing args for 350.CALL:
argSlots=0, preallocatedArgCount=4, nextSlotNum=4, nextSlotByteOffset=32, outgoingArgSpaceSize=32
ArgTable for 350.CALL after fgMorphArgs:


fgMorphTree BB30, STMT00122 (before)
               [000351] ------------              *  NO_OP     void  

fgMorphTree BB30, STMT00123 (before)
               [000352] ------------              *  NO_OP     void  

fgMorphTree BB30, STMT00124 (before)
               [000353] ------------              *  NOP       void  

Morphing BB31 of 'FalseLeakRepro.Program:Run(System.String[]):this'

fgMorphTree BB31, STMT00105 (before)
               [000310] -AC-G-------              *  ASG       int   
               [000309] D------N----              +--*  LCL_VAR   int    V43 tmp25        
               [000308] --C-G-------              \--*  CALL      int    System.ConsoleKeyInfo.get_Key
               [000307] ------------ this in rcx     \--*  LCL_VAR_ADDR byref  V12 loc10        
Initializing arg info for 308.CALL:
ArgTable for 308.CALL after fgInitArgInfo:
fgArgTabEntry[arg 0 307.LCL_VAR_ADDR byref (By ref), 1 reg: rcx, byteAlignment=8]

Morphing args for 308.CALL:
argSlots=1, preallocatedArgCount=4, nextSlotNum=4, nextSlotByteOffset=32, outgoingArgSpaceSize=32

Sorting the arguments:
Deferred argument ('rcx'):
               [000307] -----+------              *  LCL_VAR_ADDR byref  V12 loc10        
Replaced with placeholder node:
               [000487] ----------L-              *  ARGPLACE  byref 

Shuffled argument table:    rcx 
ArgTable for 308.CALL after fgMorphArgs:
fgArgTabEntry[arg 0 307.LCL_VAR_ADDR byref (By ref), 1 reg: rcx, byteAlignment=8, lateArgInx=0, processed]


fgMorphTree BB31, STMT00105 (after)
               [000310] -ACXG+------              *  ASG       int   
               [000309] D----+-N----              +--*  LCL_VAR   int    V43 tmp25        
               [000308] --CXG+------              \--*  CALL      int    System.ConsoleKeyInfo.get_Key
               [000307] -----+------ this in rcx     \--*  LCL_VAR_ADDR byref  V12 loc10        

fgMorphTree BB31, STMT00106 (before)
               [000315] -A----------              *  ASG       int   
               [000314] D------N----              +--*  LCL_VAR   int    V15 loc13        
               [000313] ------------              \--*  EQ        int   
               [000311] ------------                 +--*  LCL_VAR   int    V43 tmp25        
               [000312] ------------                 \--*  CNS_INT   int    82

fgMorphTree BB31, STMT00107 (before)
               [000319] ------------              *  JTRUE     void  
               [000318] ------------              \--*  EQ        int   
               [000316] ------------                 +--*  LCL_VAR   int    V15 loc13        
               [000317] ------------                 \--*  CNS_INT   int    0

Morphing BB32 of 'FalseLeakRepro.Program:Run(System.String[]):this'

fgMorphTree BB32, STMT00116 (before)
               [000342] ------------              *  NO_OP     void  

fgMorphTree BB32, STMT00117 (before)
               [000346] -A-XG-------              *  ASG       bool  
               [000345] ---XG--N----              +--*  FIELD     bool   _running
               [000343] ------------              |  \--*  LCL_VAR   ref    V00 this         
               [000344] ------------              \--*  CNS_INT   int    0

Final value of Compiler::fgMorphField after calling fgMorphSmpOp:
               [000345] ---XG--N----              *  IND       bool  
               [000489] -----+------              \--*  ADD       byref 
               [000343] -----+------                 +--*  LCL_VAR   ref    V00 this         
               [000488] -----+------                 \--*  CNS_INT   long   16 field offset Fseq[_running]

fgMorphTree BB32, STMT00117 (after)
               [000346] -A-XG+------              *  ASG       bool  
               [000345] ---XG+-N----              +--*  IND       bool  
               [000489] -----+------              |  \--*  ADD       byref 
               [000343] -----+------              |     +--*  LCL_VAR   ref    V00 this         
               [000488] -----+------              |     \--*  CNS_INT   long   16 field offset Fseq[_running]
               [000344] -----+------              \--*  CNS_INT   int    0

fgMorphTree BB32, STMT00118 (before)
               [000347] ------------              *  NO_OP     void  

fgMorphTree BB32, STMT00119 (before)
               [000348] ------------              *  NOP       void  

Morphing BB33 of 'FalseLeakRepro.Program:Run(System.String[]):this'

fgMorphTree BB33, STMT00108 (before)
               [000324] -AC-G-------              *  ASG       int   
               [000323] D------N----              +--*  LCL_VAR   int    V44 tmp26        
               [000322] --C-G-------              \--*  CALL      int    System.ConsoleKeyInfo.get_Key
               [000321] ------------ this in rcx     \--*  LCL_VAR_ADDR byref  V12 loc10        
Initializing arg info for 322.CALL:
ArgTable for 322.CALL after fgInitArgInfo:
fgArgTabEntry[arg 0 321.LCL_VAR_ADDR byref (By ref), 1 reg: rcx, byteAlignment=8]

Morphing args for 322.CALL:
argSlots=1, preallocatedArgCount=4, nextSlotNum=4, nextSlotByteOffset=32, outgoingArgSpaceSize=32

Sorting the arguments:
Deferred argument ('rcx'):
               [000321] -----+------              *  LCL_VAR_ADDR byref  V12 loc10        
Replaced with placeholder node:
               [000490] ----------L-              *  ARGPLACE  byref 

Shuffled argument table:    rcx 
ArgTable for 322.CALL after fgMorphArgs:
fgArgTabEntry[arg 0 321.LCL_VAR_ADDR byref (By ref), 1 reg: rcx, byteAlignment=8, lateArgInx=0, processed]


fgMorphTree BB33, STMT00108 (after)
               [000324] -ACXG+------              *  ASG       int   
               [000323] D----+-N----              +--*  LCL_VAR   int    V44 tmp26        
               [000322] --CXG+------              \--*  CALL      int    System.ConsoleKeyInfo.get_Key
               [000321] -----+------ this in rcx     \--*  LCL_VAR_ADDR byref  V12 loc10        

fgMorphTree BB33, STMT00109 (before)
               [000329] -A----------              *  ASG       int   
               [000328] D------N----              +--*  LCL_VAR   int    V16 loc14        
               [000327] ------------              \--*  EQ        int   
               [000325] ------------                 +--*  LCL_VAR   int    V44 tmp26        
               [000326] ------------                 \--*  CNS_INT   int    81

fgMorphTree BB33, STMT00110 (before)
               [000333] ------------              *  JTRUE     void  
               [000332] ------------              \--*  EQ        int   
               [000330] ------------                 +--*  LCL_VAR   int    V16 loc14        
               [000331] ------------                 \--*  CNS_INT   int    0

Morphing BB34 of 'FalseLeakRepro.Program:Run(System.String[]):this'

fgMorphTree BB34, STMT00112 (before)
               [000335] ------------              *  NO_OP     void  

fgMorphTree BB34, STMT00113 (before)
               [000336] ------------              *  NOP       void  

Morphing BB35 of 'FalseLeakRepro.Program:Run(System.String[]):this'

fgMorphTree BB35, STMT00111 (before)
               [000334] ------------              *  NO_OP     void  

Morphing BB36 of 'FalseLeakRepro.Program:Run(System.String[]):this'

fgMorphTree BB36, STMT00094 (before)
               [000268] -A----------              *  ASG       int   
               [000267] D------N----              +--*  LCL_VAR   int    V17 loc15        
               [000266] ------------              \--*  CNS_INT   int    1

fgMorphTree BB36, STMT00095 (before)
               [000269] ------------              *  NOP       void  

Morphing BB37 of 'FalseLeakRepro.Program:Run(System.String[]):this'

fgMorphTree BB37, STMT00114 (before)
               [000340] -A-XG-------              *  ASG       bool  
               [000339] ---XG--N----              +--*  FIELD     bool   _running
               [000337] ------------              |  \--*  LCL_VAR   ref    V00 this         
               [000338] ------------              \--*  CNS_INT   int    0

Final value of Compiler::fgMorphField after calling fgMorphSmpOp:
               [000339] ---XG--N----              *  IND       bool  
               [000493] -----+------              \--*  ADD       byref 
               [000337] -----+------                 +--*  LCL_VAR   ref    V00 this         
               [000492] -----+------                 \--*  CNS_INT   long   16 field offset Fseq[_running]

fgMorphTree BB37, STMT00114 (after)
               [000340] -A-XG+------              *  ASG       bool  
               [000339] ---XG+-N----              +--*  IND       bool  
               [000493] -----+------              |  \--*  ADD       byref 
               [000337] -----+------              |     +--*  LCL_VAR   ref    V00 this         
               [000492] -----+------              |     \--*  CNS_INT   long   16 field offset Fseq[_running]
               [000338] -----+------              \--*  CNS_INT   int    0

fgMorphTree BB37, STMT00115 (before)
               [000341] ------------              *  RETURN    void  
Method has EH, marking method as fully interruptible

Expanding top-level qmark in BB01 (before)

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [???..???)                                     i internal hascall 
-----------------------------------------------------------------------------------------------------------------------------------------

------------ BB01 [???..???), preds={} succs={BB02}

***** BB01
STMT00000 (IL   ???...  ???)
               [000000] -----+------              *  NOP       void  

***** BB01
STMT00135 (IL   ???...  ???)
               [000378] --C-G+------              *  QMARK     void  
               [000374] J----+-N----    if        +--*  EQ        int   
               [000372] n----+------              |  +--*  IND       int   
               [000371] H----+------              |  |  \--*  CNS_INT(h) long   0x7ffdb6f1d838 global ptr
               [000373] -----+------              |  \--*  CNS_INT   int    0
               [000377] --C-G+?-----    if        \--*  COLON     void  
               [000375] --C-G+?----- else            +--*  CALL help void   HELPER.CORINFO_HELP_DBG_IS_JUST_MY_CODE
               [000376] -----+?----- then            \--*  NOP       void  

-------------------------------------------------------------------------------------------------------------------
New Basic Block BB38 [0037] created.
BB02 previous predecessor was BB01, now is BB38
Setting edge weights for BB01 -> BB38 to [0 .. 3.402823e+38]
New Basic Block BB39 [0038] created.
New Basic Block BB40 [0039] created.
Setting edge weights for BB01 -> BB39 to [0 .. 3.402823e+38]
Setting edge weights for BB39 -> BB40 to [0 .. 3.402823e+38]
Setting edge weights for BB40 -> BB38 to [0 .. 3.402823e+38]
Setting edge weights for BB39 -> BB38 to [0 .. 3.402823e+38]

removing useless STMT00135 (IL   ???...  ???)
               [000378] --C-G+------              *  QMARK     void  
               [000374] J----+-N----    if        +--*  EQ        int   
               [000372] n----+------              |  +--*  IND       int   
               [000371] H----+------              |  |  \--*  CNS_INT(h) long   0x7ffdb6f1d838 global ptr
               [000373] -----+------              |  \--*  CNS_INT   int    0
               [000377] --C-G+?-----    if        \--*  COLON     void  
               [000375] --C-G+?----- else            +--*  CALL help void   HELPER.CORINFO_HELP_DBG_IS_JUST_MY_CODE
               [000376] -----+?----- then            \--*  NOP       void  
 from BB01

Expanding top-level qmark in BB01 (after)

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [???..???)                                     i internal hascall 
BB39 [0038]  1       BB01                  1       [???..???)-> BB38 ( cond )                     internal 
BB40 [0039]  1       BB39                  0.50    [???..???)                                     internal 
BB38 [0037]  2       BB39,BB40             1       [???..???)                                     i internal hascall 
-----------------------------------------------------------------------------------------------------------------------------------------

------------ BB01 [???..???), preds={} succs={BB39}

***** BB01
STMT00000 (IL   ???...  ???)
               [000000] -----+------              *  NOP       void  

------------ BB39 [???..???) -> BB38 (cond), preds={BB01} succs={BB40,BB38}

***** BB39
STMT00136 (IL   ???...  ???)
               [000494] ------------              *  JTRUE     void  
               [000374] J----+-N----              \--*  EQ        int   
               [000372] n----+------                 +--*  IND       int   
               [000371] H----+------                 |  \--*  CNS_INT(h) long   0x7ffdb6f1d838 global ptr
               [000373] -----+------                 \--*  CNS_INT   int    0

------------ BB40 [???..???), preds={BB39} succs={BB38}

***** BB40
STMT00137 (IL   ???...  ???)
               [000375] --C-G+?-----              *  CALL help void   HELPER.CORINFO_HELP_DBG_IS_JUST_MY_CODE

------------ BB38 [???..???), preds={BB39,BB40} succs={BB02}

-------------------------------------------------------------------------------------------------------------------

*************** Before renumbering the basic blocks

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [???..???)                                     i internal hascall 
BB39 [0038]  1       BB01                  1       [???..???)-> BB38 ( cond )                     internal 
BB40 [0039]  1       BB39                  0.50    [???..???)                                     internal 
BB38 [0037]  2       BB39,BB40             1       [???..???)                                     i internal hascall 
BB02 [0001]  1       BB38                  1       [000..078)-> BB11 (always)                     i hascall gcsafe newobj 
BB03 [0002]  1       BB11                  1       [078..083)                                     i bwd bwd-target 
BB04 [0003]  1  0    BB03                  1       [083..0D5)-> BB05 (always) T0      try { }     keep i try hascall gcsafe newobj bwd 
BB05 [0031]  1       BB04                  1       [???..???)-> BB07 (callf )                     i internal 
BB06 [0032]  1       BB09                  1       [???..???)-> BB10 (ALWAYS)                     i internal KEEP 
BB07 [0004]  2     0 BB05                  1       [0D5..0D9)-> BB09 ( cond )    H0   finally {   keep i bwd 
BB08 [0005]  1     0 BB07                  1       [0D9..0E0)                    H0               i hascall bwd 
BB09 [0006]  2     0 BB07,BB08             1       [0E0..0E1)        (finret)    H0   }           i bwd 
BB10 [0007]  1       BB06                  1       [0E1..0E6)                                     i bwd 
BB11 [0008]  2       BB02,BB10             1       [0E6..0F1)-> BB03 ( cond )                     i bwd 
BB12 [0009]  1       BB11                  1       [0F1..110)-> BB25 (always)                     i hascall gcsafe 
BB13 [0010]  1       BB25                  1       [110..11C)                                     i bwd bwd-target 
BB14 [0011]  1  1    BB13                  1       [11C..145)-> BB16 ( cond ) T1      try {       keep i try hascall gcsafe bwd 
BB15 [0012]  1  1    BB14                  1       [145..148)-> BB17 (always) T1                  i bwd 
BB16 [0013]  1  1    BB14                  1       [148..14B)-> BB19 (always) T1      }           i bwd 
BB17 [0035]  1       BB15                  1       [???..???)-> BB21 (callf )                     i internal 
BB18 [0036]  1       BB23                  1       [???..???)-> BB26 (ALWAYS)                     i internal KEEP 
BB19 [0033]  1       BB16                  1       [???..???)-> BB21 (callf )                     i internal 
BB20 [0034]  1       BB23                  1       [???..???)-> BB24 (ALWAYS)                     i internal KEEP 
BB21 [0014]  3     1 BB17,BB19             1       [14B..14F)-> BB23 ( cond )    H1   finally {   keep i bwd 
BB22 [0015]  1     1 BB21                  1       [14F..157)                    H1               i hascall bwd 
BB23 [0016]  2     1 BB21,BB22             1       [157..158)        (finret)    H1   }           i bwd 
BB24 [0017]  1       BB20                  1       [158..161)                                     i hascall gcsafe bwd 
BB25 [0018]  2       BB12,BB24             1       [161..166)-> BB13 (always)                     i bwd 
BB26 [0019]  1       BB18                  1       [166..1B1)-> BB36 (always)                     i hascall gcsafe 
BB27 [0020]  1       BB36                  1       [1B1..1CA)-> BB29 ( cond )                     i hascall gcsafe bwd bwd-target 
BB28 [0021]  1       BB27                  1       [1CA..1D9)-> BB35 (always)                     i hascall gcsafe bwd 
BB29 [0022]  1       BB27                  1       [1D9..1EA)-> BB31 ( cond )                     i hascall gcsafe bwd 
BB30 [0023]  1       BB29                  1       [1EA..1F4)-> BB35 (always)                     i hascall gcsafe bwd 
BB31 [0024]  1       BB29                  1       [1F4..205)-> BB33 ( cond )                     i hascall gcsafe bwd 
BB32 [0025]  1       BB31                  1       [205..210)-> BB35 (always)                     i bwd 
BB33 [0026]  1       BB31                  1       [210..221)-> BB35 ( cond )                     i hascall gcsafe bwd 
BB34 [0027]  1       BB33                  1       [221..224)-> BB37 (always)                     i bwd 
BB35 [0028]  4       BB28,BB30,BB32,BB33   1       [224..225)                                     i bwd 
BB36 [0029]  2       BB26,BB35             1       [225..22A)-> BB27 (always)                     i bwd 
BB37 [0030]  1       BB34                  1       [22A..232)        (return)                     i 
-----------------------------------------------------------------------------------------------------------------------------------------

***************  Exception Handling table
index  eTry, eHnd
  0  ::            - Try at BB04..BB04 [083..0D5), Finally at BB07..BB09 [0D5..0E1)
  1  ::            - Try at BB14..BB16 [11C..14B), Finally at BB21..BB23 [14B..158)
Renumber BB39 to BB02
Renumber BB40 to BB03
Renumber BB38 to BB04
Renumber BB02 to BB05
Renumber BB03 to BB06
Renumber BB04 to BB07
Renumber BB05 to BB08
Renumber BB06 to BB09
Renumber BB07 to BB10
Renumber BB08 to BB11
Renumber BB09 to BB12
Renumber BB10 to BB13
Renumber BB11 to BB14
Renumber BB12 to BB15
Renumber BB13 to BB16
Renumber BB14 to BB17
Renumber BB15 to BB18
Renumber BB16 to BB19
Renumber BB17 to BB20
Renumber BB18 to BB21
Renumber BB19 to BB22
Renumber BB20 to BB23
Renumber BB21 to BB24
Renumber BB22 to BB25
Renumber BB23 to BB26
Renumber BB24 to BB27
Renumber BB25 to BB28
Renumber BB26 to BB29
Renumber BB27 to BB30
Renumber BB28 to BB31
Renumber BB29 to BB32
Renumber BB30 to BB33
Renumber BB31 to BB34
Renumber BB32 to BB35
Renumber BB33 to BB36
Renumber BB34 to BB37
Renumber BB35 to BB38
Renumber BB36 to BB39
Renumber BB37 to BB40

*************** After renumbering the basic blocks

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [???..???)                                     i internal hascall 
BB02 [0038]  1       BB01                  1       [???..???)-> BB04 ( cond )                     internal 
BB03 [0039]  1       BB02                  0.50    [???..???)                                     internal 
BB04 [0037]  2       BB02,BB03             1       [???..???)                                     i internal hascall 
BB05 [0001]  1       BB04                  1       [000..078)-> BB14 (always)                     i hascall gcsafe newobj 
BB06 [0002]  1       BB14                  1       [078..083)                                     i bwd bwd-target 
BB07 [0003]  1  0    BB06                  1       [083..0D5)-> BB08 (always) T0      try { }     keep i try hascall gcsafe newobj bwd 
BB08 [0031]  1       BB07                  1       [???..???)-> BB10 (callf )                     i internal 
BB09 [0032]  1       BB12                  1       [???..???)-> BB13 (ALWAYS)                     i internal KEEP 
BB10 [0004]  2     0 BB08                  1       [0D5..0D9)-> BB12 ( cond )    H0   finally {   keep i bwd 
BB11 [0005]  1     0 BB10                  1       [0D9..0E0)                    H0               i hascall bwd 
BB12 [0006]  2     0 BB10,BB11             1       [0E0..0E1)        (finret)    H0   }           i bwd 
BB13 [0007]  1       BB09                  1       [0E1..0E6)                                     i bwd 
BB14 [0008]  2       BB05,BB13             1       [0E6..0F1)-> BB06 ( cond )                     i bwd 
BB15 [0009]  1       BB14                  1       [0F1..110)-> BB28 (always)                     i hascall gcsafe 
BB16 [0010]  1       BB28                  1       [110..11C)                                     i bwd bwd-target 
BB17 [0011]  1  1    BB16                  1       [11C..145)-> BB19 ( cond ) T1      try {       keep i try hascall gcsafe bwd 
BB18 [0012]  1  1    BB17                  1       [145..148)-> BB20 (always) T1                  i bwd 
BB19 [0013]  1  1    BB17                  1       [148..14B)-> BB22 (always) T1      }           i bwd 
BB20 [0035]  1       BB18                  1       [???..???)-> BB24 (callf )                     i internal 
BB21 [0036]  1       BB26                  1       [???..???)-> BB29 (ALWAYS)                     i internal KEEP 
BB22 [0033]  1       BB19                  1       [???..???)-> BB24 (callf )                     i internal 
BB23 [0034]  1       BB26                  1       [???..???)-> BB27 (ALWAYS)                     i internal KEEP 
BB24 [0014]  3     1 BB20,BB22             1       [14B..14F)-> BB26 ( cond )    H1   finally {   keep i bwd 
BB25 [0015]  1     1 BB24                  1       [14F..157)                    H1               i hascall bwd 
BB26 [0016]  2     1 BB24,BB25             1       [157..158)        (finret)    H1   }           i bwd 
BB27 [0017]  1       BB23                  1       [158..161)                                     i hascall gcsafe bwd 
BB28 [0018]  2       BB15,BB27             1       [161..166)-> BB16 (always)                     i bwd 
BB29 [0019]  1       BB21                  1       [166..1B1)-> BB39 (always)                     i hascall gcsafe 
BB30 [0020]  1       BB39                  1       [1B1..1CA)-> BB32 ( cond )                     i hascall gcsafe bwd bwd-target 
BB31 [0021]  1       BB30                  1       [1CA..1D9)-> BB38 (always)                     i hascall gcsafe bwd 
BB32 [0022]  1       BB30                  1       [1D9..1EA)-> BB34 ( cond )                     i hascall gcsafe bwd 
BB33 [0023]  1       BB32                  1       [1EA..1F4)-> BB38 (always)                     i hascall gcsafe bwd 
BB34 [0024]  1       BB32                  1       [1F4..205)-> BB36 ( cond )                     i hascall gcsafe bwd 
BB35 [0025]  1       BB34                  1       [205..210)-> BB38 (always)                     i bwd 
BB36 [0026]  1       BB34                  1       [210..221)-> BB38 ( cond )                     i hascall gcsafe bwd 
BB37 [0027]  1       BB36                  1       [221..224)-> BB40 (always)                     i bwd 
BB38 [0028]  4       BB31,BB33,BB35,BB36   1       [224..225)                                     i bwd 
BB39 [0029]  2       BB29,BB38             1       [225..22A)-> BB30 (always)                     i bwd 
BB40 [0030]  1       BB37                  1       [22A..232)        (return)                     i 
-----------------------------------------------------------------------------------------------------------------------------------------

***************  Exception Handling table
index  eTry, eHnd
  0  ::            - Try at BB07..BB07 [083..0D5), Finally at BB10..BB12 [0D5..0E1)
  1  ::            - Try at BB17..BB19 [11C..14B), Finally at BB24..BB26 [14B..158)

New BlockSet epoch 3, # of blocks (including unused BB00): 41, bitset array size: 1 (short)

*************** Finishing PHASE Morph - Global
Trees after Morph - Global

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [???..???)                                     i internal hascall 
BB02 [0038]  1       BB01                  1       [???..???)-> BB04 ( cond )                     internal 
BB03 [0039]  1       BB02                  0.50    [???..???)                                     internal 
BB04 [0037]  2       BB02,BB03             1       [???..???)                                     i internal hascall 
BB05 [0001]  1       BB04                  1       [000..078)-> BB14 (always)                     i hascall gcsafe newobj 
BB06 [0002]  1       BB14                  1       [078..083)                                     i bwd bwd-target 
BB07 [0003]  1  0    BB06                  1       [083..0D5)-> BB08 (always) T0      try { }     keep i try hascall gcsafe newobj bwd 
BB08 [0031]  1       BB07                  1       [???..???)-> BB10 (callf )                     i internal 
BB09 [0032]  1       BB12                  1       [???..???)-> BB13 (ALWAYS)                     i internal KEEP 
BB10 [0004]  2     0 BB08                  1       [0D5..0D9)-> BB12 ( cond )    H0   finally {   keep i bwd 
BB11 [0005]  1     0 BB10                  1       [0D9..0E0)                    H0               i hascall bwd 
BB12 [0006]  2     0 BB10,BB11             1       [0E0..0E1)        (finret)    H0   }           i bwd 
BB13 [0007]  1       BB09                  1       [0E1..0E6)                                     i bwd 
BB14 [0008]  2       BB05,BB13             1       [0E6..0F1)-> BB06 ( cond )                     i bwd 
BB15 [0009]  1       BB14                  1       [0F1..110)-> BB28 (always)                     i hascall gcsafe 
BB16 [0010]  1       BB28                  1       [110..11C)                                     i bwd bwd-target 
BB17 [0011]  1  1    BB16                  1       [11C..145)-> BB19 ( cond ) T1      try {       keep i try hascall gcsafe bwd 
BB18 [0012]  1  1    BB17                  1       [145..148)-> BB20 (always) T1                  i bwd 
BB19 [0013]  1  1    BB17                  1       [148..14B)-> BB22 (always) T1      }           i bwd 
BB20 [0035]  1       BB18                  1       [???..???)-> BB24 (callf )                     i internal 
BB21 [0036]  1       BB26                  1       [???..???)-> BB29 (ALWAYS)                     i internal KEEP 
BB22 [0033]  1       BB19                  1       [???..???)-> BB24 (callf )                     i internal 
BB23 [0034]  1       BB26                  1       [???..???)-> BB27 (ALWAYS)                     i internal KEEP 
BB24 [0014]  3     1 BB20,BB22             1       [14B..14F)-> BB26 ( cond )    H1   finally {   keep i bwd 
BB25 [0015]  1     1 BB24                  1       [14F..157)                    H1               i hascall bwd 
BB26 [0016]  2     1 BB24,BB25             1       [157..158)        (finret)    H1   }           i bwd 
BB27 [0017]  1       BB23                  1       [158..161)                                     i hascall gcsafe bwd 
BB28 [0018]  2       BB15,BB27             1       [161..166)-> BB16 (always)                     i bwd 
BB29 [0019]  1       BB21                  1       [166..1B1)-> BB39 (always)                     i hascall gcsafe 
BB30 [0020]  1       BB39                  1       [1B1..1CA)-> BB32 ( cond )                     i hascall gcsafe bwd bwd-target 
BB31 [0021]  1       BB30                  1       [1CA..1D9)-> BB38 (always)                     i hascall gcsafe bwd 
BB32 [0022]  1       BB30                  1       [1D9..1EA)-> BB34 ( cond )                     i hascall gcsafe bwd 
BB33 [0023]  1       BB32                  1       [1EA..1F4)-> BB38 (always)                     i hascall gcsafe bwd 
BB34 [0024]  1       BB32                  1       [1F4..205)-> BB36 ( cond )                     i hascall gcsafe bwd 
BB35 [0025]  1       BB34                  1       [205..210)-> BB38 (always)                     i bwd 
BB36 [0026]  1       BB34                  1       [210..221)-> BB38 ( cond )                     i hascall gcsafe bwd 
BB37 [0027]  1       BB36                  1       [221..224)-> BB40 (always)                     i bwd 
BB38 [0028]  4       BB31,BB33,BB35,BB36   1       [224..225)                                     i bwd 
BB39 [0029]  2       BB29,BB38             1       [225..22A)-> BB30 (always)                     i bwd 
BB40 [0030]  1       BB37                  1       [22A..232)        (return)                     i 
-----------------------------------------------------------------------------------------------------------------------------------------

------------ BB01 [???..???), preds={} succs={BB02}

***** BB01
STMT00000 (IL   ???...  ???)
               [000000] -----+------              *  NOP       void  

------------ BB02 [???..???) -> BB04 (cond), preds={BB01} succs={BB03,BB04}

***** BB02
STMT00136 (IL   ???...  ???)
               [000494] ------------              *  JTRUE     void  
               [000374] J----+-N----              \--*  EQ        int   
               [000372] n----+------                 +--*  IND       int   
               [000371] H----+------                 |  \--*  CNS_INT(h) long   0x7ffdb6f1d838 global ptr
               [000373] -----+------                 \--*  CNS_INT   int    0

------------ BB03 [???..???), preds={BB02} succs={BB04}

***** BB03
STMT00137 (IL   ???...  ???)
               [000375] --C-G+?-----              *  CALL help void   HELPER.CORINFO_HELP_DBG_IS_JUST_MY_CODE

------------ BB04 [???..???), preds={BB02,BB03} succs={BB05}

------------ BB05 [000..078) -> BB14 (always), preds={BB04} succs={BB14}

***** BB05
STMT00001 (IL 0x000...0x000)
               [000001] -----+------              *  NO_OP     void  

***** BB05
STMT00002 (IL 0x001...0x006)
               [000005] -ACXG+------              *  ASG       struct (copy)
               [000003] D----+-N----              +--*  LCL_VAR   struct<System.DateTime, 8> V19 tmp1         
               [000002] --CXG+------              \--*  CALL      struct System.DateTime.get_Now

***** BB05
STMT00003 (IL 0x006...  ???)
               [000009] -A--G+------              *  ASG       struct (copy)
               [000007] D---G+-N----              +--*  LCL_VAR   struct<System.DateTime, 8>(AX) V03 loc1         
               [000006] -----+------              \--*  LCL_VAR   struct<System.DateTime, 8> V19 tmp1         

***** BB05
STMT00004 (IL 0x007...0x01D)
               [000014] -ACXG+------              *  ASG       ref   
               [000013] D----+-N----              +--*  LCL_VAR   ref    V20 tmp2         
               [000012] --CXG+------              \--*  CALL      ref    System.DateTime.ToString
               [000011] -----+------ this in rcx     \--*  LCL_VAR_ADDR byref  V03 loc1         

***** BB05
STMT00005 (IL 0x00E...  ???)
               [000019] -ACXG+------              *  ASG       ref   
               [000018] D----+-N----              +--*  LCL_VAR   ref    V21 tmp3         
               [000017] --CXG+------              \--*  CALL      ref    System.String.Concat
               [000381] #---G+------ arg1 in rdx     +--*  IND       ref   
               [000380] H----+------                 |  \--*  CNS_INT(h) long   0xBE2A31F0 "	 Created list"
               [000015] -----+------ arg0 in rcx     \--*  LCL_VAR   ref    V20 tmp2         

***** BB05
STMT00006 (IL 0x018...  ???)
               [000021] --CXG+------              *  CALL      void   System.Console.WriteLine
               [000020] -----+------ arg0 in rcx  \--*  LCL_VAR   ref    V21 tmp3         

***** BB05
STMT00007 (IL 0x01D...  ???)
               [000022] -----+------              *  NO_OP     void  

***** BB05
STMT00008 (IL 0x01E...0x024)
               [000027] -AC--+------              *  ASG       ref   
               [000026] D----+-N----              +--*  LCL_VAR   ref    V22 tmp4         
               [000025] --C--+------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
               [000024] H----+------ arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb7022b70 method

***** BB05
STMT00009 (IL   ???...  ???)
               [000029] --CXG+------              *  CALL      void   FalseLeakRepro.List..ctor
               [000028] -----+------ this in rcx  \--*  LCL_VAR   ref    V22 tmp4         

***** BB05
STMT00010 (IL 0x024...  ???)
               [000032] -A-XG+------              *  ASG       ref   
               [000031] ---XG+-N----              +--*  IND       ref   
               [000388] -----+------              |  \--*  ADD       byref 
               [000023] -----+------              |     +--*  LCL_VAR   ref    V00 this         
               [000387] -----+------              |     \--*  CNS_INT   long   8 field offset Fseq[_myList]
               [000030] -----+------              \--*  LCL_VAR   ref    V22 tmp4         

***** BB05
STMT00011 (IL 0x029...0x039)
               [000039] -AC--+------              *  ASG       ref   
               [000038] D----+-N----              +--*  LCL_VAR   ref    V23 tmp5         
               [000037] --C--+------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
               [000036] H----+------ arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb6c458b8 token

***** BB05
STMT00013 (IL   ???...  ???)
               [000043] -A-XG+------              *  ASG       ref   
               [000042] D----+-N----              +--*  LCL_VAR   ref    V24 tmp6         
               [000035] ---XG+------              \--*  IND       ref   
               [000391] ---XG+------                 \--*  ADD       byref 
               [000034] ---XG+------                    +--*  IND       ref   
               [000393] -----+------                    |  \--*  ADD       byref 
               [000033] -----+------                    |     +--*  LCL_VAR   ref    V00 this         
               [000392] -----+------                    |     \--*  CNS_INT   long   8 field offset Fseq[_myList]
               [000390] -----+------                    \--*  CNS_INT   long   8 field offset Fseq[Head]

***** BB05
STMT00012 (IL   ???...  ???)
               [000041] --CXG+------              *  CALL      void   System.Object..ctor
               [000040] -----+------ this in rcx  \--*  LCL_VAR   ref    V23 tmp5         

***** BB05
STMT00014 (IL 0x039...  ???)
               [000047] -A-XG+------              *  ASG       ref   
               [000046] ---XG+-N----              +--*  IND       ref   
               [000396] -----+------              |  \--*  ADD       byref 
               [000044] -----+------              |     +--*  LCL_VAR   ref    V24 tmp6         
               [000395] -----+------              |     \--*  CNS_INT   long   16 field offset Fseq[Data]
               [000045] -----+------              \--*  LCL_VAR   ref    V23 tmp5         

***** BB05
STMT00015 (IL 0x03E...0x04F)
               [000053] -AC--+------              *  ASG       ref   
               [000052] D----+-N----              +--*  LCL_VAR   ref    V25 tmp7         
               [000051] --C--+------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
               [000050] H----+------ arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb7026348 token

***** BB05
STMT00016 (IL   ???...  ???)
               [000055] --CXG+------              *  CALL      void   System.MulticastDelegate.CtorClosed
               [000054] -----+------ this in rcx  +--*  LCL_VAR   ref    V25 tmp7         
               [000048] -----+------ arg1 in rdx  +--*  LCL_VAR   ref    V00 this         
               [000049] H----+------ arg2 in r8   \--*  CNS_INT(h) long   0x7ffdb6c613f8 ftn

***** BB05
STMT00017 (IL 0x04A...  ???)
               [000060] -AC--+------              *  ASG       ref   
               [000059] D----+-N----              +--*  LCL_VAR   ref    V26 tmp8         
               [000058] --C--+------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWFAST
               [000057] H----+------ arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb6dc4e80 token

***** BB05
STMT00018 (IL   ???...  ???)
               [000062] --CXG+------              *  CALL      void   System.Threading.Thread..ctor
               [000061] -----+------ this in rcx  +--*  LCL_VAR   ref    V26 tmp8         
               [000056] -----+------ arg1 in rdx  \--*  LCL_VAR   ref    V25 tmp7         

***** BB05
STMT00019 (IL 0x04F...  ???)
               [000065] -A---+------              *  ASG       ref   
               [000064] D----+-N----              +--*  LCL_VAR   ref    V02 loc0         
               [000063] -----+------              \--*  LCL_VAR   ref    V26 tmp8         

***** BB05
STMT00020 (IL 0x050...0x056)
               [000067] --CXG+------              *  CALL nullcheck void   System.Threading.Thread.Start
               [000066] -----+------ this in rcx  \--*  LCL_VAR   ref    V02 loc0         

***** BB05
STMT00021 (IL 0x056...  ???)
               [000068] -----+------              *  NO_OP     void  

***** BB05
STMT00022 (IL 0x057...0x05C)
               [000072] -ACXG+------              *  ASG       struct (copy)
               [000070] D----+-N----              +--*  LCL_VAR   struct<System.DateTime, 8> V27 tmp9         
               [000069] --CXG+------              \--*  CALL      struct System.DateTime.get_Now

***** BB05
STMT00023 (IL 0x05C...  ???)
               [000076] -A--G+------              *  ASG       struct (copy)
               [000074] D---G+-N----              +--*  LCL_VAR   struct<System.DateTime, 8>(AX) V03 loc1         
               [000073] -----+------              \--*  LCL_VAR   struct<System.DateTime, 8> V27 tmp9         

***** BB05
STMT00024 (IL 0x05D...0x073)
               [000081] -ACXG+------              *  ASG       ref   
               [000080] D----+-N----              +--*  LCL_VAR   ref    V28 tmp10        
               [000079] --CXG+------              \--*  CALL      ref    System.DateTime.ToString
               [000078] -----+------ this in rcx     \--*  LCL_VAR_ADDR byref  V03 loc1         

***** BB05
STMT00025 (IL 0x064...  ???)
               [000086] -ACXG+------              *  ASG       ref   
               [000085] D----+-N----              +--*  LCL_VAR   ref    V29 tmp11        
               [000084] --CXG+------              \--*  CALL      ref    System.String.Concat
               [000407] #---G+------ arg1 in rdx     +--*  IND       ref   
               [000406] H----+------                 |  \--*  CNS_INT(h) long   0xBE2A31F8 "	 Consumer thread started, adding items..."
               [000082] -----+------ arg0 in rcx     \--*  LCL_VAR   ref    V28 tmp10        

***** BB05
STMT00026 (IL 0x06E...  ???)
               [000088] --CXG+------              *  CALL      void   System.Console.WriteLine
               [000087] -----+------ arg0 in rcx  \--*  LCL_VAR   ref    V29 tmp11        

***** BB05
STMT00027 (IL 0x073...  ???)
               [000089] -----+------              *  NO_OP     void  

***** BB05
STMT00028 (IL 0x074...0x075)
               [000092] -A---+------              *  ASG       int   
               [000091] D----+-N----              +--*  LCL_VAR   int    V04 loc2         
               [000090] -----+------              \--*  CNS_INT   int    0

***** BB05
STMT00029 (IL 0x076...0x076)
               [000093] -----+------              *  NOP       void  

------------ BB06 [078..083), preds={BB14} succs={BB07}

***** BB06
STMT00032 (IL 0x078...0x078)
               [000103] -----+------              *  NO_OP     void  

***** BB06
STMT00033 (IL 0x079...0x07F)
               [000107] -A-XG+------              *  ASG       ref   
               [000106] D----+-N----              +--*  LCL_VAR   ref    V05 loc3         
               [000105] ---XG+------              \--*  IND       ref   
               [000412] -----+------                 \--*  ADD       byref 
               [000104] -----+------                    +--*  LCL_VAR   ref    V00 this         
               [000411] -----+------                    \--*  CNS_INT   long   8 field offset Fseq[_myList]

***** BB06
STMT00034 (IL 0x080...0x081)
               [000110] -A--G+------              *  ASG       int   
               [000109] D---G+-N----              +--*  LCL_VAR   int   (AX) V06 loc4         
               [000108] -----+------              \--*  CNS_INT   int    0

------------ BB07 [083..0D5) -> BB08 (always), preds={BB06} succs={BB08}

***** BB07
STMT00035 (IL 0x083...0x08B)
               [000114] --CXG+------              *  CALL      void   System.Threading.Monitor.Enter
               [000113] -----+------ arg1 in rdx  +--*  LCL_VAR_ADDR long   V06 loc4         
               [000111] -----+------ arg0 in rcx  \--*  LCL_VAR   ref    V05 loc3         

***** BB07
STMT00036 (IL 0x08B...  ???)
               [000115] -----+------              *  NO_OP     void  

***** BB07
STMT00037 (IL 0x08C...0x08C)
               [000116] -----+------              *  NO_OP     void  

***** BB07
STMT00038 (IL 0x08D...0x09D)
               [000123] -AC--+------              *  ASG       ref   
               [000122] D----+-N----              +--*  LCL_VAR   ref    V30 tmp12        
               [000121] --C--+------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
               [000120] H----+------ arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb70260c8 method

***** BB07
STMT00040 (IL   ???...  ???)
               [000127] -A-XG+------              *  ASG       ref   
               [000126] D----+-N----              +--*  LCL_VAR   ref    V31 tmp13        
               [000119] ---XG+------              \--*  IND       ref   
               [000417] ---XG+------                 \--*  ADD       byref 
               [000118] ---XG+------                    +--*  IND       ref   
               [000419] -----+------                    |  \--*  ADD       byref 
               [000117] -----+------                    |     +--*  LCL_VAR   ref    V00 this         
               [000418] -----+------                    |     \--*  CNS_INT   long   8 field offset Fseq[_myList]
               [000416] -----+------                    \--*  CNS_INT   long   8 field offset Fseq[Head]

***** BB07
STMT00039 (IL   ???...  ???)
               [000125] --CXG+------              *  CALL      void   FalseLeakRepro.Node..ctor
               [000124] -----+------ this in rcx  \--*  LCL_VAR   ref    V30 tmp12        

***** BB07
STMT00041 (IL 0x09D...  ???)
               [000131] -A-XG+------              *  ASG       ref   
               [000130] ---XG+-N----              +--*  IND       ref   
               [000422] -----+------              |  \--*  ADD       byref 
               [000128] -----+------              |     +--*  LCL_VAR   ref    V31 tmp13        
               [000421] -----+------              |     \--*  CNS_INT   long   8 field offset Fseq[Next]
               [000129] -----+------              \--*  LCL_VAR   ref    V30 tmp12        

***** BB07
STMT00042 (IL 0x0A2...0x0B8)
               [000139] -A-XG+------              *  ASG       ref   
               [000138] ---XG+-N----              +--*  IND       ref   
               [000424] ---XG+------              |  \--*  ADD       byref 
               [000133] ---XG+------              |     +--*  IND       ref   
               [000426] -----+------              |     |  \--*  ADD       byref 
               [000132] -----+------              |     |     +--*  LCL_VAR   ref    V00 this         
               [000425] -----+------              |     |     \--*  CNS_INT   long   8 field offset Fseq[_myList]
               [000423] -----+------              |     \--*  CNS_INT   long   8 field offset Fseq[Head]
               [000137] ---XG+------              \--*  IND       ref   
               [000428] ---XG+------                 \--*  ADD       byref 
               [000136] ---XG+------                    +--*  IND       ref   
               [000430] ---XG+------                    |  \--*  ADD       byref 
               [000135] ---XG+------                    |     +--*  IND       ref   
               [000432] -----+------                    |     |  \--*  ADD       byref 
               [000134] -----+------                    |     |     +--*  LCL_VAR   ref    V00 this         
               [000431] -----+------                    |     |     \--*  CNS_INT   long   8 field offset Fseq[_myList]
               [000429] -----+------                    |     \--*  CNS_INT   long   8 field offset Fseq[Head]
               [000427] -----+------                    \--*  CNS_INT   long   8 field offset Fseq[Next]

***** BB07
STMT00043 (IL 0x0BD...0x0CD)
               [000146] -AC--+------              *  ASG       ref   
               [000145] D----+-N----              +--*  LCL_VAR   ref    V32 tmp14        
               [000144] --C--+------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
               [000143] H----+------ arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb6c458b8 token

***** BB07
STMT00045 (IL   ???...  ???)
               [000150] -A-XG+------              *  ASG       ref   
               [000149] D----+-N----              +--*  LCL_VAR   ref    V33 tmp15        
               [000142] ---XG+------              \--*  IND       ref   
               [000435] ---XG+------                 \--*  ADD       byref 
               [000141] ---XG+------                    +--*  IND       ref   
               [000437] -----+------                    |  \--*  ADD       byref 
               [000140] -----+------                    |     +--*  LCL_VAR   ref    V00 this         
               [000436] -----+------                    |     \--*  CNS_INT   long   8 field offset Fseq[_myList]
               [000434] -----+------                    \--*  CNS_INT   long   8 field offset Fseq[Head]

***** BB07
STMT00044 (IL   ???...  ???)
               [000148] --CXG+------              *  CALL      void   System.Object..ctor
               [000147] -----+------ this in rcx  \--*  LCL_VAR   ref    V32 tmp14        

***** BB07
STMT00046 (IL 0x0CD...  ???)
               [000154] -A-XG+------              *  ASG       ref   
               [000153] ---XG+-N----              +--*  IND       ref   
               [000440] -----+------              |  \--*  ADD       byref 
               [000151] -----+------              |     +--*  LCL_VAR   ref    V33 tmp15        
               [000439] -----+------              |     \--*  CNS_INT   long   16 field offset Fseq[Data]
               [000152] -----+------              \--*  LCL_VAR   ref    V32 tmp14        

***** BB07
STMT00047 (IL 0x0D2...0x0D2)
               [000155] -----+------              *  NO_OP     void  

***** BB07
STMT00048 (IL 0x0D3...0x0D3)
               [000156] -----+------              *  NOP       void  

------------ BB08 [???..???) -> BB10 (callf), preds={BB07} succs={BB10}

------------ BB09 [???..???) -> BB13 (ALWAYS), preds={BB12} succs={BB13}

------------ BB10 [0D5..0D9) -> BB12 (cond), preds={BB08} succs={BB11,BB12}

***** BB10
STMT00051 (IL 0x0D5...0x0D7)
               [000166] ----G+------              *  JTRUE     void  
               [000165] J---G+-N----              \--*  EQ        int   
               [000441] ----G+------                 +--*  CAST      int <- bool <- int
               [000163] ----G+------                 |  \--*  LCL_VAR   int   (AX) V06 loc4         
               [000164] -----+------                 \--*  CNS_INT   int    0

------------ BB11 [0D9..0E0), preds={BB10} succs={BB12}

***** BB11
STMT00053 (IL 0x0D9...0x0DF)
               [000169] --CXG+------              *  CALL      void   System.Threading.Monitor.Exit
               [000168] -----+------ arg0 in rcx  \--*  LCL_VAR   ref    V05 loc3         

***** BB11
STMT00054 (IL 0x0DF...  ???)
               [000170] -----+------              *  NO_OP     void  

------------ BB12 [0E0..0E1) (finret), preds={BB10,BB11} succs={BB09}

***** BB12
STMT00052 (IL 0x0E0...0x0E0)
               [000167] -----+------              *  RETFILT   void  

------------ BB13 [0E1..0E6), preds={BB09} succs={BB14}

***** BB13
STMT00049 (IL 0x0E1...0x0E1)
               [000157] -----+------              *  NO_OP     void  

***** BB13
STMT00050 (IL 0x0E2...0x0E5)
               [000162] -A---+------              *  ASG       int   
               [000161] D----+-N----              +--*  LCL_VAR   int    V04 loc2         
               [000160] -----+------              \--*  ADD       int   
               [000158] -----+------                 +--*  LCL_VAR   int    V04 loc2         
               [000159] -----+------                 \--*  CNS_INT   int    1

------------ BB14 [0E6..0F1) -> BB06 (cond), preds={BB05,BB13} succs={BB15,BB06}

***** BB14
STMT00030 (IL 0x0E6...0x0EB)
               [000098] -A---+------              *  ASG       int   
               [000097] D----+-N----              +--*  LCL_VAR   int    V07 loc5         
               [000096] -----+------              \--*  LT        int   
               [000094] -----+------                 +--*  LCL_VAR   int    V04 loc2         
               [000095] -----+------                 \--*  CNS_INT   int    10

***** BB14
STMT00031 (IL 0x0ED...0x0EF)
               [000102] -----+------              *  JTRUE     void  
               [000101] J----+-N----              \--*  NE        int   
               [000099] -----+------                 +--*  LCL_VAR   int    V07 loc5         
               [000100] -----+------                 \--*  CNS_INT   int    0

------------ BB15 [0F1..110) -> BB28 (always), preds={BB14} succs={BB28}

***** BB15
STMT00055 (IL 0x0F1...0x0F6)
               [000174] -ACXG+------              *  ASG       struct (copy)
               [000172] D----+-N----              +--*  LCL_VAR   struct<System.DateTime, 8> V34 tmp16        
               [000171] --CXG+------              \--*  CALL      struct System.DateTime.get_Now

***** BB15
STMT00056 (IL 0x0F6...  ???)
               [000178] -A--G+------              *  ASG       struct (copy)
               [000176] D---G+-N----              +--*  LCL_VAR   struct<System.DateTime, 8>(AX) V03 loc1         
               [000175] -----+------              \--*  LCL_VAR   struct<System.DateTime, 8> V34 tmp16        

***** BB15
STMT00057 (IL 0x0F7...0x10D)
               [000183] -ACXG+------              *  ASG       ref   
               [000182] D----+-N----              +--*  LCL_VAR   ref    V35 tmp17        
               [000181] --CXG+------              \--*  CALL      ref    System.DateTime.ToString
               [000180] -----+------ this in rcx     \--*  LCL_VAR_ADDR byref  V03 loc1         

***** BB15
STMT00058 (IL 0x0FE...  ???)
               [000188] -ACXG+------              *  ASG       ref   
               [000187] D----+-N----              +--*  LCL_VAR   ref    V36 tmp18        
               [000186] --CXG+------              \--*  CALL      ref    System.String.Concat
               [000445] #---G+------ arg1 in rdx     +--*  IND       ref   
               [000444] H----+------                 |  \--*  CNS_INT(h) long   0xBE2A3200 "	 Waiting for list processing to complete..."
               [000184] -----+------ arg0 in rcx     \--*  LCL_VAR   ref    V35 tmp17        

***** BB15
STMT00059 (IL 0x108...  ???)
               [000190] --CXG+------              *  CALL      void   System.Console.WriteLine
               [000189] -----+------ arg0 in rcx  \--*  LCL_VAR   ref    V36 tmp18        

***** BB15
STMT00060 (IL 0x10D...  ???)
               [000191] -----+------              *  NO_OP     void  

***** BB15
STMT00061 (IL 0x10E...0x10E)
               [000192] -----+------              *  NOP       void  

------------ BB16 [110..11C), preds={BB28} succs={BB17}

***** BB16
STMT00064 (IL 0x110...0x110)
               [000197] -----+------              *  NO_OP     void  

***** BB16
STMT00065 (IL 0x111...0x117)
               [000201] -A-XG+------              *  ASG       ref   
               [000200] D----+-N----              +--*  LCL_VAR   ref    V08 loc6         
               [000199] ---XG+------              \--*  IND       ref   
               [000450] -----+------                 \--*  ADD       byref 
               [000198] -----+------                    +--*  LCL_VAR   ref    V00 this         
               [000449] -----+------                    \--*  CNS_INT   long   8 field offset Fseq[_myList]

***** BB16
STMT00066 (IL 0x119...0x11A)
               [000204] -A--G+------              *  ASG       int   
               [000203] D---G+-N----              +--*  LCL_VAR   int   (AX) V09 loc7         
               [000202] -----+------              \--*  CNS_INT   int    0

------------ BB17 [11C..145) -> BB19 (cond), preds={BB16} succs={BB18,BB19}

***** BB17
STMT00067 (IL 0x11C...0x125)
               [000208] --CXG+------              *  CALL      void   System.Threading.Monitor.Enter
               [000207] -----+------ arg1 in rdx  +--*  LCL_VAR_ADDR long   V09 loc7         
               [000205] -----+------ arg0 in rcx  \--*  LCL_VAR   ref    V08 loc6         

***** BB17
STMT00068 (IL 0x125...  ???)
               [000209] -----+------              *  NO_OP     void  

***** BB17
STMT00069 (IL 0x126...0x126)
               [000210] -----+------              *  NO_OP     void  

***** BB17
STMT00070 (IL 0x127...0x13F)
               [000219] -A-XG+------              *  ASG       int   
               [000218] D----+-N----              +--*  LCL_VAR   int    V10 loc8         
               [000217] ---XG+------              \--*  EQ        int   
               [000213] ---XG+------                 +--*  IND       ref   
               [000454] ---XG+------                 |  \--*  ADD       byref 
               [000212] ---XG+------                 |     +--*  IND       ref   
               [000456] -----+------                 |     |  \--*  ADD       byref 
               [000211] -----+------                 |     |     +--*  LCL_VAR   ref    V00 this         
               [000455] -----+------                 |     |     \--*  CNS_INT   long   8 field offset Fseq[_myList]
               [000453] -----+------                 |     \--*  CNS_INT   long   8 field offset Fseq[Head]
               [000216] ---XG+------                 \--*  IND       ref   
               [000458] ---XG+------                    \--*  ADD       byref 
               [000215] ---XG+------                       +--*  IND       ref   
               [000460] -----+------                       |  \--*  ADD       byref 
               [000214] -----+------                       |     +--*  LCL_VAR   ref    V00 this         
               [000459] -----+------                       |     \--*  CNS_INT   long   8 field offset Fseq[_myList]
               [000457] -----+------                       \--*  CNS_INT   long   16 field offset Fseq[Tail]

***** BB17
STMT00071 (IL 0x141...0x143)
               [000223] -----+------              *  JTRUE     void  
               [000222] J----+-N----              \--*  EQ        int   
               [000220] -----+------                 +--*  LCL_VAR   int    V10 loc8         
               [000221] -----+------                 \--*  CNS_INT   int    0

------------ BB18 [145..148) -> BB20 (always), preds={BB17} succs={BB20}

***** BB18
STMT00077 (IL 0x145...0x145)
               [000230] -----+------              *  NO_OP     void  

***** BB18
STMT00078 (IL 0x146...0x146)
               [000231] -----+------              *  NOP       void  

------------ BB19 [148..14B) -> BB22 (always), preds={BB17} succs={BB22}

***** BB19
STMT00072 (IL 0x148...0x148)
               [000224] -----+------              *  NO_OP     void  

***** BB19
STMT00073 (IL 0x149...0x149)
               [000225] -----+------              *  NOP       void  

------------ BB20 [???..???) -> BB24 (callf), preds={BB18} succs={BB24}

------------ BB21 [???..???) -> BB29 (ALWAYS), preds={BB26} succs={BB29}

------------ BB22 [???..???) -> BB24 (callf), preds={BB19} succs={BB24}

------------ BB23 [???..???) -> BB27 (ALWAYS), preds={BB26} succs={BB27}

------------ BB24 [14B..14F) -> BB26 (cond), preds={BB20,BB22} succs={BB25,BB26}

***** BB24
STMT00131 (IL 0x14B...0x14D)
               [000366] ----G+------              *  JTRUE     void  
               [000365] J---G+-N----              \--*  EQ        int   
               [000461] ----G+------                 +--*  CAST      int <- bool <- int
               [000363] ----G+------                 |  \--*  LCL_VAR   int   (AX) V09 loc7         
               [000364] -----+------                 \--*  CNS_INT   int    0

------------ BB25 [14F..157), preds={BB24} succs={BB26}

***** BB25
STMT00133 (IL 0x14F...0x156)
               [000369] --CXG+------              *  CALL      void   System.Threading.Monitor.Exit
               [000368] -----+------ arg0 in rcx  \--*  LCL_VAR   ref    V08 loc6         

***** BB25
STMT00134 (IL 0x156...  ???)
               [000370] -----+------              *  NO_OP     void  

------------ BB26 [157..158) (finret), preds={BB24,BB25} succs={BB21,BB23}

***** BB26
STMT00132 (IL 0x157...0x157)
               [000367] -----+------              *  RETFILT   void  

------------ BB27 [158..161), preds={BB23} succs={BB28}

***** BB27
STMT00074 (IL 0x158...0x15F)
               [000227] --CXG+------              *  CALL      void   System.Threading.Thread.Sleep
               [000226] -----+------ arg0 in rcx  \--*  CNS_INT   int    100

***** BB27
STMT00075 (IL 0x15F...  ???)
               [000228] -----+------              *  NO_OP     void  

***** BB27
STMT00076 (IL 0x160...0x160)
               [000229] -----+------              *  NO_OP     void  

------------ BB28 [161..166) -> BB16 (always), preds={BB15,BB27} succs={BB16}

***** BB28
STMT00062 (IL 0x161...0x162)
               [000195] -A---+------              *  ASG       int   
               [000194] D----+-N----              +--*  LCL_VAR   int    V11 loc9         
               [000193] -----+------              \--*  CNS_INT   int    1

***** BB28
STMT00063 (IL 0x164...0x164)
               [000196] -----+------              *  NOP       void  

------------ BB29 [166..1B1) -> BB39 (always), preds={BB21} succs={BB39}

***** BB29
STMT00079 (IL 0x166...0x16B)
               [000235] -ACXG+------              *  ASG       struct (copy)
               [000233] D----+-N----              +--*  LCL_VAR   struct<System.DateTime, 8> V37 tmp19        
               [000232] --CXG+------              \--*  CALL      struct System.DateTime.get_Now

***** BB29
STMT00080 (IL 0x16B...  ???)
               [000239] -A--G+------              *  ASG       struct (copy)
               [000237] D---G+-N----              +--*  LCL_VAR   struct<System.DateTime, 8>(AX) V03 loc1         
               [000236] -----+------              \--*  LCL_VAR   struct<System.DateTime, 8> V37 tmp19        

***** BB29
STMT00081 (IL 0x16C...0x182)
               [000244] -ACXG+------              *  ASG       ref   
               [000243] D----+-N----              +--*  LCL_VAR   ref    V38 tmp20        
               [000242] --CXG+------              \--*  CALL      ref    System.DateTime.ToString
               [000241] -----+------ this in rcx     \--*  LCL_VAR_ADDR byref  V03 loc1         

***** BB29
STMT00082 (IL 0x173...  ???)
               [000249] -ACXG+------              *  ASG       ref   
               [000248] D----+-N----              +--*  LCL_VAR   ref    V39 tmp21        
               [000247] --CXG+------              \--*  CALL      ref    System.String.Concat
               [000467] #---G+------ arg1 in rdx     +--*  IND       ref   
               [000466] H----+------                 |  \--*  CNS_INT(h) long   0xBE2A3208 "	 Done.  Profiler is active, available options:"
               [000245] -----+------ arg0 in rcx     \--*  LCL_VAR   ref    V38 tmp20        

***** BB29
STMT00083 (IL 0x17D...  ???)
               [000251] --CXG+------              *  CALL      void   System.Console.WriteLine
               [000250] -----+------ arg0 in rcx  \--*  LCL_VAR   ref    V39 tmp21        

***** BB29
STMT00084 (IL 0x182...  ???)
               [000252] -----+------              *  NO_OP     void  

***** BB29
STMT00085 (IL 0x183...0x18D)
               [000254] --CXG+------              *  CALL      void   System.Console.WriteLine
               [000472] #---G+------ arg0 in rcx  \--*  IND       ref   
               [000471] H----+------                 \--*  CNS_INT(h) long   0xBE2A3210 "   Q = quit"

***** BB29
STMT00086 (IL 0x18D...  ???)
               [000255] -----+------              *  NO_OP     void  

***** BB29
STMT00087 (IL 0x18E...0x198)
               [000257] --CXG+------              *  CALL      void   System.Console.WriteLine
               [000475] #---G+------ arg0 in rcx  \--*  IND       ref   
               [000474] H----+------                 \--*  CNS_INT(h) long   0xBE2A3218 "   H = heap snapshot"

***** BB29
STMT00088 (IL 0x198...  ???)
               [000258] -----+------              *  NO_OP     void  

***** BB29
STMT00089 (IL 0x199...0x1A3)
               [000260] --CXG+------              *  CALL      void   System.Console.WriteLine
               [000478] #---G+------ arg0 in rcx  \--*  IND       ref   
               [000477] H----+------                 \--*  CNS_INT(h) long   0xBE2A3220 "   G = GC (max gen)"

***** BB29
STMT00090 (IL 0x1A3...  ???)
               [000261] -----+------              *  NO_OP     void  

***** BB29
STMT00091 (IL 0x1A4...0x1AE)
               [000263] --CXG+------              *  CALL      void   System.Console.WriteLine
               [000481] #---G+------ arg0 in rcx  \--*  IND       ref   
               [000480] H----+------                 \--*  CNS_INT(h) long   0xBE2A3228 "   R = clear the running flag to stop the consumer thread"

***** BB29
STMT00092 (IL 0x1AE...  ???)
               [000264] -----+------              *  NO_OP     void  

***** BB29
STMT00093 (IL 0x1AF...0x1AF)
               [000265] -----+------              *  NOP       void  

------------ BB30 [1B1..1CA) -> BB32 (cond), preds={BB39} succs={BB31,BB32}

***** BB30
STMT00096 (IL 0x1B1...0x1B1)
               [000270] -----+------              *  NO_OP     void  

***** BB30
STMT00097 (IL 0x1B2...0x1B7)
               [000271] S-CXG+------              *  CALL      void   System.Console.ReadKey
               [000273] -----+------ arg0 in rcx  \--*  LCL_VAR_ADDR long   V40 tmp22        

***** BB30
STMT00098 (IL 0x1B7...  ???)
               [000277] -A--G+------              *  ASG       struct (copy)
               [000275] D---G+-N----              +--*  LCL_VAR   struct<System.ConsoleKeyInfo, 12>(AX) V12 loc10        
               [000274] ----G+------              \--*  LCL_VAR   struct<System.ConsoleKeyInfo, 12>(AX) V40 tmp22        

***** BB30
STMT00099 (IL 0x1B9...0x1C4)
               [000282] -ACXG+------              *  ASG       int   
               [000281] D----+-N----              +--*  LCL_VAR   int    V41 tmp23        
               [000280] --CXG+------              \--*  CALL      int    System.ConsoleKeyInfo.get_Key
               [000279] -----+------ this in rcx     \--*  LCL_VAR_ADDR byref  V12 loc10        

***** BB30
STMT00100 (IL 0x1C0...  ???)
               [000287] -A---+------              *  ASG       int   
               [000286] D----+-N----              +--*  LCL_VAR   int    V13 loc11        
               [000285] -----+------              \--*  EQ        int   
               [000283] -----+------                 +--*  LCL_VAR   int    V41 tmp23        
               [000284] -----+------                 \--*  CNS_INT   int    71

***** BB30
STMT00101 (IL 0x1C6...0x1C8)
               [000291] -----+------              *  JTRUE     void  
               [000290] J----+-N----              \--*  EQ        int   
               [000288] -----+------                 +--*  LCL_VAR   int    V13 loc11        
               [000289] -----+------                 \--*  CNS_INT   int    0

------------ BB31 [1CA..1D9) -> BB38 (always), preds={BB30} succs={BB38}

***** BB31
STMT00125 (IL 0x1CA...0x1CA)
               [000354] -----+------              *  NO_OP     void  

***** BB31
STMT00126 (IL 0x1CB...0x1D5)
               [000357] -ACXG+------              *  ASG       int   
               [000356] D----+-N----              +--*  LCL_VAR   int    V45 tmp27        
               [000355] --CXG+------              \--*  CALL      int    System.GC.get_MaxGeneration

***** BB31
STMT00127 (IL 0x1D0...  ???)
               [000359] --CXG+------              *  CALL      void   System.GC.Collect
               [000358] -----+------ arg0 in rcx  \--*  LCL_VAR   int    V45 tmp27        

***** BB31
STMT00128 (IL 0x1D5...  ???)
               [000360] -----+------              *  NO_OP     void  

***** BB31
STMT00129 (IL 0x1D6...0x1D6)
               [000361] -----+------              *  NO_OP     void  

***** BB31
STMT00130 (IL 0x1D7...0x1D7)
               [000362] -----+------              *  NOP       void  

------------ BB32 [1D9..1EA) -> BB34 (cond), preds={BB30} succs={BB33,BB34}

***** BB32
STMT00102 (IL 0x1D9...0x1E4)
               [000296] -ACXG+------              *  ASG       int   
               [000295] D----+-N----              +--*  LCL_VAR   int    V42 tmp24        
               [000294] --CXG+------              \--*  CALL      int    System.ConsoleKeyInfo.get_Key
               [000293] -----+------ this in rcx     \--*  LCL_VAR_ADDR byref  V12 loc10        

***** BB32
STMT00103 (IL 0x1E0...  ???)
               [000301] -A---+------              *  ASG       int   
               [000300] D----+-N----              +--*  LCL_VAR   int    V14 loc12        
               [000299] -----+------              \--*  EQ        int   
               [000297] -----+------                 +--*  LCL_VAR   int    V42 tmp24        
               [000298] -----+------                 \--*  CNS_INT   int    72

***** BB32
STMT00104 (IL 0x1E6...0x1E8)
               [000305] -----+------              *  JTRUE     void  
               [000304] J----+-N----              \--*  EQ        int   
               [000302] -----+------                 +--*  LCL_VAR   int    V14 loc12        
               [000303] -----+------                 \--*  CNS_INT   int    0

------------ BB33 [1EA..1F4) -> BB38 (always), preds={BB32} succs={BB38}

***** BB33
STMT00120 (IL 0x1EA...0x1EA)
               [000349] -----+------              *  NO_OP     void  

***** BB33
STMT00121 (IL 0x1EB...0x1F0)
               [000350] --CXG+------              *  CALL      void   System.Diagnostics.Debugger.Break

***** BB33
STMT00122 (IL 0x1F0...  ???)
               [000351] -----+------              *  NO_OP     void  

***** BB33
STMT00123 (IL 0x1F1...0x1F1)
               [000352] -----+------              *  NO_OP     void  

***** BB33
STMT00124 (IL 0x1F2...0x1F2)
               [000353] -----+------              *  NOP       void  

------------ BB34 [1F4..205) -> BB36 (cond), preds={BB32} succs={BB35,BB36}

***** BB34
STMT00105 (IL 0x1F4...0x1FF)
               [000310] -ACXG+------              *  ASG       int   
               [000309] D----+-N----              +--*  LCL_VAR   int    V43 tmp25        
               [000308] --CXG+------              \--*  CALL      int    System.ConsoleKeyInfo.get_Key
               [000307] -----+------ this in rcx     \--*  LCL_VAR_ADDR byref  V12 loc10        

***** BB34
STMT00106 (IL 0x1FB...  ???)
               [000315] -A---+------              *  ASG       int   
               [000314] D----+-N----              +--*  LCL_VAR   int    V15 loc13        
               [000313] -----+------              \--*  EQ        int   
               [000311] -----+------                 +--*  LCL_VAR   int    V43 tmp25        
               [000312] -----+------                 \--*  CNS_INT   int    82

***** BB34
STMT00107 (IL 0x201...0x203)
               [000319] -----+------              *  JTRUE     void  
               [000318] J----+-N----              \--*  EQ        int   
               [000316] -----+------                 +--*  LCL_VAR   int    V15 loc13        
               [000317] -----+------                 \--*  CNS_INT   int    0

------------ BB35 [205..210) -> BB38 (always), preds={BB34} succs={BB38}

***** BB35
STMT00116 (IL 0x205...0x205)
               [000342] -----+------              *  NO_OP     void  

***** BB35
STMT00117 (IL 0x206...0x208)
               [000346] -A-XG+------              *  ASG       bool  
               [000345] ---XG+-N----              +--*  IND       bool  
               [000489] -----+------              |  \--*  ADD       byref 
               [000343] -----+------              |     +--*  LCL_VAR   ref    V00 this         
               [000488] -----+------              |     \--*  CNS_INT   long   16 field offset Fseq[_running]
               [000344] -----+------              \--*  CNS_INT   int    0

***** BB35
STMT00118 (IL 0x20D...0x20D)
               [000347] -----+------              *  NO_OP     void  

***** BB35
STMT00119 (IL 0x20E...0x20E)
               [000348] -----+------              *  NOP       void  

------------ BB36 [210..221) -> BB38 (cond), preds={BB34} succs={BB37,BB38}

***** BB36
STMT00108 (IL 0x210...0x21B)
               [000324] -ACXG+------              *  ASG       int   
               [000323] D----+-N----              +--*  LCL_VAR   int    V44 tmp26        
               [000322] --CXG+------              \--*  CALL      int    System.ConsoleKeyInfo.get_Key
               [000321] -----+------ this in rcx     \--*  LCL_VAR_ADDR byref  V12 loc10        

***** BB36
STMT00109 (IL 0x217...  ???)
               [000329] -A---+------              *  ASG       int   
               [000328] D----+-N----              +--*  LCL_VAR   int    V16 loc14        
               [000327] -----+------              \--*  EQ        int   
               [000325] -----+------                 +--*  LCL_VAR   int    V44 tmp26        
               [000326] -----+------                 \--*  CNS_INT   int    81

***** BB36
STMT00110 (IL 0x21D...0x21F)
               [000333] -----+------              *  JTRUE     void  
               [000332] J----+-N----              \--*  EQ        int   
               [000330] -----+------                 +--*  LCL_VAR   int    V16 loc14        
               [000331] -----+------                 \--*  CNS_INT   int    0

------------ BB37 [221..224) -> BB40 (always), preds={BB36} succs={BB40}

***** BB37
STMT00112 (IL 0x221...0x221)
               [000335] -----+------              *  NO_OP     void  

***** BB37
STMT00113 (IL 0x222...0x222)
               [000336] -----+------              *  NOP       void  

------------ BB38 [224..225), preds={BB31,BB33,BB35,BB36} succs={BB39}

***** BB38
STMT00111 (IL 0x224...0x224)
               [000334] -----+------              *  NO_OP     void  

------------ BB39 [225..22A) -> BB30 (always), preds={BB29,BB38} succs={BB30}

***** BB39
STMT00094 (IL 0x225...0x226)
               [000268] -A---+------              *  ASG       int   
               [000267] D----+-N----              +--*  LCL_VAR   int    V17 loc15        
               [000266] -----+------              \--*  CNS_INT   int    1

***** BB39
STMT00095 (IL 0x228...0x228)
               [000269] -----+------              *  NOP       void  

------------ BB40 [22A..232) (return), preds={BB37} succs={}

***** BB40
STMT00114 (IL 0x22A...0x22C)
               [000340] -A-XG+------              *  ASG       bool  
               [000339] ---XG+-N----              +--*  IND       bool  
               [000493] -----+------              |  \--*  ADD       byref 
               [000337] -----+------              |     +--*  LCL_VAR   ref    V00 this         
               [000492] -----+------              |     \--*  CNS_INT   long   16 field offset Fseq[_running]
               [000338] -----+------              \--*  CNS_INT   int    0

***** BB40
STMT00115 (IL 0x231...0x231)
               [000341] -----+------              *  RETURN    void  

-------------------------------------------------------------------------------------------------------------------
*************** In fgDebugCheckBBlist

*************** Starting PHASE GS Cookie
No GS security needed

*************** Finishing PHASE GS Cookie

*************** Starting PHASE Compute edge weights (1, false)
*************** In fgComputeBlockAndEdgeWeights()

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [???..???)                                     i internal hascall 
BB02 [0038]  1       BB01                  1       [???..???)-> BB04 ( cond )                     internal 
BB03 [0039]  1       BB02                  0.50    [???..???)                                     internal 
BB04 [0037]  2       BB02,BB03             1       [???..???)                                     i internal hascall 
BB05 [0001]  1       BB04                  1       [000..078)-> BB14 (always)                     i hascall gcsafe newobj 
BB06 [0002]  1       BB14                  1       [078..083)                                     i bwd bwd-target 
BB07 [0003]  1  0    BB06                  1       [083..0D5)-> BB08 (always) T0      try { }     keep i try hascall gcsafe newobj bwd 
BB08 [0031]  1       BB07                  1       [???..???)-> BB10 (callf )                     i internal 
BB09 [0032]  1       BB12                  1       [???..???)-> BB13 (ALWAYS)                     i internal KEEP 
BB10 [0004]  2     0 BB08                  1       [0D5..0D9)-> BB12 ( cond )    H0   finally {   keep i bwd 
BB11 [0005]  1     0 BB10                  1       [0D9..0E0)                    H0               i hascall bwd 
BB12 [0006]  2     0 BB10,BB11             1       [0E0..0E1)        (finret)    H0   }           i bwd 
BB13 [0007]  1       BB09                  1       [0E1..0E6)                                     i bwd 
BB14 [0008]  2       BB05,BB13             1       [0E6..0F1)-> BB06 ( cond )                     i bwd 
BB15 [0009]  1       BB14                  1       [0F1..110)-> BB28 (always)                     i hascall gcsafe 
BB16 [0010]  1       BB28                  1       [110..11C)                                     i bwd bwd-target 
BB17 [0011]  1  1    BB16                  1       [11C..145)-> BB19 ( cond ) T1      try {       keep i try hascall gcsafe bwd 
BB18 [0012]  1  1    BB17                  1       [145..148)-> BB20 (always) T1                  i bwd 
BB19 [0013]  1  1    BB17                  1       [148..14B)-> BB22 (always) T1      }           i bwd 
BB20 [0035]  1       BB18                  1       [???..???)-> BB24 (callf )                     i internal 
BB21 [0036]  1       BB26                  1       [???..???)-> BB29 (ALWAYS)                     i internal KEEP 
BB22 [0033]  1       BB19                  1       [???..???)-> BB24 (callf )                     i internal 
BB23 [0034]  1       BB26                  1       [???..???)-> BB27 (ALWAYS)                     i internal KEEP 
BB24 [0014]  3     1 BB20,BB22             1       [14B..14F)-> BB26 ( cond )    H1   finally {   keep i bwd 
BB25 [0015]  1     1 BB24                  1       [14F..157)                    H1               i hascall bwd 
BB26 [0016]  2     1 BB24,BB25             1       [157..158)        (finret)    H1   }           i bwd 
BB27 [0017]  1       BB23                  1       [158..161)                                     i hascall gcsafe bwd 
BB28 [0018]  2       BB15,BB27             1       [161..166)-> BB16 (always)                     i bwd 
BB29 [0019]  1       BB21                  1       [166..1B1)-> BB39 (always)                     i hascall gcsafe 
BB30 [0020]  1       BB39                  1       [1B1..1CA)-> BB32 ( cond )                     i hascall gcsafe bwd bwd-target 
BB31 [0021]  1       BB30                  1       [1CA..1D9)-> BB38 (always)                     i hascall gcsafe bwd 
BB32 [0022]  1       BB30                  1       [1D9..1EA)-> BB34 ( cond )                     i hascall gcsafe bwd 
BB33 [0023]  1       BB32                  1       [1EA..1F4)-> BB38 (always)                     i hascall gcsafe bwd 
BB34 [0024]  1       BB32                  1       [1F4..205)-> BB36 ( cond )                     i hascall gcsafe bwd 
BB35 [0025]  1       BB34                  1       [205..210)-> BB38 (always)                     i bwd 
BB36 [0026]  1       BB34                  1       [210..221)-> BB38 ( cond )                     i hascall gcsafe bwd 
BB37 [0027]  1       BB36                  1       [221..224)-> BB40 (always)                     i bwd 
BB38 [0028]  4       BB31,BB33,BB35,BB36   1       [224..225)                                     i bwd 
BB39 [0029]  2       BB29,BB38             1       [225..22A)-> BB30 (always)                     i bwd 
BB40 [0030]  1       BB37                  1       [22A..232)        (return)                     i 
-----------------------------------------------------------------------------------------------------------------------------------------

 -- no profile data, so using default called count
 -- not optimizing or no profile data, so not computing edge weights

*************** Finishing PHASE Compute edge weights (1, false)

*************** Starting PHASE Create EH funclets
*************** In fgCreateFunclets()
Relocating handler range BB10..BB12 (EH#0) to end of BBlist

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [???..???)                                     i internal hascall 
BB02 [0038]  1       BB01                  1       [???..???)-> BB04 ( cond )                     internal 
BB03 [0039]  1       BB02                  0.50    [???..???)                                     internal 
BB04 [0037]  2       BB02,BB03             1       [???..???)                                     i internal hascall 
BB05 [0001]  1       BB04                  1       [000..078)-> BB14 (always)                     i hascall gcsafe newobj 
BB06 [0002]  1       BB14                  1       [078..083)                                     i bwd bwd-target 
BB07 [0003]  1  0    BB06                  1       [083..0D5)-> BB08 (always) T0      try { }     keep i try hascall gcsafe newobj bwd 
BB08 [0031]  1       BB07                  1       [???..???)-> BB10 (callf )                     i internal 
BB09 [0032]  1       BB12                  1       [???..???)-> BB13 (ALWAYS)                     i internal KEEP 
BB10 [0004]  2     0 BB08                  1       [0D5..0D9)-> BB12 ( cond )    H0   finally {   keep i bwd 
BB11 [0005]  1     0 BB10                  1       [0D9..0E0)                    H0               i hascall bwd 
BB12 [0006]  2     0 BB10,BB11             1       [0E0..0E1)        (finret)    H0   }           i bwd 
BB13 [0007]  1       BB09                  1       [0E1..0E6)                                     i bwd 
BB14 [0008]  2       BB05,BB13             1       [0E6..0F1)-> BB06 ( cond )                     i bwd 
BB15 [0009]  1       BB14                  1       [0F1..110)-> BB28 (always)                     i hascall gcsafe 
BB16 [0010]  1       BB28                  1       [110..11C)                                     i bwd bwd-target 
BB17 [0011]  1  1    BB16                  1       [11C..145)-> BB19 ( cond ) T1      try {       keep i try hascall gcsafe bwd 
BB18 [0012]  1  1    BB17                  1       [145..148)-> BB20 (always) T1                  i bwd 
BB19 [0013]  1  1    BB17                  1       [148..14B)-> BB22 (always) T1      }           i bwd 
BB20 [0035]  1       BB18                  1       [???..???)-> BB24 (callf )                     i internal 
BB21 [0036]  1       BB26                  1       [???..???)-> BB29 (ALWAYS)                     i internal KEEP 
BB22 [0033]  1       BB19                  1       [???..???)-> BB24 (callf )                     i internal 
BB23 [0034]  1       BB26                  1       [???..???)-> BB27 (ALWAYS)                     i internal KEEP 
BB24 [0014]  3     1 BB20,BB22             1       [14B..14F)-> BB26 ( cond )    H1   finally {   keep i bwd 
BB25 [0015]  1     1 BB24                  1       [14F..157)                    H1               i hascall bwd 
BB26 [0016]  2     1 BB24,BB25             1       [157..158)        (finret)    H1   }           i bwd 
BB27 [0017]  1       BB23                  1       [158..161)                                     i hascall gcsafe bwd 
BB28 [0018]  2       BB15,BB27             1       [161..166)-> BB16 (always)                     i bwd 
BB29 [0019]  1       BB21                  1       [166..1B1)-> BB39 (always)                     i hascall gcsafe 
BB30 [0020]  1       BB39                  1       [1B1..1CA)-> BB32 ( cond )                     i hascall gcsafe bwd bwd-target 
BB31 [0021]  1       BB30                  1       [1CA..1D9)-> BB38 (always)                     i hascall gcsafe bwd 
BB32 [0022]  1       BB30                  1       [1D9..1EA)-> BB34 ( cond )                     i hascall gcsafe bwd 
BB33 [0023]  1       BB32                  1       [1EA..1F4)-> BB38 (always)                     i hascall gcsafe bwd 
BB34 [0024]  1       BB32                  1       [1F4..205)-> BB36 ( cond )                     i hascall gcsafe bwd 
BB35 [0025]  1       BB34                  1       [205..210)-> BB38 (always)                     i bwd 
BB36 [0026]  1       BB34                  1       [210..221)-> BB38 ( cond )                     i hascall gcsafe bwd 
BB37 [0027]  1       BB36                  1       [221..224)-> BB40 (always)                     i bwd 
BB38 [0028]  4       BB31,BB33,BB35,BB36   1       [224..225)                                     i bwd 
BB39 [0029]  2       BB29,BB38             1       [225..22A)-> BB30 (always)                     i bwd 
BB40 [0030]  1       BB37                  1       [22A..232)        (return)                     i 
-----------------------------------------------------------------------------------------------------------------------------------------

***************  Exception Handling table
index  eTry, eHnd
  0  ::            - Try at BB07..BB07 [083..0D5), Finally at BB10..BB12 [0D5..0E1)
  1  ::            - Try at BB17..BB19 [11C..14B), Finally at BB24..BB26 [14B..158)
Relocated blocks [BB10..BB12] inserted after BB40 at the end of method
Create funclets: moved region

***************  Exception Handling table
index  eTry, eHnd
  0  ::            - Try at BB07..BB07 [083..0D5), Finally at BB10..BB12 [0D5..0E1)
  1  ::            - Try at BB17..BB19 [11C..14B), Finally at BB24..BB26 [14B..158)
Relocating handler range BB24..BB26 (EH#1) to end of BBlist

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [???..???)                                     i internal hascall 
BB02 [0038]  1       BB01                  1       [???..???)-> BB04 ( cond )                     internal 
BB03 [0039]  1       BB02                  0.50    [???..???)                                     internal 
BB04 [0037]  2       BB02,BB03             1       [???..???)                                     i internal hascall 
BB05 [0001]  1       BB04                  1       [000..078)-> BB14 (always)                     i hascall gcsafe newobj 
BB06 [0002]  1       BB14                  1       [078..083)                                     i bwd bwd-target 
BB07 [0003]  1  0    BB06                  1       [083..0D5)-> BB08 (always) T0      try { }     keep i try hascall gcsafe newobj bwd 
BB08 [0031]  1       BB07                  1       [???..???)-> BB10 (callf )                     i internal 
BB09 [0032]  1       BB12                  1       [???..???)-> BB13 (ALWAYS)                     i internal KEEP 
BB13 [0007]  1       BB09                  1       [0E1..0E6)                                     i bwd 
BB14 [0008]  2       BB05,BB13             1       [0E6..0F1)-> BB06 ( cond )                     i bwd 
BB15 [0009]  1       BB14                  1       [0F1..110)-> BB28 (always)                     i hascall gcsafe 
BB16 [0010]  1       BB28                  1       [110..11C)                                     i bwd bwd-target 
BB17 [0011]  1  1    BB16                  1       [11C..145)-> BB19 ( cond ) T1      try {       keep i try hascall gcsafe bwd 
BB18 [0012]  1  1    BB17                  1       [145..148)-> BB20 (always) T1                  i bwd 
BB19 [0013]  1  1    BB17                  1       [148..14B)-> BB22 (always) T1      }           i bwd 
BB20 [0035]  1       BB18                  1       [???..???)-> BB24 (callf )                     i internal 
BB21 [0036]  1       BB26                  1       [???..???)-> BB29 (ALWAYS)                     i internal KEEP 
BB22 [0033]  1       BB19                  1       [???..???)-> BB24 (callf )                     i internal 
BB23 [0034]  1       BB26                  1       [???..???)-> BB27 (ALWAYS)                     i internal KEEP 
BB24 [0014]  3     1 BB20,BB22             1       [14B..14F)-> BB26 ( cond )    H1   finally {   keep i bwd 
BB25 [0015]  1     1 BB24                  1       [14F..157)                    H1               i hascall bwd 
BB26 [0016]  2     1 BB24,BB25             1       [157..158)        (finret)    H1   }           i bwd 
BB27 [0017]  1       BB23                  1       [158..161)                                     i hascall gcsafe bwd 
BB28 [0018]  2       BB15,BB27             1       [161..166)-> BB16 (always)                     i bwd 
BB29 [0019]  1       BB21                  1       [166..1B1)-> BB39 (always)                     i hascall gcsafe 
BB30 [0020]  1       BB39                  1       [1B1..1CA)-> BB32 ( cond )                     i hascall gcsafe bwd bwd-target 
BB31 [0021]  1       BB30                  1       [1CA..1D9)-> BB38 (always)                     i hascall gcsafe bwd 
BB32 [0022]  1       BB30                  1       [1D9..1EA)-> BB34 ( cond )                     i hascall gcsafe bwd 
BB33 [0023]  1       BB32                  1       [1EA..1F4)-> BB38 (always)                     i hascall gcsafe bwd 
BB34 [0024]  1       BB32                  1       [1F4..205)-> BB36 ( cond )                     i hascall gcsafe bwd 
BB35 [0025]  1       BB34                  1       [205..210)-> BB38 (always)                     i bwd 
BB36 [0026]  1       BB34                  1       [210..221)-> BB38 ( cond )                     i hascall gcsafe bwd 
BB37 [0027]  1       BB36                  1       [221..224)-> BB40 (always)                     i bwd 
BB38 [0028]  4       BB31,BB33,BB35,BB36   1       [224..225)                                     i bwd 
BB39 [0029]  2       BB29,BB38             1       [225..22A)-> BB30 (always)                     i bwd 
BB40 [0030]  1       BB37                  1       [22A..232)        (return)                     i 
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ funclets follow
BB10 [0004]  2     0 BB08                  1       [0D5..0D9)-> BB12 ( cond )    H0 F finally {   keep i flet bwd 
BB11 [0005]  1     0 BB10                  1       [0D9..0E0)                    H0               i hascall bwd 
BB12 [0006]  2     0 BB10,BB11             1       [0E0..0E1)        (finret)    H0   }           i bwd 
-----------------------------------------------------------------------------------------------------------------------------------------

***************  Exception Handling table
index  eTry, eHnd
  0  ::            - Try at BB07..BB07 [083..0D5), Finally at BB10..BB12 [0D5..0E1)
  1  ::            - Try at BB17..BB19 [11C..14B), Finally at BB24..BB26 [14B..158)
Relocated blocks [BB24..BB26] inserted after BB12 at the end of method
Create funclets: moved region

***************  Exception Handling table
index  eTry, eHnd
  0  ::            - Try at BB07..BB07 [083..0D5), Finally at BB10..BB12 [0D5..0E1)
  1  ::            - Try at BB17..BB19 [11C..14B), Finally at BB24..BB26 [14B..158)

After fgCreateFunclets()
-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [???..???)                                     i internal hascall 
BB02 [0038]  1       BB01                  1       [???..???)-> BB04 ( cond )                     internal 
BB03 [0039]  1       BB02                  0.50    [???..???)                                     internal 
BB04 [0037]  2       BB02,BB03             1       [???..???)                                     i internal hascall 
BB05 [0001]  1       BB04                  1       [000..078)-> BB14 (always)                     i hascall gcsafe newobj 
BB06 [0002]  1       BB14                  1       [078..083)                                     i bwd bwd-target 
BB07 [0003]  1  0    BB06                  1       [083..0D5)-> BB08 (always) T0      try { }     keep i try hascall gcsafe newobj bwd 
BB08 [0031]  1       BB07                  1       [???..???)-> BB10 (callf )                     i internal 
BB09 [0032]  1       BB12                  1       [???..???)-> BB13 (ALWAYS)                     i internal KEEP 
BB13 [0007]  1       BB09                  1       [0E1..0E6)                                     i bwd 
BB14 [0008]  2       BB05,BB13             1       [0E6..0F1)-> BB06 ( cond )                     i bwd 
BB15 [0009]  1       BB14                  1       [0F1..110)-> BB28 (always)                     i hascall gcsafe 
BB16 [0010]  1       BB28                  1       [110..11C)                                     i bwd bwd-target 
BB17 [0011]  1  1    BB16                  1       [11C..145)-> BB19 ( cond ) T1      try {       keep i try hascall gcsafe bwd 
BB18 [0012]  1  1    BB17                  1       [145..148)-> BB20 (always) T1                  i bwd 
BB19 [0013]  1  1    BB17                  1       [148..14B)-> BB22 (always) T1      }           i bwd 
BB20 [0035]  1       BB18                  1       [???..???)-> BB24 (callf )                     i internal 
BB21 [0036]  1       BB26                  1       [???..???)-> BB29 (ALWAYS)                     i internal KEEP 
BB22 [0033]  1       BB19                  1       [???..???)-> BB24 (callf )                     i internal 
BB23 [0034]  1       BB26                  1       [???..???)-> BB27 (ALWAYS)                     i internal KEEP 
BB27 [0017]  1       BB23                  1       [158..161)                                     i hascall gcsafe bwd 
BB28 [0018]  2       BB15,BB27             1       [161..166)-> BB16 (always)                     i bwd 
BB29 [0019]  1       BB21                  1       [166..1B1)-> BB39 (always)                     i hascall gcsafe 
BB30 [0020]  1       BB39                  1       [1B1..1CA)-> BB32 ( cond )                     i hascall gcsafe bwd bwd-target 
BB31 [0021]  1       BB30                  1       [1CA..1D9)-> BB38 (always)                     i hascall gcsafe bwd 
BB32 [0022]  1       BB30                  1       [1D9..1EA)-> BB34 ( cond )                     i hascall gcsafe bwd 
BB33 [0023]  1       BB32                  1       [1EA..1F4)-> BB38 (always)                     i hascall gcsafe bwd 
BB34 [0024]  1       BB32                  1       [1F4..205)-> BB36 ( cond )                     i hascall gcsafe bwd 
BB35 [0025]  1       BB34                  1       [205..210)-> BB38 (always)                     i bwd 
BB36 [0026]  1       BB34                  1       [210..221)-> BB38 ( cond )                     i hascall gcsafe bwd 
BB37 [0027]  1       BB36                  1       [221..224)-> BB40 (always)                     i bwd 
BB38 [0028]  4       BB31,BB33,BB35,BB36   1       [224..225)                                     i bwd 
BB39 [0029]  2       BB29,BB38             1       [225..22A)-> BB30 (always)                     i bwd 
BB40 [0030]  1       BB37                  1       [22A..232)        (return)                     i 
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ funclets follow
BB10 [0004]  2     0 BB08                  1       [0D5..0D9)-> BB12 ( cond )    H0 F finally {   keep i flet bwd 
BB11 [0005]  1     0 BB10                  1       [0D9..0E0)                    H0               i hascall bwd 
BB12 [0006]  2     0 BB10,BB11             1       [0E0..0E1)        (finret)    H0   }           i bwd 
BB24 [0014]  3     1 BB20,BB22             1       [14B..14F)-> BB26 ( cond )    H1 F finally {   keep i flet bwd 
BB25 [0015]  1     1 BB24                  1       [14F..157)                    H1               i hascall bwd 
BB26 [0016]  2     1 BB24,BB25             1       [157..158)        (finret)    H1   }           i bwd 
-----------------------------------------------------------------------------------------------------------------------------------------

***************  Exception Handling table
index  eTry, eHnd
  0  ::            - Try at BB07..BB07 [083..0D5), Finally at BB10..BB12 [0D5..0E1)
  1  ::            - Try at BB17..BB19 [11C..14B), Finally at BB24..BB26 [14B..158)
*************** In fgDebugCheckBBlist

*************** Finishing PHASE Create EH funclets

*************** Starting PHASE Mark local vars

*************** In lvaMarkLocalVars()
lvaGrabTemp returning 46 (V46 tmp28) (a long lifetime temp) called for PSPSym.

Local V46 should not be enregistered because: it is address exposed

*** lvaComputeRefCounts ***

*************** Finishing PHASE Mark local vars

*************** Starting PHASE Find oper order
*************** In fgFindOperOrder()

*************** Finishing PHASE Find oper order

*************** Starting PHASE Set block order
*************** In fgSetBlockOrder()
The biggest BB has   18 tree nodes

*************** Finishing PHASE Set block order

*************** Starting PHASE Insert GC Polls

*************** Finishing PHASE Insert GC Polls [no changes]

*************** Starting PHASE Determine first cold block

*************** In fgDetermineFirstColdBlock()
No procedure splitting will be done for this method

*************** Finishing PHASE Determine first cold block
Trees before Rationalize IR

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [???..???)                                     i internal hascall 
BB02 [0038]  1       BB01                  1       [???..???)-> BB04 ( cond )                     internal 
BB03 [0039]  1       BB02                  0.50    [???..???)                                     internal 
BB04 [0037]  2       BB02,BB03             1       [???..???)                                     i internal hascall 
BB05 [0001]  1       BB04                  1       [000..078)-> BB14 (always)                     i hascall gcsafe newobj 
BB06 [0002]  1       BB14                  1       [078..083)                                     i bwd bwd-target 
BB07 [0003]  1  0    BB06                  1       [083..0D5)-> BB08 (always) T0      try { }     keep i try hascall gcsafe newobj bwd 
BB08 [0031]  1       BB07                  1       [???..???)-> BB10 (callf )                     i internal 
BB09 [0032]  1       BB12                  1       [???..???)-> BB13 (ALWAYS)                     i internal KEEP 
BB13 [0007]  1       BB09                  1       [0E1..0E6)                                     i bwd 
BB14 [0008]  2       BB05,BB13             1       [0E6..0F1)-> BB06 ( cond )                     i bwd 
BB15 [0009]  1       BB14                  1       [0F1..110)-> BB28 (always)                     i hascall gcsafe 
BB16 [0010]  1       BB28                  1       [110..11C)                                     i bwd bwd-target 
BB17 [0011]  1  1    BB16                  1       [11C..145)-> BB19 ( cond ) T1      try {       keep i try hascall gcsafe bwd 
BB18 [0012]  1  1    BB17                  1       [145..148)-> BB20 (always) T1                  i bwd 
BB19 [0013]  1  1    BB17                  1       [148..14B)-> BB22 (always) T1      }           i bwd 
BB20 [0035]  1       BB18                  1       [???..???)-> BB24 (callf )                     i internal 
BB21 [0036]  1       BB26                  1       [???..???)-> BB29 (ALWAYS)                     i internal KEEP 
BB22 [0033]  1       BB19                  1       [???..???)-> BB24 (callf )                     i internal 
BB23 [0034]  1       BB26                  1       [???..???)-> BB27 (ALWAYS)                     i internal KEEP 
BB27 [0017]  1       BB23                  1       [158..161)                                     i hascall gcsafe bwd 
BB28 [0018]  2       BB15,BB27             1       [161..166)-> BB16 (always)                     i bwd 
BB29 [0019]  1       BB21                  1       [166..1B1)-> BB39 (always)                     i hascall gcsafe 
BB30 [0020]  1       BB39                  1       [1B1..1CA)-> BB32 ( cond )                     i hascall gcsafe bwd bwd-target 
BB31 [0021]  1       BB30                  1       [1CA..1D9)-> BB38 (always)                     i hascall gcsafe bwd 
BB32 [0022]  1       BB30                  1       [1D9..1EA)-> BB34 ( cond )                     i hascall gcsafe bwd 
BB33 [0023]  1       BB32                  1       [1EA..1F4)-> BB38 (always)                     i hascall gcsafe bwd 
BB34 [0024]  1       BB32                  1       [1F4..205)-> BB36 ( cond )                     i hascall gcsafe bwd 
BB35 [0025]  1       BB34                  1       [205..210)-> BB38 (always)                     i bwd 
BB36 [0026]  1       BB34                  1       [210..221)-> BB38 ( cond )                     i hascall gcsafe bwd 
BB37 [0027]  1       BB36                  1       [221..224)-> BB40 (always)                     i bwd 
BB38 [0028]  4       BB31,BB33,BB35,BB36   1       [224..225)                                     i bwd 
BB39 [0029]  2       BB29,BB38             1       [225..22A)-> BB30 (always)                     i bwd 
BB40 [0030]  1       BB37                  1       [22A..232)        (return)                     i 
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ funclets follow
BB10 [0004]  2     0 BB08                  1       [0D5..0D9)-> BB12 ( cond )    H0 F finally {   keep i flet bwd 
BB11 [0005]  1     0 BB10                  1       [0D9..0E0)                    H0               i hascall bwd 
BB12 [0006]  2     0 BB10,BB11             1       [0E0..0E1)        (finret)    H0   }           i bwd 
BB24 [0014]  3     1 BB20,BB22             1       [14B..14F)-> BB26 ( cond )    H1 F finally {   keep i flet bwd 
BB25 [0015]  1     1 BB24                  1       [14F..157)                    H1               i hascall bwd 
BB26 [0016]  2     1 BB24,BB25             1       [157..158)        (finret)    H1   }           i bwd 
-----------------------------------------------------------------------------------------------------------------------------------------

------------ BB01 [???..???), preds={} succs={BB02}

***** BB01
STMT00000 (IL   ???...  ???)
N001 (  0,  0) [000000] ------------              *  NOP       void  

------------ BB02 [???..???) -> BB04 (cond), preds={BB01} succs={BB03,BB04}

***** BB02
STMT00136 (IL   ???...  ???)
N005 (  8, 16) [000494] ------------              *  JTRUE     void  
N004 (  6, 14) [000374] J------N----              \--*  EQ        int   
N002 (  4, 12) [000372] n-----------                 +--*  IND       int   
N001 (  2, 10) [000371] H-----------                 |  \--*  CNS_INT(h) long   0x7ffdb6f1d838 global ptr
N003 (  1,  1) [000373] ------------                 \--*  CNS_INT   int    0

------------ BB03 [???..???), preds={BB02} succs={BB04}

***** BB03
STMT00137 (IL   ???...  ???)
N001 ( 14,  5) [000375] --C-G-?-----              *  CALL help void   HELPER.CORINFO_HELP_DBG_IS_JUST_MY_CODE

------------ BB04 [???..???), preds={BB02,BB03} succs={BB05}

------------ BB05 [000..078) -> BB14 (always), preds={BB04} succs={BB14}

***** BB05
STMT00001 (IL 0x000...0x000)
N001 (  1,  1) [000001] ------------              *  NO_OP     void  

***** BB05
STMT00002 (IL 0x001...0x006)
N003 ( 18,  8) [000005] -ACXG---R---              *  ASG       struct (copy)
N002 (  3,  2) [000003] D------N----              +--*  LCL_VAR   struct<System.DateTime, 8> V19 tmp1         
N001 ( 14,  5) [000002] --CXG-------              \--*  CALL      struct System.DateTime.get_Now

***** BB05
STMT00003 (IL 0x006...  ???)
N003 (  7,  5) [000009] -A--G---R---              *  ASG       struct (copy)
N002 (  3,  2) [000007] D---G--N----              +--*  LCL_VAR   struct<System.DateTime, 8>(AX) V03 loc1         
N001 (  3,  2) [000006] ------------              \--*  LCL_VAR   struct<System.DateTime, 8> V19 tmp1         

***** BB05
STMT00004 (IL 0x007...0x01D)
N005 ( 21, 13) [000014] -ACXG---R---              *  ASG       ref   
N004 (  3,  2) [000013] D------N----              +--*  LCL_VAR   ref    V20 tmp2         
N003 ( 17, 10) [000012] --CXG-------              \--*  CALL      ref    System.DateTime.ToString
N002 (  3,  3) [000011] ------------ this in rcx     \--*  LCL_VAR_ADDR byref  V03 loc1         

***** BB05
STMT00005 (IL 0x00E...  ???)
N008 ( 25, 24) [000019] -ACXG---R---              *  ASG       ref   
N007 (  3,  2) [000018] D------N----              +--*  LCL_VAR   ref    V21 tmp3         
N006 ( 21, 21) [000017] --CXG-------              \--*  CALL      ref    System.String.Concat
N004 (  4, 12) [000381] #---G------- arg1 in rdx     +--*  IND       ref   
N003 (  2, 10) [000380] H-----------                 |  \--*  CNS_INT(h) long   0xBE2A31F0 "	 Created list"
N005 (  3,  2) [000015] ------------ arg0 in rcx     \--*  LCL_VAR   ref    V20 tmp2         

***** BB05
STMT00006 (IL 0x018...  ???)
N003 ( 17,  8) [000021] --CXG-------              *  CALL      void   System.Console.WriteLine
N002 (  3,  2) [000020] ------------ arg0 in rcx  \--*  LCL_VAR   ref    V21 tmp3         

***** BB05
STMT00007 (IL 0x01D...  ???)
N001 (  1,  1) [000022] ------------              *  NO_OP     void  

***** BB05
STMT00008 (IL 0x01E...0x024)
N005 ( 20, 19) [000027] -AC-----R---              *  ASG       ref   
N004 (  3,  2) [000026] D------N----              +--*  LCL_VAR   ref    V22 tmp4         
N003 ( 16, 16) [000025] --C---------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
N002 (  2, 10) [000024] H----------- arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb7022b70 method

***** BB05
STMT00009 (IL   ???...  ???)
N003 ( 17,  9) [000029] --CXG-------              *  CALL      void   FalseLeakRepro.List..ctor
N002 (  3,  2) [000028] ------------ this in rcx  \--*  LCL_VAR   ref    V22 tmp4         

***** BB05
STMT00010 (IL 0x024...  ???)
N006 ( 10,  8) [000032] -A-XG-------              *  ASG       ref   
N004 (  6,  5) [000031] ---XG--N----              +--*  IND       ref   
N003 (  4,  3) [000388] -------N----              |  \--*  ADD       byref 
N001 (  3,  2) [000023] ------------              |     +--*  LCL_VAR   ref    V00 this         
N002 (  1,  1) [000387] ------------              |     \--*  CNS_INT   long   8 field offset Fseq[_myList]
N005 (  3,  2) [000030] ------------              \--*  LCL_VAR   ref    V22 tmp4         

***** BB05
STMT00011 (IL 0x029...0x039)
N005 ( 20, 19) [000039] -AC-----R---              *  ASG       ref   
N004 (  3,  2) [000038] D------N----              +--*  LCL_VAR   ref    V23 tmp5         
N003 ( 16, 16) [000037] --C---------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
N002 (  2, 10) [000036] H----------- arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb6c458b8 token

***** BB05
STMT00013 (IL   ???...  ???)
N009 ( 13, 11) [000043] -A-XG---R---              *  ASG       ref   
N008 (  3,  2) [000042] D------N----              +--*  LCL_VAR   ref    V24 tmp6         
N007 (  9,  8) [000035] ---XG-------              \--*  IND       ref   
N006 (  7,  6) [000391] ---XG--N----                 \--*  ADD       byref 
N004 (  6,  5) [000034] ---XG-------                    +--*  IND       ref   
N003 (  4,  3) [000393] -------N----                    |  \--*  ADD       byref 
N001 (  3,  2) [000033] ------------                    |     +--*  LCL_VAR   ref    V00 this         
N002 (  1,  1) [000392] ------------                    |     \--*  CNS_INT   long   8 field offset Fseq[_myList]
N005 (  1,  1) [000390] ------------                    \--*  CNS_INT   long   8 field offset Fseq[Head]

***** BB05
STMT00012 (IL   ???...  ???)
N003 ( 17,  9) [000041] --CXG-------              *  CALL      void   System.Object..ctor
N002 (  3,  2) [000040] ------------ this in rcx  \--*  LCL_VAR   ref    V23 tmp5         

***** BB05
STMT00014 (IL 0x039...  ???)
N006 ( 10,  8) [000047] -A-XG-------              *  ASG       ref   
N004 (  6,  5) [000046] ---XG--N----              +--*  IND       ref   
N003 (  4,  3) [000396] -------N----              |  \--*  ADD       byref 
N001 (  3,  2) [000044] ------------              |     +--*  LCL_VAR   ref    V24 tmp6         
N002 (  1,  1) [000395] ------------              |     \--*  CNS_INT   long   16 field offset Fseq[Data]
N005 (  3,  2) [000045] ------------              \--*  LCL_VAR   ref    V23 tmp5         

***** BB05
STMT00015 (IL 0x03E...0x04F)
N005 ( 20, 19) [000053] -AC-----R---              *  ASG       ref   
N004 (  3,  2) [000052] D------N----              +--*  LCL_VAR   ref    V25 tmp7         
N003 ( 16, 16) [000051] --C---------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
N002 (  2, 10) [000050] H----------- arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb7026348 token

***** BB05
STMT00016 (IL   ???...  ???)
N007 ( 22, 23) [000055] --CXG-------              *  CALL      void   System.MulticastDelegate.CtorClosed
N004 (  3,  2) [000054] ------------ this in rcx  +--*  LCL_VAR   ref    V25 tmp7         
N005 (  3,  2) [000048] ------------ arg1 in rdx  +--*  LCL_VAR   ref    V00 this         
N006 (  2, 10) [000049] H----------- arg2 in r8   \--*  CNS_INT(h) long   0x7ffdb6c613f8 ftn

***** BB05
STMT00017 (IL 0x04A...  ???)
N005 ( 20, 19) [000060] -AC-----R---              *  ASG       ref   
N004 (  3,  2) [000059] D------N----              +--*  LCL_VAR   ref    V26 tmp8         
N003 ( 16, 16) [000058] --C---------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWFAST
N002 (  2, 10) [000057] H----------- arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb6dc4e80 token

***** BB05
STMT00018 (IL   ???...  ???)
N005 ( 20, 12) [000062] --CXG-------              *  CALL      void   System.Threading.Thread..ctor
N003 (  3,  2) [000061] ------------ this in rcx  +--*  LCL_VAR   ref    V26 tmp8         
N004 (  3,  2) [000056] ------------ arg1 in rdx  \--*  LCL_VAR   ref    V25 tmp7         

***** BB05
STMT00019 (IL 0x04F...  ???)
N003 (  7,  5) [000065] -A------R---              *  ASG       ref   
N002 (  3,  2) [000064] D------N----              +--*  LCL_VAR   ref    V02 loc0         
N001 (  3,  2) [000063] ------------              \--*  LCL_VAR   ref    V26 tmp8         

***** BB05
STMT00020 (IL 0x050...0x056)
N003 ( 17,  9) [000067] --CXG-------              *  CALL nullcheck void   System.Threading.Thread.Start
N002 (  3,  2) [000066] ------------ this in rcx  \--*  LCL_VAR   ref    V02 loc0         

***** BB05
STMT00021 (IL 0x056...  ???)
N001 (  1,  1) [000068] ------------              *  NO_OP     void  

***** BB05
STMT00022 (IL 0x057...0x05C)
N003 ( 18,  8) [000072] -ACXG---R---              *  ASG       struct (copy)
N002 (  3,  2) [000070] D------N----              +--*  LCL_VAR   struct<System.DateTime, 8> V27 tmp9         
N001 ( 14,  5) [000069] --CXG-------              \--*  CALL      struct System.DateTime.get_Now

***** BB05
STMT00023 (IL 0x05C...  ???)
N003 (  7,  5) [000076] -A--G---R---              *  ASG       struct (copy)
N002 (  3,  2) [000074] D---G--N----              +--*  LCL_VAR   struct<System.DateTime, 8>(AX) V03 loc1         
N001 (  3,  2) [000073] ------------              \--*  LCL_VAR   struct<System.DateTime, 8> V27 tmp9         

***** BB05
STMT00024 (IL 0x05D...0x073)
N005 ( 21, 13) [000081] -ACXG---R---              *  ASG       ref   
N004 (  3,  2) [000080] D------N----              +--*  LCL_VAR   ref    V28 tmp10        
N003 ( 17, 10) [000079] --CXG-------              \--*  CALL      ref    System.DateTime.ToString
N002 (  3,  3) [000078] ------------ this in rcx     \--*  LCL_VAR_ADDR byref  V03 loc1         

***** BB05
STMT00025 (IL 0x064...  ???)
N008 ( 25, 24) [000086] -ACXG---R---              *  ASG       ref   
N007 (  3,  2) [000085] D------N----              +--*  LCL_VAR   ref    V29 tmp11        
N006 ( 21, 21) [000084] --CXG-------              \--*  CALL      ref    System.String.Concat
N004 (  4, 12) [000407] #---G------- arg1 in rdx     +--*  IND       ref   
N003 (  2, 10) [000406] H-----------                 |  \--*  CNS_INT(h) long   0xBE2A31F8 "	 Consumer thread started, adding items..."
N005 (  3,  2) [000082] ------------ arg0 in rcx     \--*  LCL_VAR   ref    V28 tmp10        

***** BB05
STMT00026 (IL 0x06E...  ???)
N003 ( 17,  8) [000088] --CXG-------              *  CALL      void   System.Console.WriteLine
N002 (  3,  2) [000087] ------------ arg0 in rcx  \--*  LCL_VAR   ref    V29 tmp11        

***** BB05
STMT00027 (IL 0x073...  ???)
N001 (  1,  1) [000089] ------------              *  NO_OP     void  

***** BB05
STMT00028 (IL 0x074...0x075)
N003 (  5,  4) [000092] -A------R---              *  ASG       int   
N002 (  3,  2) [000091] D------N----              +--*  LCL_VAR   int    V04 loc2         
N001 (  1,  1) [000090] ------------              \--*  CNS_INT   int    0

***** BB05
STMT00029 (IL 0x076...0x076)
N001 (  0,  0) [000093] ------------              *  NOP       void  

------------ BB06 [078..083), preds={BB14} succs={BB07}

***** BB06
STMT00032 (IL 0x078...0x078)
N001 (  1,  1) [000103] ------------              *  NO_OP     void  

***** BB06
STMT00033 (IL 0x079...0x07F)
N006 ( 10,  8) [000107] -A-XG---R---              *  ASG       ref   
N005 (  3,  2) [000106] D------N----              +--*  LCL_VAR   ref    V05 loc3         
N004 (  6,  5) [000105] ---XG-------              \--*  IND       ref   
N003 (  4,  3) [000412] -------N----                 \--*  ADD       byref 
N001 (  3,  2) [000104] ------------                    +--*  LCL_VAR   ref    V00 this         
N002 (  1,  1) [000411] ------------                    \--*  CNS_INT   long   8 field offset Fseq[_myList]

***** BB06
STMT00034 (IL 0x080...0x081)
N003 (  5,  4) [000110] -A--G---R---              *  ASG       int   
N002 (  3,  2) [000109] D---G--N----              +--*  LCL_VAR   int   (AX) V06 loc4         
N001 (  1,  1) [000108] ------------              \--*  CNS_INT   int    0

------------ BB07 [083..0D5) -> BB08 (always), preds={BB06} succs={BB08}

***** BB07
STMT00035 (IL 0x083...0x08B)
N005 ( 20, 12) [000114] --CXG-------              *  CALL      void   System.Threading.Monitor.Enter
N003 (  3,  3) [000113] ------------ arg1 in rdx  +--*  LCL_VAR_ADDR long   V06 loc4         
N004 (  3,  2) [000111] ------------ arg0 in rcx  \--*  LCL_VAR   ref    V05 loc3         

***** BB07
STMT00036 (IL 0x08B...  ???)
N001 (  1,  1) [000115] ------------              *  NO_OP     void  

***** BB07
STMT00037 (IL 0x08C...0x08C)
N001 (  1,  1) [000116] ------------              *  NO_OP     void  

***** BB07
STMT00038 (IL 0x08D...0x09D)
N005 ( 20, 19) [000123] -AC-----R---              *  ASG       ref   
N004 (  3,  2) [000122] D------N----              +--*  LCL_VAR   ref    V30 tmp12        
N003 ( 16, 16) [000121] --C---------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
N002 (  2, 10) [000120] H----------- arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb70260c8 method

***** BB07
STMT00040 (IL   ???...  ???)
N009 ( 13, 11) [000127] -A-XG---R---              *  ASG       ref   
N008 (  3,  2) [000126] D------N----              +--*  LCL_VAR   ref    V31 tmp13        
N007 (  9,  8) [000119] ---XG-------              \--*  IND       ref   
N006 (  7,  6) [000417] ---XG--N----                 \--*  ADD       byref 
N004 (  6,  5) [000118] ---XG-------                    +--*  IND       ref   
N003 (  4,  3) [000419] -------N----                    |  \--*  ADD       byref 
N001 (  3,  2) [000117] ------------                    |     +--*  LCL_VAR   ref    V00 this         
N002 (  1,  1) [000418] ------------                    |     \--*  CNS_INT   long   8 field offset Fseq[_myList]
N005 (  1,  1) [000416] ------------                    \--*  CNS_INT   long   8 field offset Fseq[Head]

***** BB07
STMT00039 (IL   ???...  ???)
N003 ( 17,  9) [000125] --CXG-------              *  CALL      void   FalseLeakRepro.Node..ctor
N002 (  3,  2) [000124] ------------ this in rcx  \--*  LCL_VAR   ref    V30 tmp12        

***** BB07
STMT00041 (IL 0x09D...  ???)
N006 ( 10,  8) [000131] -A-XG-------              *  ASG       ref   
N004 (  6,  5) [000130] ---XG--N----              +--*  IND       ref   
N003 (  4,  3) [000422] -------N----              |  \--*  ADD       byref 
N001 (  3,  2) [000128] ------------              |     +--*  LCL_VAR   ref    V31 tmp13        
N002 (  1,  1) [000421] ------------              |     \--*  CNS_INT   long   8 field offset Fseq[Next]
N005 (  3,  2) [000129] ------------              \--*  LCL_VAR   ref    V30 tmp12        

***** BB07
STMT00042 (IL 0x0A2...0x0B8)
N018 ( 22, 20) [000139] -A-XG-------              *  ASG       ref   
N007 (  9,  8) [000138] ---XG--N----              +--*  IND       ref   
N006 (  7,  6) [000424] ---XG--N----              |  \--*  ADD       byref 
N004 (  6,  5) [000133] ---XG-------              |     +--*  IND       ref   
N003 (  4,  3) [000426] -------N----              |     |  \--*  ADD       byref 
N001 (  3,  2) [000132] ------------              |     |     +--*  LCL_VAR   ref    V00 this         
N002 (  1,  1) [000425] ------------              |     |     \--*  CNS_INT   long   8 field offset Fseq[_myList]
N005 (  1,  1) [000423] ------------              |     \--*  CNS_INT   long   8 field offset Fseq[Head]
N017 ( 12, 11) [000137] ---XG-------              \--*  IND       ref   
N016 ( 10,  9) [000428] ---XG--N----                 \--*  ADD       byref 
N014 (  9,  8) [000136] ---XG-------                    +--*  IND       ref   
N013 (  7,  6) [000430] ---XG--N----                    |  \--*  ADD       byref 
N011 (  6,  5) [000135] ---XG-------                    |     +--*  IND       ref   
N010 (  4,  3) [000432] -------N----                    |     |  \--*  ADD       byref 
N008 (  3,  2) [000134] ------------                    |     |     +--*  LCL_VAR   ref    V00 this         
N009 (  1,  1) [000431] ------------                    |     |     \--*  CNS_INT   long   8 field offset Fseq[_myList]
N012 (  1,  1) [000429] ------------                    |     \--*  CNS_INT   long   8 field offset Fseq[Head]
N015 (  1,  1) [000427] ------------                    \--*  CNS_INT   long   8 field offset Fseq[Next]

***** BB07
STMT00043 (IL 0x0BD...0x0CD)
N005 ( 20, 19) [000146] -AC-----R---              *  ASG       ref   
N004 (  3,  2) [000145] D------N----              +--*  LCL_VAR   ref    V32 tmp14        
N003 ( 16, 16) [000144] --C---------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
N002 (  2, 10) [000143] H----------- arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb6c458b8 token

***** BB07
STMT00045 (IL   ???...  ???)
N009 ( 13, 11) [000150] -A-XG---R---              *  ASG       ref   
N008 (  3,  2) [000149] D------N----              +--*  LCL_VAR   ref    V33 tmp15        
N007 (  9,  8) [000142] ---XG-------              \--*  IND       ref   
N006 (  7,  6) [000435] ---XG--N----                 \--*  ADD       byref 
N004 (  6,  5) [000141] ---XG-------                    +--*  IND       ref   
N003 (  4,  3) [000437] -------N----                    |  \--*  ADD       byref 
N001 (  3,  2) [000140] ------------                    |     +--*  LCL_VAR   ref    V00 this         
N002 (  1,  1) [000436] ------------                    |     \--*  CNS_INT   long   8 field offset Fseq[_myList]
N005 (  1,  1) [000434] ------------                    \--*  CNS_INT   long   8 field offset Fseq[Head]

***** BB07
STMT00044 (IL   ???...  ???)
N003 ( 17,  9) [000148] --CXG-------              *  CALL      void   System.Object..ctor
N002 (  3,  2) [000147] ------------ this in rcx  \--*  LCL_VAR   ref    V32 tmp14        

***** BB07
STMT00046 (IL 0x0CD...  ???)
N006 ( 10,  8) [000154] -A-XG-------              *  ASG       ref   
N004 (  6,  5) [000153] ---XG--N----              +--*  IND       ref   
N003 (  4,  3) [000440] -------N----              |  \--*  ADD       byref 
N001 (  3,  2) [000151] ------------              |     +--*  LCL_VAR   ref    V33 tmp15        
N002 (  1,  1) [000439] ------------              |     \--*  CNS_INT   long   16 field offset Fseq[Data]
N005 (  3,  2) [000152] ------------              \--*  LCL_VAR   ref    V32 tmp14        

***** BB07
STMT00047 (IL 0x0D2...0x0D2)
N001 (  1,  1) [000155] ------------              *  NO_OP     void  

***** BB07
STMT00048 (IL 0x0D3...0x0D3)
N001 (  0,  0) [000156] ------------              *  NOP       void  

------------ BB08 [???..???) -> BB10 (callf), preds={BB07} succs={BB10}

------------ BB09 [???..???) -> BB13 (ALWAYS), preds={BB12} succs={BB13}

------------ BB13 [0E1..0E6), preds={BB09} succs={BB14}

***** BB13
STMT00049 (IL 0x0E1...0x0E1)
N001 (  1,  1) [000157] ------------              *  NO_OP     void  

***** BB13
STMT00050 (IL 0x0E2...0x0E5)
N005 (  9,  7) [000162] -A------R---              *  ASG       int   
N004 (  3,  2) [000161] D------N----              +--*  LCL_VAR   int    V04 loc2         
N003 (  5,  4) [000160] ------------              \--*  ADD       int   
N001 (  3,  2) [000158] ------------                 +--*  LCL_VAR   int    V04 loc2         
N002 (  1,  1) [000159] ------------                 \--*  CNS_INT   int    1

------------ BB14 [0E6..0F1) -> BB06 (cond), preds={BB05,BB13} succs={BB15,BB06}

***** BB14
STMT00030 (IL 0x0E6...0x0EB)
N005 ( 12,  7) [000098] -A------R---              *  ASG       int   
N004 (  3,  2) [000097] D------N----              +--*  LCL_VAR   int    V07 loc5         
N003 (  8,  4) [000096] ------------              \--*  LT        int   
N001 (  3,  2) [000094] ------------                 +--*  LCL_VAR   int    V04 loc2         
N002 (  1,  1) [000095] ------------                 \--*  CNS_INT   int    10

***** BB14
STMT00031 (IL 0x0ED...0x0EF)
N004 (  7,  6) [000102] ------------              *  JTRUE     void  
N003 (  5,  4) [000101] J------N----              \--*  NE        int   
N001 (  3,  2) [000099] ------------                 +--*  LCL_VAR   int    V07 loc5         
N002 (  1,  1) [000100] ------------                 \--*  CNS_INT   int    0

------------ BB15 [0F1..110) -> BB28 (always), preds={BB14} succs={BB28}

***** BB15
STMT00055 (IL 0x0F1...0x0F6)
N003 ( 18,  8) [000174] -ACXG---R---              *  ASG       struct (copy)
N002 (  3,  2) [000172] D------N----              +--*  LCL_VAR   struct<System.DateTime, 8> V34 tmp16        
N001 ( 14,  5) [000171] --CXG-------              \--*  CALL      struct System.DateTime.get_Now

***** BB15
STMT00056 (IL 0x0F6...  ???)
N003 (  7,  5) [000178] -A--G---R---              *  ASG       struct (copy)
N002 (  3,  2) [000176] D---G--N----              +--*  LCL_VAR   struct<System.DateTime, 8>(AX) V03 loc1         
N001 (  3,  2) [000175] ------------              \--*  LCL_VAR   struct<System.DateTime, 8> V34 tmp16        

***** BB15
STMT00057 (IL 0x0F7...0x10D)
N005 ( 21, 13) [000183] -ACXG---R---              *  ASG       ref   
N004 (  3,  2) [000182] D------N----              +--*  LCL_VAR   ref    V35 tmp17        
N003 ( 17, 10) [000181] --CXG-------              \--*  CALL      ref    System.DateTime.ToString
N002 (  3,  3) [000180] ------------ this in rcx     \--*  LCL_VAR_ADDR byref  V03 loc1         

***** BB15
STMT00058 (IL 0x0FE...  ???)
N008 ( 25, 24) [000188] -ACXG---R---              *  ASG       ref   
N007 (  3,  2) [000187] D------N----              +--*  LCL_VAR   ref    V36 tmp18        
N006 ( 21, 21) [000186] --CXG-------              \--*  CALL      ref    System.String.Concat
N004 (  4, 12) [000445] #---G------- arg1 in rdx     +--*  IND       ref   
N003 (  2, 10) [000444] H-----------                 |  \--*  CNS_INT(h) long   0xBE2A3200 "	 Waiting for list processing to complete..."
N005 (  3,  2) [000184] ------------ arg0 in rcx     \--*  LCL_VAR   ref    V35 tmp17        

***** BB15
STMT00059 (IL 0x108...  ???)
N003 ( 17,  8) [000190] --CXG-------              *  CALL      void   System.Console.WriteLine
N002 (  3,  2) [000189] ------------ arg0 in rcx  \--*  LCL_VAR   ref    V36 tmp18        

***** BB15
STMT00060 (IL 0x10D...  ???)
N001 (  1,  1) [000191] ------------              *  NO_OP     void  

***** BB15
STMT00061 (IL 0x10E...0x10E)
N001 (  0,  0) [000192] ------------              *  NOP       void  

------------ BB16 [110..11C), preds={BB28} succs={BB17}

***** BB16
STMT00064 (IL 0x110...0x110)
N001 (  1,  1) [000197] ------------              *  NO_OP     void  

***** BB16
STMT00065 (IL 0x111...0x117)
N006 ( 10,  8) [000201] -A-XG---R---              *  ASG       ref   
N005 (  3,  2) [000200] D------N----              +--*  LCL_VAR   ref    V08 loc6         
N004 (  6,  5) [000199] ---XG-------              \--*  IND       ref   
N003 (  4,  3) [000450] -------N----                 \--*  ADD       byref 
N001 (  3,  2) [000198] ------------                    +--*  LCL_VAR   ref    V00 this         
N002 (  1,  1) [000449] ------------                    \--*  CNS_INT   long   8 field offset Fseq[_myList]

***** BB16
STMT00066 (IL 0x119...0x11A)
N003 (  5,  4) [000204] -A--G---R---              *  ASG       int   
N002 (  3,  2) [000203] D---G--N----              +--*  LCL_VAR   int   (AX) V09 loc7         
N001 (  1,  1) [000202] ------------              \--*  CNS_INT   int    0

------------ BB17 [11C..145) -> BB19 (cond), preds={BB16} succs={BB18,BB19}

***** BB17
STMT00067 (IL 0x11C...0x125)
N005 ( 20, 12) [000208] --CXG-------              *  CALL      void   System.Threading.Monitor.Enter
N003 (  3,  3) [000207] ------------ arg1 in rdx  +--*  LCL_VAR_ADDR long   V09 loc7         
N004 (  3,  2) [000205] ------------ arg0 in rcx  \--*  LCL_VAR   ref    V08 loc6         

***** BB17
STMT00068 (IL 0x125...  ???)
N001 (  1,  1) [000209] ------------              *  NO_OP     void  

***** BB17
STMT00069 (IL 0x126...0x126)
N001 (  1,  1) [000210] ------------              *  NO_OP     void  

***** BB17
STMT00070 (IL 0x127...0x13F)
N017 ( 26, 20) [000219] -A-XG---R---              *  ASG       int   
N016 (  3,  2) [000218] D------N----              +--*  LCL_VAR   int    V10 loc8         
N015 ( 22, 17) [000217] ---XG-------              \--*  EQ        int   
N007 (  9,  8) [000213] ---XG-------                 +--*  IND       ref   
N006 (  7,  6) [000454] ---XG--N----                 |  \--*  ADD       byref 
N004 (  6,  5) [000212] ---XG-------                 |     +--*  IND       ref   
N003 (  4,  3) [000456] -------N----                 |     |  \--*  ADD       byref 
N001 (  3,  2) [000211] ------------                 |     |     +--*  LCL_VAR   ref    V00 this         
N002 (  1,  1) [000455] ------------                 |     |     \--*  CNS_INT   long   8 field offset Fseq[_myList]
N005 (  1,  1) [000453] ------------                 |     \--*  CNS_INT   long   8 field offset Fseq[Head]
N014 (  9,  8) [000216] ---XG-------                 \--*  IND       ref   
N013 (  7,  6) [000458] ---XG--N----                    \--*  ADD       byref 
N011 (  6,  5) [000215] ---XG-------                       +--*  IND       ref   
N010 (  4,  3) [000460] -------N----                       |  \--*  ADD       byref 
N008 (  3,  2) [000214] ------------                       |     +--*  LCL_VAR   ref    V00 this         
N009 (  1,  1) [000459] ------------                       |     \--*  CNS_INT   long   8 field offset Fseq[_myList]
N012 (  1,  1) [000457] ------------                       \--*  CNS_INT   long   16 field offset Fseq[Tail]

***** BB17
STMT00071 (IL 0x141...0x143)
N004 (  7,  6) [000223] ------------              *  JTRUE     void  
N003 (  5,  4) [000222] J------N----              \--*  EQ        int   
N001 (  3,  2) [000220] ------------                 +--*  LCL_VAR   int    V10 loc8         
N002 (  1,  1) [000221] ------------                 \--*  CNS_INT   int    0

------------ BB18 [145..148) -> BB20 (always), preds={BB17} succs={BB20}

***** BB18
STMT00077 (IL 0x145...0x145)
N001 (  1,  1) [000230] ------------              *  NO_OP     void  

***** BB18
STMT00078 (IL 0x146...0x146)
N001 (  0,  0) [000231] ------------              *  NOP       void  

------------ BB19 [148..14B) -> BB22 (always), preds={BB17} succs={BB22}

***** BB19
STMT00072 (IL 0x148...0x148)
N001 (  1,  1) [000224] ------------              *  NO_OP     void  

***** BB19
STMT00073 (IL 0x149...0x149)
N001 (  0,  0) [000225] ------------              *  NOP       void  

------------ BB20 [???..???) -> BB24 (callf), preds={BB18} succs={BB24}

------------ BB21 [???..???) -> BB29 (ALWAYS), preds={BB26} succs={BB29}

------------ BB22 [???..???) -> BB24 (callf), preds={BB19} succs={BB24}

------------ BB23 [???..???) -> BB27 (ALWAYS), preds={BB26} succs={BB27}

------------ BB27 [158..161), preds={BB23} succs={BB28}

***** BB27
STMT00074 (IL 0x158...0x15F)
N003 ( 15,  7) [000227] --CXG-------              *  CALL      void   System.Threading.Thread.Sleep
N002 (  1,  1) [000226] ------------ arg0 in rcx  \--*  CNS_INT   int    100

***** BB27
STMT00075 (IL 0x15F...  ???)
N001 (  1,  1) [000228] ------------              *  NO_OP     void  

***** BB27
STMT00076 (IL 0x160...0x160)
N001 (  1,  1) [000229] ------------              *  NO_OP     void  

------------ BB28 [161..166) -> BB16 (always), preds={BB15,BB27} succs={BB16}

***** BB28
STMT00062 (IL 0x161...0x162)
N003 (  5,  4) [000195] -A------R---              *  ASG       int   
N002 (  3,  2) [000194] D------N----              +--*  LCL_VAR   int    V11 loc9         
N001 (  1,  1) [000193] ------------              \--*  CNS_INT   int    1

***** BB28
STMT00063 (IL 0x164...0x164)
N001 (  0,  0) [000196] ------------              *  NOP       void  

------------ BB29 [166..1B1) -> BB39 (always), preds={BB21} succs={BB39}

***** BB29
STMT00079 (IL 0x166...0x16B)
N003 ( 18,  8) [000235] -ACXG---R---              *  ASG       struct (copy)
N002 (  3,  2) [000233] D------N----              +--*  LCL_VAR   struct<System.DateTime, 8> V37 tmp19        
N001 ( 14,  5) [000232] --CXG-------              \--*  CALL      struct System.DateTime.get_Now

***** BB29
STMT00080 (IL 0x16B...  ???)
N003 (  7,  5) [000239] -A--G---R---              *  ASG       struct (copy)
N002 (  3,  2) [000237] D---G--N----              +--*  LCL_VAR   struct<System.DateTime, 8>(AX) V03 loc1         
N001 (  3,  2) [000236] ------------              \--*  LCL_VAR   struct<System.DateTime, 8> V37 tmp19        

***** BB29
STMT00081 (IL 0x16C...0x182)
N005 ( 21, 13) [000244] -ACXG---R---              *  ASG       ref   
N004 (  3,  2) [000243] D------N----              +--*  LCL_VAR   ref    V38 tmp20        
N003 ( 17, 10) [000242] --CXG-------              \--*  CALL      ref    System.DateTime.ToString
N002 (  3,  3) [000241] ------------ this in rcx     \--*  LCL_VAR_ADDR byref  V03 loc1         

***** BB29
STMT00082 (IL 0x173...  ???)
N008 ( 25, 24) [000249] -ACXG---R---              *  ASG       ref   
N007 (  3,  2) [000248] D------N----              +--*  LCL_VAR   ref    V39 tmp21        
N006 ( 21, 21) [000247] --CXG-------              \--*  CALL      ref    System.String.Concat
N004 (  4, 12) [000467] #---G------- arg1 in rdx     +--*  IND       ref   
N003 (  2, 10) [000466] H-----------                 |  \--*  CNS_INT(h) long   0xBE2A3208 "	 Done.  Profiler is active, available options:"
N005 (  3,  2) [000245] ------------ arg0 in rcx     \--*  LCL_VAR   ref    V38 tmp20        

***** BB29
STMT00083 (IL 0x17D...  ???)
N003 ( 17,  8) [000251] --CXG-------              *  CALL      void   System.Console.WriteLine
N002 (  3,  2) [000250] ------------ arg0 in rcx  \--*  LCL_VAR   ref    V39 tmp21        

***** BB29
STMT00084 (IL 0x182...  ???)
N001 (  1,  1) [000252] ------------              *  NO_OP     void  

***** BB29
STMT00085 (IL 0x183...0x18D)
N004 ( 18, 18) [000254] --CXG-------              *  CALL      void   System.Console.WriteLine
N003 (  4, 12) [000472] #---G------- arg0 in rcx  \--*  IND       ref   
N002 (  2, 10) [000471] H-----------                 \--*  CNS_INT(h) long   0xBE2A3210 "   Q = quit"

***** BB29
STMT00086 (IL 0x18D...  ???)
N001 (  1,  1) [000255] ------------              *  NO_OP     void  

***** BB29
STMT00087 (IL 0x18E...0x198)
N004 ( 18, 18) [000257] --CXG-------              *  CALL      void   System.Console.WriteLine
N003 (  4, 12) [000475] #---G------- arg0 in rcx  \--*  IND       ref   
N002 (  2, 10) [000474] H-----------                 \--*  CNS_INT(h) long   0xBE2A3218 "   H = heap snapshot"

***** BB29
STMT00088 (IL 0x198...  ???)
N001 (  1,  1) [000258] ------------              *  NO_OP     void  

***** BB29
STMT00089 (IL 0x199...0x1A3)
N004 ( 18, 18) [000260] --CXG-------              *  CALL      void   System.Console.WriteLine
N003 (  4, 12) [000478] #---G------- arg0 in rcx  \--*  IND       ref   
N002 (  2, 10) [000477] H-----------                 \--*  CNS_INT(h) long   0xBE2A3220 "   G = GC (max gen)"

***** BB29
STMT00090 (IL 0x1A3...  ???)
N001 (  1,  1) [000261] ------------              *  NO_OP     void  

***** BB29
STMT00091 (IL 0x1A4...0x1AE)
N004 ( 18, 18) [000263] --CXG-------              *  CALL      void   System.Console.WriteLine
N003 (  4, 12) [000481] #---G------- arg0 in rcx  \--*  IND       ref   
N002 (  2, 10) [000480] H-----------                 \--*  CNS_INT(h) long   0xBE2A3228 "   R = clear the running flag to stop the consumer thread"

***** BB29
STMT00092 (IL 0x1AE...  ???)
N001 (  1,  1) [000264] ------------              *  NO_OP     void  

***** BB29
STMT00093 (IL 0x1AF...0x1AF)
N001 (  0,  0) [000265] ------------              *  NOP       void  

------------ BB30 [1B1..1CA) -> BB32 (cond), preds={BB39} succs={BB31,BB32}

***** BB30
STMT00096 (IL 0x1B1...0x1B1)
N001 (  1,  1) [000270] ------------              *  NO_OP     void  

***** BB30
STMT00097 (IL 0x1B2...0x1B7)
N003 ( 17,  9) [000271] S-CXG-------              *  CALL      void   System.Console.ReadKey
N002 (  3,  3) [000273] ------------ arg0 in rcx  \--*  LCL_VAR_ADDR long   V40 tmp22        

***** BB30
STMT00098 (IL 0x1B7...  ???)
N003 (  7,  5) [000277] -A--G---R---              *  ASG       struct (copy)
N002 (  3,  2) [000275] D---G--N----              +--*  LCL_VAR   struct<System.ConsoleKeyInfo, 12>(AX) V12 loc10        
N001 (  3,  2) [000274] ----G-------              \--*  LCL_VAR   struct<System.ConsoleKeyInfo, 12>(AX) V40 tmp22        

***** BB30
STMT00099 (IL 0x1B9...0x1C4)
N005 ( 21, 13) [000282] -ACXG---R---              *  ASG       int   
N004 (  3,  2) [000281] D------N----              +--*  LCL_VAR   int    V41 tmp23        
N003 ( 17, 10) [000280] --CXG-------              \--*  CALL      int    System.ConsoleKeyInfo.get_Key
N002 (  3,  3) [000279] ------------ this in rcx     \--*  LCL_VAR_ADDR byref  V12 loc10        

***** BB30
STMT00100 (IL 0x1C0...  ???)
N005 ( 12,  7) [000287] -A------R---              *  ASG       int   
N004 (  3,  2) [000286] D------N----              +--*  LCL_VAR   int    V13 loc11        
N003 (  8,  4) [000285] ------------              \--*  EQ        int   
N001 (  3,  2) [000283] ------------                 +--*  LCL_VAR   int    V41 tmp23        
N002 (  1,  1) [000284] ------------                 \--*  CNS_INT   int    71

***** BB30
STMT00101 (IL 0x1C6...0x1C8)
N004 (  7,  6) [000291] ------------              *  JTRUE     void  
N003 (  5,  4) [000290] J------N----              \--*  EQ        int   
N001 (  3,  2) [000288] ------------                 +--*  LCL_VAR   int    V13 loc11        
N002 (  1,  1) [000289] ------------                 \--*  CNS_INT   int    0

------------ BB31 [1CA..1D9) -> BB38 (always), preds={BB30} succs={BB38}

***** BB31
STMT00125 (IL 0x1CA...0x1CA)
N001 (  1,  1) [000354] ------------              *  NO_OP     void  

***** BB31
STMT00126 (IL 0x1CB...0x1D5)
N003 ( 18,  8) [000357] -ACXG---R---              *  ASG       int   
N002 (  3,  2) [000356] D------N----              +--*  LCL_VAR   int    V45 tmp27        
N001 ( 14,  5) [000355] --CXG-------              \--*  CALL      int    System.GC.get_MaxGeneration

***** BB31
STMT00127 (IL 0x1D0...  ???)
N003 ( 17,  8) [000359] --CXG-------              *  CALL      void   System.GC.Collect
N002 (  3,  2) [000358] ------------ arg0 in rcx  \--*  LCL_VAR   int    V45 tmp27        

***** BB31
STMT00128 (IL 0x1D5...  ???)
N001 (  1,  1) [000360] ------------              *  NO_OP     void  

***** BB31
STMT00129 (IL 0x1D6...0x1D6)
N001 (  1,  1) [000361] ------------              *  NO_OP     void  

***** BB31
STMT00130 (IL 0x1D7...0x1D7)
N001 (  0,  0) [000362] ------------              *  NOP       void  

------------ BB32 [1D9..1EA) -> BB34 (cond), preds={BB30} succs={BB33,BB34}

***** BB32
STMT00102 (IL 0x1D9...0x1E4)
N005 ( 21, 13) [000296] -ACXG---R---              *  ASG       int   
N004 (  3,  2) [000295] D------N----              +--*  LCL_VAR   int    V42 tmp24        
N003 ( 17, 10) [000294] --CXG-------              \--*  CALL      int    System.ConsoleKeyInfo.get_Key
N002 (  3,  3) [000293] ------------ this in rcx     \--*  LCL_VAR_ADDR byref  V12 loc10        

***** BB32
STMT00103 (IL 0x1E0...  ???)
N005 ( 12,  7) [000301] -A------R---              *  ASG       int   
N004 (  3,  2) [000300] D------N----              +--*  LCL_VAR   int    V14 loc12        
N003 (  8,  4) [000299] ------------              \--*  EQ        int   
N001 (  3,  2) [000297] ------------                 +--*  LCL_VAR   int    V42 tmp24        
N002 (  1,  1) [000298] ------------                 \--*  CNS_INT   int    72

***** BB32
STMT00104 (IL 0x1E6...0x1E8)
N004 (  7,  6) [000305] ------------              *  JTRUE     void  
N003 (  5,  4) [000304] J------N----              \--*  EQ        int   
N001 (  3,  2) [000302] ------------                 +--*  LCL_VAR   int    V14 loc12        
N002 (  1,  1) [000303] ------------                 \--*  CNS_INT   int    0

------------ BB33 [1EA..1F4) -> BB38 (always), preds={BB32} succs={BB38}

***** BB33
STMT00120 (IL 0x1EA...0x1EA)
N001 (  1,  1) [000349] ------------              *  NO_OP     void  

***** BB33
STMT00121 (IL 0x1EB...0x1F0)
N001 ( 14,  5) [000350] --CXG-------              *  CALL      void   System.Diagnostics.Debugger.Break

***** BB33
STMT00122 (IL 0x1F0...  ???)
N001 (  1,  1) [000351] ------------              *  NO_OP     void  

***** BB33
STMT00123 (IL 0x1F1...0x1F1)
N001 (  1,  1) [000352] ------------              *  NO_OP     void  

***** BB33
STMT00124 (IL 0x1F2...0x1F2)
N001 (  0,  0) [000353] ------------              *  NOP       void  

------------ BB34 [1F4..205) -> BB36 (cond), preds={BB32} succs={BB35,BB36}

***** BB34
STMT00105 (IL 0x1F4...0x1FF)
N005 ( 21, 13) [000310] -ACXG---R---              *  ASG       int   
N004 (  3,  2) [000309] D------N----              +--*  LCL_VAR   int    V43 tmp25        
N003 ( 17, 10) [000308] --CXG-------              \--*  CALL      int    System.ConsoleKeyInfo.get_Key
N002 (  3,  3) [000307] ------------ this in rcx     \--*  LCL_VAR_ADDR byref  V12 loc10        

***** BB34
STMT00106 (IL 0x1FB...  ???)
N005 ( 12,  7) [000315] -A------R---              *  ASG       int   
N004 (  3,  2) [000314] D------N----              +--*  LCL_VAR   int    V15 loc13        
N003 (  8,  4) [000313] ------------              \--*  EQ        int   
N001 (  3,  2) [000311] ------------                 +--*  LCL_VAR   int    V43 tmp25        
N002 (  1,  1) [000312] ------------                 \--*  CNS_INT   int    82

***** BB34
STMT00107 (IL 0x201...0x203)
N004 (  7,  6) [000319] ------------              *  JTRUE     void  
N003 (  5,  4) [000318] J------N----              \--*  EQ        int   
N001 (  3,  2) [000316] ------------                 +--*  LCL_VAR   int    V15 loc13        
N002 (  1,  1) [000317] ------------                 \--*  CNS_INT   int    0

------------ BB35 [205..210) -> BB38 (always), preds={BB34} succs={BB38}

***** BB35
STMT00116 (IL 0x205...0x205)
N001 (  1,  1) [000342] ------------              *  NO_OP     void  

***** BB35
STMT00117 (IL 0x206...0x208)
N006 (  9,  8) [000346] -A-XG-------              *  ASG       bool  
N004 (  7,  6) [000345] ---XG--N----              +--*  IND       bool  
N003 (  4,  3) [000489] -------N----              |  \--*  ADD       byref 
N001 (  3,  2) [000343] ------------              |     +--*  LCL_VAR   ref    V00 this         
N002 (  1,  1) [000488] ------------              |     \--*  CNS_INT   long   16 field offset Fseq[_running]
N005 (  1,  1) [000344] ------------              \--*  CNS_INT   int    0

***** BB35
STMT00118 (IL 0x20D...0x20D)
N001 (  1,  1) [000347] ------------              *  NO_OP     void  

***** BB35
STMT00119 (IL 0x20E...0x20E)
N001 (  0,  0) [000348] ------------              *  NOP       void  

------------ BB36 [210..221) -> BB38 (cond), preds={BB34} succs={BB37,BB38}

***** BB36
STMT00108 (IL 0x210...0x21B)
N005 ( 21, 13) [000324] -ACXG---R---              *  ASG       int   
N004 (  3,  2) [000323] D------N----              +--*  LCL_VAR   int    V44 tmp26        
N003 ( 17, 10) [000322] --CXG-------              \--*  CALL      int    System.ConsoleKeyInfo.get_Key
N002 (  3,  3) [000321] ------------ this in rcx     \--*  LCL_VAR_ADDR byref  V12 loc10        

***** BB36
STMT00109 (IL 0x217...  ???)
N005 ( 12,  7) [000329] -A------R---              *  ASG       int   
N004 (  3,  2) [000328] D------N----              +--*  LCL_VAR   int    V16 loc14        
N003 (  8,  4) [000327] ------------              \--*  EQ        int   
N001 (  3,  2) [000325] ------------                 +--*  LCL_VAR   int    V44 tmp26        
N002 (  1,  1) [000326] ------------                 \--*  CNS_INT   int    81

***** BB36
STMT00110 (IL 0x21D...0x21F)
N004 (  7,  6) [000333] ------------              *  JTRUE     void  
N003 (  5,  4) [000332] J------N----              \--*  EQ        int   
N001 (  3,  2) [000330] ------------                 +--*  LCL_VAR   int    V16 loc14        
N002 (  1,  1) [000331] ------------                 \--*  CNS_INT   int    0

------------ BB37 [221..224) -> BB40 (always), preds={BB36} succs={BB40}

***** BB37
STMT00112 (IL 0x221...0x221)
N001 (  1,  1) [000335] ------------              *  NO_OP     void  

***** BB37
STMT00113 (IL 0x222...0x222)
N001 (  0,  0) [000336] ------------              *  NOP       void  

------------ BB38 [224..225), preds={BB31,BB33,BB35,BB36} succs={BB39}

***** BB38
STMT00111 (IL 0x224...0x224)
N001 (  1,  1) [000334] ------------              *  NO_OP     void  

------------ BB39 [225..22A) -> BB30 (always), preds={BB29,BB38} succs={BB30}

***** BB39
STMT00094 (IL 0x225...0x226)
N003 (  5,  4) [000268] -A------R---              *  ASG       int   
N002 (  3,  2) [000267] D------N----              +--*  LCL_VAR   int    V17 loc15        
N001 (  1,  1) [000266] ------------              \--*  CNS_INT   int    1

***** BB39
STMT00095 (IL 0x228...0x228)
N001 (  0,  0) [000269] ------------              *  NOP       void  

------------ BB40 [22A..232) (return), preds={BB37} succs={}

***** BB40
STMT00114 (IL 0x22A...0x22C)
N006 (  9,  8) [000340] -A-XG-------              *  ASG       bool  
N004 (  7,  6) [000339] ---XG--N----              +--*  IND       bool  
N003 (  4,  3) [000493] -------N----              |  \--*  ADD       byref 
N001 (  3,  2) [000337] ------------              |     +--*  LCL_VAR   ref    V00 this         
N002 (  1,  1) [000492] ------------              |     \--*  CNS_INT   long   16 field offset Fseq[_running]
N005 (  1,  1) [000338] ------------              \--*  CNS_INT   int    0

***** BB40
STMT00115 (IL 0x231...0x231)
N001 (  0,  0) [000341] ------------              *  RETURN    void  

------------ BB10 [0D5..0D9) -> BB12 (cond), preds={BB08} succs={BB11,BB12}

***** BB10
STMT00051 (IL 0x0D5...0x0D7)
N005 (  8,  8) [000166] ----G-------              *  JTRUE     void  
N004 (  6,  6) [000165] J---G--N----              \--*  EQ        int   
N002 (  4,  4) [000441] ----G-------                 +--*  CAST      int <- bool <- int
N001 (  3,  2) [000163] ----G-------                 |  \--*  LCL_VAR   int   (AX) V06 loc4         
N003 (  1,  1) [000164] ------------                 \--*  CNS_INT   int    0

------------ BB11 [0D9..0E0), preds={BB10} succs={BB12}

***** BB11
STMT00053 (IL 0x0D9...0x0DF)
N003 ( 17,  8) [000169] --CXG-------              *  CALL      void   System.Threading.Monitor.Exit
N002 (  3,  2) [000168] ------------ arg0 in rcx  \--*  LCL_VAR   ref    V05 loc3         

***** BB11
STMT00054 (IL 0x0DF...  ???)
N001 (  1,  1) [000170] ------------              *  NO_OP     void  

------------ BB12 [0E0..0E1) (finret), preds={BB10,BB11} succs={BB09}

***** BB12
STMT00052 (IL 0x0E0...0x0E0)
N001 (  0,  0) [000167] ------------              *  RETFILT   void  

------------ BB24 [14B..14F) -> BB26 (cond), preds={BB20,BB22} succs={BB25,BB26}

***** BB24
STMT00131 (IL 0x14B...0x14D)
N005 (  8,  8) [000366] ----G-------              *  JTRUE     void  
N004 (  6,  6) [000365] J---G--N----              \--*  EQ        int   
N002 (  4,  4) [000461] ----G-------                 +--*  CAST      int <- bool <- int
N001 (  3,  2) [000363] ----G-------                 |  \--*  LCL_VAR   int   (AX) V09 loc7         
N003 (  1,  1) [000364] ------------                 \--*  CNS_INT   int    0

------------ BB25 [14F..157), preds={BB24} succs={BB26}

***** BB25
STMT00133 (IL 0x14F...0x156)
N003 ( 17,  8) [000369] --CXG-------              *  CALL      void   System.Threading.Monitor.Exit
N002 (  3,  2) [000368] ------------ arg0 in rcx  \--*  LCL_VAR   ref    V08 loc6         

***** BB25
STMT00134 (IL 0x156...  ???)
N001 (  1,  1) [000370] ------------              *  NO_OP     void  

------------ BB26 [157..158) (finret), preds={BB24,BB25} succs={BB21,BB23}

***** BB26
STMT00132 (IL 0x157...0x157)
N001 (  0,  0) [000367] ------------              *  RETFILT   void  

-------------------------------------------------------------------------------------------------------------------

*************** Starting PHASE Rationalize IR
rewriting asg(LCL_VAR, X) to STORE_LCL_VAR(X)
N003 ( 18,  8) [000005] DACXG-------              *  STORE_LCL_VAR struct<System.DateTime, 8> V19 tmp1         

rewriting asg(LCL_VAR, X) to STORE_LCL_VAR(X)
N003 (  7,  5) [000009] DA--G-------              *  STORE_LCL_VAR struct<System.DateTime, 8>(AX) V03 loc1         

rewriting asg(LCL_VAR, X) to STORE_LCL_VAR(X)
N005 ( 21, 13) [000014] DACXG-------              *  STORE_LCL_VAR ref    V20 tmp2         

rewriting asg(LCL_VAR, X) to STORE_LCL_VAR(X)
N008 ( 25, 24) [000019] DACXG-------              *  STORE_LCL_VAR ref    V21 tmp3         

rewriting asg(LCL_VAR, X) to STORE_LCL_VAR(X)
N005 ( 20, 19) [000027] DAC---------              *  STORE_LCL_VAR ref    V22 tmp4         

rewriting asg(LCL_VAR, X) to STORE_LCL_VAR(X)
N005 ( 20, 19) [000039] DAC---------              *  STORE_LCL_VAR ref    V23 tmp5         

rewriting asg(LCL_VAR, X) to STORE_LCL_VAR(X)
N009 ( 13, 11) [000043] DA-XG-------              *  STORE_LCL_VAR ref    V24 tmp6         

rewriting asg(LCL_VAR, X) to STORE_LCL_VAR(X)
N005 ( 20, 19) [000053] DAC---------              *  STORE_LCL_VAR ref    V25 tmp7         

rewriting asg(LCL_VAR, X) to STORE_LCL_VAR(X)
N005 ( 20, 19) [000060] DAC---------              *  STORE_LCL_VAR ref    V26 tmp8         

rewriting asg(LCL_VAR, X) to STORE_LCL_VAR(X)
N003 (  7,  5) [000065] DA----------              *  STORE_LCL_VAR ref    V02 loc0         

rewriting asg(LCL_VAR, X) to STORE_LCL_VAR(X)
N003 ( 18,  8) [000072] DACXG-------              *  STORE_LCL_VAR struct<System.DateTime, 8> V27 tmp9         

rewriting asg(LCL_VAR, X) to STORE_LCL_VAR(X)
N003 (  7,  5) [000076] DA--G-------              *  STORE_LCL_VAR struct<System.DateTime, 8>(AX) V03 loc1         

rewriting asg(LCL_VAR, X) to STORE_LCL_VAR(X)
N005 ( 21, 13) [000081] DACXG-------              *  STORE_LCL_VAR ref    V28 tmp10        

rewriting asg(LCL_VAR, X) to STORE_LCL_VAR(X)
N008 ( 25, 24) [000086] DACXG-------              *  STORE_LCL_VAR ref    V29 tmp11        

rewriting asg(LCL_VAR, X) to STORE_LCL_VAR(X)
N003 (  5,  4) [000092] DA----------              *  STORE_LCL_VAR int    V04 loc2         

rewriting asg(LCL_VAR, X) to STORE_LCL_VAR(X)
N006 ( 10,  8) [000107] DA-XG-------              *  STORE_LCL_VAR ref    V05 loc3         

rewriting asg(LCL_VAR, X) to STORE_LCL_VAR(X)
N003 (  5,  4) [000110] DA--G-------              *  STORE_LCL_VAR int   (AX) V06 loc4         

rewriting asg(LCL_VAR, X) to STORE_LCL_VAR(X)
N005 ( 20, 19) [000123] DAC---------              *  STORE_LCL_VAR ref    V30 tmp12        

rewriting asg(LCL_VAR, X) to STORE_LCL_VAR(X)
N009 ( 13, 11) [000127] DA-XG-------              *  STORE_LCL_VAR ref    V31 tmp13        

rewriting asg(LCL_VAR, X) to STORE_LCL_VAR(X)
N005 ( 20, 19) [000146] DAC---------              *  STORE_LCL_VAR ref    V32 tmp14        

rewriting asg(LCL_VAR, X) to STORE_LCL_VAR(X)
N009 ( 13, 11) [000150] DA-XG-------              *  STORE_LCL_VAR ref    V33 tmp15        

rewriting asg(LCL_VAR, X) to STORE_LCL_VAR(X)
N005 (  9,  7) [000162] DA----------              *  STORE_LCL_VAR int    V04 loc2         

rewriting asg(LCL_VAR, X) to STORE_LCL_VAR(X)
N005 ( 12,  7) [000098] DA----------              *  STORE_LCL_VAR int    V07 loc5         

rewriting asg(LCL_VAR, X) to STORE_LCL_VAR(X)
N003 ( 18,  8) [000174] DACXG-------              *  STORE_LCL_VAR struct<System.DateTime, 8> V34 tmp16        

rewriting asg(LCL_VAR, X) to STORE_LCL_VAR(X)
N003 (  7,  5) [000178] DA--G-------              *  STORE_LCL_VAR struct<System.DateTime, 8>(AX) V03 loc1         

rewriting asg(LCL_VAR, X) to STORE_LCL_VAR(X)
N005 ( 21, 13) [000183] DACXG-------              *  STORE_LCL_VAR ref    V35 tmp17        

rewriting asg(LCL_VAR, X) to STORE_LCL_VAR(X)
N008 ( 25, 24) [000188] DACXG-------              *  STORE_LCL_VAR ref    V36 tmp18        

rewriting asg(LCL_VAR, X) to STORE_LCL_VAR(X)
N006 ( 10,  8) [000201] DA-XG-------              *  STORE_LCL_VAR ref    V08 loc6         

rewriting asg(LCL_VAR, X) to STORE_LCL_VAR(X)
N003 (  5,  4) [000204] DA--G-------              *  STORE_LCL_VAR int   (AX) V09 loc7         

rewriting asg(LCL_VAR, X) to STORE_LCL_VAR(X)
N017 ( 26, 20) [000219] DA-XG-------              *  STORE_LCL_VAR int    V10 loc8         

rewriting asg(LCL_VAR, X) to STORE_LCL_VAR(X)
N003 (  5,  4) [000195] DA----------              *  STORE_LCL_VAR int    V11 loc9         

rewriting asg(LCL_VAR, X) to STORE_LCL_VAR(X)
N003 ( 18,  8) [000235] DACXG-------              *  STORE_LCL_VAR struct<System.DateTime, 8> V37 tmp19        

rewriting asg(LCL_VAR, X) to STORE_LCL_VAR(X)
N003 (  7,  5) [000239] DA--G-------              *  STORE_LCL_VAR struct<System.DateTime, 8>(AX) V03 loc1         

rewriting asg(LCL_VAR, X) to STORE_LCL_VAR(X)
N005 ( 21, 13) [000244] DACXG-------              *  STORE_LCL_VAR ref    V38 tmp20        

rewriting asg(LCL_VAR, X) to STORE_LCL_VAR(X)
N008 ( 25, 24) [000249] DACXG-------              *  STORE_LCL_VAR ref    V39 tmp21        

rewriting asg(LCL_VAR, X) to STORE_LCL_VAR(X)
N003 (  7,  5) [000277] DA--G-------              *  STORE_LCL_VAR struct<System.ConsoleKeyInfo, 12>(AX) V12 loc10        

rewriting asg(LCL_VAR, X) to STORE_LCL_VAR(X)
N005 ( 21, 13) [000282] DACXG-------              *  STORE_LCL_VAR int    V41 tmp23        

rewriting asg(LCL_VAR, X) to STORE_LCL_VAR(X)
N005 ( 12,  7) [000287] DA----------              *  STORE_LCL_VAR int    V13 loc11        

rewriting asg(LCL_VAR, X) to STORE_LCL_VAR(X)
N003 ( 18,  8) [000357] DACXG-------              *  STORE_LCL_VAR int    V45 tmp27        

rewriting asg(LCL_VAR, X) to STORE_LCL_VAR(X)
N005 ( 21, 13) [000296] DACXG-------              *  STORE_LCL_VAR int    V42 tmp24        

rewriting asg(LCL_VAR, X) to STORE_LCL_VAR(X)
N005 ( 12,  7) [000301] DA----------              *  STORE_LCL_VAR int    V14 loc12        

rewriting asg(LCL_VAR, X) to STORE_LCL_VAR(X)
N005 ( 21, 13) [000310] DACXG-------              *  STORE_LCL_VAR int    V43 tmp25        

rewriting asg(LCL_VAR, X) to STORE_LCL_VAR(X)
N005 ( 12,  7) [000315] DA----------              *  STORE_LCL_VAR int    V15 loc13        

rewriting asg(LCL_VAR, X) to STORE_LCL_VAR(X)
N005 ( 21, 13) [000324] DACXG-------              *  STORE_LCL_VAR int    V44 tmp26        

rewriting asg(LCL_VAR, X) to STORE_LCL_VAR(X)
N005 ( 12,  7) [000329] DA----------              *  STORE_LCL_VAR int    V16 loc14        

rewriting asg(LCL_VAR, X) to STORE_LCL_VAR(X)
N003 (  5,  4) [000268] DA----------              *  STORE_LCL_VAR int    V17 loc15        


*************** Finishing PHASE Rationalize IR
Trees after Rationalize IR

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [???..???)                                     i internal hascall LIR 
BB02 [0038]  1       BB01                  1       [???..???)-> BB04 ( cond )                     internal LIR 
BB03 [0039]  1       BB02                  0.50    [???..???)                                     internal LIR 
BB04 [0037]  2       BB02,BB03             1       [???..???)                                     i internal hascall LIR 
BB05 [0001]  1       BB04                  1       [000..078)-> BB14 (always)                     i hascall gcsafe newobj LIR 
BB06 [0002]  1       BB14                  1       [078..083)                                     i bwd bwd-target LIR 
BB07 [0003]  1  0    BB06                  1       [083..0D5)-> BB08 (always) T0      try { }     keep i try hascall gcsafe newobj bwd LIR 
BB08 [0031]  1       BB07                  1       [???..???)-> BB10 (callf )                     i internal LIR 
BB09 [0032]  1       BB12                  1       [???..???)-> BB13 (ALWAYS)                     i internal LIR KEEP 
BB13 [0007]  1       BB09                  1       [0E1..0E6)                                     i bwd LIR 
BB14 [0008]  2       BB05,BB13             1       [0E6..0F1)-> BB06 ( cond )                     i bwd LIR 
BB15 [0009]  1       BB14                  1       [0F1..110)-> BB28 (always)                     i hascall gcsafe LIR 
BB16 [0010]  1       BB28                  1       [110..11C)                                     i bwd bwd-target LIR 
BB17 [0011]  1  1    BB16                  1       [11C..145)-> BB19 ( cond ) T1      try {       keep i try hascall gcsafe bwd LIR 
BB18 [0012]  1  1    BB17                  1       [145..148)-> BB20 (always) T1                  i bwd LIR 
BB19 [0013]  1  1    BB17                  1       [148..14B)-> BB22 (always) T1      }           i bwd LIR 
BB20 [0035]  1       BB18                  1       [???..???)-> BB24 (callf )                     i internal LIR 
BB21 [0036]  1       BB26                  1       [???..???)-> BB29 (ALWAYS)                     i internal LIR KEEP 
BB22 [0033]  1       BB19                  1       [???..???)-> BB24 (callf )                     i internal LIR 
BB23 [0034]  1       BB26                  1       [???..???)-> BB27 (ALWAYS)                     i internal LIR KEEP 
BB27 [0017]  1       BB23                  1       [158..161)                                     i hascall gcsafe bwd LIR 
BB28 [0018]  2       BB15,BB27             1       [161..166)-> BB16 (always)                     i bwd LIR 
BB29 [0019]  1       BB21                  1       [166..1B1)-> BB39 (always)                     i hascall gcsafe LIR 
BB30 [0020]  1       BB39                  1       [1B1..1CA)-> BB32 ( cond )                     i hascall gcsafe bwd bwd-target LIR 
BB31 [0021]  1       BB30                  1       [1CA..1D9)-> BB38 (always)                     i hascall gcsafe bwd LIR 
BB32 [0022]  1       BB30                  1       [1D9..1EA)-> BB34 ( cond )                     i hascall gcsafe bwd LIR 
BB33 [0023]  1       BB32                  1       [1EA..1F4)-> BB38 (always)                     i hascall gcsafe bwd LIR 
BB34 [0024]  1       BB32                  1       [1F4..205)-> BB36 ( cond )                     i hascall gcsafe bwd LIR 
BB35 [0025]  1       BB34                  1       [205..210)-> BB38 (always)                     i bwd LIR 
BB36 [0026]  1       BB34                  1       [210..221)-> BB38 ( cond )                     i hascall gcsafe bwd LIR 
BB37 [0027]  1       BB36                  1       [221..224)-> BB40 (always)                     i bwd LIR 
BB38 [0028]  4       BB31,BB33,BB35,BB36   1       [224..225)                                     i bwd LIR 
BB39 [0029]  2       BB29,BB38             1       [225..22A)-> BB30 (always)                     i bwd LIR 
BB40 [0030]  1       BB37                  1       [22A..232)        (return)                     i LIR 
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ funclets follow
BB10 [0004]  2     0 BB08                  1       [0D5..0D9)-> BB12 ( cond )    H0 F finally {   keep i flet bwd LIR 
BB11 [0005]  1     0 BB10                  1       [0D9..0E0)                    H0               i hascall bwd LIR 
BB12 [0006]  2     0 BB10,BB11             1       [0E0..0E1)        (finret)    H0   }           i bwd LIR 
BB24 [0014]  3     1 BB20,BB22             1       [14B..14F)-> BB26 ( cond )    H1 F finally {   keep i flet bwd LIR 
BB25 [0015]  1     1 BB24                  1       [14F..157)                    H1               i hascall bwd LIR 
BB26 [0016]  2     1 BB24,BB25             1       [157..158)        (finret)    H1   }           i bwd LIR 
-----------------------------------------------------------------------------------------------------------------------------------------

------------ BB01 [???..???), preds={} succs={BB02}
N001 (  0,  0) [000000] ------------                 NOP       void  

------------ BB02 [???..???) -> BB04 (cond), preds={BB01} succs={BB03,BB04}
N001 (  2, 10) [000371] H-----------       t371 =    CNS_INT(h) long   0x7ffdb6f1d838 global ptr
                                                  /--*  t371   long   
N002 (  4, 12) [000372] n-----------       t372 = *  IND       int   
N003 (  1,  1) [000373] ------------       t373 =    CNS_INT   int    0
                                                  /--*  t372   int    
                                                  +--*  t373   int    
N004 (  6, 14) [000374] J------N----       t374 = *  EQ        int   
                                                  /--*  t374   int    
N005 (  8, 16) [000494] ------------              *  JTRUE     void  

------------ BB03 [???..???), preds={BB02} succs={BB04}
N001 ( 14,  5) [000375] --C-G-?-----                 CALL help void   HELPER.CORINFO_HELP_DBG_IS_JUST_MY_CODE

------------ BB04 [???..???), preds={BB02,BB03} succs={BB05}

------------ BB05 [000..078) -> BB14 (always), preds={BB04} succs={BB14}
               [000495] ------------                 IL_OFFSET void   IL offset: 0x0
N001 (  1,  1) [000001] ------------                 NO_OP     void  
               [000496] ------------                 IL_OFFSET void   IL offset: 0x1
N001 ( 14,  5) [000002] --CXG-------         t2 =    CALL      struct System.DateTime.get_Now
                                                  /--*  t2     struct 
N003 ( 18,  8) [000005] DA-XG-------              *  STORE_LCL_VAR struct<System.DateTime, 8> V19 tmp1         
               [000497] ------------                 IL_OFFSET void   IL offset: 0x6
N001 (  3,  2) [000006] ------------         t6 =    LCL_VAR   struct<System.DateTime, 8> V19 tmp1         
                                                  /--*  t6     struct 
N003 (  7,  5) [000009] DA--G-------              *  STORE_LCL_VAR struct<System.DateTime, 8>(AX) V03 loc1         
               [000498] ------------                 IL_OFFSET void   IL offset: 0x7
N002 (  3,  3) [000011] ------------        t11 =    LCL_VAR_ADDR byref  V03 loc1         
                                                  /--*  t11    byref  this in rcx
N003 ( 17, 10) [000012] --CXG-------        t12 = *  CALL      ref    System.DateTime.ToString
                                                  /--*  t12    ref    
N005 ( 21, 13) [000014] DA-XG-------              *  STORE_LCL_VAR ref    V20 tmp2         
               [000499] ------------                 IL_OFFSET void   IL offset: 0xe
N003 (  2, 10) [000380] H-----------       t380 =    CNS_INT(h) long   0xBE2A31F0 "	 Created list"
                                                  /--*  t380   long   
N004 (  4, 12) [000381] #---G-------       t381 = *  IND       ref   
N005 (  3,  2) [000015] ------------        t15 =    LCL_VAR   ref    V20 tmp2         
                                                  /--*  t381   ref    arg1 in rdx
                                                  +--*  t15    ref    arg0 in rcx
N006 ( 21, 21) [000017] --CXG-------        t17 = *  CALL      ref    System.String.Concat
                                                  /--*  t17    ref    
N008 ( 25, 24) [000019] DA-XG-------              *  STORE_LCL_VAR ref    V21 tmp3         
               [000500] ------------                 IL_OFFSET void   IL offset: 0x18
N002 (  3,  2) [000020] ------------        t20 =    LCL_VAR   ref    V21 tmp3         
                                                  /--*  t20    ref    arg0 in rcx
N003 ( 17,  8) [000021] --CXG-------              *  CALL      void   System.Console.WriteLine
               [000501] ------------                 IL_OFFSET void   IL offset: 0x1d
N001 (  1,  1) [000022] ------------                 NO_OP     void  
               [000502] ------------                 IL_OFFSET void   IL offset: 0x1e
N002 (  2, 10) [000024] H-----------        t24 =    CNS_INT(h) long   0x7ffdb7022b70 method
                                                  /--*  t24    long   arg0 in rcx
N003 ( 16, 16) [000025] --C---------        t25 = *  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
                                                  /--*  t25    ref    
N005 ( 20, 19) [000027] DA----------              *  STORE_LCL_VAR ref    V22 tmp4         
N002 (  3,  2) [000028] ------------        t28 =    LCL_VAR   ref    V22 tmp4         
                                                  /--*  t28    ref    this in rcx
N003 ( 17,  9) [000029] --CXG-------              *  CALL      void   FalseLeakRepro.List..ctor
               [000503] ------------                 IL_OFFSET void   IL offset: 0x24
N001 (  3,  2) [000023] ------------        t23 =    LCL_VAR   ref    V00 this         
N002 (  1,  1) [000387] ------------       t387 =    CNS_INT   long   8 field offset Fseq[_myList]
                                                  /--*  t23    ref    
                                                  +--*  t387   long   
N003 (  4,  3) [000388] -------N----       t388 = *  ADD       byref 
N005 (  3,  2) [000030] ------------        t30 =    LCL_VAR   ref    V22 tmp4         
                                                  /--*  t388   byref  
                                                  +--*  t30    ref    
               [000504] -A-XG-------              *  STOREIND  ref   
               [000505] ------------                 IL_OFFSET void   IL offset: 0x29
N002 (  2, 10) [000036] H-----------        t36 =    CNS_INT(h) long   0x7ffdb6c458b8 token
                                                  /--*  t36    long   arg0 in rcx
N003 ( 16, 16) [000037] --C---------        t37 = *  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
                                                  /--*  t37    ref    
N005 ( 20, 19) [000039] DA----------              *  STORE_LCL_VAR ref    V23 tmp5         
N001 (  3,  2) [000033] ------------        t33 =    LCL_VAR   ref    V00 this         
N002 (  1,  1) [000392] ------------       t392 =    CNS_INT   long   8 field offset Fseq[_myList]
                                                  /--*  t33    ref    
                                                  +--*  t392   long   
N003 (  4,  3) [000393] -------N----       t393 = *  ADD       byref 
                                                  /--*  t393   byref  
N004 (  6,  5) [000034] ---XG-------        t34 = *  IND       ref   
N005 (  1,  1) [000390] ------------       t390 =    CNS_INT   long   8 field offset Fseq[Head]
                                                  /--*  t34    ref    
                                                  +--*  t390   long   
N006 (  7,  6) [000391] ---XG--N----       t391 = *  ADD       byref 
                                                  /--*  t391   byref  
N007 (  9,  8) [000035] ---XG-------        t35 = *  IND       ref   
                                                  /--*  t35    ref    
N009 ( 13, 11) [000043] DA-XG-------              *  STORE_LCL_VAR ref    V24 tmp6         
N002 (  3,  2) [000040] ------------        t40 =    LCL_VAR   ref    V23 tmp5         
                                                  /--*  t40    ref    this in rcx
N003 ( 17,  9) [000041] --CXG-------              *  CALL      void   System.Object..ctor
               [000506] ------------                 IL_OFFSET void   IL offset: 0x39
N001 (  3,  2) [000044] ------------        t44 =    LCL_VAR   ref    V24 tmp6         
N002 (  1,  1) [000395] ------------       t395 =    CNS_INT   long   16 field offset Fseq[Data]
                                                  /--*  t44    ref    
                                                  +--*  t395   long   
N003 (  4,  3) [000396] -------N----       t396 = *  ADD       byref 
N005 (  3,  2) [000045] ------------        t45 =    LCL_VAR   ref    V23 tmp5         
                                                  /--*  t396   byref  
                                                  +--*  t45    ref    
               [000507] -A-XG-------              *  STOREIND  ref   
               [000508] ------------                 IL_OFFSET void   IL offset: 0x3e
N002 (  2, 10) [000050] H-----------        t50 =    CNS_INT(h) long   0x7ffdb7026348 token
                                                  /--*  t50    long   arg0 in rcx
N003 ( 16, 16) [000051] --C---------        t51 = *  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
                                                  /--*  t51    ref    
N005 ( 20, 19) [000053] DA----------              *  STORE_LCL_VAR ref    V25 tmp7         
N004 (  3,  2) [000054] ------------        t54 =    LCL_VAR   ref    V25 tmp7         
N005 (  3,  2) [000048] ------------        t48 =    LCL_VAR   ref    V00 this         
N006 (  2, 10) [000049] H-----------        t49 =    CNS_INT(h) long   0x7ffdb6c613f8 ftn
                                                  /--*  t54    ref    this in rcx
                                                  +--*  t48    ref    arg1 in rdx
                                                  +--*  t49    long   arg2 in r8
N007 ( 22, 23) [000055] --CXG-------              *  CALL      void   System.MulticastDelegate.CtorClosed
               [000509] ------------                 IL_OFFSET void   IL offset: 0x4a
N002 (  2, 10) [000057] H-----------        t57 =    CNS_INT(h) long   0x7ffdb6dc4e80 token
                                                  /--*  t57    long   arg0 in rcx
N003 ( 16, 16) [000058] --C---------        t58 = *  CALL help ref    HELPER.CORINFO_HELP_NEWFAST
                                                  /--*  t58    ref    
N005 ( 20, 19) [000060] DA----------              *  STORE_LCL_VAR ref    V26 tmp8         
N003 (  3,  2) [000061] ------------        t61 =    LCL_VAR   ref    V26 tmp8         
N004 (  3,  2) [000056] ------------        t56 =    LCL_VAR   ref    V25 tmp7         
                                                  /--*  t61    ref    this in rcx
                                                  +--*  t56    ref    arg1 in rdx
N005 ( 20, 12) [000062] --CXG-------              *  CALL      void   System.Threading.Thread..ctor
               [000510] ------------                 IL_OFFSET void   IL offset: 0x4f
N001 (  3,  2) [000063] ------------        t63 =    LCL_VAR   ref    V26 tmp8         
                                                  /--*  t63    ref    
N003 (  7,  5) [000065] DA----------              *  STORE_LCL_VAR ref    V02 loc0         
               [000511] ------------                 IL_OFFSET void   IL offset: 0x50
N002 (  3,  2) [000066] ------------        t66 =    LCL_VAR   ref    V02 loc0         
                                                  /--*  t66    ref    this in rcx
N003 ( 17,  9) [000067] --CXG-------              *  CALL nullcheck void   System.Threading.Thread.Start
               [000512] ------------                 IL_OFFSET void   IL offset: 0x56
N001 (  1,  1) [000068] ------------                 NO_OP     void  
               [000513] ------------                 IL_OFFSET void   IL offset: 0x57
N001 ( 14,  5) [000069] --CXG-------        t69 =    CALL      struct System.DateTime.get_Now
                                                  /--*  t69    struct 
N003 ( 18,  8) [000072] DA-XG-------              *  STORE_LCL_VAR struct<System.DateTime, 8> V27 tmp9         
               [000514] ------------                 IL_OFFSET void   IL offset: 0x5c
N001 (  3,  2) [000073] ------------        t73 =    LCL_VAR   struct<System.DateTime, 8> V27 tmp9         
                                                  /--*  t73    struct 
N003 (  7,  5) [000076] DA--G-------              *  STORE_LCL_VAR struct<System.DateTime, 8>(AX) V03 loc1         
               [000515] ------------                 IL_OFFSET void   IL offset: 0x5d
N002 (  3,  3) [000078] ------------        t78 =    LCL_VAR_ADDR byref  V03 loc1         
                                                  /--*  t78    byref  this in rcx
N003 ( 17, 10) [000079] --CXG-------        t79 = *  CALL      ref    System.DateTime.ToString
                                                  /--*  t79    ref    
N005 ( 21, 13) [000081] DA-XG-------              *  STORE_LCL_VAR ref    V28 tmp10        
               [000516] ------------                 IL_OFFSET void   IL offset: 0x64
N003 (  2, 10) [000406] H-----------       t406 =    CNS_INT(h) long   0xBE2A31F8 "	 Consumer thread started, adding items..."
                                                  /--*  t406   long   
N004 (  4, 12) [000407] #---G-------       t407 = *  IND       ref   
N005 (  3,  2) [000082] ------------        t82 =    LCL_VAR   ref    V28 tmp10        
                                                  /--*  t407   ref    arg1 in rdx
                                                  +--*  t82    ref    arg0 in rcx
N006 ( 21, 21) [000084] --CXG-------        t84 = *  CALL      ref    System.String.Concat
                                                  /--*  t84    ref    
N008 ( 25, 24) [000086] DA-XG-------              *  STORE_LCL_VAR ref    V29 tmp11        
               [000517] ------------                 IL_OFFSET void   IL offset: 0x6e
N002 (  3,  2) [000087] ------------        t87 =    LCL_VAR   ref    V29 tmp11        
                                                  /--*  t87    ref    arg0 in rcx
N003 ( 17,  8) [000088] --CXG-------              *  CALL      void   System.Console.WriteLine
               [000518] ------------                 IL_OFFSET void   IL offset: 0x73
N001 (  1,  1) [000089] ------------                 NO_OP     void  
               [000519] ------------                 IL_OFFSET void   IL offset: 0x74
N001 (  1,  1) [000090] ------------        t90 =    CNS_INT   int    0
                                                  /--*  t90    int    
N003 (  5,  4) [000092] DA----------              *  STORE_LCL_VAR int    V04 loc2         
               [000520] ------------                 IL_OFFSET void   IL offset: 0x76
N001 (  0,  0) [000093] ------------                 NOP       void  

------------ BB06 [078..083), preds={BB14} succs={BB07}
               [000521] ------------                 IL_OFFSET void   IL offset: 0x78
N001 (  1,  1) [000103] ------------                 NO_OP     void  
               [000522] ------------                 IL_OFFSET void   IL offset: 0x79
N001 (  3,  2) [000104] ------------       t104 =    LCL_VAR   ref    V00 this         
N002 (  1,  1) [000411] ------------       t411 =    CNS_INT   long   8 field offset Fseq[_myList]
                                                  /--*  t104   ref    
                                                  +--*  t411   long   
N003 (  4,  3) [000412] -------N----       t412 = *  ADD       byref 
                                                  /--*  t412   byref  
N004 (  6,  5) [000105] ---XG-------       t105 = *  IND       ref   
                                                  /--*  t105   ref    
N006 ( 10,  8) [000107] DA-XG-------              *  STORE_LCL_VAR ref    V05 loc3         
               [000523] ------------                 IL_OFFSET void   IL offset: 0x80
N001 (  1,  1) [000108] ------------       t108 =    CNS_INT   int    0
                                                  /--*  t108   int    
N003 (  5,  4) [000110] DA--G-------              *  STORE_LCL_VAR int   (AX) V06 loc4         

------------ BB07 [083..0D5) -> BB08 (always), preds={BB06} succs={BB08}
               [000524] ------------                 IL_OFFSET void   IL offset: 0x83
N003 (  3,  3) [000113] ------------       t113 =    LCL_VAR_ADDR long   V06 loc4         
N004 (  3,  2) [000111] ------------       t111 =    LCL_VAR   ref    V05 loc3         
                                                  /--*  t113   long   arg1 in rdx
                                                  +--*  t111   ref    arg0 in rcx
N005 ( 20, 12) [000114] --CXG-------              *  CALL      void   System.Threading.Monitor.Enter
               [000525] ------------                 IL_OFFSET void   IL offset: 0x8b
N001 (  1,  1) [000115] ------------                 NO_OP     void  
               [000526] ------------                 IL_OFFSET void   IL offset: 0x8c
N001 (  1,  1) [000116] ------------                 NO_OP     void  
               [000527] ------------                 IL_OFFSET void   IL offset: 0x8d
N002 (  2, 10) [000120] H-----------       t120 =    CNS_INT(h) long   0x7ffdb70260c8 method
                                                  /--*  t120   long   arg0 in rcx
N003 ( 16, 16) [000121] --C---------       t121 = *  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
                                                  /--*  t121   ref    
N005 ( 20, 19) [000123] DA----------              *  STORE_LCL_VAR ref    V30 tmp12        
N001 (  3,  2) [000117] ------------       t117 =    LCL_VAR   ref    V00 this         
N002 (  1,  1) [000418] ------------       t418 =    CNS_INT   long   8 field offset Fseq[_myList]
                                                  /--*  t117   ref    
                                                  +--*  t418   long   
N003 (  4,  3) [000419] -------N----       t419 = *  ADD       byref 
                                                  /--*  t419   byref  
N004 (  6,  5) [000118] ---XG-------       t118 = *  IND       ref   
N005 (  1,  1) [000416] ------------       t416 =    CNS_INT   long   8 field offset Fseq[Head]
                                                  /--*  t118   ref    
                                                  +--*  t416   long   
N006 (  7,  6) [000417] ---XG--N----       t417 = *  ADD       byref 
                                                  /--*  t417   byref  
N007 (  9,  8) [000119] ---XG-------       t119 = *  IND       ref   
                                                  /--*  t119   ref    
N009 ( 13, 11) [000127] DA-XG-------              *  STORE_LCL_VAR ref    V31 tmp13        
N002 (  3,  2) [000124] ------------       t124 =    LCL_VAR   ref    V30 tmp12        
                                                  /--*  t124   ref    this in rcx
N003 ( 17,  9) [000125] --CXG-------              *  CALL      void   FalseLeakRepro.Node..ctor
               [000528] ------------                 IL_OFFSET void   IL offset: 0x9d
N001 (  3,  2) [000128] ------------       t128 =    LCL_VAR   ref    V31 tmp13        
N002 (  1,  1) [000421] ------------       t421 =    CNS_INT   long   8 field offset Fseq[Next]
                                                  /--*  t128   ref    
                                                  +--*  t421   long   
N003 (  4,  3) [000422] -------N----       t422 = *  ADD       byref 
N005 (  3,  2) [000129] ------------       t129 =    LCL_VAR   ref    V30 tmp12        
                                                  /--*  t422   byref  
                                                  +--*  t129   ref    
               [000529] -A-XG-------              *  STOREIND  ref   
               [000530] ------------                 IL_OFFSET void   IL offset: 0xa2
N001 (  3,  2) [000132] ------------       t132 =    LCL_VAR   ref    V00 this         
N002 (  1,  1) [000425] ------------       t425 =    CNS_INT   long   8 field offset Fseq[_myList]
                                                  /--*  t132   ref    
                                                  +--*  t425   long   
N003 (  4,  3) [000426] -------N----       t426 = *  ADD       byref 
                                                  /--*  t426   byref  
N004 (  6,  5) [000133] ---XG-------       t133 = *  IND       ref   
N005 (  1,  1) [000423] ------------       t423 =    CNS_INT   long   8 field offset Fseq[Head]
                                                  /--*  t133   ref    
                                                  +--*  t423   long   
N006 (  7,  6) [000424] ---XG--N----       t424 = *  ADD       byref 
N008 (  3,  2) [000134] ------------       t134 =    LCL_VAR   ref    V00 this         
N009 (  1,  1) [000431] ------------       t431 =    CNS_INT   long   8 field offset Fseq[_myList]
                                                  /--*  t134   ref    
                                                  +--*  t431   long   
N010 (  4,  3) [000432] -------N----       t432 = *  ADD       byref 
                                                  /--*  t432   byref  
N011 (  6,  5) [000135] ---XG-------       t135 = *  IND       ref   
N012 (  1,  1) [000429] ------------       t429 =    CNS_INT   long   8 field offset Fseq[Head]
                                                  /--*  t135   ref    
                                                  +--*  t429   long   
N013 (  7,  6) [000430] ---XG--N----       t430 = *  ADD       byref 
                                                  /--*  t430   byref  
N014 (  9,  8) [000136] ---XG-------       t136 = *  IND       ref   
N015 (  1,  1) [000427] ------------       t427 =    CNS_INT   long   8 field offset Fseq[Next]
                                                  /--*  t136   ref    
                                                  +--*  t427   long   
N016 ( 10,  9) [000428] ---XG--N----       t428 = *  ADD       byref 
                                                  /--*  t428   byref  
N017 ( 12, 11) [000137] ---XG-------       t137 = *  IND       ref   
                                                  /--*  t424   byref  
                                                  +--*  t137   ref    
               [000531] -A-XG-------              *  STOREIND  ref   
               [000532] ------------                 IL_OFFSET void   IL offset: 0xbd
N002 (  2, 10) [000143] H-----------       t143 =    CNS_INT(h) long   0x7ffdb6c458b8 token
                                                  /--*  t143   long   arg0 in rcx
N003 ( 16, 16) [000144] --C---------       t144 = *  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
                                                  /--*  t144   ref    
N005 ( 20, 19) [000146] DA----------              *  STORE_LCL_VAR ref    V32 tmp14        
N001 (  3,  2) [000140] ------------       t140 =    LCL_VAR   ref    V00 this         
N002 (  1,  1) [000436] ------------       t436 =    CNS_INT   long   8 field offset Fseq[_myList]
                                                  /--*  t140   ref    
                                                  +--*  t436   long   
N003 (  4,  3) [000437] -------N----       t437 = *  ADD       byref 
                                                  /--*  t437   byref  
N004 (  6,  5) [000141] ---XG-------       t141 = *  IND       ref   
N005 (  1,  1) [000434] ------------       t434 =    CNS_INT   long   8 field offset Fseq[Head]
                                                  /--*  t141   ref    
                                                  +--*  t434   long   
N006 (  7,  6) [000435] ---XG--N----       t435 = *  ADD       byref 
                                                  /--*  t435   byref  
N007 (  9,  8) [000142] ---XG-------       t142 = *  IND       ref   
                                                  /--*  t142   ref    
N009 ( 13, 11) [000150] DA-XG-------              *  STORE_LCL_VAR ref    V33 tmp15        
N002 (  3,  2) [000147] ------------       t147 =    LCL_VAR   ref    V32 tmp14        
                                                  /--*  t147   ref    this in rcx
N003 ( 17,  9) [000148] --CXG-------              *  CALL      void   System.Object..ctor
               [000533] ------------                 IL_OFFSET void   IL offset: 0xcd
N001 (  3,  2) [000151] ------------       t151 =    LCL_VAR   ref    V33 tmp15        
N002 (  1,  1) [000439] ------------       t439 =    CNS_INT   long   16 field offset Fseq[Data]
                                                  /--*  t151   ref    
                                                  +--*  t439   long   
N003 (  4,  3) [000440] -------N----       t440 = *  ADD       byref 
N005 (  3,  2) [000152] ------------       t152 =    LCL_VAR   ref    V32 tmp14        
                                                  /--*  t440   byref  
                                                  +--*  t152   ref    
               [000534] -A-XG-------              *  STOREIND  ref   
               [000535] ------------                 IL_OFFSET void   IL offset: 0xd2
N001 (  1,  1) [000155] ------------                 NO_OP     void  
               [000536] ------------                 IL_OFFSET void   IL offset: 0xd3
N001 (  0,  0) [000156] ------------                 NOP       void  

------------ BB08 [???..???) -> BB10 (callf), preds={BB07} succs={BB10}

------------ BB09 [???..???) -> BB13 (ALWAYS), preds={BB12} succs={BB13}

------------ BB13 [0E1..0E6), preds={BB09} succs={BB14}
               [000537] ------------                 IL_OFFSET void   IL offset: 0xe1
N001 (  1,  1) [000157] ------------                 NO_OP     void  
               [000538] ------------                 IL_OFFSET void   IL offset: 0xe2
N001 (  3,  2) [000158] ------------       t158 =    LCL_VAR   int    V04 loc2         
N002 (  1,  1) [000159] ------------       t159 =    CNS_INT   int    1
                                                  /--*  t158   int    
                                                  +--*  t159   int    
N003 (  5,  4) [000160] ------------       t160 = *  ADD       int   
                                                  /--*  t160   int    
N005 (  9,  7) [000162] DA----------              *  STORE_LCL_VAR int    V04 loc2         

------------ BB14 [0E6..0F1) -> BB06 (cond), preds={BB05,BB13} succs={BB15,BB06}
               [000539] ------------                 IL_OFFSET void   IL offset: 0xe6
N001 (  3,  2) [000094] ------------        t94 =    LCL_VAR   int    V04 loc2         
N002 (  1,  1) [000095] ------------        t95 =    CNS_INT   int    10
                                                  /--*  t94    int    
                                                  +--*  t95    int    
N003 (  8,  4) [000096] ------------        t96 = *  LT        int   
                                                  /--*  t96    int    
N005 ( 12,  7) [000098] DA----------              *  STORE_LCL_VAR int    V07 loc5         
               [000540] ------------                 IL_OFFSET void   IL offset: 0xed
N001 (  3,  2) [000099] ------------        t99 =    LCL_VAR   int    V07 loc5         
N002 (  1,  1) [000100] ------------       t100 =    CNS_INT   int    0
                                                  /--*  t99    int    
                                                  +--*  t100   int    
N003 (  5,  4) [000101] J------N----       t101 = *  NE        int   
                                                  /--*  t101   int    
N004 (  7,  6) [000102] ------------              *  JTRUE     void  

------------ BB15 [0F1..110) -> BB28 (always), preds={BB14} succs={BB28}
               [000541] ------------                 IL_OFFSET void   IL offset: 0xf1
N001 ( 14,  5) [000171] --CXG-------       t171 =    CALL      struct System.DateTime.get_Now
                                                  /--*  t171   struct 
N003 ( 18,  8) [000174] DA-XG-------              *  STORE_LCL_VAR struct<System.DateTime, 8> V34 tmp16        
               [000542] ------------                 IL_OFFSET void   IL offset: 0xf6
N001 (  3,  2) [000175] ------------       t175 =    LCL_VAR   struct<System.DateTime, 8> V34 tmp16        
                                                  /--*  t175   struct 
N003 (  7,  5) [000178] DA--G-------              *  STORE_LCL_VAR struct<System.DateTime, 8>(AX) V03 loc1         
               [000543] ------------                 IL_OFFSET void   IL offset: 0xf7
N002 (  3,  3) [000180] ------------       t180 =    LCL_VAR_ADDR byref  V03 loc1         
                                                  /--*  t180   byref  this in rcx
N003 ( 17, 10) [000181] --CXG-------       t181 = *  CALL      ref    System.DateTime.ToString
                                                  /--*  t181   ref    
N005 ( 21, 13) [000183] DA-XG-------              *  STORE_LCL_VAR ref    V35 tmp17        
               [000544] ------------                 IL_OFFSET void   IL offset: 0xfe
N003 (  2, 10) [000444] H-----------       t444 =    CNS_INT(h) long   0xBE2A3200 "	 Waiting for list processing to complete..."
                                                  /--*  t444   long   
N004 (  4, 12) [000445] #---G-------       t445 = *  IND       ref   
N005 (  3,  2) [000184] ------------       t184 =    LCL_VAR   ref    V35 tmp17        
                                                  /--*  t445   ref    arg1 in rdx
                                                  +--*  t184   ref    arg0 in rcx
N006 ( 21, 21) [000186] --CXG-------       t186 = *  CALL      ref    System.String.Concat
                                                  /--*  t186   ref    
N008 ( 25, 24) [000188] DA-XG-------              *  STORE_LCL_VAR ref    V36 tmp18        
               [000545] ------------                 IL_OFFSET void   IL offset: 0x108
N002 (  3,  2) [000189] ------------       t189 =    LCL_VAR   ref    V36 tmp18        
                                                  /--*  t189   ref    arg0 in rcx
N003 ( 17,  8) [000190] --CXG-------              *  CALL      void   System.Console.WriteLine
               [000546] ------------                 IL_OFFSET void   IL offset: 0x10d
N001 (  1,  1) [000191] ------------                 NO_OP     void  
               [000547] ------------                 IL_OFFSET void   IL offset: 0x10e
N001 (  0,  0) [000192] ------------                 NOP       void  

------------ BB16 [110..11C), preds={BB28} succs={BB17}
               [000548] ------------                 IL_OFFSET void   IL offset: 0x110
N001 (  1,  1) [000197] ------------                 NO_OP     void  
               [000549] ------------                 IL_OFFSET void   IL offset: 0x111
N001 (  3,  2) [000198] ------------       t198 =    LCL_VAR   ref    V00 this         
N002 (  1,  1) [000449] ------------       t449 =    CNS_INT   long   8 field offset Fseq[_myList]
                                                  /--*  t198   ref    
                                                  +--*  t449   long   
N003 (  4,  3) [000450] -------N----       t450 = *  ADD       byref 
                                                  /--*  t450   byref  
N004 (  6,  5) [000199] ---XG-------       t199 = *  IND       ref   
                                                  /--*  t199   ref    
N006 ( 10,  8) [000201] DA-XG-------              *  STORE_LCL_VAR ref    V08 loc6         
               [000550] ------------                 IL_OFFSET void   IL offset: 0x119
N001 (  1,  1) [000202] ------------       t202 =    CNS_INT   int    0
                                                  /--*  t202   int    
N003 (  5,  4) [000204] DA--G-------              *  STORE_LCL_VAR int   (AX) V09 loc7         

------------ BB17 [11C..145) -> BB19 (cond), preds={BB16} succs={BB18,BB19}
               [000551] ------------                 IL_OFFSET void   IL offset: 0x11c
N003 (  3,  3) [000207] ------------       t207 =    LCL_VAR_ADDR long   V09 loc7         
N004 (  3,  2) [000205] ------------       t205 =    LCL_VAR   ref    V08 loc6         
                                                  /--*  t207   long   arg1 in rdx
                                                  +--*  t205   ref    arg0 in rcx
N005 ( 20, 12) [000208] --CXG-------              *  CALL      void   System.Threading.Monitor.Enter
               [000552] ------------                 IL_OFFSET void   IL offset: 0x125
N001 (  1,  1) [000209] ------------                 NO_OP     void  
               [000553] ------------                 IL_OFFSET void   IL offset: 0x126
N001 (  1,  1) [000210] ------------                 NO_OP     void  
               [000554] ------------                 IL_OFFSET void   IL offset: 0x127
N001 (  3,  2) [000211] ------------       t211 =    LCL_VAR   ref    V00 this         
N002 (  1,  1) [000455] ------------       t455 =    CNS_INT   long   8 field offset Fseq[_myList]
                                                  /--*  t211   ref    
                                                  +--*  t455   long   
N003 (  4,  3) [000456] -------N----       t456 = *  ADD       byref 
                                                  /--*  t456   byref  
N004 (  6,  5) [000212] ---XG-------       t212 = *  IND       ref   
N005 (  1,  1) [000453] ------------       t453 =    CNS_INT   long   8 field offset Fseq[Head]
                                                  /--*  t212   ref    
                                                  +--*  t453   long   
N006 (  7,  6) [000454] ---XG--N----       t454 = *  ADD       byref 
                                                  /--*  t454   byref  
N007 (  9,  8) [000213] ---XG-------       t213 = *  IND       ref   
N008 (  3,  2) [000214] ------------       t214 =    LCL_VAR   ref    V00 this         
N009 (  1,  1) [000459] ------------       t459 =    CNS_INT   long   8 field offset Fseq[_myList]
                                                  /--*  t214   ref    
                                                  +--*  t459   long   
N010 (  4,  3) [000460] -------N----       t460 = *  ADD       byref 
                                                  /--*  t460   byref  
N011 (  6,  5) [000215] ---XG-------       t215 = *  IND       ref   
N012 (  1,  1) [000457] ------------       t457 =    CNS_INT   long   16 field offset Fseq[Tail]
                                                  /--*  t215   ref    
                                                  +--*  t457   long   
N013 (  7,  6) [000458] ---XG--N----       t458 = *  ADD       byref 
                                                  /--*  t458   byref  
N014 (  9,  8) [000216] ---XG-------       t216 = *  IND       ref   
                                                  /--*  t213   ref    
                                                  +--*  t216   ref    
N015 ( 22, 17) [000217] ---XG-------       t217 = *  EQ        int   
                                                  /--*  t217   int    
N017 ( 26, 20) [000219] DA-XG-------              *  STORE_LCL_VAR int    V10 loc8         
               [000555] ------------                 IL_OFFSET void   IL offset: 0x141
N001 (  3,  2) [000220] ------------       t220 =    LCL_VAR   int    V10 loc8         
N002 (  1,  1) [000221] ------------       t221 =    CNS_INT   int    0
                                                  /--*  t220   int    
                                                  +--*  t221   int    
N003 (  5,  4) [000222] J------N----       t222 = *  EQ        int   
                                                  /--*  t222   int    
N004 (  7,  6) [000223] ------------              *  JTRUE     void  

------------ BB18 [145..148) -> BB20 (always), preds={BB17} succs={BB20}
               [000556] ------------                 IL_OFFSET void   IL offset: 0x145
N001 (  1,  1) [000230] ------------                 NO_OP     void  
               [000557] ------------                 IL_OFFSET void   IL offset: 0x146
N001 (  0,  0) [000231] ------------                 NOP       void  

------------ BB19 [148..14B) -> BB22 (always), preds={BB17} succs={BB22}
               [000558] ------------                 IL_OFFSET void   IL offset: 0x148
N001 (  1,  1) [000224] ------------                 NO_OP     void  
               [000559] ------------                 IL_OFFSET void   IL offset: 0x149
N001 (  0,  0) [000225] ------------                 NOP       void  

------------ BB20 [???..???) -> BB24 (callf), preds={BB18} succs={BB24}

------------ BB21 [???..???) -> BB29 (ALWAYS), preds={BB26} succs={BB29}

------------ BB22 [???..???) -> BB24 (callf), preds={BB19} succs={BB24}

------------ BB23 [???..???) -> BB27 (ALWAYS), preds={BB26} succs={BB27}

------------ BB27 [158..161), preds={BB23} succs={BB28}
               [000560] ------------                 IL_OFFSET void   IL offset: 0x158
N002 (  1,  1) [000226] ------------       t226 =    CNS_INT   int    100
                                                  /--*  t226   int    arg0 in rcx
N003 ( 15,  7) [000227] --CXG-------              *  CALL      void   System.Threading.Thread.Sleep
               [000561] ------------                 IL_OFFSET void   IL offset: 0x15f
N001 (  1,  1) [000228] ------------                 NO_OP     void  
               [000562] ------------                 IL_OFFSET void   IL offset: 0x160
N001 (  1,  1) [000229] ------------                 NO_OP     void  

------------ BB28 [161..166) -> BB16 (always), preds={BB15,BB27} succs={BB16}
               [000563] ------------                 IL_OFFSET void   IL offset: 0x161
N001 (  1,  1) [000193] ------------       t193 =    CNS_INT   int    1
                                                  /--*  t193   int    
N003 (  5,  4) [000195] DA----------              *  STORE_LCL_VAR int    V11 loc9         
               [000564] ------------                 IL_OFFSET void   IL offset: 0x164
N001 (  0,  0) [000196] ------------                 NOP       void  

------------ BB29 [166..1B1) -> BB39 (always), preds={BB21} succs={BB39}
               [000565] ------------                 IL_OFFSET void   IL offset: 0x166
N001 ( 14,  5) [000232] --CXG-------       t232 =    CALL      struct System.DateTime.get_Now
                                                  /--*  t232   struct 
N003 ( 18,  8) [000235] DA-XG-------              *  STORE_LCL_VAR struct<System.DateTime, 8> V37 tmp19        
               [000566] ------------                 IL_OFFSET void   IL offset: 0x16b
N001 (  3,  2) [000236] ------------       t236 =    LCL_VAR   struct<System.DateTime, 8> V37 tmp19        
                                                  /--*  t236   struct 
N003 (  7,  5) [000239] DA--G-------              *  STORE_LCL_VAR struct<System.DateTime, 8>(AX) V03 loc1         
               [000567] ------------                 IL_OFFSET void   IL offset: 0x16c
N002 (  3,  3) [000241] ------------       t241 =    LCL_VAR_ADDR byref  V03 loc1         
                                                  /--*  t241   byref  this in rcx
N003 ( 17, 10) [000242] --CXG-------       t242 = *  CALL      ref    System.DateTime.ToString
                                                  /--*  t242   ref    
N005 ( 21, 13) [000244] DA-XG-------              *  STORE_LCL_VAR ref    V38 tmp20        
               [000568] ------------                 IL_OFFSET void   IL offset: 0x173
N003 (  2, 10) [000466] H-----------       t466 =    CNS_INT(h) long   0xBE2A3208 "	 Done.  Profiler is active, available options:"
                                                  /--*  t466   long   
N004 (  4, 12) [000467] #---G-------       t467 = *  IND       ref   
N005 (  3,  2) [000245] ------------       t245 =    LCL_VAR   ref    V38 tmp20        
                                                  /--*  t467   ref    arg1 in rdx
                                                  +--*  t245   ref    arg0 in rcx
N006 ( 21, 21) [000247] --CXG-------       t247 = *  CALL      ref    System.String.Concat
                                                  /--*  t247   ref    
N008 ( 25, 24) [000249] DA-XG-------              *  STORE_LCL_VAR ref    V39 tmp21        
               [000569] ------------                 IL_OFFSET void   IL offset: 0x17d
N002 (  3,  2) [000250] ------------       t250 =    LCL_VAR   ref    V39 tmp21        
                                                  /--*  t250   ref    arg0 in rcx
N003 ( 17,  8) [000251] --CXG-------              *  CALL      void   System.Console.WriteLine
               [000570] ------------                 IL_OFFSET void   IL offset: 0x182
N001 (  1,  1) [000252] ------------                 NO_OP     void  
               [000571] ------------                 IL_OFFSET void   IL offset: 0x183
N002 (  2, 10) [000471] H-----------       t471 =    CNS_INT(h) long   0xBE2A3210 "   Q = quit"
                                                  /--*  t471   long   
N003 (  4, 12) [000472] #---G-------       t472 = *  IND       ref   
                                                  /--*  t472   ref    arg0 in rcx
N004 ( 18, 18) [000254] --CXG-------              *  CALL      void   System.Console.WriteLine
               [000572] ------------                 IL_OFFSET void   IL offset: 0x18d
N001 (  1,  1) [000255] ------------                 NO_OP     void  
               [000573] ------------                 IL_OFFSET void   IL offset: 0x18e
N002 (  2, 10) [000474] H-----------       t474 =    CNS_INT(h) long   0xBE2A3218 "   H = heap snapshot"
                                                  /--*  t474   long   
N003 (  4, 12) [000475] #---G-------       t475 = *  IND       ref   
                                                  /--*  t475   ref    arg0 in rcx
N004 ( 18, 18) [000257] --CXG-------              *  CALL      void   System.Console.WriteLine
               [000574] ------------                 IL_OFFSET void   IL offset: 0x198
N001 (  1,  1) [000258] ------------                 NO_OP     void  
               [000575] ------------                 IL_OFFSET void   IL offset: 0x199
N002 (  2, 10) [000477] H-----------       t477 =    CNS_INT(h) long   0xBE2A3220 "   G = GC (max gen)"
                                                  /--*  t477   long   
N003 (  4, 12) [000478] #---G-------       t478 = *  IND       ref   
                                                  /--*  t478   ref    arg0 in rcx
N004 ( 18, 18) [000260] --CXG-------              *  CALL      void   System.Console.WriteLine
               [000576] ------------                 IL_OFFSET void   IL offset: 0x1a3
N001 (  1,  1) [000261] ------------                 NO_OP     void  
               [000577] ------------                 IL_OFFSET void   IL offset: 0x1a4
N002 (  2, 10) [000480] H-----------       t480 =    CNS_INT(h) long   0xBE2A3228 "   R = clear the running flag to stop the consumer thread"
                                                  /--*  t480   long   
N003 (  4, 12) [000481] #---G-------       t481 = *  IND       ref   
                                                  /--*  t481   ref    arg0 in rcx
N004 ( 18, 18) [000263] --CXG-------              *  CALL      void   System.Console.WriteLine
               [000578] ------------                 IL_OFFSET void   IL offset: 0x1ae
N001 (  1,  1) [000264] ------------                 NO_OP     void  
               [000579] ------------                 IL_OFFSET void   IL offset: 0x1af
N001 (  0,  0) [000265] ------------                 NOP       void  

------------ BB30 [1B1..1CA) -> BB32 (cond), preds={BB39} succs={BB31,BB32}
               [000580] ------------                 IL_OFFSET void   IL offset: 0x1b1
N001 (  1,  1) [000270] ------------                 NO_OP     void  
               [000581] ------------                 IL_OFFSET void   IL offset: 0x1b2
N002 (  3,  3) [000273] ------------       t273 =    LCL_VAR_ADDR long   V40 tmp22        
                                                  /--*  t273   long   arg0 in rcx
N003 ( 17,  9) [000271] S-CXG-------              *  CALL      void   System.Console.ReadKey
               [000582] ------------                 IL_OFFSET void   IL offset: 0x1b7
N001 (  3,  2) [000274] ------------       t274 =    LCL_VAR   struct<System.ConsoleKeyInfo, 12>(AX) V40 tmp22        
                                                  /--*  t274   struct 
N003 (  7,  5) [000277] DA--G-------              *  STORE_LCL_VAR struct<System.ConsoleKeyInfo, 12>(AX) V12 loc10        
               [000583] ------------                 IL_OFFSET void   IL offset: 0x1b9
N002 (  3,  3) [000279] ------------       t279 =    LCL_VAR_ADDR byref  V12 loc10        
                                                  /--*  t279   byref  this in rcx
N003 ( 17, 10) [000280] --CXG-------       t280 = *  CALL      int    System.ConsoleKeyInfo.get_Key
                                                  /--*  t280   int    
N005 ( 21, 13) [000282] DA-XG-------              *  STORE_LCL_VAR int    V41 tmp23        
               [000584] ------------                 IL_OFFSET void   IL offset: 0x1c0
N001 (  3,  2) [000283] ------------       t283 =    LCL_VAR   int    V41 tmp23        
N002 (  1,  1) [000284] ------------       t284 =    CNS_INT   int    71
                                                  /--*  t283   int    
                                                  +--*  t284   int    
N003 (  8,  4) [000285] ------------       t285 = *  EQ        int   
                                                  /--*  t285   int    
N005 ( 12,  7) [000287] DA----------              *  STORE_LCL_VAR int    V13 loc11        
               [000585] ------------                 IL_OFFSET void   IL offset: 0x1c6
N001 (  3,  2) [000288] ------------       t288 =    LCL_VAR   int    V13 loc11        
N002 (  1,  1) [000289] ------------       t289 =    CNS_INT   int    0
                                                  /--*  t288   int    
                                                  +--*  t289   int    
N003 (  5,  4) [000290] J------N----       t290 = *  EQ        int   
                                                  /--*  t290   int    
N004 (  7,  6) [000291] ------------              *  JTRUE     void  

------------ BB31 [1CA..1D9) -> BB38 (always), preds={BB30} succs={BB38}
               [000586] ------------                 IL_OFFSET void   IL offset: 0x1ca
N001 (  1,  1) [000354] ------------                 NO_OP     void  
               [000587] ------------                 IL_OFFSET void   IL offset: 0x1cb
N001 ( 14,  5) [000355] --CXG-------       t355 =    CALL      int    System.GC.get_MaxGeneration
                                                  /--*  t355   int    
N003 ( 18,  8) [000357] DA-XG-------              *  STORE_LCL_VAR int    V45 tmp27        
               [000588] ------------                 IL_OFFSET void   IL offset: 0x1d0
N002 (  3,  2) [000358] ------------       t358 =    LCL_VAR   int    V45 tmp27        
                                                  /--*  t358   int    arg0 in rcx
N003 ( 17,  8) [000359] --CXG-------              *  CALL      void   System.GC.Collect
               [000589] ------------                 IL_OFFSET void   IL offset: 0x1d5
N001 (  1,  1) [000360] ------------                 NO_OP     void  
               [000590] ------------                 IL_OFFSET void   IL offset: 0x1d6
N001 (  1,  1) [000361] ------------                 NO_OP     void  
               [000591] ------------                 IL_OFFSET void   IL offset: 0x1d7
N001 (  0,  0) [000362] ------------                 NOP       void  

------------ BB32 [1D9..1EA) -> BB34 (cond), preds={BB30} succs={BB33,BB34}
               [000592] ------------                 IL_OFFSET void   IL offset: 0x1d9
N002 (  3,  3) [000293] ------------       t293 =    LCL_VAR_ADDR byref  V12 loc10        
                                                  /--*  t293   byref  this in rcx
N003 ( 17, 10) [000294] --CXG-------       t294 = *  CALL      int    System.ConsoleKeyInfo.get_Key
                                                  /--*  t294   int    
N005 ( 21, 13) [000296] DA-XG-------              *  STORE_LCL_VAR int    V42 tmp24        
               [000593] ------------                 IL_OFFSET void   IL offset: 0x1e0
N001 (  3,  2) [000297] ------------       t297 =    LCL_VAR   int    V42 tmp24        
N002 (  1,  1) [000298] ------------       t298 =    CNS_INT   int    72
                                                  /--*  t297   int    
                                                  +--*  t298   int    
N003 (  8,  4) [000299] ------------       t299 = *  EQ        int   
                                                  /--*  t299   int    
N005 ( 12,  7) [000301] DA----------              *  STORE_LCL_VAR int    V14 loc12        
               [000594] ------------                 IL_OFFSET void   IL offset: 0x1e6
N001 (  3,  2) [000302] ------------       t302 =    LCL_VAR   int    V14 loc12        
N002 (  1,  1) [000303] ------------       t303 =    CNS_INT   int    0
                                                  /--*  t302   int    
                                                  +--*  t303   int    
N003 (  5,  4) [000304] J------N----       t304 = *  EQ        int   
                                                  /--*  t304   int    
N004 (  7,  6) [000305] ------------              *  JTRUE     void  

------------ BB33 [1EA..1F4) -> BB38 (always), preds={BB32} succs={BB38}
               [000595] ------------                 IL_OFFSET void   IL offset: 0x1ea
N001 (  1,  1) [000349] ------------                 NO_OP     void  
               [000596] ------------                 IL_OFFSET void   IL offset: 0x1eb
N001 ( 14,  5) [000350] --CXG-------                 CALL      void   System.Diagnostics.Debugger.Break
               [000597] ------------                 IL_OFFSET void   IL offset: 0x1f0
N001 (  1,  1) [000351] ------------                 NO_OP     void  
               [000598] ------------                 IL_OFFSET void   IL offset: 0x1f1
N001 (  1,  1) [000352] ------------                 NO_OP     void  
               [000599] ------------                 IL_OFFSET void   IL offset: 0x1f2
N001 (  0,  0) [000353] ------------                 NOP       void  

------------ BB34 [1F4..205) -> BB36 (cond), preds={BB32} succs={BB35,BB36}
               [000600] ------------                 IL_OFFSET void   IL offset: 0x1f4
N002 (  3,  3) [000307] ------------       t307 =    LCL_VAR_ADDR byref  V12 loc10        
                                                  /--*  t307   byref  this in rcx
N003 ( 17, 10) [000308] --CXG-------       t308 = *  CALL      int    System.ConsoleKeyInfo.get_Key
                                                  /--*  t308   int    
N005 ( 21, 13) [000310] DA-XG-------              *  STORE_LCL_VAR int    V43 tmp25        
               [000601] ------------                 IL_OFFSET void   IL offset: 0x1fb
N001 (  3,  2) [000311] ------------       t311 =    LCL_VAR   int    V43 tmp25        
N002 (  1,  1) [000312] ------------       t312 =    CNS_INT   int    82
                                                  /--*  t311   int    
                                                  +--*  t312   int    
N003 (  8,  4) [000313] ------------       t313 = *  EQ        int   
                                                  /--*  t313   int    
N005 ( 12,  7) [000315] DA----------              *  STORE_LCL_VAR int    V15 loc13        
               [000602] ------------                 IL_OFFSET void   IL offset: 0x201
N001 (  3,  2) [000316] ------------       t316 =    LCL_VAR   int    V15 loc13        
N002 (  1,  1) [000317] ------------       t317 =    CNS_INT   int    0
                                                  /--*  t316   int    
                                                  +--*  t317   int    
N003 (  5,  4) [000318] J------N----       t318 = *  EQ        int   
                                                  /--*  t318   int    
N004 (  7,  6) [000319] ------------              *  JTRUE     void  

------------ BB35 [205..210) -> BB38 (always), preds={BB34} succs={BB38}
               [000603] ------------                 IL_OFFSET void   IL offset: 0x205
N001 (  1,  1) [000342] ------------                 NO_OP     void  
               [000604] ------------                 IL_OFFSET void   IL offset: 0x206
N001 (  3,  2) [000343] ------------       t343 =    LCL_VAR   ref    V00 this         
N002 (  1,  1) [000488] ------------       t488 =    CNS_INT   long   16 field offset Fseq[_running]
                                                  /--*  t343   ref    
                                                  +--*  t488   long   
N003 (  4,  3) [000489] -------N----       t489 = *  ADD       byref 
N005 (  1,  1) [000344] ------------       t344 =    CNS_INT   int    0
                                                  /--*  t489   byref  
                                                  +--*  t344   int    
               [000605] -A-XG-------              *  STOREIND  bool  
               [000606] ------------                 IL_OFFSET void   IL offset: 0x20d
N001 (  1,  1) [000347] ------------                 NO_OP     void  
               [000607] ------------                 IL_OFFSET void   IL offset: 0x20e
N001 (  0,  0) [000348] ------------                 NOP       void  

------------ BB36 [210..221) -> BB38 (cond), preds={BB34} succs={BB37,BB38}
               [000608] ------------                 IL_OFFSET void   IL offset: 0x210
N002 (  3,  3) [000321] ------------       t321 =    LCL_VAR_ADDR byref  V12 loc10        
                                                  /--*  t321   byref  this in rcx
N003 ( 17, 10) [000322] --CXG-------       t322 = *  CALL      int    System.ConsoleKeyInfo.get_Key
                                                  /--*  t322   int    
N005 ( 21, 13) [000324] DA-XG-------              *  STORE_LCL_VAR int    V44 tmp26        
               [000609] ------------                 IL_OFFSET void   IL offset: 0x217
N001 (  3,  2) [000325] ------------       t325 =    LCL_VAR   int    V44 tmp26        
N002 (  1,  1) [000326] ------------       t326 =    CNS_INT   int    81
                                                  /--*  t325   int    
                                                  +--*  t326   int    
N003 (  8,  4) [000327] ------------       t327 = *  EQ        int   
                                                  /--*  t327   int    
N005 ( 12,  7) [000329] DA----------              *  STORE_LCL_VAR int    V16 loc14        
               [000610] ------------                 IL_OFFSET void   IL offset: 0x21d
N001 (  3,  2) [000330] ------------       t330 =    LCL_VAR   int    V16 loc14        
N002 (  1,  1) [000331] ------------       t331 =    CNS_INT   int    0
                                                  /--*  t330   int    
                                                  +--*  t331   int    
N003 (  5,  4) [000332] J------N----       t332 = *  EQ        int   
                                                  /--*  t332   int    
N004 (  7,  6) [000333] ------------              *  JTRUE     void  

------------ BB37 [221..224) -> BB40 (always), preds={BB36} succs={BB40}
               [000611] ------------                 IL_OFFSET void   IL offset: 0x221
N001 (  1,  1) [000335] ------------                 NO_OP     void  
               [000612] ------------                 IL_OFFSET void   IL offset: 0x222
N001 (  0,  0) [000336] ------------                 NOP       void  

------------ BB38 [224..225), preds={BB31,BB33,BB35,BB36} succs={BB39}
               [000613] ------------                 IL_OFFSET void   IL offset: 0x224
N001 (  1,  1) [000334] ------------                 NO_OP     void  

------------ BB39 [225..22A) -> BB30 (always), preds={BB29,BB38} succs={BB30}
               [000614] ------------                 IL_OFFSET void   IL offset: 0x225
N001 (  1,  1) [000266] ------------       t266 =    CNS_INT   int    1
                                                  /--*  t266   int    
N003 (  5,  4) [000268] DA----------              *  STORE_LCL_VAR int    V17 loc15        
               [000615] ------------                 IL_OFFSET void   IL offset: 0x228
N001 (  0,  0) [000269] ------------                 NOP       void  

------------ BB40 [22A..232) (return), preds={BB37} succs={}
               [000616] ------------                 IL_OFFSET void   IL offset: 0x22a
N001 (  3,  2) [000337] ------------       t337 =    LCL_VAR   ref    V00 this         
N002 (  1,  1) [000492] ------------       t492 =    CNS_INT   long   16 field offset Fseq[_running]
                                                  /--*  t337   ref    
                                                  +--*  t492   long   
N003 (  4,  3) [000493] -------N----       t493 = *  ADD       byref 
N005 (  1,  1) [000338] ------------       t338 =    CNS_INT   int    0
                                                  /--*  t493   byref  
                                                  +--*  t338   int    
               [000617] -A-XG-------              *  STOREIND  bool  
               [000618] ------------                 IL_OFFSET void   IL offset: 0x231
N001 (  0,  0) [000341] ------------                 RETURN    void  

------------ BB10 [0D5..0D9) -> BB12 (cond), preds={BB08} succs={BB11,BB12}
               [000619] ------------                 IL_OFFSET void   IL offset: 0xd5
N001 (  3,  2) [000163] ------------       t163 =    LCL_VAR   int   (AX) V06 loc4         
                                                  /--*  t163   int    
N002 (  4,  4) [000441] ----G-------       t441 = *  CAST      int <- bool <- int
N003 (  1,  1) [000164] ------------       t164 =    CNS_INT   int    0
                                                  /--*  t441   int    
                                                  +--*  t164   int    
N004 (  6,  6) [000165] J---G--N----       t165 = *  EQ        int   
                                                  /--*  t165   int    
N005 (  8,  8) [000166] ----G-------              *  JTRUE     void  

------------ BB11 [0D9..0E0), preds={BB10} succs={BB12}
               [000620] ------------                 IL_OFFSET void   IL offset: 0xd9
N002 (  3,  2) [000168] ------------       t168 =    LCL_VAR   ref    V05 loc3         
                                                  /--*  t168   ref    arg0 in rcx
N003 ( 17,  8) [000169] --CXG-------              *  CALL      void   System.Threading.Monitor.Exit
               [000621] ------------                 IL_OFFSET void   IL offset: 0xdf
N001 (  1,  1) [000170] ------------                 NO_OP     void  

------------ BB12 [0E0..0E1) (finret), preds={BB10,BB11} succs={BB09}
               [000622] ------------                 IL_OFFSET void   IL offset: 0xe0
N001 (  0,  0) [000167] ------------                 RETFILT   void  

------------ BB24 [14B..14F) -> BB26 (cond), preds={BB20,BB22} succs={BB25,BB26}
               [000623] ------------                 IL_OFFSET void   IL offset: 0x14b
N001 (  3,  2) [000363] ------------       t363 =    LCL_VAR   int   (AX) V09 loc7         
                                                  /--*  t363   int    
N002 (  4,  4) [000461] ----G-------       t461 = *  CAST      int <- bool <- int
N003 (  1,  1) [000364] ------------       t364 =    CNS_INT   int    0
                                                  /--*  t461   int    
                                                  +--*  t364   int    
N004 (  6,  6) [000365] J---G--N----       t365 = *  EQ        int   
                                                  /--*  t365   int    
N005 (  8,  8) [000366] ----G-------              *  JTRUE     void  

------------ BB25 [14F..157), preds={BB24} succs={BB26}
               [000624] ------------                 IL_OFFSET void   IL offset: 0x14f
N002 (  3,  2) [000368] ------------       t368 =    LCL_VAR   ref    V08 loc6         
                                                  /--*  t368   ref    arg0 in rcx
N003 ( 17,  8) [000369] --CXG-------              *  CALL      void   System.Threading.Monitor.Exit
               [000625] ------------                 IL_OFFSET void   IL offset: 0x156
N001 (  1,  1) [000370] ------------                 NO_OP     void  

------------ BB26 [157..158) (finret), preds={BB24,BB25} succs={BB21,BB23}
               [000626] ------------                 IL_OFFSET void   IL offset: 0x157
N001 (  0,  0) [000367] ------------                 RETFILT   void  

-------------------------------------------------------------------------------------------------------------------
*************** In fgDebugCheckBBlist

*************** Starting PHASE Do 'simple' lowering
Bumping outgoingArgSpaceSize to 32 for call [000375]
outgoingArgSpaceSize 32 sufficient for call [000002], which needs 32
outgoingArgSpaceSize 32 sufficient for call [000012], which needs 32
outgoingArgSpaceSize 32 sufficient for call [000017], which needs 32
outgoingArgSpaceSize 32 sufficient for call [000021], which needs 32
outgoingArgSpaceSize 32 sufficient for call [000025], which needs 32
outgoingArgSpaceSize 32 sufficient for call [000029], which needs 32
outgoingArgSpaceSize 32 sufficient for call [000037], which needs 32
outgoingArgSpaceSize 32 sufficient for call [000041], which needs 32
outgoingArgSpaceSize 32 sufficient for call [000051], which needs 32
outgoingArgSpaceSize 32 sufficient for call [000055], which needs 32
outgoingArgSpaceSize 32 sufficient for call [000058], which needs 32
outgoingArgSpaceSize 32 sufficient for call [000062], which needs 32
outgoingArgSpaceSize 32 sufficient for call [000067], which needs 32
outgoingArgSpaceSize 32 sufficient for call [000069], which needs 32
outgoingArgSpaceSize 32 sufficient for call [000079], which needs 32
outgoingArgSpaceSize 32 sufficient for call [000084], which needs 32
outgoingArgSpaceSize 32 sufficient for call [000088], which needs 32
outgoingArgSpaceSize 32 sufficient for call [000114], which needs 32
outgoingArgSpaceSize 32 sufficient for call [000121], which needs 32
outgoingArgSpaceSize 32 sufficient for call [000125], which needs 32
outgoingArgSpaceSize 32 sufficient for call [000144], which needs 32
outgoingArgSpaceSize 32 sufficient for call [000148], which needs 32
outgoingArgSpaceSize 32 sufficient for call [000171], which needs 32
outgoingArgSpaceSize 32 sufficient for call [000181], which needs 32
outgoingArgSpaceSize 32 sufficient for call [000186], which needs 32
outgoingArgSpaceSize 32 sufficient for call [000190], which needs 32
outgoingArgSpaceSize 32 sufficient for call [000208], which needs 32
outgoingArgSpaceSize 32 sufficient for call [000227], which needs 32
outgoingArgSpaceSize 32 sufficient for call [000232], which needs 32
outgoingArgSpaceSize 32 sufficient for call [000242], which needs 32
outgoingArgSpaceSize 32 sufficient for call [000247], which needs 32
outgoingArgSpaceSize 32 sufficient for call [000251], which needs 32
outgoingArgSpaceSize 32 sufficient for call [000254], which needs 32
outgoingArgSpaceSize 32 sufficient for call [000257], which needs 32
outgoingArgSpaceSize 32 sufficient for call [000260], which needs 32
outgoingArgSpaceSize 32 sufficient for call [000263], which needs 32
outgoingArgSpaceSize 32 sufficient for call [000271], which needs 32
outgoingArgSpaceSize 32 sufficient for call [000280], which needs 32
outgoingArgSpaceSize 32 sufficient for call [000355], which needs 32
outgoingArgSpaceSize 32 sufficient for call [000359], which needs 32
outgoingArgSpaceSize 32 sufficient for call [000294], which needs 32
outgoingArgSpaceSize 32 sufficient for call [000350], which needs 32
outgoingArgSpaceSize 32 sufficient for call [000308], which needs 32
outgoingArgSpaceSize 32 sufficient for call [000322], which needs 32
outgoingArgSpaceSize 32 sufficient for call [000169], which needs 32
outgoingArgSpaceSize 32 sufficient for call [000369], which needs 32

*************** Finishing PHASE Do 'simple' lowering
*************** In fgDebugCheckBBlist
Trees before Lowering nodeinfo

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [???..???)                                     i internal hascall LIR 
BB02 [0038]  1       BB01                  1       [???..???)-> BB04 ( cond )                     internal LIR 
BB03 [0039]  1       BB02                  0.50    [???..???)                                     internal LIR 
BB04 [0037]  2       BB02,BB03             1       [???..???)                                     i internal hascall LIR 
BB05 [0001]  1       BB04                  1       [000..078)-> BB14 (always)                     i hascall gcsafe newobj LIR 
BB06 [0002]  1       BB14                  1       [078..083)                                     i bwd bwd-target LIR 
BB07 [0003]  1  0    BB06                  1       [083..0D5)-> BB08 (always) T0      try { }     keep i try hascall gcsafe newobj bwd LIR 
BB08 [0031]  1       BB07                  1       [???..???)-> BB10 (callf )                     i internal LIR 
BB09 [0032]  1       BB12                  1       [???..???)-> BB13 (ALWAYS)                     i internal LIR KEEP 
BB13 [0007]  1       BB09                  1       [0E1..0E6)                                     i bwd LIR 
BB14 [0008]  2       BB05,BB13             1       [0E6..0F1)-> BB06 ( cond )                     i bwd LIR 
BB15 [0009]  1       BB14                  1       [0F1..110)-> BB28 (always)                     i hascall gcsafe LIR 
BB16 [0010]  1       BB28                  1       [110..11C)                                     i bwd bwd-target LIR 
BB17 [0011]  1  1    BB16                  1       [11C..145)-> BB19 ( cond ) T1      try {       keep i try hascall gcsafe bwd LIR 
BB18 [0012]  1  1    BB17                  1       [145..148)-> BB20 (always) T1                  i bwd LIR 
BB19 [0013]  1  1    BB17                  1       [148..14B)-> BB22 (always) T1      }           i bwd LIR 
BB20 [0035]  1       BB18                  1       [???..???)-> BB24 (callf )                     i internal LIR 
BB21 [0036]  1       BB26                  1       [???..???)-> BB29 (ALWAYS)                     i internal LIR KEEP 
BB22 [0033]  1       BB19                  1       [???..???)-> BB24 (callf )                     i internal LIR 
BB23 [0034]  1       BB26                  1       [???..???)-> BB27 (ALWAYS)                     i internal LIR KEEP 
BB27 [0017]  1       BB23                  1       [158..161)                                     i hascall gcsafe bwd LIR 
BB28 [0018]  2       BB15,BB27             1       [161..166)-> BB16 (always)                     i bwd LIR 
BB29 [0019]  1       BB21                  1       [166..1B1)-> BB39 (always)                     i hascall gcsafe LIR 
BB30 [0020]  1       BB39                  1       [1B1..1CA)-> BB32 ( cond )                     i hascall gcsafe bwd bwd-target LIR 
BB31 [0021]  1       BB30                  1       [1CA..1D9)-> BB38 (always)                     i hascall gcsafe bwd LIR 
BB32 [0022]  1       BB30                  1       [1D9..1EA)-> BB34 ( cond )                     i hascall gcsafe bwd LIR 
BB33 [0023]  1       BB32                  1       [1EA..1F4)-> BB38 (always)                     i hascall gcsafe bwd LIR 
BB34 [0024]  1       BB32                  1       [1F4..205)-> BB36 ( cond )                     i hascall gcsafe bwd LIR 
BB35 [0025]  1       BB34                  1       [205..210)-> BB38 (always)                     i bwd LIR 
BB36 [0026]  1       BB34                  1       [210..221)-> BB38 ( cond )                     i hascall gcsafe bwd LIR 
BB37 [0027]  1       BB36                  1       [221..224)-> BB40 (always)                     i bwd LIR 
BB38 [0028]  4       BB31,BB33,BB35,BB36   1       [224..225)                                     i bwd LIR 
BB39 [0029]  2       BB29,BB38             1       [225..22A)-> BB30 (always)                     i bwd LIR 
BB40 [0030]  1       BB37                  1       [22A..232)        (return)                     i LIR 
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ funclets follow
BB10 [0004]  2     0 BB08                  1       [0D5..0D9)-> BB12 ( cond )    H0 F finally {   keep i flet bwd LIR 
BB11 [0005]  1     0 BB10                  1       [0D9..0E0)                    H0               i hascall bwd LIR 
BB12 [0006]  2     0 BB10,BB11             1       [0E0..0E1)        (finret)    H0   }           i bwd LIR 
BB24 [0014]  3     1 BB20,BB22             1       [14B..14F)-> BB26 ( cond )    H1 F finally {   keep i flet bwd LIR 
BB25 [0015]  1     1 BB24                  1       [14F..157)                    H1               i hascall bwd LIR 
BB26 [0016]  2     1 BB24,BB25             1       [157..158)        (finret)    H1   }           i bwd LIR 
-----------------------------------------------------------------------------------------------------------------------------------------

------------ BB01 [???..???), preds={} succs={BB02}
N001 (  0,  0) [000000] ------------                 NOP       void  

------------ BB02 [???..???) -> BB04 (cond), preds={BB01} succs={BB03,BB04}
N001 (  2, 10) [000371] H-----------       t371 =    CNS_INT(h) long   0x7ffdb6f1d838 global ptr
                                                  /--*  t371   long   
N002 (  4, 12) [000372] n-----------       t372 = *  IND       int   
N003 (  1,  1) [000373] ------------       t373 =    CNS_INT   int    0
                                                  /--*  t372   int    
                                                  +--*  t373   int    
N004 (  6, 14) [000374] J------N----       t374 = *  EQ        int   
                                                  /--*  t374   int    
N005 (  8, 16) [000494] ------------              *  JTRUE     void  

------------ BB03 [???..???), preds={BB02} succs={BB04}
N001 ( 14,  5) [000375] --C-G-?-----                 CALL help void   HELPER.CORINFO_HELP_DBG_IS_JUST_MY_CODE

------------ BB04 [???..???), preds={BB02,BB03} succs={BB05}

------------ BB05 [000..078) -> BB14 (always), preds={BB04} succs={BB14}
               [000495] ------------                 IL_OFFSET void   IL offset: 0x0
N001 (  1,  1) [000001] ------------                 NO_OP     void  
               [000496] ------------                 IL_OFFSET void   IL offset: 0x1
N001 ( 14,  5) [000002] --CXG-------         t2 =    CALL      struct System.DateTime.get_Now
                                                  /--*  t2     struct 
N003 ( 18,  8) [000005] DA-XG-------              *  STORE_LCL_VAR struct<System.DateTime, 8> V19 tmp1         
               [000497] ------------                 IL_OFFSET void   IL offset: 0x6
N001 (  3,  2) [000006] ------------         t6 =    LCL_VAR   struct<System.DateTime, 8> V19 tmp1         
                                                  /--*  t6     struct 
N003 (  7,  5) [000009] DA--G-------              *  STORE_LCL_VAR struct<System.DateTime, 8>(AX) V03 loc1         
               [000498] ------------                 IL_OFFSET void   IL offset: 0x7
N002 (  3,  3) [000011] ------------        t11 =    LCL_VAR_ADDR byref  V03 loc1         
                                                  /--*  t11    byref  this in rcx
N003 ( 17, 10) [000012] --CXG-------        t12 = *  CALL      ref    System.DateTime.ToString
                                                  /--*  t12    ref    
N005 ( 21, 13) [000014] DA-XG-------              *  STORE_LCL_VAR ref    V20 tmp2         
               [000499] ------------                 IL_OFFSET void   IL offset: 0xe
N003 (  2, 10) [000380] H-----------       t380 =    CNS_INT(h) long   0xBE2A31F0 "	 Created list"
                                                  /--*  t380   long   
N004 (  4, 12) [000381] #---G-------       t381 = *  IND       ref   
N005 (  3,  2) [000015] ------------        t15 =    LCL_VAR   ref    V20 tmp2         
                                                  /--*  t381   ref    arg1 in rdx
                                                  +--*  t15    ref    arg0 in rcx
N006 ( 21, 21) [000017] --CXG-------        t17 = *  CALL      ref    System.String.Concat
                                                  /--*  t17    ref    
N008 ( 25, 24) [000019] DA-XG-------              *  STORE_LCL_VAR ref    V21 tmp3         
               [000500] ------------                 IL_OFFSET void   IL offset: 0x18
N002 (  3,  2) [000020] ------------        t20 =    LCL_VAR   ref    V21 tmp3         
                                                  /--*  t20    ref    arg0 in rcx
N003 ( 17,  8) [000021] --CXG-------              *  CALL      void   System.Console.WriteLine
               [000501] ------------                 IL_OFFSET void   IL offset: 0x1d
N001 (  1,  1) [000022] ------------                 NO_OP     void  
               [000502] ------------                 IL_OFFSET void   IL offset: 0x1e
N002 (  2, 10) [000024] H-----------        t24 =    CNS_INT(h) long   0x7ffdb7022b70 method
                                                  /--*  t24    long   arg0 in rcx
N003 ( 16, 16) [000025] --C---------        t25 = *  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
                                                  /--*  t25    ref    
N005 ( 20, 19) [000027] DA----------              *  STORE_LCL_VAR ref    V22 tmp4         
N002 (  3,  2) [000028] ------------        t28 =    LCL_VAR   ref    V22 tmp4         
                                                  /--*  t28    ref    this in rcx
N003 ( 17,  9) [000029] --CXG-------              *  CALL      void   FalseLeakRepro.List..ctor
               [000503] ------------                 IL_OFFSET void   IL offset: 0x24
N001 (  3,  2) [000023] ------------        t23 =    LCL_VAR   ref    V00 this         
N002 (  1,  1) [000387] ------------       t387 =    CNS_INT   long   8 field offset Fseq[_myList]
                                                  /--*  t23    ref    
                                                  +--*  t387   long   
N003 (  4,  3) [000388] -------N----       t388 = *  ADD       byref 
N005 (  3,  2) [000030] ------------        t30 =    LCL_VAR   ref    V22 tmp4         
                                                  /--*  t388   byref  
                                                  +--*  t30    ref    
               [000504] -A-XG-------              *  STOREIND  ref   
               [000505] ------------                 IL_OFFSET void   IL offset: 0x29
N002 (  2, 10) [000036] H-----------        t36 =    CNS_INT(h) long   0x7ffdb6c458b8 token
                                                  /--*  t36    long   arg0 in rcx
N003 ( 16, 16) [000037] --C---------        t37 = *  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
                                                  /--*  t37    ref    
N005 ( 20, 19) [000039] DA----------              *  STORE_LCL_VAR ref    V23 tmp5         
N001 (  3,  2) [000033] ------------        t33 =    LCL_VAR   ref    V00 this         
N002 (  1,  1) [000392] ------------       t392 =    CNS_INT   long   8 field offset Fseq[_myList]
                                                  /--*  t33    ref    
                                                  +--*  t392   long   
N003 (  4,  3) [000393] -------N----       t393 = *  ADD       byref 
                                                  /--*  t393   byref  
N004 (  6,  5) [000034] ---XG-------        t34 = *  IND       ref   
N005 (  1,  1) [000390] ------------       t390 =    CNS_INT   long   8 field offset Fseq[Head]
                                                  /--*  t34    ref    
                                                  +--*  t390   long   
N006 (  7,  6) [000391] ---XG--N----       t391 = *  ADD       byref 
                                                  /--*  t391   byref  
N007 (  9,  8) [000035] ---XG-------        t35 = *  IND       ref   
                                                  /--*  t35    ref    
N009 ( 13, 11) [000043] DA-XG-------              *  STORE_LCL_VAR ref    V24 tmp6         
N002 (  3,  2) [000040] ------------        t40 =    LCL_VAR   ref    V23 tmp5         
                                                  /--*  t40    ref    this in rcx
N003 ( 17,  9) [000041] --CXG-------              *  CALL      void   System.Object..ctor
               [000506] ------------                 IL_OFFSET void   IL offset: 0x39
N001 (  3,  2) [000044] ------------        t44 =    LCL_VAR   ref    V24 tmp6         
N002 (  1,  1) [000395] ------------       t395 =    CNS_INT   long   16 field offset Fseq[Data]
                                                  /--*  t44    ref    
                                                  +--*  t395   long   
N003 (  4,  3) [000396] -------N----       t396 = *  ADD       byref 
N005 (  3,  2) [000045] ------------        t45 =    LCL_VAR   ref    V23 tmp5         
                                                  /--*  t396   byref  
                                                  +--*  t45    ref    
               [000507] -A-XG-------              *  STOREIND  ref   
               [000508] ------------                 IL_OFFSET void   IL offset: 0x3e
N002 (  2, 10) [000050] H-----------        t50 =    CNS_INT(h) long   0x7ffdb7026348 token
                                                  /--*  t50    long   arg0 in rcx
N003 ( 16, 16) [000051] --C---------        t51 = *  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
                                                  /--*  t51    ref    
N005 ( 20, 19) [000053] DA----------              *  STORE_LCL_VAR ref    V25 tmp7         
N004 (  3,  2) [000054] ------------        t54 =    LCL_VAR   ref    V25 tmp7         
N005 (  3,  2) [000048] ------------        t48 =    LCL_VAR   ref    V00 this         
N006 (  2, 10) [000049] H-----------        t49 =    CNS_INT(h) long   0x7ffdb6c613f8 ftn
                                                  /--*  t54    ref    this in rcx
                                                  +--*  t48    ref    arg1 in rdx
                                                  +--*  t49    long   arg2 in r8
N007 ( 22, 23) [000055] --CXG-------              *  CALL      void   System.MulticastDelegate.CtorClosed
               [000509] ------------                 IL_OFFSET void   IL offset: 0x4a
N002 (  2, 10) [000057] H-----------        t57 =    CNS_INT(h) long   0x7ffdb6dc4e80 token
                                                  /--*  t57    long   arg0 in rcx
N003 ( 16, 16) [000058] --C---------        t58 = *  CALL help ref    HELPER.CORINFO_HELP_NEWFAST
                                                  /--*  t58    ref    
N005 ( 20, 19) [000060] DA----------              *  STORE_LCL_VAR ref    V26 tmp8         
N003 (  3,  2) [000061] ------------        t61 =    LCL_VAR   ref    V26 tmp8         
N004 (  3,  2) [000056] ------------        t56 =    LCL_VAR   ref    V25 tmp7         
                                                  /--*  t61    ref    this in rcx
                                                  +--*  t56    ref    arg1 in rdx
N005 ( 20, 12) [000062] --CXG-------              *  CALL      void   System.Threading.Thread..ctor
               [000510] ------------                 IL_OFFSET void   IL offset: 0x4f
N001 (  3,  2) [000063] ------------        t63 =    LCL_VAR   ref    V26 tmp8         
                                                  /--*  t63    ref    
N003 (  7,  5) [000065] DA----------              *  STORE_LCL_VAR ref    V02 loc0         
               [000511] ------------                 IL_OFFSET void   IL offset: 0x50
N002 (  3,  2) [000066] ------------        t66 =    LCL_VAR   ref    V02 loc0         
                                                  /--*  t66    ref    this in rcx
N003 ( 17,  9) [000067] --CXG-------              *  CALL nullcheck void   System.Threading.Thread.Start
               [000512] ------------                 IL_OFFSET void   IL offset: 0x56
N001 (  1,  1) [000068] ------------                 NO_OP     void  
               [000513] ------------                 IL_OFFSET void   IL offset: 0x57
N001 ( 14,  5) [000069] --CXG-------        t69 =    CALL      struct System.DateTime.get_Now
                                                  /--*  t69    struct 
N003 ( 18,  8) [000072] DA-XG-------              *  STORE_LCL_VAR struct<System.DateTime, 8> V27 tmp9         
               [000514] ------------                 IL_OFFSET void   IL offset: 0x5c
N001 (  3,  2) [000073] ------------        t73 =    LCL_VAR   struct<System.DateTime, 8> V27 tmp9         
                                                  /--*  t73    struct 
N003 (  7,  5) [000076] DA--G-------              *  STORE_LCL_VAR struct<System.DateTime, 8>(AX) V03 loc1         
               [000515] ------------                 IL_OFFSET void   IL offset: 0x5d
N002 (  3,  3) [000078] ------------        t78 =    LCL_VAR_ADDR byref  V03 loc1         
                                                  /--*  t78    byref  this in rcx
N003 ( 17, 10) [000079] --CXG-------        t79 = *  CALL      ref    System.DateTime.ToString
                                                  /--*  t79    ref    
N005 ( 21, 13) [000081] DA-XG-------              *  STORE_LCL_VAR ref    V28 tmp10        
               [000516] ------------                 IL_OFFSET void   IL offset: 0x64
N003 (  2, 10) [000406] H-----------       t406 =    CNS_INT(h) long   0xBE2A31F8 "	 Consumer thread started, adding items..."
                                                  /--*  t406   long   
N004 (  4, 12) [000407] #---G-------       t407 = *  IND       ref   
N005 (  3,  2) [000082] ------------        t82 =    LCL_VAR   ref    V28 tmp10        
                                                  /--*  t407   ref    arg1 in rdx
                                                  +--*  t82    ref    arg0 in rcx
N006 ( 21, 21) [000084] --CXG-------        t84 = *  CALL      ref    System.String.Concat
                                                  /--*  t84    ref    
N008 ( 25, 24) [000086] DA-XG-------              *  STORE_LCL_VAR ref    V29 tmp11        
               [000517] ------------                 IL_OFFSET void   IL offset: 0x6e
N002 (  3,  2) [000087] ------------        t87 =    LCL_VAR   ref    V29 tmp11        
                                                  /--*  t87    ref    arg0 in rcx
N003 ( 17,  8) [000088] --CXG-------              *  CALL      void   System.Console.WriteLine
               [000518] ------------                 IL_OFFSET void   IL offset: 0x73
N001 (  1,  1) [000089] ------------                 NO_OP     void  
               [000519] ------------                 IL_OFFSET void   IL offset: 0x74
N001 (  1,  1) [000090] ------------        t90 =    CNS_INT   int    0
                                                  /--*  t90    int    
N003 (  5,  4) [000092] DA----------              *  STORE_LCL_VAR int    V04 loc2         
               [000520] ------------                 IL_OFFSET void   IL offset: 0x76
N001 (  0,  0) [000093] ------------                 NOP       void  

------------ BB06 [078..083), preds={BB14} succs={BB07}
               [000521] ------------                 IL_OFFSET void   IL offset: 0x78
N001 (  1,  1) [000103] ------------                 NO_OP     void  
               [000522] ------------                 IL_OFFSET void   IL offset: 0x79
N001 (  3,  2) [000104] ------------       t104 =    LCL_VAR   ref    V00 this         
N002 (  1,  1) [000411] ------------       t411 =    CNS_INT   long   8 field offset Fseq[_myList]
                                                  /--*  t104   ref    
                                                  +--*  t411   long   
N003 (  4,  3) [000412] -------N----       t412 = *  ADD       byref 
                                                  /--*  t412   byref  
N004 (  6,  5) [000105] ---XG-------       t105 = *  IND       ref   
                                                  /--*  t105   ref    
N006 ( 10,  8) [000107] DA-XG-------              *  STORE_LCL_VAR ref    V05 loc3         
               [000523] ------------                 IL_OFFSET void   IL offset: 0x80
N001 (  1,  1) [000108] ------------       t108 =    CNS_INT   int    0
                                                  /--*  t108   int    
N003 (  5,  4) [000110] DA--G-------              *  STORE_LCL_VAR int   (AX) V06 loc4         

------------ BB07 [083..0D5) -> BB08 (always), preds={BB06} succs={BB08}
               [000524] ------------                 IL_OFFSET void   IL offset: 0x83
N003 (  3,  3) [000113] ------------       t113 =    LCL_VAR_ADDR long   V06 loc4         
N004 (  3,  2) [000111] ------------       t111 =    LCL_VAR   ref    V05 loc3         
                                                  /--*  t113   long   arg1 in rdx
                                                  +--*  t111   ref    arg0 in rcx
N005 ( 20, 12) [000114] --CXG-------              *  CALL      void   System.Threading.Monitor.Enter
               [000525] ------------                 IL_OFFSET void   IL offset: 0x8b
N001 (  1,  1) [000115] ------------                 NO_OP     void  
               [000526] ------------                 IL_OFFSET void   IL offset: 0x8c
N001 (  1,  1) [000116] ------------                 NO_OP     void  
               [000527] ------------                 IL_OFFSET void   IL offset: 0x8d
N002 (  2, 10) [000120] H-----------       t120 =    CNS_INT(h) long   0x7ffdb70260c8 method
                                                  /--*  t120   long   arg0 in rcx
N003 ( 16, 16) [000121] --C---------       t121 = *  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
                                                  /--*  t121   ref    
N005 ( 20, 19) [000123] DA----------              *  STORE_LCL_VAR ref    V30 tmp12        
N001 (  3,  2) [000117] ------------       t117 =    LCL_VAR   ref    V00 this         
N002 (  1,  1) [000418] ------------       t418 =    CNS_INT   long   8 field offset Fseq[_myList]
                                                  /--*  t117   ref    
                                                  +--*  t418   long   
N003 (  4,  3) [000419] -------N----       t419 = *  ADD       byref 
                                                  /--*  t419   byref  
N004 (  6,  5) [000118] ---XG-------       t118 = *  IND       ref   
N005 (  1,  1) [000416] ------------       t416 =    CNS_INT   long   8 field offset Fseq[Head]
                                                  /--*  t118   ref    
                                                  +--*  t416   long   
N006 (  7,  6) [000417] ---XG--N----       t417 = *  ADD       byref 
                                                  /--*  t417   byref  
N007 (  9,  8) [000119] ---XG-------       t119 = *  IND       ref   
                                                  /--*  t119   ref    
N009 ( 13, 11) [000127] DA-XG-------              *  STORE_LCL_VAR ref    V31 tmp13        
N002 (  3,  2) [000124] ------------       t124 =    LCL_VAR   ref    V30 tmp12        
                                                  /--*  t124   ref    this in rcx
N003 ( 17,  9) [000125] --CXG-------              *  CALL      void   FalseLeakRepro.Node..ctor
               [000528] ------------                 IL_OFFSET void   IL offset: 0x9d
N001 (  3,  2) [000128] ------------       t128 =    LCL_VAR   ref    V31 tmp13        
N002 (  1,  1) [000421] ------------       t421 =    CNS_INT   long   8 field offset Fseq[Next]
                                                  /--*  t128   ref    
                                                  +--*  t421   long   
N003 (  4,  3) [000422] -------N----       t422 = *  ADD       byref 
N005 (  3,  2) [000129] ------------       t129 =    LCL_VAR   ref    V30 tmp12        
                                                  /--*  t422   byref  
                                                  +--*  t129   ref    
               [000529] -A-XG-------              *  STOREIND  ref   
               [000530] ------------                 IL_OFFSET void   IL offset: 0xa2
N001 (  3,  2) [000132] ------------       t132 =    LCL_VAR   ref    V00 this         
N002 (  1,  1) [000425] ------------       t425 =    CNS_INT   long   8 field offset Fseq[_myList]
                                                  /--*  t132   ref    
                                                  +--*  t425   long   
N003 (  4,  3) [000426] -------N----       t426 = *  ADD       byref 
                                                  /--*  t426   byref  
N004 (  6,  5) [000133] ---XG-------       t133 = *  IND       ref   
N005 (  1,  1) [000423] ------------       t423 =    CNS_INT   long   8 field offset Fseq[Head]
                                                  /--*  t133   ref    
                                                  +--*  t423   long   
N006 (  7,  6) [000424] ---XG--N----       t424 = *  ADD       byref 
N008 (  3,  2) [000134] ------------       t134 =    LCL_VAR   ref    V00 this         
N009 (  1,  1) [000431] ------------       t431 =    CNS_INT   long   8 field offset Fseq[_myList]
                                                  /--*  t134   ref    
                                                  +--*  t431   long   
N010 (  4,  3) [000432] -------N----       t432 = *  ADD       byref 
                                                  /--*  t432   byref  
N011 (  6,  5) [000135] ---XG-------       t135 = *  IND       ref   
N012 (  1,  1) [000429] ------------       t429 =    CNS_INT   long   8 field offset Fseq[Head]
                                                  /--*  t135   ref    
                                                  +--*  t429   long   
N013 (  7,  6) [000430] ---XG--N----       t430 = *  ADD       byref 
                                                  /--*  t430   byref  
N014 (  9,  8) [000136] ---XG-------       t136 = *  IND       ref   
N015 (  1,  1) [000427] ------------       t427 =    CNS_INT   long   8 field offset Fseq[Next]
                                                  /--*  t136   ref    
                                                  +--*  t427   long   
N016 ( 10,  9) [000428] ---XG--N----       t428 = *  ADD       byref 
                                                  /--*  t428   byref  
N017 ( 12, 11) [000137] ---XG-------       t137 = *  IND       ref   
                                                  /--*  t424   byref  
                                                  +--*  t137   ref    
               [000531] -A-XG-------              *  STOREIND  ref   
               [000532] ------------                 IL_OFFSET void   IL offset: 0xbd
N002 (  2, 10) [000143] H-----------       t143 =    CNS_INT(h) long   0x7ffdb6c458b8 token
                                                  /--*  t143   long   arg0 in rcx
N003 ( 16, 16) [000144] --C---------       t144 = *  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
                                                  /--*  t144   ref    
N005 ( 20, 19) [000146] DA----------              *  STORE_LCL_VAR ref    V32 tmp14        
N001 (  3,  2) [000140] ------------       t140 =    LCL_VAR   ref    V00 this         
N002 (  1,  1) [000436] ------------       t436 =    CNS_INT   long   8 field offset Fseq[_myList]
                                                  /--*  t140   ref    
                                                  +--*  t436   long   
N003 (  4,  3) [000437] -------N----       t437 = *  ADD       byref 
                                                  /--*  t437   byref  
N004 (  6,  5) [000141] ---XG-------       t141 = *  IND       ref   
N005 (  1,  1) [000434] ------------       t434 =    CNS_INT   long   8 field offset Fseq[Head]
                                                  /--*  t141   ref    
                                                  +--*  t434   long   
N006 (  7,  6) [000435] ---XG--N----       t435 = *  ADD       byref 
                                                  /--*  t435   byref  
N007 (  9,  8) [000142] ---XG-------       t142 = *  IND       ref   
                                                  /--*  t142   ref    
N009 ( 13, 11) [000150] DA-XG-------              *  STORE_LCL_VAR ref    V33 tmp15        
N002 (  3,  2) [000147] ------------       t147 =    LCL_VAR   ref    V32 tmp14        
                                                  /--*  t147   ref    this in rcx
N003 ( 17,  9) [000148] --CXG-------              *  CALL      void   System.Object..ctor
               [000533] ------------                 IL_OFFSET void   IL offset: 0xcd
N001 (  3,  2) [000151] ------------       t151 =    LCL_VAR   ref    V33 tmp15        
N002 (  1,  1) [000439] ------------       t439 =    CNS_INT   long   16 field offset Fseq[Data]
                                                  /--*  t151   ref    
                                                  +--*  t439   long   
N003 (  4,  3) [000440] -------N----       t440 = *  ADD       byref 
N005 (  3,  2) [000152] ------------       t152 =    LCL_VAR   ref    V32 tmp14        
                                                  /--*  t440   byref  
                                                  +--*  t152   ref    
               [000534] -A-XG-------              *  STOREIND  ref   
               [000535] ------------                 IL_OFFSET void   IL offset: 0xd2
N001 (  1,  1) [000155] ------------                 NO_OP     void  
               [000536] ------------                 IL_OFFSET void   IL offset: 0xd3
N001 (  0,  0) [000156] ------------                 NOP       void  

------------ BB08 [???..???) -> BB10 (callf), preds={BB07} succs={BB10}

------------ BB09 [???..???) -> BB13 (ALWAYS), preds={BB12} succs={BB13}

------------ BB13 [0E1..0E6), preds={BB09} succs={BB14}
               [000537] ------------                 IL_OFFSET void   IL offset: 0xe1
N001 (  1,  1) [000157] ------------                 NO_OP     void  
               [000538] ------------                 IL_OFFSET void   IL offset: 0xe2
N001 (  3,  2) [000158] ------------       t158 =    LCL_VAR   int    V04 loc2         
N002 (  1,  1) [000159] ------------       t159 =    CNS_INT   int    1
                                                  /--*  t158   int    
                                                  +--*  t159   int    
N003 (  5,  4) [000160] ------------       t160 = *  ADD       int   
                                                  /--*  t160   int    
N005 (  9,  7) [000162] DA----------              *  STORE_LCL_VAR int    V04 loc2         

------------ BB14 [0E6..0F1) -> BB06 (cond), preds={BB05,BB13} succs={BB15,BB06}
               [000539] ------------                 IL_OFFSET void   IL offset: 0xe6
N001 (  3,  2) [000094] ------------        t94 =    LCL_VAR   int    V04 loc2         
N002 (  1,  1) [000095] ------------        t95 =    CNS_INT   int    10
                                                  /--*  t94    int    
                                                  +--*  t95    int    
N003 (  8,  4) [000096] ------------        t96 = *  LT        int   
                                                  /--*  t96    int    
N005 ( 12,  7) [000098] DA----------              *  STORE_LCL_VAR int    V07 loc5         
               [000540] ------------                 IL_OFFSET void   IL offset: 0xed
N001 (  3,  2) [000099] ------------        t99 =    LCL_VAR   int    V07 loc5         
N002 (  1,  1) [000100] ------------       t100 =    CNS_INT   int    0
                                                  /--*  t99    int    
                                                  +--*  t100   int    
N003 (  5,  4) [000101] J------N----       t101 = *  NE        int   
                                                  /--*  t101   int    
N004 (  7,  6) [000102] ------------              *  JTRUE     void  

------------ BB15 [0F1..110) -> BB28 (always), preds={BB14} succs={BB28}
               [000541] ------------                 IL_OFFSET void   IL offset: 0xf1
N001 ( 14,  5) [000171] --CXG-------       t171 =    CALL      struct System.DateTime.get_Now
                                                  /--*  t171   struct 
N003 ( 18,  8) [000174] DA-XG-------              *  STORE_LCL_VAR struct<System.DateTime, 8> V34 tmp16        
               [000542] ------------                 IL_OFFSET void   IL offset: 0xf6
N001 (  3,  2) [000175] ------------       t175 =    LCL_VAR   struct<System.DateTime, 8> V34 tmp16        
                                                  /--*  t175   struct 
N003 (  7,  5) [000178] DA--G-------              *  STORE_LCL_VAR struct<System.DateTime, 8>(AX) V03 loc1         
               [000543] ------------                 IL_OFFSET void   IL offset: 0xf7
N002 (  3,  3) [000180] ------------       t180 =    LCL_VAR_ADDR byref  V03 loc1         
                                                  /--*  t180   byref  this in rcx
N003 ( 17, 10) [000181] --CXG-------       t181 = *  CALL      ref    System.DateTime.ToString
                                                  /--*  t181   ref    
N005 ( 21, 13) [000183] DA-XG-------              *  STORE_LCL_VAR ref    V35 tmp17        
               [000544] ------------                 IL_OFFSET void   IL offset: 0xfe
N003 (  2, 10) [000444] H-----------       t444 =    CNS_INT(h) long   0xBE2A3200 "	 Waiting for list processing to complete..."
                                                  /--*  t444   long   
N004 (  4, 12) [000445] #---G-------       t445 = *  IND       ref   
N005 (  3,  2) [000184] ------------       t184 =    LCL_VAR   ref    V35 tmp17        
                                                  /--*  t445   ref    arg1 in rdx
                                                  +--*  t184   ref    arg0 in rcx
N006 ( 21, 21) [000186] --CXG-------       t186 = *  CALL      ref    System.String.Concat
                                                  /--*  t186   ref    
N008 ( 25, 24) [000188] DA-XG-------              *  STORE_LCL_VAR ref    V36 tmp18        
               [000545] ------------                 IL_OFFSET void   IL offset: 0x108
N002 (  3,  2) [000189] ------------       t189 =    LCL_VAR   ref    V36 tmp18        
                                                  /--*  t189   ref    arg0 in rcx
N003 ( 17,  8) [000190] --CXG-------              *  CALL      void   System.Console.WriteLine
               [000546] ------------                 IL_OFFSET void   IL offset: 0x10d
N001 (  1,  1) [000191] ------------                 NO_OP     void  
               [000547] ------------                 IL_OFFSET void   IL offset: 0x10e
N001 (  0,  0) [000192] ------------                 NOP       void  

------------ BB16 [110..11C), preds={BB28} succs={BB17}
               [000548] ------------                 IL_OFFSET void   IL offset: 0x110
N001 (  1,  1) [000197] ------------                 NO_OP     void  
               [000549] ------------                 IL_OFFSET void   IL offset: 0x111
N001 (  3,  2) [000198] ------------       t198 =    LCL_VAR   ref    V00 this         
N002 (  1,  1) [000449] ------------       t449 =    CNS_INT   long   8 field offset Fseq[_myList]
                                                  /--*  t198   ref    
                                                  +--*  t449   long   
N003 (  4,  3) [000450] -------N----       t450 = *  ADD       byref 
                                                  /--*  t450   byref  
N004 (  6,  5) [000199] ---XG-------       t199 = *  IND       ref   
                                                  /--*  t199   ref    
N006 ( 10,  8) [000201] DA-XG-------              *  STORE_LCL_VAR ref    V08 loc6         
               [000550] ------------                 IL_OFFSET void   IL offset: 0x119
N001 (  1,  1) [000202] ------------       t202 =    CNS_INT   int    0
                                                  /--*  t202   int    
N003 (  5,  4) [000204] DA--G-------              *  STORE_LCL_VAR int   (AX) V09 loc7         

------------ BB17 [11C..145) -> BB19 (cond), preds={BB16} succs={BB18,BB19}
               [000551] ------------                 IL_OFFSET void   IL offset: 0x11c
N003 (  3,  3) [000207] ------------       t207 =    LCL_VAR_ADDR long   V09 loc7         
N004 (  3,  2) [000205] ------------       t205 =    LCL_VAR   ref    V08 loc6         
                                                  /--*  t207   long   arg1 in rdx
                                                  +--*  t205   ref    arg0 in rcx
N005 ( 20, 12) [000208] --CXG-------              *  CALL      void   System.Threading.Monitor.Enter
               [000552] ------------                 IL_OFFSET void   IL offset: 0x125
N001 (  1,  1) [000209] ------------                 NO_OP     void  
               [000553] ------------                 IL_OFFSET void   IL offset: 0x126
N001 (  1,  1) [000210] ------------                 NO_OP     void  
               [000554] ------------                 IL_OFFSET void   IL offset: 0x127
N001 (  3,  2) [000211] ------------       t211 =    LCL_VAR   ref    V00 this         
N002 (  1,  1) [000455] ------------       t455 =    CNS_INT   long   8 field offset Fseq[_myList]
                                                  /--*  t211   ref    
                                                  +--*  t455   long   
N003 (  4,  3) [000456] -------N----       t456 = *  ADD       byref 
                                                  /--*  t456   byref  
N004 (  6,  5) [000212] ---XG-------       t212 = *  IND       ref   
N005 (  1,  1) [000453] ------------       t453 =    CNS_INT   long   8 field offset Fseq[Head]
                                                  /--*  t212   ref    
                                                  +--*  t453   long   
N006 (  7,  6) [000454] ---XG--N----       t454 = *  ADD       byref 
                                                  /--*  t454   byref  
N007 (  9,  8) [000213] ---XG-------       t213 = *  IND       ref   
N008 (  3,  2) [000214] ------------       t214 =    LCL_VAR   ref    V00 this         
N009 (  1,  1) [000459] ------------       t459 =    CNS_INT   long   8 field offset Fseq[_myList]
                                                  /--*  t214   ref    
                                                  +--*  t459   long   
N010 (  4,  3) [000460] -------N----       t460 = *  ADD       byref 
                                                  /--*  t460   byref  
N011 (  6,  5) [000215] ---XG-------       t215 = *  IND       ref   
N012 (  1,  1) [000457] ------------       t457 =    CNS_INT   long   16 field offset Fseq[Tail]
                                                  /--*  t215   ref    
                                                  +--*  t457   long   
N013 (  7,  6) [000458] ---XG--N----       t458 = *  ADD       byref 
                                                  /--*  t458   byref  
N014 (  9,  8) [000216] ---XG-------       t216 = *  IND       ref   
                                                  /--*  t213   ref    
                                                  +--*  t216   ref    
N015 ( 22, 17) [000217] ---XG-------       t217 = *  EQ        int   
                                                  /--*  t217   int    
N017 ( 26, 20) [000219] DA-XG-------              *  STORE_LCL_VAR int    V10 loc8         
               [000555] ------------                 IL_OFFSET void   IL offset: 0x141
N001 (  3,  2) [000220] ------------       t220 =    LCL_VAR   int    V10 loc8         
N002 (  1,  1) [000221] ------------       t221 =    CNS_INT   int    0
                                                  /--*  t220   int    
                                                  +--*  t221   int    
N003 (  5,  4) [000222] J------N----       t222 = *  EQ        int   
                                                  /--*  t222   int    
N004 (  7,  6) [000223] ------------              *  JTRUE     void  

------------ BB18 [145..148) -> BB20 (always), preds={BB17} succs={BB20}
               [000556] ------------                 IL_OFFSET void   IL offset: 0x145
N001 (  1,  1) [000230] ------------                 NO_OP     void  
               [000557] ------------                 IL_OFFSET void   IL offset: 0x146
N001 (  0,  0) [000231] ------------                 NOP       void  

------------ BB19 [148..14B) -> BB22 (always), preds={BB17} succs={BB22}
               [000558] ------------                 IL_OFFSET void   IL offset: 0x148
N001 (  1,  1) [000224] ------------                 NO_OP     void  
               [000559] ------------                 IL_OFFSET void   IL offset: 0x149
N001 (  0,  0) [000225] ------------                 NOP       void  

------------ BB20 [???..???) -> BB24 (callf), preds={BB18} succs={BB24}

------------ BB21 [???..???) -> BB29 (ALWAYS), preds={BB26} succs={BB29}

------------ BB22 [???..???) -> BB24 (callf), preds={BB19} succs={BB24}

------------ BB23 [???..???) -> BB27 (ALWAYS), preds={BB26} succs={BB27}

------------ BB27 [158..161), preds={BB23} succs={BB28}
               [000560] ------------                 IL_OFFSET void   IL offset: 0x158
N002 (  1,  1) [000226] ------------       t226 =    CNS_INT   int    100
                                                  /--*  t226   int    arg0 in rcx
N003 ( 15,  7) [000227] --CXG-------              *  CALL      void   System.Threading.Thread.Sleep
               [000561] ------------                 IL_OFFSET void   IL offset: 0x15f
N001 (  1,  1) [000228] ------------                 NO_OP     void  
               [000562] ------------                 IL_OFFSET void   IL offset: 0x160
N001 (  1,  1) [000229] ------------                 NO_OP     void  

------------ BB28 [161..166) -> BB16 (always), preds={BB15,BB27} succs={BB16}
               [000563] ------------                 IL_OFFSET void   IL offset: 0x161
N001 (  1,  1) [000193] ------------       t193 =    CNS_INT   int    1
                                                  /--*  t193   int    
N003 (  5,  4) [000195] DA----------              *  STORE_LCL_VAR int    V11 loc9         
               [000564] ------------                 IL_OFFSET void   IL offset: 0x164
N001 (  0,  0) [000196] ------------                 NOP       void  

------------ BB29 [166..1B1) -> BB39 (always), preds={BB21} succs={BB39}
               [000565] ------------                 IL_OFFSET void   IL offset: 0x166
N001 ( 14,  5) [000232] --CXG-------       t232 =    CALL      struct System.DateTime.get_Now
                                                  /--*  t232   struct 
N003 ( 18,  8) [000235] DA-XG-------              *  STORE_LCL_VAR struct<System.DateTime, 8> V37 tmp19        
               [000566] ------------                 IL_OFFSET void   IL offset: 0x16b
N001 (  3,  2) [000236] ------------       t236 =    LCL_VAR   struct<System.DateTime, 8> V37 tmp19        
                                                  /--*  t236   struct 
N003 (  7,  5) [000239] DA--G-------              *  STORE_LCL_VAR struct<System.DateTime, 8>(AX) V03 loc1         
               [000567] ------------                 IL_OFFSET void   IL offset: 0x16c
N002 (  3,  3) [000241] ------------       t241 =    LCL_VAR_ADDR byref  V03 loc1         
                                                  /--*  t241   byref  this in rcx
N003 ( 17, 10) [000242] --CXG-------       t242 = *  CALL      ref    System.DateTime.ToString
                                                  /--*  t242   ref    
N005 ( 21, 13) [000244] DA-XG-------              *  STORE_LCL_VAR ref    V38 tmp20        
               [000568] ------------                 IL_OFFSET void   IL offset: 0x173
N003 (  2, 10) [000466] H-----------       t466 =    CNS_INT(h) long   0xBE2A3208 "	 Done.  Profiler is active, available options:"
                                                  /--*  t466   long   
N004 (  4, 12) [000467] #---G-------       t467 = *  IND       ref   
N005 (  3,  2) [000245] ------------       t245 =    LCL_VAR   ref    V38 tmp20        
                                                  /--*  t467   ref    arg1 in rdx
                                                  +--*  t245   ref    arg0 in rcx
N006 ( 21, 21) [000247] --CXG-------       t247 = *  CALL      ref    System.String.Concat
                                                  /--*  t247   ref    
N008 ( 25, 24) [000249] DA-XG-------              *  STORE_LCL_VAR ref    V39 tmp21        
               [000569] ------------                 IL_OFFSET void   IL offset: 0x17d
N002 (  3,  2) [000250] ------------       t250 =    LCL_VAR   ref    V39 tmp21        
                                                  /--*  t250   ref    arg0 in rcx
N003 ( 17,  8) [000251] --CXG-------              *  CALL      void   System.Console.WriteLine
               [000570] ------------                 IL_OFFSET void   IL offset: 0x182
N001 (  1,  1) [000252] ------------                 NO_OP     void  
               [000571] ------------                 IL_OFFSET void   IL offset: 0x183
N002 (  2, 10) [000471] H-----------       t471 =    CNS_INT(h) long   0xBE2A3210 "   Q = quit"
                                                  /--*  t471   long   
N003 (  4, 12) [000472] #---G-------       t472 = *  IND       ref   
                                                  /--*  t472   ref    arg0 in rcx
N004 ( 18, 18) [000254] --CXG-------              *  CALL      void   System.Console.WriteLine
               [000572] ------------                 IL_OFFSET void   IL offset: 0x18d
N001 (  1,  1) [000255] ------------                 NO_OP     void  
               [000573] ------------                 IL_OFFSET void   IL offset: 0x18e
N002 (  2, 10) [000474] H-----------       t474 =    CNS_INT(h) long   0xBE2A3218 "   H = heap snapshot"
                                                  /--*  t474   long   
N003 (  4, 12) [000475] #---G-------       t475 = *  IND       ref   
                                                  /--*  t475   ref    arg0 in rcx
N004 ( 18, 18) [000257] --CXG-------              *  CALL      void   System.Console.WriteLine
               [000574] ------------                 IL_OFFSET void   IL offset: 0x198
N001 (  1,  1) [000258] ------------                 NO_OP     void  
               [000575] ------------                 IL_OFFSET void   IL offset: 0x199
N002 (  2, 10) [000477] H-----------       t477 =    CNS_INT(h) long   0xBE2A3220 "   G = GC (max gen)"
                                                  /--*  t477   long   
N003 (  4, 12) [000478] #---G-------       t478 = *  IND       ref   
                                                  /--*  t478   ref    arg0 in rcx
N004 ( 18, 18) [000260] --CXG-------              *  CALL      void   System.Console.WriteLine
               [000576] ------------                 IL_OFFSET void   IL offset: 0x1a3
N001 (  1,  1) [000261] ------------                 NO_OP     void  
               [000577] ------------                 IL_OFFSET void   IL offset: 0x1a4
N002 (  2, 10) [000480] H-----------       t480 =    CNS_INT(h) long   0xBE2A3228 "   R = clear the running flag to stop the consumer thread"
                                                  /--*  t480   long   
N003 (  4, 12) [000481] #---G-------       t481 = *  IND       ref   
                                                  /--*  t481   ref    arg0 in rcx
N004 ( 18, 18) [000263] --CXG-------              *  CALL      void   System.Console.WriteLine
               [000578] ------------                 IL_OFFSET void   IL offset: 0x1ae
N001 (  1,  1) [000264] ------------                 NO_OP     void  
               [000579] ------------                 IL_OFFSET void   IL offset: 0x1af
N001 (  0,  0) [000265] ------------                 NOP       void  

------------ BB30 [1B1..1CA) -> BB32 (cond), preds={BB39} succs={BB31,BB32}
               [000580] ------------                 IL_OFFSET void   IL offset: 0x1b1
N001 (  1,  1) [000270] ------------                 NO_OP     void  
               [000581] ------------                 IL_OFFSET void   IL offset: 0x1b2
N002 (  3,  3) [000273] ------------       t273 =    LCL_VAR_ADDR long   V40 tmp22        
                                                  /--*  t273   long   arg0 in rcx
N003 ( 17,  9) [000271] S-CXG-------              *  CALL      void   System.Console.ReadKey
               [000582] ------------                 IL_OFFSET void   IL offset: 0x1b7
N001 (  3,  2) [000274] ------------       t274 =    LCL_VAR   struct<System.ConsoleKeyInfo, 12>(AX) V40 tmp22        
                                                  /--*  t274   struct 
N003 (  7,  5) [000277] DA--G-------              *  STORE_LCL_VAR struct<System.ConsoleKeyInfo, 12>(AX) V12 loc10        
               [000583] ------------                 IL_OFFSET void   IL offset: 0x1b9
N002 (  3,  3) [000279] ------------       t279 =    LCL_VAR_ADDR byref  V12 loc10        
                                                  /--*  t279   byref  this in rcx
N003 ( 17, 10) [000280] --CXG-------       t280 = *  CALL      int    System.ConsoleKeyInfo.get_Key
                                                  /--*  t280   int    
N005 ( 21, 13) [000282] DA-XG-------              *  STORE_LCL_VAR int    V41 tmp23        
               [000584] ------------                 IL_OFFSET void   IL offset: 0x1c0
N001 (  3,  2) [000283] ------------       t283 =    LCL_VAR   int    V41 tmp23        
N002 (  1,  1) [000284] ------------       t284 =    CNS_INT   int    71
                                                  /--*  t283   int    
                                                  +--*  t284   int    
N003 (  8,  4) [000285] ------------       t285 = *  EQ        int   
                                                  /--*  t285   int    
N005 ( 12,  7) [000287] DA----------              *  STORE_LCL_VAR int    V13 loc11        
               [000585] ------------                 IL_OFFSET void   IL offset: 0x1c6
N001 (  3,  2) [000288] ------------       t288 =    LCL_VAR   int    V13 loc11        
N002 (  1,  1) [000289] ------------       t289 =    CNS_INT   int    0
                                                  /--*  t288   int    
                                                  +--*  t289   int    
N003 (  5,  4) [000290] J------N----       t290 = *  EQ        int   
                                                  /--*  t290   int    
N004 (  7,  6) [000291] ------------              *  JTRUE     void  

------------ BB31 [1CA..1D9) -> BB38 (always), preds={BB30} succs={BB38}
               [000586] ------------                 IL_OFFSET void   IL offset: 0x1ca
N001 (  1,  1) [000354] ------------                 NO_OP     void  
               [000587] ------------                 IL_OFFSET void   IL offset: 0x1cb
N001 ( 14,  5) [000355] --CXG-------       t355 =    CALL      int    System.GC.get_MaxGeneration
                                                  /--*  t355   int    
N003 ( 18,  8) [000357] DA-XG-------              *  STORE_LCL_VAR int    V45 tmp27        
               [000588] ------------                 IL_OFFSET void   IL offset: 0x1d0
N002 (  3,  2) [000358] ------------       t358 =    LCL_VAR   int    V45 tmp27        
                                                  /--*  t358   int    arg0 in rcx
N003 ( 17,  8) [000359] --CXG-------              *  CALL      void   System.GC.Collect
               [000589] ------------                 IL_OFFSET void   IL offset: 0x1d5
N001 (  1,  1) [000360] ------------                 NO_OP     void  
               [000590] ------------                 IL_OFFSET void   IL offset: 0x1d6
N001 (  1,  1) [000361] ------------                 NO_OP     void  
               [000591] ------------                 IL_OFFSET void   IL offset: 0x1d7
N001 (  0,  0) [000362] ------------                 NOP       void  

------------ BB32 [1D9..1EA) -> BB34 (cond), preds={BB30} succs={BB33,BB34}
               [000592] ------------                 IL_OFFSET void   IL offset: 0x1d9
N002 (  3,  3) [000293] ------------       t293 =    LCL_VAR_ADDR byref  V12 loc10        
                                                  /--*  t293   byref  this in rcx
N003 ( 17, 10) [000294] --CXG-------       t294 = *  CALL      int    System.ConsoleKeyInfo.get_Key
                                                  /--*  t294   int    
N005 ( 21, 13) [000296] DA-XG-------              *  STORE_LCL_VAR int    V42 tmp24        
               [000593] ------------                 IL_OFFSET void   IL offset: 0x1e0
N001 (  3,  2) [000297] ------------       t297 =    LCL_VAR   int    V42 tmp24        
N002 (  1,  1) [000298] ------------       t298 =    CNS_INT   int    72
                                                  /--*  t297   int    
                                                  +--*  t298   int    
N003 (  8,  4) [000299] ------------       t299 = *  EQ        int   
                                                  /--*  t299   int    
N005 ( 12,  7) [000301] DA----------              *  STORE_LCL_VAR int    V14 loc12        
               [000594] ------------                 IL_OFFSET void   IL offset: 0x1e6
N001 (  3,  2) [000302] ------------       t302 =    LCL_VAR   int    V14 loc12        
N002 (  1,  1) [000303] ------------       t303 =    CNS_INT   int    0
                                                  /--*  t302   int    
                                                  +--*  t303   int    
N003 (  5,  4) [000304] J------N----       t304 = *  EQ        int   
                                                  /--*  t304   int    
N004 (  7,  6) [000305] ------------              *  JTRUE     void  

------------ BB33 [1EA..1F4) -> BB38 (always), preds={BB32} succs={BB38}
               [000595] ------------                 IL_OFFSET void   IL offset: 0x1ea
N001 (  1,  1) [000349] ------------                 NO_OP     void  
               [000596] ------------                 IL_OFFSET void   IL offset: 0x1eb
N001 ( 14,  5) [000350] --CXG-------                 CALL      void   System.Diagnostics.Debugger.Break
               [000597] ------------                 IL_OFFSET void   IL offset: 0x1f0
N001 (  1,  1) [000351] ------------                 NO_OP     void  
               [000598] ------------                 IL_OFFSET void   IL offset: 0x1f1
N001 (  1,  1) [000352] ------------                 NO_OP     void  
               [000599] ------------                 IL_OFFSET void   IL offset: 0x1f2
N001 (  0,  0) [000353] ------------                 NOP       void  

------------ BB34 [1F4..205) -> BB36 (cond), preds={BB32} succs={BB35,BB36}
               [000600] ------------                 IL_OFFSET void   IL offset: 0x1f4
N002 (  3,  3) [000307] ------------       t307 =    LCL_VAR_ADDR byref  V12 loc10        
                                                  /--*  t307   byref  this in rcx
N003 ( 17, 10) [000308] --CXG-------       t308 = *  CALL      int    System.ConsoleKeyInfo.get_Key
                                                  /--*  t308   int    
N005 ( 21, 13) [000310] DA-XG-------              *  STORE_LCL_VAR int    V43 tmp25        
               [000601] ------------                 IL_OFFSET void   IL offset: 0x1fb
N001 (  3,  2) [000311] ------------       t311 =    LCL_VAR   int    V43 tmp25        
N002 (  1,  1) [000312] ------------       t312 =    CNS_INT   int    82
                                                  /--*  t311   int    
                                                  +--*  t312   int    
N003 (  8,  4) [000313] ------------       t313 = *  EQ        int   
                                                  /--*  t313   int    
N005 ( 12,  7) [000315] DA----------              *  STORE_LCL_VAR int    V15 loc13        
               [000602] ------------                 IL_OFFSET void   IL offset: 0x201
N001 (  3,  2) [000316] ------------       t316 =    LCL_VAR   int    V15 loc13        
N002 (  1,  1) [000317] ------------       t317 =    CNS_INT   int    0
                                                  /--*  t316   int    
                                                  +--*  t317   int    
N003 (  5,  4) [000318] J------N----       t318 = *  EQ        int   
                                                  /--*  t318   int    
N004 (  7,  6) [000319] ------------              *  JTRUE     void  

------------ BB35 [205..210) -> BB38 (always), preds={BB34} succs={BB38}
               [000603] ------------                 IL_OFFSET void   IL offset: 0x205
N001 (  1,  1) [000342] ------------                 NO_OP     void  
               [000604] ------------                 IL_OFFSET void   IL offset: 0x206
N001 (  3,  2) [000343] ------------       t343 =    LCL_VAR   ref    V00 this         
N002 (  1,  1) [000488] ------------       t488 =    CNS_INT   long   16 field offset Fseq[_running]
                                                  /--*  t343   ref    
                                                  +--*  t488   long   
N003 (  4,  3) [000489] -------N----       t489 = *  ADD       byref 
N005 (  1,  1) [000344] ------------       t344 =    CNS_INT   int    0
                                                  /--*  t489   byref  
                                                  +--*  t344   int    
               [000605] -A-XG-------              *  STOREIND  bool  
               [000606] ------------                 IL_OFFSET void   IL offset: 0x20d
N001 (  1,  1) [000347] ------------                 NO_OP     void  
               [000607] ------------                 IL_OFFSET void   IL offset: 0x20e
N001 (  0,  0) [000348] ------------                 NOP       void  

------------ BB36 [210..221) -> BB38 (cond), preds={BB34} succs={BB37,BB38}
               [000608] ------------                 IL_OFFSET void   IL offset: 0x210
N002 (  3,  3) [000321] ------------       t321 =    LCL_VAR_ADDR byref  V12 loc10        
                                                  /--*  t321   byref  this in rcx
N003 ( 17, 10) [000322] --CXG-------       t322 = *  CALL      int    System.ConsoleKeyInfo.get_Key
                                                  /--*  t322   int    
N005 ( 21, 13) [000324] DA-XG-------              *  STORE_LCL_VAR int    V44 tmp26        
               [000609] ------------                 IL_OFFSET void   IL offset: 0x217
N001 (  3,  2) [000325] ------------       t325 =    LCL_VAR   int    V44 tmp26        
N002 (  1,  1) [000326] ------------       t326 =    CNS_INT   int    81
                                                  /--*  t325   int    
                                                  +--*  t326   int    
N003 (  8,  4) [000327] ------------       t327 = *  EQ        int   
                                                  /--*  t327   int    
N005 ( 12,  7) [000329] DA----------              *  STORE_LCL_VAR int    V16 loc14        
               [000610] ------------                 IL_OFFSET void   IL offset: 0x21d
N001 (  3,  2) [000330] ------------       t330 =    LCL_VAR   int    V16 loc14        
N002 (  1,  1) [000331] ------------       t331 =    CNS_INT   int    0
                                                  /--*  t330   int    
                                                  +--*  t331   int    
N003 (  5,  4) [000332] J------N----       t332 = *  EQ        int   
                                                  /--*  t332   int    
N004 (  7,  6) [000333] ------------              *  JTRUE     void  

------------ BB37 [221..224) -> BB40 (always), preds={BB36} succs={BB40}
               [000611] ------------                 IL_OFFSET void   IL offset: 0x221
N001 (  1,  1) [000335] ------------                 NO_OP     void  
               [000612] ------------                 IL_OFFSET void   IL offset: 0x222
N001 (  0,  0) [000336] ------------                 NOP       void  

------------ BB38 [224..225), preds={BB31,BB33,BB35,BB36} succs={BB39}
               [000613] ------------                 IL_OFFSET void   IL offset: 0x224
N001 (  1,  1) [000334] ------------                 NO_OP     void  

------------ BB39 [225..22A) -> BB30 (always), preds={BB29,BB38} succs={BB30}
               [000614] ------------                 IL_OFFSET void   IL offset: 0x225
N001 (  1,  1) [000266] ------------       t266 =    CNS_INT   int    1
                                                  /--*  t266   int    
N003 (  5,  4) [000268] DA----------              *  STORE_LCL_VAR int    V17 loc15        
               [000615] ------------                 IL_OFFSET void   IL offset: 0x228
N001 (  0,  0) [000269] ------------                 NOP       void  

------------ BB40 [22A..232) (return), preds={BB37} succs={}
               [000616] ------------                 IL_OFFSET void   IL offset: 0x22a
N001 (  3,  2) [000337] ------------       t337 =    LCL_VAR   ref    V00 this         
N002 (  1,  1) [000492] ------------       t492 =    CNS_INT   long   16 field offset Fseq[_running]
                                                  /--*  t337   ref    
                                                  +--*  t492   long   
N003 (  4,  3) [000493] -------N----       t493 = *  ADD       byref 
N005 (  1,  1) [000338] ------------       t338 =    CNS_INT   int    0
                                                  /--*  t493   byref  
                                                  +--*  t338   int    
               [000617] -A-XG-------              *  STOREIND  bool  
               [000618] ------------                 IL_OFFSET void   IL offset: 0x231
N001 (  0,  0) [000341] ------------                 RETURN    void  

------------ BB10 [0D5..0D9) -> BB12 (cond), preds={BB08} succs={BB11,BB12}
               [000619] ------------                 IL_OFFSET void   IL offset: 0xd5
N001 (  3,  2) [000163] ------------       t163 =    LCL_VAR   int   (AX) V06 loc4         
                                                  /--*  t163   int    
N002 (  4,  4) [000441] ----G-------       t441 = *  CAST      int <- bool <- int
N003 (  1,  1) [000164] ------------       t164 =    CNS_INT   int    0
                                                  /--*  t441   int    
                                                  +--*  t164   int    
N004 (  6,  6) [000165] J---G--N----       t165 = *  EQ        int   
                                                  /--*  t165   int    
N005 (  8,  8) [000166] ----G-------              *  JTRUE     void  

------------ BB11 [0D9..0E0), preds={BB10} succs={BB12}
               [000620] ------------                 IL_OFFSET void   IL offset: 0xd9
N002 (  3,  2) [000168] ------------       t168 =    LCL_VAR   ref    V05 loc3         
                                                  /--*  t168   ref    arg0 in rcx
N003 ( 17,  8) [000169] --CXG-------              *  CALL      void   System.Threading.Monitor.Exit
               [000621] ------------                 IL_OFFSET void   IL offset: 0xdf
N001 (  1,  1) [000170] ------------                 NO_OP     void  

------------ BB12 [0E0..0E1) (finret), preds={BB10,BB11} succs={BB09}
               [000622] ------------                 IL_OFFSET void   IL offset: 0xe0
N001 (  0,  0) [000167] ------------                 RETFILT   void  

------------ BB24 [14B..14F) -> BB26 (cond), preds={BB20,BB22} succs={BB25,BB26}
               [000623] ------------                 IL_OFFSET void   IL offset: 0x14b
N001 (  3,  2) [000363] ------------       t363 =    LCL_VAR   int   (AX) V09 loc7         
                                                  /--*  t363   int    
N002 (  4,  4) [000461] ----G-------       t461 = *  CAST      int <- bool <- int
N003 (  1,  1) [000364] ------------       t364 =    CNS_INT   int    0
                                                  /--*  t461   int    
                                                  +--*  t364   int    
N004 (  6,  6) [000365] J---G--N----       t365 = *  EQ        int   
                                                  /--*  t365   int    
N005 (  8,  8) [000366] ----G-------              *  JTRUE     void  

------------ BB25 [14F..157), preds={BB24} succs={BB26}
               [000624] ------------                 IL_OFFSET void   IL offset: 0x14f
N002 (  3,  2) [000368] ------------       t368 =    LCL_VAR   ref    V08 loc6         
                                                  /--*  t368   ref    arg0 in rcx
N003 ( 17,  8) [000369] --CXG-------              *  CALL      void   System.Threading.Monitor.Exit
               [000625] ------------                 IL_OFFSET void   IL offset: 0x156
N001 (  1,  1) [000370] ------------                 NO_OP     void  

------------ BB26 [157..158) (finret), preds={BB24,BB25} succs={BB21,BB23}
               [000626] ------------                 IL_OFFSET void   IL offset: 0x157
N001 (  0,  0) [000367] ------------                 RETFILT   void  

-------------------------------------------------------------------------------------------------------------------

*************** Starting PHASE Lowering nodeinfo
compEnregLocals() is false, setting doNotEnreg flag for all locals.
Local V00 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V01 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V02 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V03 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V04 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V05 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V06 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V07 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V08 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V09 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V10 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V11 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V12 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V13 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V14 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V15 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V16 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V17 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V18 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V19 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V20 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V21 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V22 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V23 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V24 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V25 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V26 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V27 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V28 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V29 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V30 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V31 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V32 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V33 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V34 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V35 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V36 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V37 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V38 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V39 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V40 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V41 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V42 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V43 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V44 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V45 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set

Local V46 should not be enregistered because: opts.compFlags & CLFLG_REGVAR is not set
lowering call (before):
N001 ( 14,  5) [000375] --C-G-?-----                 CALL help void   HELPER.CORINFO_HELP_DBG_IS_JUST_MY_CODE

objp:
======

args:
======

late:
======
lowering call (after):
N001 ( 14,  5) [000375] --C-G-?-----                 CALL help void   HELPER.CORINFO_HELP_DBG_IS_JUST_MY_CODE

lowering call (before):
N001 ( 14,  5) [000002] --CXG-------         t2 =    CALL      struct System.DateTime.get_Now

objp:
======

args:
======

late:
======
lowering call (after):
N001 ( 14,  5) [000002] --CXG-------         t2 =    CALL      long   System.DateTime.get_Now

lowering store lcl var/field (before):
N001 ( 14,  5) [000002] --CXG-------         t2 =    CALL      long   System.DateTime.get_Now
                                                  /--*  t2     long   
N003 ( 18,  8) [000005] DA-XG-------              *  STORE_LCL_VAR struct<System.DateTime, 8> V19 tmp1         

lowering store lcl var/field (after):
N001 ( 14,  5) [000002] --CXG-------         t2 =    CALL      long   System.DateTime.get_Now
                                                  /--*  t2     long   
N003 ( 18,  8) [000005] DA-XG-------              *  STORE_LCL_VAR struct<System.DateTime, 8> V19 tmp1         

lowering store lcl var/field (before):
N001 (  3,  2) [000006] ------------         t6 =    LCL_VAR   struct<System.DateTime, 8> V19 tmp1         
                                                  /--*  t6     struct 
N003 (  7,  5) [000009] DA--G-------              *  STORE_LCL_VAR struct<System.DateTime, 8>(AX) V03 loc1         

lowering store lcl var/field (after):
N001 (  3,  2) [000006] ------------         t6 =    LCL_VAR   struct<System.DateTime, 8> V19 tmp1         
                                                  /--*  t6     struct 
N003 (  7,  5) [000009] DA--G-------              *  STORE_LCL_VAR struct<System.DateTime, 8>(AX) V03 loc1         


Local V03 should not be enregistered because: written in a block op
lowering call (before):
N002 (  3,  3) [000011] ------------        t11 =    LCL_VAR_ADDR byref  V03 loc1         
                                                  /--*  t11    byref  this in rcx
N003 ( 17, 10) [000012] --CXG-------        t12 = *  CALL      ref    System.DateTime.ToString

objp:
======
lowering arg : N001 (  0,  0) [000379] ----------L-              *  ARGPLACE  byref 

args:
======

late:
======
lowering arg : N002 (  3,  3) [000011] ------------              *  LCL_VAR_ADDR byref  V03 loc1         
new node is :                [000627] ------------              *  PUTARG_REG byref  REG rcx

lowering call (after):
N002 (  3,  3) [000011] ------------        t11 =    LCL_VAR_ADDR byref  V03 loc1         
                                                  /--*  t11    byref  
               [000627] ------------       t627 = *  PUTARG_REG byref  REG rcx
                                                  /--*  t627   byref  this in rcx
N003 ( 17, 10) [000012] --CXG-------        t12 = *  CALL      ref    System.DateTime.ToString

lowering store lcl var/field (before):
N002 (  3,  3) [000011] ------------        t11 =    LCL_VAR_ADDR byref  V03 loc1         
                                                  /--*  t11    byref  
               [000627] ------------       t627 = *  PUTARG_REG byref  REG rcx
                                                  /--*  t627   byref  this in rcx
N003 ( 17, 10) [000012] --CXG-------        t12 = *  CALL      ref    System.DateTime.ToString
                                                  /--*  t12    ref    
N005 ( 21, 13) [000014] DA-XG-------              *  STORE_LCL_VAR ref    V20 tmp2         

lowering store lcl var/field (after):
N002 (  3,  3) [000011] ------------        t11 =    LCL_VAR_ADDR byref  V03 loc1         
                                                  /--*  t11    byref  
               [000627] ------------       t627 = *  PUTARG_REG byref  REG rcx
                                                  /--*  t627   byref  this in rcx
N003 ( 17, 10) [000012] --CXG-------        t12 = *  CALL      ref    System.DateTime.ToString
                                                  /--*  t12    ref    
N005 ( 21, 13) [000014] DA-XG-------              *  STORE_LCL_VAR ref    V20 tmp2         

lowering call (before):
N003 (  2, 10) [000380] H-----------       t380 =    CNS_INT(h) long   0xBE2A31F0 "	 Created list"
                                                  /--*  t380   long   
N004 (  4, 12) [000381] #---G-------       t381 = *  IND       ref   
N005 (  3,  2) [000015] ------------        t15 =    LCL_VAR   ref    V20 tmp2         
                                                  /--*  t381   ref    arg1 in rdx
                                                  +--*  t15    ref    arg0 in rcx
N006 ( 21, 21) [000017] --CXG-------        t17 = *  CALL      ref    System.String.Concat

objp:
======

args:
======
lowering arg : N001 (  0,  0) [000383] ----------L-              *  ARGPLACE  ref   
lowering arg : N002 (  0,  0) [000382] ----------L-              *  ARGPLACE  ref   

late:
======
lowering arg : N004 (  4, 12) [000381] #---G-------              *  IND       ref   
new node is :                [000628] ----G-------              *  PUTARG_REG ref    REG rdx

lowering arg : N005 (  3,  2) [000015] ------------              *  LCL_VAR   ref    V20 tmp2         
new node is :                [000629] ------------              *  PUTARG_REG ref    REG rcx

lowering call (after):
N003 (  2, 10) [000380] H-----------       t380 =    CNS_INT(h) long   0xBE2A31F0 "	 Created list"
                                                  /--*  t380   long   
N004 (  4, 12) [000381] #---G-------       t381 = *  IND       ref   
                                                  /--*  t381   ref    
               [000628] ----G-------       t628 = *  PUTARG_REG ref    REG rdx
N005 (  3,  2) [000015] ------------        t15 =    LCL_VAR   ref    V20 tmp2         
                                                  /--*  t15    ref    
               [000629] ------------       t629 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t628   ref    arg1 in rdx
                                                  +--*  t629   ref    arg0 in rcx
N006 ( 21, 21) [000017] --CXG-------        t17 = *  CALL      ref    System.String.Concat

lowering store lcl var/field (before):
N003 (  2, 10) [000380] H-----------       t380 =    CNS_INT(h) long   0xBE2A31F0 "	 Created list"
                                                  /--*  t380   long   
N004 (  4, 12) [000381] #---G-------       t381 = *  IND       ref   
                                                  /--*  t381   ref    
               [000628] ----G-------       t628 = *  PUTARG_REG ref    REG rdx
N005 (  3,  2) [000015] ------------        t15 =    LCL_VAR   ref    V20 tmp2         
                                                  /--*  t15    ref    
               [000629] ------------       t629 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t628   ref    arg1 in rdx
                                                  +--*  t629   ref    arg0 in rcx
N006 ( 21, 21) [000017] --CXG-------        t17 = *  CALL      ref    System.String.Concat
                                                  /--*  t17    ref    
N008 ( 25, 24) [000019] DA-XG-------              *  STORE_LCL_VAR ref    V21 tmp3         

lowering store lcl var/field (after):
N003 (  2, 10) [000380] H-----------       t380 =    CNS_INT(h) long   0xBE2A31F0 "	 Created list"
                                                  /--*  t380   long   
N004 (  4, 12) [000381] #---G-------       t381 = *  IND       ref   
                                                  /--*  t381   ref    
               [000628] ----G-------       t628 = *  PUTARG_REG ref    REG rdx
N005 (  3,  2) [000015] ------------        t15 =    LCL_VAR   ref    V20 tmp2         
                                                  /--*  t15    ref    
               [000629] ------------       t629 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t628   ref    arg1 in rdx
                                                  +--*  t629   ref    arg0 in rcx
N006 ( 21, 21) [000017] --CXG-------        t17 = *  CALL      ref    System.String.Concat
                                                  /--*  t17    ref    
N008 ( 25, 24) [000019] DA-XG-------              *  STORE_LCL_VAR ref    V21 tmp3         

lowering call (before):
N002 (  3,  2) [000020] ------------        t20 =    LCL_VAR   ref    V21 tmp3         
                                                  /--*  t20    ref    arg0 in rcx
N003 ( 17,  8) [000021] --CXG-------              *  CALL      void   System.Console.WriteLine

objp:
======

args:
======
lowering arg : N001 (  0,  0) [000384] ----------L-              *  ARGPLACE  ref   

late:
======
lowering arg : N002 (  3,  2) [000020] ------------              *  LCL_VAR   ref    V21 tmp3         
new node is :                [000630] ------------              *  PUTARG_REG ref    REG rcx

lowering call (after):
N002 (  3,  2) [000020] ------------        t20 =    LCL_VAR   ref    V21 tmp3         
                                                  /--*  t20    ref    
               [000630] ------------       t630 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t630   ref    arg0 in rcx
N003 ( 17,  8) [000021] --CXG-------              *  CALL      void   System.Console.WriteLine

lowering call (before):
N002 (  2, 10) [000024] H-----------        t24 =    CNS_INT(h) long   0x7ffdb7022b70 method
                                                  /--*  t24    long   arg0 in rcx
N003 ( 16, 16) [000025] --C---------        t25 = *  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST

objp:
======

args:
======
lowering arg : N001 (  0,  0) [000385] ----------L-              *  ARGPLACE  long  

late:
======
lowering arg : N002 (  2, 10) [000024] H-----------              *  CNS_INT(h) long   0x7ffdb7022b70 method
new node is :                [000631] ------------              *  PUTARG_REG long   REG rcx

lowering call (after):
N002 (  2, 10) [000024] H-----------        t24 =    CNS_INT(h) long   0x7ffdb7022b70 method
                                                  /--*  t24    long   
               [000631] ------------       t631 = *  PUTARG_REG long   REG rcx
                                                  /--*  t631   long   arg0 in rcx
N003 ( 16, 16) [000025] --C---------        t25 = *  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST

lowering store lcl var/field (before):
N002 (  2, 10) [000024] H-----------        t24 =    CNS_INT(h) long   0x7ffdb7022b70 method
                                                  /--*  t24    long   
               [000631] ------------       t631 = *  PUTARG_REG long   REG rcx
                                                  /--*  t631   long   arg0 in rcx
N003 ( 16, 16) [000025] --C---------        t25 = *  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
                                                  /--*  t25    ref    
N005 ( 20, 19) [000027] DA----------              *  STORE_LCL_VAR ref    V22 tmp4         

lowering store lcl var/field (after):
N002 (  2, 10) [000024] H-----------        t24 =    CNS_INT(h) long   0x7ffdb7022b70 method
                                                  /--*  t24    long   
               [000631] ------------       t631 = *  PUTARG_REG long   REG rcx
                                                  /--*  t631   long   arg0 in rcx
N003 ( 16, 16) [000025] --C---------        t25 = *  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
                                                  /--*  t25    ref    
N005 ( 20, 19) [000027] DA----------              *  STORE_LCL_VAR ref    V22 tmp4         

lowering call (before):
N002 (  3,  2) [000028] ------------        t28 =    LCL_VAR   ref    V22 tmp4         
                                                  /--*  t28    ref    this in rcx
N003 ( 17,  9) [000029] --CXG-------              *  CALL      void   FalseLeakRepro.List..ctor

objp:
======
lowering arg : N001 (  0,  0) [000386] ----------L-              *  ARGPLACE  ref   

args:
======

late:
======
lowering arg : N002 (  3,  2) [000028] ------------              *  LCL_VAR   ref    V22 tmp4         
new node is :                [000632] ------------              *  PUTARG_REG ref    REG rcx

lowering call (after):
N002 (  3,  2) [000028] ------------        t28 =    LCL_VAR   ref    V22 tmp4         
                                                  /--*  t28    ref    
               [000632] ------------       t632 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t632   ref    this in rcx
N003 ( 17,  9) [000029] --CXG-------              *  CALL      void   FalseLeakRepro.List..ctor

Addressing mode:
  Base
    N001 (  3,  2) [000023] ------------              *  LCL_VAR   ref    V00 this         
  + 8
Removing unused node:
  N002 (  1,  1) [000387] -c----------              *  CNS_INT   long   8 field offset Fseq[_myList]
New addressing mode node:
  N003 (  4,  3) [000388] ------------              *  LEA(b+8)  byref 

lowering call (before):
N002 (  2, 10) [000036] H-----------        t36 =    CNS_INT(h) long   0x7ffdb6c458b8 token
                                                  /--*  t36    long   arg0 in rcx
N003 ( 16, 16) [000037] --C---------        t37 = *  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST

objp:
======

args:
======
lowering arg : N001 (  0,  0) [000389] ----------L-              *  ARGPLACE  long  

late:
======
lowering arg : N002 (  2, 10) [000036] H-----------              *  CNS_INT(h) long   0x7ffdb6c458b8 token
new node is :                [000633] ------------              *  PUTARG_REG long   REG rcx

lowering call (after):
N002 (  2, 10) [000036] H-----------        t36 =    CNS_INT(h) long   0x7ffdb6c458b8 token
                                                  /--*  t36    long   
               [000633] ------------       t633 = *  PUTARG_REG long   REG rcx
                                                  /--*  t633   long   arg0 in rcx
N003 ( 16, 16) [000037] --C---------        t37 = *  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST

lowering store lcl var/field (before):
N002 (  2, 10) [000036] H-----------        t36 =    CNS_INT(h) long   0x7ffdb6c458b8 token
                                                  /--*  t36    long   
               [000633] ------------       t633 = *  PUTARG_REG long   REG rcx
                                                  /--*  t633   long   arg0 in rcx
N003 ( 16, 16) [000037] --C---------        t37 = *  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
                                                  /--*  t37    ref    
N005 ( 20, 19) [000039] DA----------              *  STORE_LCL_VAR ref    V23 tmp5         

lowering store lcl var/field (after):
N002 (  2, 10) [000036] H-----------        t36 =    CNS_INT(h) long   0x7ffdb6c458b8 token
                                                  /--*  t36    long   
               [000633] ------------       t633 = *  PUTARG_REG long   REG rcx
                                                  /--*  t633   long   arg0 in rcx
N003 ( 16, 16) [000037] --C---------        t37 = *  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
                                                  /--*  t37    ref    
N005 ( 20, 19) [000039] DA----------              *  STORE_LCL_VAR ref    V23 tmp5         

Addressing mode:
  Base
    N001 (  3,  2) [000033] ------------              *  LCL_VAR   ref    V00 this         
  + 8
Removing unused node:
  N002 (  1,  1) [000392] -c----------              *  CNS_INT   long   8 field offset Fseq[_myList]
New addressing mode node:
  N003 (  4,  3) [000393] ------------              *  LEA(b+8)  byref 

Addressing mode:
  Base
    N004 (  6,  5) [000034] ---XG-------              *  IND       ref   
  + 8
Removing unused node:
  N005 (  1,  1) [000390] -c----------              *  CNS_INT   long   8 field offset Fseq[Head]
New addressing mode node:
  N006 (  7,  6) [000391] ------------              *  LEA(b+8)  byref 

lowering store lcl var/field (before):
N001 (  3,  2) [000033] ------------        t33 =    LCL_VAR   ref    V00 this         
                                                  /--*  t33    ref    
N003 (  4,  3) [000393] -c----------       t393 = *  LEA(b+8)  byref 
                                                  /--*  t393   byref  
N004 (  6,  5) [000034] ---XG-------        t34 = *  IND       ref   
                                                  /--*  t34    ref    
N006 (  7,  6) [000391] -c----------       t391 = *  LEA(b+8)  byref 
                                                  /--*  t391   byref  
N007 (  9,  8) [000035] ---XG-------        t35 = *  IND       ref   
                                                  /--*  t35    ref    
N009 ( 13, 11) [000043] DA-XG-------              *  STORE_LCL_VAR ref    V24 tmp6         

lowering store lcl var/field (after):
N001 (  3,  2) [000033] ------------        t33 =    LCL_VAR   ref    V00 this         
                                                  /--*  t33    ref    
N003 (  4,  3) [000393] -c----------       t393 = *  LEA(b+8)  byref 
                                                  /--*  t393   byref  
N004 (  6,  5) [000034] ---XG-------        t34 = *  IND       ref   
                                                  /--*  t34    ref    
N006 (  7,  6) [000391] -c----------       t391 = *  LEA(b+8)  byref 
                                                  /--*  t391   byref  
N007 (  9,  8) [000035] ---XG-------        t35 = *  IND       ref   
                                                  /--*  t35    ref    
N009 ( 13, 11) [000043] DA-XG-------              *  STORE_LCL_VAR ref    V24 tmp6         

lowering call (before):
N002 (  3,  2) [000040] ------------        t40 =    LCL_VAR   ref    V23 tmp5         
                                                  /--*  t40    ref    this in rcx
N003 ( 17,  9) [000041] --CXG-------              *  CALL      void   System.Object..ctor

objp:
======
lowering arg : N001 (  0,  0) [000394] ----------L-              *  ARGPLACE  ref   

args:
======

late:
======
lowering arg : N002 (  3,  2) [000040] ------------              *  LCL_VAR   ref    V23 tmp5         
new node is :                [000634] ------------              *  PUTARG_REG ref    REG rcx

lowering call (after):
N002 (  3,  2) [000040] ------------        t40 =    LCL_VAR   ref    V23 tmp5         
                                                  /--*  t40    ref    
               [000634] ------------       t634 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t634   ref    this in rcx
N003 ( 17,  9) [000041] --CXG-------              *  CALL      void   System.Object..ctor

Addressing mode:
  Base
    N001 (  3,  2) [000044] ------------              *  LCL_VAR   ref    V24 tmp6         
  + 16
Removing unused node:
  N002 (  1,  1) [000395] -c----------              *  CNS_INT   long   16 field offset Fseq[Data]
New addressing mode node:
  N003 (  4,  3) [000396] ------------              *  LEA(b+16) byref 

lowering call (before):
N002 (  2, 10) [000050] H-----------        t50 =    CNS_INT(h) long   0x7ffdb7026348 token
                                                  /--*  t50    long   arg0 in rcx
N003 ( 16, 16) [000051] --C---------        t51 = *  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST

objp:
======

args:
======
lowering arg : N001 (  0,  0) [000397] ----------L-              *  ARGPLACE  long  

late:
======
lowering arg : N002 (  2, 10) [000050] H-----------              *  CNS_INT(h) long   0x7ffdb7026348 token
new node is :                [000635] ------------              *  PUTARG_REG long   REG rcx

lowering call (after):
N002 (  2, 10) [000050] H-----------        t50 =    CNS_INT(h) long   0x7ffdb7026348 token
                                                  /--*  t50    long   
               [000635] ------------       t635 = *  PUTARG_REG long   REG rcx
                                                  /--*  t635   long   arg0 in rcx
N003 ( 16, 16) [000051] --C---------        t51 = *  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST

lowering store lcl var/field (before):
N002 (  2, 10) [000050] H-----------        t50 =    CNS_INT(h) long   0x7ffdb7026348 token
                                                  /--*  t50    long   
               [000635] ------------       t635 = *  PUTARG_REG long   REG rcx
                                                  /--*  t635   long   arg0 in rcx
N003 ( 16, 16) [000051] --C---------        t51 = *  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
                                                  /--*  t51    ref    
N005 ( 20, 19) [000053] DA----------              *  STORE_LCL_VAR ref    V25 tmp7         

lowering store lcl var/field (after):
N002 (  2, 10) [000050] H-----------        t50 =    CNS_INT(h) long   0x7ffdb7026348 token
                                                  /--*  t50    long   
               [000635] ------------       t635 = *  PUTARG_REG long   REG rcx
                                                  /--*  t635   long   arg0 in rcx
N003 ( 16, 16) [000051] --C---------        t51 = *  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
                                                  /--*  t51    ref    
N005 ( 20, 19) [000053] DA----------              *  STORE_LCL_VAR ref    V25 tmp7         

lowering call (before):
N004 (  3,  2) [000054] ------------        t54 =    LCL_VAR   ref    V25 tmp7         
N005 (  3,  2) [000048] ------------        t48 =    LCL_VAR   ref    V00 this         
N006 (  2, 10) [000049] H-----------        t49 =    CNS_INT(h) long   0x7ffdb6c613f8 ftn
                                                  /--*  t54    ref    this in rcx
                                                  +--*  t48    ref    arg1 in rdx
                                                  +--*  t49    long   arg2 in r8
N007 ( 22, 23) [000055] --CXG-------              *  CALL      void   System.MulticastDelegate.CtorClosed

objp:
======
lowering arg : N001 (  0,  0) [000398] ----------L-              *  ARGPLACE  ref   

args:
======
lowering arg : N002 (  0,  0) [000399] ----------L-              *  ARGPLACE  ref   
lowering arg : N003 (  0,  0) [000400] ----------L-              *  ARGPLACE  long  

late:
======
lowering arg : N004 (  3,  2) [000054] ------------              *  LCL_VAR   ref    V25 tmp7         
new node is :                [000636] ------------              *  PUTARG_REG ref    REG rcx

lowering arg : N005 (  3,  2) [000048] ------------              *  LCL_VAR   ref    V00 this         
new node is :                [000637] ------------              *  PUTARG_REG ref    REG rdx

lowering arg : N006 (  2, 10) [000049] H-----------              *  CNS_INT(h) long   0x7ffdb6c613f8 ftn
new node is :                [000638] ------------              *  PUTARG_REG long   REG r8

lowering call (after):
N004 (  3,  2) [000054] ------------        t54 =    LCL_VAR   ref    V25 tmp7         
                                                  /--*  t54    ref    
               [000636] ------------       t636 = *  PUTARG_REG ref    REG rcx
N005 (  3,  2) [000048] ------------        t48 =    LCL_VAR   ref    V00 this         
                                                  /--*  t48    ref    
               [000637] ------------       t637 = *  PUTARG_REG ref    REG rdx
N006 (  2, 10) [000049] H-----------        t49 =    CNS_INT(h) long   0x7ffdb6c613f8 ftn
                                                  /--*  t49    long   
               [000638] ------------       t638 = *  PUTARG_REG long   REG r8
                                                  /--*  t636   ref    this in rcx
                                                  +--*  t637   ref    arg1 in rdx
                                                  +--*  t638   long   arg2 in r8
N007 ( 22, 23) [000055] --CXG-------              *  CALL      void   System.MulticastDelegate.CtorClosed

lowering call (before):
N002 (  2, 10) [000057] H-----------        t57 =    CNS_INT(h) long   0x7ffdb6dc4e80 token
                                                  /--*  t57    long   arg0 in rcx
N003 ( 16, 16) [000058] --C---------        t58 = *  CALL help ref    HELPER.CORINFO_HELP_NEWFAST

objp:
======

args:
======
lowering arg : N001 (  0,  0) [000401] ----------L-              *  ARGPLACE  long  

late:
======
lowering arg : N002 (  2, 10) [000057] H-----------              *  CNS_INT(h) long   0x7ffdb6dc4e80 token
new node is :                [000639] ------------              *  PUTARG_REG long   REG rcx

lowering call (after):
N002 (  2, 10) [000057] H-----------        t57 =    CNS_INT(h) long   0x7ffdb6dc4e80 token
                                                  /--*  t57    long   
               [000639] ------------       t639 = *  PUTARG_REG long   REG rcx
                                                  /--*  t639   long   arg0 in rcx
N003 ( 16, 16) [000058] --C---------        t58 = *  CALL help ref    HELPER.CORINFO_HELP_NEWFAST

lowering store lcl var/field (before):
N002 (  2, 10) [000057] H-----------        t57 =    CNS_INT(h) long   0x7ffdb6dc4e80 token
                                                  /--*  t57    long   
               [000639] ------------       t639 = *  PUTARG_REG long   REG rcx
                                                  /--*  t639   long   arg0 in rcx
N003 ( 16, 16) [000058] --C---------        t58 = *  CALL help ref    HELPER.CORINFO_HELP_NEWFAST
                                                  /--*  t58    ref    
N005 ( 20, 19) [000060] DA----------              *  STORE_LCL_VAR ref    V26 tmp8         

lowering store lcl var/field (after):
N002 (  2, 10) [000057] H-----------        t57 =    CNS_INT(h) long   0x7ffdb6dc4e80 token
                                                  /--*  t57    long   
               [000639] ------------       t639 = *  PUTARG_REG long   REG rcx
                                                  /--*  t639   long   arg0 in rcx
N003 ( 16, 16) [000058] --C---------        t58 = *  CALL help ref    HELPER.CORINFO_HELP_NEWFAST
                                                  /--*  t58    ref    
N005 ( 20, 19) [000060] DA----------              *  STORE_LCL_VAR ref    V26 tmp8         

lowering call (before):
N003 (  3,  2) [000061] ------------        t61 =    LCL_VAR   ref    V26 tmp8         
N004 (  3,  2) [000056] ------------        t56 =    LCL_VAR   ref    V25 tmp7         
                                                  /--*  t61    ref    this in rcx
                                                  +--*  t56    ref    arg1 in rdx
N005 ( 20, 12) [000062] --CXG-------              *  CALL      void   System.Threading.Thread..ctor

objp:
======
lowering arg : N001 (  0,  0) [000402] ----------L-              *  ARGPLACE  ref   

args:
======
lowering arg : N002 (  0,  0) [000403] ----------L-              *  ARGPLACE  ref   

late:
======
lowering arg : N003 (  3,  2) [000061] ------------              *  LCL_VAR   ref    V26 tmp8         
new node is :                [000640] ------------              *  PUTARG_REG ref    REG rcx

lowering arg : N004 (  3,  2) [000056] ------------              *  LCL_VAR   ref    V25 tmp7         
new node is :                [000641] ------------              *  PUTARG_REG ref    REG rdx

lowering call (after):
N003 (  3,  2) [000061] ------------        t61 =    LCL_VAR   ref    V26 tmp8         
                                                  /--*  t61    ref    
               [000640] ------------       t640 = *  PUTARG_REG ref    REG rcx
N004 (  3,  2) [000056] ------------        t56 =    LCL_VAR   ref    V25 tmp7         
                                                  /--*  t56    ref    
               [000641] ------------       t641 = *  PUTARG_REG ref    REG rdx
                                                  /--*  t640   ref    this in rcx
                                                  +--*  t641   ref    arg1 in rdx
N005 ( 20, 12) [000062] --CXG-------              *  CALL      void   System.Threading.Thread..ctor

lowering store lcl var/field (before):
N001 (  3,  2) [000063] ------------        t63 =    LCL_VAR   ref    V26 tmp8         
                                                  /--*  t63    ref    
N003 (  7,  5) [000065] DA----------              *  STORE_LCL_VAR ref    V02 loc0         

lowering store lcl var/field (after):
N001 (  3,  2) [000063] ------------        t63 =    LCL_VAR   ref    V26 tmp8         
                                                  /--*  t63    ref    
N003 (  7,  5) [000065] DA----------              *  STORE_LCL_VAR ref    V02 loc0         

lowering call (before):
N002 (  3,  2) [000066] ------------        t66 =    LCL_VAR   ref    V02 loc0         
                                                  /--*  t66    ref    this in rcx
N003 ( 17,  9) [000067] --CXG-------              *  CALL nullcheck void   System.Threading.Thread.Start

objp:
======
lowering arg : N001 (  0,  0) [000404] ----------L-              *  ARGPLACE  ref   

args:
======

late:
======
lowering arg : N002 (  3,  2) [000066] ------------              *  LCL_VAR   ref    V02 loc0         
new node is :                [000642] ------------              *  PUTARG_REG ref    REG rcx

lowering call (after):
N002 (  3,  2) [000066] ------------        t66 =    LCL_VAR   ref    V02 loc0         
                                                  /--*  t66    ref    
               [000642] ------------       t642 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t642   ref    this in rcx
N003 ( 17,  9) [000067] --CXG-------              *  CALL nullcheck void   System.Threading.Thread.Start

lowering call (before):
N001 ( 14,  5) [000069] --CXG-------        t69 =    CALL      struct System.DateTime.get_Now

objp:
======

args:
======

late:
======
lowering call (after):
N001 ( 14,  5) [000069] --CXG-------        t69 =    CALL      long   System.DateTime.get_Now

lowering store lcl var/field (before):
N001 ( 14,  5) [000069] --CXG-------        t69 =    CALL      long   System.DateTime.get_Now
                                                  /--*  t69    long   
N003 ( 18,  8) [000072] DA-XG-------              *  STORE_LCL_VAR struct<System.DateTime, 8> V27 tmp9         

lowering store lcl var/field (after):
N001 ( 14,  5) [000069] --CXG-------        t69 =    CALL      long   System.DateTime.get_Now
                                                  /--*  t69    long   
N003 ( 18,  8) [000072] DA-XG-------              *  STORE_LCL_VAR struct<System.DateTime, 8> V27 tmp9         

lowering store lcl var/field (before):
N001 (  3,  2) [000073] ------------        t73 =    LCL_VAR   struct<System.DateTime, 8> V27 tmp9         
                                                  /--*  t73    struct 
N003 (  7,  5) [000076] DA--G-------              *  STORE_LCL_VAR struct<System.DateTime, 8>(AX) V03 loc1         

lowering store lcl var/field (after):
N001 (  3,  2) [000073] ------------        t73 =    LCL_VAR   struct<System.DateTime, 8> V27 tmp9         
                                                  /--*  t73    struct 
N003 (  7,  5) [000076] DA--G-------              *  STORE_LCL_VAR struct<System.DateTime, 8>(AX) V03 loc1         


Local V03 should not be enregistered because: written in a block op
lowering call (before):
N002 (  3,  3) [000078] ------------        t78 =    LCL_VAR_ADDR byref  V03 loc1         
                                                  /--*  t78    byref  this in rcx
N003 ( 17, 10) [000079] --CXG-------        t79 = *  CALL      ref    System.DateTime.ToString

objp:
======
lowering arg : N001 (  0,  0) [000405] ----------L-              *  ARGPLACE  byref 

args:
======

late:
======
lowering arg : N002 (  3,  3) [000078] ------------              *  LCL_VAR_ADDR byref  V03 loc1         
new node is :                [000643] ------------              *  PUTARG_REG byref  REG rcx

lowering call (after):
N002 (  3,  3) [000078] ------------        t78 =    LCL_VAR_ADDR byref  V03 loc1         
                                                  /--*  t78    byref  
               [000643] ------------       t643 = *  PUTARG_REG byref  REG rcx
                                                  /--*  t643   byref  this in rcx
N003 ( 17, 10) [000079] --CXG-------        t79 = *  CALL      ref    System.DateTime.ToString

lowering store lcl var/field (before):
N002 (  3,  3) [000078] ------------        t78 =    LCL_VAR_ADDR byref  V03 loc1         
                                                  /--*  t78    byref  
               [000643] ------------       t643 = *  PUTARG_REG byref  REG rcx
                                                  /--*  t643   byref  this in rcx
N003 ( 17, 10) [000079] --CXG-------        t79 = *  CALL      ref    System.DateTime.ToString
                                                  /--*  t79    ref    
N005 ( 21, 13) [000081] DA-XG-------              *  STORE_LCL_VAR ref    V28 tmp10        

lowering store lcl var/field (after):
N002 (  3,  3) [000078] ------------        t78 =    LCL_VAR_ADDR byref  V03 loc1         
                                                  /--*  t78    byref  
               [000643] ------------       t643 = *  PUTARG_REG byref  REG rcx
                                                  /--*  t643   byref  this in rcx
N003 ( 17, 10) [000079] --CXG-------        t79 = *  CALL      ref    System.DateTime.ToString
                                                  /--*  t79    ref    
N005 ( 21, 13) [000081] DA-XG-------              *  STORE_LCL_VAR ref    V28 tmp10        

lowering call (before):
N003 (  2, 10) [000406] H-----------       t406 =    CNS_INT(h) long   0xBE2A31F8 "	 Consumer thread started, adding items..."
                                                  /--*  t406   long   
N004 (  4, 12) [000407] #---G-------       t407 = *  IND       ref   
N005 (  3,  2) [000082] ------------        t82 =    LCL_VAR   ref    V28 tmp10        
                                                  /--*  t407   ref    arg1 in rdx
                                                  +--*  t82    ref    arg0 in rcx
N006 ( 21, 21) [000084] --CXG-------        t84 = *  CALL      ref    System.String.Concat

objp:
======

args:
======
lowering arg : N001 (  0,  0) [000409] ----------L-              *  ARGPLACE  ref   
lowering arg : N002 (  0,  0) [000408] ----------L-              *  ARGPLACE  ref   

late:
======
lowering arg : N004 (  4, 12) [000407] #---G-------              *  IND       ref   
new node is :                [000644] ----G-------              *  PUTARG_REG ref    REG rdx

lowering arg : N005 (  3,  2) [000082] ------------              *  LCL_VAR   ref    V28 tmp10        
new node is :                [000645] ------------              *  PUTARG_REG ref    REG rcx

lowering call (after):
N003 (  2, 10) [000406] H-----------       t406 =    CNS_INT(h) long   0xBE2A31F8 "	 Consumer thread started, adding items..."
                                                  /--*  t406   long   
N004 (  4, 12) [000407] #---G-------       t407 = *  IND       ref   
                                                  /--*  t407   ref    
               [000644] ----G-------       t644 = *  PUTARG_REG ref    REG rdx
N005 (  3,  2) [000082] ------------        t82 =    LCL_VAR   ref    V28 tmp10        
                                                  /--*  t82    ref    
               [000645] ------------       t645 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t644   ref    arg1 in rdx
                                                  +--*  t645   ref    arg0 in rcx
N006 ( 21, 21) [000084] --CXG-------        t84 = *  CALL      ref    System.String.Concat

lowering store lcl var/field (before):
N003 (  2, 10) [000406] H-----------       t406 =    CNS_INT(h) long   0xBE2A31F8 "	 Consumer thread started, adding items..."
                                                  /--*  t406   long   
N004 (  4, 12) [000407] #---G-------       t407 = *  IND       ref   
                                                  /--*  t407   ref    
               [000644] ----G-------       t644 = *  PUTARG_REG ref    REG rdx
N005 (  3,  2) [000082] ------------        t82 =    LCL_VAR   ref    V28 tmp10        
                                                  /--*  t82    ref    
               [000645] ------------       t645 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t644   ref    arg1 in rdx
                                                  +--*  t645   ref    arg0 in rcx
N006 ( 21, 21) [000084] --CXG-------        t84 = *  CALL      ref    System.String.Concat
                                                  /--*  t84    ref    
N008 ( 25, 24) [000086] DA-XG-------              *  STORE_LCL_VAR ref    V29 tmp11        

lowering store lcl var/field (after):
N003 (  2, 10) [000406] H-----------       t406 =    CNS_INT(h) long   0xBE2A31F8 "	 Consumer thread started, adding items..."
                                                  /--*  t406   long   
N004 (  4, 12) [000407] #---G-------       t407 = *  IND       ref   
                                                  /--*  t407   ref    
               [000644] ----G-------       t644 = *  PUTARG_REG ref    REG rdx
N005 (  3,  2) [000082] ------------        t82 =    LCL_VAR   ref    V28 tmp10        
                                                  /--*  t82    ref    
               [000645] ------------       t645 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t644   ref    arg1 in rdx
                                                  +--*  t645   ref    arg0 in rcx
N006 ( 21, 21) [000084] --CXG-------        t84 = *  CALL      ref    System.String.Concat
                                                  /--*  t84    ref    
N008 ( 25, 24) [000086] DA-XG-------              *  STORE_LCL_VAR ref    V29 tmp11        

lowering call (before):
N002 (  3,  2) [000087] ------------        t87 =    LCL_VAR   ref    V29 tmp11        
                                                  /--*  t87    ref    arg0 in rcx
N003 ( 17,  8) [000088] --CXG-------              *  CALL      void   System.Console.WriteLine

objp:
======

args:
======
lowering arg : N001 (  0,  0) [000410] ----------L-              *  ARGPLACE  ref   

late:
======
lowering arg : N002 (  3,  2) [000087] ------------              *  LCL_VAR   ref    V29 tmp11        
new node is :                [000646] ------------              *  PUTARG_REG ref    REG rcx

lowering call (after):
N002 (  3,  2) [000087] ------------        t87 =    LCL_VAR   ref    V29 tmp11        
                                                  /--*  t87    ref    
               [000646] ------------       t646 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t646   ref    arg0 in rcx
N003 ( 17,  8) [000088] --CXG-------              *  CALL      void   System.Console.WriteLine

lowering store lcl var/field (before):
N001 (  1,  1) [000090] ------------        t90 =    CNS_INT   int    0
                                                  /--*  t90    int    
N003 (  5,  4) [000092] DA----------              *  STORE_LCL_VAR int    V04 loc2         

lowering store lcl var/field (after):
N001 (  1,  1) [000090] ------------        t90 =    CNS_INT   int    0
                                                  /--*  t90    int    
N003 (  5,  4) [000092] DA----------              *  STORE_LCL_VAR int    V04 loc2         

Addressing mode:
  Base
    N001 (  3,  2) [000104] ------------              *  LCL_VAR   ref    V00 this         
  + 8
Removing unused node:
  N002 (  1,  1) [000411] -c----------              *  CNS_INT   long   8 field offset Fseq[_myList]
New addressing mode node:
  N003 (  4,  3) [000412] ------------              *  LEA(b+8)  byref 

lowering store lcl var/field (before):
N001 (  3,  2) [000104] ------------       t104 =    LCL_VAR   ref    V00 this         
                                                  /--*  t104   ref    
N003 (  4,  3) [000412] -c----------       t412 = *  LEA(b+8)  byref 
                                                  /--*  t412   byref  
N004 (  6,  5) [000105] ---XG-------       t105 = *  IND       ref   
                                                  /--*  t105   ref    
N006 ( 10,  8) [000107] DA-XG-------              *  STORE_LCL_VAR ref    V05 loc3         

lowering store lcl var/field (after):
N001 (  3,  2) [000104] ------------       t104 =    LCL_VAR   ref    V00 this         
                                                  /--*  t104   ref    
N003 (  4,  3) [000412] -c----------       t412 = *  LEA(b+8)  byref 
                                                  /--*  t412   byref  
N004 (  6,  5) [000105] ---XG-------       t105 = *  IND       ref   
                                                  /--*  t105   ref    
N006 ( 10,  8) [000107] DA-XG-------              *  STORE_LCL_VAR ref    V05 loc3         

lowering store lcl var/field (before):
N001 (  1,  1) [000108] ------------       t108 =    CNS_INT   int    0
                                                  /--*  t108   int    
N003 (  5,  4) [000110] DA--G-------              *  STORE_LCL_VAR int   (AX) V06 loc4         

lowering store lcl var/field (after):
N001 (  1,  1) [000108] ------------       t108 =    CNS_INT   int    0
                                                  /--*  t108   int    
N003 (  5,  4) [000110] DA--G-------              *  STORE_LCL_VAR int   (AX) V06 loc4         


Local V06 should not be enregistered because: written in a block op
lowering call (before):
N003 (  3,  3) [000113] ------------       t113 =    LCL_VAR_ADDR long   V06 loc4         
N004 (  3,  2) [000111] ------------       t111 =    LCL_VAR   ref    V05 loc3         
                                                  /--*  t113   long   arg1 in rdx
                                                  +--*  t111   ref    arg0 in rcx
N005 ( 20, 12) [000114] --CXG-------              *  CALL      void   System.Threading.Monitor.Enter

objp:
======

args:
======
lowering arg : N001 (  0,  0) [000414] ----------L-              *  ARGPLACE  ref   
lowering arg : N002 (  0,  0) [000413] ----------L-              *  ARGPLACE  long  

late:
======
lowering arg : N003 (  3,  3) [000113] ------------              *  LCL_VAR_ADDR long   V06 loc4         
new node is :                [000647] ------------              *  PUTARG_REG long   REG rdx

lowering arg : N004 (  3,  2) [000111] ------------              *  LCL_VAR   ref    V05 loc3         
new node is :                [000648] ------------              *  PUTARG_REG ref    REG rcx

lowering call (after):
N003 (  3,  3) [000113] ------------       t113 =    LCL_VAR_ADDR long   V06 loc4         
                                                  /--*  t113   long   
               [000647] ------------       t647 = *  PUTARG_REG long   REG rdx
N004 (  3,  2) [000111] ------------       t111 =    LCL_VAR   ref    V05 loc3         
                                                  /--*  t111   ref    
               [000648] ------------       t648 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t647   long   arg1 in rdx
                                                  +--*  t648   ref    arg0 in rcx
N005 ( 20, 12) [000114] --CXG-------              *  CALL      void   System.Threading.Monitor.Enter

lowering call (before):
N002 (  2, 10) [000120] H-----------       t120 =    CNS_INT(h) long   0x7ffdb70260c8 method
                                                  /--*  t120   long   arg0 in rcx
N003 ( 16, 16) [000121] --C---------       t121 = *  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST

objp:
======

args:
======
lowering arg : N001 (  0,  0) [000415] ----------L-              *  ARGPLACE  long  

late:
======
lowering arg : N002 (  2, 10) [000120] H-----------              *  CNS_INT(h) long   0x7ffdb70260c8 method
new node is :                [000649] ------------              *  PUTARG_REG long   REG rcx

lowering call (after):
N002 (  2, 10) [000120] H-----------       t120 =    CNS_INT(h) long   0x7ffdb70260c8 method
                                                  /--*  t120   long   
               [000649] ------------       t649 = *  PUTARG_REG long   REG rcx
                                                  /--*  t649   long   arg0 in rcx
N003 ( 16, 16) [000121] --C---------       t121 = *  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST

lowering store lcl var/field (before):
N002 (  2, 10) [000120] H-----------       t120 =    CNS_INT(h) long   0x7ffdb70260c8 method
                                                  /--*  t120   long   
               [000649] ------------       t649 = *  PUTARG_REG long   REG rcx
                                                  /--*  t649   long   arg0 in rcx
N003 ( 16, 16) [000121] --C---------       t121 = *  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
                                                  /--*  t121   ref    
N005 ( 20, 19) [000123] DA----------              *  STORE_LCL_VAR ref    V30 tmp12        

lowering store lcl var/field (after):
N002 (  2, 10) [000120] H-----------       t120 =    CNS_INT(h) long   0x7ffdb70260c8 method
                                                  /--*  t120   long   
               [000649] ------------       t649 = *  PUTARG_REG long   REG rcx
                                                  /--*  t649   long   arg0 in rcx
N003 ( 16, 16) [000121] --C---------       t121 = *  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
                                                  /--*  t121   ref    
N005 ( 20, 19) [000123] DA----------              *  STORE_LCL_VAR ref    V30 tmp12        

Addressing mode:
  Base
    N001 (  3,  2) [000117] ------------              *  LCL_VAR   ref    V00 this         
  + 8
Removing unused node:
  N002 (  1,  1) [000418] -c----------              *  CNS_INT   long   8 field offset Fseq[_myList]
New addressing mode node:
  N003 (  4,  3) [000419] ------------              *  LEA(b+8)  byref 

Addressing mode:
  Base
    N004 (  6,  5) [000118] ---XG-------              *  IND       ref   
  + 8
Removing unused node:
  N005 (  1,  1) [000416] -c----------              *  CNS_INT   long   8 field offset Fseq[Head]
New addressing mode node:
  N006 (  7,  6) [000417] ------------              *  LEA(b+8)  byref 

lowering store lcl var/field (before):
N001 (  3,  2) [000117] ------------       t117 =    LCL_VAR   ref    V00 this         
                                                  /--*  t117   ref    
N003 (  4,  3) [000419] -c----------       t419 = *  LEA(b+8)  byref 
                                                  /--*  t419   byref  
N004 (  6,  5) [000118] ---XG-------       t118 = *  IND       ref   
                                                  /--*  t118   ref    
N006 (  7,  6) [000417] -c----------       t417 = *  LEA(b+8)  byref 
                                                  /--*  t417   byref  
N007 (  9,  8) [000119] ---XG-------       t119 = *  IND       ref   
                                                  /--*  t119   ref    
N009 ( 13, 11) [000127] DA-XG-------              *  STORE_LCL_VAR ref    V31 tmp13        

lowering store lcl var/field (after):
N001 (  3,  2) [000117] ------------       t117 =    LCL_VAR   ref    V00 this         
                                                  /--*  t117   ref    
N003 (  4,  3) [000419] -c----------       t419 = *  LEA(b+8)  byref 
                                                  /--*  t419   byref  
N004 (  6,  5) [000118] ---XG-------       t118 = *  IND       ref   
                                                  /--*  t118   ref    
N006 (  7,  6) [000417] -c----------       t417 = *  LEA(b+8)  byref 
                                                  /--*  t417   byref  
N007 (  9,  8) [000119] ---XG-------       t119 = *  IND       ref   
                                                  /--*  t119   ref    
N009 ( 13, 11) [000127] DA-XG-------              *  STORE_LCL_VAR ref    V31 tmp13        

lowering call (before):
N002 (  3,  2) [000124] ------------       t124 =    LCL_VAR   ref    V30 tmp12        
                                                  /--*  t124   ref    this in rcx
N003 ( 17,  9) [000125] --CXG-------              *  CALL      void   FalseLeakRepro.Node..ctor

objp:
======
lowering arg : N001 (  0,  0) [000420] ----------L-              *  ARGPLACE  ref   

args:
======

late:
======
lowering arg : N002 (  3,  2) [000124] ------------              *  LCL_VAR   ref    V30 tmp12        
new node is :                [000650] ------------              *  PUTARG_REG ref    REG rcx

lowering call (after):
N002 (  3,  2) [000124] ------------       t124 =    LCL_VAR   ref    V30 tmp12        
                                                  /--*  t124   ref    
               [000650] ------------       t650 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t650   ref    this in rcx
N003 ( 17,  9) [000125] --CXG-------              *  CALL      void   FalseLeakRepro.Node..ctor

Addressing mode:
  Base
    N001 (  3,  2) [000128] ------------              *  LCL_VAR   ref    V31 tmp13        
  + 8
Removing unused node:
  N002 (  1,  1) [000421] -c----------              *  CNS_INT   long   8 field offset Fseq[Next]
New addressing mode node:
  N003 (  4,  3) [000422] ------------              *  LEA(b+8)  byref 

Addressing mode:
  Base
    N001 (  3,  2) [000132] ------------              *  LCL_VAR   ref    V00 this         
  + 8
Removing unused node:
  N002 (  1,  1) [000425] -c----------              *  CNS_INT   long   8 field offset Fseq[_myList]
New addressing mode node:
  N003 (  4,  3) [000426] ------------              *  LEA(b+8)  byref 

Addressing mode:
  Base
    N008 (  3,  2) [000134] ------------              *  LCL_VAR   ref    V00 this         
  + 8
Removing unused node:
  N009 (  1,  1) [000431] -c----------              *  CNS_INT   long   8 field offset Fseq[_myList]
New addressing mode node:
  N010 (  4,  3) [000432] ------------              *  LEA(b+8)  byref 

Addressing mode:
  Base
    N011 (  6,  5) [000135] ---XG-------              *  IND       ref   
  + 8
Removing unused node:
  N012 (  1,  1) [000429] -c----------              *  CNS_INT   long   8 field offset Fseq[Head]
New addressing mode node:
  N013 (  7,  6) [000430] ------------              *  LEA(b+8)  byref 

Addressing mode:
  Base
    N014 (  9,  8) [000136] ---XG-------              *  IND       ref   
  + 8
Removing unused node:
  N015 (  1,  1) [000427] -c----------              *  CNS_INT   long   8 field offset Fseq[Next]
New addressing mode node:
  N016 ( 10,  9) [000428] ------------              *  LEA(b+8)  byref 

Addressing mode:
  Base
    N004 (  6,  5) [000133] ---XG-------              *  IND       ref   
  + 8
Removing unused node:
  N005 (  1,  1) [000423] -c----------              *  CNS_INT   long   8 field offset Fseq[Head]
New addressing mode node:
  N006 (  7,  6) [000424] ------------              *  LEA(b+8)  byref 

lowering call (before):
N002 (  2, 10) [000143] H-----------       t143 =    CNS_INT(h) long   0x7ffdb6c458b8 token
                                                  /--*  t143   long   arg0 in rcx
N003 ( 16, 16) [000144] --C---------       t144 = *  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST

objp:
======

args:
======
lowering arg : N001 (  0,  0) [000433] ----------L-              *  ARGPLACE  long  

late:
======
lowering arg : N002 (  2, 10) [000143] H-----------              *  CNS_INT(h) long   0x7ffdb6c458b8 token
new node is :                [000651] ------------              *  PUTARG_REG long   REG rcx

lowering call (after):
N002 (  2, 10) [000143] H-----------       t143 =    CNS_INT(h) long   0x7ffdb6c458b8 token
                                                  /--*  t143   long   
               [000651] ------------       t651 = *  PUTARG_REG long   REG rcx
                                                  /--*  t651   long   arg0 in rcx
N003 ( 16, 16) [000144] --C---------       t144 = *  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST

lowering store lcl var/field (before):
N002 (  2, 10) [000143] H-----------       t143 =    CNS_INT(h) long   0x7ffdb6c458b8 token
                                                  /--*  t143   long   
               [000651] ------------       t651 = *  PUTARG_REG long   REG rcx
                                                  /--*  t651   long   arg0 in rcx
N003 ( 16, 16) [000144] --C---------       t144 = *  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
                                                  /--*  t144   ref    
N005 ( 20, 19) [000146] DA----------              *  STORE_LCL_VAR ref    V32 tmp14        

lowering store lcl var/field (after):
N002 (  2, 10) [000143] H-----------       t143 =    CNS_INT(h) long   0x7ffdb6c458b8 token
                                                  /--*  t143   long   
               [000651] ------------       t651 = *  PUTARG_REG long   REG rcx
                                                  /--*  t651   long   arg0 in rcx
N003 ( 16, 16) [000144] --C---------       t144 = *  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
                                                  /--*  t144   ref    
N005 ( 20, 19) [000146] DA----------              *  STORE_LCL_VAR ref    V32 tmp14        

Addressing mode:
  Base
    N001 (  3,  2) [000140] ------------              *  LCL_VAR   ref    V00 this         
  + 8
Removing unused node:
  N002 (  1,  1) [000436] -c----------              *  CNS_INT   long   8 field offset Fseq[_myList]
New addressing mode node:
  N003 (  4,  3) [000437] ------------              *  LEA(b+8)  byref 

Addressing mode:
  Base
    N004 (  6,  5) [000141] ---XG-------              *  IND       ref   
  + 8
Removing unused node:
  N005 (  1,  1) [000434] -c----------              *  CNS_INT   long   8 field offset Fseq[Head]
New addressing mode node:
  N006 (  7,  6) [000435] ------------              *  LEA(b+8)  byref 

lowering store lcl var/field (before):
N001 (  3,  2) [000140] ------------       t140 =    LCL_VAR   ref    V00 this         
                                                  /--*  t140   ref    
N003 (  4,  3) [000437] -c----------       t437 = *  LEA(b+8)  byref 
                                                  /--*  t437   byref  
N004 (  6,  5) [000141] ---XG-------       t141 = *  IND       ref   
                                                  /--*  t141   ref    
N006 (  7,  6) [000435] -c----------       t435 = *  LEA(b+8)  byref 
                                                  /--*  t435   byref  
N007 (  9,  8) [000142] ---XG-------       t142 = *  IND       ref   
                                                  /--*  t142   ref    
N009 ( 13, 11) [000150] DA-XG-------              *  STORE_LCL_VAR ref    V33 tmp15        

lowering store lcl var/field (after):
N001 (  3,  2) [000140] ------------       t140 =    LCL_VAR   ref    V00 this         
                                                  /--*  t140   ref    
N003 (  4,  3) [000437] -c----------       t437 = *  LEA(b+8)  byref 
                                                  /--*  t437   byref  
N004 (  6,  5) [000141] ---XG-------       t141 = *  IND       ref   
                                                  /--*  t141   ref    
N006 (  7,  6) [000435] -c----------       t435 = *  LEA(b+8)  byref 
                                                  /--*  t435   byref  
N007 (  9,  8) [000142] ---XG-------       t142 = *  IND       ref   
                                                  /--*  t142   ref    
N009 ( 13, 11) [000150] DA-XG-------              *  STORE_LCL_VAR ref    V33 tmp15        

lowering call (before):
N002 (  3,  2) [000147] ------------       t147 =    LCL_VAR   ref    V32 tmp14        
                                                  /--*  t147   ref    this in rcx
N003 ( 17,  9) [000148] --CXG-------              *  CALL      void   System.Object..ctor

objp:
======
lowering arg : N001 (  0,  0) [000438] ----------L-              *  ARGPLACE  ref   

args:
======

late:
======
lowering arg : N002 (  3,  2) [000147] ------------              *  LCL_VAR   ref    V32 tmp14        
new node is :                [000652] ------------              *  PUTARG_REG ref    REG rcx

lowering call (after):
N002 (  3,  2) [000147] ------------       t147 =    LCL_VAR   ref    V32 tmp14        
                                                  /--*  t147   ref    
               [000652] ------------       t652 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t652   ref    this in rcx
N003 ( 17,  9) [000148] --CXG-------              *  CALL      void   System.Object..ctor

Addressing mode:
  Base
    N001 (  3,  2) [000151] ------------              *  LCL_VAR   ref    V33 tmp15        
  + 16
Removing unused node:
  N002 (  1,  1) [000439] -c----------              *  CNS_INT   long   16 field offset Fseq[Data]
New addressing mode node:
  N003 (  4,  3) [000440] ------------              *  LEA(b+16) byref 

lowering store lcl var/field (before):
N001 (  3,  2) [000158] ------------       t158 =    LCL_VAR   int    V04 loc2         
N002 (  1,  1) [000159] -c----------       t159 =    CNS_INT   int    1
                                                  /--*  t158   int    
                                                  +--*  t159   int    
N003 (  5,  4) [000160] ------------       t160 = *  ADD       int   
                                                  /--*  t160   int    
N005 (  9,  7) [000162] DA----------              *  STORE_LCL_VAR int    V04 loc2         

lowering store lcl var/field (after):
N001 (  3,  2) [000158] ------------       t158 =    LCL_VAR   int    V04 loc2         
N002 (  1,  1) [000159] -c----------       t159 =    CNS_INT   int    1
                                                  /--*  t158   int    
                                                  +--*  t159   int    
N003 (  5,  4) [000160] ------------       t160 = *  ADD       int   
                                                  /--*  t160   int    
N005 (  9,  7) [000162] DA----------              *  STORE_LCL_VAR int    V04 loc2         

lowering store lcl var/field (before):
N001 (  3,  2) [000094] -c----------        t94 =    LCL_VAR   int    V04 loc2         
N002 (  1,  1) [000095] -c----------        t95 =    CNS_INT   int    10
                                                  /--*  t94    int    
                                                  +--*  t95    int    
N003 (  8,  4) [000096] ------------        t96 = *  LT        int   
                                                  /--*  t96    int    
N005 ( 12,  7) [000098] DA----------              *  STORE_LCL_VAR int    V07 loc5         

lowering store lcl var/field (after):
N001 (  3,  2) [000094] -c----------        t94 =    LCL_VAR   int    V04 loc2         
N002 (  1,  1) [000095] -c----------        t95 =    CNS_INT   int    10
                                                  /--*  t94    int    
                                                  +--*  t95    int    
N003 (  8,  4) [000096] ------------        t96 = *  LT        int   
                                                  /--*  t96    int    
N005 ( 12,  7) [000098] DA----------              *  STORE_LCL_VAR int    V07 loc5         

lowering call (before):
N001 ( 14,  5) [000171] --CXG-------       t171 =    CALL      struct System.DateTime.get_Now

objp:
======

args:
======

late:
======
lowering call (after):
N001 ( 14,  5) [000171] --CXG-------       t171 =    CALL      long   System.DateTime.get_Now

lowering store lcl var/field (before):
N001 ( 14,  5) [000171] --CXG-------       t171 =    CALL      long   System.DateTime.get_Now
                                                  /--*  t171   long   
N003 ( 18,  8) [000174] DA-XG-------              *  STORE_LCL_VAR struct<System.DateTime, 8> V34 tmp16        

lowering store lcl var/field (after):
N001 ( 14,  5) [000171] --CXG-------       t171 =    CALL      long   System.DateTime.get_Now
                                                  /--*  t171   long   
N003 ( 18,  8) [000174] DA-XG-------              *  STORE_LCL_VAR struct<System.DateTime, 8> V34 tmp16        

lowering store lcl var/field (before):
N001 (  3,  2) [000175] ------------       t175 =    LCL_VAR   struct<System.DateTime, 8> V34 tmp16        
                                                  /--*  t175   struct 
N003 (  7,  5) [000178] DA--G-------              *  STORE_LCL_VAR struct<System.DateTime, 8>(AX) V03 loc1         

lowering store lcl var/field (after):
N001 (  3,  2) [000175] ------------       t175 =    LCL_VAR   struct<System.DateTime, 8> V34 tmp16        
                                                  /--*  t175   struct 
N003 (  7,  5) [000178] DA--G-------              *  STORE_LCL_VAR struct<System.DateTime, 8>(AX) V03 loc1         


Local V03 should not be enregistered because: written in a block op
lowering call (before):
N002 (  3,  3) [000180] ------------       t180 =    LCL_VAR_ADDR byref  V03 loc1         
                                                  /--*  t180   byref  this in rcx
N003 ( 17, 10) [000181] --CXG-------       t181 = *  CALL      ref    System.DateTime.ToString

objp:
======
lowering arg : N001 (  0,  0) [000443] ----------L-              *  ARGPLACE  byref 

args:
======

late:
======
lowering arg : N002 (  3,  3) [000180] ------------              *  LCL_VAR_ADDR byref  V03 loc1         
new node is :                [000653] ------------              *  PUTARG_REG byref  REG rcx

lowering call (after):
N002 (  3,  3) [000180] ------------       t180 =    LCL_VAR_ADDR byref  V03 loc1         
                                                  /--*  t180   byref  
               [000653] ------------       t653 = *  PUTARG_REG byref  REG rcx
                                                  /--*  t653   byref  this in rcx
N003 ( 17, 10) [000181] --CXG-------       t181 = *  CALL      ref    System.DateTime.ToString

lowering store lcl var/field (before):
N002 (  3,  3) [000180] ------------       t180 =    LCL_VAR_ADDR byref  V03 loc1         
                                                  /--*  t180   byref  
               [000653] ------------       t653 = *  PUTARG_REG byref  REG rcx
                                                  /--*  t653   byref  this in rcx
N003 ( 17, 10) [000181] --CXG-------       t181 = *  CALL      ref    System.DateTime.ToString
                                                  /--*  t181   ref    
N005 ( 21, 13) [000183] DA-XG-------              *  STORE_LCL_VAR ref    V35 tmp17        

lowering store lcl var/field (after):
N002 (  3,  3) [000180] ------------       t180 =    LCL_VAR_ADDR byref  V03 loc1         
                                                  /--*  t180   byref  
               [000653] ------------       t653 = *  PUTARG_REG byref  REG rcx
                                                  /--*  t653   byref  this in rcx
N003 ( 17, 10) [000181] --CXG-------       t181 = *  CALL      ref    System.DateTime.ToString
                                                  /--*  t181   ref    
N005 ( 21, 13) [000183] DA-XG-------              *  STORE_LCL_VAR ref    V35 tmp17        

lowering call (before):
N003 (  2, 10) [000444] H-----------       t444 =    CNS_INT(h) long   0xBE2A3200 "	 Waiting for list processing to complete..."
                                                  /--*  t444   long   
N004 (  4, 12) [000445] #---G-------       t445 = *  IND       ref   
N005 (  3,  2) [000184] ------------       t184 =    LCL_VAR   ref    V35 tmp17        
                                                  /--*  t445   ref    arg1 in rdx
                                                  +--*  t184   ref    arg0 in rcx
N006 ( 21, 21) [000186] --CXG-------       t186 = *  CALL      ref    System.String.Concat

objp:
======

args:
======
lowering arg : N001 (  0,  0) [000447] ----------L-              *  ARGPLACE  ref   
lowering arg : N002 (  0,  0) [000446] ----------L-              *  ARGPLACE  ref   

late:
======
lowering arg : N004 (  4, 12) [000445] #---G-------              *  IND       ref   
new node is :                [000654] ----G-------              *  PUTARG_REG ref    REG rdx

lowering arg : N005 (  3,  2) [000184] ------------              *  LCL_VAR   ref    V35 tmp17        
new node is :                [000655] ------------              *  PUTARG_REG ref    REG rcx

lowering call (after):
N003 (  2, 10) [000444] H-----------       t444 =    CNS_INT(h) long   0xBE2A3200 "	 Waiting for list processing to complete..."
                                                  /--*  t444   long   
N004 (  4, 12) [000445] #---G-------       t445 = *  IND       ref   
                                                  /--*  t445   ref    
               [000654] ----G-------       t654 = *  PUTARG_REG ref    REG rdx
N005 (  3,  2) [000184] ------------       t184 =    LCL_VAR   ref    V35 tmp17        
                                                  /--*  t184   ref    
               [000655] ------------       t655 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t654   ref    arg1 in rdx
                                                  +--*  t655   ref    arg0 in rcx
N006 ( 21, 21) [000186] --CXG-------       t186 = *  CALL      ref    System.String.Concat

lowering store lcl var/field (before):
N003 (  2, 10) [000444] H-----------       t444 =    CNS_INT(h) long   0xBE2A3200 "	 Waiting for list processing to complete..."
                                                  /--*  t444   long   
N004 (  4, 12) [000445] #---G-------       t445 = *  IND       ref   
                                                  /--*  t445   ref    
               [000654] ----G-------       t654 = *  PUTARG_REG ref    REG rdx
N005 (  3,  2) [000184] ------------       t184 =    LCL_VAR   ref    V35 tmp17        
                                                  /--*  t184   ref    
               [000655] ------------       t655 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t654   ref    arg1 in rdx
                                                  +--*  t655   ref    arg0 in rcx
N006 ( 21, 21) [000186] --CXG-------       t186 = *  CALL      ref    System.String.Concat
                                                  /--*  t186   ref    
N008 ( 25, 24) [000188] DA-XG-------              *  STORE_LCL_VAR ref    V36 tmp18        

lowering store lcl var/field (after):
N003 (  2, 10) [000444] H-----------       t444 =    CNS_INT(h) long   0xBE2A3200 "	 Waiting for list processing to complete..."
                                                  /--*  t444   long   
N004 (  4, 12) [000445] #---G-------       t445 = *  IND       ref   
                                                  /--*  t445   ref    
               [000654] ----G-------       t654 = *  PUTARG_REG ref    REG rdx
N005 (  3,  2) [000184] ------------       t184 =    LCL_VAR   ref    V35 tmp17        
                                                  /--*  t184   ref    
               [000655] ------------       t655 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t654   ref    arg1 in rdx
                                                  +--*  t655   ref    arg0 in rcx
N006 ( 21, 21) [000186] --CXG-------       t186 = *  CALL      ref    System.String.Concat
                                                  /--*  t186   ref    
N008 ( 25, 24) [000188] DA-XG-------              *  STORE_LCL_VAR ref    V36 tmp18        

lowering call (before):
N002 (  3,  2) [000189] ------------       t189 =    LCL_VAR   ref    V36 tmp18        
                                                  /--*  t189   ref    arg0 in rcx
N003 ( 17,  8) [000190] --CXG-------              *  CALL      void   System.Console.WriteLine

objp:
======

args:
======
lowering arg : N001 (  0,  0) [000448] ----------L-              *  ARGPLACE  ref   

late:
======
lowering arg : N002 (  3,  2) [000189] ------------              *  LCL_VAR   ref    V36 tmp18        
new node is :                [000656] ------------              *  PUTARG_REG ref    REG rcx

lowering call (after):
N002 (  3,  2) [000189] ------------       t189 =    LCL_VAR   ref    V36 tmp18        
                                                  /--*  t189   ref    
               [000656] ------------       t656 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t656   ref    arg0 in rcx
N003 ( 17,  8) [000190] --CXG-------              *  CALL      void   System.Console.WriteLine

Addressing mode:
  Base
    N001 (  3,  2) [000198] ------------              *  LCL_VAR   ref    V00 this         
  + 8
Removing unused node:
  N002 (  1,  1) [000449] -c----------              *  CNS_INT   long   8 field offset Fseq[_myList]
New addressing mode node:
  N003 (  4,  3) [000450] ------------              *  LEA(b+8)  byref 

lowering store lcl var/field (before):
N001 (  3,  2) [000198] ------------       t198 =    LCL_VAR   ref    V00 this         
                                                  /--*  t198   ref    
N003 (  4,  3) [000450] -c----------       t450 = *  LEA(b+8)  byref 
                                                  /--*  t450   byref  
N004 (  6,  5) [000199] ---XG-------       t199 = *  IND       ref   
                                                  /--*  t199   ref    
N006 ( 10,  8) [000201] DA-XG-------              *  STORE_LCL_VAR ref    V08 loc6         

lowering store lcl var/field (after):
N001 (  3,  2) [000198] ------------       t198 =    LCL_VAR   ref    V00 this         
                                                  /--*  t198   ref    
N003 (  4,  3) [000450] -c----------       t450 = *  LEA(b+8)  byref 
                                                  /--*  t450   byref  
N004 (  6,  5) [000199] ---XG-------       t199 = *  IND       ref   
                                                  /--*  t199   ref    
N006 ( 10,  8) [000201] DA-XG-------              *  STORE_LCL_VAR ref    V08 loc6         

lowering store lcl var/field (before):
N001 (  1,  1) [000202] ------------       t202 =    CNS_INT   int    0
                                                  /--*  t202   int    
N003 (  5,  4) [000204] DA--G-------              *  STORE_LCL_VAR int   (AX) V09 loc7         

lowering store lcl var/field (after):
N001 (  1,  1) [000202] ------------       t202 =    CNS_INT   int    0
                                                  /--*  t202   int    
N003 (  5,  4) [000204] DA--G-------              *  STORE_LCL_VAR int   (AX) V09 loc7         


Local V09 should not be enregistered because: written in a block op
lowering call (before):
N003 (  3,  3) [000207] ------------       t207 =    LCL_VAR_ADDR long   V09 loc7         
N004 (  3,  2) [000205] ------------       t205 =    LCL_VAR   ref    V08 loc6         
                                                  /--*  t207   long   arg1 in rdx
                                                  +--*  t205   ref    arg0 in rcx
N005 ( 20, 12) [000208] --CXG-------              *  CALL      void   System.Threading.Monitor.Enter

objp:
======

args:
======
lowering arg : N001 (  0,  0) [000452] ----------L-              *  ARGPLACE  ref   
lowering arg : N002 (  0,  0) [000451] ----------L-              *  ARGPLACE  long  

late:
======
lowering arg : N003 (  3,  3) [000207] ------------              *  LCL_VAR_ADDR long   V09 loc7         
new node is :                [000657] ------------              *  PUTARG_REG long   REG rdx

lowering arg : N004 (  3,  2) [000205] ------------              *  LCL_VAR   ref    V08 loc6         
new node is :                [000658] ------------              *  PUTARG_REG ref    REG rcx

lowering call (after):
N003 (  3,  3) [000207] ------------       t207 =    LCL_VAR_ADDR long   V09 loc7         
                                                  /--*  t207   long   
               [000657] ------------       t657 = *  PUTARG_REG long   REG rdx
N004 (  3,  2) [000205] ------------       t205 =    LCL_VAR   ref    V08 loc6         
                                                  /--*  t205   ref    
               [000658] ------------       t658 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t657   long   arg1 in rdx
                                                  +--*  t658   ref    arg0 in rcx
N005 ( 20, 12) [000208] --CXG-------              *  CALL      void   System.Threading.Monitor.Enter

Addressing mode:
  Base
    N001 (  3,  2) [000211] ------------              *  LCL_VAR   ref    V00 this         
  + 8
Removing unused node:
  N002 (  1,  1) [000455] -c----------              *  CNS_INT   long   8 field offset Fseq[_myList]
New addressing mode node:
  N003 (  4,  3) [000456] ------------              *  LEA(b+8)  byref 

Addressing mode:
  Base
    N004 (  6,  5) [000212] ---XG-------              *  IND       ref   
  + 8
Removing unused node:
  N005 (  1,  1) [000453] -c----------              *  CNS_INT   long   8 field offset Fseq[Head]
New addressing mode node:
  N006 (  7,  6) [000454] ------------              *  LEA(b+8)  byref 

Addressing mode:
  Base
    N008 (  3,  2) [000214] ------------              *  LCL_VAR   ref    V00 this         
  + 8
Removing unused node:
  N009 (  1,  1) [000459] -c----------              *  CNS_INT   long   8 field offset Fseq[_myList]
New addressing mode node:
  N010 (  4,  3) [000460] ------------              *  LEA(b+8)  byref 

Addressing mode:
  Base
    N011 (  6,  5) [000215] ---XG-------              *  IND       ref   
  + 16
Removing unused node:
  N012 (  1,  1) [000457] -c----------              *  CNS_INT   long   16 field offset Fseq[Tail]
New addressing mode node:
  N013 (  7,  6) [000458] ------------              *  LEA(b+16) byref 

lowering store lcl var/field (before):
N001 (  3,  2) [000211] ------------       t211 =    LCL_VAR   ref    V00 this         
                                                  /--*  t211   ref    
N003 (  4,  3) [000456] -c----------       t456 = *  LEA(b+8)  byref 
                                                  /--*  t456   byref  
N004 (  6,  5) [000212] ---XG-------       t212 = *  IND       ref   
                                                  /--*  t212   ref    
N006 (  7,  6) [000454] -c----------       t454 = *  LEA(b+8)  byref 
                                                  /--*  t454   byref  
N007 (  9,  8) [000213] ---XG-------       t213 = *  IND       ref   
N008 (  3,  2) [000214] ------------       t214 =    LCL_VAR   ref    V00 this         
                                                  /--*  t214   ref    
N010 (  4,  3) [000460] -c----------       t460 = *  LEA(b+8)  byref 
                                                  /--*  t460   byref  
N011 (  6,  5) [000215] ---XG-------       t215 = *  IND       ref   
                                                  /--*  t215   ref    
N013 (  7,  6) [000458] -c----------       t458 = *  LEA(b+16) byref 
                                                  /--*  t458   byref  
N014 (  9,  8) [000216] -c-XG-------       t216 = *  IND       ref   
                                                  /--*  t213   ref    
                                                  +--*  t216   ref    
N015 ( 22, 17) [000217] ---XG-------       t217 = *  EQ        int   
                                                  /--*  t217   int    
N017 ( 26, 20) [000219] DA-XG-------              *  STORE_LCL_VAR int    V10 loc8         

lowering store lcl var/field (after):
N001 (  3,  2) [000211] ------------       t211 =    LCL_VAR   ref    V00 this         
                                                  /--*  t211   ref    
N003 (  4,  3) [000456] -c----------       t456 = *  LEA(b+8)  byref 
                                                  /--*  t456   byref  
N004 (  6,  5) [000212] ---XG-------       t212 = *  IND       ref   
                                                  /--*  t212   ref    
N006 (  7,  6) [000454] -c----------       t454 = *  LEA(b+8)  byref 
                                                  /--*  t454   byref  
N007 (  9,  8) [000213] ---XG-------       t213 = *  IND       ref   
N008 (  3,  2) [000214] ------------       t214 =    LCL_VAR   ref    V00 this         
                                                  /--*  t214   ref    
N010 (  4,  3) [000460] -c----------       t460 = *  LEA(b+8)  byref 
                                                  /--*  t460   byref  
N011 (  6,  5) [000215] ---XG-------       t215 = *  IND       ref   
                                                  /--*  t215   ref    
N013 (  7,  6) [000458] -c----------       t458 = *  LEA(b+16) byref 
                                                  /--*  t458   byref  
N014 (  9,  8) [000216] -c-XG-------       t216 = *  IND       ref   
                                                  /--*  t213   ref    
                                                  +--*  t216   ref    
N015 ( 22, 17) [000217] ---XG-------       t217 = *  EQ        int   
                                                  /--*  t217   int    
N017 ( 26, 20) [000219] DA-XG-------              *  STORE_LCL_VAR int    V10 loc8         

lowering call (before):
N002 (  1,  1) [000226] ------------       t226 =    CNS_INT   int    100
                                                  /--*  t226   int    arg0 in rcx
N003 ( 15,  7) [000227] --CXG-------              *  CALL      void   System.Threading.Thread.Sleep

objp:
======

args:
======
lowering arg : N001 (  0,  0) [000463] ----------L-              *  ARGPLACE  int   

late:
======
lowering arg : N002 (  1,  1) [000226] ------------              *  CNS_INT   int    100
new node is :                [000659] ------------              *  PUTARG_REG int    REG rcx

lowering call (after):
N002 (  1,  1) [000226] ------------       t226 =    CNS_INT   int    100
                                                  /--*  t226   int    
               [000659] ------------       t659 = *  PUTARG_REG int    REG rcx
                                                  /--*  t659   int    arg0 in rcx
N003 ( 15,  7) [000227] --CXG-------              *  CALL      void   System.Threading.Thread.Sleep

lowering store lcl var/field (before):
N001 (  1,  1) [000193] ------------       t193 =    CNS_INT   int    1
                                                  /--*  t193   int    
N003 (  5,  4) [000195] DA----------              *  STORE_LCL_VAR int    V11 loc9         

lowering store lcl var/field (after):
N001 (  1,  1) [000193] -c----------       t193 =    CNS_INT   int    1
                                                  /--*  t193   int    
N003 (  5,  4) [000195] DA----------              *  STORE_LCL_VAR int    V11 loc9         

lowering call (before):
N001 ( 14,  5) [000232] --CXG-------       t232 =    CALL      struct System.DateTime.get_Now

objp:
======

args:
======

late:
======
lowering call (after):
N001 ( 14,  5) [000232] --CXG-------       t232 =    CALL      long   System.DateTime.get_Now

lowering store lcl var/field (before):
N001 ( 14,  5) [000232] --CXG-------       t232 =    CALL      long   System.DateTime.get_Now
                                                  /--*  t232   long   
N003 ( 18,  8) [000235] DA-XG-------              *  STORE_LCL_VAR struct<System.DateTime, 8> V37 tmp19        

lowering store lcl var/field (after):
N001 ( 14,  5) [000232] --CXG-------       t232 =    CALL      long   System.DateTime.get_Now
                                                  /--*  t232   long   
N003 ( 18,  8) [000235] DA-XG-------              *  STORE_LCL_VAR struct<System.DateTime, 8> V37 tmp19        

lowering store lcl var/field (before):
N001 (  3,  2) [000236] ------------       t236 =    LCL_VAR   struct<System.DateTime, 8> V37 tmp19        
                                                  /--*  t236   struct 
N003 (  7,  5) [000239] DA--G-------              *  STORE_LCL_VAR struct<System.DateTime, 8>(AX) V03 loc1         

lowering store lcl var/field (after):
N001 (  3,  2) [000236] ------------       t236 =    LCL_VAR   struct<System.DateTime, 8> V37 tmp19        
                                                  /--*  t236   struct 
N003 (  7,  5) [000239] DA--G-------              *  STORE_LCL_VAR struct<System.DateTime, 8>(AX) V03 loc1         


Local V03 should not be enregistered because: written in a block op
lowering call (before):
N002 (  3,  3) [000241] ------------       t241 =    LCL_VAR_ADDR byref  V03 loc1         
                                                  /--*  t241   byref  this in rcx
N003 ( 17, 10) [000242] --CXG-------       t242 = *  CALL      ref    System.DateTime.ToString

objp:
======
lowering arg : N001 (  0,  0) [000465] ----------L-              *  ARGPLACE  byref 

args:
======

late:
======
lowering arg : N002 (  3,  3) [000241] ------------              *  LCL_VAR_ADDR byref  V03 loc1         
new node is :                [000660] ------------              *  PUTARG_REG byref  REG rcx

lowering call (after):
N002 (  3,  3) [000241] ------------       t241 =    LCL_VAR_ADDR byref  V03 loc1         
                                                  /--*  t241   byref  
               [000660] ------------       t660 = *  PUTARG_REG byref  REG rcx
                                                  /--*  t660   byref  this in rcx
N003 ( 17, 10) [000242] --CXG-------       t242 = *  CALL      ref    System.DateTime.ToString

lowering store lcl var/field (before):
N002 (  3,  3) [000241] ------------       t241 =    LCL_VAR_ADDR byref  V03 loc1         
                                                  /--*  t241   byref  
               [000660] ------------       t660 = *  PUTARG_REG byref  REG rcx
                                                  /--*  t660   byref  this in rcx
N003 ( 17, 10) [000242] --CXG-------       t242 = *  CALL      ref    System.DateTime.ToString
                                                  /--*  t242   ref    
N005 ( 21, 13) [000244] DA-XG-------              *  STORE_LCL_VAR ref    V38 tmp20        

lowering store lcl var/field (after):
N002 (  3,  3) [000241] ------------       t241 =    LCL_VAR_ADDR byref  V03 loc1         
                                                  /--*  t241   byref  
               [000660] ------------       t660 = *  PUTARG_REG byref  REG rcx
                                                  /--*  t660   byref  this in rcx
N003 ( 17, 10) [000242] --CXG-------       t242 = *  CALL      ref    System.DateTime.ToString
                                                  /--*  t242   ref    
N005 ( 21, 13) [000244] DA-XG-------              *  STORE_LCL_VAR ref    V38 tmp20        

lowering call (before):
N003 (  2, 10) [000466] H-----------       t466 =    CNS_INT(h) long   0xBE2A3208 "	 Done.  Profiler is active, available options:"
                                                  /--*  t466   long   
N004 (  4, 12) [000467] #---G-------       t467 = *  IND       ref   
N005 (  3,  2) [000245] ------------       t245 =    LCL_VAR   ref    V38 tmp20        
                                                  /--*  t467   ref    arg1 in rdx
                                                  +--*  t245   ref    arg0 in rcx
N006 ( 21, 21) [000247] --CXG-------       t247 = *  CALL      ref    System.String.Concat

objp:
======

args:
======
lowering arg : N001 (  0,  0) [000469] ----------L-              *  ARGPLACE  ref   
lowering arg : N002 (  0,  0) [000468] ----------L-              *  ARGPLACE  ref   

late:
======
lowering arg : N004 (  4, 12) [000467] #---G-------              *  IND       ref   
new node is :                [000661] ----G-------              *  PUTARG_REG ref    REG rdx

lowering arg : N005 (  3,  2) [000245] ------------              *  LCL_VAR   ref    V38 tmp20        
new node is :                [000662] ------------              *  PUTARG_REG ref    REG rcx

lowering call (after):
N003 (  2, 10) [000466] H-----------       t466 =    CNS_INT(h) long   0xBE2A3208 "	 Done.  Profiler is active, available options:"
                                                  /--*  t466   long   
N004 (  4, 12) [000467] #---G-------       t467 = *  IND       ref   
                                                  /--*  t467   ref    
               [000661] ----G-------       t661 = *  PUTARG_REG ref    REG rdx
N005 (  3,  2) [000245] ------------       t245 =    LCL_VAR   ref    V38 tmp20        
                                                  /--*  t245   ref    
               [000662] ------------       t662 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t661   ref    arg1 in rdx
                                                  +--*  t662   ref    arg0 in rcx
N006 ( 21, 21) [000247] --CXG-------       t247 = *  CALL      ref    System.String.Concat

lowering store lcl var/field (before):
N003 (  2, 10) [000466] H-----------       t466 =    CNS_INT(h) long   0xBE2A3208 "	 Done.  Profiler is active, available options:"
                                                  /--*  t466   long   
N004 (  4, 12) [000467] #---G-------       t467 = *  IND       ref   
                                                  /--*  t467   ref    
               [000661] ----G-------       t661 = *  PUTARG_REG ref    REG rdx
N005 (  3,  2) [000245] ------------       t245 =    LCL_VAR   ref    V38 tmp20        
                                                  /--*  t245   ref    
               [000662] ------------       t662 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t661   ref    arg1 in rdx
                                                  +--*  t662   ref    arg0 in rcx
N006 ( 21, 21) [000247] --CXG-------       t247 = *  CALL      ref    System.String.Concat
                                                  /--*  t247   ref    
N008 ( 25, 24) [000249] DA-XG-------              *  STORE_LCL_VAR ref    V39 tmp21        

lowering store lcl var/field (after):
N003 (  2, 10) [000466] H-----------       t466 =    CNS_INT(h) long   0xBE2A3208 "	 Done.  Profiler is active, available options:"
                                                  /--*  t466   long   
N004 (  4, 12) [000467] #---G-------       t467 = *  IND       ref   
                                                  /--*  t467   ref    
               [000661] ----G-------       t661 = *  PUTARG_REG ref    REG rdx
N005 (  3,  2) [000245] ------------       t245 =    LCL_VAR   ref    V38 tmp20        
                                                  /--*  t245   ref    
               [000662] ------------       t662 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t661   ref    arg1 in rdx
                                                  +--*  t662   ref    arg0 in rcx
N006 ( 21, 21) [000247] --CXG-------       t247 = *  CALL      ref    System.String.Concat
                                                  /--*  t247   ref    
N008 ( 25, 24) [000249] DA-XG-------              *  STORE_LCL_VAR ref    V39 tmp21        

lowering call (before):
N002 (  3,  2) [000250] ------------       t250 =    LCL_VAR   ref    V39 tmp21        
                                                  /--*  t250   ref    arg0 in rcx
N003 ( 17,  8) [000251] --CXG-------              *  CALL      void   System.Console.WriteLine

objp:
======

args:
======
lowering arg : N001 (  0,  0) [000470] ----------L-              *  ARGPLACE  ref   

late:
======
lowering arg : N002 (  3,  2) [000250] ------------              *  LCL_VAR   ref    V39 tmp21        
new node is :                [000663] ------------              *  PUTARG_REG ref    REG rcx

lowering call (after):
N002 (  3,  2) [000250] ------------       t250 =    LCL_VAR   ref    V39 tmp21        
                                                  /--*  t250   ref    
               [000663] ------------       t663 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t663   ref    arg0 in rcx
N003 ( 17,  8) [000251] --CXG-------              *  CALL      void   System.Console.WriteLine

lowering call (before):
N002 (  2, 10) [000471] H-----------       t471 =    CNS_INT(h) long   0xBE2A3210 "   Q = quit"
                                                  /--*  t471   long   
N003 (  4, 12) [000472] #---G-------       t472 = *  IND       ref   
                                                  /--*  t472   ref    arg0 in rcx
N004 ( 18, 18) [000254] --CXG-------              *  CALL      void   System.Console.WriteLine

objp:
======

args:
======
lowering arg : N001 (  0,  0) [000473] ----------L-              *  ARGPLACE  ref   

late:
======
lowering arg : N003 (  4, 12) [000472] #---G-------              *  IND       ref   
new node is :                [000664] ----G-------              *  PUTARG_REG ref    REG rcx

lowering call (after):
N002 (  2, 10) [000471] H-----------       t471 =    CNS_INT(h) long   0xBE2A3210 "   Q = quit"
                                                  /--*  t471   long   
N003 (  4, 12) [000472] #---G-------       t472 = *  IND       ref   
                                                  /--*  t472   ref    
               [000664] ----G-------       t664 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t664   ref    arg0 in rcx
N004 ( 18, 18) [000254] --CXG-------              *  CALL      void   System.Console.WriteLine

lowering call (before):
N002 (  2, 10) [000474] H-----------       t474 =    CNS_INT(h) long   0xBE2A3218 "   H = heap snapshot"
                                                  /--*  t474   long   
N003 (  4, 12) [000475] #---G-------       t475 = *  IND       ref   
                                                  /--*  t475   ref    arg0 in rcx
N004 ( 18, 18) [000257] --CXG-------              *  CALL      void   System.Console.WriteLine

objp:
======

args:
======
lowering arg : N001 (  0,  0) [000476] ----------L-              *  ARGPLACE  ref   

late:
======
lowering arg : N003 (  4, 12) [000475] #---G-------              *  IND       ref   
new node is :                [000665] ----G-------              *  PUTARG_REG ref    REG rcx

lowering call (after):
N002 (  2, 10) [000474] H-----------       t474 =    CNS_INT(h) long   0xBE2A3218 "   H = heap snapshot"
                                                  /--*  t474   long   
N003 (  4, 12) [000475] #---G-------       t475 = *  IND       ref   
                                                  /--*  t475   ref    
               [000665] ----G-------       t665 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t665   ref    arg0 in rcx
N004 ( 18, 18) [000257] --CXG-------              *  CALL      void   System.Console.WriteLine

lowering call (before):
N002 (  2, 10) [000477] H-----------       t477 =    CNS_INT(h) long   0xBE2A3220 "   G = GC (max gen)"
                                                  /--*  t477   long   
N003 (  4, 12) [000478] #---G-------       t478 = *  IND       ref   
                                                  /--*  t478   ref    arg0 in rcx
N004 ( 18, 18) [000260] --CXG-------              *  CALL      void   System.Console.WriteLine

objp:
======

args:
======
lowering arg : N001 (  0,  0) [000479] ----------L-              *  ARGPLACE  ref   

late:
======
lowering arg : N003 (  4, 12) [000478] #---G-------              *  IND       ref   
new node is :                [000666] ----G-------              *  PUTARG_REG ref    REG rcx

lowering call (after):
N002 (  2, 10) [000477] H-----------       t477 =    CNS_INT(h) long   0xBE2A3220 "   G = GC (max gen)"
                                                  /--*  t477   long   
N003 (  4, 12) [000478] #---G-------       t478 = *  IND       ref   
                                                  /--*  t478   ref    
               [000666] ----G-------       t666 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t666   ref    arg0 in rcx
N004 ( 18, 18) [000260] --CXG-------              *  CALL      void   System.Console.WriteLine

lowering call (before):
N002 (  2, 10) [000480] H-----------       t480 =    CNS_INT(h) long   0xBE2A3228 "   R = clear the running flag to stop the consumer thread"
                                                  /--*  t480   long   
N003 (  4, 12) [000481] #---G-------       t481 = *  IND       ref   
                                                  /--*  t481   ref    arg0 in rcx
N004 ( 18, 18) [000263] --CXG-------              *  CALL      void   System.Console.WriteLine

objp:
======

args:
======
lowering arg : N001 (  0,  0) [000482] ----------L-              *  ARGPLACE  ref   

late:
======
lowering arg : N003 (  4, 12) [000481] #---G-------              *  IND       ref   
new node is :                [000667] ----G-------              *  PUTARG_REG ref    REG rcx

lowering call (after):
N002 (  2, 10) [000480] H-----------       t480 =    CNS_INT(h) long   0xBE2A3228 "   R = clear the running flag to stop the consumer thread"
                                                  /--*  t480   long   
N003 (  4, 12) [000481] #---G-------       t481 = *  IND       ref   
                                                  /--*  t481   ref    
               [000667] ----G-------       t667 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t667   ref    arg0 in rcx
N004 ( 18, 18) [000263] --CXG-------              *  CALL      void   System.Console.WriteLine


Local V40 should not be enregistered because: written in a block op
lowering call (before):
N002 (  3,  3) [000273] ------------       t273 =    LCL_VAR_ADDR long   V40 tmp22        
                                                  /--*  t273   long   arg0 in rcx
N003 ( 17,  9) [000271] S-CXG-------              *  CALL      void   System.Console.ReadKey

objp:
======

args:
======
lowering arg : N001 (  0,  0) [000483] ----------L-              *  ARGPLACE  long  

late:
======
lowering arg : N002 (  3,  3) [000273] ------------              *  LCL_VAR_ADDR long   V40 tmp22        
new node is :                [000668] ------------              *  PUTARG_REG long   REG rcx

lowering call (after):
N002 (  3,  3) [000273] ------------       t273 =    LCL_VAR_ADDR long   V40 tmp22        
                                                  /--*  t273   long   
               [000668] ------------       t668 = *  PUTARG_REG long   REG rcx
                                                  /--*  t668   long   arg0 in rcx
N003 ( 17,  9) [000271] S-CXG-------              *  CALL      void   System.Console.ReadKey

lowering store lcl var/field (before):
N001 (  3,  2) [000274] ------------       t274 =    LCL_VAR   struct<System.ConsoleKeyInfo, 12>(AX) V40 tmp22        
                                                  /--*  t274   struct 
N003 (  7,  5) [000277] DA--G-------              *  STORE_LCL_VAR struct<System.ConsoleKeyInfo, 12>(AX) V12 loc10        


Local V12 should not be enregistered because: written in a block op

Local V40 should not be enregistered because: written in a block op

Local V12 should not be enregistered because: written in a block op
lowering call (before):
N002 (  3,  3) [000279] ------------       t279 =    LCL_VAR_ADDR byref  V12 loc10        
                                                  /--*  t279   byref  this in rcx
N003 ( 17, 10) [000280] --CXG-------       t280 = *  CALL      int    System.ConsoleKeyInfo.get_Key

objp:
======
lowering arg : N001 (  0,  0) [000484] ----------L-              *  ARGPLACE  byref 

args:
======

late:
======
lowering arg : N002 (  3,  3) [000279] ------------              *  LCL_VAR_ADDR byref  V12 loc10        
new node is :                [000670] ------------              *  PUTARG_REG byref  REG rcx

lowering call (after):
N002 (  3,  3) [000279] ------------       t279 =    LCL_VAR_ADDR byref  V12 loc10        
                                                  /--*  t279   byref  
               [000670] ------------       t670 = *  PUTARG_REG byref  REG rcx
                                                  /--*  t670   byref  this in rcx
N003 ( 17, 10) [000280] --CXG-------       t280 = *  CALL      int    System.ConsoleKeyInfo.get_Key

lowering store lcl var/field (before):
N002 (  3,  3) [000279] ------------       t279 =    LCL_VAR_ADDR byref  V12 loc10        
                                                  /--*  t279   byref  
               [000670] ------------       t670 = *  PUTARG_REG byref  REG rcx
                                                  /--*  t670   byref  this in rcx
N003 ( 17, 10) [000280] --CXG-------       t280 = *  CALL      int    System.ConsoleKeyInfo.get_Key
                                                  /--*  t280   int    
N005 ( 21, 13) [000282] DA-XG-------              *  STORE_LCL_VAR int    V41 tmp23        

lowering store lcl var/field (after):
N002 (  3,  3) [000279] ------------       t279 =    LCL_VAR_ADDR byref  V12 loc10        
                                                  /--*  t279   byref  
               [000670] ------------       t670 = *  PUTARG_REG byref  REG rcx
                                                  /--*  t670   byref  this in rcx
N003 ( 17, 10) [000280] --CXG-------       t280 = *  CALL      int    System.ConsoleKeyInfo.get_Key
                                                  /--*  t280   int    
N005 ( 21, 13) [000282] DA-XG-------              *  STORE_LCL_VAR int    V41 tmp23        

lowering store lcl var/field (before):
N001 (  3,  2) [000283] -c----------       t283 =    LCL_VAR   int    V41 tmp23        
N002 (  1,  1) [000284] -c----------       t284 =    CNS_INT   int    71
                                                  /--*  t283   int    
                                                  +--*  t284   int    
N003 (  8,  4) [000285] ------------       t285 = *  EQ        int   
                                                  /--*  t285   int    
N005 ( 12,  7) [000287] DA----------              *  STORE_LCL_VAR int    V13 loc11        

lowering store lcl var/field (after):
N001 (  3,  2) [000283] -c----------       t283 =    LCL_VAR   int    V41 tmp23        
N002 (  1,  1) [000284] -c----------       t284 =    CNS_INT   int    71
                                                  /--*  t283   int    
                                                  +--*  t284   int    
N003 (  8,  4) [000285] ------------       t285 = *  EQ        int   
                                                  /--*  t285   int    
N005 ( 12,  7) [000287] DA----------              *  STORE_LCL_VAR int    V13 loc11        

lowering call (before):
N001 ( 14,  5) [000355] --CXG-------       t355 =    CALL      int    System.GC.get_MaxGeneration

objp:
======

args:
======

late:
======
lowering call (after):
N001 ( 14,  5) [000355] --CXG-------       t355 =    CALL      int    System.GC.get_MaxGeneration

lowering store lcl var/field (before):
N001 ( 14,  5) [000355] --CXG-------       t355 =    CALL      int    System.GC.get_MaxGeneration
                                                  /--*  t355   int    
N003 ( 18,  8) [000357] DA-XG-------              *  STORE_LCL_VAR int    V45 tmp27        

lowering store lcl var/field (after):
N001 ( 14,  5) [000355] --CXG-------       t355 =    CALL      int    System.GC.get_MaxGeneration
                                                  /--*  t355   int    
N003 ( 18,  8) [000357] DA-XG-------              *  STORE_LCL_VAR int    V45 tmp27        

lowering call (before):
N002 (  3,  2) [000358] ------------       t358 =    LCL_VAR   int    V45 tmp27        
                                                  /--*  t358   int    arg0 in rcx
N003 ( 17,  8) [000359] --CXG-------              *  CALL      void   System.GC.Collect

objp:
======

args:
======
lowering arg : N001 (  0,  0) [000485] ----------L-              *  ARGPLACE  int   

late:
======
lowering arg : N002 (  3,  2) [000358] ------------              *  LCL_VAR   int    V45 tmp27        
new node is :                [000671] ------------              *  PUTARG_REG int    REG rcx

lowering call (after):
N002 (  3,  2) [000358] ------------       t358 =    LCL_VAR   int    V45 tmp27        
                                                  /--*  t358   int    
               [000671] ------------       t671 = *  PUTARG_REG int    REG rcx
                                                  /--*  t671   int    arg0 in rcx
N003 ( 17,  8) [000359] --CXG-------              *  CALL      void   System.GC.Collect


Local V12 should not be enregistered because: written in a block op
lowering call (before):
N002 (  3,  3) [000293] ------------       t293 =    LCL_VAR_ADDR byref  V12 loc10        
                                                  /--*  t293   byref  this in rcx
N003 ( 17, 10) [000294] --CXG-------       t294 = *  CALL      int    System.ConsoleKeyInfo.get_Key

objp:
======
lowering arg : N001 (  0,  0) [000486] ----------L-              *  ARGPLACE  byref 

args:
======

late:
======
lowering arg : N002 (  3,  3) [000293] ------------              *  LCL_VAR_ADDR byref  V12 loc10        
new node is :                [000672] ------------              *  PUTARG_REG byref  REG rcx

lowering call (after):
N002 (  3,  3) [000293] ------------       t293 =    LCL_VAR_ADDR byref  V12 loc10        
                                                  /--*  t293   byref  
               [000672] ------------       t672 = *  PUTARG_REG byref  REG rcx
                                                  /--*  t672   byref  this in rcx
N003 ( 17, 10) [000294] --CXG-------       t294 = *  CALL      int    System.ConsoleKeyInfo.get_Key

lowering store lcl var/field (before):
N002 (  3,  3) [000293] ------------       t293 =    LCL_VAR_ADDR byref  V12 loc10        
                                                  /--*  t293   byref  
               [000672] ------------       t672 = *  PUTARG_REG byref  REG rcx
                                                  /--*  t672   byref  this in rcx
N003 ( 17, 10) [000294] --CXG-------       t294 = *  CALL      int    System.ConsoleKeyInfo.get_Key
                                                  /--*  t294   int    
N005 ( 21, 13) [000296] DA-XG-------              *  STORE_LCL_VAR int    V42 tmp24        

lowering store lcl var/field (after):
N002 (  3,  3) [000293] ------------       t293 =    LCL_VAR_ADDR byref  V12 loc10        
                                                  /--*  t293   byref  
               [000672] ------------       t672 = *  PUTARG_REG byref  REG rcx
                                                  /--*  t672   byref  this in rcx
N003 ( 17, 10) [000294] --CXG-------       t294 = *  CALL      int    System.ConsoleKeyInfo.get_Key
                                                  /--*  t294   int    
N005 ( 21, 13) [000296] DA-XG-------              *  STORE_LCL_VAR int    V42 tmp24        

lowering store lcl var/field (before):
N001 (  3,  2) [000297] -c----------       t297 =    LCL_VAR   int    V42 tmp24        
N002 (  1,  1) [000298] -c----------       t298 =    CNS_INT   int    72
                                                  /--*  t297   int    
                                                  +--*  t298   int    
N003 (  8,  4) [000299] ------------       t299 = *  EQ        int   
                                                  /--*  t299   int    
N005 ( 12,  7) [000301] DA----------              *  STORE_LCL_VAR int    V14 loc12        

lowering store lcl var/field (after):
N001 (  3,  2) [000297] -c----------       t297 =    LCL_VAR   int    V42 tmp24        
N002 (  1,  1) [000298] -c----------       t298 =    CNS_INT   int    72
                                                  /--*  t297   int    
                                                  +--*  t298   int    
N003 (  8,  4) [000299] ------------       t299 = *  EQ        int   
                                                  /--*  t299   int    
N005 ( 12,  7) [000301] DA----------              *  STORE_LCL_VAR int    V14 loc12        

lowering call (before):
N001 ( 14,  5) [000350] --CXG-------                 CALL      void   System.Diagnostics.Debugger.Break

objp:
======

args:
======

late:
======
lowering call (after):
N001 ( 14,  5) [000350] --CXG-------                 CALL      void   System.Diagnostics.Debugger.Break


Local V12 should not be enregistered because: written in a block op
lowering call (before):
N002 (  3,  3) [000307] ------------       t307 =    LCL_VAR_ADDR byref  V12 loc10        
                                                  /--*  t307   byref  this in rcx
N003 ( 17, 10) [000308] --CXG-------       t308 = *  CALL      int    System.ConsoleKeyInfo.get_Key

objp:
======
lowering arg : N001 (  0,  0) [000487] ----------L-              *  ARGPLACE  byref 

args:
======

late:
======
lowering arg : N002 (  3,  3) [000307] ------------              *  LCL_VAR_ADDR byref  V12 loc10        
new node is :                [000673] ------------              *  PUTARG_REG byref  REG rcx

lowering call (after):
N002 (  3,  3) [000307] ------------       t307 =    LCL_VAR_ADDR byref  V12 loc10        
                                                  /--*  t307   byref  
               [000673] ------------       t673 = *  PUTARG_REG byref  REG rcx
                                                  /--*  t673   byref  this in rcx
N003 ( 17, 10) [000308] --CXG-------       t308 = *  CALL      int    System.ConsoleKeyInfo.get_Key

lowering store lcl var/field (before):
N002 (  3,  3) [000307] ------------       t307 =    LCL_VAR_ADDR byref  V12 loc10        
                                                  /--*  t307   byref  
               [000673] ------------       t673 = *  PUTARG_REG byref  REG rcx
                                                  /--*  t673   byref  this in rcx
N003 ( 17, 10) [000308] --CXG-------       t308 = *  CALL      int    System.ConsoleKeyInfo.get_Key
                                                  /--*  t308   int    
N005 ( 21, 13) [000310] DA-XG-------              *  STORE_LCL_VAR int    V43 tmp25        

lowering store lcl var/field (after):
N002 (  3,  3) [000307] ------------       t307 =    LCL_VAR_ADDR byref  V12 loc10        
                                                  /--*  t307   byref  
               [000673] ------------       t673 = *  PUTARG_REG byref  REG rcx
                                                  /--*  t673   byref  this in rcx
N003 ( 17, 10) [000308] --CXG-------       t308 = *  CALL      int    System.ConsoleKeyInfo.get_Key
                                                  /--*  t308   int    
N005 ( 21, 13) [000310] DA-XG-------              *  STORE_LCL_VAR int    V43 tmp25        

lowering store lcl var/field (before):
N001 (  3,  2) [000311] -c----------       t311 =    LCL_VAR   int    V43 tmp25        
N002 (  1,  1) [000312] -c----------       t312 =    CNS_INT   int    82
                                                  /--*  t311   int    
                                                  +--*  t312   int    
N003 (  8,  4) [000313] ------------       t313 = *  EQ        int   
                                                  /--*  t313   int    
N005 ( 12,  7) [000315] DA----------              *  STORE_LCL_VAR int    V15 loc13        

lowering store lcl var/field (after):
N001 (  3,  2) [000311] -c----------       t311 =    LCL_VAR   int    V43 tmp25        
N002 (  1,  1) [000312] -c----------       t312 =    CNS_INT   int    82
                                                  /--*  t311   int    
                                                  +--*  t312   int    
N003 (  8,  4) [000313] ------------       t313 = *  EQ        int   
                                                  /--*  t313   int    
N005 ( 12,  7) [000315] DA----------              *  STORE_LCL_VAR int    V15 loc13        

Addressing mode:
  Base
    N001 (  3,  2) [000343] ------------              *  LCL_VAR   ref    V00 this         
  + 16
Removing unused node:
  N002 (  1,  1) [000488] -c----------              *  CNS_INT   long   16 field offset Fseq[_running]
New addressing mode node:
  N003 (  4,  3) [000489] ------------              *  LEA(b+16) byref 

Lower of StoreInd didn't mark the node as self contained for reason: oper is not supported
N001 (  3,  2) [000343] ------------       t343 =    LCL_VAR   ref    V00 this         
                                                  /--*  t343   ref    
N003 (  4,  3) [000489] ------------       t489 = *  LEA(b+16) byref 
N005 (  1,  1) [000344] ------------       t344 =    CNS_INT   int    0
                                                  /--*  t489   byref  
                                                  +--*  t344   int    
               [000605] -A-XG-------              *  STOREIND  bool  

Local V12 should not be enregistered because: written in a block op
lowering call (before):
N002 (  3,  3) [000321] ------------       t321 =    LCL_VAR_ADDR byref  V12 loc10        
                                                  /--*  t321   byref  this in rcx
N003 ( 17, 10) [000322] --CXG-------       t322 = *  CALL      int    System.ConsoleKeyInfo.get_Key

objp:
======
lowering arg : N001 (  0,  0) [000490] ----------L-              *  ARGPLACE  byref 

args:
======

late:
======
lowering arg : N002 (  3,  3) [000321] ------------              *  LCL_VAR_ADDR byref  V12 loc10        
new node is :                [000674] ------------              *  PUTARG_REG byref  REG rcx

lowering call (after):
N002 (  3,  3) [000321] ------------       t321 =    LCL_VAR_ADDR byref  V12 loc10        
                                                  /--*  t321   byref  
               [000674] ------------       t674 = *  PUTARG_REG byref  REG rcx
                                                  /--*  t674   byref  this in rcx
N003 ( 17, 10) [000322] --CXG-------       t322 = *  CALL      int    System.ConsoleKeyInfo.get_Key

lowering store lcl var/field (before):
N002 (  3,  3) [000321] ------------       t321 =    LCL_VAR_ADDR byref  V12 loc10        
                                                  /--*  t321   byref  
               [000674] ------------       t674 = *  PUTARG_REG byref  REG rcx
                                                  /--*  t674   byref  this in rcx
N003 ( 17, 10) [000322] --CXG-------       t322 = *  CALL      int    System.ConsoleKeyInfo.get_Key
                                                  /--*  t322   int    
N005 ( 21, 13) [000324] DA-XG-------              *  STORE_LCL_VAR int    V44 tmp26        

lowering store lcl var/field (after):
N002 (  3,  3) [000321] ------------       t321 =    LCL_VAR_ADDR byref  V12 loc10        
                                                  /--*  t321   byref  
               [000674] ------------       t674 = *  PUTARG_REG byref  REG rcx
                                                  /--*  t674   byref  this in rcx
N003 ( 17, 10) [000322] --CXG-------       t322 = *  CALL      int    System.ConsoleKeyInfo.get_Key
                                                  /--*  t322   int    
N005 ( 21, 13) [000324] DA-XG-------              *  STORE_LCL_VAR int    V44 tmp26        

lowering store lcl var/field (before):
N001 (  3,  2) [000325] -c----------       t325 =    LCL_VAR   int    V44 tmp26        
N002 (  1,  1) [000326] -c----------       t326 =    CNS_INT   int    81
                                                  /--*  t325   int    
                                                  +--*  t326   int    
N003 (  8,  4) [000327] ------------       t327 = *  EQ        int   
                                                  /--*  t327   int    
N005 ( 12,  7) [000329] DA----------              *  STORE_LCL_VAR int    V16 loc14        

lowering store lcl var/field (after):
N001 (  3,  2) [000325] -c----------       t325 =    LCL_VAR   int    V44 tmp26        
N002 (  1,  1) [000326] -c----------       t326 =    CNS_INT   int    81
                                                  /--*  t325   int    
                                                  +--*  t326   int    
N003 (  8,  4) [000327] ------------       t327 = *  EQ        int   
                                                  /--*  t327   int    
N005 ( 12,  7) [000329] DA----------              *  STORE_LCL_VAR int    V16 loc14        

lowering store lcl var/field (before):
N001 (  1,  1) [000266] ------------       t266 =    CNS_INT   int    1
                                                  /--*  t266   int    
N003 (  5,  4) [000268] DA----------              *  STORE_LCL_VAR int    V17 loc15        

lowering store lcl var/field (after):
N001 (  1,  1) [000266] -c----------       t266 =    CNS_INT   int    1
                                                  /--*  t266   int    
N003 (  5,  4) [000268] DA----------              *  STORE_LCL_VAR int    V17 loc15        

Addressing mode:
  Base
    N001 (  3,  2) [000337] ------------              *  LCL_VAR   ref    V00 this         
  + 16
Removing unused node:
  N002 (  1,  1) [000492] -c----------              *  CNS_INT   long   16 field offset Fseq[_running]
New addressing mode node:
  N003 (  4,  3) [000493] ------------              *  LEA(b+16) byref 

Lower of StoreInd didn't mark the node as self contained for reason: oper is not supported
N001 (  3,  2) [000337] ------------       t337 =    LCL_VAR   ref    V00 this         
                                                  /--*  t337   ref    
N003 (  4,  3) [000493] ------------       t493 = *  LEA(b+16) byref 
N005 (  1,  1) [000338] ------------       t338 =    CNS_INT   int    0
                                                  /--*  t493   byref  
                                                  +--*  t338   int    
               [000617] -A-XG-------              *  STOREIND  bool  
lowering GT_RETURN
N001 (  0,  0) [000341] ------------              *  RETURN    void  
============lowering call (before):
N002 (  3,  2) [000168] ------------       t168 =    LCL_VAR   ref    V05 loc3         
                                                  /--*  t168   ref    arg0 in rcx
N003 ( 17,  8) [000169] --CXG-------              *  CALL      void   System.Threading.Monitor.Exit

objp:
======

args:
======
lowering arg : N001 (  0,  0) [000442] ----------L-              *  ARGPLACE  ref   

late:
======
lowering arg : N002 (  3,  2) [000168] ------------              *  LCL_VAR   ref    V05 loc3         
new node is :                [000675] ------------              *  PUTARG_REG ref    REG rcx

lowering call (after):
N002 (  3,  2) [000168] ------------       t168 =    LCL_VAR   ref    V05 loc3         
                                                  /--*  t168   ref    
               [000675] ------------       t675 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t675   ref    arg0 in rcx
N003 ( 17,  8) [000169] --CXG-------              *  CALL      void   System.Threading.Monitor.Exit

lowering call (before):
N002 (  3,  2) [000368] ------------       t368 =    LCL_VAR   ref    V08 loc6         
                                                  /--*  t368   ref    arg0 in rcx
N003 ( 17,  8) [000369] --CXG-------              *  CALL      void   System.Threading.Monitor.Exit

objp:
======

args:
======
lowering arg : N001 (  0,  0) [000462] ----------L-              *  ARGPLACE  ref   

late:
======
lowering arg : N002 (  3,  2) [000368] ------------              *  LCL_VAR   ref    V08 loc6         
new node is :                [000676] ------------              *  PUTARG_REG ref    REG rcx

lowering call (after):
N002 (  3,  2) [000368] ------------       t368 =    LCL_VAR   ref    V08 loc6         
                                                  /--*  t368   ref    
               [000676] ------------       t676 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t676   ref    arg0 in rcx
N003 ( 17,  8) [000369] --CXG-------              *  CALL      void   System.Threading.Monitor.Exit

Lower has completed modifying nodes.

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [???..???)                                     i internal hascall LIR 
BB02 [0038]  1       BB01                  1       [???..???)-> BB04 ( cond )                     internal LIR 
BB03 [0039]  1       BB02                  0.50    [???..???)                                     internal LIR 
BB04 [0037]  2       BB02,BB03             1       [???..???)                                     i internal hascall LIR 
BB05 [0001]  1       BB04                  1       [000..078)-> BB14 (always)                     i hascall gcsafe newobj LIR 
BB06 [0002]  1       BB14                  1       [078..083)                                     i bwd bwd-target LIR 
BB07 [0003]  1  0    BB06                  1       [083..0D5)-> BB08 (always) T0      try { }     keep i try hascall gcsafe newobj bwd LIR 
BB08 [0031]  1       BB07                  1       [???..???)-> BB10 (callf )                     i internal LIR 
BB09 [0032]  1       BB12                  1       [???..???)-> BB13 (ALWAYS)                     i internal LIR KEEP 
BB13 [0007]  1       BB09                  1       [0E1..0E6)                                     i bwd LIR 
BB14 [0008]  2       BB05,BB13             1       [0E6..0F1)-> BB06 ( cond )                     i bwd LIR 
BB15 [0009]  1       BB14                  1       [0F1..110)-> BB28 (always)                     i hascall gcsafe LIR 
BB16 [0010]  1       BB28                  1       [110..11C)                                     i bwd bwd-target LIR 
BB17 [0011]  1  1    BB16                  1       [11C..145)-> BB19 ( cond ) T1      try {       keep i try hascall gcsafe bwd LIR 
BB18 [0012]  1  1    BB17                  1       [145..148)-> BB20 (always) T1                  i bwd LIR 
BB19 [0013]  1  1    BB17                  1       [148..14B)-> BB22 (always) T1      }           i bwd LIR 
BB20 [0035]  1       BB18                  1       [???..???)-> BB24 (callf )                     i internal LIR 
BB21 [0036]  1       BB26                  1       [???..???)-> BB29 (ALWAYS)                     i internal LIR KEEP 
BB22 [0033]  1       BB19                  1       [???..???)-> BB24 (callf )                     i internal LIR 
BB23 [0034]  1       BB26                  1       [???..???)-> BB27 (ALWAYS)                     i internal LIR KEEP 
BB27 [0017]  1       BB23                  1       [158..161)                                     i hascall gcsafe bwd LIR 
BB28 [0018]  2       BB15,BB27             1       [161..166)-> BB16 (always)                     i bwd LIR 
BB29 [0019]  1       BB21                  1       [166..1B1)-> BB39 (always)                     i hascall gcsafe LIR 
BB30 [0020]  1       BB39                  1       [1B1..1CA)-> BB32 ( cond )                     i hascall gcsafe bwd bwd-target LIR 
BB31 [0021]  1       BB30                  1       [1CA..1D9)-> BB38 (always)                     i hascall gcsafe bwd LIR 
BB32 [0022]  1       BB30                  1       [1D9..1EA)-> BB34 ( cond )                     i hascall gcsafe bwd LIR 
BB33 [0023]  1       BB32                  1       [1EA..1F4)-> BB38 (always)                     i hascall gcsafe bwd LIR 
BB34 [0024]  1       BB32                  1       [1F4..205)-> BB36 ( cond )                     i hascall gcsafe bwd LIR 
BB35 [0025]  1       BB34                  1       [205..210)-> BB38 (always)                     i bwd LIR 
BB36 [0026]  1       BB34                  1       [210..221)-> BB38 ( cond )                     i hascall gcsafe bwd LIR 
BB37 [0027]  1       BB36                  1       [221..224)-> BB40 (always)                     i bwd LIR 
BB38 [0028]  4       BB31,BB33,BB35,BB36   1       [224..225)                                     i bwd LIR 
BB39 [0029]  2       BB29,BB38             1       [225..22A)-> BB30 (always)                     i bwd LIR 
BB40 [0030]  1       BB37                  1       [22A..232)        (return)                     i LIR 
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ funclets follow
BB10 [0004]  2     0 BB08                  1       [0D5..0D9)-> BB12 ( cond )    H0 F finally {   keep i flet bwd LIR 
BB11 [0005]  1     0 BB10                  1       [0D9..0E0)                    H0               i hascall bwd LIR 
BB12 [0006]  2     0 BB10,BB11             1       [0E0..0E1)        (finret)    H0   }           i bwd LIR 
BB24 [0014]  3     1 BB20,BB22             1       [14B..14F)-> BB26 ( cond )    H1 F finally {   keep i flet bwd LIR 
BB25 [0015]  1     1 BB24                  1       [14F..157)                    H1               i hascall bwd LIR 
BB26 [0016]  2     1 BB24,BB25             1       [157..158)        (finret)    H1   }           i bwd LIR 
-----------------------------------------------------------------------------------------------------------------------------------------

------------ BB01 [???..???), preds={} succs={BB02}
N001 (  0,  0) [000000] ------------                 NOP       void  

------------ BB02 [???..???) -> BB04 (cond), preds={BB01} succs={BB03,BB04}
N001 (  2, 10) [000371] Hc----------       t371 =    CNS_INT(h) long   0x7ffdb6f1d838 global ptr
                                                  /--*  t371   long   
N002 (  4, 12) [000372] nc----------       t372 = *  IND       int   
N003 (  1,  1) [000373] -c----------       t373 =    CNS_INT   int    0
                                                  /--*  t372   int    
                                                  +--*  t373   int    
N004 (  6, 14) [000374] J------N----              *  EQ        void  
N005 (  8, 16) [000494] ------------              *  JTRUE     void  

------------ BB03 [???..???), preds={BB02} succs={BB04}
N001 ( 14,  5) [000375] --C-G-?-----                 CALL help void   HELPER.CORINFO_HELP_DBG_IS_JUST_MY_CODE

------------ BB04 [???..???), preds={BB02,BB03} succs={BB05}

------------ BB05 [000..078) -> BB14 (always), preds={BB04} succs={BB14}
               [000495] ------------                 IL_OFFSET void   IL offset: 0x0
N001 (  1,  1) [000001] ------------                 NO_OP     void  
               [000496] ------------                 IL_OFFSET void   IL offset: 0x1
N001 ( 14,  5) [000002] --CXG-------         t2 =    CALL      long   System.DateTime.get_Now
                                                  /--*  t2     long   
N003 ( 18,  8) [000005] DA-XG-------              *  STORE_LCL_VAR struct<System.DateTime, 8> V19 tmp1         
               [000497] ------------                 IL_OFFSET void   IL offset: 0x6
N001 (  3,  2) [000006] ------------         t6 =    LCL_VAR   struct<System.DateTime, 8> V19 tmp1         
                                                  /--*  t6     struct 
N003 (  7,  5) [000009] DA--G-------              *  STORE_LCL_VAR struct<System.DateTime, 8>(AX) V03 loc1         
               [000498] ------------                 IL_OFFSET void   IL offset: 0x7
N002 (  3,  3) [000011] ------------        t11 =    LCL_VAR_ADDR byref  V03 loc1         
                                                  /--*  t11    byref  
               [000627] ------------       t627 = *  PUTARG_REG byref  REG rcx
                                                  /--*  t627   byref  this in rcx
N003 ( 17, 10) [000012] --CXG-------        t12 = *  CALL      ref    System.DateTime.ToString
                                                  /--*  t12    ref    
N005 ( 21, 13) [000014] DA-XG-------              *  STORE_LCL_VAR ref    V20 tmp2         
               [000499] ------------                 IL_OFFSET void   IL offset: 0xe
N003 (  2, 10) [000380] H-----------       t380 =    CNS_INT(h) long   0xBE2A31F0 "	 Created list"
                                                  /--*  t380   long   
N004 (  4, 12) [000381] #---G-------       t381 = *  IND       ref   
                                                  /--*  t381   ref    
               [000628] ----G-------       t628 = *  PUTARG_REG ref    REG rdx
N005 (  3,  2) [000015] ------------        t15 =    LCL_VAR   ref    V20 tmp2         
                                                  /--*  t15    ref    
               [000629] ------------       t629 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t628   ref    arg1 in rdx
                                                  +--*  t629   ref    arg0 in rcx
N006 ( 21, 21) [000017] --CXG-------        t17 = *  CALL      ref    System.String.Concat
                                                  /--*  t17    ref    
N008 ( 25, 24) [000019] DA-XG-------              *  STORE_LCL_VAR ref    V21 tmp3         
               [000500] ------------                 IL_OFFSET void   IL offset: 0x18
N002 (  3,  2) [000020] ------------        t20 =    LCL_VAR   ref    V21 tmp3         
                                                  /--*  t20    ref    
               [000630] ------------       t630 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t630   ref    arg0 in rcx
N003 ( 17,  8) [000021] --CXG-------              *  CALL      void   System.Console.WriteLine
               [000501] ------------                 IL_OFFSET void   IL offset: 0x1d
N001 (  1,  1) [000022] ------------                 NO_OP     void  
               [000502] ------------                 IL_OFFSET void   IL offset: 0x1e
N002 (  2, 10) [000024] H-----------        t24 =    CNS_INT(h) long   0x7ffdb7022b70 method
                                                  /--*  t24    long   
               [000631] ------------       t631 = *  PUTARG_REG long   REG rcx
                                                  /--*  t631   long   arg0 in rcx
N003 ( 16, 16) [000025] --C---------        t25 = *  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
                                                  /--*  t25    ref    
N005 ( 20, 19) [000027] DA----------              *  STORE_LCL_VAR ref    V22 tmp4         
N002 (  3,  2) [000028] ------------        t28 =    LCL_VAR   ref    V22 tmp4         
                                                  /--*  t28    ref    
               [000632] ------------       t632 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t632   ref    this in rcx
N003 ( 17,  9) [000029] --CXG-------              *  CALL      void   FalseLeakRepro.List..ctor
               [000503] ------------                 IL_OFFSET void   IL offset: 0x24
N001 (  3,  2) [000023] ------------        t23 =    LCL_VAR   ref    V00 this         
                                                  /--*  t23    ref    
N003 (  4,  3) [000388] ------------       t388 = *  LEA(b+8)  byref 
N005 (  3,  2) [000030] ------------        t30 =    LCL_VAR   ref    V22 tmp4         
                                                  /--*  t388   byref  
                                                  +--*  t30    ref    
               [000504] -A-XG-------              *  STOREIND  ref   
               [000505] ------------                 IL_OFFSET void   IL offset: 0x29
N002 (  2, 10) [000036] H-----------        t36 =    CNS_INT(h) long   0x7ffdb6c458b8 token
                                                  /--*  t36    long   
               [000633] ------------       t633 = *  PUTARG_REG long   REG rcx
                                                  /--*  t633   long   arg0 in rcx
N003 ( 16, 16) [000037] --C---------        t37 = *  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
                                                  /--*  t37    ref    
N005 ( 20, 19) [000039] DA----------              *  STORE_LCL_VAR ref    V23 tmp5         
N001 (  3,  2) [000033] ------------        t33 =    LCL_VAR   ref    V00 this         
                                                  /--*  t33    ref    
N003 (  4,  3) [000393] -c----------       t393 = *  LEA(b+8)  byref 
                                                  /--*  t393   byref  
N004 (  6,  5) [000034] ---XG-------        t34 = *  IND       ref   
                                                  /--*  t34    ref    
N006 (  7,  6) [000391] -c----------       t391 = *  LEA(b+8)  byref 
                                                  /--*  t391   byref  
N007 (  9,  8) [000035] ---XG-------        t35 = *  IND       ref   
                                                  /--*  t35    ref    
N009 ( 13, 11) [000043] DA-XG-------              *  STORE_LCL_VAR ref    V24 tmp6         
N002 (  3,  2) [000040] ------------        t40 =    LCL_VAR   ref    V23 tmp5         
                                                  /--*  t40    ref    
               [000634] ------------       t634 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t634   ref    this in rcx
N003 ( 17,  9) [000041] --CXG-------              *  CALL      void   System.Object..ctor
               [000506] ------------                 IL_OFFSET void   IL offset: 0x39
N001 (  3,  2) [000044] ------------        t44 =    LCL_VAR   ref    V24 tmp6         
                                                  /--*  t44    ref    
N003 (  4,  3) [000396] ------------       t396 = *  LEA(b+16) byref 
N005 (  3,  2) [000045] ------------        t45 =    LCL_VAR   ref    V23 tmp5         
                                                  /--*  t396   byref  
                                                  +--*  t45    ref    
               [000507] -A-XG-------              *  STOREIND  ref   
               [000508] ------------                 IL_OFFSET void   IL offset: 0x3e
N002 (  2, 10) [000050] H-----------        t50 =    CNS_INT(h) long   0x7ffdb7026348 token
                                                  /--*  t50    long   
               [000635] ------------       t635 = *  PUTARG_REG long   REG rcx
                                                  /--*  t635   long   arg0 in rcx
N003 ( 16, 16) [000051] --C---------        t51 = *  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
                                                  /--*  t51    ref    
N005 ( 20, 19) [000053] DA----------              *  STORE_LCL_VAR ref    V25 tmp7         
N004 (  3,  2) [000054] ------------        t54 =    LCL_VAR   ref    V25 tmp7         
                                                  /--*  t54    ref    
               [000636] ------------       t636 = *  PUTARG_REG ref    REG rcx
N005 (  3,  2) [000048] ------------        t48 =    LCL_VAR   ref    V00 this         
                                                  /--*  t48    ref    
               [000637] ------------       t637 = *  PUTARG_REG ref    REG rdx
N006 (  2, 10) [000049] H-----------        t49 =    CNS_INT(h) long   0x7ffdb6c613f8 ftn
                                                  /--*  t49    long   
               [000638] ------------       t638 = *  PUTARG_REG long   REG r8
                                                  /--*  t636   ref    this in rcx
                                                  +--*  t637   ref    arg1 in rdx
                                                  +--*  t638   long   arg2 in r8
N007 ( 22, 23) [000055] --CXG-------              *  CALL      void   System.MulticastDelegate.CtorClosed
               [000509] ------------                 IL_OFFSET void   IL offset: 0x4a
N002 (  2, 10) [000057] H-----------        t57 =    CNS_INT(h) long   0x7ffdb6dc4e80 token
                                                  /--*  t57    long   
               [000639] ------------       t639 = *  PUTARG_REG long   REG rcx
                                                  /--*  t639   long   arg0 in rcx
N003 ( 16, 16) [000058] --C---------        t58 = *  CALL help ref    HELPER.CORINFO_HELP_NEWFAST
                                                  /--*  t58    ref    
N005 ( 20, 19) [000060] DA----------              *  STORE_LCL_VAR ref    V26 tmp8         
N003 (  3,  2) [000061] ------------        t61 =    LCL_VAR   ref    V26 tmp8         
                                                  /--*  t61    ref    
               [000640] ------------       t640 = *  PUTARG_REG ref    REG rcx
N004 (  3,  2) [000056] ------------        t56 =    LCL_VAR   ref    V25 tmp7         
                                                  /--*  t56    ref    
               [000641] ------------       t641 = *  PUTARG_REG ref    REG rdx
                                                  /--*  t640   ref    this in rcx
                                                  +--*  t641   ref    arg1 in rdx
N005 ( 20, 12) [000062] --CXG-------              *  CALL      void   System.Threading.Thread..ctor
               [000510] ------------                 IL_OFFSET void   IL offset: 0x4f
N001 (  3,  2) [000063] ------------        t63 =    LCL_VAR   ref    V26 tmp8         
                                                  /--*  t63    ref    
N003 (  7,  5) [000065] DA----------              *  STORE_LCL_VAR ref    V02 loc0         
               [000511] ------------                 IL_OFFSET void   IL offset: 0x50
N002 (  3,  2) [000066] ------------        t66 =    LCL_VAR   ref    V02 loc0         
                                                  /--*  t66    ref    
               [000642] ------------       t642 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t642   ref    this in rcx
N003 ( 17,  9) [000067] --CXG-------              *  CALL nullcheck void   System.Threading.Thread.Start
               [000512] ------------                 IL_OFFSET void   IL offset: 0x56
N001 (  1,  1) [000068] ------------                 NO_OP     void  
               [000513] ------------                 IL_OFFSET void   IL offset: 0x57
N001 ( 14,  5) [000069] --CXG-------        t69 =    CALL      long   System.DateTime.get_Now
                                                  /--*  t69    long   
N003 ( 18,  8) [000072] DA-XG-------              *  STORE_LCL_VAR struct<System.DateTime, 8> V27 tmp9         
               [000514] ------------                 IL_OFFSET void   IL offset: 0x5c
N001 (  3,  2) [000073] ------------        t73 =    LCL_VAR   struct<System.DateTime, 8> V27 tmp9         
                                                  /--*  t73    struct 
N003 (  7,  5) [000076] DA--G-------              *  STORE_LCL_VAR struct<System.DateTime, 8>(AX) V03 loc1         
               [000515] ------------                 IL_OFFSET void   IL offset: 0x5d
N002 (  3,  3) [000078] ------------        t78 =    LCL_VAR_ADDR byref  V03 loc1         
                                                  /--*  t78    byref  
               [000643] ------------       t643 = *  PUTARG_REG byref  REG rcx
                                                  /--*  t643   byref  this in rcx
N003 ( 17, 10) [000079] --CXG-------        t79 = *  CALL      ref    System.DateTime.ToString
                                                  /--*  t79    ref    
N005 ( 21, 13) [000081] DA-XG-------              *  STORE_LCL_VAR ref    V28 tmp10        
               [000516] ------------                 IL_OFFSET void   IL offset: 0x64
N003 (  2, 10) [000406] H-----------       t406 =    CNS_INT(h) long   0xBE2A31F8 "	 Consumer thread started, adding items..."
                                                  /--*  t406   long   
N004 (  4, 12) [000407] #---G-------       t407 = *  IND       ref   
                                                  /--*  t407   ref    
               [000644] ----G-------       t644 = *  PUTARG_REG ref    REG rdx
N005 (  3,  2) [000082] ------------        t82 =    LCL_VAR   ref    V28 tmp10        
                                                  /--*  t82    ref    
               [000645] ------------       t645 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t644   ref    arg1 in rdx
                                                  +--*  t645   ref    arg0 in rcx
N006 ( 21, 21) [000084] --CXG-------        t84 = *  CALL      ref    System.String.Concat
                                                  /--*  t84    ref    
N008 ( 25, 24) [000086] DA-XG-------              *  STORE_LCL_VAR ref    V29 tmp11        
               [000517] ------------                 IL_OFFSET void   IL offset: 0x6e
N002 (  3,  2) [000087] ------------        t87 =    LCL_VAR   ref    V29 tmp11        
                                                  /--*  t87    ref    
               [000646] ------------       t646 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t646   ref    arg0 in rcx
N003 ( 17,  8) [000088] --CXG-------              *  CALL      void   System.Console.WriteLine
               [000518] ------------                 IL_OFFSET void   IL offset: 0x73
N001 (  1,  1) [000089] ------------                 NO_OP     void  
               [000519] ------------                 IL_OFFSET void   IL offset: 0x74
N001 (  1,  1) [000090] ------------        t90 =    CNS_INT   int    0
                                                  /--*  t90    int    
N003 (  5,  4) [000092] DA----------              *  STORE_LCL_VAR int    V04 loc2         
               [000520] ------------                 IL_OFFSET void   IL offset: 0x76
N001 (  0,  0) [000093] ------------                 NOP       void  

------------ BB06 [078..083), preds={BB14} succs={BB07}
               [000521] ------------                 IL_OFFSET void   IL offset: 0x78
N001 (  1,  1) [000103] ------------                 NO_OP     void  
               [000522] ------------                 IL_OFFSET void   IL offset: 0x79
N001 (  3,  2) [000104] ------------       t104 =    LCL_VAR   ref    V00 this         
                                                  /--*  t104   ref    
N003 (  4,  3) [000412] -c----------       t412 = *  LEA(b+8)  byref 
                                                  /--*  t412   byref  
N004 (  6,  5) [000105] ---XG-------       t105 = *  IND       ref   
                                                  /--*  t105   ref    
N006 ( 10,  8) [000107] DA-XG-------              *  STORE_LCL_VAR ref    V05 loc3         
               [000523] ------------                 IL_OFFSET void   IL offset: 0x80
N001 (  1,  1) [000108] ------------       t108 =    CNS_INT   int    0
                                                  /--*  t108   int    
N003 (  5,  4) [000110] DA--G-------              *  STORE_LCL_VAR int   (AX) V06 loc4         

------------ BB07 [083..0D5) -> BB08 (always), preds={BB06} succs={BB08}
               [000524] ------------                 IL_OFFSET void   IL offset: 0x83
N003 (  3,  3) [000113] ------------       t113 =    LCL_VAR_ADDR long   V06 loc4         
                                                  /--*  t113   long   
               [000647] ------------       t647 = *  PUTARG_REG long   REG rdx
N004 (  3,  2) [000111] ------------       t111 =    LCL_VAR   ref    V05 loc3         
                                                  /--*  t111   ref    
               [000648] ------------       t648 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t647   long   arg1 in rdx
                                                  +--*  t648   ref    arg0 in rcx
N005 ( 20, 12) [000114] --CXG-------              *  CALL      void   System.Threading.Monitor.Enter
               [000525] ------------                 IL_OFFSET void   IL offset: 0x8b
N001 (  1,  1) [000115] ------------                 NO_OP     void  
               [000526] ------------                 IL_OFFSET void   IL offset: 0x8c
N001 (  1,  1) [000116] ------------                 NO_OP     void  
               [000527] ------------                 IL_OFFSET void   IL offset: 0x8d
N002 (  2, 10) [000120] H-----------       t120 =    CNS_INT(h) long   0x7ffdb70260c8 method
                                                  /--*  t120   long   
               [000649] ------------       t649 = *  PUTARG_REG long   REG rcx
                                                  /--*  t649   long   arg0 in rcx
N003 ( 16, 16) [000121] --C---------       t121 = *  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
                                                  /--*  t121   ref    
N005 ( 20, 19) [000123] DA----------              *  STORE_LCL_VAR ref    V30 tmp12        
N001 (  3,  2) [000117] ------------       t117 =    LCL_VAR   ref    V00 this         
                                                  /--*  t117   ref    
N003 (  4,  3) [000419] -c----------       t419 = *  LEA(b+8)  byref 
                                                  /--*  t419   byref  
N004 (  6,  5) [000118] ---XG-------       t118 = *  IND       ref   
                                                  /--*  t118   ref    
N006 (  7,  6) [000417] -c----------       t417 = *  LEA(b+8)  byref 
                                                  /--*  t417   byref  
N007 (  9,  8) [000119] ---XG-------       t119 = *  IND       ref   
                                                  /--*  t119   ref    
N009 ( 13, 11) [000127] DA-XG-------              *  STORE_LCL_VAR ref    V31 tmp13        
N002 (  3,  2) [000124] ------------       t124 =    LCL_VAR   ref    V30 tmp12        
                                                  /--*  t124   ref    
               [000650] ------------       t650 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t650   ref    this in rcx
N003 ( 17,  9) [000125] --CXG-------              *  CALL      void   FalseLeakRepro.Node..ctor
               [000528] ------------                 IL_OFFSET void   IL offset: 0x9d
N001 (  3,  2) [000128] ------------       t128 =    LCL_VAR   ref    V31 tmp13        
                                                  /--*  t128   ref    
N003 (  4,  3) [000422] ------------       t422 = *  LEA(b+8)  byref 
N005 (  3,  2) [000129] ------------       t129 =    LCL_VAR   ref    V30 tmp12        
                                                  /--*  t422   byref  
                                                  +--*  t129   ref    
               [000529] -A-XG-------              *  STOREIND  ref   
               [000530] ------------                 IL_OFFSET void   IL offset: 0xa2
N001 (  3,  2) [000132] ------------       t132 =    LCL_VAR   ref    V00 this         
                                                  /--*  t132   ref    
N003 (  4,  3) [000426] -c----------       t426 = *  LEA(b+8)  byref 
                                                  /--*  t426   byref  
N004 (  6,  5) [000133] ---XG-------       t133 = *  IND       ref   
                                                  /--*  t133   ref    
N006 (  7,  6) [000424] ------------       t424 = *  LEA(b+8)  byref 
N008 (  3,  2) [000134] ------------       t134 =    LCL_VAR   ref    V00 this         
                                                  /--*  t134   ref    
N010 (  4,  3) [000432] -c----------       t432 = *  LEA(b+8)  byref 
                                                  /--*  t432   byref  
N011 (  6,  5) [000135] ---XG-------       t135 = *  IND       ref   
                                                  /--*  t135   ref    
N013 (  7,  6) [000430] -c----------       t430 = *  LEA(b+8)  byref 
                                                  /--*  t430   byref  
N014 (  9,  8) [000136] ---XG-------       t136 = *  IND       ref   
                                                  /--*  t136   ref    
N016 ( 10,  9) [000428] -c----------       t428 = *  LEA(b+8)  byref 
                                                  /--*  t428   byref  
N017 ( 12, 11) [000137] ---XG-------       t137 = *  IND       ref   
                                                  /--*  t424   byref  
                                                  +--*  t137   ref    
               [000531] -A-XG-------              *  STOREIND  ref   
               [000532] ------------                 IL_OFFSET void   IL offset: 0xbd
N002 (  2, 10) [000143] H-----------       t143 =    CNS_INT(h) long   0x7ffdb6c458b8 token
                                                  /--*  t143   long   
               [000651] ------------       t651 = *  PUTARG_REG long   REG rcx
                                                  /--*  t651   long   arg0 in rcx
N003 ( 16, 16) [000144] --C---------       t144 = *  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
                                                  /--*  t144   ref    
N005 ( 20, 19) [000146] DA----------              *  STORE_LCL_VAR ref    V32 tmp14        
N001 (  3,  2) [000140] ------------       t140 =    LCL_VAR   ref    V00 this         
                                                  /--*  t140   ref    
N003 (  4,  3) [000437] -c----------       t437 = *  LEA(b+8)  byref 
                                                  /--*  t437   byref  
N004 (  6,  5) [000141] ---XG-------       t141 = *  IND       ref   
                                                  /--*  t141   ref    
N006 (  7,  6) [000435] -c----------       t435 = *  LEA(b+8)  byref 
                                                  /--*  t435   byref  
N007 (  9,  8) [000142] ---XG-------       t142 = *  IND       ref   
                                                  /--*  t142   ref    
N009 ( 13, 11) [000150] DA-XG-------              *  STORE_LCL_VAR ref    V33 tmp15        
N002 (  3,  2) [000147] ------------       t147 =    LCL_VAR   ref    V32 tmp14        
                                                  /--*  t147   ref    
               [000652] ------------       t652 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t652   ref    this in rcx
N003 ( 17,  9) [000148] --CXG-------              *  CALL      void   System.Object..ctor
               [000533] ------------                 IL_OFFSET void   IL offset: 0xcd
N001 (  3,  2) [000151] ------------       t151 =    LCL_VAR   ref    V33 tmp15        
                                                  /--*  t151   ref    
N003 (  4,  3) [000440] ------------       t440 = *  LEA(b+16) byref 
N005 (  3,  2) [000152] ------------       t152 =    LCL_VAR   ref    V32 tmp14        
                                                  /--*  t440   byref  
                                                  +--*  t152   ref    
               [000534] -A-XG-------              *  STOREIND  ref   
               [000535] ------------                 IL_OFFSET void   IL offset: 0xd2
N001 (  1,  1) [000155] ------------                 NO_OP     void  
               [000536] ------------                 IL_OFFSET void   IL offset: 0xd3
N001 (  0,  0) [000156] ------------                 NOP       void  

------------ BB08 [???..???) -> BB10 (callf), preds={BB07} succs={BB10}

------------ BB09 [???..???) -> BB13 (ALWAYS), preds={BB12} succs={BB13}

------------ BB13 [0E1..0E6), preds={BB09} succs={BB14}
               [000537] ------------                 IL_OFFSET void   IL offset: 0xe1
N001 (  1,  1) [000157] ------------                 NO_OP     void  
               [000538] ------------                 IL_OFFSET void   IL offset: 0xe2
N001 (  3,  2) [000158] ------------       t158 =    LCL_VAR   int    V04 loc2         
N002 (  1,  1) [000159] -c----------       t159 =    CNS_INT   int    1
                                                  /--*  t158   int    
                                                  +--*  t159   int    
N003 (  5,  4) [000160] ------------       t160 = *  ADD       int   
                                                  /--*  t160   int    
N005 (  9,  7) [000162] DA----------              *  STORE_LCL_VAR int    V04 loc2         

------------ BB14 [0E6..0F1) -> BB06 (cond), preds={BB05,BB13} succs={BB15,BB06}
               [000539] ------------                 IL_OFFSET void   IL offset: 0xe6
N001 (  3,  2) [000094] -c----------        t94 =    LCL_VAR   int    V04 loc2         
N002 (  1,  1) [000095] -c----------        t95 =    CNS_INT   int    10
                                                  /--*  t94    int    
                                                  +--*  t95    int    
N003 (  8,  4) [000096] ------------        t96 = *  LT        int   
                                                  /--*  t96    int    
N005 ( 12,  7) [000098] DA----------              *  STORE_LCL_VAR int    V07 loc5         
               [000540] ------------                 IL_OFFSET void   IL offset: 0xed
N001 (  3,  2) [000099] -c----------        t99 =    LCL_VAR   int    V07 loc5         
N002 (  1,  1) [000100] -c----------       t100 =    CNS_INT   int    0
                                                  /--*  t99    int    
                                                  +--*  t100   int    
N003 (  5,  4) [000101] J------N----              *  NE        void  
N004 (  7,  6) [000102] ------------              *  JTRUE     void  

------------ BB15 [0F1..110) -> BB28 (always), preds={BB14} succs={BB28}
               [000541] ------------                 IL_OFFSET void   IL offset: 0xf1
N001 ( 14,  5) [000171] --CXG-------       t171 =    CALL      long   System.DateTime.get_Now
                                                  /--*  t171   long   
N003 ( 18,  8) [000174] DA-XG-------              *  STORE_LCL_VAR struct<System.DateTime, 8> V34 tmp16        
               [000542] ------------                 IL_OFFSET void   IL offset: 0xf6
N001 (  3,  2) [000175] ------------       t175 =    LCL_VAR   struct<System.DateTime, 8> V34 tmp16        
                                                  /--*  t175   struct 
N003 (  7,  5) [000178] DA--G-------              *  STORE_LCL_VAR struct<System.DateTime, 8>(AX) V03 loc1         
               [000543] ------------                 IL_OFFSET void   IL offset: 0xf7
N002 (  3,  3) [000180] ------------       t180 =    LCL_VAR_ADDR byref  V03 loc1         
                                                  /--*  t180   byref  
               [000653] ------------       t653 = *  PUTARG_REG byref  REG rcx
                                                  /--*  t653   byref  this in rcx
N003 ( 17, 10) [000181] --CXG-------       t181 = *  CALL      ref    System.DateTime.ToString
                                                  /--*  t181   ref    
N005 ( 21, 13) [000183] DA-XG-------              *  STORE_LCL_VAR ref    V35 tmp17        
               [000544] ------------                 IL_OFFSET void   IL offset: 0xfe
N003 (  2, 10) [000444] H-----------       t444 =    CNS_INT(h) long   0xBE2A3200 "	 Waiting for list processing to complete..."
                                                  /--*  t444   long   
N004 (  4, 12) [000445] #---G-------       t445 = *  IND       ref   
                                                  /--*  t445   ref    
               [000654] ----G-------       t654 = *  PUTARG_REG ref    REG rdx
N005 (  3,  2) [000184] ------------       t184 =    LCL_VAR   ref    V35 tmp17        
                                                  /--*  t184   ref    
               [000655] ------------       t655 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t654   ref    arg1 in rdx
                                                  +--*  t655   ref    arg0 in rcx
N006 ( 21, 21) [000186] --CXG-------       t186 = *  CALL      ref    System.String.Concat
                                                  /--*  t186   ref    
N008 ( 25, 24) [000188] DA-XG-------              *  STORE_LCL_VAR ref    V36 tmp18        
               [000545] ------------                 IL_OFFSET void   IL offset: 0x108
N002 (  3,  2) [000189] ------------       t189 =    LCL_VAR   ref    V36 tmp18        
                                                  /--*  t189   ref    
               [000656] ------------       t656 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t656   ref    arg0 in rcx
N003 ( 17,  8) [000190] --CXG-------              *  CALL      void   System.Console.WriteLine
               [000546] ------------                 IL_OFFSET void   IL offset: 0x10d
N001 (  1,  1) [000191] ------------                 NO_OP     void  
               [000547] ------------                 IL_OFFSET void   IL offset: 0x10e
N001 (  0,  0) [000192] ------------                 NOP       void  

------------ BB16 [110..11C), preds={BB28} succs={BB17}
               [000548] ------------                 IL_OFFSET void   IL offset: 0x110
N001 (  1,  1) [000197] ------------                 NO_OP     void  
               [000549] ------------                 IL_OFFSET void   IL offset: 0x111
N001 (  3,  2) [000198] ------------       t198 =    LCL_VAR   ref    V00 this         
                                                  /--*  t198   ref    
N003 (  4,  3) [000450] -c----------       t450 = *  LEA(b+8)  byref 
                                                  /--*  t450   byref  
N004 (  6,  5) [000199] ---XG-------       t199 = *  IND       ref   
                                                  /--*  t199   ref    
N006 ( 10,  8) [000201] DA-XG-------              *  STORE_LCL_VAR ref    V08 loc6         
               [000550] ------------                 IL_OFFSET void   IL offset: 0x119
N001 (  1,  1) [000202] ------------       t202 =    CNS_INT   int    0
                                                  /--*  t202   int    
N003 (  5,  4) [000204] DA--G-------              *  STORE_LCL_VAR int   (AX) V09 loc7         

------------ BB17 [11C..145) -> BB19 (cond), preds={BB16} succs={BB18,BB19}
               [000551] ------------                 IL_OFFSET void   IL offset: 0x11c
N003 (  3,  3) [000207] ------------       t207 =    LCL_VAR_ADDR long   V09 loc7         
                                                  /--*  t207   long   
               [000657] ------------       t657 = *  PUTARG_REG long   REG rdx
N004 (  3,  2) [000205] ------------       t205 =    LCL_VAR   ref    V08 loc6         
                                                  /--*  t205   ref    
               [000658] ------------       t658 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t657   long   arg1 in rdx
                                                  +--*  t658   ref    arg0 in rcx
N005 ( 20, 12) [000208] --CXG-------              *  CALL      void   System.Threading.Monitor.Enter
               [000552] ------------                 IL_OFFSET void   IL offset: 0x125
N001 (  1,  1) [000209] ------------                 NO_OP     void  
               [000553] ------------                 IL_OFFSET void   IL offset: 0x126
N001 (  1,  1) [000210] ------------                 NO_OP     void  
               [000554] ------------                 IL_OFFSET void   IL offset: 0x127
N001 (  3,  2) [000211] ------------       t211 =    LCL_VAR   ref    V00 this         
                                                  /--*  t211   ref    
N003 (  4,  3) [000456] -c----------       t456 = *  LEA(b+8)  byref 
                                                  /--*  t456   byref  
N004 (  6,  5) [000212] ---XG-------       t212 = *  IND       ref   
                                                  /--*  t212   ref    
N006 (  7,  6) [000454] -c----------       t454 = *  LEA(b+8)  byref 
                                                  /--*  t454   byref  
N007 (  9,  8) [000213] ---XG-------       t213 = *  IND       ref   
N008 (  3,  2) [000214] ------------       t214 =    LCL_VAR   ref    V00 this         
                                                  /--*  t214   ref    
N010 (  4,  3) [000460] -c----------       t460 = *  LEA(b+8)  byref 
                                                  /--*  t460   byref  
N011 (  6,  5) [000215] ---XG-------       t215 = *  IND       ref   
                                                  /--*  t215   ref    
N013 (  7,  6) [000458] -c----------       t458 = *  LEA(b+16) byref 
                                                  /--*  t458   byref  
N014 (  9,  8) [000216] -c-XG-------       t216 = *  IND       ref   
                                                  /--*  t213   ref    
                                                  +--*  t216   ref    
N015 ( 22, 17) [000217] ---XG-------       t217 = *  EQ        int   
                                                  /--*  t217   int    
N017 ( 26, 20) [000219] DA-XG-------              *  STORE_LCL_VAR int    V10 loc8         
               [000555] ------------                 IL_OFFSET void   IL offset: 0x141
N001 (  3,  2) [000220] -c----------       t220 =    LCL_VAR   int    V10 loc8         
N002 (  1,  1) [000221] -c----------       t221 =    CNS_INT   int    0
                                                  /--*  t220   int    
                                                  +--*  t221   int    
N003 (  5,  4) [000222] J------N----              *  EQ        void  
N004 (  7,  6) [000223] ------------              *  JTRUE     void  

------------ BB18 [145..148) -> BB20 (always), preds={BB17} succs={BB20}
               [000556] ------------                 IL_OFFSET void   IL offset: 0x145
N001 (  1,  1) [000230] ------------                 NO_OP     void  
               [000557] ------------                 IL_OFFSET void   IL offset: 0x146
N001 (  0,  0) [000231] ------------                 NOP       void  

------------ BB19 [148..14B) -> BB22 (always), preds={BB17} succs={BB22}
               [000558] ------------                 IL_OFFSET void   IL offset: 0x148
N001 (  1,  1) [000224] ------------                 NO_OP     void  
               [000559] ------------                 IL_OFFSET void   IL offset: 0x149
N001 (  0,  0) [000225] ------------                 NOP       void  

------------ BB20 [???..???) -> BB24 (callf), preds={BB18} succs={BB24}

------------ BB21 [???..???) -> BB29 (ALWAYS), preds={BB26} succs={BB29}

------------ BB22 [???..???) -> BB24 (callf), preds={BB19} succs={BB24}

------------ BB23 [???..???) -> BB27 (ALWAYS), preds={BB26} succs={BB27}

------------ BB27 [158..161), preds={BB23} succs={BB28}
               [000560] ------------                 IL_OFFSET void   IL offset: 0x158
N002 (  1,  1) [000226] ------------       t226 =    CNS_INT   int    100
                                                  /--*  t226   int    
               [000659] ------------       t659 = *  PUTARG_REG int    REG rcx
                                                  /--*  t659   int    arg0 in rcx
N003 ( 15,  7) [000227] --CXG-------              *  CALL      void   System.Threading.Thread.Sleep
               [000561] ------------                 IL_OFFSET void   IL offset: 0x15f
N001 (  1,  1) [000228] ------------                 NO_OP     void  
               [000562] ------------                 IL_OFFSET void   IL offset: 0x160
N001 (  1,  1) [000229] ------------                 NO_OP     void  

------------ BB28 [161..166) -> BB16 (always), preds={BB15,BB27} succs={BB16}
               [000563] ------------                 IL_OFFSET void   IL offset: 0x161
N001 (  1,  1) [000193] -c----------       t193 =    CNS_INT   int    1
                                                  /--*  t193   int    
N003 (  5,  4) [000195] DA----------              *  STORE_LCL_VAR int    V11 loc9         
               [000564] ------------                 IL_OFFSET void   IL offset: 0x164
N001 (  0,  0) [000196] ------------                 NOP       void  

------------ BB29 [166..1B1) -> BB39 (always), preds={BB21} succs={BB39}
               [000565] ------------                 IL_OFFSET void   IL offset: 0x166
N001 ( 14,  5) [000232] --CXG-------       t232 =    CALL      long   System.DateTime.get_Now
                                                  /--*  t232   long   
N003 ( 18,  8) [000235] DA-XG-------              *  STORE_LCL_VAR struct<System.DateTime, 8> V37 tmp19        
               [000566] ------------                 IL_OFFSET void   IL offset: 0x16b
N001 (  3,  2) [000236] ------------       t236 =    LCL_VAR   struct<System.DateTime, 8> V37 tmp19        
                                                  /--*  t236   struct 
N003 (  7,  5) [000239] DA--G-------              *  STORE_LCL_VAR struct<System.DateTime, 8>(AX) V03 loc1         
               [000567] ------------                 IL_OFFSET void   IL offset: 0x16c
N002 (  3,  3) [000241] ------------       t241 =    LCL_VAR_ADDR byref  V03 loc1         
                                                  /--*  t241   byref  
               [000660] ------------       t660 = *  PUTARG_REG byref  REG rcx
                                                  /--*  t660   byref  this in rcx
N003 ( 17, 10) [000242] --CXG-------       t242 = *  CALL      ref    System.DateTime.ToString
                                                  /--*  t242   ref    
N005 ( 21, 13) [000244] DA-XG-------              *  STORE_LCL_VAR ref    V38 tmp20        
               [000568] ------------                 IL_OFFSET void   IL offset: 0x173
N003 (  2, 10) [000466] H-----------       t466 =    CNS_INT(h) long   0xBE2A3208 "	 Done.  Profiler is active, available options:"
                                                  /--*  t466   long   
N004 (  4, 12) [000467] #---G-------       t467 = *  IND       ref   
                                                  /--*  t467   ref    
               [000661] ----G-------       t661 = *  PUTARG_REG ref    REG rdx
N005 (  3,  2) [000245] ------------       t245 =    LCL_VAR   ref    V38 tmp20        
                                                  /--*  t245   ref    
               [000662] ------------       t662 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t661   ref    arg1 in rdx
                                                  +--*  t662   ref    arg0 in rcx
N006 ( 21, 21) [000247] --CXG-------       t247 = *  CALL      ref    System.String.Concat
                                                  /--*  t247   ref    
N008 ( 25, 24) [000249] DA-XG-------              *  STORE_LCL_VAR ref    V39 tmp21        
               [000569] ------------                 IL_OFFSET void   IL offset: 0x17d
N002 (  3,  2) [000250] ------------       t250 =    LCL_VAR   ref    V39 tmp21        
                                                  /--*  t250   ref    
               [000663] ------------       t663 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t663   ref    arg0 in rcx
N003 ( 17,  8) [000251] --CXG-------              *  CALL      void   System.Console.WriteLine
               [000570] ------------                 IL_OFFSET void   IL offset: 0x182
N001 (  1,  1) [000252] ------------                 NO_OP     void  
               [000571] ------------                 IL_OFFSET void   IL offset: 0x183
N002 (  2, 10) [000471] H-----------       t471 =    CNS_INT(h) long   0xBE2A3210 "   Q = quit"
                                                  /--*  t471   long   
N003 (  4, 12) [000472] #---G-------       t472 = *  IND       ref   
                                                  /--*  t472   ref    
               [000664] ----G-------       t664 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t664   ref    arg0 in rcx
N004 ( 18, 18) [000254] --CXG-------              *  CALL      void   System.Console.WriteLine
               [000572] ------------                 IL_OFFSET void   IL offset: 0x18d
N001 (  1,  1) [000255] ------------                 NO_OP     void  
               [000573] ------------                 IL_OFFSET void   IL offset: 0x18e
N002 (  2, 10) [000474] H-----------       t474 =    CNS_INT(h) long   0xBE2A3218 "   H = heap snapshot"
                                                  /--*  t474   long   
N003 (  4, 12) [000475] #---G-------       t475 = *  IND       ref   
                                                  /--*  t475   ref    
               [000665] ----G-------       t665 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t665   ref    arg0 in rcx
N004 ( 18, 18) [000257] --CXG-------              *  CALL      void   System.Console.WriteLine
               [000574] ------------                 IL_OFFSET void   IL offset: 0x198
N001 (  1,  1) [000258] ------------                 NO_OP     void  
               [000575] ------------                 IL_OFFSET void   IL offset: 0x199
N002 (  2, 10) [000477] H-----------       t477 =    CNS_INT(h) long   0xBE2A3220 "   G = GC (max gen)"
                                                  /--*  t477   long   
N003 (  4, 12) [000478] #---G-------       t478 = *  IND       ref   
                                                  /--*  t478   ref    
               [000666] ----G-------       t666 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t666   ref    arg0 in rcx
N004 ( 18, 18) [000260] --CXG-------              *  CALL      void   System.Console.WriteLine
               [000576] ------------                 IL_OFFSET void   IL offset: 0x1a3
N001 (  1,  1) [000261] ------------                 NO_OP     void  
               [000577] ------------                 IL_OFFSET void   IL offset: 0x1a4
N002 (  2, 10) [000480] H-----------       t480 =    CNS_INT(h) long   0xBE2A3228 "   R = clear the running flag to stop the consumer thread"
                                                  /--*  t480   long   
N003 (  4, 12) [000481] #---G-------       t481 = *  IND       ref   
                                                  /--*  t481   ref    
               [000667] ----G-------       t667 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t667   ref    arg0 in rcx
N004 ( 18, 18) [000263] --CXG-------              *  CALL      void   System.Console.WriteLine
               [000578] ------------                 IL_OFFSET void   IL offset: 0x1ae
N001 (  1,  1) [000264] ------------                 NO_OP     void  
               [000579] ------------                 IL_OFFSET void   IL offset: 0x1af
N001 (  0,  0) [000265] ------------                 NOP       void  

------------ BB30 [1B1..1CA) -> BB32 (cond), preds={BB39} succs={BB31,BB32}
               [000580] ------------                 IL_OFFSET void   IL offset: 0x1b1
N001 (  1,  1) [000270] ------------                 NO_OP     void  
               [000581] ------------                 IL_OFFSET void   IL offset: 0x1b2
N002 (  3,  3) [000273] ------------       t273 =    LCL_VAR_ADDR long   V40 tmp22        
                                                  /--*  t273   long   
               [000668] ------------       t668 = *  PUTARG_REG long   REG rcx
                                                  /--*  t668   long   arg0 in rcx
N003 ( 17,  9) [000271] S-CXG-------              *  CALL      void   System.Console.ReadKey
               [000582] ------------                 IL_OFFSET void   IL offset: 0x1b7
N001 (  3,  2) [000274] -c----------       t274 =    LCL_VAR   struct<System.ConsoleKeyInfo, 12>(AX) V40 tmp22        
               [000669] Dc-----N----       t669 =    LCL_VAR_ADDR byref  V12 loc10        
                                                  /--*  t669   byref  
                                                  +--*  t274   struct 
N003 (  7,  5) [000277] sA----------              *  STORE_BLK struct<System.ConsoleKeyInfo, 12> (copy) (Unroll)
               [000583] ------------                 IL_OFFSET void   IL offset: 0x1b9
N002 (  3,  3) [000279] ------------       t279 =    LCL_VAR_ADDR byref  V12 loc10        
                                                  /--*  t279   byref  
               [000670] ------------       t670 = *  PUTARG_REG byref  REG rcx
                                                  /--*  t670   byref  this in rcx
N003 ( 17, 10) [000280] --CXG-------       t280 = *  CALL      int    System.ConsoleKeyInfo.get_Key
                                                  /--*  t280   int    
N005 ( 21, 13) [000282] DA-XG-------              *  STORE_LCL_VAR int    V41 tmp23        
               [000584] ------------                 IL_OFFSET void   IL offset: 0x1c0
N001 (  3,  2) [000283] -c----------       t283 =    LCL_VAR   int    V41 tmp23        
N002 (  1,  1) [000284] -c----------       t284 =    CNS_INT   int    71
                                                  /--*  t283   int    
                                                  +--*  t284   int    
N003 (  8,  4) [000285] ------------       t285 = *  EQ        int   
                                                  /--*  t285   int    
N005 ( 12,  7) [000287] DA----------              *  STORE_LCL_VAR int    V13 loc11        
               [000585] ------------                 IL_OFFSET void   IL offset: 0x1c6
N001 (  3,  2) [000288] -c----------       t288 =    LCL_VAR   int    V13 loc11        
N002 (  1,  1) [000289] -c----------       t289 =    CNS_INT   int    0
                                                  /--*  t288   int    
                                                  +--*  t289   int    
N003 (  5,  4) [000290] J------N----              *  EQ        void  
N004 (  7,  6) [000291] ------------              *  JTRUE     void  

------------ BB31 [1CA..1D9) -> BB38 (always), preds={BB30} succs={BB38}
               [000586] ------------                 IL_OFFSET void   IL offset: 0x1ca
N001 (  1,  1) [000354] ------------                 NO_OP     void  
               [000587] ------------                 IL_OFFSET void   IL offset: 0x1cb
N001 ( 14,  5) [000355] --CXG-------       t355 =    CALL      int    System.GC.get_MaxGeneration
                                                  /--*  t355   int    
N003 ( 18,  8) [000357] DA-XG-------              *  STORE_LCL_VAR int    V45 tmp27        
               [000588] ------------                 IL_OFFSET void   IL offset: 0x1d0
N002 (  3,  2) [000358] ------------       t358 =    LCL_VAR   int    V45 tmp27        
                                                  /--*  t358   int    
               [000671] ------------       t671 = *  PUTARG_REG int    REG rcx
                                                  /--*  t671   int    arg0 in rcx
N003 ( 17,  8) [000359] --CXG-------              *  CALL      void   System.GC.Collect
               [000589] ------------                 IL_OFFSET void   IL offset: 0x1d5
N001 (  1,  1) [000360] ------------                 NO_OP     void  
               [000590] ------------                 IL_OFFSET void   IL offset: 0x1d6
N001 (  1,  1) [000361] ------------                 NO_OP     void  
               [000591] ------------                 IL_OFFSET void   IL offset: 0x1d7
N001 (  0,  0) [000362] ------------                 NOP       void  

------------ BB32 [1D9..1EA) -> BB34 (cond), preds={BB30} succs={BB33,BB34}
               [000592] ------------                 IL_OFFSET void   IL offset: 0x1d9
N002 (  3,  3) [000293] ------------       t293 =    LCL_VAR_ADDR byref  V12 loc10        
                                                  /--*  t293   byref  
               [000672] ------------       t672 = *  PUTARG_REG byref  REG rcx
                                                  /--*  t672   byref  this in rcx
N003 ( 17, 10) [000294] --CXG-------       t294 = *  CALL      int    System.ConsoleKeyInfo.get_Key
                                                  /--*  t294   int    
N005 ( 21, 13) [000296] DA-XG-------              *  STORE_LCL_VAR int    V42 tmp24        
               [000593] ------------                 IL_OFFSET void   IL offset: 0x1e0
N001 (  3,  2) [000297] -c----------       t297 =    LCL_VAR   int    V42 tmp24        
N002 (  1,  1) [000298] -c----------       t298 =    CNS_INT   int    72
                                                  /--*  t297   int    
                                                  +--*  t298   int    
N003 (  8,  4) [000299] ------------       t299 = *  EQ        int   
                                                  /--*  t299   int    
N005 ( 12,  7) [000301] DA----------              *  STORE_LCL_VAR int    V14 loc12        
               [000594] ------------                 IL_OFFSET void   IL offset: 0x1e6
N001 (  3,  2) [000302] -c----------       t302 =    LCL_VAR   int    V14 loc12        
N002 (  1,  1) [000303] -c----------       t303 =    CNS_INT   int    0
                                                  /--*  t302   int    
                                                  +--*  t303   int    
N003 (  5,  4) [000304] J------N----              *  EQ        void  
N004 (  7,  6) [000305] ------------              *  JTRUE     void  

------------ BB33 [1EA..1F4) -> BB38 (always), preds={BB32} succs={BB38}
               [000595] ------------                 IL_OFFSET void   IL offset: 0x1ea
N001 (  1,  1) [000349] ------------                 NO_OP     void  
               [000596] ------------                 IL_OFFSET void   IL offset: 0x1eb
N001 ( 14,  5) [000350] --CXG-------                 CALL      void   System.Diagnostics.Debugger.Break
               [000597] ------------                 IL_OFFSET void   IL offset: 0x1f0
N001 (  1,  1) [000351] ------------                 NO_OP     void  
               [000598] ------------                 IL_OFFSET void   IL offset: 0x1f1
N001 (  1,  1) [000352] ------------                 NO_OP     void  
               [000599] ------------                 IL_OFFSET void   IL offset: 0x1f2
N001 (  0,  0) [000353] ------------                 NOP       void  

------------ BB34 [1F4..205) -> BB36 (cond), preds={BB32} succs={BB35,BB36}
               [000600] ------------                 IL_OFFSET void   IL offset: 0x1f4
N002 (  3,  3) [000307] ------------       t307 =    LCL_VAR_ADDR byref  V12 loc10        
                                                  /--*  t307   byref  
               [000673] ------------       t673 = *  PUTARG_REG byref  REG rcx
                                                  /--*  t673   byref  this in rcx
N003 ( 17, 10) [000308] --CXG-------       t308 = *  CALL      int    System.ConsoleKeyInfo.get_Key
                                                  /--*  t308   int    
N005 ( 21, 13) [000310] DA-XG-------              *  STORE_LCL_VAR int    V43 tmp25        
               [000601] ------------                 IL_OFFSET void   IL offset: 0x1fb
N001 (  3,  2) [000311] -c----------       t311 =    LCL_VAR   int    V43 tmp25        
N002 (  1,  1) [000312] -c----------       t312 =    CNS_INT   int    82
                                                  /--*  t311   int    
                                                  +--*  t312   int    
N003 (  8,  4) [000313] ------------       t313 = *  EQ        int   
                                                  /--*  t313   int    
N005 ( 12,  7) [000315] DA----------              *  STORE_LCL_VAR int    V15 loc13        
               [000602] ------------                 IL_OFFSET void   IL offset: 0x201
N001 (  3,  2) [000316] -c----------       t316 =    LCL_VAR   int    V15 loc13        
N002 (  1,  1) [000317] -c----------       t317 =    CNS_INT   int    0
                                                  /--*  t316   int    
                                                  +--*  t317   int    
N003 (  5,  4) [000318] J------N----              *  EQ        void  
N004 (  7,  6) [000319] ------------              *  JTRUE     void  

------------ BB35 [205..210) -> BB38 (always), preds={BB34} succs={BB38}
               [000603] ------------                 IL_OFFSET void   IL offset: 0x205
N001 (  1,  1) [000342] ------------                 NO_OP     void  
               [000604] ------------                 IL_OFFSET void   IL offset: 0x206
N001 (  3,  2) [000343] ------------       t343 =    LCL_VAR   ref    V00 this         
                                                  /--*  t343   ref    
N003 (  4,  3) [000489] -c----------       t489 = *  LEA(b+16) byref 
N005 (  1,  1) [000344] -c----------       t344 =    CNS_INT   int    0
                                                  /--*  t489   byref  
                                                  +--*  t344   int    
               [000605] -A-XG-------              *  STOREIND  bool  
               [000606] ------------                 IL_OFFSET void   IL offset: 0x20d
N001 (  1,  1) [000347] ------------                 NO_OP     void  
               [000607] ------------                 IL_OFFSET void   IL offset: 0x20e
N001 (  0,  0) [000348] ------------                 NOP       void  

------------ BB36 [210..221) -> BB38 (cond), preds={BB34} succs={BB37,BB38}
               [000608] ------------                 IL_OFFSET void   IL offset: 0x210
N002 (  3,  3) [000321] ------------       t321 =    LCL_VAR_ADDR byref  V12 loc10        
                                                  /--*  t321   byref  
               [000674] ------------       t674 = *  PUTARG_REG byref  REG rcx
                                                  /--*  t674   byref  this in rcx
N003 ( 17, 10) [000322] --CXG-------       t322 = *  CALL      int    System.ConsoleKeyInfo.get_Key
                                                  /--*  t322   int    
N005 ( 21, 13) [000324] DA-XG-------              *  STORE_LCL_VAR int    V44 tmp26        
               [000609] ------------                 IL_OFFSET void   IL offset: 0x217
N001 (  3,  2) [000325] -c----------       t325 =    LCL_VAR   int    V44 tmp26        
N002 (  1,  1) [000326] -c----------       t326 =    CNS_INT   int    81
                                                  /--*  t325   int    
                                                  +--*  t326   int    
N003 (  8,  4) [000327] ------------       t327 = *  EQ        int   
                                                  /--*  t327   int    
N005 ( 12,  7) [000329] DA----------              *  STORE_LCL_VAR int    V16 loc14        
               [000610] ------------                 IL_OFFSET void   IL offset: 0x21d
N001 (  3,  2) [000330] -c----------       t330 =    LCL_VAR   int    V16 loc14        
N002 (  1,  1) [000331] -c----------       t331 =    CNS_INT   int    0
                                                  /--*  t330   int    
                                                  +--*  t331   int    
N003 (  5,  4) [000332] J------N----              *  EQ        void  
N004 (  7,  6) [000333] ------------              *  JTRUE     void  

------------ BB37 [221..224) -> BB40 (always), preds={BB36} succs={BB40}
               [000611] ------------                 IL_OFFSET void   IL offset: 0x221
N001 (  1,  1) [000335] ------------                 NO_OP     void  
               [000612] ------------                 IL_OFFSET void   IL offset: 0x222
N001 (  0,  0) [000336] ------------                 NOP       void  

------------ BB38 [224..225), preds={BB31,BB33,BB35,BB36} succs={BB39}
               [000613] ------------                 IL_OFFSET void   IL offset: 0x224
N001 (  1,  1) [000334] ------------                 NO_OP     void  

------------ BB39 [225..22A) -> BB30 (always), preds={BB29,BB38} succs={BB30}
               [000614] ------------                 IL_OFFSET void   IL offset: 0x225
N001 (  1,  1) [000266] -c----------       t266 =    CNS_INT   int    1
                                                  /--*  t266   int    
N003 (  5,  4) [000268] DA----------              *  STORE_LCL_VAR int    V17 loc15        
               [000615] ------------                 IL_OFFSET void   IL offset: 0x228
N001 (  0,  0) [000269] ------------                 NOP       void  

------------ BB40 [22A..232) (return), preds={BB37} succs={}
               [000616] ------------                 IL_OFFSET void   IL offset: 0x22a
N001 (  3,  2) [000337] ------------       t337 =    LCL_VAR   ref    V00 this         
                                                  /--*  t337   ref    
N003 (  4,  3) [000493] -c----------       t493 = *  LEA(b+16) byref 
N005 (  1,  1) [000338] -c----------       t338 =    CNS_INT   int    0
                                                  /--*  t493   byref  
                                                  +--*  t338   int    
               [000617] -A-XG-------              *  STOREIND  bool  
               [000618] ------------                 IL_OFFSET void   IL offset: 0x231
N001 (  0,  0) [000341] ------------                 RETURN    void  

------------ BB10 [0D5..0D9) -> BB12 (cond), preds={BB08} succs={BB11,BB12}
               [000619] ------------                 IL_OFFSET void   IL offset: 0xd5
N001 (  3,  2) [000163] ------------       t163 =    LCL_VAR   int   (AX) V06 loc4         
                                                  /--*  t163   int    
N002 (  4,  4) [000441] ----G-------       t441 = *  CAST      int <- bool <- int
N003 (  1,  1) [000164] -c----------       t164 =    CNS_INT   int    0
                                                  /--*  t441   int    
                                                  +--*  t164   int    
N004 (  6,  6) [000165] J---G--N----              *  EQ        void  
N005 (  8,  8) [000166] ----G-------              *  JTRUE     void  

------------ BB11 [0D9..0E0), preds={BB10} succs={BB12}
               [000620] ------------                 IL_OFFSET void   IL offset: 0xd9
N002 (  3,  2) [000168] ------------       t168 =    LCL_VAR   ref    V05 loc3         
                                                  /--*  t168   ref    
               [000675] ------------       t675 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t675   ref    arg0 in rcx
N003 ( 17,  8) [000169] --CXG-------              *  CALL      void   System.Threading.Monitor.Exit
               [000621] ------------                 IL_OFFSET void   IL offset: 0xdf
N001 (  1,  1) [000170] ------------                 NO_OP     void  

------------ BB12 [0E0..0E1) (finret), preds={BB10,BB11} succs={BB09}
               [000622] ------------                 IL_OFFSET void   IL offset: 0xe0
N001 (  0,  0) [000167] ------------                 RETFILT   void  

------------ BB24 [14B..14F) -> BB26 (cond), preds={BB20,BB22} succs={BB25,BB26}
               [000623] ------------                 IL_OFFSET void   IL offset: 0x14b
N001 (  3,  2) [000363] ------------       t363 =    LCL_VAR   int   (AX) V09 loc7         
                                                  /--*  t363   int    
N002 (  4,  4) [000461] ----G-------       t461 = *  CAST      int <- bool <- int
N003 (  1,  1) [000364] -c----------       t364 =    CNS_INT   int    0
                                                  /--*  t461   int    
                                                  +--*  t364   int    
N004 (  6,  6) [000365] J---G--N----              *  EQ        void  
N005 (  8,  8) [000366] ----G-------              *  JTRUE     void  

------------ BB25 [14F..157), preds={BB24} succs={BB26}
               [000624] ------------                 IL_OFFSET void   IL offset: 0x14f
N002 (  3,  2) [000368] ------------       t368 =    LCL_VAR   ref    V08 loc6         
                                                  /--*  t368   ref    
               [000676] ------------       t676 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t676   ref    arg0 in rcx
N003 ( 17,  8) [000369] --CXG-------              *  CALL      void   System.Threading.Monitor.Exit
               [000625] ------------                 IL_OFFSET void   IL offset: 0x156
N001 (  1,  1) [000370] ------------                 NO_OP     void  

------------ BB26 [157..158) (finret), preds={BB24,BB25} succs={BB21,BB23}
               [000626] ------------                 IL_OFFSET void   IL offset: 0x157
N001 (  0,  0) [000367] ------------                 RETFILT   void  

-------------------------------------------------------------------------------------------------------------------

*** lvaComputeRefCounts ***
*************** In fgLocalVarLiveness()
; Initial local variable assignments
;
;  V00 this              ref  do-not-enreg[] this class-hnd
;  V01 arg1              ref  do-not-enreg[] class-hnd
;  V02 loc0              ref  do-not-enreg[] class-hnd exact
;  V03 loc1           struct <System.DateTime, 8> do-not-enreg[XSB] addr-exposed ld-addr-op
;  V04 loc2              int  do-not-enreg[]
;  V05 loc3              ref  do-not-enreg[] class-hnd
;  V06 loc4             bool  do-not-enreg[XB] addr-exposed ld-addr-op
;  V07 loc5             bool  do-not-enreg[]
;  V08 loc6              ref  do-not-enreg[] class-hnd
;  V09 loc7             bool  do-not-enreg[XB] addr-exposed ld-addr-op
;  V10 loc8             bool  do-not-enreg[]
;  V11 loc9             bool  do-not-enreg[]
;  V12 loc10          struct <System.ConsoleKeyInfo, 12> do-not-enreg[XSB] addr-exposed ld-addr-op
;  V13 loc11            bool  do-not-enreg[]
;  V14 loc12            bool  do-not-enreg[]
;  V15 loc13            bool  do-not-enreg[]
;  V16 loc14            bool  do-not-enreg[]
;  V17 loc15            bool  do-not-enreg[]
;  V18 OutArgs        lclBlk <32>  do-not-enreg[] "OutgoingArgSpace"
;  V19 tmp1           struct <System.DateTime, 8> do-not-enreg[S] "impSpillStackEnsure"
;  V20 tmp2              ref  do-not-enreg[] class-hnd "impSpillStackEnsure"
;  V21 tmp3              ref  do-not-enreg[] class-hnd "impSpillStackEnsure"
;  V22 tmp4              ref  do-not-enreg[] class-hnd exact "NewObj constructor temp"
;  V23 tmp5              ref  do-not-enreg[] class-hnd exact "NewObj constructor temp"
;  V24 tmp6              ref  do-not-enreg[] class-hnd "impAppendStmt"
;  V25 tmp7              ref  do-not-enreg[] class-hnd exact "NewObj constructor temp"
;  V26 tmp8              ref  do-not-enreg[] class-hnd exact "NewObj constructor temp"
;  V27 tmp9           struct <System.DateTime, 8> do-not-enreg[S] "impSpillStackEnsure"
;  V28 tmp10             ref  do-not-enreg[] class-hnd "impSpillStackEnsure"
;  V29 tmp11             ref  do-not-enreg[] class-hnd "impSpillStackEnsure"
;  V30 tmp12             ref  do-not-enreg[] class-hnd exact "NewObj constructor temp"
;  V31 tmp13             ref  do-not-enreg[] class-hnd "impAppendStmt"
;  V32 tmp14             ref  do-not-enreg[] class-hnd exact "NewObj constructor temp"
;  V33 tmp15             ref  do-not-enreg[] class-hnd "impAppendStmt"
;  V34 tmp16          struct <System.DateTime, 8> do-not-enreg[S] "impSpillStackEnsure"
;  V35 tmp17             ref  do-not-enreg[] class-hnd "impSpillStackEnsure"
;  V36 tmp18             ref  do-not-enreg[] class-hnd "impSpillStackEnsure"
;  V37 tmp19          struct <System.DateTime, 8> do-not-enreg[S] "impSpillStackEnsure"
;  V38 tmp20             ref  do-not-enreg[] class-hnd "impSpillStackEnsure"
;  V39 tmp21             ref  do-not-enreg[] class-hnd "impSpillStackEnsure"
;  V40 tmp22          struct <System.ConsoleKeyInfo, 12> do-not-enreg[XSB] addr-exposed "impSpillStackEnsure"
;  V41 tmp23             int  do-not-enreg[] "impSpillStackEnsure"
;  V42 tmp24             int  do-not-enreg[] "impSpillStackEnsure"
;  V43 tmp25             int  do-not-enreg[] "impSpillStackEnsure"
;  V44 tmp26             int  do-not-enreg[] "impSpillStackEnsure"
;  V45 tmp27             int  do-not-enreg[] "impSpillStackEnsure"
;  V46 PSPSym           long  do-not-enreg[X] addr-exposed "PSPSym"
In fgLocalVarLivenessInit
*************** In fgPerBlockLocalVarLiveness()
*************** In fgInterBlockLocalVarLiveness()
*************** In fgExtendDbgLifetimes()

Marking vars alive over their entire scope :

Local variable scopes = 18
    	VarNum 	LVNum 	      Name 	Beg 	End
Sorted by enter scope:
 0: 	00h 	00h 	  V00 this 	000h   	232h <-- next enter scope
 1: 	0Ah 	0Ah 	  V10 loc8 	000h   	232h
 2: 	0Bh 	0Bh 	  V11 loc9 	000h   	232h
 3: 	0Ch 	0Ch 	 V12 loc10 	000h   	232h
 4: 	0Dh 	0Dh 	 V13 loc11 	000h   	232h
 5: 	0Eh 	0Eh 	 V14 loc12 	000h   	232h
 6: 	0Fh 	0Fh 	 V15 loc13 	000h   	232h
 7: 	10h 	10h 	 V16 loc14 	000h   	232h
 8: 	09h 	09h 	  V09 loc7 	000h   	232h
 9: 	08h 	08h 	  V08 loc6 	000h   	232h
10: 	01h 	01h 	  V01 arg1 	000h   	232h
11: 	02h 	02h 	  V02 loc0 	000h   	232h
12: 	03h 	03h 	  V03 loc1 	000h   	232h
13: 	04h 	04h 	  V04 loc2 	000h   	232h
14: 	05h 	05h 	  V05 loc3 	000h   	232h
15: 	06h 	06h 	  V06 loc4 	000h   	232h
16: 	07h 	07h 	  V07 loc5 	000h   	232h
17: 	11h 	11h 	 V17 loc15 	000h   	232h
Sorted by exit scope:
 0: 	00h 	00h 	  V00 this 	000h   	232h <-- next exit scope
 1: 	0Ah 	0Ah 	  V10 loc8 	000h   	232h
 2: 	0Bh 	0Bh 	  V11 loc9 	000h   	232h
 3: 	0Ch 	0Ch 	 V12 loc10 	000h   	232h
 4: 	0Dh 	0Dh 	 V13 loc11 	000h   	232h
 5: 	0Eh 	0Eh 	 V14 loc12 	000h   	232h
 6: 	0Fh 	0Fh 	 V15 loc13 	000h   	232h
 7: 	10h 	10h 	 V16 loc14 	000h   	232h
 8: 	09h 	09h 	  V09 loc7 	000h   	232h
 9: 	08h 	08h 	  V08 loc6 	000h   	232h
10: 	01h 	01h 	  V01 arg1 	000h   	232h
11: 	02h 	02h 	  V02 loc0 	000h   	232h
12: 	03h 	03h 	  V03 loc1 	000h   	232h
13: 	04h 	04h 	  V04 loc2 	000h   	232h
14: 	05h 	05h 	  V05 loc3 	000h   	232h
15: 	06h 	06h 	  V06 loc4 	000h   	232h
16: 	07h 	07h 	  V07 loc5 	000h   	232h
17: 	11h 	11h 	 V17 loc15 	000h   	232h
Scope info: block BB01 marking in scope: {}
Scope info: block BB02 marking in scope: {}
Scope info: block BB03 marking in scope: {}
Scope info: block BB04 marking in scope: {}
Scope info: block BB05 marking in scope: {}
Scope info: block BB06 marking in scope: {}
Scope info: block BB07 marking in scope: {}
Scope info: block BB08 marking in scope: {}
Scope info: block BB09 marking in scope: {}
Scope info: block BB13 marking in scope: {}
Scope info: block BB14 marking in scope: {}
Scope info: block BB15 marking in scope: {}
Scope info: block BB16 marking in scope: {}
Scope info: block BB17 marking in scope: {}
Scope info: block BB18 marking in scope: {}
Scope info: block BB19 marking in scope: {}
Scope info: block BB20 marking in scope: {}
Scope info: block BB21 marking in scope: {}
Scope info: block BB22 marking in scope: {}
Scope info: block BB23 marking in scope: {}
Scope info: block BB27 marking in scope: {}
Scope info: block BB28 marking in scope: {}
Scope info: block BB29 marking in scope: {}
Scope info: block BB30 marking in scope: {}
Scope info: block BB31 marking in scope: {}
Scope info: block BB32 marking in scope: {}
Scope info: block BB33 marking in scope: {}
Scope info: block BB34 marking in scope: {}
Scope info: block BB35 marking in scope: {}
Scope info: block BB36 marking in scope: {}
Scope info: block BB37 marking in scope: {}
Scope info: block BB38 marking in scope: {}
Scope info: block BB39 marking in scope: {}
Scope info: block BB40 marking in scope: {}
Scope info: block BB10 marking in scope: {}
Scope info: block BB11 marking in scope: {}
Scope info: block BB12 marking in scope: {}
Scope info: block BB24 marking in scope: {}
Scope info: block BB25 marking in scope: {}
Scope info: block BB26 marking in scope: {}

Debug scopes:
BB01: {}
BB02: {}
BB03: {}
BB04: {}
BB05: {}
BB06: {}
BB07: {}
BB08: {}
BB09: {}
BB13: {}
BB14: {}
BB15: {}
BB16: {}
BB17: {}
BB18: {}
BB19: {}
BB20: {}
BB21: {}
BB22: {}
BB23: {}
BB27: {}
BB28: {}
BB29: {}
BB30: {}
BB31: {}
BB32: {}
BB33: {}
BB34: {}
BB35: {}
BB36: {}
BB37: {}
BB38: {}
BB39: {}
BB40: {}
BB10: {}
BB11: {}
BB12: {}
BB24: {}
BB25: {}
BB26: {}
Scope info: block BB01 UNmarking in scope: {}

BB liveness after fgExtendDbgLifetimes():

BB01 IN (0)={} + ByrefExposed + GcHeap
     OUT(0)={} + ByrefExposed + GcHeap

BB02 IN (0)={} + ByrefExposed + GcHeap
     OUT(0)={} + ByrefExposed + GcHeap

BB03 IN (0)={} + ByrefExposed + GcHeap
     OUT(0)={} + ByrefExposed + GcHeap

BB04 IN (0)={} + ByrefExposed + GcHeap
     OUT(0)={} + ByrefExposed + GcHeap

BB05 IN (0)={} + ByrefExposed + GcHeap
     OUT(0)={} + ByrefExposed + GcHeap

BB06 IN (0)={} + ByrefExposed + GcHeap
     OUT(0)={} + ByrefExposed + GcHeap

BB07 IN (0)={} + ByrefExposed + GcHeap
     OUT(0)={} + ByrefExposed + GcHeap

BB08 IN (0)={} + ByrefExposed + GcHeap
     OUT(0)={} + ByrefExposed + GcHeap

BB09 IN (0)={} + ByrefExposed + GcHeap
     OUT(0)={} + ByrefExposed + GcHeap

BB13 IN (0)={} + ByrefExposed + GcHeap
     OUT(0)={} + ByrefExposed + GcHeap

BB14 IN (0)={} + ByrefExposed + GcHeap
     OUT(0)={} + ByrefExposed + GcHeap

BB15 IN (0)={} + ByrefExposed + GcHeap
     OUT(0)={} + ByrefExposed + GcHeap

BB16 IN (0)={} + ByrefExposed + GcHeap
     OUT(0)={} + ByrefExposed + GcHeap

BB17 IN (0)={} + ByrefExposed + GcHeap
     OUT(0)={} + ByrefExposed + GcHeap

BB18 IN (0)={} + ByrefExposed + GcHeap
     OUT(0)={} + ByrefExposed + GcHeap

BB19 IN (0)={} + ByrefExposed + GcHeap
     OUT(0)={} + ByrefExposed + GcHeap

BB20 IN (0)={} + ByrefExposed + GcHeap
     OUT(0)={} + ByrefExposed + GcHeap

BB21 IN (0)={} + ByrefExposed + GcHeap
     OUT(0)={} + ByrefExposed + GcHeap

BB22 IN (0)={} + ByrefExposed + GcHeap
     OUT(0)={} + ByrefExposed + GcHeap

BB23 IN (0)={} + ByrefExposed + GcHeap
     OUT(0)={} + ByrefExposed + GcHeap

BB27 IN (0)={} + ByrefExposed + GcHeap
     OUT(0)={} + ByrefExposed + GcHeap

BB28 IN (0)={} + ByrefExposed + GcHeap
     OUT(0)={} + ByrefExposed + GcHeap

BB29 IN (0)={} + ByrefExposed + GcHeap
     OUT(0)={} + ByrefExposed + GcHeap

BB30 IN (0)={} + ByrefExposed + GcHeap
     OUT(0)={} + ByrefExposed + GcHeap

BB31 IN (0)={} + ByrefExposed + GcHeap
     OUT(0)={} + ByrefExposed + GcHeap

BB32 IN (0)={} + ByrefExposed + GcHeap
     OUT(0)={} + ByrefExposed + GcHeap

BB33 IN (0)={} + ByrefExposed + GcHeap
     OUT(0)={} + ByrefExposed + GcHeap

BB34 IN (0)={} + ByrefExposed + GcHeap
     OUT(0)={} + ByrefExposed + GcHeap

BB35 IN (0)={} + ByrefExposed + GcHeap
     OUT(0)={} + ByrefExposed + GcHeap

BB36 IN (0)={} + ByrefExposed + GcHeap
     OUT(0)={} + ByrefExposed + GcHeap

BB37 IN (0)={} + ByrefExposed + GcHeap
     OUT(0)={} + ByrefExposed + GcHeap

BB38 IN (0)={} + ByrefExposed + GcHeap
     OUT(0)={} + ByrefExposed + GcHeap

BB39 IN (0)={} + ByrefExposed + GcHeap
     OUT(0)={} + ByrefExposed + GcHeap

BB40 IN (0)={} + ByrefExposed + GcHeap
     OUT(0)={} + ByrefExposed + GcHeap

BB10 IN (0)={} + ByrefExposed + GcHeap
     OUT(0)={} + ByrefExposed + GcHeap

BB11 IN (0)={} + ByrefExposed + GcHeap
     OUT(0)={} + ByrefExposed + GcHeap

BB12 IN (0)={} + ByrefExposed + GcHeap
     OUT(0)={} + ByrefExposed + GcHeap

BB24 IN (0)={} + ByrefExposed + GcHeap
     OUT(0)={} + ByrefExposed + GcHeap

BB25 IN (0)={} + ByrefExposed + GcHeap
     OUT(0)={} + ByrefExposed + GcHeap

BB26 IN (0)={} + ByrefExposed + GcHeap
     OUT(0)={} + ByrefExposed + GcHeap



*** lvaComputeRefCounts ***

*************** Finishing PHASE Lowering nodeinfo
Trees after Lowering nodeinfo

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [???..???)                                     i internal hascall LIR 
BB02 [0038]  1       BB01                  1       [???..???)-> BB04 ( cond )                     internal LIR 
BB03 [0039]  1       BB02                  0.50    [???..???)                                     internal LIR 
BB04 [0037]  2       BB02,BB03             1       [???..???)                                     i internal hascall LIR 
BB05 [0001]  1       BB04                  1       [000..078)-> BB14 (always)                     i hascall gcsafe newobj LIR 
BB06 [0002]  1       BB14                  1       [078..083)                                     i bwd bwd-target LIR 
BB07 [0003]  1  0    BB06                  1       [083..0D5)-> BB08 (always) T0      try { }     keep i try hascall gcsafe newobj bwd LIR 
BB08 [0031]  1       BB07                  1       [???..???)-> BB10 (callf )                     i internal LIR 
BB09 [0032]  1       BB12                  1       [???..???)-> BB13 (ALWAYS)                     i internal LIR KEEP 
BB13 [0007]  1       BB09                  1       [0E1..0E6)                                     i bwd LIR 
BB14 [0008]  2       BB05,BB13             1       [0E6..0F1)-> BB06 ( cond )                     i bwd LIR 
BB15 [0009]  1       BB14                  1       [0F1..110)-> BB28 (always)                     i hascall gcsafe LIR 
BB16 [0010]  1       BB28                  1       [110..11C)                                     i bwd bwd-target LIR 
BB17 [0011]  1  1    BB16                  1       [11C..145)-> BB19 ( cond ) T1      try {       keep i try hascall gcsafe bwd LIR 
BB18 [0012]  1  1    BB17                  1       [145..148)-> BB20 (always) T1                  i bwd LIR 
BB19 [0013]  1  1    BB17                  1       [148..14B)-> BB22 (always) T1      }           i bwd LIR 
BB20 [0035]  1       BB18                  1       [???..???)-> BB24 (callf )                     i internal LIR 
BB21 [0036]  1       BB26                  1       [???..???)-> BB29 (ALWAYS)                     i internal LIR KEEP 
BB22 [0033]  1       BB19                  1       [???..???)-> BB24 (callf )                     i internal LIR 
BB23 [0034]  1       BB26                  1       [???..???)-> BB27 (ALWAYS)                     i internal LIR KEEP 
BB27 [0017]  1       BB23                  1       [158..161)                                     i hascall gcsafe bwd LIR 
BB28 [0018]  2       BB15,BB27             1       [161..166)-> BB16 (always)                     i bwd LIR 
BB29 [0019]  1       BB21                  1       [166..1B1)-> BB39 (always)                     i hascall gcsafe LIR 
BB30 [0020]  1       BB39                  1       [1B1..1CA)-> BB32 ( cond )                     i hascall gcsafe bwd bwd-target LIR 
BB31 [0021]  1       BB30                  1       [1CA..1D9)-> BB38 (always)                     i hascall gcsafe bwd LIR 
BB32 [0022]  1       BB30                  1       [1D9..1EA)-> BB34 ( cond )                     i hascall gcsafe bwd LIR 
BB33 [0023]  1       BB32                  1       [1EA..1F4)-> BB38 (always)                     i hascall gcsafe bwd LIR 
BB34 [0024]  1       BB32                  1       [1F4..205)-> BB36 ( cond )                     i hascall gcsafe bwd LIR 
BB35 [0025]  1       BB34                  1       [205..210)-> BB38 (always)                     i bwd LIR 
BB36 [0026]  1       BB34                  1       [210..221)-> BB38 ( cond )                     i hascall gcsafe bwd LIR 
BB37 [0027]  1       BB36                  1       [221..224)-> BB40 (always)                     i bwd LIR 
BB38 [0028]  4       BB31,BB33,BB35,BB36   1       [224..225)                                     i bwd LIR 
BB39 [0029]  2       BB29,BB38             1       [225..22A)-> BB30 (always)                     i bwd LIR 
BB40 [0030]  1       BB37                  1       [22A..232)        (return)                     i LIR 
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ funclets follow
BB10 [0004]  2     0 BB08                  1       [0D5..0D9)-> BB12 ( cond )    H0 F finally {   keep i flet bwd LIR 
BB11 [0005]  1     0 BB10                  1       [0D9..0E0)                    H0               i hascall bwd LIR 
BB12 [0006]  2     0 BB10,BB11             1       [0E0..0E1)        (finret)    H0   }           i bwd LIR 
BB24 [0014]  3     1 BB20,BB22             1       [14B..14F)-> BB26 ( cond )    H1 F finally {   keep i flet bwd LIR 
BB25 [0015]  1     1 BB24                  1       [14F..157)                    H1               i hascall bwd LIR 
BB26 [0016]  2     1 BB24,BB25             1       [157..158)        (finret)    H1   }           i bwd LIR 
-----------------------------------------------------------------------------------------------------------------------------------------

------------ BB01 [???..???), preds={} succs={BB02}
N001 (  0,  0) [000000] ------------                 NOP       void  

------------ BB02 [???..???) -> BB04 (cond), preds={BB01} succs={BB03,BB04}
N001 (  2, 10) [000371] Hc----------       t371 =    CNS_INT(h) long   0x7ffdb6f1d838 global ptr
                                                  /--*  t371   long   
N002 (  4, 12) [000372] nc----------       t372 = *  IND       int   
N003 (  1,  1) [000373] -c----------       t373 =    CNS_INT   int    0
                                                  /--*  t372   int    
                                                  +--*  t373   int    
N004 (  6, 14) [000374] J------N----              *  EQ        void  
N005 (  8, 16) [000494] ------------              *  JTRUE     void  

------------ BB03 [???..???), preds={BB02} succs={BB04}
N001 ( 14,  5) [000375] --C-G-?-----                 CALL help void   HELPER.CORINFO_HELP_DBG_IS_JUST_MY_CODE

------------ BB04 [???..???), preds={BB02,BB03} succs={BB05}

------------ BB05 [000..078) -> BB14 (always), preds={BB04} succs={BB14}
               [000495] ------------                 IL_OFFSET void   IL offset: 0x0
N001 (  1,  1) [000001] ------------                 NO_OP     void  
               [000496] ------------                 IL_OFFSET void   IL offset: 0x1
N001 ( 14,  5) [000002] --CXG-------         t2 =    CALL      long   System.DateTime.get_Now
                                                  /--*  t2     long   
N003 ( 18,  8) [000005] DA-XG-------              *  STORE_LCL_VAR struct<System.DateTime, 8> V19 tmp1         
               [000497] ------------                 IL_OFFSET void   IL offset: 0x6
N001 (  3,  2) [000006] ------------         t6 =    LCL_VAR   struct<System.DateTime, 8> V19 tmp1         
                                                  /--*  t6     struct 
N003 (  7,  5) [000009] DA--G-------              *  STORE_LCL_VAR struct<System.DateTime, 8>(AX) V03 loc1         
               [000498] ------------                 IL_OFFSET void   IL offset: 0x7
N002 (  3,  3) [000011] ------------        t11 =    LCL_VAR_ADDR byref  V03 loc1         
                                                  /--*  t11    byref  
               [000627] ------------       t627 = *  PUTARG_REG byref  REG rcx
                                                  /--*  t627   byref  this in rcx
N003 ( 17, 10) [000012] --CXG-------        t12 = *  CALL      ref    System.DateTime.ToString
                                                  /--*  t12    ref    
N005 ( 21, 13) [000014] DA-XG-------              *  STORE_LCL_VAR ref    V20 tmp2         
               [000499] ------------                 IL_OFFSET void   IL offset: 0xe
N003 (  2, 10) [000380] H-----------       t380 =    CNS_INT(h) long   0xBE2A31F0 "	 Created list"
                                                  /--*  t380   long   
N004 (  4, 12) [000381] #---G-------       t381 = *  IND       ref   
                                                  /--*  t381   ref    
               [000628] ----G-------       t628 = *  PUTARG_REG ref    REG rdx
N005 (  3,  2) [000015] ------------        t15 =    LCL_VAR   ref    V20 tmp2         
                                                  /--*  t15    ref    
               [000629] ------------       t629 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t628   ref    arg1 in rdx
                                                  +--*  t629   ref    arg0 in rcx
N006 ( 21, 21) [000017] --CXG-------        t17 = *  CALL      ref    System.String.Concat
                                                  /--*  t17    ref    
N008 ( 25, 24) [000019] DA-XG-------              *  STORE_LCL_VAR ref    V21 tmp3         
               [000500] ------------                 IL_OFFSET void   IL offset: 0x18
N002 (  3,  2) [000020] ------------        t20 =    LCL_VAR   ref    V21 tmp3         
                                                  /--*  t20    ref    
               [000630] ------------       t630 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t630   ref    arg0 in rcx
N003 ( 17,  8) [000021] --CXG-------              *  CALL      void   System.Console.WriteLine
               [000501] ------------                 IL_OFFSET void   IL offset: 0x1d
N001 (  1,  1) [000022] ------------                 NO_OP     void  
               [000502] ------------                 IL_OFFSET void   IL offset: 0x1e
N002 (  2, 10) [000024] H-----------        t24 =    CNS_INT(h) long   0x7ffdb7022b70 method
                                                  /--*  t24    long   
               [000631] ------------       t631 = *  PUTARG_REG long   REG rcx
                                                  /--*  t631   long   arg0 in rcx
N003 ( 16, 16) [000025] --C---------        t25 = *  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
                                                  /--*  t25    ref    
N005 ( 20, 19) [000027] DA----------              *  STORE_LCL_VAR ref    V22 tmp4         
N002 (  3,  2) [000028] ------------        t28 =    LCL_VAR   ref    V22 tmp4         
                                                  /--*  t28    ref    
               [000632] ------------       t632 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t632   ref    this in rcx
N003 ( 17,  9) [000029] --CXG-------              *  CALL      void   FalseLeakRepro.List..ctor
               [000503] ------------                 IL_OFFSET void   IL offset: 0x24
N001 (  3,  2) [000023] ------------        t23 =    LCL_VAR   ref    V00 this         
                                                  /--*  t23    ref    
N003 (  4,  3) [000388] ------------       t388 = *  LEA(b+8)  byref 
N005 (  3,  2) [000030] ------------        t30 =    LCL_VAR   ref    V22 tmp4         
                                                  /--*  t388   byref  
                                                  +--*  t30    ref    
               [000504] -A-XG-------              *  STOREIND  ref   
               [000505] ------------                 IL_OFFSET void   IL offset: 0x29
N002 (  2, 10) [000036] H-----------        t36 =    CNS_INT(h) long   0x7ffdb6c458b8 token
                                                  /--*  t36    long   
               [000633] ------------       t633 = *  PUTARG_REG long   REG rcx
                                                  /--*  t633   long   arg0 in rcx
N003 ( 16, 16) [000037] --C---------        t37 = *  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
                                                  /--*  t37    ref    
N005 ( 20, 19) [000039] DA----------              *  STORE_LCL_VAR ref    V23 tmp5         
N001 (  3,  2) [000033] ------------        t33 =    LCL_VAR   ref    V00 this         
                                                  /--*  t33    ref    
N003 (  4,  3) [000393] -c----------       t393 = *  LEA(b+8)  byref 
                                                  /--*  t393   byref  
N004 (  6,  5) [000034] ---XG-------        t34 = *  IND       ref   
                                                  /--*  t34    ref    
N006 (  7,  6) [000391] -c----------       t391 = *  LEA(b+8)  byref 
                                                  /--*  t391   byref  
N007 (  9,  8) [000035] ---XG-------        t35 = *  IND       ref   
                                                  /--*  t35    ref    
N009 ( 13, 11) [000043] DA-XG-------              *  STORE_LCL_VAR ref    V24 tmp6         
N002 (  3,  2) [000040] ------------        t40 =    LCL_VAR   ref    V23 tmp5         
                                                  /--*  t40    ref    
               [000634] ------------       t634 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t634   ref    this in rcx
N003 ( 17,  9) [000041] --CXG-------              *  CALL      void   System.Object..ctor
               [000506] ------------                 IL_OFFSET void   IL offset: 0x39
N001 (  3,  2) [000044] ------------        t44 =    LCL_VAR   ref    V24 tmp6         
                                                  /--*  t44    ref    
N003 (  4,  3) [000396] ------------       t396 = *  LEA(b+16) byref 
N005 (  3,  2) [000045] ------------        t45 =    LCL_VAR   ref    V23 tmp5         
                                                  /--*  t396   byref  
                                                  +--*  t45    ref    
               [000507] -A-XG-------              *  STOREIND  ref   
               [000508] ------------                 IL_OFFSET void   IL offset: 0x3e
N002 (  2, 10) [000050] H-----------        t50 =    CNS_INT(h) long   0x7ffdb7026348 token
                                                  /--*  t50    long   
               [000635] ------------       t635 = *  PUTARG_REG long   REG rcx
                                                  /--*  t635   long   arg0 in rcx
N003 ( 16, 16) [000051] --C---------        t51 = *  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
                                                  /--*  t51    ref    
N005 ( 20, 19) [000053] DA----------              *  STORE_LCL_VAR ref    V25 tmp7         
N004 (  3,  2) [000054] ------------        t54 =    LCL_VAR   ref    V25 tmp7         
                                                  /--*  t54    ref    
               [000636] ------------       t636 = *  PUTARG_REG ref    REG rcx
N005 (  3,  2) [000048] ------------        t48 =    LCL_VAR   ref    V00 this         
                                                  /--*  t48    ref    
               [000637] ------------       t637 = *  PUTARG_REG ref    REG rdx
N006 (  2, 10) [000049] H-----------        t49 =    CNS_INT(h) long   0x7ffdb6c613f8 ftn
                                                  /--*  t49    long   
               [000638] ------------       t638 = *  PUTARG_REG long   REG r8
                                                  /--*  t636   ref    this in rcx
                                                  +--*  t637   ref    arg1 in rdx
                                                  +--*  t638   long   arg2 in r8
N007 ( 22, 23) [000055] --CXG-------              *  CALL      void   System.MulticastDelegate.CtorClosed
               [000509] ------------                 IL_OFFSET void   IL offset: 0x4a
N002 (  2, 10) [000057] H-----------        t57 =    CNS_INT(h) long   0x7ffdb6dc4e80 token
                                                  /--*  t57    long   
               [000639] ------------       t639 = *  PUTARG_REG long   REG rcx
                                                  /--*  t639   long   arg0 in rcx
N003 ( 16, 16) [000058] --C---------        t58 = *  CALL help ref    HELPER.CORINFO_HELP_NEWFAST
                                                  /--*  t58    ref    
N005 ( 20, 19) [000060] DA----------              *  STORE_LCL_VAR ref    V26 tmp8         
N003 (  3,  2) [000061] ------------        t61 =    LCL_VAR   ref    V26 tmp8         
                                                  /--*  t61    ref    
               [000640] ------------       t640 = *  PUTARG_REG ref    REG rcx
N004 (  3,  2) [000056] ------------        t56 =    LCL_VAR   ref    V25 tmp7         
                                                  /--*  t56    ref    
               [000641] ------------       t641 = *  PUTARG_REG ref    REG rdx
                                                  /--*  t640   ref    this in rcx
                                                  +--*  t641   ref    arg1 in rdx
N005 ( 20, 12) [000062] --CXG-------              *  CALL      void   System.Threading.Thread..ctor
               [000510] ------------                 IL_OFFSET void   IL offset: 0x4f
N001 (  3,  2) [000063] ------------        t63 =    LCL_VAR   ref    V26 tmp8         
                                                  /--*  t63    ref    
N003 (  7,  5) [000065] DA----------              *  STORE_LCL_VAR ref    V02 loc0         
               [000511] ------------                 IL_OFFSET void   IL offset: 0x50
N002 (  3,  2) [000066] ------------        t66 =    LCL_VAR   ref    V02 loc0         
                                                  /--*  t66    ref    
               [000642] ------------       t642 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t642   ref    this in rcx
N003 ( 17,  9) [000067] --CXG-------              *  CALL nullcheck void   System.Threading.Thread.Start
               [000512] ------------                 IL_OFFSET void   IL offset: 0x56
N001 (  1,  1) [000068] ------------                 NO_OP     void  
               [000513] ------------                 IL_OFFSET void   IL offset: 0x57
N001 ( 14,  5) [000069] --CXG-------        t69 =    CALL      long   System.DateTime.get_Now
                                                  /--*  t69    long   
N003 ( 18,  8) [000072] DA-XG-------              *  STORE_LCL_VAR struct<System.DateTime, 8> V27 tmp9         
               [000514] ------------                 IL_OFFSET void   IL offset: 0x5c
N001 (  3,  2) [000073] ------------        t73 =    LCL_VAR   struct<System.DateTime, 8> V27 tmp9         
                                                  /--*  t73    struct 
N003 (  7,  5) [000076] DA--G-------              *  STORE_LCL_VAR struct<System.DateTime, 8>(AX) V03 loc1         
               [000515] ------------                 IL_OFFSET void   IL offset: 0x5d
N002 (  3,  3) [000078] ------------        t78 =    LCL_VAR_ADDR byref  V03 loc1         
                                                  /--*  t78    byref  
               [000643] ------------       t643 = *  PUTARG_REG byref  REG rcx
                                                  /--*  t643   byref  this in rcx
N003 ( 17, 10) [000079] --CXG-------        t79 = *  CALL      ref    System.DateTime.ToString
                                                  /--*  t79    ref    
N005 ( 21, 13) [000081] DA-XG-------              *  STORE_LCL_VAR ref    V28 tmp10        
               [000516] ------------                 IL_OFFSET void   IL offset: 0x64
N003 (  2, 10) [000406] H-----------       t406 =    CNS_INT(h) long   0xBE2A31F8 "	 Consumer thread started, adding items..."
                                                  /--*  t406   long   
N004 (  4, 12) [000407] #---G-------       t407 = *  IND       ref   
                                                  /--*  t407   ref    
               [000644] ----G-------       t644 = *  PUTARG_REG ref    REG rdx
N005 (  3,  2) [000082] ------------        t82 =    LCL_VAR   ref    V28 tmp10        
                                                  /--*  t82    ref    
               [000645] ------------       t645 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t644   ref    arg1 in rdx
                                                  +--*  t645   ref    arg0 in rcx
N006 ( 21, 21) [000084] --CXG-------        t84 = *  CALL      ref    System.String.Concat
                                                  /--*  t84    ref    
N008 ( 25, 24) [000086] DA-XG-------              *  STORE_LCL_VAR ref    V29 tmp11        
               [000517] ------------                 IL_OFFSET void   IL offset: 0x6e
N002 (  3,  2) [000087] ------------        t87 =    LCL_VAR   ref    V29 tmp11        
                                                  /--*  t87    ref    
               [000646] ------------       t646 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t646   ref    arg0 in rcx
N003 ( 17,  8) [000088] --CXG-------              *  CALL      void   System.Console.WriteLine
               [000518] ------------                 IL_OFFSET void   IL offset: 0x73
N001 (  1,  1) [000089] ------------                 NO_OP     void  
               [000519] ------------                 IL_OFFSET void   IL offset: 0x74
N001 (  1,  1) [000090] ------------        t90 =    CNS_INT   int    0
                                                  /--*  t90    int    
N003 (  5,  4) [000092] DA----------              *  STORE_LCL_VAR int    V04 loc2         
               [000520] ------------                 IL_OFFSET void   IL offset: 0x76
N001 (  0,  0) [000093] ------------                 NOP       void  

------------ BB06 [078..083), preds={BB14} succs={BB07}
               [000521] ------------                 IL_OFFSET void   IL offset: 0x78
N001 (  1,  1) [000103] ------------                 NO_OP     void  
               [000522] ------------                 IL_OFFSET void   IL offset: 0x79
N001 (  3,  2) [000104] ------------       t104 =    LCL_VAR   ref    V00 this         
                                                  /--*  t104   ref    
N003 (  4,  3) [000412] -c----------       t412 = *  LEA(b+8)  byref 
                                                  /--*  t412   byref  
N004 (  6,  5) [000105] ---XG-------       t105 = *  IND       ref   
                                                  /--*  t105   ref    
N006 ( 10,  8) [000107] DA-XG-------              *  STORE_LCL_VAR ref    V05 loc3         
               [000523] ------------                 IL_OFFSET void   IL offset: 0x80
N001 (  1,  1) [000108] ------------       t108 =    CNS_INT   int    0
                                                  /--*  t108   int    
N003 (  5,  4) [000110] DA--G-------              *  STORE_LCL_VAR int   (AX) V06 loc4         

------------ BB07 [083..0D5) -> BB08 (always), preds={BB06} succs={BB08}
               [000524] ------------                 IL_OFFSET void   IL offset: 0x83
N003 (  3,  3) [000113] ------------       t113 =    LCL_VAR_ADDR long   V06 loc4         
                                                  /--*  t113   long   
               [000647] ------------       t647 = *  PUTARG_REG long   REG rdx
N004 (  3,  2) [000111] ------------       t111 =    LCL_VAR   ref    V05 loc3         
                                                  /--*  t111   ref    
               [000648] ------------       t648 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t647   long   arg1 in rdx
                                                  +--*  t648   ref    arg0 in rcx
N005 ( 20, 12) [000114] --CXG-------              *  CALL      void   System.Threading.Monitor.Enter
               [000525] ------------                 IL_OFFSET void   IL offset: 0x8b
N001 (  1,  1) [000115] ------------                 NO_OP     void  
               [000526] ------------                 IL_OFFSET void   IL offset: 0x8c
N001 (  1,  1) [000116] ------------                 NO_OP     void  
               [000527] ------------                 IL_OFFSET void   IL offset: 0x8d
N002 (  2, 10) [000120] H-----------       t120 =    CNS_INT(h) long   0x7ffdb70260c8 method
                                                  /--*  t120   long   
               [000649] ------------       t649 = *  PUTARG_REG long   REG rcx
                                                  /--*  t649   long   arg0 in rcx
N003 ( 16, 16) [000121] --C---------       t121 = *  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
                                                  /--*  t121   ref    
N005 ( 20, 19) [000123] DA----------              *  STORE_LCL_VAR ref    V30 tmp12        
N001 (  3,  2) [000117] ------------       t117 =    LCL_VAR   ref    V00 this         
                                                  /--*  t117   ref    
N003 (  4,  3) [000419] -c----------       t419 = *  LEA(b+8)  byref 
                                                  /--*  t419   byref  
N004 (  6,  5) [000118] ---XG-------       t118 = *  IND       ref   
                                                  /--*  t118   ref    
N006 (  7,  6) [000417] -c----------       t417 = *  LEA(b+8)  byref 
                                                  /--*  t417   byref  
N007 (  9,  8) [000119] ---XG-------       t119 = *  IND       ref   
                                                  /--*  t119   ref    
N009 ( 13, 11) [000127] DA-XG-------              *  STORE_LCL_VAR ref    V31 tmp13        
N002 (  3,  2) [000124] ------------       t124 =    LCL_VAR   ref    V30 tmp12        
                                                  /--*  t124   ref    
               [000650] ------------       t650 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t650   ref    this in rcx
N003 ( 17,  9) [000125] --CXG-------              *  CALL      void   FalseLeakRepro.Node..ctor
               [000528] ------------                 IL_OFFSET void   IL offset: 0x9d
N001 (  3,  2) [000128] ------------       t128 =    LCL_VAR   ref    V31 tmp13        
                                                  /--*  t128   ref    
N003 (  4,  3) [000422] ------------       t422 = *  LEA(b+8)  byref 
N005 (  3,  2) [000129] ------------       t129 =    LCL_VAR   ref    V30 tmp12        
                                                  /--*  t422   byref  
                                                  +--*  t129   ref    
               [000529] -A-XG-------              *  STOREIND  ref   
               [000530] ------------                 IL_OFFSET void   IL offset: 0xa2
N001 (  3,  2) [000132] ------------       t132 =    LCL_VAR   ref    V00 this         
                                                  /--*  t132   ref    
N003 (  4,  3) [000426] -c----------       t426 = *  LEA(b+8)  byref 
                                                  /--*  t426   byref  
N004 (  6,  5) [000133] ---XG-------       t133 = *  IND       ref   
                                                  /--*  t133   ref    
N006 (  7,  6) [000424] ------------       t424 = *  LEA(b+8)  byref 
N008 (  3,  2) [000134] ------------       t134 =    LCL_VAR   ref    V00 this         
                                                  /--*  t134   ref    
N010 (  4,  3) [000432] -c----------       t432 = *  LEA(b+8)  byref 
                                                  /--*  t432   byref  
N011 (  6,  5) [000135] ---XG-------       t135 = *  IND       ref   
                                                  /--*  t135   ref    
N013 (  7,  6) [000430] -c----------       t430 = *  LEA(b+8)  byref 
                                                  /--*  t430   byref  
N014 (  9,  8) [000136] ---XG-------       t136 = *  IND       ref   
                                                  /--*  t136   ref    
N016 ( 10,  9) [000428] -c----------       t428 = *  LEA(b+8)  byref 
                                                  /--*  t428   byref  
N017 ( 12, 11) [000137] ---XG-------       t137 = *  IND       ref   
                                                  /--*  t424   byref  
                                                  +--*  t137   ref    
               [000531] -A-XG-------              *  STOREIND  ref   
               [000532] ------------                 IL_OFFSET void   IL offset: 0xbd
N002 (  2, 10) [000143] H-----------       t143 =    CNS_INT(h) long   0x7ffdb6c458b8 token
                                                  /--*  t143   long   
               [000651] ------------       t651 = *  PUTARG_REG long   REG rcx
                                                  /--*  t651   long   arg0 in rcx
N003 ( 16, 16) [000144] --C---------       t144 = *  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
                                                  /--*  t144   ref    
N005 ( 20, 19) [000146] DA----------              *  STORE_LCL_VAR ref    V32 tmp14        
N001 (  3,  2) [000140] ------------       t140 =    LCL_VAR   ref    V00 this         
                                                  /--*  t140   ref    
N003 (  4,  3) [000437] -c----------       t437 = *  LEA(b+8)  byref 
                                                  /--*  t437   byref  
N004 (  6,  5) [000141] ---XG-------       t141 = *  IND       ref   
                                                  /--*  t141   ref    
N006 (  7,  6) [000435] -c----------       t435 = *  LEA(b+8)  byref 
                                                  /--*  t435   byref  
N007 (  9,  8) [000142] ---XG-------       t142 = *  IND       ref   
                                                  /--*  t142   ref    
N009 ( 13, 11) [000150] DA-XG-------              *  STORE_LCL_VAR ref    V33 tmp15        
N002 (  3,  2) [000147] ------------       t147 =    LCL_VAR   ref    V32 tmp14        
                                                  /--*  t147   ref    
               [000652] ------------       t652 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t652   ref    this in rcx
N003 ( 17,  9) [000148] --CXG-------              *  CALL      void   System.Object..ctor
               [000533] ------------                 IL_OFFSET void   IL offset: 0xcd
N001 (  3,  2) [000151] ------------       t151 =    LCL_VAR   ref    V33 tmp15        
                                                  /--*  t151   ref    
N003 (  4,  3) [000440] ------------       t440 = *  LEA(b+16) byref 
N005 (  3,  2) [000152] ------------       t152 =    LCL_VAR   ref    V32 tmp14        
                                                  /--*  t440   byref  
                                                  +--*  t152   ref    
               [000534] -A-XG-------              *  STOREIND  ref   
               [000535] ------------                 IL_OFFSET void   IL offset: 0xd2
N001 (  1,  1) [000155] ------------                 NO_OP     void  
               [000536] ------------                 IL_OFFSET void   IL offset: 0xd3
N001 (  0,  0) [000156] ------------                 NOP       void  

------------ BB08 [???..???) -> BB10 (callf), preds={BB07} succs={BB10}

------------ BB09 [???..???) -> BB13 (ALWAYS), preds={BB12} succs={BB13}

------------ BB13 [0E1..0E6), preds={BB09} succs={BB14}
               [000537] ------------                 IL_OFFSET void   IL offset: 0xe1
N001 (  1,  1) [000157] ------------                 NO_OP     void  
               [000538] ------------                 IL_OFFSET void   IL offset: 0xe2
N001 (  3,  2) [000158] ------------       t158 =    LCL_VAR   int    V04 loc2         
N002 (  1,  1) [000159] -c----------       t159 =    CNS_INT   int    1
                                                  /--*  t158   int    
                                                  +--*  t159   int    
N003 (  5,  4) [000160] ------------       t160 = *  ADD       int   
                                                  /--*  t160   int    
N005 (  9,  7) [000162] DA----------              *  STORE_LCL_VAR int    V04 loc2         

------------ BB14 [0E6..0F1) -> BB06 (cond), preds={BB05,BB13} succs={BB15,BB06}
               [000539] ------------                 IL_OFFSET void   IL offset: 0xe6
N001 (  3,  2) [000094] -c----------        t94 =    LCL_VAR   int    V04 loc2         
N002 (  1,  1) [000095] -c----------        t95 =    CNS_INT   int    10
                                                  /--*  t94    int    
                                                  +--*  t95    int    
N003 (  8,  4) [000096] ------------        t96 = *  LT        int   
                                                  /--*  t96    int    
N005 ( 12,  7) [000098] DA----------              *  STORE_LCL_VAR int    V07 loc5         
               [000540] ------------                 IL_OFFSET void   IL offset: 0xed
N001 (  3,  2) [000099] -c----------        t99 =    LCL_VAR   int    V07 loc5         
N002 (  1,  1) [000100] -c----------       t100 =    CNS_INT   int    0
                                                  /--*  t99    int    
                                                  +--*  t100   int    
N003 (  5,  4) [000101] J------N----              *  NE        void  
N004 (  7,  6) [000102] ------------              *  JTRUE     void  

------------ BB15 [0F1..110) -> BB28 (always), preds={BB14} succs={BB28}
               [000541] ------------                 IL_OFFSET void   IL offset: 0xf1
N001 ( 14,  5) [000171] --CXG-------       t171 =    CALL      long   System.DateTime.get_Now
                                                  /--*  t171   long   
N003 ( 18,  8) [000174] DA-XG-------              *  STORE_LCL_VAR struct<System.DateTime, 8> V34 tmp16        
               [000542] ------------                 IL_OFFSET void   IL offset: 0xf6
N001 (  3,  2) [000175] ------------       t175 =    LCL_VAR   struct<System.DateTime, 8> V34 tmp16        
                                                  /--*  t175   struct 
N003 (  7,  5) [000178] DA--G-------              *  STORE_LCL_VAR struct<System.DateTime, 8>(AX) V03 loc1         
               [000543] ------------                 IL_OFFSET void   IL offset: 0xf7
N002 (  3,  3) [000180] ------------       t180 =    LCL_VAR_ADDR byref  V03 loc1         
                                                  /--*  t180   byref  
               [000653] ------------       t653 = *  PUTARG_REG byref  REG rcx
                                                  /--*  t653   byref  this in rcx
N003 ( 17, 10) [000181] --CXG-------       t181 = *  CALL      ref    System.DateTime.ToString
                                                  /--*  t181   ref    
N005 ( 21, 13) [000183] DA-XG-------              *  STORE_LCL_VAR ref    V35 tmp17        
               [000544] ------------                 IL_OFFSET void   IL offset: 0xfe
N003 (  2, 10) [000444] H-----------       t444 =    CNS_INT(h) long   0xBE2A3200 "	 Waiting for list processing to complete..."
                                                  /--*  t444   long   
N004 (  4, 12) [000445] #---G-------       t445 = *  IND       ref   
                                                  /--*  t445   ref    
               [000654] ----G-------       t654 = *  PUTARG_REG ref    REG rdx
N005 (  3,  2) [000184] ------------       t184 =    LCL_VAR   ref    V35 tmp17        
                                                  /--*  t184   ref    
               [000655] ------------       t655 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t654   ref    arg1 in rdx
                                                  +--*  t655   ref    arg0 in rcx
N006 ( 21, 21) [000186] --CXG-------       t186 = *  CALL      ref    System.String.Concat
                                                  /--*  t186   ref    
N008 ( 25, 24) [000188] DA-XG-------              *  STORE_LCL_VAR ref    V36 tmp18        
               [000545] ------------                 IL_OFFSET void   IL offset: 0x108
N002 (  3,  2) [000189] ------------       t189 =    LCL_VAR   ref    V36 tmp18        
                                                  /--*  t189   ref    
               [000656] ------------       t656 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t656   ref    arg0 in rcx
N003 ( 17,  8) [000190] --CXG-------              *  CALL      void   System.Console.WriteLine
               [000546] ------------                 IL_OFFSET void   IL offset: 0x10d
N001 (  1,  1) [000191] ------------                 NO_OP     void  
               [000547] ------------                 IL_OFFSET void   IL offset: 0x10e
N001 (  0,  0) [000192] ------------                 NOP       void  

------------ BB16 [110..11C), preds={BB28} succs={BB17}
               [000548] ------------                 IL_OFFSET void   IL offset: 0x110
N001 (  1,  1) [000197] ------------                 NO_OP     void  
               [000549] ------------                 IL_OFFSET void   IL offset: 0x111
N001 (  3,  2) [000198] ------------       t198 =    LCL_VAR   ref    V00 this         
                                                  /--*  t198   ref    
N003 (  4,  3) [000450] -c----------       t450 = *  LEA(b+8)  byref 
                                                  /--*  t450   byref  
N004 (  6,  5) [000199] ---XG-------       t199 = *  IND       ref   
                                                  /--*  t199   ref    
N006 ( 10,  8) [000201] DA-XG-------              *  STORE_LCL_VAR ref    V08 loc6         
               [000550] ------------                 IL_OFFSET void   IL offset: 0x119
N001 (  1,  1) [000202] ------------       t202 =    CNS_INT   int    0
                                                  /--*  t202   int    
N003 (  5,  4) [000204] DA--G-------              *  STORE_LCL_VAR int   (AX) V09 loc7         

------------ BB17 [11C..145) -> BB19 (cond), preds={BB16} succs={BB18,BB19}
               [000551] ------------                 IL_OFFSET void   IL offset: 0x11c
N003 (  3,  3) [000207] ------------       t207 =    LCL_VAR_ADDR long   V09 loc7         
                                                  /--*  t207   long   
               [000657] ------------       t657 = *  PUTARG_REG long   REG rdx
N004 (  3,  2) [000205] ------------       t205 =    LCL_VAR   ref    V08 loc6         
                                                  /--*  t205   ref    
               [000658] ------------       t658 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t657   long   arg1 in rdx
                                                  +--*  t658   ref    arg0 in rcx
N005 ( 20, 12) [000208] --CXG-------              *  CALL      void   System.Threading.Monitor.Enter
               [000552] ------------                 IL_OFFSET void   IL offset: 0x125
N001 (  1,  1) [000209] ------------                 NO_OP     void  
               [000553] ------------                 IL_OFFSET void   IL offset: 0x126
N001 (  1,  1) [000210] ------------                 NO_OP     void  
               [000554] ------------                 IL_OFFSET void   IL offset: 0x127
N001 (  3,  2) [000211] ------------       t211 =    LCL_VAR   ref    V00 this         
                                                  /--*  t211   ref    
N003 (  4,  3) [000456] -c----------       t456 = *  LEA(b+8)  byref 
                                                  /--*  t456   byref  
N004 (  6,  5) [000212] ---XG-------       t212 = *  IND       ref   
                                                  /--*  t212   ref    
N006 (  7,  6) [000454] -c----------       t454 = *  LEA(b+8)  byref 
                                                  /--*  t454   byref  
N007 (  9,  8) [000213] ---XG-------       t213 = *  IND       ref   
N008 (  3,  2) [000214] ------------       t214 =    LCL_VAR   ref    V00 this         
                                                  /--*  t214   ref    
N010 (  4,  3) [000460] -c----------       t460 = *  LEA(b+8)  byref 
                                                  /--*  t460   byref  
N011 (  6,  5) [000215] ---XG-------       t215 = *  IND       ref   
                                                  /--*  t215   ref    
N013 (  7,  6) [000458] -c----------       t458 = *  LEA(b+16) byref 
                                                  /--*  t458   byref  
N014 (  9,  8) [000216] -c-XG-------       t216 = *  IND       ref   
                                                  /--*  t213   ref    
                                                  +--*  t216   ref    
N015 ( 22, 17) [000217] ---XG-------       t217 = *  EQ        int   
                                                  /--*  t217   int    
N017 ( 26, 20) [000219] DA-XG-------              *  STORE_LCL_VAR int    V10 loc8         
               [000555] ------------                 IL_OFFSET void   IL offset: 0x141
N001 (  3,  2) [000220] -c----------       t220 =    LCL_VAR   int    V10 loc8         
N002 (  1,  1) [000221] -c----------       t221 =    CNS_INT   int    0
                                                  /--*  t220   int    
                                                  +--*  t221   int    
N003 (  5,  4) [000222] J------N----              *  EQ        void  
N004 (  7,  6) [000223] ------------              *  JTRUE     void  

------------ BB18 [145..148) -> BB20 (always), preds={BB17} succs={BB20}
               [000556] ------------                 IL_OFFSET void   IL offset: 0x145
N001 (  1,  1) [000230] ------------                 NO_OP     void  
               [000557] ------------                 IL_OFFSET void   IL offset: 0x146
N001 (  0,  0) [000231] ------------                 NOP       void  

------------ BB19 [148..14B) -> BB22 (always), preds={BB17} succs={BB22}
               [000558] ------------                 IL_OFFSET void   IL offset: 0x148
N001 (  1,  1) [000224] ------------                 NO_OP     void  
               [000559] ------------                 IL_OFFSET void   IL offset: 0x149
N001 (  0,  0) [000225] ------------                 NOP       void  

------------ BB20 [???..???) -> BB24 (callf), preds={BB18} succs={BB24}

------------ BB21 [???..???) -> BB29 (ALWAYS), preds={BB26} succs={BB29}

------------ BB22 [???..???) -> BB24 (callf), preds={BB19} succs={BB24}

------------ BB23 [???..???) -> BB27 (ALWAYS), preds={BB26} succs={BB27}

------------ BB27 [158..161), preds={BB23} succs={BB28}
               [000560] ------------                 IL_OFFSET void   IL offset: 0x158
N002 (  1,  1) [000226] ------------       t226 =    CNS_INT   int    100
                                                  /--*  t226   int    
               [000659] ------------       t659 = *  PUTARG_REG int    REG rcx
                                                  /--*  t659   int    arg0 in rcx
N003 ( 15,  7) [000227] --CXG-------              *  CALL      void   System.Threading.Thread.Sleep
               [000561] ------------                 IL_OFFSET void   IL offset: 0x15f
N001 (  1,  1) [000228] ------------                 NO_OP     void  
               [000562] ------------                 IL_OFFSET void   IL offset: 0x160
N001 (  1,  1) [000229] ------------                 NO_OP     void  

------------ BB28 [161..166) -> BB16 (always), preds={BB15,BB27} succs={BB16}
               [000563] ------------                 IL_OFFSET void   IL offset: 0x161
N001 (  1,  1) [000193] -c----------       t193 =    CNS_INT   int    1
                                                  /--*  t193   int    
N003 (  5,  4) [000195] DA----------              *  STORE_LCL_VAR int    V11 loc9         
               [000564] ------------                 IL_OFFSET void   IL offset: 0x164
N001 (  0,  0) [000196] ------------                 NOP       void  

------------ BB29 [166..1B1) -> BB39 (always), preds={BB21} succs={BB39}
               [000565] ------------                 IL_OFFSET void   IL offset: 0x166
N001 ( 14,  5) [000232] --CXG-------       t232 =    CALL      long   System.DateTime.get_Now
                                                  /--*  t232   long   
N003 ( 18,  8) [000235] DA-XG-------              *  STORE_LCL_VAR struct<System.DateTime, 8> V37 tmp19        
               [000566] ------------                 IL_OFFSET void   IL offset: 0x16b
N001 (  3,  2) [000236] ------------       t236 =    LCL_VAR   struct<System.DateTime, 8> V37 tmp19        
                                                  /--*  t236   struct 
N003 (  7,  5) [000239] DA--G-------              *  STORE_LCL_VAR struct<System.DateTime, 8>(AX) V03 loc1         
               [000567] ------------                 IL_OFFSET void   IL offset: 0x16c
N002 (  3,  3) [000241] ------------       t241 =    LCL_VAR_ADDR byref  V03 loc1         
                                                  /--*  t241   byref  
               [000660] ------------       t660 = *  PUTARG_REG byref  REG rcx
                                                  /--*  t660   byref  this in rcx
N003 ( 17, 10) [000242] --CXG-------       t242 = *  CALL      ref    System.DateTime.ToString
                                                  /--*  t242   ref    
N005 ( 21, 13) [000244] DA-XG-------              *  STORE_LCL_VAR ref    V38 tmp20        
               [000568] ------------                 IL_OFFSET void   IL offset: 0x173
N003 (  2, 10) [000466] H-----------       t466 =    CNS_INT(h) long   0xBE2A3208 "	 Done.  Profiler is active, available options:"
                                                  /--*  t466   long   
N004 (  4, 12) [000467] #---G-------       t467 = *  IND       ref   
                                                  /--*  t467   ref    
               [000661] ----G-------       t661 = *  PUTARG_REG ref    REG rdx
N005 (  3,  2) [000245] ------------       t245 =    LCL_VAR   ref    V38 tmp20        
                                                  /--*  t245   ref    
               [000662] ------------       t662 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t661   ref    arg1 in rdx
                                                  +--*  t662   ref    arg0 in rcx
N006 ( 21, 21) [000247] --CXG-------       t247 = *  CALL      ref    System.String.Concat
                                                  /--*  t247   ref    
N008 ( 25, 24) [000249] DA-XG-------              *  STORE_LCL_VAR ref    V39 tmp21        
               [000569] ------------                 IL_OFFSET void   IL offset: 0x17d
N002 (  3,  2) [000250] ------------       t250 =    LCL_VAR   ref    V39 tmp21        
                                                  /--*  t250   ref    
               [000663] ------------       t663 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t663   ref    arg0 in rcx
N003 ( 17,  8) [000251] --CXG-------              *  CALL      void   System.Console.WriteLine
               [000570] ------------                 IL_OFFSET void   IL offset: 0x182
N001 (  1,  1) [000252] ------------                 NO_OP     void  
               [000571] ------------                 IL_OFFSET void   IL offset: 0x183
N002 (  2, 10) [000471] H-----------       t471 =    CNS_INT(h) long   0xBE2A3210 "   Q = quit"
                                                  /--*  t471   long   
N003 (  4, 12) [000472] #---G-------       t472 = *  IND       ref   
                                                  /--*  t472   ref    
               [000664] ----G-------       t664 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t664   ref    arg0 in rcx
N004 ( 18, 18) [000254] --CXG-------              *  CALL      void   System.Console.WriteLine
               [000572] ------------                 IL_OFFSET void   IL offset: 0x18d
N001 (  1,  1) [000255] ------------                 NO_OP     void  
               [000573] ------------                 IL_OFFSET void   IL offset: 0x18e
N002 (  2, 10) [000474] H-----------       t474 =    CNS_INT(h) long   0xBE2A3218 "   H = heap snapshot"
                                                  /--*  t474   long   
N003 (  4, 12) [000475] #---G-------       t475 = *  IND       ref   
                                                  /--*  t475   ref    
               [000665] ----G-------       t665 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t665   ref    arg0 in rcx
N004 ( 18, 18) [000257] --CXG-------              *  CALL      void   System.Console.WriteLine
               [000574] ------------                 IL_OFFSET void   IL offset: 0x198
N001 (  1,  1) [000258] ------------                 NO_OP     void  
               [000575] ------------                 IL_OFFSET void   IL offset: 0x199
N002 (  2, 10) [000477] H-----------       t477 =    CNS_INT(h) long   0xBE2A3220 "   G = GC (max gen)"
                                                  /--*  t477   long   
N003 (  4, 12) [000478] #---G-------       t478 = *  IND       ref   
                                                  /--*  t478   ref    
               [000666] ----G-------       t666 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t666   ref    arg0 in rcx
N004 ( 18, 18) [000260] --CXG-------              *  CALL      void   System.Console.WriteLine
               [000576] ------------                 IL_OFFSET void   IL offset: 0x1a3
N001 (  1,  1) [000261] ------------                 NO_OP     void  
               [000577] ------------                 IL_OFFSET void   IL offset: 0x1a4
N002 (  2, 10) [000480] H-----------       t480 =    CNS_INT(h) long   0xBE2A3228 "   R = clear the running flag to stop the consumer thread"
                                                  /--*  t480   long   
N003 (  4, 12) [000481] #---G-------       t481 = *  IND       ref   
                                                  /--*  t481   ref    
               [000667] ----G-------       t667 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t667   ref    arg0 in rcx
N004 ( 18, 18) [000263] --CXG-------              *  CALL      void   System.Console.WriteLine
               [000578] ------------                 IL_OFFSET void   IL offset: 0x1ae
N001 (  1,  1) [000264] ------------                 NO_OP     void  
               [000579] ------------                 IL_OFFSET void   IL offset: 0x1af
N001 (  0,  0) [000265] ------------                 NOP       void  

------------ BB30 [1B1..1CA) -> BB32 (cond), preds={BB39} succs={BB31,BB32}
               [000580] ------------                 IL_OFFSET void   IL offset: 0x1b1
N001 (  1,  1) [000270] ------------                 NO_OP     void  
               [000581] ------------                 IL_OFFSET void   IL offset: 0x1b2
N002 (  3,  3) [000273] ------------       t273 =    LCL_VAR_ADDR long   V40 tmp22        
                                                  /--*  t273   long   
               [000668] ------------       t668 = *  PUTARG_REG long   REG rcx
                                                  /--*  t668   long   arg0 in rcx
N003 ( 17,  9) [000271] S-CXG-------              *  CALL      void   System.Console.ReadKey
               [000582] ------------                 IL_OFFSET void   IL offset: 0x1b7
N001 (  3,  2) [000274] -c----------       t274 =    LCL_VAR   struct<System.ConsoleKeyInfo, 12>(AX) V40 tmp22        
               [000669] Dc-----N----       t669 =    LCL_VAR_ADDR byref  V12 loc10        
                                                  /--*  t669   byref  
                                                  +--*  t274   struct 
N003 (  7,  5) [000277] sA----------              *  STORE_BLK struct<System.ConsoleKeyInfo, 12> (copy) (Unroll)
               [000583] ------------                 IL_OFFSET void   IL offset: 0x1b9
N002 (  3,  3) [000279] ------------       t279 =    LCL_VAR_ADDR byref  V12 loc10        
                                                  /--*  t279   byref  
               [000670] ------------       t670 = *  PUTARG_REG byref  REG rcx
                                                  /--*  t670   byref  this in rcx
N003 ( 17, 10) [000280] --CXG-------       t280 = *  CALL      int    System.ConsoleKeyInfo.get_Key
                                                  /--*  t280   int    
N005 ( 21, 13) [000282] DA-XG-------              *  STORE_LCL_VAR int    V41 tmp23        
               [000584] ------------                 IL_OFFSET void   IL offset: 0x1c0
N001 (  3,  2) [000283] -c----------       t283 =    LCL_VAR   int    V41 tmp23        
N002 (  1,  1) [000284] -c----------       t284 =    CNS_INT   int    71
                                                  /--*  t283   int    
                                                  +--*  t284   int    
N003 (  8,  4) [000285] ------------       t285 = *  EQ        int   
                                                  /--*  t285   int    
N005 ( 12,  7) [000287] DA----------              *  STORE_LCL_VAR int    V13 loc11        
               [000585] ------------                 IL_OFFSET void   IL offset: 0x1c6
N001 (  3,  2) [000288] -c----------       t288 =    LCL_VAR   int    V13 loc11        
N002 (  1,  1) [000289] -c----------       t289 =    CNS_INT   int    0
                                                  /--*  t288   int    
                                                  +--*  t289   int    
N003 (  5,  4) [000290] J------N----              *  EQ        void  
N004 (  7,  6) [000291] ------------              *  JTRUE     void  

------------ BB31 [1CA..1D9) -> BB38 (always), preds={BB30} succs={BB38}
               [000586] ------------                 IL_OFFSET void   IL offset: 0x1ca
N001 (  1,  1) [000354] ------------                 NO_OP     void  
               [000587] ------------                 IL_OFFSET void   IL offset: 0x1cb
N001 ( 14,  5) [000355] --CXG-------       t355 =    CALL      int    System.GC.get_MaxGeneration
                                                  /--*  t355   int    
N003 ( 18,  8) [000357] DA-XG-------              *  STORE_LCL_VAR int    V45 tmp27        
               [000588] ------------                 IL_OFFSET void   IL offset: 0x1d0
N002 (  3,  2) [000358] ------------       t358 =    LCL_VAR   int    V45 tmp27        
                                                  /--*  t358   int    
               [000671] ------------       t671 = *  PUTARG_REG int    REG rcx
                                                  /--*  t671   int    arg0 in rcx
N003 ( 17,  8) [000359] --CXG-------              *  CALL      void   System.GC.Collect
               [000589] ------------                 IL_OFFSET void   IL offset: 0x1d5
N001 (  1,  1) [000360] ------------                 NO_OP     void  
               [000590] ------------                 IL_OFFSET void   IL offset: 0x1d6
N001 (  1,  1) [000361] ------------                 NO_OP     void  
               [000591] ------------                 IL_OFFSET void   IL offset: 0x1d7
N001 (  0,  0) [000362] ------------                 NOP       void  

------------ BB32 [1D9..1EA) -> BB34 (cond), preds={BB30} succs={BB33,BB34}
               [000592] ------------                 IL_OFFSET void   IL offset: 0x1d9
N002 (  3,  3) [000293] ------------       t293 =    LCL_VAR_ADDR byref  V12 loc10        
                                                  /--*  t293   byref  
               [000672] ------------       t672 = *  PUTARG_REG byref  REG rcx
                                                  /--*  t672   byref  this in rcx
N003 ( 17, 10) [000294] --CXG-------       t294 = *  CALL      int    System.ConsoleKeyInfo.get_Key
                                                  /--*  t294   int    
N005 ( 21, 13) [000296] DA-XG-------              *  STORE_LCL_VAR int    V42 tmp24        
               [000593] ------------                 IL_OFFSET void   IL offset: 0x1e0
N001 (  3,  2) [000297] -c----------       t297 =    LCL_VAR   int    V42 tmp24        
N002 (  1,  1) [000298] -c----------       t298 =    CNS_INT   int    72
                                                  /--*  t297   int    
                                                  +--*  t298   int    
N003 (  8,  4) [000299] ------------       t299 = *  EQ        int   
                                                  /--*  t299   int    
N005 ( 12,  7) [000301] DA----------              *  STORE_LCL_VAR int    V14 loc12        
               [000594] ------------                 IL_OFFSET void   IL offset: 0x1e6
N001 (  3,  2) [000302] -c----------       t302 =    LCL_VAR   int    V14 loc12        
N002 (  1,  1) [000303] -c----------       t303 =    CNS_INT   int    0
                                                  /--*  t302   int    
                                                  +--*  t303   int    
N003 (  5,  4) [000304] J------N----              *  EQ        void  
N004 (  7,  6) [000305] ------------              *  JTRUE     void  

------------ BB33 [1EA..1F4) -> BB38 (always), preds={BB32} succs={BB38}
               [000595] ------------                 IL_OFFSET void   IL offset: 0x1ea
N001 (  1,  1) [000349] ------------                 NO_OP     void  
               [000596] ------------                 IL_OFFSET void   IL offset: 0x1eb
N001 ( 14,  5) [000350] --CXG-------                 CALL      void   System.Diagnostics.Debugger.Break
               [000597] ------------                 IL_OFFSET void   IL offset: 0x1f0
N001 (  1,  1) [000351] ------------                 NO_OP     void  
               [000598] ------------                 IL_OFFSET void   IL offset: 0x1f1
N001 (  1,  1) [000352] ------------                 NO_OP     void  
               [000599] ------------                 IL_OFFSET void   IL offset: 0x1f2
N001 (  0,  0) [000353] ------------                 NOP       void  

------------ BB34 [1F4..205) -> BB36 (cond), preds={BB32} succs={BB35,BB36}
               [000600] ------------                 IL_OFFSET void   IL offset: 0x1f4
N002 (  3,  3) [000307] ------------       t307 =    LCL_VAR_ADDR byref  V12 loc10        
                                                  /--*  t307   byref  
               [000673] ------------       t673 = *  PUTARG_REG byref  REG rcx
                                                  /--*  t673   byref  this in rcx
N003 ( 17, 10) [000308] --CXG-------       t308 = *  CALL      int    System.ConsoleKeyInfo.get_Key
                                                  /--*  t308   int    
N005 ( 21, 13) [000310] DA-XG-------              *  STORE_LCL_VAR int    V43 tmp25        
               [000601] ------------                 IL_OFFSET void   IL offset: 0x1fb
N001 (  3,  2) [000311] -c----------       t311 =    LCL_VAR   int    V43 tmp25        
N002 (  1,  1) [000312] -c----------       t312 =    CNS_INT   int    82
                                                  /--*  t311   int    
                                                  +--*  t312   int    
N003 (  8,  4) [000313] ------------       t313 = *  EQ        int   
                                                  /--*  t313   int    
N005 ( 12,  7) [000315] DA----------              *  STORE_LCL_VAR int    V15 loc13        
               [000602] ------------                 IL_OFFSET void   IL offset: 0x201
N001 (  3,  2) [000316] -c----------       t316 =    LCL_VAR   int    V15 loc13        
N002 (  1,  1) [000317] -c----------       t317 =    CNS_INT   int    0
                                                  /--*  t316   int    
                                                  +--*  t317   int    
N003 (  5,  4) [000318] J------N----              *  EQ        void  
N004 (  7,  6) [000319] ------------              *  JTRUE     void  

------------ BB35 [205..210) -> BB38 (always), preds={BB34} succs={BB38}
               [000603] ------------                 IL_OFFSET void   IL offset: 0x205
N001 (  1,  1) [000342] ------------                 NO_OP     void  
               [000604] ------------                 IL_OFFSET void   IL offset: 0x206
N001 (  3,  2) [000343] ------------       t343 =    LCL_VAR   ref    V00 this         
                                                  /--*  t343   ref    
N003 (  4,  3) [000489] -c----------       t489 = *  LEA(b+16) byref 
N005 (  1,  1) [000344] -c----------       t344 =    CNS_INT   int    0
                                                  /--*  t489   byref  
                                                  +--*  t344   int    
               [000605] -A-XG-------              *  STOREIND  bool  
               [000606] ------------                 IL_OFFSET void   IL offset: 0x20d
N001 (  1,  1) [000347] ------------                 NO_OP     void  
               [000607] ------------                 IL_OFFSET void   IL offset: 0x20e
N001 (  0,  0) [000348] ------------                 NOP       void  

------------ BB36 [210..221) -> BB38 (cond), preds={BB34} succs={BB37,BB38}
               [000608] ------------                 IL_OFFSET void   IL offset: 0x210
N002 (  3,  3) [000321] ------------       t321 =    LCL_VAR_ADDR byref  V12 loc10        
                                                  /--*  t321   byref  
               [000674] ------------       t674 = *  PUTARG_REG byref  REG rcx
                                                  /--*  t674   byref  this in rcx
N003 ( 17, 10) [000322] --CXG-------       t322 = *  CALL      int    System.ConsoleKeyInfo.get_Key
                                                  /--*  t322   int    
N005 ( 21, 13) [000324] DA-XG-------              *  STORE_LCL_VAR int    V44 tmp26        
               [000609] ------------                 IL_OFFSET void   IL offset: 0x217
N001 (  3,  2) [000325] -c----------       t325 =    LCL_VAR   int    V44 tmp26        
N002 (  1,  1) [000326] -c----------       t326 =    CNS_INT   int    81
                                                  /--*  t325   int    
                                                  +--*  t326   int    
N003 (  8,  4) [000327] ------------       t327 = *  EQ        int   
                                                  /--*  t327   int    
N005 ( 12,  7) [000329] DA----------              *  STORE_LCL_VAR int    V16 loc14        
               [000610] ------------                 IL_OFFSET void   IL offset: 0x21d
N001 (  3,  2) [000330] -c----------       t330 =    LCL_VAR   int    V16 loc14        
N002 (  1,  1) [000331] -c----------       t331 =    CNS_INT   int    0
                                                  /--*  t330   int    
                                                  +--*  t331   int    
N003 (  5,  4) [000332] J------N----              *  EQ        void  
N004 (  7,  6) [000333] ------------              *  JTRUE     void  

------------ BB37 [221..224) -> BB40 (always), preds={BB36} succs={BB40}
               [000611] ------------                 IL_OFFSET void   IL offset: 0x221
N001 (  1,  1) [000335] ------------                 NO_OP     void  
               [000612] ------------                 IL_OFFSET void   IL offset: 0x222
N001 (  0,  0) [000336] ------------                 NOP       void  

------------ BB38 [224..225), preds={BB31,BB33,BB35,BB36} succs={BB39}
               [000613] ------------                 IL_OFFSET void   IL offset: 0x224
N001 (  1,  1) [000334] ------------                 NO_OP     void  

------------ BB39 [225..22A) -> BB30 (always), preds={BB29,BB38} succs={BB30}
               [000614] ------------                 IL_OFFSET void   IL offset: 0x225
N001 (  1,  1) [000266] -c----------       t266 =    CNS_INT   int    1
                                                  /--*  t266   int    
N003 (  5,  4) [000268] DA----------              *  STORE_LCL_VAR int    V17 loc15        
               [000615] ------------                 IL_OFFSET void   IL offset: 0x228
N001 (  0,  0) [000269] ------------                 NOP       void  

------------ BB40 [22A..232) (return), preds={BB37} succs={}
               [000616] ------------                 IL_OFFSET void   IL offset: 0x22a
N001 (  3,  2) [000337] ------------       t337 =    LCL_VAR   ref    V00 this         
                                                  /--*  t337   ref    
N003 (  4,  3) [000493] -c----------       t493 = *  LEA(b+16) byref 
N005 (  1,  1) [000338] -c----------       t338 =    CNS_INT   int    0
                                                  /--*  t493   byref  
                                                  +--*  t338   int    
               [000617] -A-XG-------              *  STOREIND  bool  
               [000618] ------------                 IL_OFFSET void   IL offset: 0x231
N001 (  0,  0) [000341] ------------                 RETURN    void  

------------ BB10 [0D5..0D9) -> BB12 (cond), preds={BB08} succs={BB11,BB12}
               [000619] ------------                 IL_OFFSET void   IL offset: 0xd5
N001 (  3,  2) [000163] ------------       t163 =    LCL_VAR   int   (AX) V06 loc4         
                                                  /--*  t163   int    
N002 (  4,  4) [000441] ----G-------       t441 = *  CAST      int <- bool <- int
N003 (  1,  1) [000164] -c----------       t164 =    CNS_INT   int    0
                                                  /--*  t441   int    
                                                  +--*  t164   int    
N004 (  6,  6) [000165] J---G--N----              *  EQ        void  
N005 (  8,  8) [000166] ----G-------              *  JTRUE     void  

------------ BB11 [0D9..0E0), preds={BB10} succs={BB12}
               [000620] ------------                 IL_OFFSET void   IL offset: 0xd9
N002 (  3,  2) [000168] ------------       t168 =    LCL_VAR   ref    V05 loc3         
                                                  /--*  t168   ref    
               [000675] ------------       t675 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t675   ref    arg0 in rcx
N003 ( 17,  8) [000169] --CXG-------              *  CALL      void   System.Threading.Monitor.Exit
               [000621] ------------                 IL_OFFSET void   IL offset: 0xdf
N001 (  1,  1) [000170] ------------                 NO_OP     void  

------------ BB12 [0E0..0E1) (finret), preds={BB10,BB11} succs={BB09}
               [000622] ------------                 IL_OFFSET void   IL offset: 0xe0
N001 (  0,  0) [000167] ------------                 RETFILT   void  

------------ BB24 [14B..14F) -> BB26 (cond), preds={BB20,BB22} succs={BB25,BB26}
               [000623] ------------                 IL_OFFSET void   IL offset: 0x14b
N001 (  3,  2) [000363] ------------       t363 =    LCL_VAR   int   (AX) V09 loc7         
                                                  /--*  t363   int    
N002 (  4,  4) [000461] ----G-------       t461 = *  CAST      int <- bool <- int
N003 (  1,  1) [000364] -c----------       t364 =    CNS_INT   int    0
                                                  /--*  t461   int    
                                                  +--*  t364   int    
N004 (  6,  6) [000365] J---G--N----              *  EQ        void  
N005 (  8,  8) [000366] ----G-------              *  JTRUE     void  

------------ BB25 [14F..157), preds={BB24} succs={BB26}
               [000624] ------------                 IL_OFFSET void   IL offset: 0x14f
N002 (  3,  2) [000368] ------------       t368 =    LCL_VAR   ref    V08 loc6         
                                                  /--*  t368   ref    
               [000676] ------------       t676 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t676   ref    arg0 in rcx
N003 ( 17,  8) [000369] --CXG-------              *  CALL      void   System.Threading.Monitor.Exit
               [000625] ------------                 IL_OFFSET void   IL offset: 0x156
N001 (  1,  1) [000370] ------------                 NO_OP     void  

------------ BB26 [157..158) (finret), preds={BB24,BB25} succs={BB21,BB23}
               [000626] ------------                 IL_OFFSET void   IL offset: 0x157
N001 (  0,  0) [000367] ------------                 RETFILT   void  

-------------------------------------------------------------------------------------------------------------------
*************** In fgDebugCheckBBlist
Trees before Calculate stack level slots

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [???..???)                                     i internal hascall LIR 
BB02 [0038]  1       BB01                  1       [???..???)-> BB04 ( cond )                     internal LIR 
BB03 [0039]  1       BB02                  0.50    [???..???)                                     internal LIR 
BB04 [0037]  2       BB02,BB03             1       [???..???)                                     i internal hascall LIR 
BB05 [0001]  1       BB04                  1       [000..078)-> BB14 (always)                     i hascall gcsafe newobj LIR 
BB06 [0002]  1       BB14                  1       [078..083)                                     i bwd bwd-target LIR 
BB07 [0003]  1  0    BB06                  1       [083..0D5)-> BB08 (always) T0      try { }     keep i try hascall gcsafe newobj bwd LIR 
BB08 [0031]  1       BB07                  1       [???..???)-> BB10 (callf )                     i internal LIR 
BB09 [0032]  1       BB12                  1       [???..???)-> BB13 (ALWAYS)                     i internal LIR KEEP 
BB13 [0007]  1       BB09                  1       [0E1..0E6)                                     i bwd LIR 
BB14 [0008]  2       BB05,BB13             1       [0E6..0F1)-> BB06 ( cond )                     i bwd LIR 
BB15 [0009]  1       BB14                  1       [0F1..110)-> BB28 (always)                     i hascall gcsafe LIR 
BB16 [0010]  1       BB28                  1       [110..11C)                                     i bwd bwd-target LIR 
BB17 [0011]  1  1    BB16                  1       [11C..145)-> BB19 ( cond ) T1      try {       keep i try hascall gcsafe bwd LIR 
BB18 [0012]  1  1    BB17                  1       [145..148)-> BB20 (always) T1                  i bwd LIR 
BB19 [0013]  1  1    BB17                  1       [148..14B)-> BB22 (always) T1      }           i bwd LIR 
BB20 [0035]  1       BB18                  1       [???..???)-> BB24 (callf )                     i internal LIR 
BB21 [0036]  1       BB26                  1       [???..???)-> BB29 (ALWAYS)                     i internal LIR KEEP 
BB22 [0033]  1       BB19                  1       [???..???)-> BB24 (callf )                     i internal LIR 
BB23 [0034]  1       BB26                  1       [???..???)-> BB27 (ALWAYS)                     i internal LIR KEEP 
BB27 [0017]  1       BB23                  1       [158..161)                                     i hascall gcsafe bwd LIR 
BB28 [0018]  2       BB15,BB27             1       [161..166)-> BB16 (always)                     i bwd LIR 
BB29 [0019]  1       BB21                  1       [166..1B1)-> BB39 (always)                     i hascall gcsafe LIR 
BB30 [0020]  1       BB39                  1       [1B1..1CA)-> BB32 ( cond )                     i hascall gcsafe bwd bwd-target LIR 
BB31 [0021]  1       BB30                  1       [1CA..1D9)-> BB38 (always)                     i hascall gcsafe bwd LIR 
BB32 [0022]  1       BB30                  1       [1D9..1EA)-> BB34 ( cond )                     i hascall gcsafe bwd LIR 
BB33 [0023]  1       BB32                  1       [1EA..1F4)-> BB38 (always)                     i hascall gcsafe bwd LIR 
BB34 [0024]  1       BB32                  1       [1F4..205)-> BB36 ( cond )                     i hascall gcsafe bwd LIR 
BB35 [0025]  1       BB34                  1       [205..210)-> BB38 (always)                     i bwd LIR 
BB36 [0026]  1       BB34                  1       [210..221)-> BB38 ( cond )                     i hascall gcsafe bwd LIR 
BB37 [0027]  1       BB36                  1       [221..224)-> BB40 (always)                     i bwd LIR 
BB38 [0028]  4       BB31,BB33,BB35,BB36   1       [224..225)                                     i bwd LIR 
BB39 [0029]  2       BB29,BB38             1       [225..22A)-> BB30 (always)                     i bwd LIR 
BB40 [0030]  1       BB37                  1       [22A..232)        (return)                     i LIR 
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ funclets follow
BB10 [0004]  2     0 BB08                  1       [0D5..0D9)-> BB12 ( cond )    H0 F finally {   keep i flet bwd LIR 
BB11 [0005]  1     0 BB10                  1       [0D9..0E0)                    H0               i hascall bwd LIR 
BB12 [0006]  2     0 BB10,BB11             1       [0E0..0E1)        (finret)    H0   }           i bwd LIR 
BB24 [0014]  3     1 BB20,BB22             1       [14B..14F)-> BB26 ( cond )    H1 F finally {   keep i flet bwd LIR 
BB25 [0015]  1     1 BB24                  1       [14F..157)                    H1               i hascall bwd LIR 
BB26 [0016]  2     1 BB24,BB25             1       [157..158)        (finret)    H1   }           i bwd LIR 
-----------------------------------------------------------------------------------------------------------------------------------------

------------ BB01 [???..???), preds={} succs={BB02}
N001 (  0,  0) [000000] ------------                 NOP       void  

------------ BB02 [???..???) -> BB04 (cond), preds={BB01} succs={BB03,BB04}
N001 (  2, 10) [000371] Hc----------       t371 =    CNS_INT(h) long   0x7ffdb6f1d838 global ptr
                                                  /--*  t371   long   
N002 (  4, 12) [000372] nc----------       t372 = *  IND       int   
N003 (  1,  1) [000373] -c----------       t373 =    CNS_INT   int    0
                                                  /--*  t372   int    
                                                  +--*  t373   int    
N004 (  6, 14) [000374] J------N----              *  EQ        void  
N005 (  8, 16) [000494] ------------              *  JTRUE     void  

------------ BB03 [???..???), preds={BB02} succs={BB04}
N001 ( 14,  5) [000375] --C-G-?-----                 CALL help void   HELPER.CORINFO_HELP_DBG_IS_JUST_MY_CODE

------------ BB04 [???..???), preds={BB02,BB03} succs={BB05}

------------ BB05 [000..078) -> BB14 (always), preds={BB04} succs={BB14}
               [000495] ------------                 IL_OFFSET void   IL offset: 0x0
N001 (  1,  1) [000001] ------------                 NO_OP     void  
               [000496] ------------                 IL_OFFSET void   IL offset: 0x1
N001 ( 14,  5) [000002] --CXG-------         t2 =    CALL      long   System.DateTime.get_Now
                                                  /--*  t2     long   
N003 ( 18,  8) [000005] DA-XG-------              *  STORE_LCL_VAR struct<System.DateTime, 8> V19 tmp1         
               [000497] ------------                 IL_OFFSET void   IL offset: 0x6
N001 (  3,  2) [000006] ------------         t6 =    LCL_VAR   struct<System.DateTime, 8> V19 tmp1         
                                                  /--*  t6     struct 
N003 (  7,  5) [000009] DA--G-------              *  STORE_LCL_VAR struct<System.DateTime, 8>(AX) V03 loc1         
               [000498] ------------                 IL_OFFSET void   IL offset: 0x7
N002 (  3,  3) [000011] ------------        t11 =    LCL_VAR_ADDR byref  V03 loc1         
                                                  /--*  t11    byref  
               [000627] ------------       t627 = *  PUTARG_REG byref  REG rcx
                                                  /--*  t627   byref  this in rcx
N003 ( 17, 10) [000012] --CXG-------        t12 = *  CALL      ref    System.DateTime.ToString
                                                  /--*  t12    ref    
N005 ( 21, 13) [000014] DA-XG-------              *  STORE_LCL_VAR ref    V20 tmp2         
               [000499] ------------                 IL_OFFSET void   IL offset: 0xe
N003 (  2, 10) [000380] H-----------       t380 =    CNS_INT(h) long   0xBE2A31F0 "	 Created list"
                                                  /--*  t380   long   
N004 (  4, 12) [000381] #---G-------       t381 = *  IND       ref   
                                                  /--*  t381   ref    
               [000628] ----G-------       t628 = *  PUTARG_REG ref    REG rdx
N005 (  3,  2) [000015] ------------        t15 =    LCL_VAR   ref    V20 tmp2         
                                                  /--*  t15    ref    
               [000629] ------------       t629 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t628   ref    arg1 in rdx
                                                  +--*  t629   ref    arg0 in rcx
N006 ( 21, 21) [000017] --CXG-------        t17 = *  CALL      ref    System.String.Concat
                                                  /--*  t17    ref    
N008 ( 25, 24) [000019] DA-XG-------              *  STORE_LCL_VAR ref    V21 tmp3         
               [000500] ------------                 IL_OFFSET void   IL offset: 0x18
N002 (  3,  2) [000020] ------------        t20 =    LCL_VAR   ref    V21 tmp3         
                                                  /--*  t20    ref    
               [000630] ------------       t630 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t630   ref    arg0 in rcx
N003 ( 17,  8) [000021] --CXG-------              *  CALL      void   System.Console.WriteLine
               [000501] ------------                 IL_OFFSET void   IL offset: 0x1d
N001 (  1,  1) [000022] ------------                 NO_OP     void  
               [000502] ------------                 IL_OFFSET void   IL offset: 0x1e
N002 (  2, 10) [000024] H-----------        t24 =    CNS_INT(h) long   0x7ffdb7022b70 method
                                                  /--*  t24    long   
               [000631] ------------       t631 = *  PUTARG_REG long   REG rcx
                                                  /--*  t631   long   arg0 in rcx
N003 ( 16, 16) [000025] --C---------        t25 = *  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
                                                  /--*  t25    ref    
N005 ( 20, 19) [000027] DA----------              *  STORE_LCL_VAR ref    V22 tmp4         
N002 (  3,  2) [000028] ------------        t28 =    LCL_VAR   ref    V22 tmp4         
                                                  /--*  t28    ref    
               [000632] ------------       t632 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t632   ref    this in rcx
N003 ( 17,  9) [000029] --CXG-------              *  CALL      void   FalseLeakRepro.List..ctor
               [000503] ------------                 IL_OFFSET void   IL offset: 0x24
N001 (  3,  2) [000023] ------------        t23 =    LCL_VAR   ref    V00 this         
                                                  /--*  t23    ref    
N003 (  4,  3) [000388] ------------       t388 = *  LEA(b+8)  byref 
N005 (  3,  2) [000030] ------------        t30 =    LCL_VAR   ref    V22 tmp4         
                                                  /--*  t388   byref  
                                                  +--*  t30    ref    
               [000504] -A-XG-------              *  STOREIND  ref   
               [000505] ------------                 IL_OFFSET void   IL offset: 0x29
N002 (  2, 10) [000036] H-----------        t36 =    CNS_INT(h) long   0x7ffdb6c458b8 token
                                                  /--*  t36    long   
               [000633] ------------       t633 = *  PUTARG_REG long   REG rcx
                                                  /--*  t633   long   arg0 in rcx
N003 ( 16, 16) [000037] --C---------        t37 = *  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
                                                  /--*  t37    ref    
N005 ( 20, 19) [000039] DA----------              *  STORE_LCL_VAR ref    V23 tmp5         
N001 (  3,  2) [000033] ------------        t33 =    LCL_VAR   ref    V00 this         
                                                  /--*  t33    ref    
N003 (  4,  3) [000393] -c----------       t393 = *  LEA(b+8)  byref 
                                                  /--*  t393   byref  
N004 (  6,  5) [000034] ---XG-------        t34 = *  IND       ref   
                                                  /--*  t34    ref    
N006 (  7,  6) [000391] -c----------       t391 = *  LEA(b+8)  byref 
                                                  /--*  t391   byref  
N007 (  9,  8) [000035] ---XG-------        t35 = *  IND       ref   
                                                  /--*  t35    ref    
N009 ( 13, 11) [000043] DA-XG-------              *  STORE_LCL_VAR ref    V24 tmp6         
N002 (  3,  2) [000040] ------------        t40 =    LCL_VAR   ref    V23 tmp5         
                                                  /--*  t40    ref    
               [000634] ------------       t634 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t634   ref    this in rcx
N003 ( 17,  9) [000041] --CXG-------              *  CALL      void   System.Object..ctor
               [000506] ------------                 IL_OFFSET void   IL offset: 0x39
N001 (  3,  2) [000044] ------------        t44 =    LCL_VAR   ref    V24 tmp6         
                                                  /--*  t44    ref    
N003 (  4,  3) [000396] ------------       t396 = *  LEA(b+16) byref 
N005 (  3,  2) [000045] ------------        t45 =    LCL_VAR   ref    V23 tmp5         
                                                  /--*  t396   byref  
                                                  +--*  t45    ref    
               [000507] -A-XG-------              *  STOREIND  ref   
               [000508] ------------                 IL_OFFSET void   IL offset: 0x3e
N002 (  2, 10) [000050] H-----------        t50 =    CNS_INT(h) long   0x7ffdb7026348 token
                                                  /--*  t50    long   
               [000635] ------------       t635 = *  PUTARG_REG long   REG rcx
                                                  /--*  t635   long   arg0 in rcx
N003 ( 16, 16) [000051] --C---------        t51 = *  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
                                                  /--*  t51    ref    
N005 ( 20, 19) [000053] DA----------              *  STORE_LCL_VAR ref    V25 tmp7         
N004 (  3,  2) [000054] ------------        t54 =    LCL_VAR   ref    V25 tmp7         
                                                  /--*  t54    ref    
               [000636] ------------       t636 = *  PUTARG_REG ref    REG rcx
N005 (  3,  2) [000048] ------------        t48 =    LCL_VAR   ref    V00 this         
                                                  /--*  t48    ref    
               [000637] ------------       t637 = *  PUTARG_REG ref    REG rdx
N006 (  2, 10) [000049] H-----------        t49 =    CNS_INT(h) long   0x7ffdb6c613f8 ftn
                                                  /--*  t49    long   
               [000638] ------------       t638 = *  PUTARG_REG long   REG r8
                                                  /--*  t636   ref    this in rcx
                                                  +--*  t637   ref    arg1 in rdx
                                                  +--*  t638   long   arg2 in r8
N007 ( 22, 23) [000055] --CXG-------              *  CALL      void   System.MulticastDelegate.CtorClosed
               [000509] ------------                 IL_OFFSET void   IL offset: 0x4a
N002 (  2, 10) [000057] H-----------        t57 =    CNS_INT(h) long   0x7ffdb6dc4e80 token
                                                  /--*  t57    long   
               [000639] ------------       t639 = *  PUTARG_REG long   REG rcx
                                                  /--*  t639   long   arg0 in rcx
N003 ( 16, 16) [000058] --C---------        t58 = *  CALL help ref    HELPER.CORINFO_HELP_NEWFAST
                                                  /--*  t58    ref    
N005 ( 20, 19) [000060] DA----------              *  STORE_LCL_VAR ref    V26 tmp8         
N003 (  3,  2) [000061] ------------        t61 =    LCL_VAR   ref    V26 tmp8         
                                                  /--*  t61    ref    
               [000640] ------------       t640 = *  PUTARG_REG ref    REG rcx
N004 (  3,  2) [000056] ------------        t56 =    LCL_VAR   ref    V25 tmp7         
                                                  /--*  t56    ref    
               [000641] ------------       t641 = *  PUTARG_REG ref    REG rdx
                                                  /--*  t640   ref    this in rcx
                                                  +--*  t641   ref    arg1 in rdx
N005 ( 20, 12) [000062] --CXG-------              *  CALL      void   System.Threading.Thread..ctor
               [000510] ------------                 IL_OFFSET void   IL offset: 0x4f
N001 (  3,  2) [000063] ------------        t63 =    LCL_VAR   ref    V26 tmp8         
                                                  /--*  t63    ref    
N003 (  7,  5) [000065] DA----------              *  STORE_LCL_VAR ref    V02 loc0         
               [000511] ------------                 IL_OFFSET void   IL offset: 0x50
N002 (  3,  2) [000066] ------------        t66 =    LCL_VAR   ref    V02 loc0         
                                                  /--*  t66    ref    
               [000642] ------------       t642 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t642   ref    this in rcx
N003 ( 17,  9) [000067] --CXG-------              *  CALL nullcheck void   System.Threading.Thread.Start
               [000512] ------------                 IL_OFFSET void   IL offset: 0x56
N001 (  1,  1) [000068] ------------                 NO_OP     void  
               [000513] ------------                 IL_OFFSET void   IL offset: 0x57
N001 ( 14,  5) [000069] --CXG-------        t69 =    CALL      long   System.DateTime.get_Now
                                                  /--*  t69    long   
N003 ( 18,  8) [000072] DA-XG-------              *  STORE_LCL_VAR struct<System.DateTime, 8> V27 tmp9         
               [000514] ------------                 IL_OFFSET void   IL offset: 0x5c
N001 (  3,  2) [000073] ------------        t73 =    LCL_VAR   struct<System.DateTime, 8> V27 tmp9         
                                                  /--*  t73    struct 
N003 (  7,  5) [000076] DA--G-------              *  STORE_LCL_VAR struct<System.DateTime, 8>(AX) V03 loc1         
               [000515] ------------                 IL_OFFSET void   IL offset: 0x5d
N002 (  3,  3) [000078] ------------        t78 =    LCL_VAR_ADDR byref  V03 loc1         
                                                  /--*  t78    byref  
               [000643] ------------       t643 = *  PUTARG_REG byref  REG rcx
                                                  /--*  t643   byref  this in rcx
N003 ( 17, 10) [000079] --CXG-------        t79 = *  CALL      ref    System.DateTime.ToString
                                                  /--*  t79    ref    
N005 ( 21, 13) [000081] DA-XG-------              *  STORE_LCL_VAR ref    V28 tmp10        
               [000516] ------------                 IL_OFFSET void   IL offset: 0x64
N003 (  2, 10) [000406] H-----------       t406 =    CNS_INT(h) long   0xBE2A31F8 "	 Consumer thread started, adding items..."
                                                  /--*  t406   long   
N004 (  4, 12) [000407] #---G-------       t407 = *  IND       ref   
                                                  /--*  t407   ref    
               [000644] ----G-------       t644 = *  PUTARG_REG ref    REG rdx
N005 (  3,  2) [000082] ------------        t82 =    LCL_VAR   ref    V28 tmp10        
                                                  /--*  t82    ref    
               [000645] ------------       t645 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t644   ref    arg1 in rdx
                                                  +--*  t645   ref    arg0 in rcx
N006 ( 21, 21) [000084] --CXG-------        t84 = *  CALL      ref    System.String.Concat
                                                  /--*  t84    ref    
N008 ( 25, 24) [000086] DA-XG-------              *  STORE_LCL_VAR ref    V29 tmp11        
               [000517] ------------                 IL_OFFSET void   IL offset: 0x6e
N002 (  3,  2) [000087] ------------        t87 =    LCL_VAR   ref    V29 tmp11        
                                                  /--*  t87    ref    
               [000646] ------------       t646 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t646   ref    arg0 in rcx
N003 ( 17,  8) [000088] --CXG-------              *  CALL      void   System.Console.WriteLine
               [000518] ------------                 IL_OFFSET void   IL offset: 0x73
N001 (  1,  1) [000089] ------------                 NO_OP     void  
               [000519] ------------                 IL_OFFSET void   IL offset: 0x74
N001 (  1,  1) [000090] ------------        t90 =    CNS_INT   int    0
                                                  /--*  t90    int    
N003 (  5,  4) [000092] DA----------              *  STORE_LCL_VAR int    V04 loc2         
               [000520] ------------                 IL_OFFSET void   IL offset: 0x76
N001 (  0,  0) [000093] ------------                 NOP       void  

------------ BB06 [078..083), preds={BB14} succs={BB07}
               [000521] ------------                 IL_OFFSET void   IL offset: 0x78
N001 (  1,  1) [000103] ------------                 NO_OP     void  
               [000522] ------------                 IL_OFFSET void   IL offset: 0x79
N001 (  3,  2) [000104] ------------       t104 =    LCL_VAR   ref    V00 this         
                                                  /--*  t104   ref    
N003 (  4,  3) [000412] -c----------       t412 = *  LEA(b+8)  byref 
                                                  /--*  t412   byref  
N004 (  6,  5) [000105] ---XG-------       t105 = *  IND       ref   
                                                  /--*  t105   ref    
N006 ( 10,  8) [000107] DA-XG-------              *  STORE_LCL_VAR ref    V05 loc3         
               [000523] ------------                 IL_OFFSET void   IL offset: 0x80
N001 (  1,  1) [000108] ------------       t108 =    CNS_INT   int    0
                                                  /--*  t108   int    
N003 (  5,  4) [000110] DA--G-------              *  STORE_LCL_VAR int   (AX) V06 loc4         

------------ BB07 [083..0D5) -> BB08 (always), preds={BB06} succs={BB08}
               [000524] ------------                 IL_OFFSET void   IL offset: 0x83
N003 (  3,  3) [000113] ------------       t113 =    LCL_VAR_ADDR long   V06 loc4         
                                                  /--*  t113   long   
               [000647] ------------       t647 = *  PUTARG_REG long   REG rdx
N004 (  3,  2) [000111] ------------       t111 =    LCL_VAR   ref    V05 loc3         
                                                  /--*  t111   ref    
               [000648] ------------       t648 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t647   long   arg1 in rdx
                                                  +--*  t648   ref    arg0 in rcx
N005 ( 20, 12) [000114] --CXG-------              *  CALL      void   System.Threading.Monitor.Enter
               [000525] ------------                 IL_OFFSET void   IL offset: 0x8b
N001 (  1,  1) [000115] ------------                 NO_OP     void  
               [000526] ------------                 IL_OFFSET void   IL offset: 0x8c
N001 (  1,  1) [000116] ------------                 NO_OP     void  
               [000527] ------------                 IL_OFFSET void   IL offset: 0x8d
N002 (  2, 10) [000120] H-----------       t120 =    CNS_INT(h) long   0x7ffdb70260c8 method
                                                  /--*  t120   long   
               [000649] ------------       t649 = *  PUTARG_REG long   REG rcx
                                                  /--*  t649   long   arg0 in rcx
N003 ( 16, 16) [000121] --C---------       t121 = *  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
                                                  /--*  t121   ref    
N005 ( 20, 19) [000123] DA----------              *  STORE_LCL_VAR ref    V30 tmp12        
N001 (  3,  2) [000117] ------------       t117 =    LCL_VAR   ref    V00 this         
                                                  /--*  t117   ref    
N003 (  4,  3) [000419] -c----------       t419 = *  LEA(b+8)  byref 
                                                  /--*  t419   byref  
N004 (  6,  5) [000118] ---XG-------       t118 = *  IND       ref   
                                                  /--*  t118   ref    
N006 (  7,  6) [000417] -c----------       t417 = *  LEA(b+8)  byref 
                                                  /--*  t417   byref  
N007 (  9,  8) [000119] ---XG-------       t119 = *  IND       ref   
                                                  /--*  t119   ref    
N009 ( 13, 11) [000127] DA-XG-------              *  STORE_LCL_VAR ref    V31 tmp13        
N002 (  3,  2) [000124] ------------       t124 =    LCL_VAR   ref    V30 tmp12        
                                                  /--*  t124   ref    
               [000650] ------------       t650 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t650   ref    this in rcx
N003 ( 17,  9) [000125] --CXG-------              *  CALL      void   FalseLeakRepro.Node..ctor
               [000528] ------------                 IL_OFFSET void   IL offset: 0x9d
N001 (  3,  2) [000128] ------------       t128 =    LCL_VAR   ref    V31 tmp13        
                                                  /--*  t128   ref    
N003 (  4,  3) [000422] ------------       t422 = *  LEA(b+8)  byref 
N005 (  3,  2) [000129] ------------       t129 =    LCL_VAR   ref    V30 tmp12        
                                                  /--*  t422   byref  
                                                  +--*  t129   ref    
               [000529] -A-XG-------              *  STOREIND  ref   
               [000530] ------------                 IL_OFFSET void   IL offset: 0xa2
N001 (  3,  2) [000132] ------------       t132 =    LCL_VAR   ref    V00 this         
                                                  /--*  t132   ref    
N003 (  4,  3) [000426] -c----------       t426 = *  LEA(b+8)  byref 
                                                  /--*  t426   byref  
N004 (  6,  5) [000133] ---XG-------       t133 = *  IND       ref   
                                                  /--*  t133   ref    
N006 (  7,  6) [000424] ------------       t424 = *  LEA(b+8)  byref 
N008 (  3,  2) [000134] ------------       t134 =    LCL_VAR   ref    V00 this         
                                                  /--*  t134   ref    
N010 (  4,  3) [000432] -c----------       t432 = *  LEA(b+8)  byref 
                                                  /--*  t432   byref  
N011 (  6,  5) [000135] ---XG-------       t135 = *  IND       ref   
                                                  /--*  t135   ref    
N013 (  7,  6) [000430] -c----------       t430 = *  LEA(b+8)  byref 
                                                  /--*  t430   byref  
N014 (  9,  8) [000136] ---XG-------       t136 = *  IND       ref   
                                                  /--*  t136   ref    
N016 ( 10,  9) [000428] -c----------       t428 = *  LEA(b+8)  byref 
                                                  /--*  t428   byref  
N017 ( 12, 11) [000137] ---XG-------       t137 = *  IND       ref   
                                                  /--*  t424   byref  
                                                  +--*  t137   ref    
               [000531] -A-XG-------              *  STOREIND  ref   
               [000532] ------------                 IL_OFFSET void   IL offset: 0xbd
N002 (  2, 10) [000143] H-----------       t143 =    CNS_INT(h) long   0x7ffdb6c458b8 token
                                                  /--*  t143   long   
               [000651] ------------       t651 = *  PUTARG_REG long   REG rcx
                                                  /--*  t651   long   arg0 in rcx
N003 ( 16, 16) [000144] --C---------       t144 = *  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
                                                  /--*  t144   ref    
N005 ( 20, 19) [000146] DA----------              *  STORE_LCL_VAR ref    V32 tmp14        
N001 (  3,  2) [000140] ------------       t140 =    LCL_VAR   ref    V00 this         
                                                  /--*  t140   ref    
N003 (  4,  3) [000437] -c----------       t437 = *  LEA(b+8)  byref 
                                                  /--*  t437   byref  
N004 (  6,  5) [000141] ---XG-------       t141 = *  IND       ref   
                                                  /--*  t141   ref    
N006 (  7,  6) [000435] -c----------       t435 = *  LEA(b+8)  byref 
                                                  /--*  t435   byref  
N007 (  9,  8) [000142] ---XG-------       t142 = *  IND       ref   
                                                  /--*  t142   ref    
N009 ( 13, 11) [000150] DA-XG-------              *  STORE_LCL_VAR ref    V33 tmp15        
N002 (  3,  2) [000147] ------------       t147 =    LCL_VAR   ref    V32 tmp14        
                                                  /--*  t147   ref    
               [000652] ------------       t652 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t652   ref    this in rcx
N003 ( 17,  9) [000148] --CXG-------              *  CALL      void   System.Object..ctor
               [000533] ------------                 IL_OFFSET void   IL offset: 0xcd
N001 (  3,  2) [000151] ------------       t151 =    LCL_VAR   ref    V33 tmp15        
                                                  /--*  t151   ref    
N003 (  4,  3) [000440] ------------       t440 = *  LEA(b+16) byref 
N005 (  3,  2) [000152] ------------       t152 =    LCL_VAR   ref    V32 tmp14        
                                                  /--*  t440   byref  
                                                  +--*  t152   ref    
               [000534] -A-XG-------              *  STOREIND  ref   
               [000535] ------------                 IL_OFFSET void   IL offset: 0xd2
N001 (  1,  1) [000155] ------------                 NO_OP     void  
               [000536] ------------                 IL_OFFSET void   IL offset: 0xd3
N001 (  0,  0) [000156] ------------                 NOP       void  

------------ BB08 [???..???) -> BB10 (callf), preds={BB07} succs={BB10}

------------ BB09 [???..???) -> BB13 (ALWAYS), preds={BB12} succs={BB13}

------------ BB13 [0E1..0E6), preds={BB09} succs={BB14}
               [000537] ------------                 IL_OFFSET void   IL offset: 0xe1
N001 (  1,  1) [000157] ------------                 NO_OP     void  
               [000538] ------------                 IL_OFFSET void   IL offset: 0xe2
N001 (  3,  2) [000158] ------------       t158 =    LCL_VAR   int    V04 loc2         
N002 (  1,  1) [000159] -c----------       t159 =    CNS_INT   int    1
                                                  /--*  t158   int    
                                                  +--*  t159   int    
N003 (  5,  4) [000160] ------------       t160 = *  ADD       int   
                                                  /--*  t160   int    
N005 (  9,  7) [000162] DA----------              *  STORE_LCL_VAR int    V04 loc2         

------------ BB14 [0E6..0F1) -> BB06 (cond), preds={BB05,BB13} succs={BB15,BB06}
               [000539] ------------                 IL_OFFSET void   IL offset: 0xe6
N001 (  3,  2) [000094] -c----------        t94 =    LCL_VAR   int    V04 loc2         
N002 (  1,  1) [000095] -c----------        t95 =    CNS_INT   int    10
                                                  /--*  t94    int    
                                                  +--*  t95    int    
N003 (  8,  4) [000096] ------------        t96 = *  LT        int   
                                                  /--*  t96    int    
N005 ( 12,  7) [000098] DA----------              *  STORE_LCL_VAR int    V07 loc5         
               [000540] ------------                 IL_OFFSET void   IL offset: 0xed
N001 (  3,  2) [000099] -c----------        t99 =    LCL_VAR   int    V07 loc5         
N002 (  1,  1) [000100] -c----------       t100 =    CNS_INT   int    0
                                                  /--*  t99    int    
                                                  +--*  t100   int    
N003 (  5,  4) [000101] J------N----              *  NE        void  
N004 (  7,  6) [000102] ------------              *  JTRUE     void  

------------ BB15 [0F1..110) -> BB28 (always), preds={BB14} succs={BB28}
               [000541] ------------                 IL_OFFSET void   IL offset: 0xf1
N001 ( 14,  5) [000171] --CXG-------       t171 =    CALL      long   System.DateTime.get_Now
                                                  /--*  t171   long   
N003 ( 18,  8) [000174] DA-XG-------              *  STORE_LCL_VAR struct<System.DateTime, 8> V34 tmp16        
               [000542] ------------                 IL_OFFSET void   IL offset: 0xf6
N001 (  3,  2) [000175] ------------       t175 =    LCL_VAR   struct<System.DateTime, 8> V34 tmp16        
                                                  /--*  t175   struct 
N003 (  7,  5) [000178] DA--G-------              *  STORE_LCL_VAR struct<System.DateTime, 8>(AX) V03 loc1         
               [000543] ------------                 IL_OFFSET void   IL offset: 0xf7
N002 (  3,  3) [000180] ------------       t180 =    LCL_VAR_ADDR byref  V03 loc1         
                                                  /--*  t180   byref  
               [000653] ------------       t653 = *  PUTARG_REG byref  REG rcx
                                                  /--*  t653   byref  this in rcx
N003 ( 17, 10) [000181] --CXG-------       t181 = *  CALL      ref    System.DateTime.ToString
                                                  /--*  t181   ref    
N005 ( 21, 13) [000183] DA-XG-------              *  STORE_LCL_VAR ref    V35 tmp17        
               [000544] ------------                 IL_OFFSET void   IL offset: 0xfe
N003 (  2, 10) [000444] H-----------       t444 =    CNS_INT(h) long   0xBE2A3200 "	 Waiting for list processing to complete..."
                                                  /--*  t444   long   
N004 (  4, 12) [000445] #---G-------       t445 = *  IND       ref   
                                                  /--*  t445   ref    
               [000654] ----G-------       t654 = *  PUTARG_REG ref    REG rdx
N005 (  3,  2) [000184] ------------       t184 =    LCL_VAR   ref    V35 tmp17        
                                                  /--*  t184   ref    
               [000655] ------------       t655 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t654   ref    arg1 in rdx
                                                  +--*  t655   ref    arg0 in rcx
N006 ( 21, 21) [000186] --CXG-------       t186 = *  CALL      ref    System.String.Concat
                                                  /--*  t186   ref    
N008 ( 25, 24) [000188] DA-XG-------              *  STORE_LCL_VAR ref    V36 tmp18        
               [000545] ------------                 IL_OFFSET void   IL offset: 0x108
N002 (  3,  2) [000189] ------------       t189 =    LCL_VAR   ref    V36 tmp18        
                                                  /--*  t189   ref    
               [000656] ------------       t656 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t656   ref    arg0 in rcx
N003 ( 17,  8) [000190] --CXG-------              *  CALL      void   System.Console.WriteLine
               [000546] ------------                 IL_OFFSET void   IL offset: 0x10d
N001 (  1,  1) [000191] ------------                 NO_OP     void  
               [000547] ------------                 IL_OFFSET void   IL offset: 0x10e
N001 (  0,  0) [000192] ------------                 NOP       void  

------------ BB16 [110..11C), preds={BB28} succs={BB17}
               [000548] ------------                 IL_OFFSET void   IL offset: 0x110
N001 (  1,  1) [000197] ------------                 NO_OP     void  
               [000549] ------------                 IL_OFFSET void   IL offset: 0x111
N001 (  3,  2) [000198] ------------       t198 =    LCL_VAR   ref    V00 this         
                                                  /--*  t198   ref    
N003 (  4,  3) [000450] -c----------       t450 = *  LEA(b+8)  byref 
                                                  /--*  t450   byref  
N004 (  6,  5) [000199] ---XG-------       t199 = *  IND       ref   
                                                  /--*  t199   ref    
N006 ( 10,  8) [000201] DA-XG-------              *  STORE_LCL_VAR ref    V08 loc6         
               [000550] ------------                 IL_OFFSET void   IL offset: 0x119
N001 (  1,  1) [000202] ------------       t202 =    CNS_INT   int    0
                                                  /--*  t202   int    
N003 (  5,  4) [000204] DA--G-------              *  STORE_LCL_VAR int   (AX) V09 loc7         

------------ BB17 [11C..145) -> BB19 (cond), preds={BB16} succs={BB18,BB19}
               [000551] ------------                 IL_OFFSET void   IL offset: 0x11c
N003 (  3,  3) [000207] ------------       t207 =    LCL_VAR_ADDR long   V09 loc7         
                                                  /--*  t207   long   
               [000657] ------------       t657 = *  PUTARG_REG long   REG rdx
N004 (  3,  2) [000205] ------------       t205 =    LCL_VAR   ref    V08 loc6         
                                                  /--*  t205   ref    
               [000658] ------------       t658 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t657   long   arg1 in rdx
                                                  +--*  t658   ref    arg0 in rcx
N005 ( 20, 12) [000208] --CXG-------              *  CALL      void   System.Threading.Monitor.Enter
               [000552] ------------                 IL_OFFSET void   IL offset: 0x125
N001 (  1,  1) [000209] ------------                 NO_OP     void  
               [000553] ------------                 IL_OFFSET void   IL offset: 0x126
N001 (  1,  1) [000210] ------------                 NO_OP     void  
               [000554] ------------                 IL_OFFSET void   IL offset: 0x127
N001 (  3,  2) [000211] ------------       t211 =    LCL_VAR   ref    V00 this         
                                                  /--*  t211   ref    
N003 (  4,  3) [000456] -c----------       t456 = *  LEA(b+8)  byref 
                                                  /--*  t456   byref  
N004 (  6,  5) [000212] ---XG-------       t212 = *  IND       ref   
                                                  /--*  t212   ref    
N006 (  7,  6) [000454] -c----------       t454 = *  LEA(b+8)  byref 
                                                  /--*  t454   byref  
N007 (  9,  8) [000213] ---XG-------       t213 = *  IND       ref   
N008 (  3,  2) [000214] ------------       t214 =    LCL_VAR   ref    V00 this         
                                                  /--*  t214   ref    
N010 (  4,  3) [000460] -c----------       t460 = *  LEA(b+8)  byref 
                                                  /--*  t460   byref  
N011 (  6,  5) [000215] ---XG-------       t215 = *  IND       ref   
                                                  /--*  t215   ref    
N013 (  7,  6) [000458] -c----------       t458 = *  LEA(b+16) byref 
                                                  /--*  t458   byref  
N014 (  9,  8) [000216] -c-XG-------       t216 = *  IND       ref   
                                                  /--*  t213   ref    
                                                  +--*  t216   ref    
N015 ( 22, 17) [000217] ---XG-------       t217 = *  EQ        int   
                                                  /--*  t217   int    
N017 ( 26, 20) [000219] DA-XG-------              *  STORE_LCL_VAR int    V10 loc8         
               [000555] ------------                 IL_OFFSET void   IL offset: 0x141
N001 (  3,  2) [000220] -c----------       t220 =    LCL_VAR   int    V10 loc8         
N002 (  1,  1) [000221] -c----------       t221 =    CNS_INT   int    0
                                                  /--*  t220   int    
                                                  +--*  t221   int    
N003 (  5,  4) [000222] J------N----              *  EQ        void  
N004 (  7,  6) [000223] ------------              *  JTRUE     void  

------------ BB18 [145..148) -> BB20 (always), preds={BB17} succs={BB20}
               [000556] ------------                 IL_OFFSET void   IL offset: 0x145
N001 (  1,  1) [000230] ------------                 NO_OP     void  
               [000557] ------------                 IL_OFFSET void   IL offset: 0x146
N001 (  0,  0) [000231] ------------                 NOP       void  

------------ BB19 [148..14B) -> BB22 (always), preds={BB17} succs={BB22}
               [000558] ------------                 IL_OFFSET void   IL offset: 0x148
N001 (  1,  1) [000224] ------------                 NO_OP     void  
               [000559] ------------                 IL_OFFSET void   IL offset: 0x149
N001 (  0,  0) [000225] ------------                 NOP       void  

------------ BB20 [???..???) -> BB24 (callf), preds={BB18} succs={BB24}

------------ BB21 [???..???) -> BB29 (ALWAYS), preds={BB26} succs={BB29}

------------ BB22 [???..???) -> BB24 (callf), preds={BB19} succs={BB24}

------------ BB23 [???..???) -> BB27 (ALWAYS), preds={BB26} succs={BB27}

------------ BB27 [158..161), preds={BB23} succs={BB28}
               [000560] ------------                 IL_OFFSET void   IL offset: 0x158
N002 (  1,  1) [000226] ------------       t226 =    CNS_INT   int    100
                                                  /--*  t226   int    
               [000659] ------------       t659 = *  PUTARG_REG int    REG rcx
                                                  /--*  t659   int    arg0 in rcx
N003 ( 15,  7) [000227] --CXG-------              *  CALL      void   System.Threading.Thread.Sleep
               [000561] ------------                 IL_OFFSET void   IL offset: 0x15f
N001 (  1,  1) [000228] ------------                 NO_OP     void  
               [000562] ------------                 IL_OFFSET void   IL offset: 0x160
N001 (  1,  1) [000229] ------------                 NO_OP     void  

------------ BB28 [161..166) -> BB16 (always), preds={BB15,BB27} succs={BB16}
               [000563] ------------                 IL_OFFSET void   IL offset: 0x161
N001 (  1,  1) [000193] -c----------       t193 =    CNS_INT   int    1
                                                  /--*  t193   int    
N003 (  5,  4) [000195] DA----------              *  STORE_LCL_VAR int    V11 loc9         
               [000564] ------------                 IL_OFFSET void   IL offset: 0x164
N001 (  0,  0) [000196] ------------                 NOP       void  

------------ BB29 [166..1B1) -> BB39 (always), preds={BB21} succs={BB39}
               [000565] ------------                 IL_OFFSET void   IL offset: 0x166
N001 ( 14,  5) [000232] --CXG-------       t232 =    CALL      long   System.DateTime.get_Now
                                                  /--*  t232   long   
N003 ( 18,  8) [000235] DA-XG-------              *  STORE_LCL_VAR struct<System.DateTime, 8> V37 tmp19        
               [000566] ------------                 IL_OFFSET void   IL offset: 0x16b
N001 (  3,  2) [000236] ------------       t236 =    LCL_VAR   struct<System.DateTime, 8> V37 tmp19        
                                                  /--*  t236   struct 
N003 (  7,  5) [000239] DA--G-------              *  STORE_LCL_VAR struct<System.DateTime, 8>(AX) V03 loc1         
               [000567] ------------                 IL_OFFSET void   IL offset: 0x16c
N002 (  3,  3) [000241] ------------       t241 =    LCL_VAR_ADDR byref  V03 loc1         
                                                  /--*  t241   byref  
               [000660] ------------       t660 = *  PUTARG_REG byref  REG rcx
                                                  /--*  t660   byref  this in rcx
N003 ( 17, 10) [000242] --CXG-------       t242 = *  CALL      ref    System.DateTime.ToString
                                                  /--*  t242   ref    
N005 ( 21, 13) [000244] DA-XG-------              *  STORE_LCL_VAR ref    V38 tmp20        
               [000568] ------------                 IL_OFFSET void   IL offset: 0x173
N003 (  2, 10) [000466] H-----------       t466 =    CNS_INT(h) long   0xBE2A3208 "	 Done.  Profiler is active, available options:"
                                                  /--*  t466   long   
N004 (  4, 12) [000467] #---G-------       t467 = *  IND       ref   
                                                  /--*  t467   ref    
               [000661] ----G-------       t661 = *  PUTARG_REG ref    REG rdx
N005 (  3,  2) [000245] ------------       t245 =    LCL_VAR   ref    V38 tmp20        
                                                  /--*  t245   ref    
               [000662] ------------       t662 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t661   ref    arg1 in rdx
                                                  +--*  t662   ref    arg0 in rcx
N006 ( 21, 21) [000247] --CXG-------       t247 = *  CALL      ref    System.String.Concat
                                                  /--*  t247   ref    
N008 ( 25, 24) [000249] DA-XG-------              *  STORE_LCL_VAR ref    V39 tmp21        
               [000569] ------------                 IL_OFFSET void   IL offset: 0x17d
N002 (  3,  2) [000250] ------------       t250 =    LCL_VAR   ref    V39 tmp21        
                                                  /--*  t250   ref    
               [000663] ------------       t663 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t663   ref    arg0 in rcx
N003 ( 17,  8) [000251] --CXG-------              *  CALL      void   System.Console.WriteLine
               [000570] ------------                 IL_OFFSET void   IL offset: 0x182
N001 (  1,  1) [000252] ------------                 NO_OP     void  
               [000571] ------------                 IL_OFFSET void   IL offset: 0x183
N002 (  2, 10) [000471] H-----------       t471 =    CNS_INT(h) long   0xBE2A3210 "   Q = quit"
                                                  /--*  t471   long   
N003 (  4, 12) [000472] #---G-------       t472 = *  IND       ref   
                                                  /--*  t472   ref    
               [000664] ----G-------       t664 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t664   ref    arg0 in rcx
N004 ( 18, 18) [000254] --CXG-------              *  CALL      void   System.Console.WriteLine
               [000572] ------------                 IL_OFFSET void   IL offset: 0x18d
N001 (  1,  1) [000255] ------------                 NO_OP     void  
               [000573] ------------                 IL_OFFSET void   IL offset: 0x18e
N002 (  2, 10) [000474] H-----------       t474 =    CNS_INT(h) long   0xBE2A3218 "   H = heap snapshot"
                                                  /--*  t474   long   
N003 (  4, 12) [000475] #---G-------       t475 = *  IND       ref   
                                                  /--*  t475   ref    
               [000665] ----G-------       t665 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t665   ref    arg0 in rcx
N004 ( 18, 18) [000257] --CXG-------              *  CALL      void   System.Console.WriteLine
               [000574] ------------                 IL_OFFSET void   IL offset: 0x198
N001 (  1,  1) [000258] ------------                 NO_OP     void  
               [000575] ------------                 IL_OFFSET void   IL offset: 0x199
N002 (  2, 10) [000477] H-----------       t477 =    CNS_INT(h) long   0xBE2A3220 "   G = GC (max gen)"
                                                  /--*  t477   long   
N003 (  4, 12) [000478] #---G-------       t478 = *  IND       ref   
                                                  /--*  t478   ref    
               [000666] ----G-------       t666 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t666   ref    arg0 in rcx
N004 ( 18, 18) [000260] --CXG-------              *  CALL      void   System.Console.WriteLine
               [000576] ------------                 IL_OFFSET void   IL offset: 0x1a3
N001 (  1,  1) [000261] ------------                 NO_OP     void  
               [000577] ------------                 IL_OFFSET void   IL offset: 0x1a4
N002 (  2, 10) [000480] H-----------       t480 =    CNS_INT(h) long   0xBE2A3228 "   R = clear the running flag to stop the consumer thread"
                                                  /--*  t480   long   
N003 (  4, 12) [000481] #---G-------       t481 = *  IND       ref   
                                                  /--*  t481   ref    
               [000667] ----G-------       t667 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t667   ref    arg0 in rcx
N004 ( 18, 18) [000263] --CXG-------              *  CALL      void   System.Console.WriteLine
               [000578] ------------                 IL_OFFSET void   IL offset: 0x1ae
N001 (  1,  1) [000264] ------------                 NO_OP     void  
               [000579] ------------                 IL_OFFSET void   IL offset: 0x1af
N001 (  0,  0) [000265] ------------                 NOP       void  

------------ BB30 [1B1..1CA) -> BB32 (cond), preds={BB39} succs={BB31,BB32}
               [000580] ------------                 IL_OFFSET void   IL offset: 0x1b1
N001 (  1,  1) [000270] ------------                 NO_OP     void  
               [000581] ------------                 IL_OFFSET void   IL offset: 0x1b2
N002 (  3,  3) [000273] ------------       t273 =    LCL_VAR_ADDR long   V40 tmp22        
                                                  /--*  t273   long   
               [000668] ------------       t668 = *  PUTARG_REG long   REG rcx
                                                  /--*  t668   long   arg0 in rcx
N003 ( 17,  9) [000271] S-CXG-------              *  CALL      void   System.Console.ReadKey
               [000582] ------------                 IL_OFFSET void   IL offset: 0x1b7
N001 (  3,  2) [000274] -c----------       t274 =    LCL_VAR   struct<System.ConsoleKeyInfo, 12>(AX) V40 tmp22        
               [000669] Dc-----N----       t669 =    LCL_VAR_ADDR byref  V12 loc10        
                                                  /--*  t669   byref  
                                                  +--*  t274   struct 
N003 (  7,  5) [000277] sA----------              *  STORE_BLK struct<System.ConsoleKeyInfo, 12> (copy) (Unroll)
               [000583] ------------                 IL_OFFSET void   IL offset: 0x1b9
N002 (  3,  3) [000279] ------------       t279 =    LCL_VAR_ADDR byref  V12 loc10        
                                                  /--*  t279   byref  
               [000670] ------------       t670 = *  PUTARG_REG byref  REG rcx
                                                  /--*  t670   byref  this in rcx
N003 ( 17, 10) [000280] --CXG-------       t280 = *  CALL      int    System.ConsoleKeyInfo.get_Key
                                                  /--*  t280   int    
N005 ( 21, 13) [000282] DA-XG-------              *  STORE_LCL_VAR int    V41 tmp23        
               [000584] ------------                 IL_OFFSET void   IL offset: 0x1c0
N001 (  3,  2) [000283] -c----------       t283 =    LCL_VAR   int    V41 tmp23        
N002 (  1,  1) [000284] -c----------       t284 =    CNS_INT   int    71
                                                  /--*  t283   int    
                                                  +--*  t284   int    
N003 (  8,  4) [000285] ------------       t285 = *  EQ        int   
                                                  /--*  t285   int    
N005 ( 12,  7) [000287] DA----------              *  STORE_LCL_VAR int    V13 loc11        
               [000585] ------------                 IL_OFFSET void   IL offset: 0x1c6
N001 (  3,  2) [000288] -c----------       t288 =    LCL_VAR   int    V13 loc11        
N002 (  1,  1) [000289] -c----------       t289 =    CNS_INT   int    0
                                                  /--*  t288   int    
                                                  +--*  t289   int    
N003 (  5,  4) [000290] J------N----              *  EQ        void  
N004 (  7,  6) [000291] ------------              *  JTRUE     void  

------------ BB31 [1CA..1D9) -> BB38 (always), preds={BB30} succs={BB38}
               [000586] ------------                 IL_OFFSET void   IL offset: 0x1ca
N001 (  1,  1) [000354] ------------                 NO_OP     void  
               [000587] ------------                 IL_OFFSET void   IL offset: 0x1cb
N001 ( 14,  5) [000355] --CXG-------       t355 =    CALL      int    System.GC.get_MaxGeneration
                                                  /--*  t355   int    
N003 ( 18,  8) [000357] DA-XG-------              *  STORE_LCL_VAR int    V45 tmp27        
               [000588] ------------                 IL_OFFSET void   IL offset: 0x1d0
N002 (  3,  2) [000358] ------------       t358 =    LCL_VAR   int    V45 tmp27        
                                                  /--*  t358   int    
               [000671] ------------       t671 = *  PUTARG_REG int    REG rcx
                                                  /--*  t671   int    arg0 in rcx
N003 ( 17,  8) [000359] --CXG-------              *  CALL      void   System.GC.Collect
               [000589] ------------                 IL_OFFSET void   IL offset: 0x1d5
N001 (  1,  1) [000360] ------------                 NO_OP     void  
               [000590] ------------                 IL_OFFSET void   IL offset: 0x1d6
N001 (  1,  1) [000361] ------------                 NO_OP     void  
               [000591] ------------                 IL_OFFSET void   IL offset: 0x1d7
N001 (  0,  0) [000362] ------------                 NOP       void  

------------ BB32 [1D9..1EA) -> BB34 (cond), preds={BB30} succs={BB33,BB34}
               [000592] ------------                 IL_OFFSET void   IL offset: 0x1d9
N002 (  3,  3) [000293] ------------       t293 =    LCL_VAR_ADDR byref  V12 loc10        
                                                  /--*  t293   byref  
               [000672] ------------       t672 = *  PUTARG_REG byref  REG rcx
                                                  /--*  t672   byref  this in rcx
N003 ( 17, 10) [000294] --CXG-------       t294 = *  CALL      int    System.ConsoleKeyInfo.get_Key
                                                  /--*  t294   int    
N005 ( 21, 13) [000296] DA-XG-------              *  STORE_LCL_VAR int    V42 tmp24        
               [000593] ------------                 IL_OFFSET void   IL offset: 0x1e0
N001 (  3,  2) [000297] -c----------       t297 =    LCL_VAR   int    V42 tmp24        
N002 (  1,  1) [000298] -c----------       t298 =    CNS_INT   int    72
                                                  /--*  t297   int    
                                                  +--*  t298   int    
N003 (  8,  4) [000299] ------------       t299 = *  EQ        int   
                                                  /--*  t299   int    
N005 ( 12,  7) [000301] DA----------              *  STORE_LCL_VAR int    V14 loc12        
               [000594] ------------                 IL_OFFSET void   IL offset: 0x1e6
N001 (  3,  2) [000302] -c----------       t302 =    LCL_VAR   int    V14 loc12        
N002 (  1,  1) [000303] -c----------       t303 =    CNS_INT   int    0
                                                  /--*  t302   int    
                                                  +--*  t303   int    
N003 (  5,  4) [000304] J------N----              *  EQ        void  
N004 (  7,  6) [000305] ------------              *  JTRUE     void  

------------ BB33 [1EA..1F4) -> BB38 (always), preds={BB32} succs={BB38}
               [000595] ------------                 IL_OFFSET void   IL offset: 0x1ea
N001 (  1,  1) [000349] ------------                 NO_OP     void  
               [000596] ------------                 IL_OFFSET void   IL offset: 0x1eb
N001 ( 14,  5) [000350] --CXG-------                 CALL      void   System.Diagnostics.Debugger.Break
               [000597] ------------                 IL_OFFSET void   IL offset: 0x1f0
N001 (  1,  1) [000351] ------------                 NO_OP     void  
               [000598] ------------                 IL_OFFSET void   IL offset: 0x1f1
N001 (  1,  1) [000352] ------------                 NO_OP     void  
               [000599] ------------                 IL_OFFSET void   IL offset: 0x1f2
N001 (  0,  0) [000353] ------------                 NOP       void  

------------ BB34 [1F4..205) -> BB36 (cond), preds={BB32} succs={BB35,BB36}
               [000600] ------------                 IL_OFFSET void   IL offset: 0x1f4
N002 (  3,  3) [000307] ------------       t307 =    LCL_VAR_ADDR byref  V12 loc10        
                                                  /--*  t307   byref  
               [000673] ------------       t673 = *  PUTARG_REG byref  REG rcx
                                                  /--*  t673   byref  this in rcx
N003 ( 17, 10) [000308] --CXG-------       t308 = *  CALL      int    System.ConsoleKeyInfo.get_Key
                                                  /--*  t308   int    
N005 ( 21, 13) [000310] DA-XG-------              *  STORE_LCL_VAR int    V43 tmp25        
               [000601] ------------                 IL_OFFSET void   IL offset: 0x1fb
N001 (  3,  2) [000311] -c----------       t311 =    LCL_VAR   int    V43 tmp25        
N002 (  1,  1) [000312] -c----------       t312 =    CNS_INT   int    82
                                                  /--*  t311   int    
                                                  +--*  t312   int    
N003 (  8,  4) [000313] ------------       t313 = *  EQ        int   
                                                  /--*  t313   int    
N005 ( 12,  7) [000315] DA----------              *  STORE_LCL_VAR int    V15 loc13        
               [000602] ------------                 IL_OFFSET void   IL offset: 0x201
N001 (  3,  2) [000316] -c----------       t316 =    LCL_VAR   int    V15 loc13        
N002 (  1,  1) [000317] -c----------       t317 =    CNS_INT   int    0
                                                  /--*  t316   int    
                                                  +--*  t317   int    
N003 (  5,  4) [000318] J------N----              *  EQ        void  
N004 (  7,  6) [000319] ------------              *  JTRUE     void  

------------ BB35 [205..210) -> BB38 (always), preds={BB34} succs={BB38}
               [000603] ------------                 IL_OFFSET void   IL offset: 0x205
N001 (  1,  1) [000342] ------------                 NO_OP     void  
               [000604] ------------                 IL_OFFSET void   IL offset: 0x206
N001 (  3,  2) [000343] ------------       t343 =    LCL_VAR   ref    V00 this         
                                                  /--*  t343   ref    
N003 (  4,  3) [000489] -c----------       t489 = *  LEA(b+16) byref 
N005 (  1,  1) [000344] -c----------       t344 =    CNS_INT   int    0
                                                  /--*  t489   byref  
                                                  +--*  t344   int    
               [000605] -A-XG-------              *  STOREIND  bool  
               [000606] ------------                 IL_OFFSET void   IL offset: 0x20d
N001 (  1,  1) [000347] ------------                 NO_OP     void  
               [000607] ------------                 IL_OFFSET void   IL offset: 0x20e
N001 (  0,  0) [000348] ------------                 NOP       void  

------------ BB36 [210..221) -> BB38 (cond), preds={BB34} succs={BB37,BB38}
               [000608] ------------                 IL_OFFSET void   IL offset: 0x210
N002 (  3,  3) [000321] ------------       t321 =    LCL_VAR_ADDR byref  V12 loc10        
                                                  /--*  t321   byref  
               [000674] ------------       t674 = *  PUTARG_REG byref  REG rcx
                                                  /--*  t674   byref  this in rcx
N003 ( 17, 10) [000322] --CXG-------       t322 = *  CALL      int    System.ConsoleKeyInfo.get_Key
                                                  /--*  t322   int    
N005 ( 21, 13) [000324] DA-XG-------              *  STORE_LCL_VAR int    V44 tmp26        
               [000609] ------------                 IL_OFFSET void   IL offset: 0x217
N001 (  3,  2) [000325] -c----------       t325 =    LCL_VAR   int    V44 tmp26        
N002 (  1,  1) [000326] -c----------       t326 =    CNS_INT   int    81
                                                  /--*  t325   int    
                                                  +--*  t326   int    
N003 (  8,  4) [000327] ------------       t327 = *  EQ        int   
                                                  /--*  t327   int    
N005 ( 12,  7) [000329] DA----------              *  STORE_LCL_VAR int    V16 loc14        
               [000610] ------------                 IL_OFFSET void   IL offset: 0x21d
N001 (  3,  2) [000330] -c----------       t330 =    LCL_VAR   int    V16 loc14        
N002 (  1,  1) [000331] -c----------       t331 =    CNS_INT   int    0
                                                  /--*  t330   int    
                                                  +--*  t331   int    
N003 (  5,  4) [000332] J------N----              *  EQ        void  
N004 (  7,  6) [000333] ------------              *  JTRUE     void  

------------ BB37 [221..224) -> BB40 (always), preds={BB36} succs={BB40}
               [000611] ------------                 IL_OFFSET void   IL offset: 0x221
N001 (  1,  1) [000335] ------------                 NO_OP     void  
               [000612] ------------                 IL_OFFSET void   IL offset: 0x222
N001 (  0,  0) [000336] ------------                 NOP       void  

------------ BB38 [224..225), preds={BB31,BB33,BB35,BB36} succs={BB39}
               [000613] ------------                 IL_OFFSET void   IL offset: 0x224
N001 (  1,  1) [000334] ------------                 NO_OP     void  

------------ BB39 [225..22A) -> BB30 (always), preds={BB29,BB38} succs={BB30}
               [000614] ------------                 IL_OFFSET void   IL offset: 0x225
N001 (  1,  1) [000266] -c----------       t266 =    CNS_INT   int    1
                                                  /--*  t266   int    
N003 (  5,  4) [000268] DA----------              *  STORE_LCL_VAR int    V17 loc15        
               [000615] ------------                 IL_OFFSET void   IL offset: 0x228
N001 (  0,  0) [000269] ------------                 NOP       void  

------------ BB40 [22A..232) (return), preds={BB37} succs={}
               [000616] ------------                 IL_OFFSET void   IL offset: 0x22a
N001 (  3,  2) [000337] ------------       t337 =    LCL_VAR   ref    V00 this         
                                                  /--*  t337   ref    
N003 (  4,  3) [000493] -c----------       t493 = *  LEA(b+16) byref 
N005 (  1,  1) [000338] -c----------       t338 =    CNS_INT   int    0
                                                  /--*  t493   byref  
                                                  +--*  t338   int    
               [000617] -A-XG-------              *  STOREIND  bool  
               [000618] ------------                 IL_OFFSET void   IL offset: 0x231
N001 (  0,  0) [000341] ------------                 RETURN    void  

------------ BB10 [0D5..0D9) -> BB12 (cond), preds={BB08} succs={BB11,BB12}
               [000619] ------------                 IL_OFFSET void   IL offset: 0xd5
N001 (  3,  2) [000163] ------------       t163 =    LCL_VAR   int   (AX) V06 loc4         
                                                  /--*  t163   int    
N002 (  4,  4) [000441] ----G-------       t441 = *  CAST      int <- bool <- int
N003 (  1,  1) [000164] -c----------       t164 =    CNS_INT   int    0
                                                  /--*  t441   int    
                                                  +--*  t164   int    
N004 (  6,  6) [000165] J---G--N----              *  EQ        void  
N005 (  8,  8) [000166] ----G-------              *  JTRUE     void  

------------ BB11 [0D9..0E0), preds={BB10} succs={BB12}
               [000620] ------------                 IL_OFFSET void   IL offset: 0xd9
N002 (  3,  2) [000168] ------------       t168 =    LCL_VAR   ref    V05 loc3         
                                                  /--*  t168   ref    
               [000675] ------------       t675 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t675   ref    arg0 in rcx
N003 ( 17,  8) [000169] --CXG-------              *  CALL      void   System.Threading.Monitor.Exit
               [000621] ------------                 IL_OFFSET void   IL offset: 0xdf
N001 (  1,  1) [000170] ------------                 NO_OP     void  

------------ BB12 [0E0..0E1) (finret), preds={BB10,BB11} succs={BB09}
               [000622] ------------                 IL_OFFSET void   IL offset: 0xe0
N001 (  0,  0) [000167] ------------                 RETFILT   void  

------------ BB24 [14B..14F) -> BB26 (cond), preds={BB20,BB22} succs={BB25,BB26}
               [000623] ------------                 IL_OFFSET void   IL offset: 0x14b
N001 (  3,  2) [000363] ------------       t363 =    LCL_VAR   int   (AX) V09 loc7         
                                                  /--*  t363   int    
N002 (  4,  4) [000461] ----G-------       t461 = *  CAST      int <- bool <- int
N003 (  1,  1) [000364] -c----------       t364 =    CNS_INT   int    0
                                                  /--*  t461   int    
                                                  +--*  t364   int    
N004 (  6,  6) [000365] J---G--N----              *  EQ        void  
N005 (  8,  8) [000366] ----G-------              *  JTRUE     void  

------------ BB25 [14F..157), preds={BB24} succs={BB26}
               [000624] ------------                 IL_OFFSET void   IL offset: 0x14f
N002 (  3,  2) [000368] ------------       t368 =    LCL_VAR   ref    V08 loc6         
                                                  /--*  t368   ref    
               [000676] ------------       t676 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t676   ref    arg0 in rcx
N003 ( 17,  8) [000369] --CXG-------              *  CALL      void   System.Threading.Monitor.Exit
               [000625] ------------                 IL_OFFSET void   IL offset: 0x156
N001 (  1,  1) [000370] ------------                 NO_OP     void  

------------ BB26 [157..158) (finret), preds={BB24,BB25} succs={BB21,BB23}
               [000626] ------------                 IL_OFFSET void   IL offset: 0x157
N001 (  0,  0) [000367] ------------                 RETFILT   void  

-------------------------------------------------------------------------------------------------------------------

*************** Starting PHASE Calculate stack level slots

*************** Finishing PHASE Calculate stack level slots [no changes]

*************** Starting PHASE Linear scan register alloc
Clearing modified regs.

buildIntervals ========

-----------------
LIVENESS:
-----------------
BB01 use def in out
{}
{}
{}
{}
BB02 use def in out
{}
{}
{}
{}
BB03 use def in out
{}
{}
{}
{}
BB04 use def in out
{}
{}
{}
{}
BB05 use def in out
{}
{}
{}
{}
BB06 use def in out
{}
{}
{}
{}
BB07 use def in out
{}
{}
{}
{}
BB08 use def in out
{}
{}
{}
{}
BB09 use def in out
{}
{}
{}
{}
BB13 use def in out
{}
{}
{}
{}
BB14 use def in out
{}
{}
{}
{}
BB15 use def in out
{}
{}
{}
{}
BB16 use def in out
{}
{}
{}
{}
BB17 use def in out
{}
{}
{}
{}
BB18 use def in out
{}
{}
{}
{}
BB19 use def in out
{}
{}
{}
{}
BB20 use def in out
{}
{}
{}
{}
BB21 use def in out
{}
{}
{}
{}
BB22 use def in out
{}
{}
{}
{}
BB23 use def in out
{}
{}
{}
{}
BB27 use def in out
{}
{}
{}
{}
BB28 use def in out
{}
{}
{}
{}
BB29 use def in out
{}
{}
{}
{}
BB30 use def in out
{}
{}
{}
{}
BB31 use def in out
{}
{}
{}
{}
BB32 use def in out
{}
{}
{}
{}
BB33 use def in out
{}
{}
{}
{}
BB34 use def in out
{}
{}
{}
{}
BB35 use def in out
{}
{}
{}
{}
BB36 use def in out
{}
{}
{}
{}
BB37 use def in out
{}
{}
{}
{}
BB38 use def in out
{}
{}
{}
{}
BB39 use def in out
{}
{}
{}
{}
BB40 use def in out
{}
{}
{}
{}
BB10 use def in out
{}
{}
{}
{}
BB11 use def in out
{}
{}
{}
{}
BB12 use def in out
{}
{}
{}
{}
BB24 use def in out
{}
{}
{}
{}
BB25 use def in out
{}
{}
{}
{}
BB26 use def in out
{}
{}
{}
{}
EH Vars: {}
Finally Vars: {}


FP callee save candidate vars: None

floatVarCount = 0; hasLoops = 0, singleExit = 1
TUPLE STYLE DUMP BEFORE LSRA
Start LSRA Block Sequence: 
Current block: BB01
	Succ block: BB02, Criteria: weight, Worklist: [BB02 ]
Current block: BB02
	Succ block: BB03, Criteria: weight, Worklist: [BB03 ]
	Succ block: BB04, Criteria: weight, Worklist: [BB03 BB04 ]
Current block: BB03
Current block: BB04
	Succ block: BB05, Criteria: bbNum, Worklist: [BB05 ]
Current block: BB05
	Succ block: BB14, Criteria: bbNum, Worklist: [BB14 ]
Current block: BB14
	Succ block: BB15, Criteria: bbNum, Worklist: [BB15 ]
	Succ block: BB06, Criteria: bbNum, Worklist: [BB06 BB15 ]
Current block: BB06
	Succ block: BB07, Criteria: bbNum, Worklist: [BB07 BB15 ]
Current block: BB07
	Succ block: BB08, Criteria: bbNum, Worklist: [BB08 BB15 ]
Current block: BB08
	Succ block: BB10, Criteria: bbNum, Worklist: [BB10 BB15 ]
Current block: BB10
	Succ block: BB11, Criteria: bbNum, Worklist: [BB11 BB15 ]
	Succ block: BB12, Criteria: bbNum, Worklist: [BB11 BB12 BB15 ]
Current block: BB11
Current block: BB12
	Succ block: BB09, Criteria: bbNum, Worklist: [BB09 BB15 ]
Current block: BB09
	Succ block: BB13, Criteria: bbNum, Worklist: [BB13 BB15 ]
Current block: BB13
Current block: BB15
	Succ block: BB28, Criteria: bbNum, Worklist: [BB28 ]
Current block: BB28
	Succ block: BB16, Criteria: bbNum, Worklist: [BB16 ]
Current block: BB16
	Succ block: BB17, Criteria: bbNum, Worklist: [BB17 ]
Current block: BB17
	Succ block: BB18, Criteria: bbNum, Worklist: [BB18 ]
	Succ block: BB19, Criteria: bbNum, Worklist: [BB18 BB19 ]
Current block: BB18
	Succ block: BB20, Criteria: bbNum, Worklist: [BB19 BB20 ]
Current block: BB19
	Succ block: BB22, Criteria: bbNum, Worklist: [BB20 BB22 ]
Current block: BB20
	Succ block: BB24, Criteria: bbNum, Worklist: [BB22 BB24 ]
Current block: BB22
Current block: BB24
	Succ block: BB25, Criteria: bbNum, Worklist: [BB25 ]
	Succ block: BB26, Criteria: bbNum, Worklist: [BB25 BB26 ]
Current block: BB25
Current block: BB26
	Succ block: BB21, Criteria: bbNum, Worklist: [BB21 ]
	Succ block: BB23, Criteria: bbNum, Worklist: [BB21 BB23 ]
Current block: BB21
	Succ block: BB29, Criteria: bbNum, Worklist: [BB23 BB29 ]
Current block: BB23
	Succ block: BB27, Criteria: bbNum, Worklist: [BB27 BB29 ]
Current block: BB27
Current block: BB29
	Succ block: BB39, Criteria: bbNum, Worklist: [BB39 ]
Current block: BB39
	Succ block: BB30, Criteria: bbNum, Worklist: [BB30 ]
Current block: BB30
	Succ block: BB31, Criteria: bbNum, Worklist: [BB31 ]
	Succ block: BB32, Criteria: bbNum, Worklist: [BB31 BB32 ]
Current block: BB31
	Succ block: BB38, Criteria: bbNum, Worklist: [BB32 BB38 ]
Current block: BB32
	Succ block: BB33, Criteria: bbNum, Worklist: [BB33 BB38 ]
	Succ block: BB34, Criteria: bbNum, Worklist: [BB33 BB34 BB38 ]
Current block: BB33
Current block: BB34
	Succ block: BB35, Criteria: bbNum, Worklist: [BB35 BB38 ]
	Succ block: BB36, Criteria: bbNum, Worklist: [BB35 BB36 BB38 ]
Current block: BB35
Current block: BB36
	Succ block: BB37, Criteria: bbNum, Worklist: [BB37 BB38 ]
Current block: BB37
	Succ block: BB40, Criteria: bbNum, Worklist: [BB38 BB40 ]
Current block: BB38
Current block: BB40
Final LSRA Block Sequence: 
BB01(  1   ) 
BB02(  1   ) 
BB03(  0.50) 
BB04(  1   ) 
BB05(  1   ) 
BB14(  1   ) 
BB06(  1   ) 
BB07(  1   ) 
BB08(  1   ) 
BB10(  1   )  EH-in
BB11(  1   ) 
BB12(  1   )  EH-out
BB09(  1   )  EH-in EH-out
BB13(  1   )  EH-in
BB15(  1   ) 
BB28(  1   ) 
BB16(  1   ) 
BB17(  1   ) 
BB18(  1   ) 
BB19(  1   ) 
BB20(  1   ) 
BB22(  1   ) 
BB24(  1   )  EH-in
BB25(  1   ) 
BB26(  1   )  EH-out
BB21(  1   )  EH-in EH-out
BB23(  1   )  EH-in EH-out
BB27(  1   )  EH-in
BB29(  1   )  EH-in
BB39(  1   ) 
BB30(  1   ) 
BB31(  1   ) 
BB32(  1   ) 
BB33(  1   ) 
BB34(  1   ) 
BB35(  1   ) 
BB36(  1   ) 
BB37(  1   ) 
BB38(  1   ) 
BB40(  1   ) 

BB01 [???..???), preds={} succs={BB02}
=====
  N001.                    NOP      

BB02 [???..???) -> BB04 (cond), preds={BB01} succs={BB03,BB04}
=====
  N001.                    CNS_INT(h) 0x7ffdb6f1d838 global ptr
  N002.                    IND      
  N003.                    CNS_INT   0
  N004.                    EQ       
  N005.                    JTRUE    

BB03 [???..???), preds={BB02} succs={BB04}
=====
  N001.                    CALL help

BB04 [???..???), preds={BB02,BB03} succs={BB05}
=====

BB05 [000..078) -> BB14 (always), preds={BB04} succs={BB14}
=====
  N000.                    IL_OFFSET IL offset: 0x0
  N001.                    NO_OP    
  N000.                    IL_OFFSET IL offset: 0x1
  N001. t2              =  CALL     
  N003.                    V19 MEM; t2
  N000.                    IL_OFFSET IL offset: 0x6
  N001. t6              =  V19 MEM
  N003.                    V03 MEM; t6
  N000.                    IL_OFFSET IL offset: 0x7
  N002. t11             =  LCL_VAR_ADDR V03 loc1         
  N000. t627            =  PUTARG_REG; t11
  N003. t12             =  CALL     ; t627
  N005.                    V20 MEM; t12
  N000.                    IL_OFFSET IL offset: 0xe
  N003. t380            =  CNS_INT(h) 0xBE2A31F0 "	 Created list"
  N004. t381            =  IND      ; t380
  N000. t628            =  PUTARG_REG; t381
  N005. t15             =  V20 MEM
  N000. t629            =  PUTARG_REG; t15
  N006. t17             =  CALL     ; t628,t629
  N008.                    V21 MEM; t17
  N000.                    IL_OFFSET IL offset: 0x18
  N002. t20             =  V21 MEM
  N000. t630            =  PUTARG_REG; t20
  N003.                    CALL     ; t630
  N000.                    IL_OFFSET IL offset: 0x1d
  N001.                    NO_OP    
  N000.                    IL_OFFSET IL offset: 0x1e
  N002. t24             =  CNS_INT(h) 0x7ffdb7022b70 method
  N000. t631            =  PUTARG_REG; t24
  N003. t25             =  CALL help; t631
  N005.                    V22 MEM; t25
  N002. t28             =  V22 MEM
  N000. t632            =  PUTARG_REG; t28
  N003.                    CALL     ; t632
  N000.                    IL_OFFSET IL offset: 0x24
  N001. t23             =  V00 MEM
  N003. t388            =  LEA(b+8) ; t23
  N005. t30             =  V22 MEM
  N000.                    STOREIND ; t388,t30
  N000.                    IL_OFFSET IL offset: 0x29
  N002. t36             =  CNS_INT(h) 0x7ffdb6c458b8 token
  N000. t633            =  PUTARG_REG; t36
  N003. t37             =  CALL help; t633
  N005.                    V23 MEM; t37
  N001. t33             =  V00 MEM
  N003. t393            =  LEA(b+8) ; t33
  N004. t34             =  IND      ; t393
  N006. t391            =  LEA(b+8) ; t34
  N007. t35             =  IND      ; t391
  N009.                    V24 MEM; t35
  N002. t40             =  V23 MEM
  N000. t634            =  PUTARG_REG; t40
  N003.                    CALL     ; t634
  N000.                    IL_OFFSET IL offset: 0x39
  N001. t44             =  V24 MEM
  N003. t396            =  LEA(b+16); t44
  N005. t45             =  V23 MEM
  N000.                    STOREIND ; t396,t45
  N000.                    IL_OFFSET IL offset: 0x3e
  N002. t50             =  CNS_INT(h) 0x7ffdb7026348 token
  N000. t635            =  PUTARG_REG; t50
  N003. t51             =  CALL help; t635
  N005.                    V25 MEM; t51
  N004. t54             =  V25 MEM
  N000. t636            =  PUTARG_REG; t54
  N005. t48             =  V00 MEM
  N000. t637            =  PUTARG_REG; t48
  N006. t49             =  CNS_INT(h) 0x7ffdb6c613f8 ftn
  N000. t638            =  PUTARG_REG; t49
  N007.                    CALL     ; t636,t637,t638
  N000.                    IL_OFFSET IL offset: 0x4a
  N002. t57             =  CNS_INT(h) 0x7ffdb6dc4e80 token
  N000. t639            =  PUTARG_REG; t57
  N003. t58             =  CALL help; t639
  N005.                    V26 MEM; t58
  N003. t61             =  V26 MEM
  N000. t640            =  PUTARG_REG; t61
  N004. t56             =  V25 MEM
  N000. t641            =  PUTARG_REG; t56
  N005.                    CALL     ; t640,t641
  N000.                    IL_OFFSET IL offset: 0x4f
  N001. t63             =  V26 MEM
  N003.                    V02 MEM; t63
  N000.                    IL_OFFSET IL offset: 0x50
  N002. t66             =  V02 MEM
  N000. t642            =  PUTARG_REG; t66
  N003.                    CALL nullcheck; t642
  N000.                    IL_OFFSET IL offset: 0x56
  N001.                    NO_OP    
  N000.                    IL_OFFSET IL offset: 0x57
  N001. t69             =  CALL     
  N003.                    V27 MEM; t69
  N000.                    IL_OFFSET IL offset: 0x5c
  N001. t73             =  V27 MEM
  N003.                    V03 MEM; t73
  N000.                    IL_OFFSET IL offset: 0x5d
  N002. t78             =  LCL_VAR_ADDR V03 loc1         
  N000. t643            =  PUTARG_REG; t78
  N003. t79             =  CALL     ; t643
  N005.                    V28 MEM; t79
  N000.                    IL_OFFSET IL offset: 0x64
  N003. t406            =  CNS_INT(h) 0xBE2A31F8 "	 Consumer thread started, adding items..."
  N004. t407            =  IND      ; t406
  N000. t644            =  PUTARG_REG; t407
  N005. t82             =  V28 MEM
  N000. t645            =  PUTARG_REG; t82
  N006. t84             =  CALL     ; t644,t645
  N008.                    V29 MEM; t84
  N000.                    IL_OFFSET IL offset: 0x6e
  N002. t87             =  V29 MEM
  N000. t646            =  PUTARG_REG; t87
  N003.                    CALL     ; t646
  N000.                    IL_OFFSET IL offset: 0x73
  N001.                    NO_OP    
  N000.                    IL_OFFSET IL offset: 0x74
  N001. t90             =  CNS_INT   0
  N003.                    V04 MEM; t90
  N000.                    IL_OFFSET IL offset: 0x76
  N001.                    NOP      

BB14 [0E6..0F1) -> BB06 (cond), preds={BB05,BB13} succs={BB15,BB06}
=====
  N000.                    IL_OFFSET IL offset: 0xe6
  N001.                    V04 MEM
  N002.                    CNS_INT   10
  N003. t96             =  LT       
  N005.                    V07 MEM; t96
  N000.                    IL_OFFSET IL offset: 0xed
  N001.                    V07 MEM
  N002.                    CNS_INT   0
  N003.                    NE       
  N004.                    JTRUE    

BB06 [078..083), preds={BB14} succs={BB07}
=====
  N000.                    IL_OFFSET IL offset: 0x78
  N001.                    NO_OP    
  N000.                    IL_OFFSET IL offset: 0x79
  N001. t104            =  V00 MEM
  N003. t412            =  LEA(b+8) ; t104
  N004. t105            =  IND      ; t412
  N006.                    V05 MEM; t105
  N000.                    IL_OFFSET IL offset: 0x80
  N001. t108            =  CNS_INT   0
  N003.                    V06 MEM; t108

BB07 [083..0D5) -> BB08 (always), preds={BB06} succs={BB08}
=====
  N000.                    IL_OFFSET IL offset: 0x83
  N003. t113            =  LCL_VAR_ADDR V06 loc4         
  N000. t647            =  PUTARG_REG; t113
  N004. t111            =  V05 MEM
  N000. t648            =  PUTARG_REG; t111
  N005.                    CALL     ; t647,t648
  N000.                    IL_OFFSET IL offset: 0x8b
  N001.                    NO_OP    
  N000.                    IL_OFFSET IL offset: 0x8c
  N001.                    NO_OP    
  N000.                    IL_OFFSET IL offset: 0x8d
  N002. t120            =  CNS_INT(h) 0x7ffdb70260c8 method
  N000. t649            =  PUTARG_REG; t120
  N003. t121            =  CALL help; t649
  N005.                    V30 MEM; t121
  N001. t117            =  V00 MEM
  N003. t419            =  LEA(b+8) ; t117
  N004. t118            =  IND      ; t419
  N006. t417            =  LEA(b+8) ; t118
  N007. t119            =  IND      ; t417
  N009.                    V31 MEM; t119
  N002. t124            =  V30 MEM
  N000. t650            =  PUTARG_REG; t124
  N003.                    CALL     ; t650
  N000.                    IL_OFFSET IL offset: 0x9d
  N001. t128            =  V31 MEM
  N003. t422            =  LEA(b+8) ; t128
  N005. t129            =  V30 MEM
  N000.                    STOREIND ; t422,t129
  N000.                    IL_OFFSET IL offset: 0xa2
  N001. t132            =  V00 MEM
  N003. t426            =  LEA(b+8) ; t132
  N004. t133            =  IND      ; t426
  N006. t424            =  LEA(b+8) ; t133
  N008. t134            =  V00 MEM
  N010. t432            =  LEA(b+8) ; t134
  N011. t135            =  IND      ; t432
  N013. t430            =  LEA(b+8) ; t135
  N014. t136            =  IND      ; t430
  N016. t428            =  LEA(b+8) ; t136
  N017. t137            =  IND      ; t428
  N000.                    STOREIND ; t424,t137
  N000.                    IL_OFFSET IL offset: 0xbd
  N002. t143            =  CNS_INT(h) 0x7ffdb6c458b8 token
  N000. t651            =  PUTARG_REG; t143
  N003. t144            =  CALL help; t651
  N005.                    V32 MEM; t144
  N001. t140            =  V00 MEM
  N003. t437            =  LEA(b+8) ; t140
  N004. t141            =  IND      ; t437
  N006. t435            =  LEA(b+8) ; t141
  N007. t142            =  IND      ; t435
  N009.                    V33 MEM; t142
  N002. t147            =  V32 MEM
  N000. t652            =  PUTARG_REG; t147
  N003.                    CALL     ; t652
  N000.                    IL_OFFSET IL offset: 0xcd
  N001. t151            =  V33 MEM
  N003. t440            =  LEA(b+16); t151
  N005. t152            =  V32 MEM
  N000.                    STOREIND ; t440,t152
  N000.                    IL_OFFSET IL offset: 0xd2
  N001.                    NO_OP    
  N000.                    IL_OFFSET IL offset: 0xd3
  N001.                    NOP      

BB08 [???..???) -> BB10 (callf), preds={BB07} succs={BB10}
=====

BB10 [0D5..0D9) -> BB12 (cond), preds={BB08} succs={BB11,BB12}
=====
  N000.                    IL_OFFSET IL offset: 0xd5
  N001. t163            =  V06 MEM
  N002. t441            =  CAST     ; t163
  N003.                    CNS_INT   0
  N004.                    EQ       ; t441
  N005.                    JTRUE    

BB11 [0D9..0E0), preds={BB10} succs={BB12}
=====
  N000.                    IL_OFFSET IL offset: 0xd9
  N002. t168            =  V05 MEM
  N000. t675            =  PUTARG_REG; t168
  N003.                    CALL     ; t675
  N000.                    IL_OFFSET IL offset: 0xdf
  N001.                    NO_OP    

BB12 [0E0..0E1) (finret), preds={BB10,BB11} succs={BB09}
=====
  N000.                    IL_OFFSET IL offset: 0xe0
  N001.                    RETFILT  

BB09 [???..???) -> BB13 (ALWAYS), preds={BB12} succs={BB13}
=====

BB13 [0E1..0E6), preds={BB09} succs={BB14}
=====
  N000.                    IL_OFFSET IL offset: 0xe1
  N001.                    NO_OP    
  N000.                    IL_OFFSET IL offset: 0xe2
  N001. t158            =  V04 MEM
  N002.                    CNS_INT   1
  N003. t160            =  ADD      ; t158
  N005.                    V04 MEM; t160

BB15 [0F1..110) -> BB28 (always), preds={BB14} succs={BB28}
=====
  N000.                    IL_OFFSET IL offset: 0xf1
  N001. t171            =  CALL     
  N003.                    V34 MEM; t171
  N000.                    IL_OFFSET IL offset: 0xf6
  N001. t175            =  V34 MEM
  N003.                    V03 MEM; t175
  N000.                    IL_OFFSET IL offset: 0xf7
  N002. t180            =  LCL_VAR_ADDR V03 loc1         
  N000. t653            =  PUTARG_REG; t180
  N003. t181            =  CALL     ; t653
  N005.                    V35 MEM; t181
  N000.                    IL_OFFSET IL offset: 0xfe
  N003. t444            =  CNS_INT(h) 0xBE2A3200 "	 Waiting for list processing to complete..."
  N004. t445            =  IND      ; t444
  N000. t654            =  PUTARG_REG; t445
  N005. t184            =  V35 MEM
  N000. t655            =  PUTARG_REG; t184
  N006. t186            =  CALL     ; t654,t655
  N008.                    V36 MEM; t186
  N000.                    IL_OFFSET IL offset: 0x108
  N002. t189            =  V36 MEM
  N000. t656            =  PUTARG_REG; t189
  N003.                    CALL     ; t656
  N000.                    IL_OFFSET IL offset: 0x10d
  N001.                    NO_OP    
  N000.                    IL_OFFSET IL offset: 0x10e
  N001.                    NOP      

BB28 [161..166) -> BB16 (always), preds={BB15,BB27} succs={BB16}
=====
  N000.                    IL_OFFSET IL offset: 0x161
  N001.                    CNS_INT   1
  N003.                    V11 MEM
  N000.                    IL_OFFSET IL offset: 0x164
  N001.                    NOP      

BB16 [110..11C), preds={BB28} succs={BB17}
=====
  N000.                    IL_OFFSET IL offset: 0x110
  N001.                    NO_OP    
  N000.                    IL_OFFSET IL offset: 0x111
  N001. t198            =  V00 MEM
  N003. t450            =  LEA(b+8) ; t198
  N004. t199            =  IND      ; t450
  N006.                    V08 MEM; t199
  N000.                    IL_OFFSET IL offset: 0x119
  N001. t202            =  CNS_INT   0
  N003.                    V09 MEM; t202

BB17 [11C..145) -> BB19 (cond), preds={BB16} succs={BB18,BB19}
=====
  N000.                    IL_OFFSET IL offset: 0x11c
  N003. t207            =  LCL_VAR_ADDR V09 loc7         
  N000. t657            =  PUTARG_REG; t207
  N004. t205            =  V08 MEM
  N000. t658            =  PUTARG_REG; t205
  N005.                    CALL     ; t657,t658
  N000.                    IL_OFFSET IL offset: 0x125
  N001.                    NO_OP    
  N000.                    IL_OFFSET IL offset: 0x126
  N001.                    NO_OP    
  N000.                    IL_OFFSET IL offset: 0x127
  N001. t211            =  V00 MEM
  N003. t456            =  LEA(b+8) ; t211
  N004. t212            =  IND      ; t456
  N006. t454            =  LEA(b+8) ; t212
  N007. t213            =  IND      ; t454
  N008. t214            =  V00 MEM
  N010. t460            =  LEA(b+8) ; t214
  N011. t215            =  IND      ; t460
  N013. t458            =  LEA(b+16); t215
  N014. t216            =  IND      ; t458
  N015. t217            =  EQ       ; t213,t216
  N017.                    V10 MEM; t217
  N000.                    IL_OFFSET IL offset: 0x141
  N001.                    V10 MEM
  N002.                    CNS_INT   0
  N003.                    EQ       
  N004.                    JTRUE    

BB18 [145..148) -> BB20 (always), preds={BB17} succs={BB20}
=====
  N000.                    IL_OFFSET IL offset: 0x145
  N001.                    NO_OP    
  N000.                    IL_OFFSET IL offset: 0x146
  N001.                    NOP      

BB19 [148..14B) -> BB22 (always), preds={BB17} succs={BB22}
=====
  N000.                    IL_OFFSET IL offset: 0x148
  N001.                    NO_OP    
  N000.                    IL_OFFSET IL offset: 0x149
  N001.                    NOP      

BB20 [???..???) -> BB24 (callf), preds={BB18} succs={BB24}
=====

BB22 [???..???) -> BB24 (callf), preds={BB19} succs={BB24}
=====

BB24 [14B..14F) -> BB26 (cond), preds={BB20,BB22} succs={BB25,BB26}
=====
  N000.                    IL_OFFSET IL offset: 0x14b
  N001. t363            =  V09 MEM
  N002. t461            =  CAST     ; t363
  N003.                    CNS_INT   0
  N004.                    EQ       ; t461
  N005.                    JTRUE    

BB25 [14F..157), preds={BB24} succs={BB26}
=====
  N000.                    IL_OFFSET IL offset: 0x14f
  N002. t368            =  V08 MEM
  N000. t676            =  PUTARG_REG; t368
  N003.                    CALL     ; t676
  N000.                    IL_OFFSET IL offset: 0x156
  N001.                    NO_OP    

BB26 [157..158) (finret), preds={BB24,BB25} succs={BB21,BB23}
=====
  N000.                    IL_OFFSET IL offset: 0x157
  N001.                    RETFILT  

BB21 [???..???) -> BB29 (ALWAYS), preds={BB26} succs={BB29}
=====

BB23 [???..???) -> BB27 (ALWAYS), preds={BB26} succs={BB27}
=====

BB27 [158..161), preds={BB23} succs={BB28}
=====
  N000.                    IL_OFFSET IL offset: 0x158
  N002. t226            =  CNS_INT   100
  N000. t659            =  PUTARG_REG; t226
  N003.                    CALL     ; t659
  N000.                    IL_OFFSET IL offset: 0x15f
  N001.                    NO_OP    
  N000.                    IL_OFFSET IL offset: 0x160
  N001.                    NO_OP    

BB29 [166..1B1) -> BB39 (always), preds={BB21} succs={BB39}
=====
  N000.                    IL_OFFSET IL offset: 0x166
  N001. t232            =  CALL     
  N003.                    V37 MEM; t232
  N000.                    IL_OFFSET IL offset: 0x16b
  N001. t236            =  V37 MEM
  N003.                    V03 MEM; t236
  N000.                    IL_OFFSET IL offset: 0x16c
  N002. t241            =  LCL_VAR_ADDR V03 loc1         
  N000. t660            =  PUTARG_REG; t241
  N003. t242            =  CALL     ; t660
  N005.                    V38 MEM; t242
  N000.                    IL_OFFSET IL offset: 0x173
  N003. t466            =  CNS_INT(h) 0xBE2A3208 "	 Done.  Profiler is active, available options:"
  N004. t467            =  IND      ; t466
  N000. t661            =  PUTARG_REG; t467
  N005. t245            =  V38 MEM
  N000. t662            =  PUTARG_REG; t245
  N006. t247            =  CALL     ; t661,t662
  N008.                    V39 MEM; t247
  N000.                    IL_OFFSET IL offset: 0x17d
  N002. t250            =  V39 MEM
  N000. t663            =  PUTARG_REG; t250
  N003.                    CALL     ; t663
  N000.                    IL_OFFSET IL offset: 0x182
  N001.                    NO_OP    
  N000.                    IL_OFFSET IL offset: 0x183
  N002. t471            =  CNS_INT(h) 0xBE2A3210 "   Q = quit"
  N003. t472            =  IND      ; t471
  N000. t664            =  PUTARG_REG; t472
  N004.                    CALL     ; t664
  N000.                    IL_OFFSET IL offset: 0x18d
  N001.                    NO_OP    
  N000.                    IL_OFFSET IL offset: 0x18e
  N002. t474            =  CNS_INT(h) 0xBE2A3218 "   H = heap snapshot"
  N003. t475            =  IND      ; t474
  N000. t665            =  PUTARG_REG; t475
  N004.                    CALL     ; t665
  N000.                    IL_OFFSET IL offset: 0x198
  N001.                    NO_OP    
  N000.                    IL_OFFSET IL offset: 0x199
  N002. t477            =  CNS_INT(h) 0xBE2A3220 "   G = GC (max gen)"
  N003. t478            =  IND      ; t477
  N000. t666            =  PUTARG_REG; t478
  N004.                    CALL     ; t666
  N000.                    IL_OFFSET IL offset: 0x1a3
  N001.                    NO_OP    
  N000.                    IL_OFFSET IL offset: 0x1a4
  N002. t480            =  CNS_INT(h) 0xBE2A3228 "   R = clear the running flag to stop the consumer thread"
  N003. t481            =  IND      ; t480
  N000. t667            =  PUTARG_REG; t481
  N004.                    CALL     ; t667
  N000.                    IL_OFFSET IL offset: 0x1ae
  N001.                    NO_OP    
  N000.                    IL_OFFSET IL offset: 0x1af
  N001.                    NOP      

BB39 [225..22A) -> BB30 (always), preds={BB29,BB38} succs={BB30}
=====
  N000.                    IL_OFFSET IL offset: 0x225
  N001.                    CNS_INT   1
  N003.                    V17 MEM
  N000.                    IL_OFFSET IL offset: 0x228
  N001.                    NOP      

BB30 [1B1..1CA) -> BB32 (cond), preds={BB39} succs={BB31,BB32}
=====
  N000.                    IL_OFFSET IL offset: 0x1b1
  N001.                    NO_OP    
  N000.                    IL_OFFSET IL offset: 0x1b2
  N002. t273            =  LCL_VAR_ADDR V40 tmp22        
  N000. t668            =  PUTARG_REG; t273
  N003.                    CALL     ; t668
  N000.                    IL_OFFSET IL offset: 0x1b7
  N001.                    V40 MEM
  N000.                    LCL_VAR_ADDR V12 loc10        
  N003.                    STORE_BLK
  N000.                    IL_OFFSET IL offset: 0x1b9
  N002. t279            =  LCL_VAR_ADDR V12 loc10        
  N000. t670            =  PUTARG_REG; t279
  N003. t280            =  CALL     ; t670
  N005.                    V41 MEM; t280
  N000.                    IL_OFFSET IL offset: 0x1c0
  N001.                    V41 MEM
  N002.                    CNS_INT   71
  N003. t285            =  EQ       
  N005.                    V13 MEM; t285
  N000.                    IL_OFFSET IL offset: 0x1c6
  N001.                    V13 MEM
  N002.                    CNS_INT   0
  N003.                    EQ       
  N004.                    JTRUE    

BB31 [1CA..1D9) -> BB38 (always), preds={BB30} succs={BB38}
=====
  N000.                    IL_OFFSET IL offset: 0x1ca
  N001.                    NO_OP    
  N000.                    IL_OFFSET IL offset: 0x1cb
  N001. t355            =  CALL     
  N003.                    V45 MEM; t355
  N000.                    IL_OFFSET IL offset: 0x1d0
  N002. t358            =  V45 MEM
  N000. t671            =  PUTARG_REG; t358
  N003.                    CALL     ; t671
  N000.                    IL_OFFSET IL offset: 0x1d5
  N001.                    NO_OP    
  N000.                    IL_OFFSET IL offset: 0x1d6
  N001.                    NO_OP    
  N000.                    IL_OFFSET IL offset: 0x1d7
  N001.                    NOP      

BB32 [1D9..1EA) -> BB34 (cond), preds={BB30} succs={BB33,BB34}
=====
  N000.                    IL_OFFSET IL offset: 0x1d9
  N002. t293            =  LCL_VAR_ADDR V12 loc10        
  N000. t672            =  PUTARG_REG; t293
  N003. t294            =  CALL     ; t672
  N005.                    V42 MEM; t294
  N000.                    IL_OFFSET IL offset: 0x1e0
  N001.                    V42 MEM
  N002.                    CNS_INT   72
  N003. t299            =  EQ       
  N005.                    V14 MEM; t299
  N000.                    IL_OFFSET IL offset: 0x1e6
  N001.                    V14 MEM
  N002.                    CNS_INT   0
  N003.                    EQ       
  N004.                    JTRUE    

BB33 [1EA..1F4) -> BB38 (always), preds={BB32} succs={BB38}
=====
  N000.                    IL_OFFSET IL offset: 0x1ea
  N001.                    NO_OP    
  N000.                    IL_OFFSET IL offset: 0x1eb
  N001.                    CALL     
  N000.                    IL_OFFSET IL offset: 0x1f0
  N001.                    NO_OP    
  N000.                    IL_OFFSET IL offset: 0x1f1
  N001.                    NO_OP    
  N000.                    IL_OFFSET IL offset: 0x1f2
  N001.                    NOP      

BB34 [1F4..205) -> BB36 (cond), preds={BB32} succs={BB35,BB36}
=====
  N000.                    IL_OFFSET IL offset: 0x1f4
  N002. t307            =  LCL_VAR_ADDR V12 loc10        
  N000. t673            =  PUTARG_REG; t307
  N003. t308            =  CALL     ; t673
  N005.                    V43 MEM; t308
  N000.                    IL_OFFSET IL offset: 0x1fb
  N001.                    V43 MEM
  N002.                    CNS_INT   82
  N003. t313            =  EQ       
  N005.                    V15 MEM; t313
  N000.                    IL_OFFSET IL offset: 0x201
  N001.                    V15 MEM
  N002.                    CNS_INT   0
  N003.                    EQ       
  N004.                    JTRUE    

BB35 [205..210) -> BB38 (always), preds={BB34} succs={BB38}
=====
  N000.                    IL_OFFSET IL offset: 0x205
  N001.                    NO_OP    
  N000.                    IL_OFFSET IL offset: 0x206
  N001. t343            =  V00 MEM
  N003. t489            =  LEA(b+16); t343
  N005.                    CNS_INT   0
  N000.                    STOREIND ; t489
  N000.                    IL_OFFSET IL offset: 0x20d
  N001.                    NO_OP    
  N000.                    IL_OFFSET IL offset: 0x20e
  N001.                    NOP      

BB36 [210..221) -> BB38 (cond), preds={BB34} succs={BB37,BB38}
=====
  N000.                    IL_OFFSET IL offset: 0x210
  N002. t321            =  LCL_VAR_ADDR V12 loc10        
  N000. t674            =  PUTARG_REG; t321
  N003. t322            =  CALL     ; t674
  N005.                    V44 MEM; t322
  N000.                    IL_OFFSET IL offset: 0x217
  N001.                    V44 MEM
  N002.                    CNS_INT   81
  N003. t327            =  EQ       
  N005.                    V16 MEM; t327
  N000.                    IL_OFFSET IL offset: 0x21d
  N001.                    V16 MEM
  N002.                    CNS_INT   0
  N003.                    EQ       
  N004.                    JTRUE    

BB37 [221..224) -> BB40 (always), preds={BB36} succs={BB40}
=====
  N000.                    IL_OFFSET IL offset: 0x221
  N001.                    NO_OP    
  N000.                    IL_OFFSET IL offset: 0x222
  N001.                    NOP      

BB38 [224..225), preds={BB31,BB33,BB35,BB36} succs={BB39}
=====
  N000.                    IL_OFFSET IL offset: 0x224
  N001.                    NO_OP    

BB40 [22A..232) (return), preds={BB37} succs={}
=====
  N000.                    IL_OFFSET IL offset: 0x22a
  N001. t337            =  V00 MEM
  N003. t493            =  LEA(b+16); t337
  N005.                    CNS_INT   0
  N000.                    STOREIND ; t493
  N000.                    IL_OFFSET IL offset: 0x231
  N001.                    RETURN   




buildIntervals second part ========
Int arg V00 in reg rcx
Int arg V01 in reg rdx

NEW BLOCK BB01
<RefPosition #0   @0   RefTypeBB  BB01 regmask=[] minReg=1 wt=100.00>

DefList: {  }
N002 (  0,  0) [000000] ------------              *  NOP       void   REG NA


NEW BLOCK BB02


Setting BB01 as the predecessor for determining incoming variable registers of BB02
<RefPosition #1   @4   RefTypeBB  BB02 regmask=[] minReg=1 wt=100.00>

DefList: {  }
N006 (  2, 10) [000371] Hc----------              *  CNS_INT(h) long   0x7ffdb6f1d838 global ptr REG NA
Contained
DefList: {  }
N008 (  4, 12) [000372] nc----------              *  IND       int    REG NA
Contained
DefList: {  }
N010 (  1,  1) [000373] -c----------              *  CNS_INT   int    0 REG NA
Contained
DefList: {  }
N012 (  6, 14) [000374] J------N----              *  EQ        void   REG NA

DefList: {  }
N014 (  8, 16) [000494] ------------              *  JTRUE     void   REG NA


NEW BLOCK BB03


Setting BB02 as the predecessor for determining incoming variable registers of BB03
<RefPosition #2   @16  RefTypeBB  BB03 regmask=[] minReg=1 wt=50.00>

DefList: {  }
N018 ( 14,  5) [000375] --C-G-?-----              *  CALL help void   HELPER.CORINFO_HELP_DBG_IS_JUST_MY_CODE REG NA
<RefPosition #3   @19  RefTypeKill <Reg:rax>  BB03 regmask=[rax] minReg=1 wt=50.00>
<RefPosition #4   @19  RefTypeKill <Reg:rcx>  BB03 regmask=[rcx] minReg=1 wt=50.00>
<RefPosition #5   @19  RefTypeKill <Reg:rdx>  BB03 regmask=[rdx] minReg=1 wt=50.00>
<RefPosition #6   @19  RefTypeKill <Reg:r8 >  BB03 regmask=[r8] minReg=1 wt=50.00>
<RefPosition #7   @19  RefTypeKill <Reg:r9 >  BB03 regmask=[r9] minReg=1 wt=50.00>
<RefPosition #8   @19  RefTypeKill <Reg:r10>  BB03 regmask=[r10] minReg=1 wt=50.00>
<RefPosition #9   @19  RefTypeKill <Reg:r11>  BB03 regmask=[r11] minReg=1 wt=50.00>


NEW BLOCK BB04


Setting BB02 as the predecessor for determining incoming variable registers of BB04
<RefPosition #10  @20  RefTypeBB  BB04 regmask=[] minReg=1 wt=100.00>


NEW BLOCK BB05


Setting BB04 as the predecessor for determining incoming variable registers of BB05
<RefPosition #11  @22  RefTypeBB  BB05 regmask=[] minReg=1 wt=100.00>

DefList: {  }
N024 (???,???) [000495] ------------              *  IL_OFFSET void   IL offset: 0x0 REG NA

DefList: {  }
N026 (  1,  1) [000001] ------------              *  NO_OP     void   REG NA

DefList: {  }
N028 (???,???) [000496] ------------              *  IL_OFFSET void   IL offset: 0x1 REG NA

DefList: {  }
N030 ( 14,  5) [000002] --CXG-------              *  CALL      long   System.DateTime.get_Now REG NA
<RefPosition #12  @31  RefTypeKill <Reg:rax>  BB05 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #13  @31  RefTypeKill <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #14  @31  RefTypeKill <Reg:rdx>  BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #15  @31  RefTypeKill <Reg:r8 >  BB05 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #16  @31  RefTypeKill <Reg:r9 >  BB05 regmask=[r9] minReg=1 wt=100.00>
<RefPosition #17  @31  RefTypeKill <Reg:r10>  BB05 regmask=[r10] minReg=1 wt=100.00>
<RefPosition #18  @31  RefTypeKill <Reg:r11>  BB05 regmask=[r11] minReg=1 wt=100.00>
Interval  0: long RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #19  @31  RefTypeFixedReg <Reg:rax>  BB05 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #20  @31  RefTypeDef <Ivl:0> CALL BB05 regmask=[rax] minReg=1 fixed wt=400.00>

DefList: { N030.t2. CALL }
N032 ( 18,  8) [000005] DA-XG-------              *  STORE_LCL_VAR struct<System.DateTime, 8> V19 tmp1          NA REG NA
<RefPosition #21  @32  RefTypeUse <Ivl:0>  BB05 regmask=[allIntButFP] minReg=1 last wt=100.00>

DefList: {  }
N034 (???,???) [000497] ------------              *  IL_OFFSET void   IL offset: 0x6 REG NA

DefList: {  }
N036 (  3,  2) [000006] ------------              *  LCL_VAR   struct<System.DateTime, 8> V19 tmp1          NA REG NA
Interval  1: long RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #22  @37  RefTypeDef <Ivl:1> LCL_VAR BB05 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N036.t6. LCL_VAR }
N038 (  7,  5) [000009] DA--G-------              *  STORE_LCL_VAR struct<System.DateTime, 8>(AX) V03 loc1          NA REG NA
<RefPosition #23  @38  RefTypeUse <Ivl:1>  BB05 regmask=[allIntButFP] minReg=1 last wt=100.00>

DefList: {  }
N040 (???,???) [000498] ------------              *  IL_OFFSET void   IL offset: 0x7 REG NA

DefList: {  }
N042 (  3,  3) [000011] ------------              *  LCL_VAR_ADDR byref  V03 loc1          NA REG NA
Interval  2: byref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #24  @43  RefTypeDef <Ivl:2> LCL_VAR_ADDR BB05 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N042.t11. LCL_VAR_ADDR }
N044 (???,???) [000627] ------------              *  PUTARG_REG byref  REG rcx
<RefPosition #25  @44  RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #26  @44  RefTypeUse <Ivl:2>  BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
Interval  3: byref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #27  @45  RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #28  @45  RefTypeDef <Ivl:3> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>

DefList: { N044.t627. PUTARG_REG }
N046 ( 17, 10) [000012] --CXG-------              *  CALL      ref    System.DateTime.ToString REG NA
<RefPosition #29  @46  RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #30  @46  RefTypeUse <Ivl:3>  BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #31  @47  RefTypeKill <Reg:rax>  BB05 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #32  @47  RefTypeKill <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #33  @47  RefTypeKill <Reg:rdx>  BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #34  @47  RefTypeKill <Reg:r8 >  BB05 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #35  @47  RefTypeKill <Reg:r9 >  BB05 regmask=[r9] minReg=1 wt=100.00>
<RefPosition #36  @47  RefTypeKill <Reg:r10>  BB05 regmask=[r10] minReg=1 wt=100.00>
<RefPosition #37  @47  RefTypeKill <Reg:r11>  BB05 regmask=[r11] minReg=1 wt=100.00>
Interval  4: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #38  @47  RefTypeFixedReg <Reg:rax>  BB05 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #39  @47  RefTypeDef <Ivl:4> CALL BB05 regmask=[rax] minReg=1 fixed wt=400.00>

DefList: { N046.t12. CALL }
N048 ( 21, 13) [000014] DA-XG-------              *  STORE_LCL_VAR ref    V20 tmp2          NA REG NA
<RefPosition #40  @48  RefTypeUse <Ivl:4>  BB05 regmask=[allIntButFP] minReg=1 last wt=100.00>

DefList: {  }
N050 (???,???) [000499] ------------              *  IL_OFFSET void   IL offset: 0xe REG NA

DefList: {  }
N052 (  2, 10) [000380] H-----------              *  CNS_INT(h) long   0xBE2A31F0 "	 Created list" REG NA
Interval  5: long RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #41  @53  RefTypeDef <Ivl:5> CNS_INT BB05 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N052.t380. CNS_INT }
N054 (  4, 12) [000381] #---G-------              *  IND       ref    REG NA
<RefPosition #42  @54  RefTypeUse <Ivl:5>  BB05 regmask=[allIntButFP] minReg=1 last wt=100.00>
Interval  6: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #43  @55  RefTypeDef <Ivl:6> IND BB05 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N054.t381. IND }
N056 (???,???) [000628] ----G-------              *  PUTARG_REG ref    REG rdx
<RefPosition #44  @56  RefTypeFixedReg <Reg:rdx>  BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #45  @56  RefTypeUse <Ivl:6>  BB05 regmask=[rdx] minReg=1 last fixed wt=100.00>
Interval  7: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #46  @57  RefTypeFixedReg <Reg:rdx>  BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #47  @57  RefTypeDef <Ivl:7> PUTARG_REG BB05 regmask=[rdx] minReg=1 fixed wt=400.00>

DefList: { N056.t628. PUTARG_REG }
N058 (  3,  2) [000015] ------------              *  LCL_VAR   ref    V20 tmp2          NA REG NA
Interval  8: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #48  @59  RefTypeDef <Ivl:8> LCL_VAR BB05 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N056.t628. PUTARG_REG; N058.t15. LCL_VAR }
N060 (???,???) [000629] ------------              *  PUTARG_REG ref    REG rcx
<RefPosition #49  @60  RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #50  @60  RefTypeUse <Ivl:8>  BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
Interval  9: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #51  @61  RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #52  @61  RefTypeDef <Ivl:9> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>

DefList: { N056.t628. PUTARG_REG; N060.t629. PUTARG_REG }
N062 ( 21, 21) [000017] --CXG-------              *  CALL      ref    System.String.Concat REG NA
<RefPosition #53  @62  RefTypeFixedReg <Reg:rdx>  BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #54  @62  RefTypeUse <Ivl:7>  BB05 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #55  @62  RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #56  @62  RefTypeUse <Ivl:9>  BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #57  @63  RefTypeKill <Reg:rax>  BB05 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #58  @63  RefTypeKill <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #59  @63  RefTypeKill <Reg:rdx>  BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #60  @63  RefTypeKill <Reg:r8 >  BB05 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #61  @63  RefTypeKill <Reg:r9 >  BB05 regmask=[r9] minReg=1 wt=100.00>
<RefPosition #62  @63  RefTypeKill <Reg:r10>  BB05 regmask=[r10] minReg=1 wt=100.00>
<RefPosition #63  @63  RefTypeKill <Reg:r11>  BB05 regmask=[r11] minReg=1 wt=100.00>
Interval 10: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #64  @63  RefTypeFixedReg <Reg:rax>  BB05 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #65  @63  RefTypeDef <Ivl:10> CALL BB05 regmask=[rax] minReg=1 fixed wt=400.00>

DefList: { N062.t17. CALL }
N064 ( 25, 24) [000019] DA-XG-------              *  STORE_LCL_VAR ref    V21 tmp3          NA REG NA
<RefPosition #66  @64  RefTypeUse <Ivl:10>  BB05 regmask=[allIntButFP] minReg=1 last wt=100.00>

DefList: {  }
N066 (???,???) [000500] ------------              *  IL_OFFSET void   IL offset: 0x18 REG NA

DefList: {  }
N068 (  3,  2) [000020] ------------              *  LCL_VAR   ref    V21 tmp3          NA REG NA
Interval 11: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #67  @69  RefTypeDef <Ivl:11> LCL_VAR BB05 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N068.t20. LCL_VAR }
N070 (???,???) [000630] ------------              *  PUTARG_REG ref    REG rcx
<RefPosition #68  @70  RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #69  @70  RefTypeUse <Ivl:11>  BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
Interval 12: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #70  @71  RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #71  @71  RefTypeDef <Ivl:12> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>

DefList: { N070.t630. PUTARG_REG }
N072 ( 17,  8) [000021] --CXG-------              *  CALL      void   System.Console.WriteLine REG NA
<RefPosition #72  @72  RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #73  @72  RefTypeUse <Ivl:12>  BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #74  @73  RefTypeKill <Reg:rax>  BB05 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #75  @73  RefTypeKill <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #76  @73  RefTypeKill <Reg:rdx>  BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #77  @73  RefTypeKill <Reg:r8 >  BB05 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #78  @73  RefTypeKill <Reg:r9 >  BB05 regmask=[r9] minReg=1 wt=100.00>
<RefPosition #79  @73  RefTypeKill <Reg:r10>  BB05 regmask=[r10] minReg=1 wt=100.00>
<RefPosition #80  @73  RefTypeKill <Reg:r11>  BB05 regmask=[r11] minReg=1 wt=100.00>

DefList: {  }
N074 (???,???) [000501] ------------              *  IL_OFFSET void   IL offset: 0x1d REG NA

DefList: {  }
N076 (  1,  1) [000022] ------------              *  NO_OP     void   REG NA

DefList: {  }
N078 (???,???) [000502] ------------              *  IL_OFFSET void   IL offset: 0x1e REG NA

DefList: {  }
N080 (  2, 10) [000024] H-----------              *  CNS_INT(h) long   0x7ffdb7022b70 method REG NA
Interval 13: long RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #81  @81  RefTypeDef <Ivl:13> CNS_INT BB05 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N080.t24. CNS_INT }
N082 (???,???) [000631] ------------              *  PUTARG_REG long   REG rcx
<RefPosition #82  @82  RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #83  @82  RefTypeUse <Ivl:13>  BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
Interval 14: long RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #84  @83  RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #85  @83  RefTypeDef <Ivl:14> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>

DefList: { N082.t631. PUTARG_REG }
N084 ( 16, 16) [000025] --C---------              *  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST REG NA
<RefPosition #86  @84  RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #87  @84  RefTypeUse <Ivl:14>  BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #88  @85  RefTypeKill <Reg:rax>  BB05 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #89  @85  RefTypeKill <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #90  @85  RefTypeKill <Reg:rdx>  BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #91  @85  RefTypeKill <Reg:r8 >  BB05 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #92  @85  RefTypeKill <Reg:r9 >  BB05 regmask=[r9] minReg=1 wt=100.00>
<RefPosition #93  @85  RefTypeKill <Reg:r10>  BB05 regmask=[r10] minReg=1 wt=100.00>
<RefPosition #94  @85  RefTypeKill <Reg:r11>  BB05 regmask=[r11] minReg=1 wt=100.00>
Interval 15: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #95  @85  RefTypeFixedReg <Reg:rax>  BB05 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #96  @85  RefTypeDef <Ivl:15> CALL BB05 regmask=[rax] minReg=1 fixed wt=400.00>

DefList: { N084.t25. CALL }
N086 ( 20, 19) [000027] DA----------              *  STORE_LCL_VAR ref    V22 tmp4          NA REG NA
<RefPosition #97  @86  RefTypeUse <Ivl:15>  BB05 regmask=[allIntButFP] minReg=1 last wt=100.00>

DefList: {  }
N088 (  3,  2) [000028] ------------              *  LCL_VAR   ref    V22 tmp4          NA REG NA
Interval 16: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #98  @89  RefTypeDef <Ivl:16> LCL_VAR BB05 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N088.t28. LCL_VAR }
N090 (???,???) [000632] ------------              *  PUTARG_REG ref    REG rcx
<RefPosition #99  @90  RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #100 @90  RefTypeUse <Ivl:16>  BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
Interval 17: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #101 @91  RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #102 @91  RefTypeDef <Ivl:17> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>

DefList: { N090.t632. PUTARG_REG }
N092 ( 17,  9) [000029] --CXG-------              *  CALL      void   FalseLeakRepro.List..ctor REG NA
<RefPosition #103 @92  RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #104 @92  RefTypeUse <Ivl:17>  BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #105 @93  RefTypeKill <Reg:rax>  BB05 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #106 @93  RefTypeKill <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #107 @93  RefTypeKill <Reg:rdx>  BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #108 @93  RefTypeKill <Reg:r8 >  BB05 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #109 @93  RefTypeKill <Reg:r9 >  BB05 regmask=[r9] minReg=1 wt=100.00>
<RefPosition #110 @93  RefTypeKill <Reg:r10>  BB05 regmask=[r10] minReg=1 wt=100.00>
<RefPosition #111 @93  RefTypeKill <Reg:r11>  BB05 regmask=[r11] minReg=1 wt=100.00>

DefList: {  }
N094 (???,???) [000503] ------------              *  IL_OFFSET void   IL offset: 0x24 REG NA

DefList: {  }
N096 (  3,  2) [000023] ------------              *  LCL_VAR   ref    V00 this          NA REG NA
Interval 18: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #112 @97  RefTypeDef <Ivl:18> LCL_VAR BB05 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N096.t23. LCL_VAR }
N098 (  4,  3) [000388] ------------              *  LEA(b+8)  byref  REG NA
<RefPosition #113 @98  RefTypeUse <Ivl:18>  BB05 regmask=[allIntButFP] minReg=1 last wt=100.00>
Interval 19: byref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #114 @99  RefTypeDef <Ivl:19> LEA BB05 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N098.t388. LEA }
N100 (  3,  2) [000030] ------------              *  LCL_VAR   ref    V22 tmp4          NA REG NA
Interval 20: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #115 @101 RefTypeDef <Ivl:20> LCL_VAR BB05 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N098.t388. LEA; N100.t30. LCL_VAR }
N102 (???,???) [000504] -A-XG-------              *  STOREIND  ref    REG NA
<RefPosition #116 @102 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #117 @102 RefTypeUse <Ivl:19>  BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #118 @102 RefTypeFixedReg <Reg:rdx>  BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #119 @102 RefTypeUse <Ivl:20>  BB05 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #120 @103 RefTypeKill <Reg:rax>  BB05 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #121 @103 RefTypeKill <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #122 @103 RefTypeKill <Reg:rdx>  BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #123 @103 RefTypeKill <Reg:r8 >  BB05 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #124 @103 RefTypeKill <Reg:r9 >  BB05 regmask=[r9] minReg=1 wt=100.00>
<RefPosition #125 @103 RefTypeKill <Reg:r10>  BB05 regmask=[r10] minReg=1 wt=100.00>
<RefPosition #126 @103 RefTypeKill <Reg:r11>  BB05 regmask=[r11] minReg=1 wt=100.00>
<RefPosition #127 @103 RefTypeKill <Reg:mm0>  BB05 regmask=[mm0] minReg=1 wt=100.00>
<RefPosition #128 @103 RefTypeKill <Reg:mm1>  BB05 regmask=[mm1] minReg=1 wt=100.00>
<RefPosition #129 @103 RefTypeKill <Reg:mm2>  BB05 regmask=[mm2] minReg=1 wt=100.00>
<RefPosition #130 @103 RefTypeKill <Reg:mm3>  BB05 regmask=[mm3] minReg=1 wt=100.00>
<RefPosition #131 @103 RefTypeKill <Reg:mm4>  BB05 regmask=[mm4] minReg=1 wt=100.00>
<RefPosition #132 @103 RefTypeKill <Reg:mm5>  BB05 regmask=[mm5] minReg=1 wt=100.00>

DefList: {  }
N104 (???,???) [000505] ------------              *  IL_OFFSET void   IL offset: 0x29 REG NA

DefList: {  }
N106 (  2, 10) [000036] H-----------              *  CNS_INT(h) long   0x7ffdb6c458b8 token REG NA
Interval 21: long RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #133 @107 RefTypeDef <Ivl:21> CNS_INT BB05 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N106.t36. CNS_INT }
N108 (???,???) [000633] ------------              *  PUTARG_REG long   REG rcx
<RefPosition #134 @108 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #135 @108 RefTypeUse <Ivl:21>  BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
Interval 22: long RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #136 @109 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #137 @109 RefTypeDef <Ivl:22> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>

DefList: { N108.t633. PUTARG_REG }
N110 ( 16, 16) [000037] --C---------              *  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST REG NA
<RefPosition #138 @110 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #139 @110 RefTypeUse <Ivl:22>  BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #140 @111 RefTypeKill <Reg:rax>  BB05 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #141 @111 RefTypeKill <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #142 @111 RefTypeKill <Reg:rdx>  BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #143 @111 RefTypeKill <Reg:r8 >  BB05 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #144 @111 RefTypeKill <Reg:r9 >  BB05 regmask=[r9] minReg=1 wt=100.00>
<RefPosition #145 @111 RefTypeKill <Reg:r10>  BB05 regmask=[r10] minReg=1 wt=100.00>
<RefPosition #146 @111 RefTypeKill <Reg:r11>  BB05 regmask=[r11] minReg=1 wt=100.00>
Interval 23: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #147 @111 RefTypeFixedReg <Reg:rax>  BB05 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #148 @111 RefTypeDef <Ivl:23> CALL BB05 regmask=[rax] minReg=1 fixed wt=400.00>

DefList: { N110.t37. CALL }
N112 ( 20, 19) [000039] DA----------              *  STORE_LCL_VAR ref    V23 tmp5          NA REG NA
<RefPosition #149 @112 RefTypeUse <Ivl:23>  BB05 regmask=[allIntButFP] minReg=1 last wt=100.00>

DefList: {  }
N114 (  3,  2) [000033] ------------              *  LCL_VAR   ref    V00 this          NA REG NA
Interval 24: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #150 @115 RefTypeDef <Ivl:24> LCL_VAR BB05 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N114.t33. LCL_VAR }
N116 (  4,  3) [000393] -c----------              *  LEA(b+8)  byref  REG NA
Contained
DefList: { N114.t33. LCL_VAR }
N118 (  6,  5) [000034] ---XG-------              *  IND       ref    REG NA
<RefPosition #151 @118 RefTypeUse <Ivl:24>  BB05 regmask=[allIntButFP] minReg=1 last wt=100.00>
Interval 25: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #152 @119 RefTypeDef <Ivl:25> IND BB05 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N118.t34. IND }
N120 (  7,  6) [000391] -c----------              *  LEA(b+8)  byref  REG NA
Contained
DefList: { N118.t34. IND }
N122 (  9,  8) [000035] ---XG-------              *  IND       ref    REG NA
<RefPosition #153 @122 RefTypeUse <Ivl:25>  BB05 regmask=[allIntButFP] minReg=1 last wt=100.00>
Interval 26: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #154 @123 RefTypeDef <Ivl:26> IND BB05 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N122.t35. IND }
N124 ( 13, 11) [000043] DA-XG-------              *  STORE_LCL_VAR ref    V24 tmp6          NA REG NA
<RefPosition #155 @124 RefTypeUse <Ivl:26>  BB05 regmask=[allIntButFP] minReg=1 last wt=100.00>

DefList: {  }
N126 (  3,  2) [000040] ------------              *  LCL_VAR   ref    V23 tmp5          NA REG NA
Interval 27: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #156 @127 RefTypeDef <Ivl:27> LCL_VAR BB05 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N126.t40. LCL_VAR }
N128 (???,???) [000634] ------------              *  PUTARG_REG ref    REG rcx
<RefPosition #157 @128 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #158 @128 RefTypeUse <Ivl:27>  BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
Interval 28: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #159 @129 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #160 @129 RefTypeDef <Ivl:28> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>

DefList: { N128.t634. PUTARG_REG }
N130 ( 17,  9) [000041] --CXG-------              *  CALL      void   System.Object..ctor REG NA
<RefPosition #161 @130 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #162 @130 RefTypeUse <Ivl:28>  BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #163 @131 RefTypeKill <Reg:rax>  BB05 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #164 @131 RefTypeKill <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #165 @131 RefTypeKill <Reg:rdx>  BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #166 @131 RefTypeKill <Reg:r8 >  BB05 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #167 @131 RefTypeKill <Reg:r9 >  BB05 regmask=[r9] minReg=1 wt=100.00>
<RefPosition #168 @131 RefTypeKill <Reg:r10>  BB05 regmask=[r10] minReg=1 wt=100.00>
<RefPosition #169 @131 RefTypeKill <Reg:r11>  BB05 regmask=[r11] minReg=1 wt=100.00>

DefList: {  }
N132 (???,???) [000506] ------------              *  IL_OFFSET void   IL offset: 0x39 REG NA

DefList: {  }
N134 (  3,  2) [000044] ------------              *  LCL_VAR   ref    V24 tmp6          NA REG NA
Interval 29: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #170 @135 RefTypeDef <Ivl:29> LCL_VAR BB05 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N134.t44. LCL_VAR }
N136 (  4,  3) [000396] ------------              *  LEA(b+16) byref  REG NA
<RefPosition #171 @136 RefTypeUse <Ivl:29>  BB05 regmask=[allIntButFP] minReg=1 last wt=100.00>
Interval 30: byref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #172 @137 RefTypeDef <Ivl:30> LEA BB05 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N136.t396. LEA }
N138 (  3,  2) [000045] ------------              *  LCL_VAR   ref    V23 tmp5          NA REG NA
Interval 31: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #173 @139 RefTypeDef <Ivl:31> LCL_VAR BB05 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N136.t396. LEA; N138.t45. LCL_VAR }
N140 (???,???) [000507] -A-XG-------              *  STOREIND  ref    REG NA
<RefPosition #174 @140 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #175 @140 RefTypeUse <Ivl:30>  BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #176 @140 RefTypeFixedReg <Reg:rdx>  BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #177 @140 RefTypeUse <Ivl:31>  BB05 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #178 @141 RefTypeKill <Reg:rax>  BB05 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #179 @141 RefTypeKill <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #180 @141 RefTypeKill <Reg:rdx>  BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #181 @141 RefTypeKill <Reg:r8 >  BB05 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #182 @141 RefTypeKill <Reg:r9 >  BB05 regmask=[r9] minReg=1 wt=100.00>
<RefPosition #183 @141 RefTypeKill <Reg:r10>  BB05 regmask=[r10] minReg=1 wt=100.00>
<RefPosition #184 @141 RefTypeKill <Reg:r11>  BB05 regmask=[r11] minReg=1 wt=100.00>
<RefPosition #185 @141 RefTypeKill <Reg:mm0>  BB05 regmask=[mm0] minReg=1 wt=100.00>
<RefPosition #186 @141 RefTypeKill <Reg:mm1>  BB05 regmask=[mm1] minReg=1 wt=100.00>
<RefPosition #187 @141 RefTypeKill <Reg:mm2>  BB05 regmask=[mm2] minReg=1 wt=100.00>
<RefPosition #188 @141 RefTypeKill <Reg:mm3>  BB05 regmask=[mm3] minReg=1 wt=100.00>
<RefPosition #189 @141 RefTypeKill <Reg:mm4>  BB05 regmask=[mm4] minReg=1 wt=100.00>
<RefPosition #190 @141 RefTypeKill <Reg:mm5>  BB05 regmask=[mm5] minReg=1 wt=100.00>

DefList: {  }
N142 (???,???) [000508] ------------              *  IL_OFFSET void   IL offset: 0x3e REG NA

DefList: {  }
N144 (  2, 10) [000050] H-----------              *  CNS_INT(h) long   0x7ffdb7026348 token REG NA
Interval 32: long RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #191 @145 RefTypeDef <Ivl:32> CNS_INT BB05 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N144.t50. CNS_INT }
N146 (???,???) [000635] ------------              *  PUTARG_REG long   REG rcx
<RefPosition #192 @146 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #193 @146 RefTypeUse <Ivl:32>  BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
Interval 33: long RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #194 @147 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #195 @147 RefTypeDef <Ivl:33> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>

DefList: { N146.t635. PUTARG_REG }
N148 ( 16, 16) [000051] --C---------              *  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST REG NA
<RefPosition #196 @148 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #197 @148 RefTypeUse <Ivl:33>  BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #198 @149 RefTypeKill <Reg:rax>  BB05 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #199 @149 RefTypeKill <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #200 @149 RefTypeKill <Reg:rdx>  BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #201 @149 RefTypeKill <Reg:r8 >  BB05 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #202 @149 RefTypeKill <Reg:r9 >  BB05 regmask=[r9] minReg=1 wt=100.00>
<RefPosition #203 @149 RefTypeKill <Reg:r10>  BB05 regmask=[r10] minReg=1 wt=100.00>
<RefPosition #204 @149 RefTypeKill <Reg:r11>  BB05 regmask=[r11] minReg=1 wt=100.00>
Interval 34: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #205 @149 RefTypeFixedReg <Reg:rax>  BB05 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #206 @149 RefTypeDef <Ivl:34> CALL BB05 regmask=[rax] minReg=1 fixed wt=400.00>

DefList: { N148.t51. CALL }
N150 ( 20, 19) [000053] DA----------              *  STORE_LCL_VAR ref    V25 tmp7          NA REG NA
<RefPosition #207 @150 RefTypeUse <Ivl:34>  BB05 regmask=[allIntButFP] minReg=1 last wt=100.00>

DefList: {  }
N152 (  3,  2) [000054] ------------              *  LCL_VAR   ref    V25 tmp7          NA REG NA
Interval 35: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #208 @153 RefTypeDef <Ivl:35> LCL_VAR BB05 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N152.t54. LCL_VAR }
N154 (???,???) [000636] ------------              *  PUTARG_REG ref    REG rcx
<RefPosition #209 @154 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #210 @154 RefTypeUse <Ivl:35>  BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
Interval 36: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #211 @155 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #212 @155 RefTypeDef <Ivl:36> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>

DefList: { N154.t636. PUTARG_REG }
N156 (  3,  2) [000048] ------------              *  LCL_VAR   ref    V00 this          NA REG NA
Interval 37: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #213 @157 RefTypeDef <Ivl:37> LCL_VAR BB05 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N154.t636. PUTARG_REG; N156.t48. LCL_VAR }
N158 (???,???) [000637] ------------              *  PUTARG_REG ref    REG rdx
<RefPosition #214 @158 RefTypeFixedReg <Reg:rdx>  BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #215 @158 RefTypeUse <Ivl:37>  BB05 regmask=[rdx] minReg=1 last fixed wt=100.00>
Interval 38: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #216 @159 RefTypeFixedReg <Reg:rdx>  BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #217 @159 RefTypeDef <Ivl:38> PUTARG_REG BB05 regmask=[rdx] minReg=1 fixed wt=400.00>

DefList: { N154.t636. PUTARG_REG; N158.t637. PUTARG_REG }
N160 (  2, 10) [000049] H-----------              *  CNS_INT(h) long   0x7ffdb6c613f8 ftn REG NA
Interval 39: long RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #218 @161 RefTypeDef <Ivl:39> CNS_INT BB05 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N154.t636. PUTARG_REG; N158.t637. PUTARG_REG; N160.t49. CNS_INT }
N162 (???,???) [000638] ------------              *  PUTARG_REG long   REG r8
<RefPosition #219 @162 RefTypeFixedReg <Reg:r8 >  BB05 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #220 @162 RefTypeUse <Ivl:39>  BB05 regmask=[r8] minReg=1 last fixed wt=100.00>
Interval 40: long RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #221 @163 RefTypeFixedReg <Reg:r8 >  BB05 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #222 @163 RefTypeDef <Ivl:40> PUTARG_REG BB05 regmask=[r8] minReg=1 fixed wt=400.00>

DefList: { N154.t636. PUTARG_REG; N158.t637. PUTARG_REG; N162.t638. PUTARG_REG }
N164 ( 22, 23) [000055] --CXG-------              *  CALL      void   System.MulticastDelegate.CtorClosed REG NA
<RefPosition #223 @164 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #224 @164 RefTypeUse <Ivl:36>  BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #225 @164 RefTypeFixedReg <Reg:rdx>  BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #226 @164 RefTypeUse <Ivl:38>  BB05 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #227 @164 RefTypeFixedReg <Reg:r8 >  BB05 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #228 @164 RefTypeUse <Ivl:40>  BB05 regmask=[r8] minReg=1 last fixed wt=100.00>
<RefPosition #229 @165 RefTypeKill <Reg:rax>  BB05 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #230 @165 RefTypeKill <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #231 @165 RefTypeKill <Reg:rdx>  BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #232 @165 RefTypeKill <Reg:r8 >  BB05 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #233 @165 RefTypeKill <Reg:r9 >  BB05 regmask=[r9] minReg=1 wt=100.00>
<RefPosition #234 @165 RefTypeKill <Reg:r10>  BB05 regmask=[r10] minReg=1 wt=100.00>
<RefPosition #235 @165 RefTypeKill <Reg:r11>  BB05 regmask=[r11] minReg=1 wt=100.00>

DefList: {  }
N166 (???,???) [000509] ------------              *  IL_OFFSET void   IL offset: 0x4a REG NA

DefList: {  }
N168 (  2, 10) [000057] H-----------              *  CNS_INT(h) long   0x7ffdb6dc4e80 token REG NA
Interval 41: long RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #236 @169 RefTypeDef <Ivl:41> CNS_INT BB05 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N168.t57. CNS_INT }
N170 (???,???) [000639] ------------              *  PUTARG_REG long   REG rcx
<RefPosition #237 @170 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #238 @170 RefTypeUse <Ivl:41>  BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
Interval 42: long RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #239 @171 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #240 @171 RefTypeDef <Ivl:42> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>

DefList: { N170.t639. PUTARG_REG }
N172 ( 16, 16) [000058] --C---------              *  CALL help ref    HELPER.CORINFO_HELP_NEWFAST REG NA
<RefPosition #241 @172 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #242 @172 RefTypeUse <Ivl:42>  BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #243 @173 RefTypeKill <Reg:rax>  BB05 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #244 @173 RefTypeKill <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #245 @173 RefTypeKill <Reg:rdx>  BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #246 @173 RefTypeKill <Reg:r8 >  BB05 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #247 @173 RefTypeKill <Reg:r9 >  BB05 regmask=[r9] minReg=1 wt=100.00>
<RefPosition #248 @173 RefTypeKill <Reg:r10>  BB05 regmask=[r10] minReg=1 wt=100.00>
<RefPosition #249 @173 RefTypeKill <Reg:r11>  BB05 regmask=[r11] minReg=1 wt=100.00>
Interval 43: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #250 @173 RefTypeFixedReg <Reg:rax>  BB05 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #251 @173 RefTypeDef <Ivl:43> CALL BB05 regmask=[rax] minReg=1 fixed wt=400.00>

DefList: { N172.t58. CALL }
N174 ( 20, 19) [000060] DA----------              *  STORE_LCL_VAR ref    V26 tmp8          NA REG NA
<RefPosition #252 @174 RefTypeUse <Ivl:43>  BB05 regmask=[allIntButFP] minReg=1 last wt=100.00>

DefList: {  }
N176 (  3,  2) [000061] ------------              *  LCL_VAR   ref    V26 tmp8          NA REG NA
Interval 44: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #253 @177 RefTypeDef <Ivl:44> LCL_VAR BB05 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N176.t61. LCL_VAR }
N178 (???,???) [000640] ------------              *  PUTARG_REG ref    REG rcx
<RefPosition #254 @178 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #255 @178 RefTypeUse <Ivl:44>  BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
Interval 45: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #256 @179 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #257 @179 RefTypeDef <Ivl:45> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>

DefList: { N178.t640. PUTARG_REG }
N180 (  3,  2) [000056] ------------              *  LCL_VAR   ref    V25 tmp7          NA REG NA
Interval 46: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #258 @181 RefTypeDef <Ivl:46> LCL_VAR BB05 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N178.t640. PUTARG_REG; N180.t56. LCL_VAR }
N182 (???,???) [000641] ------------              *  PUTARG_REG ref    REG rdx
<RefPosition #259 @182 RefTypeFixedReg <Reg:rdx>  BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #260 @182 RefTypeUse <Ivl:46>  BB05 regmask=[rdx] minReg=1 last fixed wt=100.00>
Interval 47: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #261 @183 RefTypeFixedReg <Reg:rdx>  BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #262 @183 RefTypeDef <Ivl:47> PUTARG_REG BB05 regmask=[rdx] minReg=1 fixed wt=400.00>

DefList: { N178.t640. PUTARG_REG; N182.t641. PUTARG_REG }
N184 ( 20, 12) [000062] --CXG-------              *  CALL      void   System.Threading.Thread..ctor REG NA
<RefPosition #263 @184 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #264 @184 RefTypeUse <Ivl:45>  BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #265 @184 RefTypeFixedReg <Reg:rdx>  BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #266 @184 RefTypeUse <Ivl:47>  BB05 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #267 @185 RefTypeKill <Reg:rax>  BB05 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #268 @185 RefTypeKill <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #269 @185 RefTypeKill <Reg:rdx>  BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #270 @185 RefTypeKill <Reg:r8 >  BB05 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #271 @185 RefTypeKill <Reg:r9 >  BB05 regmask=[r9] minReg=1 wt=100.00>
<RefPosition #272 @185 RefTypeKill <Reg:r10>  BB05 regmask=[r10] minReg=1 wt=100.00>
<RefPosition #273 @185 RefTypeKill <Reg:r11>  BB05 regmask=[r11] minReg=1 wt=100.00>

DefList: {  }
N186 (???,???) [000510] ------------              *  IL_OFFSET void   IL offset: 0x4f REG NA

DefList: {  }
N188 (  3,  2) [000063] ------------              *  LCL_VAR   ref    V26 tmp8          NA REG NA
Interval 48: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #274 @189 RefTypeDef <Ivl:48> LCL_VAR BB05 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N188.t63. LCL_VAR }
N190 (  7,  5) [000065] DA----------              *  STORE_LCL_VAR ref    V02 loc0          NA REG NA
<RefPosition #275 @190 RefTypeUse <Ivl:48>  BB05 regmask=[allIntButFP] minReg=1 last wt=100.00>

DefList: {  }
N192 (???,???) [000511] ------------              *  IL_OFFSET void   IL offset: 0x50 REG NA

DefList: {  }
N194 (  3,  2) [000066] ------------              *  LCL_VAR   ref    V02 loc0          NA REG NA
Interval 49: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #276 @195 RefTypeDef <Ivl:49> LCL_VAR BB05 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N194.t66. LCL_VAR }
N196 (???,???) [000642] ------------              *  PUTARG_REG ref    REG rcx
<RefPosition #277 @196 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #278 @196 RefTypeUse <Ivl:49>  BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
Interval 50: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #279 @197 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #280 @197 RefTypeDef <Ivl:50> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>

DefList: { N196.t642. PUTARG_REG }
N198 ( 17,  9) [000067] --CXG-------              *  CALL nullcheck void   System.Threading.Thread.Start REG NA
<RefPosition #281 @198 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #282 @198 RefTypeUse <Ivl:50>  BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #283 @199 RefTypeKill <Reg:rax>  BB05 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #284 @199 RefTypeKill <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #285 @199 RefTypeKill <Reg:rdx>  BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #286 @199 RefTypeKill <Reg:r8 >  BB05 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #287 @199 RefTypeKill <Reg:r9 >  BB05 regmask=[r9] minReg=1 wt=100.00>
<RefPosition #288 @199 RefTypeKill <Reg:r10>  BB05 regmask=[r10] minReg=1 wt=100.00>
<RefPosition #289 @199 RefTypeKill <Reg:r11>  BB05 regmask=[r11] minReg=1 wt=100.00>

DefList: {  }
N200 (???,???) [000512] ------------              *  IL_OFFSET void   IL offset: 0x56 REG NA

DefList: {  }
N202 (  1,  1) [000068] ------------              *  NO_OP     void   REG NA

DefList: {  }
N204 (???,???) [000513] ------------              *  IL_OFFSET void   IL offset: 0x57 REG NA

DefList: {  }
N206 ( 14,  5) [000069] --CXG-------              *  CALL      long   System.DateTime.get_Now REG NA
<RefPosition #290 @207 RefTypeKill <Reg:rax>  BB05 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #291 @207 RefTypeKill <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #292 @207 RefTypeKill <Reg:rdx>  BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #293 @207 RefTypeKill <Reg:r8 >  BB05 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #294 @207 RefTypeKill <Reg:r9 >  BB05 regmask=[r9] minReg=1 wt=100.00>
<RefPosition #295 @207 RefTypeKill <Reg:r10>  BB05 regmask=[r10] minReg=1 wt=100.00>
<RefPosition #296 @207 RefTypeKill <Reg:r11>  BB05 regmask=[r11] minReg=1 wt=100.00>
Interval 51: long RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #297 @207 RefTypeFixedReg <Reg:rax>  BB05 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #298 @207 RefTypeDef <Ivl:51> CALL BB05 regmask=[rax] minReg=1 fixed wt=400.00>

DefList: { N206.t69. CALL }
N208 ( 18,  8) [000072] DA-XG-------              *  STORE_LCL_VAR struct<System.DateTime, 8> V27 tmp9          NA REG NA
<RefPosition #299 @208 RefTypeUse <Ivl:51>  BB05 regmask=[allIntButFP] minReg=1 last wt=100.00>

DefList: {  }
N210 (???,???) [000514] ------------              *  IL_OFFSET void   IL offset: 0x5c REG NA

DefList: {  }
N212 (  3,  2) [000073] ------------              *  LCL_VAR   struct<System.DateTime, 8> V27 tmp9          NA REG NA
Interval 52: long RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #300 @213 RefTypeDef <Ivl:52> LCL_VAR BB05 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N212.t73. LCL_VAR }
N214 (  7,  5) [000076] DA--G-------              *  STORE_LCL_VAR struct<System.DateTime, 8>(AX) V03 loc1          NA REG NA
<RefPosition #301 @214 RefTypeUse <Ivl:52>  BB05 regmask=[allIntButFP] minReg=1 last wt=100.00>

DefList: {  }
N216 (???,???) [000515] ------------              *  IL_OFFSET void   IL offset: 0x5d REG NA

DefList: {  }
N218 (  3,  3) [000078] ------------              *  LCL_VAR_ADDR byref  V03 loc1          NA REG NA
Interval 53: byref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #302 @219 RefTypeDef <Ivl:53> LCL_VAR_ADDR BB05 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N218.t78. LCL_VAR_ADDR }
N220 (???,???) [000643] ------------              *  PUTARG_REG byref  REG rcx
<RefPosition #303 @220 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #304 @220 RefTypeUse <Ivl:53>  BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
Interval 54: byref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #305 @221 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #306 @221 RefTypeDef <Ivl:54> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>

DefList: { N220.t643. PUTARG_REG }
N222 ( 17, 10) [000079] --CXG-------              *  CALL      ref    System.DateTime.ToString REG NA
<RefPosition #307 @222 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #308 @222 RefTypeUse <Ivl:54>  BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #309 @223 RefTypeKill <Reg:rax>  BB05 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #310 @223 RefTypeKill <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #311 @223 RefTypeKill <Reg:rdx>  BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #312 @223 RefTypeKill <Reg:r8 >  BB05 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #313 @223 RefTypeKill <Reg:r9 >  BB05 regmask=[r9] minReg=1 wt=100.00>
<RefPosition #314 @223 RefTypeKill <Reg:r10>  BB05 regmask=[r10] minReg=1 wt=100.00>
<RefPosition #315 @223 RefTypeKill <Reg:r11>  BB05 regmask=[r11] minReg=1 wt=100.00>
Interval 55: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #316 @223 RefTypeFixedReg <Reg:rax>  BB05 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #317 @223 RefTypeDef <Ivl:55> CALL BB05 regmask=[rax] minReg=1 fixed wt=400.00>

DefList: { N222.t79. CALL }
N224 ( 21, 13) [000081] DA-XG-------              *  STORE_LCL_VAR ref    V28 tmp10         NA REG NA
<RefPosition #318 @224 RefTypeUse <Ivl:55>  BB05 regmask=[allIntButFP] minReg=1 last wt=100.00>

DefList: {  }
N226 (???,???) [000516] ------------              *  IL_OFFSET void   IL offset: 0x64 REG NA

DefList: {  }
N228 (  2, 10) [000406] H-----------              *  CNS_INT(h) long   0xBE2A31F8 "	 Consumer thread started, adding items..." REG NA
Interval 56: long RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #319 @229 RefTypeDef <Ivl:56> CNS_INT BB05 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N228.t406. CNS_INT }
N230 (  4, 12) [000407] #---G-------              *  IND       ref    REG NA
<RefPosition #320 @230 RefTypeUse <Ivl:56>  BB05 regmask=[allIntButFP] minReg=1 last wt=100.00>
Interval 57: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #321 @231 RefTypeDef <Ivl:57> IND BB05 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N230.t407. IND }
N232 (???,???) [000644] ----G-------              *  PUTARG_REG ref    REG rdx
<RefPosition #322 @232 RefTypeFixedReg <Reg:rdx>  BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #323 @232 RefTypeUse <Ivl:57>  BB05 regmask=[rdx] minReg=1 last fixed wt=100.00>
Interval 58: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #324 @233 RefTypeFixedReg <Reg:rdx>  BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #325 @233 RefTypeDef <Ivl:58> PUTARG_REG BB05 regmask=[rdx] minReg=1 fixed wt=400.00>

DefList: { N232.t644. PUTARG_REG }
N234 (  3,  2) [000082] ------------              *  LCL_VAR   ref    V28 tmp10         NA REG NA
Interval 59: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #326 @235 RefTypeDef <Ivl:59> LCL_VAR BB05 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N232.t644. PUTARG_REG; N234.t82. LCL_VAR }
N236 (???,???) [000645] ------------              *  PUTARG_REG ref    REG rcx
<RefPosition #327 @236 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #328 @236 RefTypeUse <Ivl:59>  BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
Interval 60: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #329 @237 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #330 @237 RefTypeDef <Ivl:60> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>

DefList: { N232.t644. PUTARG_REG; N236.t645. PUTARG_REG }
N238 ( 21, 21) [000084] --CXG-------              *  CALL      ref    System.String.Concat REG NA
<RefPosition #331 @238 RefTypeFixedReg <Reg:rdx>  BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #332 @238 RefTypeUse <Ivl:58>  BB05 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #333 @238 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #334 @238 RefTypeUse <Ivl:60>  BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #335 @239 RefTypeKill <Reg:rax>  BB05 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #336 @239 RefTypeKill <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #337 @239 RefTypeKill <Reg:rdx>  BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #338 @239 RefTypeKill <Reg:r8 >  BB05 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #339 @239 RefTypeKill <Reg:r9 >  BB05 regmask=[r9] minReg=1 wt=100.00>
<RefPosition #340 @239 RefTypeKill <Reg:r10>  BB05 regmask=[r10] minReg=1 wt=100.00>
<RefPosition #341 @239 RefTypeKill <Reg:r11>  BB05 regmask=[r11] minReg=1 wt=100.00>
Interval 61: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #342 @239 RefTypeFixedReg <Reg:rax>  BB05 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #343 @239 RefTypeDef <Ivl:61> CALL BB05 regmask=[rax] minReg=1 fixed wt=400.00>

DefList: { N238.t84. CALL }
N240 ( 25, 24) [000086] DA-XG-------              *  STORE_LCL_VAR ref    V29 tmp11         NA REG NA
<RefPosition #344 @240 RefTypeUse <Ivl:61>  BB05 regmask=[allIntButFP] minReg=1 last wt=100.00>

DefList: {  }
N242 (???,???) [000517] ------------              *  IL_OFFSET void   IL offset: 0x6e REG NA

DefList: {  }
N244 (  3,  2) [000087] ------------              *  LCL_VAR   ref    V29 tmp11         NA REG NA
Interval 62: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #345 @245 RefTypeDef <Ivl:62> LCL_VAR BB05 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N244.t87. LCL_VAR }
N246 (???,???) [000646] ------------              *  PUTARG_REG ref    REG rcx
<RefPosition #346 @246 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #347 @246 RefTypeUse <Ivl:62>  BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
Interval 63: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #348 @247 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #349 @247 RefTypeDef <Ivl:63> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>

DefList: { N246.t646. PUTARG_REG }
N248 ( 17,  8) [000088] --CXG-------              *  CALL      void   System.Console.WriteLine REG NA
<RefPosition #350 @248 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #351 @248 RefTypeUse <Ivl:63>  BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #352 @249 RefTypeKill <Reg:rax>  BB05 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #353 @249 RefTypeKill <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #354 @249 RefTypeKill <Reg:rdx>  BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #355 @249 RefTypeKill <Reg:r8 >  BB05 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #356 @249 RefTypeKill <Reg:r9 >  BB05 regmask=[r9] minReg=1 wt=100.00>
<RefPosition #357 @249 RefTypeKill <Reg:r10>  BB05 regmask=[r10] minReg=1 wt=100.00>
<RefPosition #358 @249 RefTypeKill <Reg:r11>  BB05 regmask=[r11] minReg=1 wt=100.00>

DefList: {  }
N250 (???,???) [000518] ------------              *  IL_OFFSET void   IL offset: 0x73 REG NA

DefList: {  }
N252 (  1,  1) [000089] ------------              *  NO_OP     void   REG NA

DefList: {  }
N254 (???,???) [000519] ------------              *  IL_OFFSET void   IL offset: 0x74 REG NA

DefList: {  }
N256 (  1,  1) [000090] ------------              *  CNS_INT   int    0 REG NA
Interval 64: int RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #359 @257 RefTypeDef <Ivl:64> CNS_INT BB05 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N256.t90. CNS_INT }
N258 (  5,  4) [000092] DA----------              *  STORE_LCL_VAR int    V04 loc2          NA REG NA
<RefPosition #360 @258 RefTypeUse <Ivl:64>  BB05 regmask=[allIntButFP] minReg=1 last wt=100.00>

DefList: {  }
N260 (???,???) [000520] ------------              *  IL_OFFSET void   IL offset: 0x76 REG NA

DefList: {  }
N262 (  0,  0) [000093] ------------              *  NOP       void   REG NA


NEW BLOCK BB14


Setting BB05 as the predecessor for determining incoming variable registers of BB14
<RefPosition #361 @264 RefTypeBB  BB14 regmask=[] minReg=1 wt=100.00>

DefList: {  }
N266 (???,???) [000539] ------------              *  IL_OFFSET void   IL offset: 0xe6 REG NA

DefList: {  }
N268 (  3,  2) [000094] -c----------              *  LCL_VAR   int    V04 loc2          NA REG NA
Contained
DefList: {  }
N270 (  1,  1) [000095] -c----------              *  CNS_INT   int    10 REG NA
Contained
DefList: {  }
N272 (  8,  4) [000096] ------------              *  LT        int    REG NA
Interval 65: int RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #362 @273 RefTypeDef <Ivl:65> LT BB14 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N272.t96. LT }
N274 ( 12,  7) [000098] DA----------              *  STORE_LCL_VAR int    V07 loc5          NA REG NA
<RefPosition #363 @274 RefTypeUse <Ivl:65>  BB14 regmask=[allIntButFP] minReg=1 last wt=100.00>

DefList: {  }
N276 (???,???) [000540] ------------              *  IL_OFFSET void   IL offset: 0xed REG NA

DefList: {  }
N278 (  3,  2) [000099] -c----------              *  LCL_VAR   int    V07 loc5          NA REG NA
Contained
DefList: {  }
N280 (  1,  1) [000100] -c----------              *  CNS_INT   int    0 REG NA
Contained
DefList: {  }
N282 (  5,  4) [000101] J------N----              *  NE        void   REG NA

DefList: {  }
N284 (  7,  6) [000102] ------------              *  JTRUE     void   REG NA


NEW BLOCK BB06


Setting BB14 as the predecessor for determining incoming variable registers of BB06
<RefPosition #364 @286 RefTypeBB  BB06 regmask=[] minReg=1 wt=100.00>

DefList: {  }
N288 (???,???) [000521] ------------              *  IL_OFFSET void   IL offset: 0x78 REG NA

DefList: {  }
N290 (  1,  1) [000103] ------------              *  NO_OP     void   REG NA

DefList: {  }
N292 (???,???) [000522] ------------              *  IL_OFFSET void   IL offset: 0x79 REG NA

DefList: {  }
N294 (  3,  2) [000104] ------------              *  LCL_VAR   ref    V00 this          NA REG NA
Interval 66: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #365 @295 RefTypeDef <Ivl:66> LCL_VAR BB06 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N294.t104. LCL_VAR }
N296 (  4,  3) [000412] -c----------              *  LEA(b+8)  byref  REG NA
Contained
DefList: { N294.t104. LCL_VAR }
N298 (  6,  5) [000105] ---XG-------              *  IND       ref    REG NA
<RefPosition #366 @298 RefTypeUse <Ivl:66>  BB06 regmask=[allIntButFP] minReg=1 last wt=100.00>
Interval 67: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #367 @299 RefTypeDef <Ivl:67> IND BB06 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N298.t105. IND }
N300 ( 10,  8) [000107] DA-XG-------              *  STORE_LCL_VAR ref    V05 loc3          NA REG NA
<RefPosition #368 @300 RefTypeUse <Ivl:67>  BB06 regmask=[allIntButFP] minReg=1 last wt=100.00>

DefList: {  }
N302 (???,???) [000523] ------------              *  IL_OFFSET void   IL offset: 0x80 REG NA

DefList: {  }
N304 (  1,  1) [000108] ------------              *  CNS_INT   int    0 REG NA
Interval 68: int RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #369 @305 RefTypeDef <Ivl:68> CNS_INT BB06 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N304.t108. CNS_INT }
N306 (  5,  4) [000110] DA--G-------              *  STORE_LCL_VAR int   (AX) V06 loc4          NA REG NA
<RefPosition #370 @306 RefTypeUse <Ivl:68>  BB06 regmask=[allIntButFP] minReg=1 last wt=100.00>


NEW BLOCK BB07


Setting BB06 as the predecessor for determining incoming variable registers of BB07
<RefPosition #371 @308 RefTypeBB  BB07 regmask=[] minReg=1 wt=100.00>

DefList: {  }
N310 (???,???) [000524] ------------              *  IL_OFFSET void   IL offset: 0x83 REG NA

DefList: {  }
N312 (  3,  3) [000113] ------------              *  LCL_VAR_ADDR long   V06 loc4          NA REG NA
Interval 69: long RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #372 @313 RefTypeDef <Ivl:69> LCL_VAR_ADDR BB07 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N312.t113. LCL_VAR_ADDR }
N314 (???,???) [000647] ------------              *  PUTARG_REG long   REG rdx
<RefPosition #373 @314 RefTypeFixedReg <Reg:rdx>  BB07 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #374 @314 RefTypeUse <Ivl:69>  BB07 regmask=[rdx] minReg=1 last fixed wt=100.00>
Interval 70: long RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #375 @315 RefTypeFixedReg <Reg:rdx>  BB07 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #376 @315 RefTypeDef <Ivl:70> PUTARG_REG BB07 regmask=[rdx] minReg=1 fixed wt=400.00>

DefList: { N314.t647. PUTARG_REG }
N316 (  3,  2) [000111] ------------              *  LCL_VAR   ref    V05 loc3          NA REG NA
Interval 71: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #377 @317 RefTypeDef <Ivl:71> LCL_VAR BB07 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N314.t647. PUTARG_REG; N316.t111. LCL_VAR }
N318 (???,???) [000648] ------------              *  PUTARG_REG ref    REG rcx
<RefPosition #378 @318 RefTypeFixedReg <Reg:rcx>  BB07 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #379 @318 RefTypeUse <Ivl:71>  BB07 regmask=[rcx] minReg=1 last fixed wt=100.00>
Interval 72: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #380 @319 RefTypeFixedReg <Reg:rcx>  BB07 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #381 @319 RefTypeDef <Ivl:72> PUTARG_REG BB07 regmask=[rcx] minReg=1 fixed wt=400.00>

DefList: { N314.t647. PUTARG_REG; N318.t648. PUTARG_REG }
N320 ( 20, 12) [000114] --CXG-------              *  CALL      void   System.Threading.Monitor.Enter REG NA
<RefPosition #382 @320 RefTypeFixedReg <Reg:rdx>  BB07 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #383 @320 RefTypeUse <Ivl:70>  BB07 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #384 @320 RefTypeFixedReg <Reg:rcx>  BB07 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #385 @320 RefTypeUse <Ivl:72>  BB07 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #386 @321 RefTypeKill <Reg:rax>  BB07 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #387 @321 RefTypeKill <Reg:rcx>  BB07 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #388 @321 RefTypeKill <Reg:rdx>  BB07 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #389 @321 RefTypeKill <Reg:r8 >  BB07 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #390 @321 RefTypeKill <Reg:r9 >  BB07 regmask=[r9] minReg=1 wt=100.00>
<RefPosition #391 @321 RefTypeKill <Reg:r10>  BB07 regmask=[r10] minReg=1 wt=100.00>
<RefPosition #392 @321 RefTypeKill <Reg:r11>  BB07 regmask=[r11] minReg=1 wt=100.00>

DefList: {  }
N322 (???,???) [000525] ------------              *  IL_OFFSET void   IL offset: 0x8b REG NA

DefList: {  }
N324 (  1,  1) [000115] ------------              *  NO_OP     void   REG NA

DefList: {  }
N326 (???,???) [000526] ------------              *  IL_OFFSET void   IL offset: 0x8c REG NA

DefList: {  }
N328 (  1,  1) [000116] ------------              *  NO_OP     void   REG NA

DefList: {  }
N330 (???,???) [000527] ------------              *  IL_OFFSET void   IL offset: 0x8d REG NA

DefList: {  }
N332 (  2, 10) [000120] H-----------              *  CNS_INT(h) long   0x7ffdb70260c8 method REG NA
Interval 73: long RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #393 @333 RefTypeDef <Ivl:73> CNS_INT BB07 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N332.t120. CNS_INT }
N334 (???,???) [000649] ------------              *  PUTARG_REG long   REG rcx
<RefPosition #394 @334 RefTypeFixedReg <Reg:rcx>  BB07 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #395 @334 RefTypeUse <Ivl:73>  BB07 regmask=[rcx] minReg=1 last fixed wt=100.00>
Interval 74: long RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #396 @335 RefTypeFixedReg <Reg:rcx>  BB07 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #397 @335 RefTypeDef <Ivl:74> PUTARG_REG BB07 regmask=[rcx] minReg=1 fixed wt=400.00>

DefList: { N334.t649. PUTARG_REG }
N336 ( 16, 16) [000121] --C---------              *  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST REG NA
<RefPosition #398 @336 RefTypeFixedReg <Reg:rcx>  BB07 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #399 @336 RefTypeUse <Ivl:74>  BB07 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #400 @337 RefTypeKill <Reg:rax>  BB07 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #401 @337 RefTypeKill <Reg:rcx>  BB07 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #402 @337 RefTypeKill <Reg:rdx>  BB07 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #403 @337 RefTypeKill <Reg:r8 >  BB07 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #404 @337 RefTypeKill <Reg:r9 >  BB07 regmask=[r9] minReg=1 wt=100.00>
<RefPosition #405 @337 RefTypeKill <Reg:r10>  BB07 regmask=[r10] minReg=1 wt=100.00>
<RefPosition #406 @337 RefTypeKill <Reg:r11>  BB07 regmask=[r11] minReg=1 wt=100.00>
Interval 75: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #407 @337 RefTypeFixedReg <Reg:rax>  BB07 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #408 @337 RefTypeDef <Ivl:75> CALL BB07 regmask=[rax] minReg=1 fixed wt=400.00>

DefList: { N336.t121. CALL }
N338 ( 20, 19) [000123] DA----------              *  STORE_LCL_VAR ref    V30 tmp12         NA REG NA
<RefPosition #409 @338 RefTypeUse <Ivl:75>  BB07 regmask=[allIntButFP] minReg=1 last wt=100.00>

DefList: {  }
N340 (  3,  2) [000117] ------------              *  LCL_VAR   ref    V00 this          NA REG NA
Interval 76: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #410 @341 RefTypeDef <Ivl:76> LCL_VAR BB07 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N340.t117. LCL_VAR }
N342 (  4,  3) [000419] -c----------              *  LEA(b+8)  byref  REG NA
Contained
DefList: { N340.t117. LCL_VAR }
N344 (  6,  5) [000118] ---XG-------              *  IND       ref    REG NA
<RefPosition #411 @344 RefTypeUse <Ivl:76>  BB07 regmask=[allIntButFP] minReg=1 last wt=100.00>
Interval 77: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #412 @345 RefTypeDef <Ivl:77> IND BB07 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N344.t118. IND }
N346 (  7,  6) [000417] -c----------              *  LEA(b+8)  byref  REG NA
Contained
DefList: { N344.t118. IND }
N348 (  9,  8) [000119] ---XG-------              *  IND       ref    REG NA
<RefPosition #413 @348 RefTypeUse <Ivl:77>  BB07 regmask=[allIntButFP] minReg=1 last wt=100.00>
Interval 78: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #414 @349 RefTypeDef <Ivl:78> IND BB07 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N348.t119. IND }
N350 ( 13, 11) [000127] DA-XG-------              *  STORE_LCL_VAR ref    V31 tmp13         NA REG NA
<RefPosition #415 @350 RefTypeUse <Ivl:78>  BB07 regmask=[allIntButFP] minReg=1 last wt=100.00>

DefList: {  }
N352 (  3,  2) [000124] ------------              *  LCL_VAR   ref    V30 tmp12         NA REG NA
Interval 79: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #416 @353 RefTypeDef <Ivl:79> LCL_VAR BB07 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N352.t124. LCL_VAR }
N354 (???,???) [000650] ------------              *  PUTARG_REG ref    REG rcx
<RefPosition #417 @354 RefTypeFixedReg <Reg:rcx>  BB07 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #418 @354 RefTypeUse <Ivl:79>  BB07 regmask=[rcx] minReg=1 last fixed wt=100.00>
Interval 80: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #419 @355 RefTypeFixedReg <Reg:rcx>  BB07 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #420 @355 RefTypeDef <Ivl:80> PUTARG_REG BB07 regmask=[rcx] minReg=1 fixed wt=400.00>

DefList: { N354.t650. PUTARG_REG }
N356 ( 17,  9) [000125] --CXG-------              *  CALL      void   FalseLeakRepro.Node..ctor REG NA
<RefPosition #421 @356 RefTypeFixedReg <Reg:rcx>  BB07 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #422 @356 RefTypeUse <Ivl:80>  BB07 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #423 @357 RefTypeKill <Reg:rax>  BB07 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #424 @357 RefTypeKill <Reg:rcx>  BB07 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #425 @357 RefTypeKill <Reg:rdx>  BB07 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #426 @357 RefTypeKill <Reg:r8 >  BB07 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #427 @357 RefTypeKill <Reg:r9 >  BB07 regmask=[r9] minReg=1 wt=100.00>
<RefPosition #428 @357 RefTypeKill <Reg:r10>  BB07 regmask=[r10] minReg=1 wt=100.00>
<RefPosition #429 @357 RefTypeKill <Reg:r11>  BB07 regmask=[r11] minReg=1 wt=100.00>

DefList: {  }
N358 (???,???) [000528] ------------              *  IL_OFFSET void   IL offset: 0x9d REG NA

DefList: {  }
N360 (  3,  2) [000128] ------------              *  LCL_VAR   ref    V31 tmp13         NA REG NA
Interval 81: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #430 @361 RefTypeDef <Ivl:81> LCL_VAR BB07 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N360.t128. LCL_VAR }
N362 (  4,  3) [000422] ------------              *  LEA(b+8)  byref  REG NA
<RefPosition #431 @362 RefTypeUse <Ivl:81>  BB07 regmask=[allIntButFP] minReg=1 last wt=100.00>
Interval 82: byref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #432 @363 RefTypeDef <Ivl:82> LEA BB07 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N362.t422. LEA }
N364 (  3,  2) [000129] ------------              *  LCL_VAR   ref    V30 tmp12         NA REG NA
Interval 83: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #433 @365 RefTypeDef <Ivl:83> LCL_VAR BB07 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N362.t422. LEA; N364.t129. LCL_VAR }
N366 (???,???) [000529] -A-XG-------              *  STOREIND  ref    REG NA
<RefPosition #434 @366 RefTypeFixedReg <Reg:rcx>  BB07 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #435 @366 RefTypeUse <Ivl:82>  BB07 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #436 @366 RefTypeFixedReg <Reg:rdx>  BB07 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #437 @366 RefTypeUse <Ivl:83>  BB07 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #438 @367 RefTypeKill <Reg:rax>  BB07 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #439 @367 RefTypeKill <Reg:rcx>  BB07 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #440 @367 RefTypeKill <Reg:rdx>  BB07 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #441 @367 RefTypeKill <Reg:r8 >  BB07 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #442 @367 RefTypeKill <Reg:r9 >  BB07 regmask=[r9] minReg=1 wt=100.00>
<RefPosition #443 @367 RefTypeKill <Reg:r10>  BB07 regmask=[r10] minReg=1 wt=100.00>
<RefPosition #444 @367 RefTypeKill <Reg:r11>  BB07 regmask=[r11] minReg=1 wt=100.00>
<RefPosition #445 @367 RefTypeKill <Reg:mm0>  BB07 regmask=[mm0] minReg=1 wt=100.00>
<RefPosition #446 @367 RefTypeKill <Reg:mm1>  BB07 regmask=[mm1] minReg=1 wt=100.00>
<RefPosition #447 @367 RefTypeKill <Reg:mm2>  BB07 regmask=[mm2] minReg=1 wt=100.00>
<RefPosition #448 @367 RefTypeKill <Reg:mm3>  BB07 regmask=[mm3] minReg=1 wt=100.00>
<RefPosition #449 @367 RefTypeKill <Reg:mm4>  BB07 regmask=[mm4] minReg=1 wt=100.00>
<RefPosition #450 @367 RefTypeKill <Reg:mm5>  BB07 regmask=[mm5] minReg=1 wt=100.00>

DefList: {  }
N368 (???,???) [000530] ------------              *  IL_OFFSET void   IL offset: 0xa2 REG NA

DefList: {  }
N370 (  3,  2) [000132] ------------              *  LCL_VAR   ref    V00 this          NA REG NA
Interval 84: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #451 @371 RefTypeDef <Ivl:84> LCL_VAR BB07 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N370.t132. LCL_VAR }
N372 (  4,  3) [000426] -c----------              *  LEA(b+8)  byref  REG NA
Contained
DefList: { N370.t132. LCL_VAR }
N374 (  6,  5) [000133] ---XG-------              *  IND       ref    REG NA
<RefPosition #452 @374 RefTypeUse <Ivl:84>  BB07 regmask=[allIntButFP] minReg=1 last wt=100.00>
Interval 85: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #453 @375 RefTypeDef <Ivl:85> IND BB07 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N374.t133. IND }
N376 (  7,  6) [000424] ------------              *  LEA(b+8)  byref  REG NA
<RefPosition #454 @376 RefTypeUse <Ivl:85>  BB07 regmask=[allIntButFP] minReg=1 last wt=100.00>
Interval 86: byref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #455 @377 RefTypeDef <Ivl:86> LEA BB07 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N376.t424. LEA }
N378 (  3,  2) [000134] ------------              *  LCL_VAR   ref    V00 this          NA REG NA
Interval 87: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #456 @379 RefTypeDef <Ivl:87> LCL_VAR BB07 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N376.t424. LEA; N378.t134. LCL_VAR }
N380 (  4,  3) [000432] -c----------              *  LEA(b+8)  byref  REG NA
Contained
DefList: { N376.t424. LEA; N378.t134. LCL_VAR }
N382 (  6,  5) [000135] ---XG-------              *  IND       ref    REG NA
<RefPosition #457 @382 RefTypeUse <Ivl:87>  BB07 regmask=[allIntButFP] minReg=1 last wt=100.00>
Interval 88: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #458 @383 RefTypeDef <Ivl:88> IND BB07 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N376.t424. LEA; N382.t135. IND }
N384 (  7,  6) [000430] -c----------              *  LEA(b+8)  byref  REG NA
Contained
DefList: { N376.t424. LEA; N382.t135. IND }
N386 (  9,  8) [000136] ---XG-------              *  IND       ref    REG NA
<RefPosition #459 @386 RefTypeUse <Ivl:88>  BB07 regmask=[allIntButFP] minReg=1 last wt=100.00>
Interval 89: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #460 @387 RefTypeDef <Ivl:89> IND BB07 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N376.t424. LEA; N386.t136. IND }
N388 ( 10,  9) [000428] -c----------              *  LEA(b+8)  byref  REG NA
Contained
DefList: { N376.t424. LEA; N386.t136. IND }
N390 ( 12, 11) [000137] ---XG-------              *  IND       ref    REG NA
<RefPosition #461 @390 RefTypeUse <Ivl:89>  BB07 regmask=[allIntButFP] minReg=1 last wt=100.00>
Interval 90: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #462 @391 RefTypeDef <Ivl:90> IND BB07 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N376.t424. LEA; N390.t137. IND }
N392 (???,???) [000531] -A-XG-------              *  STOREIND  ref    REG NA
<RefPosition #463 @392 RefTypeFixedReg <Reg:rcx>  BB07 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #464 @392 RefTypeUse <Ivl:86>  BB07 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #465 @392 RefTypeFixedReg <Reg:rdx>  BB07 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #466 @392 RefTypeUse <Ivl:90>  BB07 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #467 @393 RefTypeKill <Reg:rax>  BB07 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #468 @393 RefTypeKill <Reg:rcx>  BB07 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #469 @393 RefTypeKill <Reg:rdx>  BB07 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #470 @393 RefTypeKill <Reg:r8 >  BB07 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #471 @393 RefTypeKill <Reg:r9 >  BB07 regmask=[r9] minReg=1 wt=100.00>
<RefPosition #472 @393 RefTypeKill <Reg:r10>  BB07 regmask=[r10] minReg=1 wt=100.00>
<RefPosition #473 @393 RefTypeKill <Reg:r11>  BB07 regmask=[r11] minReg=1 wt=100.00>
<RefPosition #474 @393 RefTypeKill <Reg:mm0>  BB07 regmask=[mm0] minReg=1 wt=100.00>
<RefPosition #475 @393 RefTypeKill <Reg:mm1>  BB07 regmask=[mm1] minReg=1 wt=100.00>
<RefPosition #476 @393 RefTypeKill <Reg:mm2>  BB07 regmask=[mm2] minReg=1 wt=100.00>
<RefPosition #477 @393 RefTypeKill <Reg:mm3>  BB07 regmask=[mm3] minReg=1 wt=100.00>
<RefPosition #478 @393 RefTypeKill <Reg:mm4>  BB07 regmask=[mm4] minReg=1 wt=100.00>
<RefPosition #479 @393 RefTypeKill <Reg:mm5>  BB07 regmask=[mm5] minReg=1 wt=100.00>

DefList: {  }
N394 (???,???) [000532] ------------              *  IL_OFFSET void   IL offset: 0xbd REG NA

DefList: {  }
N396 (  2, 10) [000143] H-----------              *  CNS_INT(h) long   0x7ffdb6c458b8 token REG NA
Interval 91: long RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #480 @397 RefTypeDef <Ivl:91> CNS_INT BB07 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N396.t143. CNS_INT }
N398 (???,???) [000651] ------------              *  PUTARG_REG long   REG rcx
<RefPosition #481 @398 RefTypeFixedReg <Reg:rcx>  BB07 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #482 @398 RefTypeUse <Ivl:91>  BB07 regmask=[rcx] minReg=1 last fixed wt=100.00>
Interval 92: long RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #483 @399 RefTypeFixedReg <Reg:rcx>  BB07 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #484 @399 RefTypeDef <Ivl:92> PUTARG_REG BB07 regmask=[rcx] minReg=1 fixed wt=400.00>

DefList: { N398.t651. PUTARG_REG }
N400 ( 16, 16) [000144] --C---------              *  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST REG NA
<RefPosition #485 @400 RefTypeFixedReg <Reg:rcx>  BB07 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #486 @400 RefTypeUse <Ivl:92>  BB07 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #487 @401 RefTypeKill <Reg:rax>  BB07 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #488 @401 RefTypeKill <Reg:rcx>  BB07 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #489 @401 RefTypeKill <Reg:rdx>  BB07 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #490 @401 RefTypeKill <Reg:r8 >  BB07 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #491 @401 RefTypeKill <Reg:r9 >  BB07 regmask=[r9] minReg=1 wt=100.00>
<RefPosition #492 @401 RefTypeKill <Reg:r10>  BB07 regmask=[r10] minReg=1 wt=100.00>
<RefPosition #493 @401 RefTypeKill <Reg:r11>  BB07 regmask=[r11] minReg=1 wt=100.00>
Interval 93: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #494 @401 RefTypeFixedReg <Reg:rax>  BB07 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #495 @401 RefTypeDef <Ivl:93> CALL BB07 regmask=[rax] minReg=1 fixed wt=400.00>

DefList: { N400.t144. CALL }
N402 ( 20, 19) [000146] DA----------              *  STORE_LCL_VAR ref    V32 tmp14         NA REG NA
<RefPosition #496 @402 RefTypeUse <Ivl:93>  BB07 regmask=[allIntButFP] minReg=1 last wt=100.00>

DefList: {  }
N404 (  3,  2) [000140] ------------              *  LCL_VAR   ref    V00 this          NA REG NA
Interval 94: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #497 @405 RefTypeDef <Ivl:94> LCL_VAR BB07 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N404.t140. LCL_VAR }
N406 (  4,  3) [000437] -c----------              *  LEA(b+8)  byref  REG NA
Contained
DefList: { N404.t140. LCL_VAR }
N408 (  6,  5) [000141] ---XG-------              *  IND       ref    REG NA
<RefPosition #498 @408 RefTypeUse <Ivl:94>  BB07 regmask=[allIntButFP] minReg=1 last wt=100.00>
Interval 95: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #499 @409 RefTypeDef <Ivl:95> IND BB07 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N408.t141. IND }
N410 (  7,  6) [000435] -c----------              *  LEA(b+8)  byref  REG NA
Contained
DefList: { N408.t141. IND }
N412 (  9,  8) [000142] ---XG-------              *  IND       ref    REG NA
<RefPosition #500 @412 RefTypeUse <Ivl:95>  BB07 regmask=[allIntButFP] minReg=1 last wt=100.00>
Interval 96: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #501 @413 RefTypeDef <Ivl:96> IND BB07 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N412.t142. IND }
N414 ( 13, 11) [000150] DA-XG-------              *  STORE_LCL_VAR ref    V33 tmp15         NA REG NA
<RefPosition #502 @414 RefTypeUse <Ivl:96>  BB07 regmask=[allIntButFP] minReg=1 last wt=100.00>

DefList: {  }
N416 (  3,  2) [000147] ------------              *  LCL_VAR   ref    V32 tmp14         NA REG NA
Interval 97: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #503 @417 RefTypeDef <Ivl:97> LCL_VAR BB07 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N416.t147. LCL_VAR }
N418 (???,???) [000652] ------------              *  PUTARG_REG ref    REG rcx
<RefPosition #504 @418 RefTypeFixedReg <Reg:rcx>  BB07 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #505 @418 RefTypeUse <Ivl:97>  BB07 regmask=[rcx] minReg=1 last fixed wt=100.00>
Interval 98: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #506 @419 RefTypeFixedReg <Reg:rcx>  BB07 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #507 @419 RefTypeDef <Ivl:98> PUTARG_REG BB07 regmask=[rcx] minReg=1 fixed wt=400.00>

DefList: { N418.t652. PUTARG_REG }
N420 ( 17,  9) [000148] --CXG-------              *  CALL      void   System.Object..ctor REG NA
<RefPosition #508 @420 RefTypeFixedReg <Reg:rcx>  BB07 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #509 @420 RefTypeUse <Ivl:98>  BB07 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #510 @421 RefTypeKill <Reg:rax>  BB07 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #511 @421 RefTypeKill <Reg:rcx>  BB07 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #512 @421 RefTypeKill <Reg:rdx>  BB07 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #513 @421 RefTypeKill <Reg:r8 >  BB07 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #514 @421 RefTypeKill <Reg:r9 >  BB07 regmask=[r9] minReg=1 wt=100.00>
<RefPosition #515 @421 RefTypeKill <Reg:r10>  BB07 regmask=[r10] minReg=1 wt=100.00>
<RefPosition #516 @421 RefTypeKill <Reg:r11>  BB07 regmask=[r11] minReg=1 wt=100.00>

DefList: {  }
N422 (???,???) [000533] ------------              *  IL_OFFSET void   IL offset: 0xcd REG NA

DefList: {  }
N424 (  3,  2) [000151] ------------              *  LCL_VAR   ref    V33 tmp15         NA REG NA
Interval 99: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #517 @425 RefTypeDef <Ivl:99> LCL_VAR BB07 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N424.t151. LCL_VAR }
N426 (  4,  3) [000440] ------------              *  LEA(b+16) byref  REG NA
<RefPosition #518 @426 RefTypeUse <Ivl:99>  BB07 regmask=[allIntButFP] minReg=1 last wt=100.00>
Interval 100: byref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #519 @427 RefTypeDef <Ivl:100> LEA BB07 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N426.t440. LEA }
N428 (  3,  2) [000152] ------------              *  LCL_VAR   ref    V32 tmp14         NA REG NA
Interval 101: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #520 @429 RefTypeDef <Ivl:101> LCL_VAR BB07 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N426.t440. LEA; N428.t152. LCL_VAR }
N430 (???,???) [000534] -A-XG-------              *  STOREIND  ref    REG NA
<RefPosition #521 @430 RefTypeFixedReg <Reg:rcx>  BB07 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #522 @430 RefTypeUse <Ivl:100>  BB07 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #523 @430 RefTypeFixedReg <Reg:rdx>  BB07 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #524 @430 RefTypeUse <Ivl:101>  BB07 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #525 @431 RefTypeKill <Reg:rax>  BB07 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #526 @431 RefTypeKill <Reg:rcx>  BB07 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #527 @431 RefTypeKill <Reg:rdx>  BB07 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #528 @431 RefTypeKill <Reg:r8 >  BB07 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #529 @431 RefTypeKill <Reg:r9 >  BB07 regmask=[r9] minReg=1 wt=100.00>
<RefPosition #530 @431 RefTypeKill <Reg:r10>  BB07 regmask=[r10] minReg=1 wt=100.00>
<RefPosition #531 @431 RefTypeKill <Reg:r11>  BB07 regmask=[r11] minReg=1 wt=100.00>
<RefPosition #532 @431 RefTypeKill <Reg:mm0>  BB07 regmask=[mm0] minReg=1 wt=100.00>
<RefPosition #533 @431 RefTypeKill <Reg:mm1>  BB07 regmask=[mm1] minReg=1 wt=100.00>
<RefPosition #534 @431 RefTypeKill <Reg:mm2>  BB07 regmask=[mm2] minReg=1 wt=100.00>
<RefPosition #535 @431 RefTypeKill <Reg:mm3>  BB07 regmask=[mm3] minReg=1 wt=100.00>
<RefPosition #536 @431 RefTypeKill <Reg:mm4>  BB07 regmask=[mm4] minReg=1 wt=100.00>
<RefPosition #537 @431 RefTypeKill <Reg:mm5>  BB07 regmask=[mm5] minReg=1 wt=100.00>

DefList: {  }
N432 (???,???) [000535] ------------              *  IL_OFFSET void   IL offset: 0xd2 REG NA

DefList: {  }
N434 (  1,  1) [000155] ------------              *  NO_OP     void   REG NA

DefList: {  }
N436 (???,???) [000536] ------------              *  IL_OFFSET void   IL offset: 0xd3 REG NA

DefList: {  }
N438 (  0,  0) [000156] ------------              *  NOP       void   REG NA


NEW BLOCK BB08


Setting BB07 as the predecessor for determining incoming variable registers of BB08
<RefPosition #538 @440 RefTypeBB  BB08 regmask=[] minReg=1 wt=100.00>


NEW BLOCK BB10


Incoming EH boundary; <RefPosition #539 @442 RefTypeBB  BB10 regmask=[] minReg=1 wt=100.00>

DefList: {  }
N444 (???,???) [000619] ------------              *  IL_OFFSET void   IL offset: 0xd5 REG NA

DefList: {  }
N446 (  3,  2) [000163] ------------              *  LCL_VAR   int   (AX) V06 loc4          NA REG NA
Interval 102: int RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #540 @447 RefTypeDef <Ivl:102> LCL_VAR BB10 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N446.t163. LCL_VAR }
N448 (  4,  4) [000441] ----G-------              *  CAST      int <- bool <- int REG NA
<RefPosition #541 @448 RefTypeUse <Ivl:102>  BB10 regmask=[allIntButFP] minReg=1 last wt=100.00>
Interval 103: int RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #542 @449 RefTypeDef <Ivl:103> CAST BB10 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N448.t441. CAST }
N450 (  1,  1) [000164] -c----------              *  CNS_INT   int    0 REG NA
Contained
DefList: { N448.t441. CAST }
N452 (  6,  6) [000165] J---G--N----              *  EQ        void   REG NA
<RefPosition #543 @452 RefTypeUse <Ivl:103>  BB10 regmask=[allIntButFP] minReg=1 last wt=100.00>

DefList: {  }
N454 (  8,  8) [000166] ----G-------              *  JTRUE     void   REG NA


NEW BLOCK BB11


Setting BB10 as the predecessor for determining incoming variable registers of BB11
<RefPosition #544 @456 RefTypeBB  BB11 regmask=[] minReg=1 wt=100.00>

DefList: {  }
N458 (???,???) [000620] ------------              *  IL_OFFSET void   IL offset: 0xd9 REG NA

DefList: {  }
N460 (  3,  2) [000168] ------------              *  LCL_VAR   ref    V05 loc3          NA REG NA
Interval 104: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #545 @461 RefTypeDef <Ivl:104> LCL_VAR BB11 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N460.t168. LCL_VAR }
N462 (???,???) [000675] ------------              *  PUTARG_REG ref    REG rcx
<RefPosition #546 @462 RefTypeFixedReg <Reg:rcx>  BB11 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #547 @462 RefTypeUse <Ivl:104>  BB11 regmask=[rcx] minReg=1 last fixed wt=100.00>
Interval 105: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #548 @463 RefTypeFixedReg <Reg:rcx>  BB11 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #549 @463 RefTypeDef <Ivl:105> PUTARG_REG BB11 regmask=[rcx] minReg=1 fixed wt=400.00>

DefList: { N462.t675. PUTARG_REG }
N464 ( 17,  8) [000169] --CXG-------              *  CALL      void   System.Threading.Monitor.Exit REG NA
<RefPosition #550 @464 RefTypeFixedReg <Reg:rcx>  BB11 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #551 @464 RefTypeUse <Ivl:105>  BB11 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #552 @465 RefTypeKill <Reg:rax>  BB11 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #553 @465 RefTypeKill <Reg:rcx>  BB11 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #554 @465 RefTypeKill <Reg:rdx>  BB11 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #555 @465 RefTypeKill <Reg:r8 >  BB11 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #556 @465 RefTypeKill <Reg:r9 >  BB11 regmask=[r9] minReg=1 wt=100.00>
<RefPosition #557 @465 RefTypeKill <Reg:r10>  BB11 regmask=[r10] minReg=1 wt=100.00>
<RefPosition #558 @465 RefTypeKill <Reg:r11>  BB11 regmask=[r11] minReg=1 wt=100.00>

DefList: {  }
N466 (???,???) [000621] ------------              *  IL_OFFSET void   IL offset: 0xdf REG NA

DefList: {  }
N468 (  1,  1) [000170] ------------              *  NO_OP     void   REG NA


NEW BLOCK BB12


Setting BB10 as the predecessor for determining incoming variable registers of BB12
<RefPosition #559 @470 RefTypeBB  BB12 regmask=[] minReg=1 wt=100.00>

DefList: {  }
N472 (???,???) [000622] ------------              *  IL_OFFSET void   IL offset: 0xe0 REG NA

DefList: {  }
N474 (  0,  0) [000167] ------------              *  RETFILT   void   REG NA


NEW BLOCK BB09


Incoming EH boundary; <RefPosition #560 @476 RefTypeBB  BB09 regmask=[] minReg=1 wt=100.00>


NEW BLOCK BB13


Incoming EH boundary; <RefPosition #561 @478 RefTypeBB  BB13 regmask=[] minReg=1 wt=100.00>

DefList: {  }
N480 (???,???) [000537] ------------              *  IL_OFFSET void   IL offset: 0xe1 REG NA

DefList: {  }
N482 (  1,  1) [000157] ------------              *  NO_OP     void   REG NA

DefList: {  }
N484 (???,???) [000538] ------------              *  IL_OFFSET void   IL offset: 0xe2 REG NA

DefList: {  }
N486 (  3,  2) [000158] ------------              *  LCL_VAR   int    V04 loc2          NA REG NA
Interval 106: int RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #562 @487 RefTypeDef <Ivl:106> LCL_VAR BB13 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N486.t158. LCL_VAR }
N488 (  1,  1) [000159] -c----------              *  CNS_INT   int    1 REG NA
Contained
DefList: { N486.t158. LCL_VAR }
N490 (  5,  4) [000160] ------------              *  ADD       int    REG NA
<RefPosition #563 @490 RefTypeUse <Ivl:106>  BB13 regmask=[allIntButFP] minReg=1 last wt=100.00>
Interval 107: int RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #564 @491 RefTypeDef <Ivl:107> ADD BB13 regmask=[allIntButFP] minReg=1 wt=400.00>
Assigning related <I107> to <I106>

DefList: { N490.t160. ADD }
N492 (  9,  7) [000162] DA----------              *  STORE_LCL_VAR int    V04 loc2          NA REG NA
<RefPosition #565 @492 RefTypeUse <Ivl:107>  BB13 regmask=[allIntButFP] minReg=1 last wt=100.00>


NEW BLOCK BB15


Setting BB14 as the predecessor for determining incoming variable registers of BB15
<RefPosition #566 @494 RefTypeBB  BB15 regmask=[] minReg=1 wt=100.00>

DefList: {  }
N496 (???,???) [000541] ------------              *  IL_OFFSET void   IL offset: 0xf1 REG NA

DefList: {  }
N498 ( 14,  5) [000171] --CXG-------              *  CALL      long   System.DateTime.get_Now REG NA
<RefPosition #567 @499 RefTypeKill <Reg:rax>  BB15 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #568 @499 RefTypeKill <Reg:rcx>  BB15 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #569 @499 RefTypeKill <Reg:rdx>  BB15 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #570 @499 RefTypeKill <Reg:r8 >  BB15 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #571 @499 RefTypeKill <Reg:r9 >  BB15 regmask=[r9] minReg=1 wt=100.00>
<RefPosition #572 @499 RefTypeKill <Reg:r10>  BB15 regmask=[r10] minReg=1 wt=100.00>
<RefPosition #573 @499 RefTypeKill <Reg:r11>  BB15 regmask=[r11] minReg=1 wt=100.00>
Interval 108: long RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #574 @499 RefTypeFixedReg <Reg:rax>  BB15 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #575 @499 RefTypeDef <Ivl:108> CALL BB15 regmask=[rax] minReg=1 fixed wt=400.00>

DefList: { N498.t171. CALL }
N500 ( 18,  8) [000174] DA-XG-------              *  STORE_LCL_VAR struct<System.DateTime, 8> V34 tmp16         NA REG NA
<RefPosition #576 @500 RefTypeUse <Ivl:108>  BB15 regmask=[allIntButFP] minReg=1 last wt=100.00>

DefList: {  }
N502 (???,???) [000542] ------------              *  IL_OFFSET void   IL offset: 0xf6 REG NA

DefList: {  }
N504 (  3,  2) [000175] ------------              *  LCL_VAR   struct<System.DateTime, 8> V34 tmp16         NA REG NA
Interval 109: long RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #577 @505 RefTypeDef <Ivl:109> LCL_VAR BB15 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N504.t175. LCL_VAR }
N506 (  7,  5) [000178] DA--G-------              *  STORE_LCL_VAR struct<System.DateTime, 8>(AX) V03 loc1          NA REG NA
<RefPosition #578 @506 RefTypeUse <Ivl:109>  BB15 regmask=[allIntButFP] minReg=1 last wt=100.00>

DefList: {  }
N508 (???,???) [000543] ------------              *  IL_OFFSET void   IL offset: 0xf7 REG NA

DefList: {  }
N510 (  3,  3) [000180] ------------              *  LCL_VAR_ADDR byref  V03 loc1          NA REG NA
Interval 110: byref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #579 @511 RefTypeDef <Ivl:110> LCL_VAR_ADDR BB15 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N510.t180. LCL_VAR_ADDR }
N512 (???,???) [000653] ------------              *  PUTARG_REG byref  REG rcx
<RefPosition #580 @512 RefTypeFixedReg <Reg:rcx>  BB15 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #581 @512 RefTypeUse <Ivl:110>  BB15 regmask=[rcx] minReg=1 last fixed wt=100.00>
Interval 111: byref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #582 @513 RefTypeFixedReg <Reg:rcx>  BB15 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #583 @513 RefTypeDef <Ivl:111> PUTARG_REG BB15 regmask=[rcx] minReg=1 fixed wt=400.00>

DefList: { N512.t653. PUTARG_REG }
N514 ( 17, 10) [000181] --CXG-------              *  CALL      ref    System.DateTime.ToString REG NA
<RefPosition #584 @514 RefTypeFixedReg <Reg:rcx>  BB15 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #585 @514 RefTypeUse <Ivl:111>  BB15 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #586 @515 RefTypeKill <Reg:rax>  BB15 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #587 @515 RefTypeKill <Reg:rcx>  BB15 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #588 @515 RefTypeKill <Reg:rdx>  BB15 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #589 @515 RefTypeKill <Reg:r8 >  BB15 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #590 @515 RefTypeKill <Reg:r9 >  BB15 regmask=[r9] minReg=1 wt=100.00>
<RefPosition #591 @515 RefTypeKill <Reg:r10>  BB15 regmask=[r10] minReg=1 wt=100.00>
<RefPosition #592 @515 RefTypeKill <Reg:r11>  BB15 regmask=[r11] minReg=1 wt=100.00>
Interval 112: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #593 @515 RefTypeFixedReg <Reg:rax>  BB15 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #594 @515 RefTypeDef <Ivl:112> CALL BB15 regmask=[rax] minReg=1 fixed wt=400.00>

DefList: { N514.t181. CALL }
N516 ( 21, 13) [000183] DA-XG-------              *  STORE_LCL_VAR ref    V35 tmp17         NA REG NA
<RefPosition #595 @516 RefTypeUse <Ivl:112>  BB15 regmask=[allIntButFP] minReg=1 last wt=100.00>

DefList: {  }
N518 (???,???) [000544] ------------              *  IL_OFFSET void   IL offset: 0xfe REG NA

DefList: {  }
N520 (  2, 10) [000444] H-----------              *  CNS_INT(h) long   0xBE2A3200 "	 Waiting for list processing to complete..." REG NA
Interval 113: long RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #596 @521 RefTypeDef <Ivl:113> CNS_INT BB15 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N520.t444. CNS_INT }
N522 (  4, 12) [000445] #---G-------              *  IND       ref    REG NA
<RefPosition #597 @522 RefTypeUse <Ivl:113>  BB15 regmask=[allIntButFP] minReg=1 last wt=100.00>
Interval 114: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #598 @523 RefTypeDef <Ivl:114> IND BB15 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N522.t445. IND }
N524 (???,???) [000654] ----G-------              *  PUTARG_REG ref    REG rdx
<RefPosition #599 @524 RefTypeFixedReg <Reg:rdx>  BB15 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #600 @524 RefTypeUse <Ivl:114>  BB15 regmask=[rdx] minReg=1 last fixed wt=100.00>
Interval 115: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #601 @525 RefTypeFixedReg <Reg:rdx>  BB15 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #602 @525 RefTypeDef <Ivl:115> PUTARG_REG BB15 regmask=[rdx] minReg=1 fixed wt=400.00>

DefList: { N524.t654. PUTARG_REG }
N526 (  3,  2) [000184] ------------              *  LCL_VAR   ref    V35 tmp17         NA REG NA
Interval 116: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #603 @527 RefTypeDef <Ivl:116> LCL_VAR BB15 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N524.t654. PUTARG_REG; N526.t184. LCL_VAR }
N528 (???,???) [000655] ------------              *  PUTARG_REG ref    REG rcx
<RefPosition #604 @528 RefTypeFixedReg <Reg:rcx>  BB15 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #605 @528 RefTypeUse <Ivl:116>  BB15 regmask=[rcx] minReg=1 last fixed wt=100.00>
Interval 117: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #606 @529 RefTypeFixedReg <Reg:rcx>  BB15 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #607 @529 RefTypeDef <Ivl:117> PUTARG_REG BB15 regmask=[rcx] minReg=1 fixed wt=400.00>

DefList: { N524.t654. PUTARG_REG; N528.t655. PUTARG_REG }
N530 ( 21, 21) [000186] --CXG-------              *  CALL      ref    System.String.Concat REG NA
<RefPosition #608 @530 RefTypeFixedReg <Reg:rdx>  BB15 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #609 @530 RefTypeUse <Ivl:115>  BB15 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #610 @530 RefTypeFixedReg <Reg:rcx>  BB15 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #611 @530 RefTypeUse <Ivl:117>  BB15 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #612 @531 RefTypeKill <Reg:rax>  BB15 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #613 @531 RefTypeKill <Reg:rcx>  BB15 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #614 @531 RefTypeKill <Reg:rdx>  BB15 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #615 @531 RefTypeKill <Reg:r8 >  BB15 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #616 @531 RefTypeKill <Reg:r9 >  BB15 regmask=[r9] minReg=1 wt=100.00>
<RefPosition #617 @531 RefTypeKill <Reg:r10>  BB15 regmask=[r10] minReg=1 wt=100.00>
<RefPosition #618 @531 RefTypeKill <Reg:r11>  BB15 regmask=[r11] minReg=1 wt=100.00>
Interval 118: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #619 @531 RefTypeFixedReg <Reg:rax>  BB15 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #620 @531 RefTypeDef <Ivl:118> CALL BB15 regmask=[rax] minReg=1 fixed wt=400.00>

DefList: { N530.t186. CALL }
N532 ( 25, 24) [000188] DA-XG-------              *  STORE_LCL_VAR ref    V36 tmp18         NA REG NA
<RefPosition #621 @532 RefTypeUse <Ivl:118>  BB15 regmask=[allIntButFP] minReg=1 last wt=100.00>

DefList: {  }
N534 (???,???) [000545] ------------              *  IL_OFFSET void   IL offset: 0x108 REG NA

DefList: {  }
N536 (  3,  2) [000189] ------------              *  LCL_VAR   ref    V36 tmp18         NA REG NA
Interval 119: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #622 @537 RefTypeDef <Ivl:119> LCL_VAR BB15 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N536.t189. LCL_VAR }
N538 (???,???) [000656] ------------              *  PUTARG_REG ref    REG rcx
<RefPosition #623 @538 RefTypeFixedReg <Reg:rcx>  BB15 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #624 @538 RefTypeUse <Ivl:119>  BB15 regmask=[rcx] minReg=1 last fixed wt=100.00>
Interval 120: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #625 @539 RefTypeFixedReg <Reg:rcx>  BB15 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #626 @539 RefTypeDef <Ivl:120> PUTARG_REG BB15 regmask=[rcx] minReg=1 fixed wt=400.00>

DefList: { N538.t656. PUTARG_REG }
N540 ( 17,  8) [000190] --CXG-------              *  CALL      void   System.Console.WriteLine REG NA
<RefPosition #627 @540 RefTypeFixedReg <Reg:rcx>  BB15 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #628 @540 RefTypeUse <Ivl:120>  BB15 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #629 @541 RefTypeKill <Reg:rax>  BB15 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #630 @541 RefTypeKill <Reg:rcx>  BB15 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #631 @541 RefTypeKill <Reg:rdx>  BB15 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #632 @541 RefTypeKill <Reg:r8 >  BB15 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #633 @541 RefTypeKill <Reg:r9 >  BB15 regmask=[r9] minReg=1 wt=100.00>
<RefPosition #634 @541 RefTypeKill <Reg:r10>  BB15 regmask=[r10] minReg=1 wt=100.00>
<RefPosition #635 @541 RefTypeKill <Reg:r11>  BB15 regmask=[r11] minReg=1 wt=100.00>

DefList: {  }
N542 (???,???) [000546] ------------              *  IL_OFFSET void   IL offset: 0x10d REG NA

DefList: {  }
N544 (  1,  1) [000191] ------------              *  NO_OP     void   REG NA

DefList: {  }
N546 (???,???) [000547] ------------              *  IL_OFFSET void   IL offset: 0x10e REG NA

DefList: {  }
N548 (  0,  0) [000192] ------------              *  NOP       void   REG NA


NEW BLOCK BB28


Setting BB15 as the predecessor for determining incoming variable registers of BB28
<RefPosition #636 @550 RefTypeBB  BB28 regmask=[] minReg=1 wt=100.00>

DefList: {  }
N552 (???,???) [000563] ------------              *  IL_OFFSET void   IL offset: 0x161 REG NA

DefList: {  }
N554 (  1,  1) [000193] -c----------              *  CNS_INT   int    1 REG NA
Contained
DefList: {  }
N556 (  5,  4) [000195] DA----------              *  STORE_LCL_VAR int    V11 loc9          NA REG NA

DefList: {  }
N558 (???,???) [000564] ------------              *  IL_OFFSET void   IL offset: 0x164 REG NA

DefList: {  }
N560 (  0,  0) [000196] ------------              *  NOP       void   REG NA


NEW BLOCK BB16


Setting BB28 as the predecessor for determining incoming variable registers of BB16
<RefPosition #637 @562 RefTypeBB  BB16 regmask=[] minReg=1 wt=100.00>

DefList: {  }
N564 (???,???) [000548] ------------              *  IL_OFFSET void   IL offset: 0x110 REG NA

DefList: {  }
N566 (  1,  1) [000197] ------------              *  NO_OP     void   REG NA

DefList: {  }
N568 (???,???) [000549] ------------              *  IL_OFFSET void   IL offset: 0x111 REG NA

DefList: {  }
N570 (  3,  2) [000198] ------------              *  LCL_VAR   ref    V00 this          NA REG NA
Interval 121: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #638 @571 RefTypeDef <Ivl:121> LCL_VAR BB16 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N570.t198. LCL_VAR }
N572 (  4,  3) [000450] -c----------              *  LEA(b+8)  byref  REG NA
Contained
DefList: { N570.t198. LCL_VAR }
N574 (  6,  5) [000199] ---XG-------              *  IND       ref    REG NA
<RefPosition #639 @574 RefTypeUse <Ivl:121>  BB16 regmask=[allIntButFP] minReg=1 last wt=100.00>
Interval 122: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #640 @575 RefTypeDef <Ivl:122> IND BB16 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N574.t199. IND }
N576 ( 10,  8) [000201] DA-XG-------              *  STORE_LCL_VAR ref    V08 loc6          NA REG NA
<RefPosition #641 @576 RefTypeUse <Ivl:122>  BB16 regmask=[allIntButFP] minReg=1 last wt=100.00>

DefList: {  }
N578 (???,???) [000550] ------------              *  IL_OFFSET void   IL offset: 0x119 REG NA

DefList: {  }
N580 (  1,  1) [000202] ------------              *  CNS_INT   int    0 REG NA
Interval 123: int RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #642 @581 RefTypeDef <Ivl:123> CNS_INT BB16 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N580.t202. CNS_INT }
N582 (  5,  4) [000204] DA--G-------              *  STORE_LCL_VAR int   (AX) V09 loc7          NA REG NA
<RefPosition #643 @582 RefTypeUse <Ivl:123>  BB16 regmask=[allIntButFP] minReg=1 last wt=100.00>


NEW BLOCK BB17


Setting BB16 as the predecessor for determining incoming variable registers of BB17
<RefPosition #644 @584 RefTypeBB  BB17 regmask=[] minReg=1 wt=100.00>

DefList: {  }
N586 (???,???) [000551] ------------              *  IL_OFFSET void   IL offset: 0x11c REG NA

DefList: {  }
N588 (  3,  3) [000207] ------------              *  LCL_VAR_ADDR long   V09 loc7          NA REG NA
Interval 124: long RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #645 @589 RefTypeDef <Ivl:124> LCL_VAR_ADDR BB17 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N588.t207. LCL_VAR_ADDR }
N590 (???,???) [000657] ------------              *  PUTARG_REG long   REG rdx
<RefPosition #646 @590 RefTypeFixedReg <Reg:rdx>  BB17 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #647 @590 RefTypeUse <Ivl:124>  BB17 regmask=[rdx] minReg=1 last fixed wt=100.00>
Interval 125: long RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #648 @591 RefTypeFixedReg <Reg:rdx>  BB17 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #649 @591 RefTypeDef <Ivl:125> PUTARG_REG BB17 regmask=[rdx] minReg=1 fixed wt=400.00>

DefList: { N590.t657. PUTARG_REG }
N592 (  3,  2) [000205] ------------              *  LCL_VAR   ref    V08 loc6          NA REG NA
Interval 126: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #650 @593 RefTypeDef <Ivl:126> LCL_VAR BB17 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N590.t657. PUTARG_REG; N592.t205. LCL_VAR }
N594 (???,???) [000658] ------------              *  PUTARG_REG ref    REG rcx
<RefPosition #651 @594 RefTypeFixedReg <Reg:rcx>  BB17 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #652 @594 RefTypeUse <Ivl:126>  BB17 regmask=[rcx] minReg=1 last fixed wt=100.00>
Interval 127: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #653 @595 RefTypeFixedReg <Reg:rcx>  BB17 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #654 @595 RefTypeDef <Ivl:127> PUTARG_REG BB17 regmask=[rcx] minReg=1 fixed wt=400.00>

DefList: { N590.t657. PUTARG_REG; N594.t658. PUTARG_REG }
N596 ( 20, 12) [000208] --CXG-------              *  CALL      void   System.Threading.Monitor.Enter REG NA
<RefPosition #655 @596 RefTypeFixedReg <Reg:rdx>  BB17 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #656 @596 RefTypeUse <Ivl:125>  BB17 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #657 @596 RefTypeFixedReg <Reg:rcx>  BB17 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #658 @596 RefTypeUse <Ivl:127>  BB17 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #659 @597 RefTypeKill <Reg:rax>  BB17 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #660 @597 RefTypeKill <Reg:rcx>  BB17 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #661 @597 RefTypeKill <Reg:rdx>  BB17 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #662 @597 RefTypeKill <Reg:r8 >  BB17 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #663 @597 RefTypeKill <Reg:r9 >  BB17 regmask=[r9] minReg=1 wt=100.00>
<RefPosition #664 @597 RefTypeKill <Reg:r10>  BB17 regmask=[r10] minReg=1 wt=100.00>
<RefPosition #665 @597 RefTypeKill <Reg:r11>  BB17 regmask=[r11] minReg=1 wt=100.00>

DefList: {  }
N598 (???,???) [000552] ------------              *  IL_OFFSET void   IL offset: 0x125 REG NA

DefList: {  }
N600 (  1,  1) [000209] ------------              *  NO_OP     void   REG NA

DefList: {  }
N602 (???,???) [000553] ------------              *  IL_OFFSET void   IL offset: 0x126 REG NA

DefList: {  }
N604 (  1,  1) [000210] ------------              *  NO_OP     void   REG NA

DefList: {  }
N606 (???,???) [000554] ------------              *  IL_OFFSET void   IL offset: 0x127 REG NA

DefList: {  }
N608 (  3,  2) [000211] ------------              *  LCL_VAR   ref    V00 this          NA REG NA
Interval 128: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #666 @609 RefTypeDef <Ivl:128> LCL_VAR BB17 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N608.t211. LCL_VAR }
N610 (  4,  3) [000456] -c----------              *  LEA(b+8)  byref  REG NA
Contained
DefList: { N608.t211. LCL_VAR }
N612 (  6,  5) [000212] ---XG-------              *  IND       ref    REG NA
<RefPosition #667 @612 RefTypeUse <Ivl:128>  BB17 regmask=[allIntButFP] minReg=1 last wt=100.00>
Interval 129: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #668 @613 RefTypeDef <Ivl:129> IND BB17 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N612.t212. IND }
N614 (  7,  6) [000454] -c----------              *  LEA(b+8)  byref  REG NA
Contained
DefList: { N612.t212. IND }
N616 (  9,  8) [000213] ---XG-------              *  IND       ref    REG NA
<RefPosition #669 @616 RefTypeUse <Ivl:129>  BB17 regmask=[allIntButFP] minReg=1 last wt=100.00>
Interval 130: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #670 @617 RefTypeDef <Ivl:130> IND BB17 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N616.t213. IND }
N618 (  3,  2) [000214] ------------              *  LCL_VAR   ref    V00 this          NA REG NA
Interval 131: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #671 @619 RefTypeDef <Ivl:131> LCL_VAR BB17 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N616.t213. IND; N618.t214. LCL_VAR }
N620 (  4,  3) [000460] -c----------              *  LEA(b+8)  byref  REG NA
Contained
DefList: { N616.t213. IND; N618.t214. LCL_VAR }
N622 (  6,  5) [000215] ---XG-------              *  IND       ref    REG NA
<RefPosition #672 @622 RefTypeUse <Ivl:131>  BB17 regmask=[allIntButFP] minReg=1 last wt=100.00>
Interval 132: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #673 @623 RefTypeDef <Ivl:132> IND BB17 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N616.t213. IND; N622.t215. IND }
N624 (  7,  6) [000458] -c----------              *  LEA(b+16) byref  REG NA
Contained
DefList: { N616.t213. IND; N622.t215. IND }
N626 (  9,  8) [000216] -c-XG-------              *  IND       ref    REG NA
Contained
DefList: { N616.t213. IND; N622.t215. IND }
N628 ( 22, 17) [000217] ---XG-------              *  EQ        int    REG NA
<RefPosition #674 @628 RefTypeUse <Ivl:130>  BB17 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #675 @628 RefTypeUse <Ivl:132>  BB17 regmask=[allIntButFP] minReg=1 last wt=100.00>
Interval 133: int RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #676 @629 RefTypeDef <Ivl:133> EQ BB17 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N628.t217. EQ }
N630 ( 26, 20) [000219] DA-XG-------              *  STORE_LCL_VAR int    V10 loc8          NA REG NA
<RefPosition #677 @630 RefTypeUse <Ivl:133>  BB17 regmask=[allIntButFP] minReg=1 last wt=100.00>

DefList: {  }
N632 (???,???) [000555] ------------              *  IL_OFFSET void   IL offset: 0x141 REG NA

DefList: {  }
N634 (  3,  2) [000220] -c----------              *  LCL_VAR   int    V10 loc8          NA REG NA
Contained
DefList: {  }
N636 (  1,  1) [000221] -c----------              *  CNS_INT   int    0 REG NA
Contained
DefList: {  }
N638 (  5,  4) [000222] J------N----              *  EQ        void   REG NA

DefList: {  }
N640 (  7,  6) [000223] ------------              *  JTRUE     void   REG NA


NEW BLOCK BB18


Setting BB17 as the predecessor for determining incoming variable registers of BB18
<RefPosition #678 @642 RefTypeBB  BB18 regmask=[] minReg=1 wt=100.00>

DefList: {  }
N644 (???,???) [000556] ------------              *  IL_OFFSET void   IL offset: 0x145 REG NA

DefList: {  }
N646 (  1,  1) [000230] ------------              *  NO_OP     void   REG NA

DefList: {  }
N648 (???,???) [000557] ------------              *  IL_OFFSET void   IL offset: 0x146 REG NA

DefList: {  }
N650 (  0,  0) [000231] ------------              *  NOP       void   REG NA


NEW BLOCK BB19


Setting BB17 as the predecessor for determining incoming variable registers of BB19
<RefPosition #679 @652 RefTypeBB  BB19 regmask=[] minReg=1 wt=100.00>

DefList: {  }
N654 (???,???) [000558] ------------              *  IL_OFFSET void   IL offset: 0x148 REG NA

DefList: {  }
N656 (  1,  1) [000224] ------------              *  NO_OP     void   REG NA

DefList: {  }
N658 (???,???) [000559] ------------              *  IL_OFFSET void   IL offset: 0x149 REG NA

DefList: {  }
N660 (  0,  0) [000225] ------------              *  NOP       void   REG NA


NEW BLOCK BB20


Setting BB18 as the predecessor for determining incoming variable registers of BB20
<RefPosition #680 @662 RefTypeBB  BB20 regmask=[] minReg=1 wt=100.00>


NEW BLOCK BB22


Setting BB19 as the predecessor for determining incoming variable registers of BB22
<RefPosition #681 @664 RefTypeBB  BB22 regmask=[] minReg=1 wt=100.00>


NEW BLOCK BB24


Incoming EH boundary; <RefPosition #682 @666 RefTypeBB  BB24 regmask=[] minReg=1 wt=100.00>

DefList: {  }
N668 (???,???) [000623] ------------              *  IL_OFFSET void   IL offset: 0x14b REG NA

DefList: {  }
N670 (  3,  2) [000363] ------------              *  LCL_VAR   int   (AX) V09 loc7          NA REG NA
Interval 134: int RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #683 @671 RefTypeDef <Ivl:134> LCL_VAR BB24 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N670.t363. LCL_VAR }
N672 (  4,  4) [000461] ----G-------              *  CAST      int <- bool <- int REG NA
<RefPosition #684 @672 RefTypeUse <Ivl:134>  BB24 regmask=[allIntButFP] minReg=1 last wt=100.00>
Interval 135: int RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #685 @673 RefTypeDef <Ivl:135> CAST BB24 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N672.t461. CAST }
N674 (  1,  1) [000364] -c----------              *  CNS_INT   int    0 REG NA
Contained
DefList: { N672.t461. CAST }
N676 (  6,  6) [000365] J---G--N----              *  EQ        void   REG NA
<RefPosition #686 @676 RefTypeUse <Ivl:135>  BB24 regmask=[allIntButFP] minReg=1 last wt=100.00>

DefList: {  }
N678 (  8,  8) [000366] ----G-------              *  JTRUE     void   REG NA


NEW BLOCK BB25


Setting BB24 as the predecessor for determining incoming variable registers of BB25
<RefPosition #687 @680 RefTypeBB  BB25 regmask=[] minReg=1 wt=100.00>

DefList: {  }
N682 (???,???) [000624] ------------              *  IL_OFFSET void   IL offset: 0x14f REG NA

DefList: {  }
N684 (  3,  2) [000368] ------------              *  LCL_VAR   ref    V08 loc6          NA REG NA
Interval 136: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #688 @685 RefTypeDef <Ivl:136> LCL_VAR BB25 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N684.t368. LCL_VAR }
N686 (???,???) [000676] ------------              *  PUTARG_REG ref    REG rcx
<RefPosition #689 @686 RefTypeFixedReg <Reg:rcx>  BB25 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #690 @686 RefTypeUse <Ivl:136>  BB25 regmask=[rcx] minReg=1 last fixed wt=100.00>
Interval 137: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #691 @687 RefTypeFixedReg <Reg:rcx>  BB25 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #692 @687 RefTypeDef <Ivl:137> PUTARG_REG BB25 regmask=[rcx] minReg=1 fixed wt=400.00>

DefList: { N686.t676. PUTARG_REG }
N688 ( 17,  8) [000369] --CXG-------              *  CALL      void   System.Threading.Monitor.Exit REG NA
<RefPosition #693 @688 RefTypeFixedReg <Reg:rcx>  BB25 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #694 @688 RefTypeUse <Ivl:137>  BB25 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #695 @689 RefTypeKill <Reg:rax>  BB25 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #696 @689 RefTypeKill <Reg:rcx>  BB25 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #697 @689 RefTypeKill <Reg:rdx>  BB25 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #698 @689 RefTypeKill <Reg:r8 >  BB25 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #699 @689 RefTypeKill <Reg:r9 >  BB25 regmask=[r9] minReg=1 wt=100.00>
<RefPosition #700 @689 RefTypeKill <Reg:r10>  BB25 regmask=[r10] minReg=1 wt=100.00>
<RefPosition #701 @689 RefTypeKill <Reg:r11>  BB25 regmask=[r11] minReg=1 wt=100.00>

DefList: {  }
N690 (???,???) [000625] ------------              *  IL_OFFSET void   IL offset: 0x156 REG NA

DefList: {  }
N692 (  1,  1) [000370] ------------              *  NO_OP     void   REG NA


NEW BLOCK BB26


Setting BB24 as the predecessor for determining incoming variable registers of BB26
<RefPosition #702 @694 RefTypeBB  BB26 regmask=[] minReg=1 wt=100.00>

DefList: {  }
N696 (???,???) [000626] ------------              *  IL_OFFSET void   IL offset: 0x157 REG NA

DefList: {  }
N698 (  0,  0) [000367] ------------              *  RETFILT   void   REG NA


NEW BLOCK BB21


Incoming EH boundary; <RefPosition #703 @700 RefTypeBB  BB21 regmask=[] minReg=1 wt=100.00>


NEW BLOCK BB23


Incoming EH boundary; <RefPosition #704 @702 RefTypeBB  BB23 regmask=[] minReg=1 wt=100.00>


NEW BLOCK BB27


Incoming EH boundary; <RefPosition #705 @704 RefTypeBB  BB27 regmask=[] minReg=1 wt=100.00>

DefList: {  }
N706 (???,???) [000560] ------------              *  IL_OFFSET void   IL offset: 0x158 REG NA

DefList: {  }
N708 (  1,  1) [000226] ------------              *  CNS_INT   int    100 REG NA
Interval 138: int RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #706 @709 RefTypeDef <Ivl:138> CNS_INT BB27 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N708.t226. CNS_INT }
N710 (???,???) [000659] ------------              *  PUTARG_REG int    REG rcx
<RefPosition #707 @710 RefTypeFixedReg <Reg:rcx>  BB27 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #708 @710 RefTypeUse <Ivl:138>  BB27 regmask=[rcx] minReg=1 last fixed wt=100.00>
Interval 139: int RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #709 @711 RefTypeFixedReg <Reg:rcx>  BB27 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #710 @711 RefTypeDef <Ivl:139> PUTARG_REG BB27 regmask=[rcx] minReg=1 fixed wt=400.00>

DefList: { N710.t659. PUTARG_REG }
N712 ( 15,  7) [000227] --CXG-------              *  CALL      void   System.Threading.Thread.Sleep REG NA
<RefPosition #711 @712 RefTypeFixedReg <Reg:rcx>  BB27 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #712 @712 RefTypeUse <Ivl:139>  BB27 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #713 @713 RefTypeKill <Reg:rax>  BB27 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #714 @713 RefTypeKill <Reg:rcx>  BB27 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #715 @713 RefTypeKill <Reg:rdx>  BB27 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #716 @713 RefTypeKill <Reg:r8 >  BB27 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #717 @713 RefTypeKill <Reg:r9 >  BB27 regmask=[r9] minReg=1 wt=100.00>
<RefPosition #718 @713 RefTypeKill <Reg:r10>  BB27 regmask=[r10] minReg=1 wt=100.00>
<RefPosition #719 @713 RefTypeKill <Reg:r11>  BB27 regmask=[r11] minReg=1 wt=100.00>

DefList: {  }
N714 (???,???) [000561] ------------              *  IL_OFFSET void   IL offset: 0x15f REG NA

DefList: {  }
N716 (  1,  1) [000228] ------------              *  NO_OP     void   REG NA

DefList: {  }
N718 (???,???) [000562] ------------              *  IL_OFFSET void   IL offset: 0x160 REG NA

DefList: {  }
N720 (  1,  1) [000229] ------------              *  NO_OP     void   REG NA


NEW BLOCK BB29


Incoming EH boundary; <RefPosition #720 @722 RefTypeBB  BB29 regmask=[] minReg=1 wt=100.00>

DefList: {  }
N724 (???,???) [000565] ------------              *  IL_OFFSET void   IL offset: 0x166 REG NA

DefList: {  }
N726 ( 14,  5) [000232] --CXG-------              *  CALL      long   System.DateTime.get_Now REG NA
<RefPosition #721 @727 RefTypeKill <Reg:rax>  BB29 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #722 @727 RefTypeKill <Reg:rcx>  BB29 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #723 @727 RefTypeKill <Reg:rdx>  BB29 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #724 @727 RefTypeKill <Reg:r8 >  BB29 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #725 @727 RefTypeKill <Reg:r9 >  BB29 regmask=[r9] minReg=1 wt=100.00>
<RefPosition #726 @727 RefTypeKill <Reg:r10>  BB29 regmask=[r10] minReg=1 wt=100.00>
<RefPosition #727 @727 RefTypeKill <Reg:r11>  BB29 regmask=[r11] minReg=1 wt=100.00>
Interval 140: long RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #728 @727 RefTypeFixedReg <Reg:rax>  BB29 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #729 @727 RefTypeDef <Ivl:140> CALL BB29 regmask=[rax] minReg=1 fixed wt=400.00>

DefList: { N726.t232. CALL }
N728 ( 18,  8) [000235] DA-XG-------              *  STORE_LCL_VAR struct<System.DateTime, 8> V37 tmp19         NA REG NA
<RefPosition #730 @728 RefTypeUse <Ivl:140>  BB29 regmask=[allIntButFP] minReg=1 last wt=100.00>

DefList: {  }
N730 (???,???) [000566] ------------              *  IL_OFFSET void   IL offset: 0x16b REG NA

DefList: {  }
N732 (  3,  2) [000236] ------------              *  LCL_VAR   struct<System.DateTime, 8> V37 tmp19         NA REG NA
Interval 141: long RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #731 @733 RefTypeDef <Ivl:141> LCL_VAR BB29 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N732.t236. LCL_VAR }
N734 (  7,  5) [000239] DA--G-------              *  STORE_LCL_VAR struct<System.DateTime, 8>(AX) V03 loc1          NA REG NA
<RefPosition #732 @734 RefTypeUse <Ivl:141>  BB29 regmask=[allIntButFP] minReg=1 last wt=100.00>

DefList: {  }
N736 (???,???) [000567] ------------              *  IL_OFFSET void   IL offset: 0x16c REG NA

DefList: {  }
N738 (  3,  3) [000241] ------------              *  LCL_VAR_ADDR byref  V03 loc1          NA REG NA
Interval 142: byref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #733 @739 RefTypeDef <Ivl:142> LCL_VAR_ADDR BB29 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N738.t241. LCL_VAR_ADDR }
N740 (???,???) [000660] ------------              *  PUTARG_REG byref  REG rcx
<RefPosition #734 @740 RefTypeFixedReg <Reg:rcx>  BB29 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #735 @740 RefTypeUse <Ivl:142>  BB29 regmask=[rcx] minReg=1 last fixed wt=100.00>
Interval 143: byref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #736 @741 RefTypeFixedReg <Reg:rcx>  BB29 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #737 @741 RefTypeDef <Ivl:143> PUTARG_REG BB29 regmask=[rcx] minReg=1 fixed wt=400.00>

DefList: { N740.t660. PUTARG_REG }
N742 ( 17, 10) [000242] --CXG-------              *  CALL      ref    System.DateTime.ToString REG NA
<RefPosition #738 @742 RefTypeFixedReg <Reg:rcx>  BB29 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #739 @742 RefTypeUse <Ivl:143>  BB29 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #740 @743 RefTypeKill <Reg:rax>  BB29 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #741 @743 RefTypeKill <Reg:rcx>  BB29 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #742 @743 RefTypeKill <Reg:rdx>  BB29 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #743 @743 RefTypeKill <Reg:r8 >  BB29 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #744 @743 RefTypeKill <Reg:r9 >  BB29 regmask=[r9] minReg=1 wt=100.00>
<RefPosition #745 @743 RefTypeKill <Reg:r10>  BB29 regmask=[r10] minReg=1 wt=100.00>
<RefPosition #746 @743 RefTypeKill <Reg:r11>  BB29 regmask=[r11] minReg=1 wt=100.00>
Interval 144: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #747 @743 RefTypeFixedReg <Reg:rax>  BB29 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #748 @743 RefTypeDef <Ivl:144> CALL BB29 regmask=[rax] minReg=1 fixed wt=400.00>

DefList: { N742.t242. CALL }
N744 ( 21, 13) [000244] DA-XG-------              *  STORE_LCL_VAR ref    V38 tmp20         NA REG NA
<RefPosition #749 @744 RefTypeUse <Ivl:144>  BB29 regmask=[allIntButFP] minReg=1 last wt=100.00>

DefList: {  }
N746 (???,???) [000568] ------------              *  IL_OFFSET void   IL offset: 0x173 REG NA

DefList: {  }
N748 (  2, 10) [000466] H-----------              *  CNS_INT(h) long   0xBE2A3208 "	 Done.  Profiler is active, available options:" REG NA
Interval 145: long RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #750 @749 RefTypeDef <Ivl:145> CNS_INT BB29 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N748.t466. CNS_INT }
N750 (  4, 12) [000467] #---G-------              *  IND       ref    REG NA
<RefPosition #751 @750 RefTypeUse <Ivl:145>  BB29 regmask=[allIntButFP] minReg=1 last wt=100.00>
Interval 146: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #752 @751 RefTypeDef <Ivl:146> IND BB29 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N750.t467. IND }
N752 (???,???) [000661] ----G-------              *  PUTARG_REG ref    REG rdx
<RefPosition #753 @752 RefTypeFixedReg <Reg:rdx>  BB29 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #754 @752 RefTypeUse <Ivl:146>  BB29 regmask=[rdx] minReg=1 last fixed wt=100.00>
Interval 147: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #755 @753 RefTypeFixedReg <Reg:rdx>  BB29 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #756 @753 RefTypeDef <Ivl:147> PUTARG_REG BB29 regmask=[rdx] minReg=1 fixed wt=400.00>

DefList: { N752.t661. PUTARG_REG }
N754 (  3,  2) [000245] ------------              *  LCL_VAR   ref    V38 tmp20         NA REG NA
Interval 148: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #757 @755 RefTypeDef <Ivl:148> LCL_VAR BB29 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N752.t661. PUTARG_REG; N754.t245. LCL_VAR }
N756 (???,???) [000662] ------------              *  PUTARG_REG ref    REG rcx
<RefPosition #758 @756 RefTypeFixedReg <Reg:rcx>  BB29 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #759 @756 RefTypeUse <Ivl:148>  BB29 regmask=[rcx] minReg=1 last fixed wt=100.00>
Interval 149: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #760 @757 RefTypeFixedReg <Reg:rcx>  BB29 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #761 @757 RefTypeDef <Ivl:149> PUTARG_REG BB29 regmask=[rcx] minReg=1 fixed wt=400.00>

DefList: { N752.t661. PUTARG_REG; N756.t662. PUTARG_REG }
N758 ( 21, 21) [000247] --CXG-------              *  CALL      ref    System.String.Concat REG NA
<RefPosition #762 @758 RefTypeFixedReg <Reg:rdx>  BB29 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #763 @758 RefTypeUse <Ivl:147>  BB29 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #764 @758 RefTypeFixedReg <Reg:rcx>  BB29 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #765 @758 RefTypeUse <Ivl:149>  BB29 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #766 @759 RefTypeKill <Reg:rax>  BB29 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #767 @759 RefTypeKill <Reg:rcx>  BB29 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #768 @759 RefTypeKill <Reg:rdx>  BB29 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #769 @759 RefTypeKill <Reg:r8 >  BB29 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #770 @759 RefTypeKill <Reg:r9 >  BB29 regmask=[r9] minReg=1 wt=100.00>
<RefPosition #771 @759 RefTypeKill <Reg:r10>  BB29 regmask=[r10] minReg=1 wt=100.00>
<RefPosition #772 @759 RefTypeKill <Reg:r11>  BB29 regmask=[r11] minReg=1 wt=100.00>
Interval 150: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #773 @759 RefTypeFixedReg <Reg:rax>  BB29 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #774 @759 RefTypeDef <Ivl:150> CALL BB29 regmask=[rax] minReg=1 fixed wt=400.00>

DefList: { N758.t247. CALL }
N760 ( 25, 24) [000249] DA-XG-------              *  STORE_LCL_VAR ref    V39 tmp21         NA REG NA
<RefPosition #775 @760 RefTypeUse <Ivl:150>  BB29 regmask=[allIntButFP] minReg=1 last wt=100.00>

DefList: {  }
N762 (???,???) [000569] ------------              *  IL_OFFSET void   IL offset: 0x17d REG NA

DefList: {  }
N764 (  3,  2) [000250] ------------              *  LCL_VAR   ref    V39 tmp21         NA REG NA
Interval 151: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #776 @765 RefTypeDef <Ivl:151> LCL_VAR BB29 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N764.t250. LCL_VAR }
N766 (???,???) [000663] ------------              *  PUTARG_REG ref    REG rcx
<RefPosition #777 @766 RefTypeFixedReg <Reg:rcx>  BB29 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #778 @766 RefTypeUse <Ivl:151>  BB29 regmask=[rcx] minReg=1 last fixed wt=100.00>
Interval 152: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #779 @767 RefTypeFixedReg <Reg:rcx>  BB29 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #780 @767 RefTypeDef <Ivl:152> PUTARG_REG BB29 regmask=[rcx] minReg=1 fixed wt=400.00>

DefList: { N766.t663. PUTARG_REG }
N768 ( 17,  8) [000251] --CXG-------              *  CALL      void   System.Console.WriteLine REG NA
<RefPosition #781 @768 RefTypeFixedReg <Reg:rcx>  BB29 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #782 @768 RefTypeUse <Ivl:152>  BB29 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #783 @769 RefTypeKill <Reg:rax>  BB29 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #784 @769 RefTypeKill <Reg:rcx>  BB29 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #785 @769 RefTypeKill <Reg:rdx>  BB29 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #786 @769 RefTypeKill <Reg:r8 >  BB29 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #787 @769 RefTypeKill <Reg:r9 >  BB29 regmask=[r9] minReg=1 wt=100.00>
<RefPosition #788 @769 RefTypeKill <Reg:r10>  BB29 regmask=[r10] minReg=1 wt=100.00>
<RefPosition #789 @769 RefTypeKill <Reg:r11>  BB29 regmask=[r11] minReg=1 wt=100.00>

DefList: {  }
N770 (???,???) [000570] ------------              *  IL_OFFSET void   IL offset: 0x182 REG NA

DefList: {  }
N772 (  1,  1) [000252] ------------              *  NO_OP     void   REG NA

DefList: {  }
N774 (???,???) [000571] ------------              *  IL_OFFSET void   IL offset: 0x183 REG NA

DefList: {  }
N776 (  2, 10) [000471] H-----------              *  CNS_INT(h) long   0xBE2A3210 "   Q = quit" REG NA
Interval 153: long RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #790 @777 RefTypeDef <Ivl:153> CNS_INT BB29 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N776.t471. CNS_INT }
N778 (  4, 12) [000472] #---G-------              *  IND       ref    REG NA
<RefPosition #791 @778 RefTypeUse <Ivl:153>  BB29 regmask=[allIntButFP] minReg=1 last wt=100.00>
Interval 154: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #792 @779 RefTypeDef <Ivl:154> IND BB29 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N778.t472. IND }
N780 (???,???) [000664] ----G-------              *  PUTARG_REG ref    REG rcx
<RefPosition #793 @780 RefTypeFixedReg <Reg:rcx>  BB29 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #794 @780 RefTypeUse <Ivl:154>  BB29 regmask=[rcx] minReg=1 last fixed wt=100.00>
Interval 155: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #795 @781 RefTypeFixedReg <Reg:rcx>  BB29 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #796 @781 RefTypeDef <Ivl:155> PUTARG_REG BB29 regmask=[rcx] minReg=1 fixed wt=400.00>

DefList: { N780.t664. PUTARG_REG }
N782 ( 18, 18) [000254] --CXG-------              *  CALL      void   System.Console.WriteLine REG NA
<RefPosition #797 @782 RefTypeFixedReg <Reg:rcx>  BB29 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #798 @782 RefTypeUse <Ivl:155>  BB29 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #799 @783 RefTypeKill <Reg:rax>  BB29 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #800 @783 RefTypeKill <Reg:rcx>  BB29 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #801 @783 RefTypeKill <Reg:rdx>  BB29 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #802 @783 RefTypeKill <Reg:r8 >  BB29 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #803 @783 RefTypeKill <Reg:r9 >  BB29 regmask=[r9] minReg=1 wt=100.00>
<RefPosition #804 @783 RefTypeKill <Reg:r10>  BB29 regmask=[r10] minReg=1 wt=100.00>
<RefPosition #805 @783 RefTypeKill <Reg:r11>  BB29 regmask=[r11] minReg=1 wt=100.00>

DefList: {  }
N784 (???,???) [000572] ------------              *  IL_OFFSET void   IL offset: 0x18d REG NA

DefList: {  }
N786 (  1,  1) [000255] ------------              *  NO_OP     void   REG NA

DefList: {  }
N788 (???,???) [000573] ------------              *  IL_OFFSET void   IL offset: 0x18e REG NA

DefList: {  }
N790 (  2, 10) [000474] H-----------              *  CNS_INT(h) long   0xBE2A3218 "   H = heap snapshot" REG NA
Interval 156: long RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #806 @791 RefTypeDef <Ivl:156> CNS_INT BB29 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N790.t474. CNS_INT }
N792 (  4, 12) [000475] #---G-------              *  IND       ref    REG NA
<RefPosition #807 @792 RefTypeUse <Ivl:156>  BB29 regmask=[allIntButFP] minReg=1 last wt=100.00>
Interval 157: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #808 @793 RefTypeDef <Ivl:157> IND BB29 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N792.t475. IND }
N794 (???,???) [000665] ----G-------              *  PUTARG_REG ref    REG rcx
<RefPosition #809 @794 RefTypeFixedReg <Reg:rcx>  BB29 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #810 @794 RefTypeUse <Ivl:157>  BB29 regmask=[rcx] minReg=1 last fixed wt=100.00>
Interval 158: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #811 @795 RefTypeFixedReg <Reg:rcx>  BB29 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #812 @795 RefTypeDef <Ivl:158> PUTARG_REG BB29 regmask=[rcx] minReg=1 fixed wt=400.00>

DefList: { N794.t665. PUTARG_REG }
N796 ( 18, 18) [000257] --CXG-------              *  CALL      void   System.Console.WriteLine REG NA
<RefPosition #813 @796 RefTypeFixedReg <Reg:rcx>  BB29 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #814 @796 RefTypeUse <Ivl:158>  BB29 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #815 @797 RefTypeKill <Reg:rax>  BB29 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #816 @797 RefTypeKill <Reg:rcx>  BB29 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #817 @797 RefTypeKill <Reg:rdx>  BB29 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #818 @797 RefTypeKill <Reg:r8 >  BB29 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #819 @797 RefTypeKill <Reg:r9 >  BB29 regmask=[r9] minReg=1 wt=100.00>
<RefPosition #820 @797 RefTypeKill <Reg:r10>  BB29 regmask=[r10] minReg=1 wt=100.00>
<RefPosition #821 @797 RefTypeKill <Reg:r11>  BB29 regmask=[r11] minReg=1 wt=100.00>

DefList: {  }
N798 (???,???) [000574] ------------              *  IL_OFFSET void   IL offset: 0x198 REG NA

DefList: {  }
N800 (  1,  1) [000258] ------------              *  NO_OP     void   REG NA

DefList: {  }
N802 (???,???) [000575] ------------              *  IL_OFFSET void   IL offset: 0x199 REG NA

DefList: {  }
N804 (  2, 10) [000477] H-----------              *  CNS_INT(h) long   0xBE2A3220 "   G = GC (max gen)" REG NA
Interval 159: long RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #822 @805 RefTypeDef <Ivl:159> CNS_INT BB29 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N804.t477. CNS_INT }
N806 (  4, 12) [000478] #---G-------              *  IND       ref    REG NA
<RefPosition #823 @806 RefTypeUse <Ivl:159>  BB29 regmask=[allIntButFP] minReg=1 last wt=100.00>
Interval 160: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #824 @807 RefTypeDef <Ivl:160> IND BB29 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N806.t478. IND }
N808 (???,???) [000666] ----G-------              *  PUTARG_REG ref    REG rcx
<RefPosition #825 @808 RefTypeFixedReg <Reg:rcx>  BB29 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #826 @808 RefTypeUse <Ivl:160>  BB29 regmask=[rcx] minReg=1 last fixed wt=100.00>
Interval 161: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #827 @809 RefTypeFixedReg <Reg:rcx>  BB29 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #828 @809 RefTypeDef <Ivl:161> PUTARG_REG BB29 regmask=[rcx] minReg=1 fixed wt=400.00>

DefList: { N808.t666. PUTARG_REG }
N810 ( 18, 18) [000260] --CXG-------              *  CALL      void   System.Console.WriteLine REG NA
<RefPosition #829 @810 RefTypeFixedReg <Reg:rcx>  BB29 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #830 @810 RefTypeUse <Ivl:161>  BB29 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #831 @811 RefTypeKill <Reg:rax>  BB29 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #832 @811 RefTypeKill <Reg:rcx>  BB29 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #833 @811 RefTypeKill <Reg:rdx>  BB29 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #834 @811 RefTypeKill <Reg:r8 >  BB29 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #835 @811 RefTypeKill <Reg:r9 >  BB29 regmask=[r9] minReg=1 wt=100.00>
<RefPosition #836 @811 RefTypeKill <Reg:r10>  BB29 regmask=[r10] minReg=1 wt=100.00>
<RefPosition #837 @811 RefTypeKill <Reg:r11>  BB29 regmask=[r11] minReg=1 wt=100.00>

DefList: {  }
N812 (???,???) [000576] ------------              *  IL_OFFSET void   IL offset: 0x1a3 REG NA

DefList: {  }
N814 (  1,  1) [000261] ------------              *  NO_OP     void   REG NA

DefList: {  }
N816 (???,???) [000577] ------------              *  IL_OFFSET void   IL offset: 0x1a4 REG NA

DefList: {  }
N818 (  2, 10) [000480] H-----------              *  CNS_INT(h) long   0xBE2A3228 "   R = clear the running flag to stop the consumer thread" REG NA
Interval 162: long RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #838 @819 RefTypeDef <Ivl:162> CNS_INT BB29 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N818.t480. CNS_INT }
N820 (  4, 12) [000481] #---G-------              *  IND       ref    REG NA
<RefPosition #839 @820 RefTypeUse <Ivl:162>  BB29 regmask=[allIntButFP] minReg=1 last wt=100.00>
Interval 163: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #840 @821 RefTypeDef <Ivl:163> IND BB29 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N820.t481. IND }
N822 (???,???) [000667] ----G-------              *  PUTARG_REG ref    REG rcx
<RefPosition #841 @822 RefTypeFixedReg <Reg:rcx>  BB29 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #842 @822 RefTypeUse <Ivl:163>  BB29 regmask=[rcx] minReg=1 last fixed wt=100.00>
Interval 164: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #843 @823 RefTypeFixedReg <Reg:rcx>  BB29 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #844 @823 RefTypeDef <Ivl:164> PUTARG_REG BB29 regmask=[rcx] minReg=1 fixed wt=400.00>

DefList: { N822.t667. PUTARG_REG }
N824 ( 18, 18) [000263] --CXG-------              *  CALL      void   System.Console.WriteLine REG NA
<RefPosition #845 @824 RefTypeFixedReg <Reg:rcx>  BB29 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #846 @824 RefTypeUse <Ivl:164>  BB29 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #847 @825 RefTypeKill <Reg:rax>  BB29 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #848 @825 RefTypeKill <Reg:rcx>  BB29 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #849 @825 RefTypeKill <Reg:rdx>  BB29 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #850 @825 RefTypeKill <Reg:r8 >  BB29 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #851 @825 RefTypeKill <Reg:r9 >  BB29 regmask=[r9] minReg=1 wt=100.00>
<RefPosition #852 @825 RefTypeKill <Reg:r10>  BB29 regmask=[r10] minReg=1 wt=100.00>
<RefPosition #853 @825 RefTypeKill <Reg:r11>  BB29 regmask=[r11] minReg=1 wt=100.00>

DefList: {  }
N826 (???,???) [000578] ------------              *  IL_OFFSET void   IL offset: 0x1ae REG NA

DefList: {  }
N828 (  1,  1) [000264] ------------              *  NO_OP     void   REG NA

DefList: {  }
N830 (???,???) [000579] ------------              *  IL_OFFSET void   IL offset: 0x1af REG NA

DefList: {  }
N832 (  0,  0) [000265] ------------              *  NOP       void   REG NA


NEW BLOCK BB39


Setting BB29 as the predecessor for determining incoming variable registers of BB39
<RefPosition #854 @834 RefTypeBB  BB39 regmask=[] minReg=1 wt=100.00>

DefList: {  }
N836 (???,???) [000614] ------------              *  IL_OFFSET void   IL offset: 0x225 REG NA

DefList: {  }
N838 (  1,  1) [000266] -c----------              *  CNS_INT   int    1 REG NA
Contained
DefList: {  }
N840 (  5,  4) [000268] DA----------              *  STORE_LCL_VAR int    V17 loc15         NA REG NA

DefList: {  }
N842 (???,???) [000615] ------------              *  IL_OFFSET void   IL offset: 0x228 REG NA

DefList: {  }
N844 (  0,  0) [000269] ------------              *  NOP       void   REG NA


NEW BLOCK BB30


Setting BB39 as the predecessor for determining incoming variable registers of BB30
<RefPosition #855 @846 RefTypeBB  BB30 regmask=[] minReg=1 wt=100.00>

DefList: {  }
N848 (???,???) [000580] ------------              *  IL_OFFSET void   IL offset: 0x1b1 REG NA

DefList: {  }
N850 (  1,  1) [000270] ------------              *  NO_OP     void   REG NA

DefList: {  }
N852 (???,???) [000581] ------------              *  IL_OFFSET void   IL offset: 0x1b2 REG NA

DefList: {  }
N854 (  3,  3) [000273] ------------              *  LCL_VAR_ADDR long   V40 tmp22         NA REG NA
Interval 165: long RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #856 @855 RefTypeDef <Ivl:165> LCL_VAR_ADDR BB30 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N854.t273. LCL_VAR_ADDR }
N856 (???,???) [000668] ------------              *  PUTARG_REG long   REG rcx
<RefPosition #857 @856 RefTypeFixedReg <Reg:rcx>  BB30 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #858 @856 RefTypeUse <Ivl:165>  BB30 regmask=[rcx] minReg=1 last fixed wt=100.00>
Interval 166: long RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #859 @857 RefTypeFixedReg <Reg:rcx>  BB30 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #860 @857 RefTypeDef <Ivl:166> PUTARG_REG BB30 regmask=[rcx] minReg=1 fixed wt=400.00>

DefList: { N856.t668. PUTARG_REG }
N858 ( 17,  9) [000271] S-CXG-------              *  CALL      void   System.Console.ReadKey REG NA
<RefPosition #861 @858 RefTypeFixedReg <Reg:rcx>  BB30 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #862 @858 RefTypeUse <Ivl:166>  BB30 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #863 @859 RefTypeKill <Reg:rax>  BB30 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #864 @859 RefTypeKill <Reg:rcx>  BB30 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #865 @859 RefTypeKill <Reg:rdx>  BB30 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #866 @859 RefTypeKill <Reg:r8 >  BB30 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #867 @859 RefTypeKill <Reg:r9 >  BB30 regmask=[r9] minReg=1 wt=100.00>
<RefPosition #868 @859 RefTypeKill <Reg:r10>  BB30 regmask=[r10] minReg=1 wt=100.00>
<RefPosition #869 @859 RefTypeKill <Reg:r11>  BB30 regmask=[r11] minReg=1 wt=100.00>

DefList: {  }
N860 (???,???) [000582] ------------              *  IL_OFFSET void   IL offset: 0x1b7 REG NA

DefList: {  }
N862 (  3,  2) [000274] -c----------              *  LCL_VAR   struct<System.ConsoleKeyInfo, 12>(AX) V40 tmp22         NA REG NA
Contained
DefList: {  }
N864 (???,???) [000669] Dc-----N----              *  LCL_VAR_ADDR byref  V12 loc10         NA REG NA
Contained
DefList: {  }
N866 (  7,  5) [000277] sA----------              *  STORE_BLK struct<System.ConsoleKeyInfo, 12> (copy) (Unroll) REG NA
Interval 167: int RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #870 @866 RefTypeDef <Ivl:167 internal> STORE_BLK BB30 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #871 @866 RefTypeUse <Ivl:167 internal> STORE_BLK BB30 regmask=[allIntButFP] minReg=1 last wt=400.00>

DefList: {  }
N868 (???,???) [000583] ------------              *  IL_OFFSET void   IL offset: 0x1b9 REG NA

DefList: {  }
N870 (  3,  3) [000279] ------------              *  LCL_VAR_ADDR byref  V12 loc10         NA REG NA
Interval 168: byref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #872 @871 RefTypeDef <Ivl:168> LCL_VAR_ADDR BB30 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N870.t279. LCL_VAR_ADDR }
N872 (???,???) [000670] ------------              *  PUTARG_REG byref  REG rcx
<RefPosition #873 @872 RefTypeFixedReg <Reg:rcx>  BB30 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #874 @872 RefTypeUse <Ivl:168>  BB30 regmask=[rcx] minReg=1 last fixed wt=100.00>
Interval 169: byref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #875 @873 RefTypeFixedReg <Reg:rcx>  BB30 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #876 @873 RefTypeDef <Ivl:169> PUTARG_REG BB30 regmask=[rcx] minReg=1 fixed wt=400.00>

DefList: { N872.t670. PUTARG_REG }
N874 ( 17, 10) [000280] --CXG-------              *  CALL      int    System.ConsoleKeyInfo.get_Key REG NA
<RefPosition #877 @874 RefTypeFixedReg <Reg:rcx>  BB30 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #878 @874 RefTypeUse <Ivl:169>  BB30 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #879 @875 RefTypeKill <Reg:rax>  BB30 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #880 @875 RefTypeKill <Reg:rcx>  BB30 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #881 @875 RefTypeKill <Reg:rdx>  BB30 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #882 @875 RefTypeKill <Reg:r8 >  BB30 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #883 @875 RefTypeKill <Reg:r9 >  BB30 regmask=[r9] minReg=1 wt=100.00>
<RefPosition #884 @875 RefTypeKill <Reg:r10>  BB30 regmask=[r10] minReg=1 wt=100.00>
<RefPosition #885 @875 RefTypeKill <Reg:r11>  BB30 regmask=[r11] minReg=1 wt=100.00>
Interval 170: int RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #886 @875 RefTypeFixedReg <Reg:rax>  BB30 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #887 @875 RefTypeDef <Ivl:170> CALL BB30 regmask=[rax] minReg=1 fixed wt=400.00>

DefList: { N874.t280. CALL }
N876 ( 21, 13) [000282] DA-XG-------              *  STORE_LCL_VAR int    V41 tmp23         NA REG NA
<RefPosition #888 @876 RefTypeUse <Ivl:170>  BB30 regmask=[allIntButFP] minReg=1 last wt=100.00>

DefList: {  }
N878 (???,???) [000584] ------------              *  IL_OFFSET void   IL offset: 0x1c0 REG NA

DefList: {  }
N880 (  3,  2) [000283] -c----------              *  LCL_VAR   int    V41 tmp23         NA REG NA
Contained
DefList: {  }
N882 (  1,  1) [000284] -c----------              *  CNS_INT   int    71 REG NA
Contained
DefList: {  }
N884 (  8,  4) [000285] ------------              *  EQ        int    REG NA
Interval 171: int RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #889 @885 RefTypeDef <Ivl:171> EQ BB30 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N884.t285. EQ }
N886 ( 12,  7) [000287] DA----------              *  STORE_LCL_VAR int    V13 loc11         NA REG NA
<RefPosition #890 @886 RefTypeUse <Ivl:171>  BB30 regmask=[allIntButFP] minReg=1 last wt=100.00>

DefList: {  }
N888 (???,???) [000585] ------------              *  IL_OFFSET void   IL offset: 0x1c6 REG NA

DefList: {  }
N890 (  3,  2) [000288] -c----------              *  LCL_VAR   int    V13 loc11         NA REG NA
Contained
DefList: {  }
N892 (  1,  1) [000289] -c----------              *  CNS_INT   int    0 REG NA
Contained
DefList: {  }
N894 (  5,  4) [000290] J------N----              *  EQ        void   REG NA

DefList: {  }
N896 (  7,  6) [000291] ------------              *  JTRUE     void   REG NA


NEW BLOCK BB31


Setting BB30 as the predecessor for determining incoming variable registers of BB31
<RefPosition #891 @898 RefTypeBB  BB31 regmask=[] minReg=1 wt=100.00>

DefList: {  }
N900 (???,???) [000586] ------------              *  IL_OFFSET void   IL offset: 0x1ca REG NA

DefList: {  }
N902 (  1,  1) [000354] ------------              *  NO_OP     void   REG NA

DefList: {  }
N904 (???,???) [000587] ------------              *  IL_OFFSET void   IL offset: 0x1cb REG NA

DefList: {  }
N906 ( 14,  5) [000355] --CXG-------              *  CALL      int    System.GC.get_MaxGeneration REG NA
<RefPosition #892 @907 RefTypeKill <Reg:rax>  BB31 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #893 @907 RefTypeKill <Reg:rcx>  BB31 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #894 @907 RefTypeKill <Reg:rdx>  BB31 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #895 @907 RefTypeKill <Reg:r8 >  BB31 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #896 @907 RefTypeKill <Reg:r9 >  BB31 regmask=[r9] minReg=1 wt=100.00>
<RefPosition #897 @907 RefTypeKill <Reg:r10>  BB31 regmask=[r10] minReg=1 wt=100.00>
<RefPosition #898 @907 RefTypeKill <Reg:r11>  BB31 regmask=[r11] minReg=1 wt=100.00>
Interval 172: int RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #899 @907 RefTypeFixedReg <Reg:rax>  BB31 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #900 @907 RefTypeDef <Ivl:172> CALL BB31 regmask=[rax] minReg=1 fixed wt=400.00>

DefList: { N906.t355. CALL }
N908 ( 18,  8) [000357] DA-XG-------              *  STORE_LCL_VAR int    V45 tmp27         NA REG NA
<RefPosition #901 @908 RefTypeUse <Ivl:172>  BB31 regmask=[allIntButFP] minReg=1 last wt=100.00>

DefList: {  }
N910 (???,???) [000588] ------------              *  IL_OFFSET void   IL offset: 0x1d0 REG NA

DefList: {  }
N912 (  3,  2) [000358] ------------              *  LCL_VAR   int    V45 tmp27         NA REG NA
Interval 173: int RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #902 @913 RefTypeDef <Ivl:173> LCL_VAR BB31 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N912.t358. LCL_VAR }
N914 (???,???) [000671] ------------              *  PUTARG_REG int    REG rcx
<RefPosition #903 @914 RefTypeFixedReg <Reg:rcx>  BB31 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #904 @914 RefTypeUse <Ivl:173>  BB31 regmask=[rcx] minReg=1 last fixed wt=100.00>
Interval 174: int RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #905 @915 RefTypeFixedReg <Reg:rcx>  BB31 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #906 @915 RefTypeDef <Ivl:174> PUTARG_REG BB31 regmask=[rcx] minReg=1 fixed wt=400.00>

DefList: { N914.t671. PUTARG_REG }
N916 ( 17,  8) [000359] --CXG-------              *  CALL      void   System.GC.Collect REG NA
<RefPosition #907 @916 RefTypeFixedReg <Reg:rcx>  BB31 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #908 @916 RefTypeUse <Ivl:174>  BB31 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #909 @917 RefTypeKill <Reg:rax>  BB31 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #910 @917 RefTypeKill <Reg:rcx>  BB31 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #911 @917 RefTypeKill <Reg:rdx>  BB31 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #912 @917 RefTypeKill <Reg:r8 >  BB31 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #913 @917 RefTypeKill <Reg:r9 >  BB31 regmask=[r9] minReg=1 wt=100.00>
<RefPosition #914 @917 RefTypeKill <Reg:r10>  BB31 regmask=[r10] minReg=1 wt=100.00>
<RefPosition #915 @917 RefTypeKill <Reg:r11>  BB31 regmask=[r11] minReg=1 wt=100.00>

DefList: {  }
N918 (???,???) [000589] ------------              *  IL_OFFSET void   IL offset: 0x1d5 REG NA

DefList: {  }
N920 (  1,  1) [000360] ------------              *  NO_OP     void   REG NA

DefList: {  }
N922 (???,???) [000590] ------------              *  IL_OFFSET void   IL offset: 0x1d6 REG NA

DefList: {  }
N924 (  1,  1) [000361] ------------              *  NO_OP     void   REG NA

DefList: {  }
N926 (???,???) [000591] ------------              *  IL_OFFSET void   IL offset: 0x1d7 REG NA

DefList: {  }
N928 (  0,  0) [000362] ------------              *  NOP       void   REG NA


NEW BLOCK BB32


Setting BB30 as the predecessor for determining incoming variable registers of BB32
<RefPosition #916 @930 RefTypeBB  BB32 regmask=[] minReg=1 wt=100.00>

DefList: {  }
N932 (???,???) [000592] ------------              *  IL_OFFSET void   IL offset: 0x1d9 REG NA

DefList: {  }
N934 (  3,  3) [000293] ------------              *  LCL_VAR_ADDR byref  V12 loc10         NA REG NA
Interval 175: byref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #917 @935 RefTypeDef <Ivl:175> LCL_VAR_ADDR BB32 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N934.t293. LCL_VAR_ADDR }
N936 (???,???) [000672] ------------              *  PUTARG_REG byref  REG rcx
<RefPosition #918 @936 RefTypeFixedReg <Reg:rcx>  BB32 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #919 @936 RefTypeUse <Ivl:175>  BB32 regmask=[rcx] minReg=1 last fixed wt=100.00>
Interval 176: byref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #920 @937 RefTypeFixedReg <Reg:rcx>  BB32 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #921 @937 RefTypeDef <Ivl:176> PUTARG_REG BB32 regmask=[rcx] minReg=1 fixed wt=400.00>

DefList: { N936.t672. PUTARG_REG }
N938 ( 17, 10) [000294] --CXG-------              *  CALL      int    System.ConsoleKeyInfo.get_Key REG NA
<RefPosition #922 @938 RefTypeFixedReg <Reg:rcx>  BB32 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #923 @938 RefTypeUse <Ivl:176>  BB32 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #924 @939 RefTypeKill <Reg:rax>  BB32 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #925 @939 RefTypeKill <Reg:rcx>  BB32 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #926 @939 RefTypeKill <Reg:rdx>  BB32 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #927 @939 RefTypeKill <Reg:r8 >  BB32 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #928 @939 RefTypeKill <Reg:r9 >  BB32 regmask=[r9] minReg=1 wt=100.00>
<RefPosition #929 @939 RefTypeKill <Reg:r10>  BB32 regmask=[r10] minReg=1 wt=100.00>
<RefPosition #930 @939 RefTypeKill <Reg:r11>  BB32 regmask=[r11] minReg=1 wt=100.00>
Interval 177: int RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #931 @939 RefTypeFixedReg <Reg:rax>  BB32 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #932 @939 RefTypeDef <Ivl:177> CALL BB32 regmask=[rax] minReg=1 fixed wt=400.00>

DefList: { N938.t294. CALL }
N940 ( 21, 13) [000296] DA-XG-------              *  STORE_LCL_VAR int    V42 tmp24         NA REG NA
<RefPosition #933 @940 RefTypeUse <Ivl:177>  BB32 regmask=[allIntButFP] minReg=1 last wt=100.00>

DefList: {  }
N942 (???,???) [000593] ------------              *  IL_OFFSET void   IL offset: 0x1e0 REG NA

DefList: {  }
N944 (  3,  2) [000297] -c----------              *  LCL_VAR   int    V42 tmp24         NA REG NA
Contained
DefList: {  }
N946 (  1,  1) [000298] -c----------              *  CNS_INT   int    72 REG NA
Contained
DefList: {  }
N948 (  8,  4) [000299] ------------              *  EQ        int    REG NA
Interval 178: int RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #934 @949 RefTypeDef <Ivl:178> EQ BB32 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N948.t299. EQ }
N950 ( 12,  7) [000301] DA----------              *  STORE_LCL_VAR int    V14 loc12         NA REG NA
<RefPosition #935 @950 RefTypeUse <Ivl:178>  BB32 regmask=[allIntButFP] minReg=1 last wt=100.00>

DefList: {  }
N952 (???,???) [000594] ------------              *  IL_OFFSET void   IL offset: 0x1e6 REG NA

DefList: {  }
N954 (  3,  2) [000302] -c----------              *  LCL_VAR   int    V14 loc12         NA REG NA
Contained
DefList: {  }
N956 (  1,  1) [000303] -c----------              *  CNS_INT   int    0 REG NA
Contained
DefList: {  }
N958 (  5,  4) [000304] J------N----              *  EQ        void   REG NA

DefList: {  }
N960 (  7,  6) [000305] ------------              *  JTRUE     void   REG NA


NEW BLOCK BB33


Setting BB32 as the predecessor for determining incoming variable registers of BB33
<RefPosition #936 @962 RefTypeBB  BB33 regmask=[] minReg=1 wt=100.00>

DefList: {  }
N964 (???,???) [000595] ------------              *  IL_OFFSET void   IL offset: 0x1ea REG NA

DefList: {  }
N966 (  1,  1) [000349] ------------              *  NO_OP     void   REG NA

DefList: {  }
N968 (???,???) [000596] ------------              *  IL_OFFSET void   IL offset: 0x1eb REG NA

DefList: {  }
N970 ( 14,  5) [000350] --CXG-------              *  CALL      void   System.Diagnostics.Debugger.Break REG NA
<RefPosition #937 @971 RefTypeKill <Reg:rax>  BB33 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #938 @971 RefTypeKill <Reg:rcx>  BB33 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #939 @971 RefTypeKill <Reg:rdx>  BB33 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #940 @971 RefTypeKill <Reg:r8 >  BB33 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #941 @971 RefTypeKill <Reg:r9 >  BB33 regmask=[r9] minReg=1 wt=100.00>
<RefPosition #942 @971 RefTypeKill <Reg:r10>  BB33 regmask=[r10] minReg=1 wt=100.00>
<RefPosition #943 @971 RefTypeKill <Reg:r11>  BB33 regmask=[r11] minReg=1 wt=100.00>

DefList: {  }
N972 (???,???) [000597] ------------              *  IL_OFFSET void   IL offset: 0x1f0 REG NA

DefList: {  }
N974 (  1,  1) [000351] ------------              *  NO_OP     void   REG NA

DefList: {  }
N976 (???,???) [000598] ------------              *  IL_OFFSET void   IL offset: 0x1f1 REG NA

DefList: {  }
N978 (  1,  1) [000352] ------------              *  NO_OP     void   REG NA

DefList: {  }
N980 (???,???) [000599] ------------              *  IL_OFFSET void   IL offset: 0x1f2 REG NA

DefList: {  }
N982 (  0,  0) [000353] ------------              *  NOP       void   REG NA


NEW BLOCK BB34


Setting BB32 as the predecessor for determining incoming variable registers of BB34
<RefPosition #944 @984 RefTypeBB  BB34 regmask=[] minReg=1 wt=100.00>

DefList: {  }
N986 (???,???) [000600] ------------              *  IL_OFFSET void   IL offset: 0x1f4 REG NA

DefList: {  }
N988 (  3,  3) [000307] ------------              *  LCL_VAR_ADDR byref  V12 loc10         NA REG NA
Interval 179: byref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #945 @989 RefTypeDef <Ivl:179> LCL_VAR_ADDR BB34 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N988.t307. LCL_VAR_ADDR }
N990 (???,???) [000673] ------------              *  PUTARG_REG byref  REG rcx
<RefPosition #946 @990 RefTypeFixedReg <Reg:rcx>  BB34 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #947 @990 RefTypeUse <Ivl:179>  BB34 regmask=[rcx] minReg=1 last fixed wt=100.00>
Interval 180: byref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #948 @991 RefTypeFixedReg <Reg:rcx>  BB34 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #949 @991 RefTypeDef <Ivl:180> PUTARG_REG BB34 regmask=[rcx] minReg=1 fixed wt=400.00>

DefList: { N990.t673. PUTARG_REG }
N992 ( 17, 10) [000308] --CXG-------              *  CALL      int    System.ConsoleKeyInfo.get_Key REG NA
<RefPosition #950 @992 RefTypeFixedReg <Reg:rcx>  BB34 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #951 @992 RefTypeUse <Ivl:180>  BB34 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #952 @993 RefTypeKill <Reg:rax>  BB34 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #953 @993 RefTypeKill <Reg:rcx>  BB34 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #954 @993 RefTypeKill <Reg:rdx>  BB34 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #955 @993 RefTypeKill <Reg:r8 >  BB34 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #956 @993 RefTypeKill <Reg:r9 >  BB34 regmask=[r9] minReg=1 wt=100.00>
<RefPosition #957 @993 RefTypeKill <Reg:r10>  BB34 regmask=[r10] minReg=1 wt=100.00>
<RefPosition #958 @993 RefTypeKill <Reg:r11>  BB34 regmask=[r11] minReg=1 wt=100.00>
Interval 181: int RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #959 @993 RefTypeFixedReg <Reg:rax>  BB34 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #960 @993 RefTypeDef <Ivl:181> CALL BB34 regmask=[rax] minReg=1 fixed wt=400.00>

DefList: { N992.t308. CALL }
N994 ( 21, 13) [000310] DA-XG-------              *  STORE_LCL_VAR int    V43 tmp25         NA REG NA
<RefPosition #961 @994 RefTypeUse <Ivl:181>  BB34 regmask=[allIntButFP] minReg=1 last wt=100.00>

DefList: {  }
N996 (???,???) [000601] ------------              *  IL_OFFSET void   IL offset: 0x1fb REG NA

DefList: {  }
N998 (  3,  2) [000311] -c----------              *  LCL_VAR   int    V43 tmp25         NA REG NA
Contained
DefList: {  }
N1000 (  1,  1) [000312] -c----------              *  CNS_INT   int    82 REG NA
Contained
DefList: {  }
N1002 (  8,  4) [000313] ------------              *  EQ        int    REG NA
Interval 182: int RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #962 @1003 RefTypeDef <Ivl:182> EQ BB34 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N1002.t313. EQ }
N1004 ( 12,  7) [000315] DA----------              *  STORE_LCL_VAR int    V15 loc13         NA REG NA
<RefPosition #963 @1004 RefTypeUse <Ivl:182>  BB34 regmask=[allIntButFP] minReg=1 last wt=100.00>

DefList: {  }
N1006 (???,???) [000602] ------------              *  IL_OFFSET void   IL offset: 0x201 REG NA

DefList: {  }
N1008 (  3,  2) [000316] -c----------              *  LCL_VAR   int    V15 loc13         NA REG NA
Contained
DefList: {  }
N1010 (  1,  1) [000317] -c----------              *  CNS_INT   int    0 REG NA
Contained
DefList: {  }
N1012 (  5,  4) [000318] J------N----              *  EQ        void   REG NA

DefList: {  }
N1014 (  7,  6) [000319] ------------              *  JTRUE     void   REG NA


NEW BLOCK BB35


Setting BB34 as the predecessor for determining incoming variable registers of BB35
<RefPosition #964 @1016 RefTypeBB  BB35 regmask=[] minReg=1 wt=100.00>

DefList: {  }
N1018 (???,???) [000603] ------------              *  IL_OFFSET void   IL offset: 0x205 REG NA

DefList: {  }
N1020 (  1,  1) [000342] ------------              *  NO_OP     void   REG NA

DefList: {  }
N1022 (???,???) [000604] ------------              *  IL_OFFSET void   IL offset: 0x206 REG NA

DefList: {  }
N1024 (  3,  2) [000343] ------------              *  LCL_VAR   ref    V00 this          NA REG NA
Interval 183: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #965 @1025 RefTypeDef <Ivl:183> LCL_VAR BB35 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N1024.t343. LCL_VAR }
N1026 (  4,  3) [000489] -c----------              *  LEA(b+16) byref  REG NA
Contained
DefList: { N1024.t343. LCL_VAR }
N1028 (  1,  1) [000344] -c----------              *  CNS_INT   int    0 REG NA
Contained
DefList: { N1024.t343. LCL_VAR }
N1030 (???,???) [000605] -A-XG-------              *  STOREIND  bool   REG NA
<RefPosition #966 @1030 RefTypeUse <Ivl:183>  BB35 regmask=[allIntButFP] minReg=1 last wt=100.00>

DefList: {  }
N1032 (???,???) [000606] ------------              *  IL_OFFSET void   IL offset: 0x20d REG NA

DefList: {  }
N1034 (  1,  1) [000347] ------------              *  NO_OP     void   REG NA

DefList: {  }
N1036 (???,???) [000607] ------------              *  IL_OFFSET void   IL offset: 0x20e REG NA

DefList: {  }
N1038 (  0,  0) [000348] ------------              *  NOP       void   REG NA


NEW BLOCK BB36


Setting BB34 as the predecessor for determining incoming variable registers of BB36
<RefPosition #967 @1040 RefTypeBB  BB36 regmask=[] minReg=1 wt=100.00>

DefList: {  }
N1042 (???,???) [000608] ------------              *  IL_OFFSET void   IL offset: 0x210 REG NA

DefList: {  }
N1044 (  3,  3) [000321] ------------              *  LCL_VAR_ADDR byref  V12 loc10         NA REG NA
Interval 184: byref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #968 @1045 RefTypeDef <Ivl:184> LCL_VAR_ADDR BB36 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N1044.t321. LCL_VAR_ADDR }
N1046 (???,???) [000674] ------------              *  PUTARG_REG byref  REG rcx
<RefPosition #969 @1046 RefTypeFixedReg <Reg:rcx>  BB36 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #970 @1046 RefTypeUse <Ivl:184>  BB36 regmask=[rcx] minReg=1 last fixed wt=100.00>
Interval 185: byref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #971 @1047 RefTypeFixedReg <Reg:rcx>  BB36 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #972 @1047 RefTypeDef <Ivl:185> PUTARG_REG BB36 regmask=[rcx] minReg=1 fixed wt=400.00>

DefList: { N1046.t674. PUTARG_REG }
N1048 ( 17, 10) [000322] --CXG-------              *  CALL      int    System.ConsoleKeyInfo.get_Key REG NA
<RefPosition #973 @1048 RefTypeFixedReg <Reg:rcx>  BB36 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #974 @1048 RefTypeUse <Ivl:185>  BB36 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #975 @1049 RefTypeKill <Reg:rax>  BB36 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #976 @1049 RefTypeKill <Reg:rcx>  BB36 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #977 @1049 RefTypeKill <Reg:rdx>  BB36 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #978 @1049 RefTypeKill <Reg:r8 >  BB36 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #979 @1049 RefTypeKill <Reg:r9 >  BB36 regmask=[r9] minReg=1 wt=100.00>
<RefPosition #980 @1049 RefTypeKill <Reg:r10>  BB36 regmask=[r10] minReg=1 wt=100.00>
<RefPosition #981 @1049 RefTypeKill <Reg:r11>  BB36 regmask=[r11] minReg=1 wt=100.00>
Interval 186: int RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #982 @1049 RefTypeFixedReg <Reg:rax>  BB36 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #983 @1049 RefTypeDef <Ivl:186> CALL BB36 regmask=[rax] minReg=1 fixed wt=400.00>

DefList: { N1048.t322. CALL }
N1050 ( 21, 13) [000324] DA-XG-------              *  STORE_LCL_VAR int    V44 tmp26         NA REG NA
<RefPosition #984 @1050 RefTypeUse <Ivl:186>  BB36 regmask=[allIntButFP] minReg=1 last wt=100.00>

DefList: {  }
N1052 (???,???) [000609] ------------              *  IL_OFFSET void   IL offset: 0x217 REG NA

DefList: {  }
N1054 (  3,  2) [000325] -c----------              *  LCL_VAR   int    V44 tmp26         NA REG NA
Contained
DefList: {  }
N1056 (  1,  1) [000326] -c----------              *  CNS_INT   int    81 REG NA
Contained
DefList: {  }
N1058 (  8,  4) [000327] ------------              *  EQ        int    REG NA
Interval 187: int RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #985 @1059 RefTypeDef <Ivl:187> EQ BB36 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N1058.t327. EQ }
N1060 ( 12,  7) [000329] DA----------              *  STORE_LCL_VAR int    V16 loc14         NA REG NA
<RefPosition #986 @1060 RefTypeUse <Ivl:187>  BB36 regmask=[allIntButFP] minReg=1 last wt=100.00>

DefList: {  }
N1062 (???,???) [000610] ------------              *  IL_OFFSET void   IL offset: 0x21d REG NA

DefList: {  }
N1064 (  3,  2) [000330] -c----------              *  LCL_VAR   int    V16 loc14         NA REG NA
Contained
DefList: {  }
N1066 (  1,  1) [000331] -c----------              *  CNS_INT   int    0 REG NA
Contained
DefList: {  }
N1068 (  5,  4) [000332] J------N----              *  EQ        void   REG NA

DefList: {  }
N1070 (  7,  6) [000333] ------------              *  JTRUE     void   REG NA


NEW BLOCK BB37


Setting BB36 as the predecessor for determining incoming variable registers of BB37
<RefPosition #987 @1072 RefTypeBB  BB37 regmask=[] minReg=1 wt=100.00>

DefList: {  }
N1074 (???,???) [000611] ------------              *  IL_OFFSET void   IL offset: 0x221 REG NA

DefList: {  }
N1076 (  1,  1) [000335] ------------              *  NO_OP     void   REG NA

DefList: {  }
N1078 (???,???) [000612] ------------              *  IL_OFFSET void   IL offset: 0x222 REG NA

DefList: {  }
N1080 (  0,  0) [000336] ------------              *  NOP       void   REG NA


NEW BLOCK BB38


Setting BB31 as the predecessor for determining incoming variable registers of BB38
<RefPosition #988 @1082 RefTypeBB  BB38 regmask=[] minReg=1 wt=100.00>

DefList: {  }
N1084 (???,???) [000613] ------------              *  IL_OFFSET void   IL offset: 0x224 REG NA

DefList: {  }
N1086 (  1,  1) [000334] ------------              *  NO_OP     void   REG NA


NEW BLOCK BB40


Setting BB37 as the predecessor for determining incoming variable registers of BB40
<RefPosition #989 @1088 RefTypeBB  BB40 regmask=[] minReg=1 wt=100.00>

DefList: {  }
N1090 (???,???) [000616] ------------              *  IL_OFFSET void   IL offset: 0x22a REG NA

DefList: {  }
N1092 (  3,  2) [000337] ------------              *  LCL_VAR   ref    V00 this          NA REG NA
Interval 188: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #990 @1093 RefTypeDef <Ivl:188> LCL_VAR BB40 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N1092.t337. LCL_VAR }
N1094 (  4,  3) [000493] -c----------              *  LEA(b+16) byref  REG NA
Contained
DefList: { N1092.t337. LCL_VAR }
N1096 (  1,  1) [000338] -c----------              *  CNS_INT   int    0 REG NA
Contained
DefList: { N1092.t337. LCL_VAR }
N1098 (???,???) [000617] -A-XG-------              *  STOREIND  bool   REG NA
<RefPosition #991 @1098 RefTypeUse <Ivl:188>  BB40 regmask=[allIntButFP] minReg=1 last wt=100.00>

DefList: {  }
N1100 (???,???) [000618] ------------              *  IL_OFFSET void   IL offset: 0x231 REG NA

DefList: {  }
N1102 (  0,  0) [000341] ------------              *  RETURN    void   REG NA


Linear scan intervals BEFORE VALIDATING INTERVALS:
Interval  0: long RefPositions {#20@31 #21@32} physReg:NA Preferences=[rax]
Interval  1: long RefPositions {#22@37 #23@38} physReg:NA Preferences=[allIntButFP]
Interval  2: byref RefPositions {#24@43 #26@44} physReg:NA Preferences=[rcx]
Interval  3: byref RefPositions {#28@45 #30@46} physReg:NA Preferences=[rcx]
Interval  4: ref RefPositions {#39@47 #40@48} physReg:NA Preferences=[rax]
Interval  5: long (constant) RefPositions {#41@53 #42@54} physReg:NA Preferences=[allIntButFP]
Interval  6: ref RefPositions {#43@55 #45@56} physReg:NA Preferences=[rdx]
Interval  7: ref RefPositions {#47@57 #54@62} physReg:NA Preferences=[rdx]
Interval  8: ref RefPositions {#48@59 #50@60} physReg:NA Preferences=[rcx]
Interval  9: ref RefPositions {#52@61 #56@62} physReg:NA Preferences=[rcx]
Interval 10: ref RefPositions {#65@63 #66@64} physReg:NA Preferences=[rax]
Interval 11: ref RefPositions {#67@69 #69@70} physReg:NA Preferences=[rcx]
Interval 12: ref RefPositions {#71@71 #73@72} physReg:NA Preferences=[rcx]
Interval 13: long (constant) RefPositions {#81@81 #83@82} physReg:NA Preferences=[rcx]
Interval 14: long RefPositions {#85@83 #87@84} physReg:NA Preferences=[rcx]
Interval 15: ref RefPositions {#96@85 #97@86} physReg:NA Preferences=[rax]
Interval 16: ref RefPositions {#98@89 #100@90} physReg:NA Preferences=[rcx]
Interval 17: ref RefPositions {#102@91 #104@92} physReg:NA Preferences=[rcx]
Interval 18: ref RefPositions {#112@97 #113@98} physReg:NA Preferences=[allIntButFP]
Interval 19: byref RefPositions {#114@99 #117@102} physReg:NA Preferences=[rcx]
Interval 20: ref RefPositions {#115@101 #119@102} physReg:NA Preferences=[rdx]
Interval 21: long (constant) RefPositions {#133@107 #135@108} physReg:NA Preferences=[rcx]
Interval 22: long RefPositions {#137@109 #139@110} physReg:NA Preferences=[rcx]
Interval 23: ref RefPositions {#148@111 #149@112} physReg:NA Preferences=[rax]
Interval 24: ref RefPositions {#150@115 #151@118} physReg:NA Preferences=[allIntButFP]
Interval 25: ref RefPositions {#152@119 #153@122} physReg:NA Preferences=[allIntButFP]
Interval 26: ref RefPositions {#154@123 #155@124} physReg:NA Preferences=[allIntButFP]
Interval 27: ref RefPositions {#156@127 #158@128} physReg:NA Preferences=[rcx]
Interval 28: ref RefPositions {#160@129 #162@130} physReg:NA Preferences=[rcx]
Interval 29: ref RefPositions {#170@135 #171@136} physReg:NA Preferences=[allIntButFP]
Interval 30: byref RefPositions {#172@137 #175@140} physReg:NA Preferences=[rcx]
Interval 31: ref RefPositions {#173@139 #177@140} physReg:NA Preferences=[rdx]
Interval 32: long (constant) RefPositions {#191@145 #193@146} physReg:NA Preferences=[rcx]
Interval 33: long RefPositions {#195@147 #197@148} physReg:NA Preferences=[rcx]
Interval 34: ref RefPositions {#206@149 #207@150} physReg:NA Preferences=[rax]
Interval 35: ref RefPositions {#208@153 #210@154} physReg:NA Preferences=[rcx]
Interval 36: ref RefPositions {#212@155 #224@164} physReg:NA Preferences=[rcx]
Interval 37: ref RefPositions {#213@157 #215@158} physReg:NA Preferences=[rdx]
Interval 38: ref RefPositions {#217@159 #226@164} physReg:NA Preferences=[rdx]
Interval 39: long (constant) RefPositions {#218@161 #220@162} physReg:NA Preferences=[r8]
Interval 40: long RefPositions {#222@163 #228@164} physReg:NA Preferences=[r8]
Interval 41: long (constant) RefPositions {#236@169 #238@170} physReg:NA Preferences=[rcx]
Interval 42: long RefPositions {#240@171 #242@172} physReg:NA Preferences=[rcx]
Interval 43: ref RefPositions {#251@173 #252@174} physReg:NA Preferences=[rax]
Interval 44: ref RefPositions {#253@177 #255@178} physReg:NA Preferences=[rcx]
Interval 45: ref RefPositions {#257@179 #264@184} physReg:NA Preferences=[rcx]
Interval 46: ref RefPositions {#258@181 #260@182} physReg:NA Preferences=[rdx]
Interval 47: ref RefPositions {#262@183 #266@184} physReg:NA Preferences=[rdx]
Interval 48: ref RefPositions {#274@189 #275@190} physReg:NA Preferences=[allIntButFP]
Interval 49: ref RefPositions {#276@195 #278@196} physReg:NA Preferences=[rcx]
Interval 50: ref RefPositions {#280@197 #282@198} physReg:NA Preferences=[rcx]
Interval 51: long RefPositions {#298@207 #299@208} physReg:NA Preferences=[rax]
Interval 52: long RefPositions {#300@213 #301@214} physReg:NA Preferences=[allIntButFP]
Interval 53: byref RefPositions {#302@219 #304@220} physReg:NA Preferences=[rcx]
Interval 54: byref RefPositions {#306@221 #308@222} physReg:NA Preferences=[rcx]
Interval 55: ref RefPositions {#317@223 #318@224} physReg:NA Preferences=[rax]
Interval 56: long (constant) RefPositions {#319@229 #320@230} physReg:NA Preferences=[allIntButFP]
Interval 57: ref RefPositions {#321@231 #323@232} physReg:NA Preferences=[rdx]
Interval 58: ref RefPositions {#325@233 #332@238} physReg:NA Preferences=[rdx]
Interval 59: ref RefPositions {#326@235 #328@236} physReg:NA Preferences=[rcx]
Interval 60: ref RefPositions {#330@237 #334@238} physReg:NA Preferences=[rcx]
Interval 61: ref RefPositions {#343@239 #344@240} physReg:NA Preferences=[rax]
Interval 62: ref RefPositions {#345@245 #347@246} physReg:NA Preferences=[rcx]
Interval 63: ref RefPositions {#349@247 #351@248} physReg:NA Preferences=[rcx]
Interval 64: int (constant) RefPositions {#359@257 #360@258} physReg:NA Preferences=[allIntButFP]
Interval 65: int RefPositions {#362@273 #363@274} physReg:NA Preferences=[allIntButFP]
Interval 66: ref RefPositions {#365@295 #366@298} physReg:NA Preferences=[allIntButFP]
Interval 67: ref RefPositions {#367@299 #368@300} physReg:NA Preferences=[allIntButFP]
Interval 68: int (constant) RefPositions {#369@305 #370@306} physReg:NA Preferences=[allIntButFP]
Interval 69: long RefPositions {#372@313 #374@314} physReg:NA Preferences=[rdx]
Interval 70: long RefPositions {#376@315 #383@320} physReg:NA Preferences=[rdx]
Interval 71: ref RefPositions {#377@317 #379@318} physReg:NA Preferences=[rcx]
Interval 72: ref RefPositions {#381@319 #385@320} physReg:NA Preferences=[rcx]
Interval 73: long (constant) RefPositions {#393@333 #395@334} physReg:NA Preferences=[rcx]
Interval 74: long RefPositions {#397@335 #399@336} physReg:NA Preferences=[rcx]
Interval 75: ref RefPositions {#408@337 #409@338} physReg:NA Preferences=[rax]
Interval 76: ref RefPositions {#410@341 #411@344} physReg:NA Preferences=[allIntButFP]
Interval 77: ref RefPositions {#412@345 #413@348} physReg:NA Preferences=[allIntButFP]
Interval 78: ref RefPositions {#414@349 #415@350} physReg:NA Preferences=[allIntButFP]
Interval 79: ref RefPositions {#416@353 #418@354} physReg:NA Preferences=[rcx]
Interval 80: ref RefPositions {#420@355 #422@356} physReg:NA Preferences=[rcx]
Interval 81: ref RefPositions {#430@361 #431@362} physReg:NA Preferences=[allIntButFP]
Interval 82: byref RefPositions {#432@363 #435@366} physReg:NA Preferences=[rcx]
Interval 83: ref RefPositions {#433@365 #437@366} physReg:NA Preferences=[rdx]
Interval 84: ref RefPositions {#451@371 #452@374} physReg:NA Preferences=[allIntButFP]
Interval 85: ref RefPositions {#453@375 #454@376} physReg:NA Preferences=[allIntButFP]
Interval 86: byref RefPositions {#455@377 #464@392} physReg:NA Preferences=[rcx]
Interval 87: ref RefPositions {#456@379 #457@382} physReg:NA Preferences=[allIntButFP]
Interval 88: ref RefPositions {#458@383 #459@386} physReg:NA Preferences=[allIntButFP]
Interval 89: ref RefPositions {#460@387 #461@390} physReg:NA Preferences=[allIntButFP]
Interval 90: ref RefPositions {#462@391 #466@392} physReg:NA Preferences=[rdx]
Interval 91: long (constant) RefPositions {#480@397 #482@398} physReg:NA Preferences=[rcx]
Interval 92: long RefPositions {#484@399 #486@400} physReg:NA Preferences=[rcx]
Interval 93: ref RefPositions {#495@401 #496@402} physReg:NA Preferences=[rax]
Interval 94: ref RefPositions {#497@405 #498@408} physReg:NA Preferences=[allIntButFP]
Interval 95: ref RefPositions {#499@409 #500@412} physReg:NA Preferences=[allIntButFP]
Interval 96: ref RefPositions {#501@413 #502@414} physReg:NA Preferences=[allIntButFP]
Interval 97: ref RefPositions {#503@417 #505@418} physReg:NA Preferences=[rcx]
Interval 98: ref RefPositions {#507@419 #509@420} physReg:NA Preferences=[rcx]
Interval 99: ref RefPositions {#517@425 #518@426} physReg:NA Preferences=[allIntButFP]
Interval 100: byref RefPositions {#519@427 #522@430} physReg:NA Preferences=[rcx]
Interval 101: ref RefPositions {#520@429 #524@430} physReg:NA Preferences=[rdx]
Interval 102: int RefPositions {#540@447 #541@448} physReg:NA Preferences=[allIntButFP]
Interval 103: int RefPositions {#542@449 #543@452} physReg:NA Preferences=[allIntButFP]
Interval 104: ref RefPositions {#545@461 #547@462} physReg:NA Preferences=[rcx]
Interval 105: ref RefPositions {#549@463 #551@464} physReg:NA Preferences=[rcx]
Interval 106: int RefPositions {#562@487 #563@490} physReg:NA Preferences=[allIntButFP] RelatedInterval <I107>
Interval 107: int RefPositions {#564@491 #565@492} physReg:NA Preferences=[allIntButFP]
Interval 108: long RefPositions {#575@499 #576@500} physReg:NA Preferences=[rax]
Interval 109: long RefPositions {#577@505 #578@506} physReg:NA Preferences=[allIntButFP]
Interval 110: byref RefPositions {#579@511 #581@512} physReg:NA Preferences=[rcx]
Interval 111: byref RefPositions {#583@513 #585@514} physReg:NA Preferences=[rcx]
Interval 112: ref RefPositions {#594@515 #595@516} physReg:NA Preferences=[rax]
Interval 113: long (constant) RefPositions {#596@521 #597@522} physReg:NA Preferences=[allIntButFP]
Interval 114: ref RefPositions {#598@523 #600@524} physReg:NA Preferences=[rdx]
Interval 115: ref RefPositions {#602@525 #609@530} physReg:NA Preferences=[rdx]
Interval 116: ref RefPositions {#603@527 #605@528} physReg:NA Preferences=[rcx]
Interval 117: ref RefPositions {#607@529 #611@530} physReg:NA Preferences=[rcx]
Interval 118: ref RefPositions {#620@531 #621@532} physReg:NA Preferences=[rax]
Interval 119: ref RefPositions {#622@537 #624@538} physReg:NA Preferences=[rcx]
Interval 120: ref RefPositions {#626@539 #628@540} physReg:NA Preferences=[rcx]
Interval 121: ref RefPositions {#638@571 #639@574} physReg:NA Preferences=[allIntButFP]
Interval 122: ref RefPositions {#640@575 #641@576} physReg:NA Preferences=[allIntButFP]
Interval 123: int (constant) RefPositions {#642@581 #643@582} physReg:NA Preferences=[allIntButFP]
Interval 124: long RefPositions {#645@589 #647@590} physReg:NA Preferences=[rdx]
Interval 125: long RefPositions {#649@591 #656@596} physReg:NA Preferences=[rdx]
Interval 126: ref RefPositions {#650@593 #652@594} physReg:NA Preferences=[rcx]
Interval 127: ref RefPositions {#654@595 #658@596} physReg:NA Preferences=[rcx]
Interval 128: ref RefPositions {#666@609 #667@612} physReg:NA Preferences=[allIntButFP]
Interval 129: ref RefPositions {#668@613 #669@616} physReg:NA Preferences=[allIntButFP]
Interval 130: ref RefPositions {#670@617 #674@628} physReg:NA Preferences=[allIntButFP]
Interval 131: ref RefPositions {#671@619 #672@622} physReg:NA Preferences=[allIntButFP]
Interval 132: ref RefPositions {#673@623 #675@628} physReg:NA Preferences=[allIntButFP]
Interval 133: int RefPositions {#676@629 #677@630} physReg:NA Preferences=[allIntButFP]
Interval 134: int RefPositions {#683@671 #684@672} physReg:NA Preferences=[allIntButFP]
Interval 135: int RefPositions {#685@673 #686@676} physReg:NA Preferences=[allIntButFP]
Interval 136: ref RefPositions {#688@685 #690@686} physReg:NA Preferences=[rcx]
Interval 137: ref RefPositions {#692@687 #694@688} physReg:NA Preferences=[rcx]
Interval 138: int (constant) RefPositions {#706@709 #708@710} physReg:NA Preferences=[rcx]
Interval 139: int RefPositions {#710@711 #712@712} physReg:NA Preferences=[rcx]
Interval 140: long RefPositions {#729@727 #730@728} physReg:NA Preferences=[rax]
Interval 141: long RefPositions {#731@733 #732@734} physReg:NA Preferences=[allIntButFP]
Interval 142: byref RefPositions {#733@739 #735@740} physReg:NA Preferences=[rcx]
Interval 143: byref RefPositions {#737@741 #739@742} physReg:NA Preferences=[rcx]
Interval 144: ref RefPositions {#748@743 #749@744} physReg:NA Preferences=[rax]
Interval 145: long (constant) RefPositions {#750@749 #751@750} physReg:NA Preferences=[allIntButFP]
Interval 146: ref RefPositions {#752@751 #754@752} physReg:NA Preferences=[rdx]
Interval 147: ref RefPositions {#756@753 #763@758} physReg:NA Preferences=[rdx]
Interval 148: ref RefPositions {#757@755 #759@756} physReg:NA Preferences=[rcx]
Interval 149: ref RefPositions {#761@757 #765@758} physReg:NA Preferences=[rcx]
Interval 150: ref RefPositions {#774@759 #775@760} physReg:NA Preferences=[rax]
Interval 151: ref RefPositions {#776@765 #778@766} physReg:NA Preferences=[rcx]
Interval 152: ref RefPositions {#780@767 #782@768} physReg:NA Preferences=[rcx]
Interval 153: long (constant) RefPositions {#790@777 #791@778} physReg:NA Preferences=[allIntButFP]
Interval 154: ref RefPositions {#792@779 #794@780} physReg:NA Preferences=[rcx]
Interval 155: ref RefPositions {#796@781 #798@782} physReg:NA Preferences=[rcx]
Interval 156: long (constant) RefPositions {#806@791 #807@792} physReg:NA Preferences=[allIntButFP]
Interval 157: ref RefPositions {#808@793 #810@794} physReg:NA Preferences=[rcx]
Interval 158: ref RefPositions {#812@795 #814@796} physReg:NA Preferences=[rcx]
Interval 159: long (constant) RefPositions {#822@805 #823@806} physReg:NA Preferences=[allIntButFP]
Interval 160: ref RefPositions {#824@807 #826@808} physReg:NA Preferences=[rcx]
Interval 161: ref RefPositions {#828@809 #830@810} physReg:NA Preferences=[rcx]
Interval 162: long (constant) RefPositions {#838@819 #839@820} physReg:NA Preferences=[allIntButFP]
Interval 163: ref RefPositions {#840@821 #842@822} physReg:NA Preferences=[rcx]
Interval 164: ref RefPositions {#844@823 #846@824} physReg:NA Preferences=[rcx]
Interval 165: long RefPositions {#856@855 #858@856} physReg:NA Preferences=[rcx]
Interval 166: long RefPositions {#860@857 #862@858} physReg:NA Preferences=[rcx]
Interval 167: int (INTERNAL) RefPositions {#870@866 #871@866} physReg:NA Preferences=[allIntButFP]
Interval 168: byref RefPositions {#872@871 #874@872} physReg:NA Preferences=[rcx]
Interval 169: byref RefPositions {#876@873 #878@874} physReg:NA Preferences=[rcx]
Interval 170: int RefPositions {#887@875 #888@876} physReg:NA Preferences=[rax]
Interval 171: int RefPositions {#889@885 #890@886} physReg:NA Preferences=[allIntButFP]
Interval 172: int RefPositions {#900@907 #901@908} physReg:NA Preferences=[rax]
Interval 173: int RefPositions {#902@913 #904@914} physReg:NA Preferences=[rcx]
Interval 174: int RefPositions {#906@915 #908@916} physReg:NA Preferences=[rcx]
Interval 175: byref RefPositions {#917@935 #919@936} physReg:NA Preferences=[rcx]
Interval 176: byref RefPositions {#921@937 #923@938} physReg:NA Preferences=[rcx]
Interval 177: int RefPositions {#932@939 #933@940} physReg:NA Preferences=[rax]
Interval 178: int RefPositions {#934@949 #935@950} physReg:NA Preferences=[allIntButFP]
Interval 179: byref RefPositions {#945@989 #947@990} physReg:NA Preferences=[rcx]
Interval 180: byref RefPositions {#949@991 #951@992} physReg:NA Preferences=[rcx]
Interval 181: int RefPositions {#960@993 #961@994} physReg:NA Preferences=[rax]
Interval 182: int RefPositions {#962@1003 #963@1004} physReg:NA Preferences=[allIntButFP]
Interval 183: ref RefPositions {#965@1025 #966@1030} physReg:NA Preferences=[allIntButFP]
Interval 184: byref RefPositions {#968@1045 #970@1046} physReg:NA Preferences=[rcx]
Interval 185: byref RefPositions {#972@1047 #974@1048} physReg:NA Preferences=[rcx]
Interval 186: int RefPositions {#983@1049 #984@1050} physReg:NA Preferences=[rax]
Interval 187: int RefPositions {#985@1059 #986@1060} physReg:NA Preferences=[allIntButFP]
Interval 188: ref RefPositions {#990@1093 #991@1098} physReg:NA Preferences=[allIntButFP]

------------
REFPOSITIONS BEFORE VALIDATING INTERVALS: 
------------
<RefPosition #0   @0   RefTypeBB  BB01 regmask=[] minReg=1 wt=100.00>
<RefPosition #1   @4   RefTypeBB  BB02 regmask=[] minReg=1 wt=100.00>
<RefPosition #2   @16  RefTypeBB  BB03 regmask=[] minReg=1 wt=50.00>
<RefPosition #3   @19  RefTypeKill <Reg:rax>  BB03 regmask=[rax] minReg=1 last wt=50.00>
<RefPosition #4   @19  RefTypeKill <Reg:rcx>  BB03 regmask=[rcx] minReg=1 last wt=50.00>
<RefPosition #5   @19  RefTypeKill <Reg:rdx>  BB03 regmask=[rdx] minReg=1 last wt=50.00>
<RefPosition #6   @19  RefTypeKill <Reg:r8 >  BB03 regmask=[r8] minReg=1 last wt=50.00>
<RefPosition #7   @19  RefTypeKill <Reg:r9 >  BB03 regmask=[r9] minReg=1 last wt=50.00>
<RefPosition #8   @19  RefTypeKill <Reg:r10>  BB03 regmask=[r10] minReg=1 last wt=50.00>
<RefPosition #9   @19  RefTypeKill <Reg:r11>  BB03 regmask=[r11] minReg=1 last wt=50.00>
<RefPosition #10  @20  RefTypeBB  BB04 regmask=[] minReg=1 wt=100.00>
<RefPosition #11  @22  RefTypeBB  BB05 regmask=[] minReg=1 wt=100.00>
<RefPosition #12  @31  RefTypeKill <Reg:rax>  BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #13  @31  RefTypeKill <Reg:rcx>  BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #14  @31  RefTypeKill <Reg:rdx>  BB05 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #15  @31  RefTypeKill <Reg:r8 >  BB05 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #16  @31  RefTypeKill <Reg:r9 >  BB05 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #17  @31  RefTypeKill <Reg:r10>  BB05 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #18  @31  RefTypeKill <Reg:r11>  BB05 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #19  @31  RefTypeFixedReg <Reg:rax>  BB05 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #20  @31  RefTypeDef <Ivl:0> CALL BB05 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #21  @32  RefTypeUse <Ivl:0>  BB05 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #22  @37  RefTypeDef <Ivl:1> LCL_VAR BB05 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #23  @38  RefTypeUse <Ivl:1>  BB05 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #24  @43  RefTypeDef <Ivl:2> LCL_VAR_ADDR BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #25  @44  RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #26  @44  RefTypeUse <Ivl:2>  BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #27  @45  RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #28  @45  RefTypeDef <Ivl:3> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #29  @46  RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #30  @46  RefTypeUse <Ivl:3>  BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #31  @47  RefTypeKill <Reg:rax>  BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #32  @47  RefTypeKill <Reg:rcx>  BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #33  @47  RefTypeKill <Reg:rdx>  BB05 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #34  @47  RefTypeKill <Reg:r8 >  BB05 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #35  @47  RefTypeKill <Reg:r9 >  BB05 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #36  @47  RefTypeKill <Reg:r10>  BB05 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #37  @47  RefTypeKill <Reg:r11>  BB05 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #38  @47  RefTypeFixedReg <Reg:rax>  BB05 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #39  @47  RefTypeDef <Ivl:4> CALL BB05 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #40  @48  RefTypeUse <Ivl:4>  BB05 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #41  @53  RefTypeDef <Ivl:5> CNS_INT BB05 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #42  @54  RefTypeUse <Ivl:5>  BB05 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #43  @55  RefTypeDef <Ivl:6> IND BB05 regmask=[rdx] minReg=1 wt=400.00>
<RefPosition #44  @56  RefTypeFixedReg <Reg:rdx>  BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #45  @56  RefTypeUse <Ivl:6>  BB05 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #46  @57  RefTypeFixedReg <Reg:rdx>  BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #47  @57  RefTypeDef <Ivl:7> PUTARG_REG BB05 regmask=[rdx] minReg=1 fixed wt=400.00>
<RefPosition #48  @59  RefTypeDef <Ivl:8> LCL_VAR BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #49  @60  RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #50  @60  RefTypeUse <Ivl:8>  BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #51  @61  RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #52  @61  RefTypeDef <Ivl:9> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #53  @62  RefTypeFixedReg <Reg:rdx>  BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #54  @62  RefTypeUse <Ivl:7>  BB05 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #55  @62  RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #56  @62  RefTypeUse <Ivl:9>  BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #57  @63  RefTypeKill <Reg:rax>  BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #58  @63  RefTypeKill <Reg:rcx>  BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #59  @63  RefTypeKill <Reg:rdx>  BB05 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #60  @63  RefTypeKill <Reg:r8 >  BB05 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #61  @63  RefTypeKill <Reg:r9 >  BB05 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #62  @63  RefTypeKill <Reg:r10>  BB05 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #63  @63  RefTypeKill <Reg:r11>  BB05 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #64  @63  RefTypeFixedReg <Reg:rax>  BB05 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #65  @63  RefTypeDef <Ivl:10> CALL BB05 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #66  @64  RefTypeUse <Ivl:10>  BB05 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #67  @69  RefTypeDef <Ivl:11> LCL_VAR BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #68  @70  RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #69  @70  RefTypeUse <Ivl:11>  BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #70  @71  RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #71  @71  RefTypeDef <Ivl:12> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #72  @72  RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #73  @72  RefTypeUse <Ivl:12>  BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #74  @73  RefTypeKill <Reg:rax>  BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #75  @73  RefTypeKill <Reg:rcx>  BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #76  @73  RefTypeKill <Reg:rdx>  BB05 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #77  @73  RefTypeKill <Reg:r8 >  BB05 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #78  @73  RefTypeKill <Reg:r9 >  BB05 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #79  @73  RefTypeKill <Reg:r10>  BB05 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #80  @73  RefTypeKill <Reg:r11>  BB05 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #81  @81  RefTypeDef <Ivl:13> CNS_INT BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #82  @82  RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #83  @82  RefTypeUse <Ivl:13>  BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #84  @83  RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #85  @83  RefTypeDef <Ivl:14> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #86  @84  RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #87  @84  RefTypeUse <Ivl:14>  BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #88  @85  RefTypeKill <Reg:rax>  BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #89  @85  RefTypeKill <Reg:rcx>  BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #90  @85  RefTypeKill <Reg:rdx>  BB05 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #91  @85  RefTypeKill <Reg:r8 >  BB05 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #92  @85  RefTypeKill <Reg:r9 >  BB05 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #93  @85  RefTypeKill <Reg:r10>  BB05 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #94  @85  RefTypeKill <Reg:r11>  BB05 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #95  @85  RefTypeFixedReg <Reg:rax>  BB05 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #96  @85  RefTypeDef <Ivl:15> CALL BB05 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #97  @86  RefTypeUse <Ivl:15>  BB05 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #98  @89  RefTypeDef <Ivl:16> LCL_VAR BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #99  @90  RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #100 @90  RefTypeUse <Ivl:16>  BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #101 @91  RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #102 @91  RefTypeDef <Ivl:17> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #103 @92  RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #104 @92  RefTypeUse <Ivl:17>  BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #105 @93  RefTypeKill <Reg:rax>  BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #106 @93  RefTypeKill <Reg:rcx>  BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #107 @93  RefTypeKill <Reg:rdx>  BB05 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #108 @93  RefTypeKill <Reg:r8 >  BB05 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #109 @93  RefTypeKill <Reg:r9 >  BB05 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #110 @93  RefTypeKill <Reg:r10>  BB05 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #111 @93  RefTypeKill <Reg:r11>  BB05 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #112 @97  RefTypeDef <Ivl:18> LCL_VAR BB05 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #113 @98  RefTypeUse <Ivl:18>  BB05 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #114 @99  RefTypeDef <Ivl:19> LEA BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #115 @101 RefTypeDef <Ivl:20> LCL_VAR BB05 regmask=[rdx] minReg=1 wt=400.00>
<RefPosition #116 @102 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #117 @102 RefTypeUse <Ivl:19>  BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #118 @102 RefTypeFixedReg <Reg:rdx>  BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #119 @102 RefTypeUse <Ivl:20>  BB05 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #120 @103 RefTypeKill <Reg:rax>  BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #121 @103 RefTypeKill <Reg:rcx>  BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #122 @103 RefTypeKill <Reg:rdx>  BB05 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #123 @103 RefTypeKill <Reg:r8 >  BB05 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #124 @103 RefTypeKill <Reg:r9 >  BB05 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #125 @103 RefTypeKill <Reg:r10>  BB05 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #126 @103 RefTypeKill <Reg:r11>  BB05 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #127 @103 RefTypeKill <Reg:mm0>  BB05 regmask=[mm0] minReg=1 last wt=100.00>
<RefPosition #128 @103 RefTypeKill <Reg:mm1>  BB05 regmask=[mm1] minReg=1 last wt=100.00>
<RefPosition #129 @103 RefTypeKill <Reg:mm2>  BB05 regmask=[mm2] minReg=1 last wt=100.00>
<RefPosition #130 @103 RefTypeKill <Reg:mm3>  BB05 regmask=[mm3] minReg=1 last wt=100.00>
<RefPosition #131 @103 RefTypeKill <Reg:mm4>  BB05 regmask=[mm4] minReg=1 last wt=100.00>
<RefPosition #132 @103 RefTypeKill <Reg:mm5>  BB05 regmask=[mm5] minReg=1 last wt=100.00>
<RefPosition #133 @107 RefTypeDef <Ivl:21> CNS_INT BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #134 @108 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #135 @108 RefTypeUse <Ivl:21>  BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #136 @109 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #137 @109 RefTypeDef <Ivl:22> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #138 @110 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #139 @110 RefTypeUse <Ivl:22>  BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #140 @111 RefTypeKill <Reg:rax>  BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #141 @111 RefTypeKill <Reg:rcx>  BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #142 @111 RefTypeKill <Reg:rdx>  BB05 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #143 @111 RefTypeKill <Reg:r8 >  BB05 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #144 @111 RefTypeKill <Reg:r9 >  BB05 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #145 @111 RefTypeKill <Reg:r10>  BB05 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #146 @111 RefTypeKill <Reg:r11>  BB05 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #147 @111 RefTypeFixedReg <Reg:rax>  BB05 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #148 @111 RefTypeDef <Ivl:23> CALL BB05 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #149 @112 RefTypeUse <Ivl:23>  BB05 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #150 @115 RefTypeDef <Ivl:24> LCL_VAR BB05 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #151 @118 RefTypeUse <Ivl:24>  BB05 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #152 @119 RefTypeDef <Ivl:25> IND BB05 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #153 @122 RefTypeUse <Ivl:25>  BB05 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #154 @123 RefTypeDef <Ivl:26> IND BB05 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #155 @124 RefTypeUse <Ivl:26>  BB05 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #156 @127 RefTypeDef <Ivl:27> LCL_VAR BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #157 @128 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #158 @128 RefTypeUse <Ivl:27>  BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #159 @129 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #160 @129 RefTypeDef <Ivl:28> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #161 @130 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #162 @130 RefTypeUse <Ivl:28>  BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #163 @131 RefTypeKill <Reg:rax>  BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #164 @131 RefTypeKill <Reg:rcx>  BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #165 @131 RefTypeKill <Reg:rdx>  BB05 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #166 @131 RefTypeKill <Reg:r8 >  BB05 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #167 @131 RefTypeKill <Reg:r9 >  BB05 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #168 @131 RefTypeKill <Reg:r10>  BB05 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #169 @131 RefTypeKill <Reg:r11>  BB05 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #170 @135 RefTypeDef <Ivl:29> LCL_VAR BB05 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #171 @136 RefTypeUse <Ivl:29>  BB05 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #172 @137 RefTypeDef <Ivl:30> LEA BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #173 @139 RefTypeDef <Ivl:31> LCL_VAR BB05 regmask=[rdx] minReg=1 wt=400.00>
<RefPosition #174 @140 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #175 @140 RefTypeUse <Ivl:30>  BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #176 @140 RefTypeFixedReg <Reg:rdx>  BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #177 @140 RefTypeUse <Ivl:31>  BB05 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #178 @141 RefTypeKill <Reg:rax>  BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #179 @141 RefTypeKill <Reg:rcx>  BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #180 @141 RefTypeKill <Reg:rdx>  BB05 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #181 @141 RefTypeKill <Reg:r8 >  BB05 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #182 @141 RefTypeKill <Reg:r9 >  BB05 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #183 @141 RefTypeKill <Reg:r10>  BB05 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #184 @141 RefTypeKill <Reg:r11>  BB05 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #185 @141 RefTypeKill <Reg:mm0>  BB05 regmask=[mm0] minReg=1 last wt=100.00>
<RefPosition #186 @141 RefTypeKill <Reg:mm1>  BB05 regmask=[mm1] minReg=1 last wt=100.00>
<RefPosition #187 @141 RefTypeKill <Reg:mm2>  BB05 regmask=[mm2] minReg=1 last wt=100.00>
<RefPosition #188 @141 RefTypeKill <Reg:mm3>  BB05 regmask=[mm3] minReg=1 last wt=100.00>
<RefPosition #189 @141 RefTypeKill <Reg:mm4>  BB05 regmask=[mm4] minReg=1 last wt=100.00>
<RefPosition #190 @141 RefTypeKill <Reg:mm5>  BB05 regmask=[mm5] minReg=1 last wt=100.00>
<RefPosition #191 @145 RefTypeDef <Ivl:32> CNS_INT BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #192 @146 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #193 @146 RefTypeUse <Ivl:32>  BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #194 @147 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #195 @147 RefTypeDef <Ivl:33> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #196 @148 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #197 @148 RefTypeUse <Ivl:33>  BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #198 @149 RefTypeKill <Reg:rax>  BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #199 @149 RefTypeKill <Reg:rcx>  BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #200 @149 RefTypeKill <Reg:rdx>  BB05 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #201 @149 RefTypeKill <Reg:r8 >  BB05 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #202 @149 RefTypeKill <Reg:r9 >  BB05 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #203 @149 RefTypeKill <Reg:r10>  BB05 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #204 @149 RefTypeKill <Reg:r11>  BB05 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #205 @149 RefTypeFixedReg <Reg:rax>  BB05 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #206 @149 RefTypeDef <Ivl:34> CALL BB05 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #207 @150 RefTypeUse <Ivl:34>  BB05 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #208 @153 RefTypeDef <Ivl:35> LCL_VAR BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #209 @154 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #210 @154 RefTypeUse <Ivl:35>  BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #211 @155 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #212 @155 RefTypeDef <Ivl:36> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #213 @157 RefTypeDef <Ivl:37> LCL_VAR BB05 regmask=[rdx] minReg=1 wt=400.00>
<RefPosition #214 @158 RefTypeFixedReg <Reg:rdx>  BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #215 @158 RefTypeUse <Ivl:37>  BB05 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #216 @159 RefTypeFixedReg <Reg:rdx>  BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #217 @159 RefTypeDef <Ivl:38> PUTARG_REG BB05 regmask=[rdx] minReg=1 fixed wt=400.00>
<RefPosition #218 @161 RefTypeDef <Ivl:39> CNS_INT BB05 regmask=[r8] minReg=1 wt=400.00>
<RefPosition #219 @162 RefTypeFixedReg <Reg:r8 >  BB05 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #220 @162 RefTypeUse <Ivl:39>  BB05 regmask=[r8] minReg=1 last fixed wt=100.00>
<RefPosition #221 @163 RefTypeFixedReg <Reg:r8 >  BB05 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #222 @163 RefTypeDef <Ivl:40> PUTARG_REG BB05 regmask=[r8] minReg=1 fixed wt=400.00>
<RefPosition #223 @164 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #224 @164 RefTypeUse <Ivl:36>  BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #225 @164 RefTypeFixedReg <Reg:rdx>  BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #226 @164 RefTypeUse <Ivl:38>  BB05 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #227 @164 RefTypeFixedReg <Reg:r8 >  BB05 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #228 @164 RefTypeUse <Ivl:40>  BB05 regmask=[r8] minReg=1 last fixed wt=100.00>
<RefPosition #229 @165 RefTypeKill <Reg:rax>  BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #230 @165 RefTypeKill <Reg:rcx>  BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #231 @165 RefTypeKill <Reg:rdx>  BB05 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #232 @165 RefTypeKill <Reg:r8 >  BB05 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #233 @165 RefTypeKill <Reg:r9 >  BB05 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #234 @165 RefTypeKill <Reg:r10>  BB05 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #235 @165 RefTypeKill <Reg:r11>  BB05 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #236 @169 RefTypeDef <Ivl:41> CNS_INT BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #237 @170 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #238 @170 RefTypeUse <Ivl:41>  BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #239 @171 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #240 @171 RefTypeDef <Ivl:42> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #241 @172 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #242 @172 RefTypeUse <Ivl:42>  BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #243 @173 RefTypeKill <Reg:rax>  BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #244 @173 RefTypeKill <Reg:rcx>  BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #245 @173 RefTypeKill <Reg:rdx>  BB05 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #246 @173 RefTypeKill <Reg:r8 >  BB05 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #247 @173 RefTypeKill <Reg:r9 >  BB05 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #248 @173 RefTypeKill <Reg:r10>  BB05 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #249 @173 RefTypeKill <Reg:r11>  BB05 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #250 @173 RefTypeFixedReg <Reg:rax>  BB05 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #251 @173 RefTypeDef <Ivl:43> CALL BB05 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #252 @174 RefTypeUse <Ivl:43>  BB05 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #253 @177 RefTypeDef <Ivl:44> LCL_VAR BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #254 @178 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #255 @178 RefTypeUse <Ivl:44>  BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #256 @179 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #257 @179 RefTypeDef <Ivl:45> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #258 @181 RefTypeDef <Ivl:46> LCL_VAR BB05 regmask=[rdx] minReg=1 wt=400.00>
<RefPosition #259 @182 RefTypeFixedReg <Reg:rdx>  BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #260 @182 RefTypeUse <Ivl:46>  BB05 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #261 @183 RefTypeFixedReg <Reg:rdx>  BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #262 @183 RefTypeDef <Ivl:47> PUTARG_REG BB05 regmask=[rdx] minReg=1 fixed wt=400.00>
<RefPosition #263 @184 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #264 @184 RefTypeUse <Ivl:45>  BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #265 @184 RefTypeFixedReg <Reg:rdx>  BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #266 @184 RefTypeUse <Ivl:47>  BB05 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #267 @185 RefTypeKill <Reg:rax>  BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #268 @185 RefTypeKill <Reg:rcx>  BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #269 @185 RefTypeKill <Reg:rdx>  BB05 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #270 @185 RefTypeKill <Reg:r8 >  BB05 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #271 @185 RefTypeKill <Reg:r9 >  BB05 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #272 @185 RefTypeKill <Reg:r10>  BB05 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #273 @185 RefTypeKill <Reg:r11>  BB05 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #274 @189 RefTypeDef <Ivl:48> LCL_VAR BB05 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #275 @190 RefTypeUse <Ivl:48>  BB05 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #276 @195 RefTypeDef <Ivl:49> LCL_VAR BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #277 @196 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #278 @196 RefTypeUse <Ivl:49>  BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #279 @197 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #280 @197 RefTypeDef <Ivl:50> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #281 @198 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #282 @198 RefTypeUse <Ivl:50>  BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #283 @199 RefTypeKill <Reg:rax>  BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #284 @199 RefTypeKill <Reg:rcx>  BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #285 @199 RefTypeKill <Reg:rdx>  BB05 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #286 @199 RefTypeKill <Reg:r8 >  BB05 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #287 @199 RefTypeKill <Reg:r9 >  BB05 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #288 @199 RefTypeKill <Reg:r10>  BB05 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #289 @199 RefTypeKill <Reg:r11>  BB05 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #290 @207 RefTypeKill <Reg:rax>  BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #291 @207 RefTypeKill <Reg:rcx>  BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #292 @207 RefTypeKill <Reg:rdx>  BB05 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #293 @207 RefTypeKill <Reg:r8 >  BB05 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #294 @207 RefTypeKill <Reg:r9 >  BB05 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #295 @207 RefTypeKill <Reg:r10>  BB05 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #296 @207 RefTypeKill <Reg:r11>  BB05 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #297 @207 RefTypeFixedReg <Reg:rax>  BB05 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #298 @207 RefTypeDef <Ivl:51> CALL BB05 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #299 @208 RefTypeUse <Ivl:51>  BB05 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #300 @213 RefTypeDef <Ivl:52> LCL_VAR BB05 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #301 @214 RefTypeUse <Ivl:52>  BB05 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #302 @219 RefTypeDef <Ivl:53> LCL_VAR_ADDR BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #303 @220 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #304 @220 RefTypeUse <Ivl:53>  BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #305 @221 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #306 @221 RefTypeDef <Ivl:54> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #307 @222 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #308 @222 RefTypeUse <Ivl:54>  BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #309 @223 RefTypeKill <Reg:rax>  BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #310 @223 RefTypeKill <Reg:rcx>  BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #311 @223 RefTypeKill <Reg:rdx>  BB05 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #312 @223 RefTypeKill <Reg:r8 >  BB05 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #313 @223 RefTypeKill <Reg:r9 >  BB05 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #314 @223 RefTypeKill <Reg:r10>  BB05 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #315 @223 RefTypeKill <Reg:r11>  BB05 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #316 @223 RefTypeFixedReg <Reg:rax>  BB05 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #317 @223 RefTypeDef <Ivl:55> CALL BB05 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #318 @224 RefTypeUse <Ivl:55>  BB05 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #319 @229 RefTypeDef <Ivl:56> CNS_INT BB05 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #320 @230 RefTypeUse <Ivl:56>  BB05 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #321 @231 RefTypeDef <Ivl:57> IND BB05 regmask=[rdx] minReg=1 wt=400.00>
<RefPosition #322 @232 RefTypeFixedReg <Reg:rdx>  BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #323 @232 RefTypeUse <Ivl:57>  BB05 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #324 @233 RefTypeFixedReg <Reg:rdx>  BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #325 @233 RefTypeDef <Ivl:58> PUTARG_REG BB05 regmask=[rdx] minReg=1 fixed wt=400.00>
<RefPosition #326 @235 RefTypeDef <Ivl:59> LCL_VAR BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #327 @236 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #328 @236 RefTypeUse <Ivl:59>  BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #329 @237 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #330 @237 RefTypeDef <Ivl:60> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #331 @238 RefTypeFixedReg <Reg:rdx>  BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #332 @238 RefTypeUse <Ivl:58>  BB05 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #333 @238 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #334 @238 RefTypeUse <Ivl:60>  BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #335 @239 RefTypeKill <Reg:rax>  BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #336 @239 RefTypeKill <Reg:rcx>  BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #337 @239 RefTypeKill <Reg:rdx>  BB05 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #338 @239 RefTypeKill <Reg:r8 >  BB05 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #339 @239 RefTypeKill <Reg:r9 >  BB05 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #340 @239 RefTypeKill <Reg:r10>  BB05 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #341 @239 RefTypeKill <Reg:r11>  BB05 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #342 @239 RefTypeFixedReg <Reg:rax>  BB05 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #343 @239 RefTypeDef <Ivl:61> CALL BB05 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #344 @240 RefTypeUse <Ivl:61>  BB05 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #345 @245 RefTypeDef <Ivl:62> LCL_VAR BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #346 @246 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #347 @246 RefTypeUse <Ivl:62>  BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #348 @247 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #349 @247 RefTypeDef <Ivl:63> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #350 @248 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #351 @248 RefTypeUse <Ivl:63>  BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #352 @249 RefTypeKill <Reg:rax>  BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #353 @249 RefTypeKill <Reg:rcx>  BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #354 @249 RefTypeKill <Reg:rdx>  BB05 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #355 @249 RefTypeKill <Reg:r8 >  BB05 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #356 @249 RefTypeKill <Reg:r9 >  BB05 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #357 @249 RefTypeKill <Reg:r10>  BB05 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #358 @249 RefTypeKill <Reg:r11>  BB05 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #359 @257 RefTypeDef <Ivl:64> CNS_INT BB05 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #360 @258 RefTypeUse <Ivl:64>  BB05 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #361 @264 RefTypeBB  BB14 regmask=[] minReg=1 wt=100.00>
<RefPosition #362 @273 RefTypeDef <Ivl:65> LT BB14 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #363 @274 RefTypeUse <Ivl:65>  BB14 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #364 @286 RefTypeBB  BB06 regmask=[] minReg=1 wt=100.00>
<RefPosition #365 @295 RefTypeDef <Ivl:66> LCL_VAR BB06 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #366 @298 RefTypeUse <Ivl:66>  BB06 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #367 @299 RefTypeDef <Ivl:67> IND BB06 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #368 @300 RefTypeUse <Ivl:67>  BB06 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #369 @305 RefTypeDef <Ivl:68> CNS_INT BB06 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #370 @306 RefTypeUse <Ivl:68>  BB06 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #371 @308 RefTypeBB  BB07 regmask=[] minReg=1 wt=100.00>
<RefPosition #372 @313 RefTypeDef <Ivl:69> LCL_VAR_ADDR BB07 regmask=[rdx] minReg=1 wt=400.00>
<RefPosition #373 @314 RefTypeFixedReg <Reg:rdx>  BB07 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #374 @314 RefTypeUse <Ivl:69>  BB07 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #375 @315 RefTypeFixedReg <Reg:rdx>  BB07 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #376 @315 RefTypeDef <Ivl:70> PUTARG_REG BB07 regmask=[rdx] minReg=1 fixed wt=400.00>
<RefPosition #377 @317 RefTypeDef <Ivl:71> LCL_VAR BB07 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #378 @318 RefTypeFixedReg <Reg:rcx>  BB07 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #379 @318 RefTypeUse <Ivl:71>  BB07 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #380 @319 RefTypeFixedReg <Reg:rcx>  BB07 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #381 @319 RefTypeDef <Ivl:72> PUTARG_REG BB07 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #382 @320 RefTypeFixedReg <Reg:rdx>  BB07 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #383 @320 RefTypeUse <Ivl:70>  BB07 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #384 @320 RefTypeFixedReg <Reg:rcx>  BB07 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #385 @320 RefTypeUse <Ivl:72>  BB07 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #386 @321 RefTypeKill <Reg:rax>  BB07 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #387 @321 RefTypeKill <Reg:rcx>  BB07 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #388 @321 RefTypeKill <Reg:rdx>  BB07 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #389 @321 RefTypeKill <Reg:r8 >  BB07 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #390 @321 RefTypeKill <Reg:r9 >  BB07 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #391 @321 RefTypeKill <Reg:r10>  BB07 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #392 @321 RefTypeKill <Reg:r11>  BB07 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #393 @333 RefTypeDef <Ivl:73> CNS_INT BB07 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #394 @334 RefTypeFixedReg <Reg:rcx>  BB07 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #395 @334 RefTypeUse <Ivl:73>  BB07 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #396 @335 RefTypeFixedReg <Reg:rcx>  BB07 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #397 @335 RefTypeDef <Ivl:74> PUTARG_REG BB07 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #398 @336 RefTypeFixedReg <Reg:rcx>  BB07 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #399 @336 RefTypeUse <Ivl:74>  BB07 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #400 @337 RefTypeKill <Reg:rax>  BB07 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #401 @337 RefTypeKill <Reg:rcx>  BB07 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #402 @337 RefTypeKill <Reg:rdx>  BB07 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #403 @337 RefTypeKill <Reg:r8 >  BB07 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #404 @337 RefTypeKill <Reg:r9 >  BB07 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #405 @337 RefTypeKill <Reg:r10>  BB07 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #406 @337 RefTypeKill <Reg:r11>  BB07 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #407 @337 RefTypeFixedReg <Reg:rax>  BB07 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #408 @337 RefTypeDef <Ivl:75> CALL BB07 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #409 @338 RefTypeUse <Ivl:75>  BB07 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #410 @341 RefTypeDef <Ivl:76> LCL_VAR BB07 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #411 @344 RefTypeUse <Ivl:76>  BB07 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #412 @345 RefTypeDef <Ivl:77> IND BB07 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #413 @348 RefTypeUse <Ivl:77>  BB07 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #414 @349 RefTypeDef <Ivl:78> IND BB07 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #415 @350 RefTypeUse <Ivl:78>  BB07 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #416 @353 RefTypeDef <Ivl:79> LCL_VAR BB07 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #417 @354 RefTypeFixedReg <Reg:rcx>  BB07 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #418 @354 RefTypeUse <Ivl:79>  BB07 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #419 @355 RefTypeFixedReg <Reg:rcx>  BB07 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #420 @355 RefTypeDef <Ivl:80> PUTARG_REG BB07 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #421 @356 RefTypeFixedReg <Reg:rcx>  BB07 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #422 @356 RefTypeUse <Ivl:80>  BB07 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #423 @357 RefTypeKill <Reg:rax>  BB07 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #424 @357 RefTypeKill <Reg:rcx>  BB07 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #425 @357 RefTypeKill <Reg:rdx>  BB07 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #426 @357 RefTypeKill <Reg:r8 >  BB07 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #427 @357 RefTypeKill <Reg:r9 >  BB07 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #428 @357 RefTypeKill <Reg:r10>  BB07 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #429 @357 RefTypeKill <Reg:r11>  BB07 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #430 @361 RefTypeDef <Ivl:81> LCL_VAR BB07 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #431 @362 RefTypeUse <Ivl:81>  BB07 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #432 @363 RefTypeDef <Ivl:82> LEA BB07 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #433 @365 RefTypeDef <Ivl:83> LCL_VAR BB07 regmask=[rdx] minReg=1 wt=400.00>
<RefPosition #434 @366 RefTypeFixedReg <Reg:rcx>  BB07 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #435 @366 RefTypeUse <Ivl:82>  BB07 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #436 @366 RefTypeFixedReg <Reg:rdx>  BB07 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #437 @366 RefTypeUse <Ivl:83>  BB07 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #438 @367 RefTypeKill <Reg:rax>  BB07 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #439 @367 RefTypeKill <Reg:rcx>  BB07 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #440 @367 RefTypeKill <Reg:rdx>  BB07 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #441 @367 RefTypeKill <Reg:r8 >  BB07 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #442 @367 RefTypeKill <Reg:r9 >  BB07 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #443 @367 RefTypeKill <Reg:r10>  BB07 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #444 @367 RefTypeKill <Reg:r11>  BB07 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #445 @367 RefTypeKill <Reg:mm0>  BB07 regmask=[mm0] minReg=1 last wt=100.00>
<RefPosition #446 @367 RefTypeKill <Reg:mm1>  BB07 regmask=[mm1] minReg=1 last wt=100.00>
<RefPosition #447 @367 RefTypeKill <Reg:mm2>  BB07 regmask=[mm2] minReg=1 last wt=100.00>
<RefPosition #448 @367 RefTypeKill <Reg:mm3>  BB07 regmask=[mm3] minReg=1 last wt=100.00>
<RefPosition #449 @367 RefTypeKill <Reg:mm4>  BB07 regmask=[mm4] minReg=1 last wt=100.00>
<RefPosition #450 @367 RefTypeKill <Reg:mm5>  BB07 regmask=[mm5] minReg=1 last wt=100.00>
<RefPosition #451 @371 RefTypeDef <Ivl:84> LCL_VAR BB07 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #452 @374 RefTypeUse <Ivl:84>  BB07 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #453 @375 RefTypeDef <Ivl:85> IND BB07 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #454 @376 RefTypeUse <Ivl:85>  BB07 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #455 @377 RefTypeDef <Ivl:86> LEA BB07 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #456 @379 RefTypeDef <Ivl:87> LCL_VAR BB07 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #457 @382 RefTypeUse <Ivl:87>  BB07 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #458 @383 RefTypeDef <Ivl:88> IND BB07 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #459 @386 RefTypeUse <Ivl:88>  BB07 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #460 @387 RefTypeDef <Ivl:89> IND BB07 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #461 @390 RefTypeUse <Ivl:89>  BB07 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #462 @391 RefTypeDef <Ivl:90> IND BB07 regmask=[rdx] minReg=1 wt=400.00>
<RefPosition #463 @392 RefTypeFixedReg <Reg:rcx>  BB07 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #464 @392 RefTypeUse <Ivl:86>  BB07 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #465 @392 RefTypeFixedReg <Reg:rdx>  BB07 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #466 @392 RefTypeUse <Ivl:90>  BB07 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #467 @393 RefTypeKill <Reg:rax>  BB07 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #468 @393 RefTypeKill <Reg:rcx>  BB07 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #469 @393 RefTypeKill <Reg:rdx>  BB07 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #470 @393 RefTypeKill <Reg:r8 >  BB07 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #471 @393 RefTypeKill <Reg:r9 >  BB07 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #472 @393 RefTypeKill <Reg:r10>  BB07 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #473 @393 RefTypeKill <Reg:r11>  BB07 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #474 @393 RefTypeKill <Reg:mm0>  BB07 regmask=[mm0] minReg=1 last wt=100.00>
<RefPosition #475 @393 RefTypeKill <Reg:mm1>  BB07 regmask=[mm1] minReg=1 last wt=100.00>
<RefPosition #476 @393 RefTypeKill <Reg:mm2>  BB07 regmask=[mm2] minReg=1 last wt=100.00>
<RefPosition #477 @393 RefTypeKill <Reg:mm3>  BB07 regmask=[mm3] minReg=1 last wt=100.00>
<RefPosition #478 @393 RefTypeKill <Reg:mm4>  BB07 regmask=[mm4] minReg=1 last wt=100.00>
<RefPosition #479 @393 RefTypeKill <Reg:mm5>  BB07 regmask=[mm5] minReg=1 last wt=100.00>
<RefPosition #480 @397 RefTypeDef <Ivl:91> CNS_INT BB07 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #481 @398 RefTypeFixedReg <Reg:rcx>  BB07 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #482 @398 RefTypeUse <Ivl:91>  BB07 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #483 @399 RefTypeFixedReg <Reg:rcx>  BB07 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #484 @399 RefTypeDef <Ivl:92> PUTARG_REG BB07 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #485 @400 RefTypeFixedReg <Reg:rcx>  BB07 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #486 @400 RefTypeUse <Ivl:92>  BB07 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #487 @401 RefTypeKill <Reg:rax>  BB07 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #488 @401 RefTypeKill <Reg:rcx>  BB07 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #489 @401 RefTypeKill <Reg:rdx>  BB07 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #490 @401 RefTypeKill <Reg:r8 >  BB07 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #491 @401 RefTypeKill <Reg:r9 >  BB07 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #492 @401 RefTypeKill <Reg:r10>  BB07 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #493 @401 RefTypeKill <Reg:r11>  BB07 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #494 @401 RefTypeFixedReg <Reg:rax>  BB07 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #495 @401 RefTypeDef <Ivl:93> CALL BB07 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #496 @402 RefTypeUse <Ivl:93>  BB07 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #497 @405 RefTypeDef <Ivl:94> LCL_VAR BB07 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #498 @408 RefTypeUse <Ivl:94>  BB07 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #499 @409 RefTypeDef <Ivl:95> IND BB07 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #500 @412 RefTypeUse <Ivl:95>  BB07 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #501 @413 RefTypeDef <Ivl:96> IND BB07 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #502 @414 RefTypeUse <Ivl:96>  BB07 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #503 @417 RefTypeDef <Ivl:97> LCL_VAR BB07 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #504 @418 RefTypeFixedReg <Reg:rcx>  BB07 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #505 @418 RefTypeUse <Ivl:97>  BB07 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #506 @419 RefTypeFixedReg <Reg:rcx>  BB07 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #507 @419 RefTypeDef <Ivl:98> PUTARG_REG BB07 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #508 @420 RefTypeFixedReg <Reg:rcx>  BB07 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #509 @420 RefTypeUse <Ivl:98>  BB07 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #510 @421 RefTypeKill <Reg:rax>  BB07 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #511 @421 RefTypeKill <Reg:rcx>  BB07 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #512 @421 RefTypeKill <Reg:rdx>  BB07 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #513 @421 RefTypeKill <Reg:r8 >  BB07 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #514 @421 RefTypeKill <Reg:r9 >  BB07 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #515 @421 RefTypeKill <Reg:r10>  BB07 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #516 @421 RefTypeKill <Reg:r11>  BB07 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #517 @425 RefTypeDef <Ivl:99> LCL_VAR BB07 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #518 @426 RefTypeUse <Ivl:99>  BB07 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #519 @427 RefTypeDef <Ivl:100> LEA BB07 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #520 @429 RefTypeDef <Ivl:101> LCL_VAR BB07 regmask=[rdx] minReg=1 wt=400.00>
<RefPosition #521 @430 RefTypeFixedReg <Reg:rcx>  BB07 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #522 @430 RefTypeUse <Ivl:100>  BB07 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #523 @430 RefTypeFixedReg <Reg:rdx>  BB07 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #524 @430 RefTypeUse <Ivl:101>  BB07 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #525 @431 RefTypeKill <Reg:rax>  BB07 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #526 @431 RefTypeKill <Reg:rcx>  BB07 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #527 @431 RefTypeKill <Reg:rdx>  BB07 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #528 @431 RefTypeKill <Reg:r8 >  BB07 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #529 @431 RefTypeKill <Reg:r9 >  BB07 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #530 @431 RefTypeKill <Reg:r10>  BB07 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #531 @431 RefTypeKill <Reg:r11>  BB07 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #532 @431 RefTypeKill <Reg:mm0>  BB07 regmask=[mm0] minReg=1 last wt=100.00>
<RefPosition #533 @431 RefTypeKill <Reg:mm1>  BB07 regmask=[mm1] minReg=1 last wt=100.00>
<RefPosition #534 @431 RefTypeKill <Reg:mm2>  BB07 regmask=[mm2] minReg=1 last wt=100.00>
<RefPosition #535 @431 RefTypeKill <Reg:mm3>  BB07 regmask=[mm3] minReg=1 last wt=100.00>
<RefPosition #536 @431 RefTypeKill <Reg:mm4>  BB07 regmask=[mm4] minReg=1 last wt=100.00>
<RefPosition #537 @431 RefTypeKill <Reg:mm5>  BB07 regmask=[mm5] minReg=1 last wt=100.00>
<RefPosition #538 @440 RefTypeBB  BB08 regmask=[] minReg=1 wt=100.00>
<RefPosition #539 @442 RefTypeBB  BB10 regmask=[] minReg=1 wt=100.00>
<RefPosition #540 @447 RefTypeDef <Ivl:102> LCL_VAR BB10 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #541 @448 RefTypeUse <Ivl:102>  BB10 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #542 @449 RefTypeDef <Ivl:103> CAST BB10 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #543 @452 RefTypeUse <Ivl:103>  BB10 regmask=[allIntButFP] minReg=1 last regOptional wt=100.00>
<RefPosition #544 @456 RefTypeBB  BB11 regmask=[] minReg=1 wt=100.00>
<RefPosition #545 @461 RefTypeDef <Ivl:104> LCL_VAR BB11 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #546 @462 RefTypeFixedReg <Reg:rcx>  BB11 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #547 @462 RefTypeUse <Ivl:104>  BB11 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #548 @463 RefTypeFixedReg <Reg:rcx>  BB11 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #549 @463 RefTypeDef <Ivl:105> PUTARG_REG BB11 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #550 @464 RefTypeFixedReg <Reg:rcx>  BB11 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #551 @464 RefTypeUse <Ivl:105>  BB11 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #552 @465 RefTypeKill <Reg:rax>  BB11 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #553 @465 RefTypeKill <Reg:rcx>  BB11 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #554 @465 RefTypeKill <Reg:rdx>  BB11 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #555 @465 RefTypeKill <Reg:r8 >  BB11 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #556 @465 RefTypeKill <Reg:r9 >  BB11 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #557 @465 RefTypeKill <Reg:r10>  BB11 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #558 @465 RefTypeKill <Reg:r11>  BB11 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #559 @470 RefTypeBB  BB12 regmask=[] minReg=1 wt=100.00>
<RefPosition #560 @476 RefTypeBB  BB09 regmask=[] minReg=1 wt=100.00>
<RefPosition #561 @478 RefTypeBB  BB13 regmask=[] minReg=1 wt=100.00>
<RefPosition #562 @487 RefTypeDef <Ivl:106> LCL_VAR BB13 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #563 @490 RefTypeUse <Ivl:106>  BB13 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #564 @491 RefTypeDef <Ivl:107> ADD BB13 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #565 @492 RefTypeUse <Ivl:107>  BB13 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #566 @494 RefTypeBB  BB15 regmask=[] minReg=1 wt=100.00>
<RefPosition #567 @499 RefTypeKill <Reg:rax>  BB15 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #568 @499 RefTypeKill <Reg:rcx>  BB15 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #569 @499 RefTypeKill <Reg:rdx>  BB15 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #570 @499 RefTypeKill <Reg:r8 >  BB15 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #571 @499 RefTypeKill <Reg:r9 >  BB15 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #572 @499 RefTypeKill <Reg:r10>  BB15 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #573 @499 RefTypeKill <Reg:r11>  BB15 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #574 @499 RefTypeFixedReg <Reg:rax>  BB15 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #575 @499 RefTypeDef <Ivl:108> CALL BB15 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #576 @500 RefTypeUse <Ivl:108>  BB15 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #577 @505 RefTypeDef <Ivl:109> LCL_VAR BB15 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #578 @506 RefTypeUse <Ivl:109>  BB15 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #579 @511 RefTypeDef <Ivl:110> LCL_VAR_ADDR BB15 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #580 @512 RefTypeFixedReg <Reg:rcx>  BB15 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #581 @512 RefTypeUse <Ivl:110>  BB15 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #582 @513 RefTypeFixedReg <Reg:rcx>  BB15 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #583 @513 RefTypeDef <Ivl:111> PUTARG_REG BB15 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #584 @514 RefTypeFixedReg <Reg:rcx>  BB15 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #585 @514 RefTypeUse <Ivl:111>  BB15 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #586 @515 RefTypeKill <Reg:rax>  BB15 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #587 @515 RefTypeKill <Reg:rcx>  BB15 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #588 @515 RefTypeKill <Reg:rdx>  BB15 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #589 @515 RefTypeKill <Reg:r8 >  BB15 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #590 @515 RefTypeKill <Reg:r9 >  BB15 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #591 @515 RefTypeKill <Reg:r10>  BB15 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #592 @515 RefTypeKill <Reg:r11>  BB15 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #593 @515 RefTypeFixedReg <Reg:rax>  BB15 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #594 @515 RefTypeDef <Ivl:112> CALL BB15 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #595 @516 RefTypeUse <Ivl:112>  BB15 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #596 @521 RefTypeDef <Ivl:113> CNS_INT BB15 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #597 @522 RefTypeUse <Ivl:113>  BB15 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #598 @523 RefTypeDef <Ivl:114> IND BB15 regmask=[rdx] minReg=1 wt=400.00>
<RefPosition #599 @524 RefTypeFixedReg <Reg:rdx>  BB15 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #600 @524 RefTypeUse <Ivl:114>  BB15 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #601 @525 RefTypeFixedReg <Reg:rdx>  BB15 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #602 @525 RefTypeDef <Ivl:115> PUTARG_REG BB15 regmask=[rdx] minReg=1 fixed wt=400.00>
<RefPosition #603 @527 RefTypeDef <Ivl:116> LCL_VAR BB15 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #604 @528 RefTypeFixedReg <Reg:rcx>  BB15 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #605 @528 RefTypeUse <Ivl:116>  BB15 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #606 @529 RefTypeFixedReg <Reg:rcx>  BB15 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #607 @529 RefTypeDef <Ivl:117> PUTARG_REG BB15 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #608 @530 RefTypeFixedReg <Reg:rdx>  BB15 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #609 @530 RefTypeUse <Ivl:115>  BB15 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #610 @530 RefTypeFixedReg <Reg:rcx>  BB15 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #611 @530 RefTypeUse <Ivl:117>  BB15 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #612 @531 RefTypeKill <Reg:rax>  BB15 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #613 @531 RefTypeKill <Reg:rcx>  BB15 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #614 @531 RefTypeKill <Reg:rdx>  BB15 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #615 @531 RefTypeKill <Reg:r8 >  BB15 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #616 @531 RefTypeKill <Reg:r9 >  BB15 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #617 @531 RefTypeKill <Reg:r10>  BB15 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #618 @531 RefTypeKill <Reg:r11>  BB15 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #619 @531 RefTypeFixedReg <Reg:rax>  BB15 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #620 @531 RefTypeDef <Ivl:118> CALL BB15 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #621 @532 RefTypeUse <Ivl:118>  BB15 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #622 @537 RefTypeDef <Ivl:119> LCL_VAR BB15 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #623 @538 RefTypeFixedReg <Reg:rcx>  BB15 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #624 @538 RefTypeUse <Ivl:119>  BB15 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #625 @539 RefTypeFixedReg <Reg:rcx>  BB15 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #626 @539 RefTypeDef <Ivl:120> PUTARG_REG BB15 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #627 @540 RefTypeFixedReg <Reg:rcx>  BB15 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #628 @540 RefTypeUse <Ivl:120>  BB15 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #629 @541 RefTypeKill <Reg:rax>  BB15 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #630 @541 RefTypeKill <Reg:rcx>  BB15 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #631 @541 RefTypeKill <Reg:rdx>  BB15 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #632 @541 RefTypeKill <Reg:r8 >  BB15 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #633 @541 RefTypeKill <Reg:r9 >  BB15 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #634 @541 RefTypeKill <Reg:r10>  BB15 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #635 @541 RefTypeKill <Reg:r11>  BB15 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #636 @550 RefTypeBB  BB28 regmask=[] minReg=1 wt=100.00>
<RefPosition #637 @562 RefTypeBB  BB16 regmask=[] minReg=1 wt=100.00>
<RefPosition #638 @571 RefTypeDef <Ivl:121> LCL_VAR BB16 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #639 @574 RefTypeUse <Ivl:121>  BB16 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #640 @575 RefTypeDef <Ivl:122> IND BB16 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #641 @576 RefTypeUse <Ivl:122>  BB16 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #642 @581 RefTypeDef <Ivl:123> CNS_INT BB16 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #643 @582 RefTypeUse <Ivl:123>  BB16 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #644 @584 RefTypeBB  BB17 regmask=[] minReg=1 wt=100.00>
<RefPosition #645 @589 RefTypeDef <Ivl:124> LCL_VAR_ADDR BB17 regmask=[rdx] minReg=1 wt=400.00>
<RefPosition #646 @590 RefTypeFixedReg <Reg:rdx>  BB17 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #647 @590 RefTypeUse <Ivl:124>  BB17 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #648 @591 RefTypeFixedReg <Reg:rdx>  BB17 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #649 @591 RefTypeDef <Ivl:125> PUTARG_REG BB17 regmask=[rdx] minReg=1 fixed wt=400.00>
<RefPosition #650 @593 RefTypeDef <Ivl:126> LCL_VAR BB17 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #651 @594 RefTypeFixedReg <Reg:rcx>  BB17 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #652 @594 RefTypeUse <Ivl:126>  BB17 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #653 @595 RefTypeFixedReg <Reg:rcx>  BB17 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #654 @595 RefTypeDef <Ivl:127> PUTARG_REG BB17 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #655 @596 RefTypeFixedReg <Reg:rdx>  BB17 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #656 @596 RefTypeUse <Ivl:125>  BB17 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #657 @596 RefTypeFixedReg <Reg:rcx>  BB17 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #658 @596 RefTypeUse <Ivl:127>  BB17 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #659 @597 RefTypeKill <Reg:rax>  BB17 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #660 @597 RefTypeKill <Reg:rcx>  BB17 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #661 @597 RefTypeKill <Reg:rdx>  BB17 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #662 @597 RefTypeKill <Reg:r8 >  BB17 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #663 @597 RefTypeKill <Reg:r9 >  BB17 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #664 @597 RefTypeKill <Reg:r10>  BB17 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #665 @597 RefTypeKill <Reg:r11>  BB17 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #666 @609 RefTypeDef <Ivl:128> LCL_VAR BB17 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #667 @612 RefTypeUse <Ivl:128>  BB17 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #668 @613 RefTypeDef <Ivl:129> IND BB17 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #669 @616 RefTypeUse <Ivl:129>  BB17 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #670 @617 RefTypeDef <Ivl:130> IND BB17 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #671 @619 RefTypeDef <Ivl:131> LCL_VAR BB17 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #672 @622 RefTypeUse <Ivl:131>  BB17 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #673 @623 RefTypeDef <Ivl:132> IND BB17 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #674 @628 RefTypeUse <Ivl:130>  BB17 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #675 @628 RefTypeUse <Ivl:132>  BB17 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #676 @629 RefTypeDef <Ivl:133> EQ BB17 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #677 @630 RefTypeUse <Ivl:133>  BB17 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #678 @642 RefTypeBB  BB18 regmask=[] minReg=1 wt=100.00>
<RefPosition #679 @652 RefTypeBB  BB19 regmask=[] minReg=1 wt=100.00>
<RefPosition #680 @662 RefTypeBB  BB20 regmask=[] minReg=1 wt=100.00>
<RefPosition #681 @664 RefTypeBB  BB22 regmask=[] minReg=1 wt=100.00>
<RefPosition #682 @666 RefTypeBB  BB24 regmask=[] minReg=1 wt=100.00>
<RefPosition #683 @671 RefTypeDef <Ivl:134> LCL_VAR BB24 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #684 @672 RefTypeUse <Ivl:134>  BB24 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #685 @673 RefTypeDef <Ivl:135> CAST BB24 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #686 @676 RefTypeUse <Ivl:135>  BB24 regmask=[allIntButFP] minReg=1 last regOptional wt=100.00>
<RefPosition #687 @680 RefTypeBB  BB25 regmask=[] minReg=1 wt=100.00>
<RefPosition #688 @685 RefTypeDef <Ivl:136> LCL_VAR BB25 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #689 @686 RefTypeFixedReg <Reg:rcx>  BB25 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #690 @686 RefTypeUse <Ivl:136>  BB25 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #691 @687 RefTypeFixedReg <Reg:rcx>  BB25 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #692 @687 RefTypeDef <Ivl:137> PUTARG_REG BB25 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #693 @688 RefTypeFixedReg <Reg:rcx>  BB25 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #694 @688 RefTypeUse <Ivl:137>  BB25 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #695 @689 RefTypeKill <Reg:rax>  BB25 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #696 @689 RefTypeKill <Reg:rcx>  BB25 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #697 @689 RefTypeKill <Reg:rdx>  BB25 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #698 @689 RefTypeKill <Reg:r8 >  BB25 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #699 @689 RefTypeKill <Reg:r9 >  BB25 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #700 @689 RefTypeKill <Reg:r10>  BB25 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #701 @689 RefTypeKill <Reg:r11>  BB25 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #702 @694 RefTypeBB  BB26 regmask=[] minReg=1 wt=100.00>
<RefPosition #703 @700 RefTypeBB  BB21 regmask=[] minReg=1 wt=100.00>
<RefPosition #704 @702 RefTypeBB  BB23 regmask=[] minReg=1 wt=100.00>
<RefPosition #705 @704 RefTypeBB  BB27 regmask=[] minReg=1 wt=100.00>
<RefPosition #706 @709 RefTypeDef <Ivl:138> CNS_INT BB27 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #707 @710 RefTypeFixedReg <Reg:rcx>  BB27 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #708 @710 RefTypeUse <Ivl:138>  BB27 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #709 @711 RefTypeFixedReg <Reg:rcx>  BB27 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #710 @711 RefTypeDef <Ivl:139> PUTARG_REG BB27 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #711 @712 RefTypeFixedReg <Reg:rcx>  BB27 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #712 @712 RefTypeUse <Ivl:139>  BB27 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #713 @713 RefTypeKill <Reg:rax>  BB27 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #714 @713 RefTypeKill <Reg:rcx>  BB27 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #715 @713 RefTypeKill <Reg:rdx>  BB27 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #716 @713 RefTypeKill <Reg:r8 >  BB27 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #717 @713 RefTypeKill <Reg:r9 >  BB27 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #718 @713 RefTypeKill <Reg:r10>  BB27 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #719 @713 RefTypeKill <Reg:r11>  BB27 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #720 @722 RefTypeBB  BB29 regmask=[] minReg=1 wt=100.00>
<RefPosition #721 @727 RefTypeKill <Reg:rax>  BB29 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #722 @727 RefTypeKill <Reg:rcx>  BB29 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #723 @727 RefTypeKill <Reg:rdx>  BB29 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #724 @727 RefTypeKill <Reg:r8 >  BB29 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #725 @727 RefTypeKill <Reg:r9 >  BB29 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #726 @727 RefTypeKill <Reg:r10>  BB29 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #727 @727 RefTypeKill <Reg:r11>  BB29 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #728 @727 RefTypeFixedReg <Reg:rax>  BB29 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #729 @727 RefTypeDef <Ivl:140> CALL BB29 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #730 @728 RefTypeUse <Ivl:140>  BB29 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #731 @733 RefTypeDef <Ivl:141> LCL_VAR BB29 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #732 @734 RefTypeUse <Ivl:141>  BB29 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #733 @739 RefTypeDef <Ivl:142> LCL_VAR_ADDR BB29 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #734 @740 RefTypeFixedReg <Reg:rcx>  BB29 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #735 @740 RefTypeUse <Ivl:142>  BB29 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #736 @741 RefTypeFixedReg <Reg:rcx>  BB29 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #737 @741 RefTypeDef <Ivl:143> PUTARG_REG BB29 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #738 @742 RefTypeFixedReg <Reg:rcx>  BB29 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #739 @742 RefTypeUse <Ivl:143>  BB29 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #740 @743 RefTypeKill <Reg:rax>  BB29 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #741 @743 RefTypeKill <Reg:rcx>  BB29 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #742 @743 RefTypeKill <Reg:rdx>  BB29 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #743 @743 RefTypeKill <Reg:r8 >  BB29 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #744 @743 RefTypeKill <Reg:r9 >  BB29 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #745 @743 RefTypeKill <Reg:r10>  BB29 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #746 @743 RefTypeKill <Reg:r11>  BB29 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #747 @743 RefTypeFixedReg <Reg:rax>  BB29 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #748 @743 RefTypeDef <Ivl:144> CALL BB29 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #749 @744 RefTypeUse <Ivl:144>  BB29 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #750 @749 RefTypeDef <Ivl:145> CNS_INT BB29 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #751 @750 RefTypeUse <Ivl:145>  BB29 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #752 @751 RefTypeDef <Ivl:146> IND BB29 regmask=[rdx] minReg=1 wt=400.00>
<RefPosition #753 @752 RefTypeFixedReg <Reg:rdx>  BB29 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #754 @752 RefTypeUse <Ivl:146>  BB29 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #755 @753 RefTypeFixedReg <Reg:rdx>  BB29 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #756 @753 RefTypeDef <Ivl:147> PUTARG_REG BB29 regmask=[rdx] minReg=1 fixed wt=400.00>
<RefPosition #757 @755 RefTypeDef <Ivl:148> LCL_VAR BB29 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #758 @756 RefTypeFixedReg <Reg:rcx>  BB29 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #759 @756 RefTypeUse <Ivl:148>  BB29 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #760 @757 RefTypeFixedReg <Reg:rcx>  BB29 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #761 @757 RefTypeDef <Ivl:149> PUTARG_REG BB29 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #762 @758 RefTypeFixedReg <Reg:rdx>  BB29 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #763 @758 RefTypeUse <Ivl:147>  BB29 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #764 @758 RefTypeFixedReg <Reg:rcx>  BB29 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #765 @758 RefTypeUse <Ivl:149>  BB29 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #766 @759 RefTypeKill <Reg:rax>  BB29 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #767 @759 RefTypeKill <Reg:rcx>  BB29 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #768 @759 RefTypeKill <Reg:rdx>  BB29 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #769 @759 RefTypeKill <Reg:r8 >  BB29 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #770 @759 RefTypeKill <Reg:r9 >  BB29 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #771 @759 RefTypeKill <Reg:r10>  BB29 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #772 @759 RefTypeKill <Reg:r11>  BB29 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #773 @759 RefTypeFixedReg <Reg:rax>  BB29 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #774 @759 RefTypeDef <Ivl:150> CALL BB29 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #775 @760 RefTypeUse <Ivl:150>  BB29 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #776 @765 RefTypeDef <Ivl:151> LCL_VAR BB29 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #777 @766 RefTypeFixedReg <Reg:rcx>  BB29 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #778 @766 RefTypeUse <Ivl:151>  BB29 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #779 @767 RefTypeFixedReg <Reg:rcx>  BB29 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #780 @767 RefTypeDef <Ivl:152> PUTARG_REG BB29 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #781 @768 RefTypeFixedReg <Reg:rcx>  BB29 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #782 @768 RefTypeUse <Ivl:152>  BB29 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #783 @769 RefTypeKill <Reg:rax>  BB29 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #784 @769 RefTypeKill <Reg:rcx>  BB29 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #785 @769 RefTypeKill <Reg:rdx>  BB29 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #786 @769 RefTypeKill <Reg:r8 >  BB29 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #787 @769 RefTypeKill <Reg:r9 >  BB29 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #788 @769 RefTypeKill <Reg:r10>  BB29 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #789 @769 RefTypeKill <Reg:r11>  BB29 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #790 @777 RefTypeDef <Ivl:153> CNS_INT BB29 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #791 @778 RefTypeUse <Ivl:153>  BB29 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #792 @779 RefTypeDef <Ivl:154> IND BB29 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #793 @780 RefTypeFixedReg <Reg:rcx>  BB29 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #794 @780 RefTypeUse <Ivl:154>  BB29 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #795 @781 RefTypeFixedReg <Reg:rcx>  BB29 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #796 @781 RefTypeDef <Ivl:155> PUTARG_REG BB29 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #797 @782 RefTypeFixedReg <Reg:rcx>  BB29 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #798 @782 RefTypeUse <Ivl:155>  BB29 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #799 @783 RefTypeKill <Reg:rax>  BB29 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #800 @783 RefTypeKill <Reg:rcx>  BB29 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #801 @783 RefTypeKill <Reg:rdx>  BB29 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #802 @783 RefTypeKill <Reg:r8 >  BB29 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #803 @783 RefTypeKill <Reg:r9 >  BB29 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #804 @783 RefTypeKill <Reg:r10>  BB29 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #805 @783 RefTypeKill <Reg:r11>  BB29 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #806 @791 RefTypeDef <Ivl:156> CNS_INT BB29 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #807 @792 RefTypeUse <Ivl:156>  BB29 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #808 @793 RefTypeDef <Ivl:157> IND BB29 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #809 @794 RefTypeFixedReg <Reg:rcx>  BB29 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #810 @794 RefTypeUse <Ivl:157>  BB29 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #811 @795 RefTypeFixedReg <Reg:rcx>  BB29 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #812 @795 RefTypeDef <Ivl:158> PUTARG_REG BB29 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #813 @796 RefTypeFixedReg <Reg:rcx>  BB29 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #814 @796 RefTypeUse <Ivl:158>  BB29 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #815 @797 RefTypeKill <Reg:rax>  BB29 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #816 @797 RefTypeKill <Reg:rcx>  BB29 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #817 @797 RefTypeKill <Reg:rdx>  BB29 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #818 @797 RefTypeKill <Reg:r8 >  BB29 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #819 @797 RefTypeKill <Reg:r9 >  BB29 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #820 @797 RefTypeKill <Reg:r10>  BB29 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #821 @797 RefTypeKill <Reg:r11>  BB29 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #822 @805 RefTypeDef <Ivl:159> CNS_INT BB29 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #823 @806 RefTypeUse <Ivl:159>  BB29 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #824 @807 RefTypeDef <Ivl:160> IND BB29 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #825 @808 RefTypeFixedReg <Reg:rcx>  BB29 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #826 @808 RefTypeUse <Ivl:160>  BB29 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #827 @809 RefTypeFixedReg <Reg:rcx>  BB29 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #828 @809 RefTypeDef <Ivl:161> PUTARG_REG BB29 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #829 @810 RefTypeFixedReg <Reg:rcx>  BB29 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #830 @810 RefTypeUse <Ivl:161>  BB29 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #831 @811 RefTypeKill <Reg:rax>  BB29 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #832 @811 RefTypeKill <Reg:rcx>  BB29 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #833 @811 RefTypeKill <Reg:rdx>  BB29 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #834 @811 RefTypeKill <Reg:r8 >  BB29 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #835 @811 RefTypeKill <Reg:r9 >  BB29 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #836 @811 RefTypeKill <Reg:r10>  BB29 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #837 @811 RefTypeKill <Reg:r11>  BB29 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #838 @819 RefTypeDef <Ivl:162> CNS_INT BB29 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #839 @820 RefTypeUse <Ivl:162>  BB29 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #840 @821 RefTypeDef <Ivl:163> IND BB29 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #841 @822 RefTypeFixedReg <Reg:rcx>  BB29 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #842 @822 RefTypeUse <Ivl:163>  BB29 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #843 @823 RefTypeFixedReg <Reg:rcx>  BB29 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #844 @823 RefTypeDef <Ivl:164> PUTARG_REG BB29 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #845 @824 RefTypeFixedReg <Reg:rcx>  BB29 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #846 @824 RefTypeUse <Ivl:164>  BB29 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #847 @825 RefTypeKill <Reg:rax>  BB29 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #848 @825 RefTypeKill <Reg:rcx>  BB29 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #849 @825 RefTypeKill <Reg:rdx>  BB29 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #850 @825 RefTypeKill <Reg:r8 >  BB29 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #851 @825 RefTypeKill <Reg:r9 >  BB29 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #852 @825 RefTypeKill <Reg:r10>  BB29 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #853 @825 RefTypeKill <Reg:r11>  BB29 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #854 @834 RefTypeBB  BB39 regmask=[] minReg=1 wt=100.00>
<RefPosition #855 @846 RefTypeBB  BB30 regmask=[] minReg=1 wt=100.00>
<RefPosition #856 @855 RefTypeDef <Ivl:165> LCL_VAR_ADDR BB30 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #857 @856 RefTypeFixedReg <Reg:rcx>  BB30 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #858 @856 RefTypeUse <Ivl:165>  BB30 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #859 @857 RefTypeFixedReg <Reg:rcx>  BB30 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #860 @857 RefTypeDef <Ivl:166> PUTARG_REG BB30 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #861 @858 RefTypeFixedReg <Reg:rcx>  BB30 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #862 @858 RefTypeUse <Ivl:166>  BB30 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #863 @859 RefTypeKill <Reg:rax>  BB30 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #864 @859 RefTypeKill <Reg:rcx>  BB30 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #865 @859 RefTypeKill <Reg:rdx>  BB30 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #866 @859 RefTypeKill <Reg:r8 >  BB30 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #867 @859 RefTypeKill <Reg:r9 >  BB30 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #868 @859 RefTypeKill <Reg:r10>  BB30 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #869 @859 RefTypeKill <Reg:r11>  BB30 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #870 @866 RefTypeDef <Ivl:167 internal> STORE_BLK BB30 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #871 @866 RefTypeUse <Ivl:167 internal> STORE_BLK BB30 regmask=[allIntButFP] minReg=1 last wt=400.00>
<RefPosition #872 @871 RefTypeDef <Ivl:168> LCL_VAR_ADDR BB30 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #873 @872 RefTypeFixedReg <Reg:rcx>  BB30 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #874 @872 RefTypeUse <Ivl:168>  BB30 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #875 @873 RefTypeFixedReg <Reg:rcx>  BB30 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #876 @873 RefTypeDef <Ivl:169> PUTARG_REG BB30 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #877 @874 RefTypeFixedReg <Reg:rcx>  BB30 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #878 @874 RefTypeUse <Ivl:169>  BB30 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #879 @875 RefTypeKill <Reg:rax>  BB30 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #880 @875 RefTypeKill <Reg:rcx>  BB30 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #881 @875 RefTypeKill <Reg:rdx>  BB30 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #882 @875 RefTypeKill <Reg:r8 >  BB30 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #883 @875 RefTypeKill <Reg:r9 >  BB30 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #884 @875 RefTypeKill <Reg:r10>  BB30 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #885 @875 RefTypeKill <Reg:r11>  BB30 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #886 @875 RefTypeFixedReg <Reg:rax>  BB30 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #887 @875 RefTypeDef <Ivl:170> CALL BB30 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #888 @876 RefTypeUse <Ivl:170>  BB30 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #889 @885 RefTypeDef <Ivl:171> EQ BB30 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #890 @886 RefTypeUse <Ivl:171>  BB30 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #891 @898 RefTypeBB  BB31 regmask=[] minReg=1 wt=100.00>
<RefPosition #892 @907 RefTypeKill <Reg:rax>  BB31 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #893 @907 RefTypeKill <Reg:rcx>  BB31 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #894 @907 RefTypeKill <Reg:rdx>  BB31 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #895 @907 RefTypeKill <Reg:r8 >  BB31 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #896 @907 RefTypeKill <Reg:r9 >  BB31 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #897 @907 RefTypeKill <Reg:r10>  BB31 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #898 @907 RefTypeKill <Reg:r11>  BB31 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #899 @907 RefTypeFixedReg <Reg:rax>  BB31 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #900 @907 RefTypeDef <Ivl:172> CALL BB31 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #901 @908 RefTypeUse <Ivl:172>  BB31 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #902 @913 RefTypeDef <Ivl:173> LCL_VAR BB31 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #903 @914 RefTypeFixedReg <Reg:rcx>  BB31 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #904 @914 RefTypeUse <Ivl:173>  BB31 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #905 @915 RefTypeFixedReg <Reg:rcx>  BB31 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #906 @915 RefTypeDef <Ivl:174> PUTARG_REG BB31 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #907 @916 RefTypeFixedReg <Reg:rcx>  BB31 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #908 @916 RefTypeUse <Ivl:174>  BB31 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #909 @917 RefTypeKill <Reg:rax>  BB31 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #910 @917 RefTypeKill <Reg:rcx>  BB31 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #911 @917 RefTypeKill <Reg:rdx>  BB31 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #912 @917 RefTypeKill <Reg:r8 >  BB31 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #913 @917 RefTypeKill <Reg:r9 >  BB31 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #914 @917 RefTypeKill <Reg:r10>  BB31 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #915 @917 RefTypeKill <Reg:r11>  BB31 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #916 @930 RefTypeBB  BB32 regmask=[] minReg=1 wt=100.00>
<RefPosition #917 @935 RefTypeDef <Ivl:175> LCL_VAR_ADDR BB32 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #918 @936 RefTypeFixedReg <Reg:rcx>  BB32 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #919 @936 RefTypeUse <Ivl:175>  BB32 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #920 @937 RefTypeFixedReg <Reg:rcx>  BB32 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #921 @937 RefTypeDef <Ivl:176> PUTARG_REG BB32 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #922 @938 RefTypeFixedReg <Reg:rcx>  BB32 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #923 @938 RefTypeUse <Ivl:176>  BB32 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #924 @939 RefTypeKill <Reg:rax>  BB32 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #925 @939 RefTypeKill <Reg:rcx>  BB32 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #926 @939 RefTypeKill <Reg:rdx>  BB32 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #927 @939 RefTypeKill <Reg:r8 >  BB32 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #928 @939 RefTypeKill <Reg:r9 >  BB32 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #929 @939 RefTypeKill <Reg:r10>  BB32 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #930 @939 RefTypeKill <Reg:r11>  BB32 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #931 @939 RefTypeFixedReg <Reg:rax>  BB32 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #932 @939 RefTypeDef <Ivl:177> CALL BB32 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #933 @940 RefTypeUse <Ivl:177>  BB32 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #934 @949 RefTypeDef <Ivl:178> EQ BB32 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #935 @950 RefTypeUse <Ivl:178>  BB32 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #936 @962 RefTypeBB  BB33 regmask=[] minReg=1 wt=100.00>
<RefPosition #937 @971 RefTypeKill <Reg:rax>  BB33 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #938 @971 RefTypeKill <Reg:rcx>  BB33 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #939 @971 RefTypeKill <Reg:rdx>  BB33 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #940 @971 RefTypeKill <Reg:r8 >  BB33 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #941 @971 RefTypeKill <Reg:r9 >  BB33 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #942 @971 RefTypeKill <Reg:r10>  BB33 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #943 @971 RefTypeKill <Reg:r11>  BB33 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #944 @984 RefTypeBB  BB34 regmask=[] minReg=1 wt=100.00>
<RefPosition #945 @989 RefTypeDef <Ivl:179> LCL_VAR_ADDR BB34 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #946 @990 RefTypeFixedReg <Reg:rcx>  BB34 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #947 @990 RefTypeUse <Ivl:179>  BB34 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #948 @991 RefTypeFixedReg <Reg:rcx>  BB34 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #949 @991 RefTypeDef <Ivl:180> PUTARG_REG BB34 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #950 @992 RefTypeFixedReg <Reg:rcx>  BB34 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #951 @992 RefTypeUse <Ivl:180>  BB34 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #952 @993 RefTypeKill <Reg:rax>  BB34 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #953 @993 RefTypeKill <Reg:rcx>  BB34 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #954 @993 RefTypeKill <Reg:rdx>  BB34 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #955 @993 RefTypeKill <Reg:r8 >  BB34 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #956 @993 RefTypeKill <Reg:r9 >  BB34 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #957 @993 RefTypeKill <Reg:r10>  BB34 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #958 @993 RefTypeKill <Reg:r11>  BB34 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #959 @993 RefTypeFixedReg <Reg:rax>  BB34 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #960 @993 RefTypeDef <Ivl:181> CALL BB34 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #961 @994 RefTypeUse <Ivl:181>  BB34 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #962 @1003 RefTypeDef <Ivl:182> EQ BB34 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #963 @1004 RefTypeUse <Ivl:182>  BB34 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #964 @1016 RefTypeBB  BB35 regmask=[] minReg=1 wt=100.00>
<RefPosition #965 @1025 RefTypeDef <Ivl:183> LCL_VAR BB35 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #966 @1030 RefTypeUse <Ivl:183>  BB35 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #967 @1040 RefTypeBB  BB36 regmask=[] minReg=1 wt=100.00>
<RefPosition #968 @1045 RefTypeDef <Ivl:184> LCL_VAR_ADDR BB36 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #969 @1046 RefTypeFixedReg <Reg:rcx>  BB36 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #970 @1046 RefTypeUse <Ivl:184>  BB36 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #971 @1047 RefTypeFixedReg <Reg:rcx>  BB36 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #972 @1047 RefTypeDef <Ivl:185> PUTARG_REG BB36 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #973 @1048 RefTypeFixedReg <Reg:rcx>  BB36 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #974 @1048 RefTypeUse <Ivl:185>  BB36 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #975 @1049 RefTypeKill <Reg:rax>  BB36 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #976 @1049 RefTypeKill <Reg:rcx>  BB36 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #977 @1049 RefTypeKill <Reg:rdx>  BB36 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #978 @1049 RefTypeKill <Reg:r8 >  BB36 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #979 @1049 RefTypeKill <Reg:r9 >  BB36 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #980 @1049 RefTypeKill <Reg:r10>  BB36 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #981 @1049 RefTypeKill <Reg:r11>  BB36 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #982 @1049 RefTypeFixedReg <Reg:rax>  BB36 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #983 @1049 RefTypeDef <Ivl:186> CALL BB36 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #984 @1050 RefTypeUse <Ivl:186>  BB36 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #985 @1059 RefTypeDef <Ivl:187> EQ BB36 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #986 @1060 RefTypeUse <Ivl:187>  BB36 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #987 @1072 RefTypeBB  BB37 regmask=[] minReg=1 wt=100.00>
<RefPosition #988 @1082 RefTypeBB  BB38 regmask=[] minReg=1 wt=100.00>
<RefPosition #989 @1088 RefTypeBB  BB40 regmask=[] minReg=1 wt=100.00>
<RefPosition #990 @1093 RefTypeDef <Ivl:188> LCL_VAR BB40 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #991 @1098 RefTypeUse <Ivl:188>  BB40 regmask=[allIntButFP] minReg=1 last wt=100.00>
TUPLE STYLE DUMP WITH REF POSITIONS
Incoming Parameters: 
BB01 [???..???), preds={} succs={BB02}
=====
  N002.                    NOP      

BB02 [???..???) -> BB04 (cond), preds={BB01} succs={BB03,BB04}
=====
  N006.                    CNS_INT(h) 0x7ffdb6f1d838 global ptr
  N008.                    IND      
  N010.                    CNS_INT   0
  N012.                    EQ       
  N014.                    JTRUE    

BB03 [???..???), preds={BB02} succs={BB04}
=====
  N018.                    CALL help
        Kill: rax rcx rdx r8 r9 r10 r11 

BB04 [???..???), preds={BB02,BB03} succs={BB05}
=====

BB05 [000..078) -> BB14 (always), preds={BB04} succs={BB14}
=====
  N024.                    IL_OFFSET IL offset: 0x0
  N026.                    NO_OP    
  N028.                    IL_OFFSET IL offset: 0x1
  N030.                    CALL     
        Kill: rax rcx rdx r8 r9 r10 r11 
        Def:<I0>(#20) rax
  N032.                    V19 MEM
                               Use:<I0>(#21) *
  N034.                    IL_OFFSET IL offset: 0x6
  N036.                    V19 MEM
        Def:<I1>(#22)
  N038.                    V03 MEM
                               Use:<I1>(#23) *
  N040.                    IL_OFFSET IL offset: 0x7
  N042.                    LCL_VAR_ADDR V03 loc1          NA
        Def:<I2>(#24)
  N044.                    PUTARG_REG
                               Use:<I2>(#26) Fixed:rcx(#25) *
        Def:<I3>(#28) rcx
  N046.                    CALL     
                               Use:<I3>(#30) Fixed:rcx(#29) *
        Kill: rax rcx rdx r8 r9 r10 r11 
        Def:<I4>(#39) rax
  N048.                    V20 MEM
                               Use:<I4>(#40) *
  N050.                    IL_OFFSET IL offset: 0xe
  N052.                    CNS_INT(h) 0xBE2A31F0 "	 Created list"
        Def:<I5>(#41)
  N054.                    IND      
                               Use:<I5>(#42) *
        Def:<I6>(#43)
  N056.                    PUTARG_REG
                               Use:<I6>(#45) Fixed:rdx(#44) *
        Def:<I7>(#47) rdx
  N058.                    V20 MEM
        Def:<I8>(#48)
  N060.                    PUTARG_REG
                               Use:<I8>(#50) Fixed:rcx(#49) *
        Def:<I9>(#52) rcx
  N062.                    CALL     
                               Use:<I7>(#54) Fixed:rdx(#53) *
                               Use:<I9>(#56) Fixed:rcx(#55) *
        Kill: rax rcx rdx r8 r9 r10 r11 
        Def:<I10>(#65) rax
  N064.                    V21 MEM
                               Use:<I10>(#66) *
  N066.                    IL_OFFSET IL offset: 0x18
  N068.                    V21 MEM
        Def:<I11>(#67)
  N070.                    PUTARG_REG
                               Use:<I11>(#69) Fixed:rcx(#68) *
        Def:<I12>(#71) rcx
  N072.                    CALL     
                               Use:<I12>(#73) Fixed:rcx(#72) *
        Kill: rax rcx rdx r8 r9 r10 r11 
  N074.                    IL_OFFSET IL offset: 0x1d
  N076.                    NO_OP    
  N078.                    IL_OFFSET IL offset: 0x1e
  N080.                    CNS_INT(h) 0x7ffdb7022b70 method
        Def:<I13>(#81)
  N082.                    PUTARG_REG
                               Use:<I13>(#83) Fixed:rcx(#82) *
        Def:<I14>(#85) rcx
  N084.                    CALL help
                               Use:<I14>(#87) Fixed:rcx(#86) *
        Kill: rax rcx rdx r8 r9 r10 r11 
        Def:<I15>(#96) rax
  N086.                    V22 MEM
                               Use:<I15>(#97) *
  N088.                    V22 MEM
        Def:<I16>(#98)
  N090.                    PUTARG_REG
                               Use:<I16>(#100) Fixed:rcx(#99) *
        Def:<I17>(#102) rcx
  N092.                    CALL     
                               Use:<I17>(#104) Fixed:rcx(#103) *
        Kill: rax rcx rdx r8 r9 r10 r11 
  N094.                    IL_OFFSET IL offset: 0x24
  N096.                    V00 MEM
        Def:<I18>(#112)
  N098.                    LEA(b+8) 
                               Use:<I18>(#113) *
        Def:<I19>(#114)
  N100.                    V22 MEM
        Def:<I20>(#115)
  N102.                    STOREIND 
                               Use:<I19>(#117) Fixed:rcx(#116) *
                               Use:<I20>(#119) Fixed:rdx(#118) *
        Kill: rax rcx rdx r8 r9 r10 r11 mm0 mm1 mm2 mm3 mm4 mm5 
  N104.                    IL_OFFSET IL offset: 0x29
  N106.                    CNS_INT(h) 0x7ffdb6c458b8 token
        Def:<I21>(#133)
  N108.                    PUTARG_REG
                               Use:<I21>(#135) Fixed:rcx(#134) *
        Def:<I22>(#137) rcx
  N110.                    CALL help
                               Use:<I22>(#139) Fixed:rcx(#138) *
        Kill: rax rcx rdx r8 r9 r10 r11 
        Def:<I23>(#148) rax
  N112.                    V23 MEM
                               Use:<I23>(#149) *
  N114.                    V00 MEM
        Def:<I24>(#150)
  N116.                    LEA(b+8) 
  N118.                    IND      
                               Use:<I24>(#151) *
        Def:<I25>(#152)
  N120.                    LEA(b+8) 
  N122.                    IND      
                               Use:<I25>(#153) *
        Def:<I26>(#154)
  N124.                    V24 MEM
                               Use:<I26>(#155) *
  N126.                    V23 MEM
        Def:<I27>(#156)
  N128.                    PUTARG_REG
                               Use:<I27>(#158) Fixed:rcx(#157) *
        Def:<I28>(#160) rcx
  N130.                    CALL     
                               Use:<I28>(#162) Fixed:rcx(#161) *
        Kill: rax rcx rdx r8 r9 r10 r11 
  N132.                    IL_OFFSET IL offset: 0x39
  N134.                    V24 MEM
        Def:<I29>(#170)
  N136.                    LEA(b+16)
                               Use:<I29>(#171) *
        Def:<I30>(#172)
  N138.                    V23 MEM
        Def:<I31>(#173)
  N140.                    STOREIND 
                               Use:<I30>(#175) Fixed:rcx(#174) *
                               Use:<I31>(#177) Fixed:rdx(#176) *
        Kill: rax rcx rdx r8 r9 r10 r11 mm0 mm1 mm2 mm3 mm4 mm5 
  N142.                    IL_OFFSET IL offset: 0x3e
  N144.                    CNS_INT(h) 0x7ffdb7026348 token
        Def:<I32>(#191)
  N146.                    PUTARG_REG
                               Use:<I32>(#193) Fixed:rcx(#192) *
        Def:<I33>(#195) rcx
  N148.                    CALL help
                               Use:<I33>(#197) Fixed:rcx(#196) *
        Kill: rax rcx rdx r8 r9 r10 r11 
        Def:<I34>(#206) rax
  N150.                    V25 MEM
                               Use:<I34>(#207) *
  N152.                    V25 MEM
        Def:<I35>(#208)
  N154.                    PUTARG_REG
                               Use:<I35>(#210) Fixed:rcx(#209) *
        Def:<I36>(#212) rcx
  N156.                    V00 MEM
        Def:<I37>(#213)
  N158.                    PUTARG_REG
                               Use:<I37>(#215) Fixed:rdx(#214) *
        Def:<I38>(#217) rdx
  N160.                    CNS_INT(h) 0x7ffdb6c613f8 ftn
        Def:<I39>(#218)
  N162.                    PUTARG_REG
                               Use:<I39>(#220) Fixed:r8(#219) *
        Def:<I40>(#222) r8
  N164.                    CALL     
                               Use:<I36>(#224) Fixed:rcx(#223) *
                               Use:<I38>(#226) Fixed:rdx(#225) *
                               Use:<I40>(#228) Fixed:r8(#227) *
        Kill: rax rcx rdx r8 r9 r10 r11 
  N166.                    IL_OFFSET IL offset: 0x4a
  N168.                    CNS_INT(h) 0x7ffdb6dc4e80 token
        Def:<I41>(#236)
  N170.                    PUTARG_REG
                               Use:<I41>(#238) Fixed:rcx(#237) *
        Def:<I42>(#240) rcx
  N172.                    CALL help
                               Use:<I42>(#242) Fixed:rcx(#241) *
        Kill: rax rcx rdx r8 r9 r10 r11 
        Def:<I43>(#251) rax
  N174.                    V26 MEM
                               Use:<I43>(#252) *
  N176.                    V26 MEM
        Def:<I44>(#253)
  N178.                    PUTARG_REG
                               Use:<I44>(#255) Fixed:rcx(#254) *
        Def:<I45>(#257) rcx
  N180.                    V25 MEM
        Def:<I46>(#258)
  N182.                    PUTARG_REG
                               Use:<I46>(#260) Fixed:rdx(#259) *
        Def:<I47>(#262) rdx
  N184.                    CALL     
                               Use:<I45>(#264) Fixed:rcx(#263) *
                               Use:<I47>(#266) Fixed:rdx(#265) *
        Kill: rax rcx rdx r8 r9 r10 r11 
  N186.                    IL_OFFSET IL offset: 0x4f
  N188.                    V26 MEM
        Def:<I48>(#274)
  N190.                    V02 MEM
                               Use:<I48>(#275) *
  N192.                    IL_OFFSET IL offset: 0x50
  N194.                    V02 MEM
        Def:<I49>(#276)
  N196.                    PUTARG_REG
                               Use:<I49>(#278) Fixed:rcx(#277) *
        Def:<I50>(#280) rcx
  N198.                    CALL nullcheck
                               Use:<I50>(#282) Fixed:rcx(#281) *
        Kill: rax rcx rdx r8 r9 r10 r11 
  N200.                    IL_OFFSET IL offset: 0x56
  N202.                    NO_OP    
  N204.                    IL_OFFSET IL offset: 0x57
  N206.                    CALL     
        Kill: rax rcx rdx r8 r9 r10 r11 
        Def:<I51>(#298) rax
  N208.                    V27 MEM
                               Use:<I51>(#299) *
  N210.                    IL_OFFSET IL offset: 0x5c
  N212.                    V27 MEM
        Def:<I52>(#300)
  N214.                    V03 MEM
                               Use:<I52>(#301) *
  N216.                    IL_OFFSET IL offset: 0x5d
  N218.                    LCL_VAR_ADDR V03 loc1          NA
        Def:<I53>(#302)
  N220.                    PUTARG_REG
                               Use:<I53>(#304) Fixed:rcx(#303) *
        Def:<I54>(#306) rcx
  N222.                    CALL     
                               Use:<I54>(#308) Fixed:rcx(#307) *
        Kill: rax rcx rdx r8 r9 r10 r11 
        Def:<I55>(#317) rax
  N224.                    V28 MEM
                               Use:<I55>(#318) *
  N226.                    IL_OFFSET IL offset: 0x64
  N228.                    CNS_INT(h) 0xBE2A31F8 "	 Consumer thread started, adding items..."
        Def:<I56>(#319)
  N230.                    IND      
                               Use:<I56>(#320) *
        Def:<I57>(#321)
  N232.                    PUTARG_REG
                               Use:<I57>(#323) Fixed:rdx(#322) *
        Def:<I58>(#325) rdx
  N234.                    V28 MEM
        Def:<I59>(#326)
  N236.                    PUTARG_REG
                               Use:<I59>(#328) Fixed:rcx(#327) *
        Def:<I60>(#330) rcx
  N238.                    CALL     
                               Use:<I58>(#332) Fixed:rdx(#331) *
                               Use:<I60>(#334) Fixed:rcx(#333) *
        Kill: rax rcx rdx r8 r9 r10 r11 
        Def:<I61>(#343) rax
  N240.                    V29 MEM
                               Use:<I61>(#344) *
  N242.                    IL_OFFSET IL offset: 0x6e
  N244.                    V29 MEM
        Def:<I62>(#345)
  N246.                    PUTARG_REG
                               Use:<I62>(#347) Fixed:rcx(#346) *
        Def:<I63>(#349) rcx
  N248.                    CALL     
                               Use:<I63>(#351) Fixed:rcx(#350) *
        Kill: rax rcx rdx r8 r9 r10 r11 
  N250.                    IL_OFFSET IL offset: 0x73
  N252.                    NO_OP    
  N254.                    IL_OFFSET IL offset: 0x74
  N256.                    CNS_INT   0
        Def:<I64>(#359)
  N258.                    V04 MEM
                               Use:<I64>(#360) *
  N260.                    IL_OFFSET IL offset: 0x76
  N262.                    NOP      

BB14 [0E6..0F1) -> BB06 (cond), preds={BB05,BB13} succs={BB15,BB06}
=====
  N266.                    IL_OFFSET IL offset: 0xe6
  N268.                    V04 MEM
  N270.                    CNS_INT   10
  N272.                    LT       
        Def:<I65>(#362)
  N274.                    V07 MEM
                               Use:<I65>(#363) *
  N276.                    IL_OFFSET IL offset: 0xed
  N278.                    V07 MEM
  N280.                    CNS_INT   0
  N282.                    NE       
  N284.                    JTRUE    

BB06 [078..083), preds={BB14} succs={BB07}
=====
  N288.                    IL_OFFSET IL offset: 0x78
  N290.                    NO_OP    
  N292.                    IL_OFFSET IL offset: 0x79
  N294.                    V00 MEM
        Def:<I66>(#365)
  N296.                    LEA(b+8) 
  N298.                    IND      
                               Use:<I66>(#366) *
        Def:<I67>(#367)
  N300.                    V05 MEM
                               Use:<I67>(#368) *
  N302.                    IL_OFFSET IL offset: 0x80
  N304.                    CNS_INT   0
        Def:<I68>(#369)
  N306.                    V06 MEM
                               Use:<I68>(#370) *

BB07 [083..0D5) -> BB08 (always), preds={BB06} succs={BB08}
=====
  N310.                    IL_OFFSET IL offset: 0x83
  N312.                    LCL_VAR_ADDR V06 loc4          NA
        Def:<I69>(#372)
  N314.                    PUTARG_REG
                               Use:<I69>(#374) Fixed:rdx(#373) *
        Def:<I70>(#376) rdx
  N316.                    V05 MEM
        Def:<I71>(#377)
  N318.                    PUTARG_REG
                               Use:<I71>(#379) Fixed:rcx(#378) *
        Def:<I72>(#381) rcx
  N320.                    CALL     
                               Use:<I70>(#383) Fixed:rdx(#382) *
                               Use:<I72>(#385) Fixed:rcx(#384) *
        Kill: rax rcx rdx r8 r9 r10 r11 
  N322.                    IL_OFFSET IL offset: 0x8b
  N324.                    NO_OP    
  N326.                    IL_OFFSET IL offset: 0x8c
  N328.                    NO_OP    
  N330.                    IL_OFFSET IL offset: 0x8d
  N332.                    CNS_INT(h) 0x7ffdb70260c8 method
        Def:<I73>(#393)
  N334.                    PUTARG_REG
                               Use:<I73>(#395) Fixed:rcx(#394) *
        Def:<I74>(#397) rcx
  N336.                    CALL help
                               Use:<I74>(#399) Fixed:rcx(#398) *
        Kill: rax rcx rdx r8 r9 r10 r11 
        Def:<I75>(#408) rax
  N338.                    V30 MEM
                               Use:<I75>(#409) *
  N340.                    V00 MEM
        Def:<I76>(#410)
  N342.                    LEA(b+8) 
  N344.                    IND      
                               Use:<I76>(#411) *
        Def:<I77>(#412)
  N346.                    LEA(b+8) 
  N348.                    IND      
                               Use:<I77>(#413) *
        Def:<I78>(#414)
  N350.                    V31 MEM
                               Use:<I78>(#415) *
  N352.                    V30 MEM
        Def:<I79>(#416)
  N354.                    PUTARG_REG
                               Use:<I79>(#418) Fixed:rcx(#417) *
        Def:<I80>(#420) rcx
  N356.                    CALL     
                               Use:<I80>(#422) Fixed:rcx(#421) *
        Kill: rax rcx rdx r8 r9 r10 r11 
  N358.                    IL_OFFSET IL offset: 0x9d
  N360.                    V31 MEM
        Def:<I81>(#430)
  N362.                    LEA(b+8) 
                               Use:<I81>(#431) *
        Def:<I82>(#432)
  N364.                    V30 MEM
        Def:<I83>(#433)
  N366.                    STOREIND 
                               Use:<I82>(#435) Fixed:rcx(#434) *
                               Use:<I83>(#437) Fixed:rdx(#436) *
        Kill: rax rcx rdx r8 r9 r10 r11 mm0 mm1 mm2 mm3 mm4 mm5 
  N368.                    IL_OFFSET IL offset: 0xa2
  N370.                    V00 MEM
        Def:<I84>(#451)
  N372.                    LEA(b+8) 
  N374.                    IND      
                               Use:<I84>(#452) *
        Def:<I85>(#453)
  N376.                    LEA(b+8) 
                               Use:<I85>(#454) *
        Def:<I86>(#455)
  N378.                    V00 MEM
        Def:<I87>(#456)
  N380.                    LEA(b+8) 
  N382.                    IND      
                               Use:<I87>(#457) *
        Def:<I88>(#458)
  N384.                    LEA(b+8) 
  N386.                    IND      
                               Use:<I88>(#459) *
        Def:<I89>(#460)
  N388.                    LEA(b+8) 
  N390.                    IND      
                               Use:<I89>(#461) *
        Def:<I90>(#462)
  N392.                    STOREIND 
                               Use:<I86>(#464) Fixed:rcx(#463) *
                               Use:<I90>(#466) Fixed:rdx(#465) *
        Kill: rax rcx rdx r8 r9 r10 r11 mm0 mm1 mm2 mm3 mm4 mm5 
  N394.                    IL_OFFSET IL offset: 0xbd
  N396.                    CNS_INT(h) 0x7ffdb6c458b8 token
        Def:<I91>(#480)
  N398.                    PUTARG_REG
                               Use:<I91>(#482) Fixed:rcx(#481) *
        Def:<I92>(#484) rcx
  N400.                    CALL help
                               Use:<I92>(#486) Fixed:rcx(#485) *
        Kill: rax rcx rdx r8 r9 r10 r11 
        Def:<I93>(#495) rax
  N402.                    V32 MEM
                               Use:<I93>(#496) *
  N404.                    V00 MEM
        Def:<I94>(#497)
  N406.                    LEA(b+8) 
  N408.                    IND      
                               Use:<I94>(#498) *
        Def:<I95>(#499)
  N410.                    LEA(b+8) 
  N412.                    IND      
                               Use:<I95>(#500) *
        Def:<I96>(#501)
  N414.                    V33 MEM
                               Use:<I96>(#502) *
  N416.                    V32 MEM
        Def:<I97>(#503)
  N418.                    PUTARG_REG
                               Use:<I97>(#505) Fixed:rcx(#504) *
        Def:<I98>(#507) rcx
  N420.                    CALL     
                               Use:<I98>(#509) Fixed:rcx(#508) *
        Kill: rax rcx rdx r8 r9 r10 r11 
  N422.                    IL_OFFSET IL offset: 0xcd
  N424.                    V33 MEM
        Def:<I99>(#517)
  N426.                    LEA(b+16)
                               Use:<I99>(#518) *
        Def:<I100>(#519)
  N428.                    V32 MEM
        Def:<I101>(#520)
  N430.                    STOREIND 
                               Use:<I100>(#522) Fixed:rcx(#521) *
                               Use:<I101>(#524) Fixed:rdx(#523) *
        Kill: rax rcx rdx r8 r9 r10 r11 mm0 mm1 mm2 mm3 mm4 mm5 
  N432.                    IL_OFFSET IL offset: 0xd2
  N434.                    NO_OP    
  N436.                    IL_OFFSET IL offset: 0xd3
  N438.                    NOP      

BB08 [???..???) -> BB10 (callf), preds={BB07} succs={BB10}
=====

BB10 [0D5..0D9) -> BB12 (cond), preds={BB08} succs={BB11,BB12}
=====
  N444.                    IL_OFFSET IL offset: 0xd5
  N446.                    V06 MEM
        Def:<I102>(#540)
  N448.                    CAST     
                               Use:<I102>(#541) *
        Def:<I103>(#542)
  N450.                    CNS_INT   0
  N452.                    EQ       
                               Use:<I103>(#543) *
  N454.                    JTRUE    

BB11 [0D9..0E0), preds={BB10} succs={BB12}
=====
  N458.                    IL_OFFSET IL offset: 0xd9
  N460.                    V05 MEM
        Def:<I104>(#545)
  N462.                    PUTARG_REG
                               Use:<I104>(#547) Fixed:rcx(#546) *
        Def:<I105>(#549) rcx
  N464.                    CALL     
                               Use:<I105>(#551) Fixed:rcx(#550) *
        Kill: rax rcx rdx r8 r9 r10 r11 
  N466.                    IL_OFFSET IL offset: 0xdf
  N468.                    NO_OP    

BB12 [0E0..0E1) (finret), preds={BB10,BB11} succs={BB09}
=====
  N472.                    IL_OFFSET IL offset: 0xe0
  N474.                    RETFILT  

BB09 [???..???) -> BB13 (ALWAYS), preds={BB12} succs={BB13}
=====

BB13 [0E1..0E6), preds={BB09} succs={BB14}
=====
  N480.                    IL_OFFSET IL offset: 0xe1
  N482.                    NO_OP    
  N484.                    IL_OFFSET IL offset: 0xe2
  N486.                    V04 MEM
        Def:<I106>(#562) Pref:<I107>
  N488.                    CNS_INT   1
  N490.                    ADD      
                               Use:<I106>(#563) *
        Def:<I107>(#564)
  N492.                    V04 MEM
                               Use:<I107>(#565) *

BB15 [0F1..110) -> BB28 (always), preds={BB14} succs={BB28}
=====
  N496.                    IL_OFFSET IL offset: 0xf1
  N498.                    CALL     
        Kill: rax rcx rdx r8 r9 r10 r11 
        Def:<I108>(#575) rax
  N500.                    V34 MEM
                               Use:<I108>(#576) *
  N502.                    IL_OFFSET IL offset: 0xf6
  N504.                    V34 MEM
        Def:<I109>(#577)
  N506.                    V03 MEM
                               Use:<I109>(#578) *
  N508.                    IL_OFFSET IL offset: 0xf7
  N510.                    LCL_VAR_ADDR V03 loc1          NA
        Def:<I110>(#579)
  N512.                    PUTARG_REG
                               Use:<I110>(#581) Fixed:rcx(#580) *
        Def:<I111>(#583) rcx
  N514.                    CALL     
                               Use:<I111>(#585) Fixed:rcx(#584) *
        Kill: rax rcx rdx r8 r9 r10 r11 
        Def:<I112>(#594) rax
  N516.                    V35 MEM
                               Use:<I112>(#595) *
  N518.                    IL_OFFSET IL offset: 0xfe
  N520.                    CNS_INT(h) 0xBE2A3200 "	 Waiting for list processing to complete..."
        Def:<I113>(#596)
  N522.                    IND      
                               Use:<I113>(#597) *
        Def:<I114>(#598)
  N524.                    PUTARG_REG
                               Use:<I114>(#600) Fixed:rdx(#599) *
        Def:<I115>(#602) rdx
  N526.                    V35 MEM
        Def:<I116>(#603)
  N528.                    PUTARG_REG
                               Use:<I116>(#605) Fixed:rcx(#604) *
        Def:<I117>(#607) rcx
  N530.                    CALL     
                               Use:<I115>(#609) Fixed:rdx(#608) *
                               Use:<I117>(#611) Fixed:rcx(#610) *
        Kill: rax rcx rdx r8 r9 r10 r11 
        Def:<I118>(#620) rax
  N532.                    V36 MEM
                               Use:<I118>(#621) *
  N534.                    IL_OFFSET IL offset: 0x108
  N536.                    V36 MEM
        Def:<I119>(#622)
  N538.                    PUTARG_REG
                               Use:<I119>(#624) Fixed:rcx(#623) *
        Def:<I120>(#626) rcx
  N540.                    CALL     
                               Use:<I120>(#628) Fixed:rcx(#627) *
        Kill: rax rcx rdx r8 r9 r10 r11 
  N542.                    IL_OFFSET IL offset: 0x10d
  N544.                    NO_OP    
  N546.                    IL_OFFSET IL offset: 0x10e
  N548.                    NOP      

BB28 [161..166) -> BB16 (always), preds={BB15,BB27} succs={BB16}
=====
  N552.                    IL_OFFSET IL offset: 0x161
  N554.                    CNS_INT   1
  N556.                    V11 MEM
  N558.                    IL_OFFSET IL offset: 0x164
  N560.                    NOP      

BB16 [110..11C), preds={BB28} succs={BB17}
=====
  N564.                    IL_OFFSET IL offset: 0x110
  N566.                    NO_OP    
  N568.                    IL_OFFSET IL offset: 0x111
  N570.                    V00 MEM
        Def:<I121>(#638)
  N572.                    LEA(b+8) 
  N574.                    IND      
                               Use:<I121>(#639) *
        Def:<I122>(#640)
  N576.                    V08 MEM
                               Use:<I122>(#641) *
  N578.                    IL_OFFSET IL offset: 0x119
  N580.                    CNS_INT   0
        Def:<I123>(#642)
  N582.                    V09 MEM
                               Use:<I123>(#643) *

BB17 [11C..145) -> BB19 (cond), preds={BB16} succs={BB18,BB19}
=====
  N586.                    IL_OFFSET IL offset: 0x11c
  N588.                    LCL_VAR_ADDR V09 loc7          NA
        Def:<I124>(#645)
  N590.                    PUTARG_REG
                               Use:<I124>(#647) Fixed:rdx(#646) *
        Def:<I125>(#649) rdx
  N592.                    V08 MEM
        Def:<I126>(#650)
  N594.                    PUTARG_REG
                               Use:<I126>(#652) Fixed:rcx(#651) *
        Def:<I127>(#654) rcx
  N596.                    CALL     
                               Use:<I125>(#656) Fixed:rdx(#655) *
                               Use:<I127>(#658) Fixed:rcx(#657) *
        Kill: rax rcx rdx r8 r9 r10 r11 
  N598.                    IL_OFFSET IL offset: 0x125
  N600.                    NO_OP    
  N602.                    IL_OFFSET IL offset: 0x126
  N604.                    NO_OP    
  N606.                    IL_OFFSET IL offset: 0x127
  N608.                    V00 MEM
        Def:<I128>(#666)
  N610.                    LEA(b+8) 
  N612.                    IND      
                               Use:<I128>(#667) *
        Def:<I129>(#668)
  N614.                    LEA(b+8) 
  N616.                    IND      
                               Use:<I129>(#669) *
        Def:<I130>(#670)
  N618.                    V00 MEM
        Def:<I131>(#671)
  N620.                    LEA(b+8) 
  N622.                    IND      
                               Use:<I131>(#672) *
        Def:<I132>(#673)
  N624.                    LEA(b+16)
  N626.                    IND      
  N628.                    EQ       
                               Use:<I130>(#674) *
                               Use:<I132>(#675) *
        Def:<I133>(#676)
  N630.                    V10 MEM
                               Use:<I133>(#677) *
  N632.                    IL_OFFSET IL offset: 0x141
  N634.                    V10 MEM
  N636.                    CNS_INT   0
  N638.                    EQ       
  N640.                    JTRUE    

BB18 [145..148) -> BB20 (always), preds={BB17} succs={BB20}
=====
  N644.                    IL_OFFSET IL offset: 0x145
  N646.                    NO_OP    
  N648.                    IL_OFFSET IL offset: 0x146
  N650.                    NOP      

BB19 [148..14B) -> BB22 (always), preds={BB17} succs={BB22}
=====
  N654.                    IL_OFFSET IL offset: 0x148
  N656.                    NO_OP    
  N658.                    IL_OFFSET IL offset: 0x149
  N660.                    NOP      

BB20 [???..???) -> BB24 (callf), preds={BB18} succs={BB24}
=====

BB22 [???..???) -> BB24 (callf), preds={BB19} succs={BB24}
=====

BB24 [14B..14F) -> BB26 (cond), preds={BB20,BB22} succs={BB25,BB26}
=====
  N668.                    IL_OFFSET IL offset: 0x14b
  N670.                    V09 MEM
        Def:<I134>(#683)
  N672.                    CAST     
                               Use:<I134>(#684) *
        Def:<I135>(#685)
  N674.                    CNS_INT   0
  N676.                    EQ       
                               Use:<I135>(#686) *
  N678.                    JTRUE    

BB25 [14F..157), preds={BB24} succs={BB26}
=====
  N682.                    IL_OFFSET IL offset: 0x14f
  N684.                    V08 MEM
        Def:<I136>(#688)
  N686.                    PUTARG_REG
                               Use:<I136>(#690) Fixed:rcx(#689) *
        Def:<I137>(#692) rcx
  N688.                    CALL     
                               Use:<I137>(#694) Fixed:rcx(#693) *
        Kill: rax rcx rdx r8 r9 r10 r11 
  N690.                    IL_OFFSET IL offset: 0x156
  N692.                    NO_OP    

BB26 [157..158) (finret), preds={BB24,BB25} succs={BB21,BB23}
=====
  N696.                    IL_OFFSET IL offset: 0x157
  N698.                    RETFILT  

BB21 [???..???) -> BB29 (ALWAYS), preds={BB26} succs={BB29}
=====

BB23 [???..???) -> BB27 (ALWAYS), preds={BB26} succs={BB27}
=====

BB27 [158..161), preds={BB23} succs={BB28}
=====
  N706.                    IL_OFFSET IL offset: 0x158
  N708.                    CNS_INT   100
        Def:<I138>(#706)
  N710.                    PUTARG_REG
                               Use:<I138>(#708) Fixed:rcx(#707) *
        Def:<I139>(#710) rcx
  N712.                    CALL     
                               Use:<I139>(#712) Fixed:rcx(#711) *
        Kill: rax rcx rdx r8 r9 r10 r11 
  N714.                    IL_OFFSET IL offset: 0x15f
  N716.                    NO_OP    
  N718.                    IL_OFFSET IL offset: 0x160
  N720.                    NO_OP    

BB29 [166..1B1) -> BB39 (always), preds={BB21} succs={BB39}
=====
  N724.                    IL_OFFSET IL offset: 0x166
  N726.                    CALL     
        Kill: rax rcx rdx r8 r9 r10 r11 
        Def:<I140>(#729) rax
  N728.                    V37 MEM
                               Use:<I140>(#730) *
  N730.                    IL_OFFSET IL offset: 0x16b
  N732.                    V37 MEM
        Def:<I141>(#731)
  N734.                    V03 MEM
                               Use:<I141>(#732) *
  N736.                    IL_OFFSET IL offset: 0x16c
  N738.                    LCL_VAR_ADDR V03 loc1          NA
        Def:<I142>(#733)
  N740.                    PUTARG_REG
                               Use:<I142>(#735) Fixed:rcx(#734) *
        Def:<I143>(#737) rcx
  N742.                    CALL     
                               Use:<I143>(#739) Fixed:rcx(#738) *
        Kill: rax rcx rdx r8 r9 r10 r11 
        Def:<I144>(#748) rax
  N744.                    V38 MEM
                               Use:<I144>(#749) *
  N746.                    IL_OFFSET IL offset: 0x173
  N748.                    CNS_INT(h) 0xBE2A3208 "	 Done.  Profiler is active, available options:"
        Def:<I145>(#750)
  N750.                    IND      
                               Use:<I145>(#751) *
        Def:<I146>(#752)
  N752.                    PUTARG_REG
                               Use:<I146>(#754) Fixed:rdx(#753) *
        Def:<I147>(#756) rdx
  N754.                    V38 MEM
        Def:<I148>(#757)
  N756.                    PUTARG_REG
                               Use:<I148>(#759) Fixed:rcx(#758) *
        Def:<I149>(#761) rcx
  N758.                    CALL     
                               Use:<I147>(#763) Fixed:rdx(#762) *
                               Use:<I149>(#765) Fixed:rcx(#764) *
        Kill: rax rcx rdx r8 r9 r10 r11 
        Def:<I150>(#774) rax
  N760.                    V39 MEM
                               Use:<I150>(#775) *
  N762.                    IL_OFFSET IL offset: 0x17d
  N764.                    V39 MEM
        Def:<I151>(#776)
  N766.                    PUTARG_REG
                               Use:<I151>(#778) Fixed:rcx(#777) *
        Def:<I152>(#780) rcx
  N768.                    CALL     
                               Use:<I152>(#782) Fixed:rcx(#781) *
        Kill: rax rcx rdx r8 r9 r10 r11 
  N770.                    IL_OFFSET IL offset: 0x182
  N772.                    NO_OP    
  N774.                    IL_OFFSET IL offset: 0x183
  N776.                    CNS_INT(h) 0xBE2A3210 "   Q = quit"
        Def:<I153>(#790)
  N778.                    IND      
                               Use:<I153>(#791) *
        Def:<I154>(#792)
  N780.                    PUTARG_REG
                               Use:<I154>(#794) Fixed:rcx(#793) *
        Def:<I155>(#796) rcx
  N782.                    CALL     
                               Use:<I155>(#798) Fixed:rcx(#797) *
        Kill: rax rcx rdx r8 r9 r10 r11 
  N784.                    IL_OFFSET IL offset: 0x18d
  N786.                    NO_OP    
  N788.                    IL_OFFSET IL offset: 0x18e
  N790.                    CNS_INT(h) 0xBE2A3218 "   H = heap snapshot"
        Def:<I156>(#806)
  N792.                    IND      
                               Use:<I156>(#807) *
        Def:<I157>(#808)
  N794.                    PUTARG_REG
                               Use:<I157>(#810) Fixed:rcx(#809) *
        Def:<I158>(#812) rcx
  N796.                    CALL     
                               Use:<I158>(#814) Fixed:rcx(#813) *
        Kill: rax rcx rdx r8 r9 r10 r11 
  N798.                    IL_OFFSET IL offset: 0x198
  N800.                    NO_OP    
  N802.                    IL_OFFSET IL offset: 0x199
  N804.                    CNS_INT(h) 0xBE2A3220 "   G = GC (max gen)"
        Def:<I159>(#822)
  N806.                    IND      
                               Use:<I159>(#823) *
        Def:<I160>(#824)
  N808.                    PUTARG_REG
                               Use:<I160>(#826) Fixed:rcx(#825) *
        Def:<I161>(#828) rcx
  N810.                    CALL     
                               Use:<I161>(#830) Fixed:rcx(#829) *
        Kill: rax rcx rdx r8 r9 r10 r11 
  N812.                    IL_OFFSET IL offset: 0x1a3
  N814.                    NO_OP    
  N816.                    IL_OFFSET IL offset: 0x1a4
  N818.                    CNS_INT(h) 0xBE2A3228 "   R = clear the running flag to stop the consumer thread"
        Def:<I162>(#838)
  N820.                    IND      
                               Use:<I162>(#839) *
        Def:<I163>(#840)
  N822.                    PUTARG_REG
                               Use:<I163>(#842) Fixed:rcx(#841) *
        Def:<I164>(#844) rcx
  N824.                    CALL     
                               Use:<I164>(#846) Fixed:rcx(#845) *
        Kill: rax rcx rdx r8 r9 r10 r11 
  N826.                    IL_OFFSET IL offset: 0x1ae
  N828.                    NO_OP    
  N830.                    IL_OFFSET IL offset: 0x1af
  N832.                    NOP      

BB39 [225..22A) -> BB30 (always), preds={BB29,BB38} succs={BB30}
=====
  N836.                    IL_OFFSET IL offset: 0x225
  N838.                    CNS_INT   1
  N840.                    V17 MEM
  N842.                    IL_OFFSET IL offset: 0x228
  N844.                    NOP      

BB30 [1B1..1CA) -> BB32 (cond), preds={BB39} succs={BB31,BB32}
=====
  N848.                    IL_OFFSET IL offset: 0x1b1
  N850.                    NO_OP    
  N852.                    IL_OFFSET IL offset: 0x1b2
  N854.                    LCL_VAR_ADDR V40 tmp22         NA
        Def:<I165>(#856)
  N856.                    PUTARG_REG
                               Use:<I165>(#858) Fixed:rcx(#857) *
        Def:<I166>(#860) rcx
  N858.                    CALL     
                               Use:<I166>(#862) Fixed:rcx(#861) *
        Kill: rax rcx rdx r8 r9 r10 r11 
  N860.                    IL_OFFSET IL offset: 0x1b7
  N862.                    V40 MEM
  N864.                    LCL_VAR_ADDR V12 loc10         NA
  N866.                    STORE_BLK
        Def:<T167>(#870)
                               Use:<T167>(#871) *
  N868.                    IL_OFFSET IL offset: 0x1b9
  N870.                    LCL_VAR_ADDR V12 loc10         NA
        Def:<I168>(#872)
  N872.                    PUTARG_REG
                               Use:<I168>(#874) Fixed:rcx(#873) *
        Def:<I169>(#876) rcx
  N874.                    CALL     
                               Use:<I169>(#878) Fixed:rcx(#877) *
        Kill: rax rcx rdx r8 r9 r10 r11 
        Def:<I170>(#887) rax
  N876.                    V41 MEM
                               Use:<I170>(#888) *
  N878.                    IL_OFFSET IL offset: 0x1c0
  N880.                    V41 MEM
  N882.                    CNS_INT   71
  N884.                    EQ       
        Def:<I171>(#889)
  N886.                    V13 MEM
                               Use:<I171>(#890) *
  N888.                    IL_OFFSET IL offset: 0x1c6
  N890.                    V13 MEM
  N892.                    CNS_INT   0
  N894.                    EQ       
  N896.                    JTRUE    

BB31 [1CA..1D9) -> BB38 (always), preds={BB30} succs={BB38}
=====
  N900.                    IL_OFFSET IL offset: 0x1ca
  N902.                    NO_OP    
  N904.                    IL_OFFSET IL offset: 0x1cb
  N906.                    CALL     
        Kill: rax rcx rdx r8 r9 r10 r11 
        Def:<I172>(#900) rax
  N908.                    V45 MEM
                               Use:<I172>(#901) *
  N910.                    IL_OFFSET IL offset: 0x1d0
  N912.                    V45 MEM
        Def:<I173>(#902)
  N914.                    PUTARG_REG
                               Use:<I173>(#904) Fixed:rcx(#903) *
        Def:<I174>(#906) rcx
  N916.                    CALL     
                               Use:<I174>(#908) Fixed:rcx(#907) *
        Kill: rax rcx rdx r8 r9 r10 r11 
  N918.                    IL_OFFSET IL offset: 0x1d5
  N920.                    NO_OP    
  N922.                    IL_OFFSET IL offset: 0x1d6
  N924.                    NO_OP    
  N926.                    IL_OFFSET IL offset: 0x1d7
  N928.                    NOP      

BB32 [1D9..1EA) -> BB34 (cond), preds={BB30} succs={BB33,BB34}
=====
  N932.                    IL_OFFSET IL offset: 0x1d9
  N934.                    LCL_VAR_ADDR V12 loc10         NA
        Def:<I175>(#917)
  N936.                    PUTARG_REG
                               Use:<I175>(#919) Fixed:rcx(#918) *
        Def:<I176>(#921) rcx
  N938.                    CALL     
                               Use:<I176>(#923) Fixed:rcx(#922) *
        Kill: rax rcx rdx r8 r9 r10 r11 
        Def:<I177>(#932) rax
  N940.                    V42 MEM
                               Use:<I177>(#933) *
  N942.                    IL_OFFSET IL offset: 0x1e0
  N944.                    V42 MEM
  N946.                    CNS_INT   72
  N948.                    EQ       
        Def:<I178>(#934)
  N950.                    V14 MEM
                               Use:<I178>(#935) *
  N952.                    IL_OFFSET IL offset: 0x1e6
  N954.                    V14 MEM
  N956.                    CNS_INT   0
  N958.                    EQ       
  N960.                    JTRUE    

BB33 [1EA..1F4) -> BB38 (always), preds={BB32} succs={BB38}
=====
  N964.                    IL_OFFSET IL offset: 0x1ea
  N966.                    NO_OP    
  N968.                    IL_OFFSET IL offset: 0x1eb
  N970.                    CALL     
        Kill: rax rcx rdx r8 r9 r10 r11 
  N972.                    IL_OFFSET IL offset: 0x1f0
  N974.                    NO_OP    
  N976.                    IL_OFFSET IL offset: 0x1f1
  N978.                    NO_OP    
  N980.                    IL_OFFSET IL offset: 0x1f2
  N982.                    NOP      

BB34 [1F4..205) -> BB36 (cond), preds={BB32} succs={BB35,BB36}
=====
  N986.                    IL_OFFSET IL offset: 0x1f4
  N988.                    LCL_VAR_ADDR V12 loc10         NA
        Def:<I179>(#945)
  N990.                    PUTARG_REG
                               Use:<I179>(#947) Fixed:rcx(#946) *
        Def:<I180>(#949) rcx
  N992.                    CALL     
                               Use:<I180>(#951) Fixed:rcx(#950) *
        Kill: rax rcx rdx r8 r9 r10 r11 
        Def:<I181>(#960) rax
  N994.                    V43 MEM
                               Use:<I181>(#961) *
  N996.                    IL_OFFSET IL offset: 0x1fb
  N998.                    V43 MEM
  N1000.                    CNS_INT   82
  N1002.                    EQ       
        Def:<I182>(#962)
  N1004.                    V15 MEM
                               Use:<I182>(#963) *
  N1006.                    IL_OFFSET IL offset: 0x201
  N1008.                    V15 MEM
  N1010.                    CNS_INT   0
  N1012.                    EQ       
  N1014.                    JTRUE    

BB35 [205..210) -> BB38 (always), preds={BB34} succs={BB38}
=====
  N1018.                    IL_OFFSET IL offset: 0x205
  N1020.                    NO_OP    
  N1022.                    IL_OFFSET IL offset: 0x206
  N1024.                    V00 MEM
        Def:<I183>(#965)
  N1026.                    LEA(b+16)
  N1028.                    CNS_INT   0
  N1030.                    STOREIND 
                               Use:<I183>(#966) *
  N1032.                    IL_OFFSET IL offset: 0x20d
  N1034.                    NO_OP    
  N1036.                    IL_OFFSET IL offset: 0x20e
  N1038.                    NOP      

BB36 [210..221) -> BB38 (cond), preds={BB34} succs={BB37,BB38}
=====
  N1042.                    IL_OFFSET IL offset: 0x210
  N1044.                    LCL_VAR_ADDR V12 loc10         NA
        Def:<I184>(#968)
  N1046.                    PUTARG_REG
                               Use:<I184>(#970) Fixed:rcx(#969) *
        Def:<I185>(#972) rcx
  N1048.                    CALL     
                               Use:<I185>(#974) Fixed:rcx(#973) *
        Kill: rax rcx rdx r8 r9 r10 r11 
        Def:<I186>(#983) rax
  N1050.                    V44 MEM
                               Use:<I186>(#984) *
  N1052.                    IL_OFFSET IL offset: 0x217
  N1054.                    V44 MEM
  N1056.                    CNS_INT   81
  N1058.                    EQ       
        Def:<I187>(#985)
  N1060.                    V16 MEM
                               Use:<I187>(#986) *
  N1062.                    IL_OFFSET IL offset: 0x21d
  N1064.                    V16 MEM
  N1066.                    CNS_INT   0
  N1068.                    EQ       
  N1070.                    JTRUE    

BB37 [221..224) -> BB40 (always), preds={BB36} succs={BB40}
=====
  N1074.                    IL_OFFSET IL offset: 0x221
  N1076.                    NO_OP    
  N1078.                    IL_OFFSET IL offset: 0x222
  N1080.                    NOP      

BB38 [224..225), preds={BB31,BB33,BB35,BB36} succs={BB39}
=====
  N1084.                    IL_OFFSET IL offset: 0x224
  N1086.                    NO_OP    

BB40 [22A..232) (return), preds={BB37} succs={}
=====
  N1090.                    IL_OFFSET IL offset: 0x22a
  N1092.                    V00 MEM
        Def:<I188>(#990)
  N1094.                    LEA(b+16)
  N1096.                    CNS_INT   0
  N1098.                    STOREIND 
                               Use:<I188>(#991) *
  N1100.                    IL_OFFSET IL offset: 0x231
  N1102.                    RETURN   




Linear scan intervals after buildIntervals:
Interval  0: long RefPositions {#20@31 #21@32} physReg:NA Preferences=[rax]
Interval  1: long RefPositions {#22@37 #23@38} physReg:NA Preferences=[allIntButFP]
Interval  2: byref RefPositions {#24@43 #26@44} physReg:NA Preferences=[rcx]
Interval  3: byref RefPositions {#28@45 #30@46} physReg:NA Preferences=[rcx]
Interval  4: ref RefPositions {#39@47 #40@48} physReg:NA Preferences=[rax]
Interval  5: long (constant) RefPositions {#41@53 #42@54} physReg:NA Preferences=[allIntButFP]
Interval  6: ref RefPositions {#43@55 #45@56} physReg:NA Preferences=[rdx]
Interval  7: ref RefPositions {#47@57 #54@62} physReg:NA Preferences=[rdx]
Interval  8: ref RefPositions {#48@59 #50@60} physReg:NA Preferences=[rcx]
Interval  9: ref RefPositions {#52@61 #56@62} physReg:NA Preferences=[rcx]
Interval 10: ref RefPositions {#65@63 #66@64} physReg:NA Preferences=[rax]
Interval 11: ref RefPositions {#67@69 #69@70} physReg:NA Preferences=[rcx]
Interval 12: ref RefPositions {#71@71 #73@72} physReg:NA Preferences=[rcx]
Interval 13: long (constant) RefPositions {#81@81 #83@82} physReg:NA Preferences=[rcx]
Interval 14: long RefPositions {#85@83 #87@84} physReg:NA Preferences=[rcx]
Interval 15: ref RefPositions {#96@85 #97@86} physReg:NA Preferences=[rax]
Interval 16: ref RefPositions {#98@89 #100@90} physReg:NA Preferences=[rcx]
Interval 17: ref RefPositions {#102@91 #104@92} physReg:NA Preferences=[rcx]
Interval 18: ref RefPositions {#112@97 #113@98} physReg:NA Preferences=[allIntButFP]
Interval 19: byref RefPositions {#114@99 #117@102} physReg:NA Preferences=[rcx]
Interval 20: ref RefPositions {#115@101 #119@102} physReg:NA Preferences=[rdx]
Interval 21: long (constant) RefPositions {#133@107 #135@108} physReg:NA Preferences=[rcx]
Interval 22: long RefPositions {#137@109 #139@110} physReg:NA Preferences=[rcx]
Interval 23: ref RefPositions {#148@111 #149@112} physReg:NA Preferences=[rax]
Interval 24: ref RefPositions {#150@115 #151@118} physReg:NA Preferences=[allIntButFP]
Interval 25: ref RefPositions {#152@119 #153@122} physReg:NA Preferences=[allIntButFP]
Interval 26: ref RefPositions {#154@123 #155@124} physReg:NA Preferences=[allIntButFP]
Interval 27: ref RefPositions {#156@127 #158@128} physReg:NA Preferences=[rcx]
Interval 28: ref RefPositions {#160@129 #162@130} physReg:NA Preferences=[rcx]
Interval 29: ref RefPositions {#170@135 #171@136} physReg:NA Preferences=[allIntButFP]
Interval 30: byref RefPositions {#172@137 #175@140} physReg:NA Preferences=[rcx]
Interval 31: ref RefPositions {#173@139 #177@140} physReg:NA Preferences=[rdx]
Interval 32: long (constant) RefPositions {#191@145 #193@146} physReg:NA Preferences=[rcx]
Interval 33: long RefPositions {#195@147 #197@148} physReg:NA Preferences=[rcx]
Interval 34: ref RefPositions {#206@149 #207@150} physReg:NA Preferences=[rax]
Interval 35: ref RefPositions {#208@153 #210@154} physReg:NA Preferences=[rcx]
Interval 36: ref RefPositions {#212@155 #224@164} physReg:NA Preferences=[rcx]
Interval 37: ref RefPositions {#213@157 #215@158} physReg:NA Preferences=[rdx]
Interval 38: ref RefPositions {#217@159 #226@164} physReg:NA Preferences=[rdx]
Interval 39: long (constant) RefPositions {#218@161 #220@162} physReg:NA Preferences=[r8]
Interval 40: long RefPositions {#222@163 #228@164} physReg:NA Preferences=[r8]
Interval 41: long (constant) RefPositions {#236@169 #238@170} physReg:NA Preferences=[rcx]
Interval 42: long RefPositions {#240@171 #242@172} physReg:NA Preferences=[rcx]
Interval 43: ref RefPositions {#251@173 #252@174} physReg:NA Preferences=[rax]
Interval 44: ref RefPositions {#253@177 #255@178} physReg:NA Preferences=[rcx]
Interval 45: ref RefPositions {#257@179 #264@184} physReg:NA Preferences=[rcx]
Interval 46: ref RefPositions {#258@181 #260@182} physReg:NA Preferences=[rdx]
Interval 47: ref RefPositions {#262@183 #266@184} physReg:NA Preferences=[rdx]
Interval 48: ref RefPositions {#274@189 #275@190} physReg:NA Preferences=[allIntButFP]
Interval 49: ref RefPositions {#276@195 #278@196} physReg:NA Preferences=[rcx]
Interval 50: ref RefPositions {#280@197 #282@198} physReg:NA Preferences=[rcx]
Interval 51: long RefPositions {#298@207 #299@208} physReg:NA Preferences=[rax]
Interval 52: long RefPositions {#300@213 #301@214} physReg:NA Preferences=[allIntButFP]
Interval 53: byref RefPositions {#302@219 #304@220} physReg:NA Preferences=[rcx]
Interval 54: byref RefPositions {#306@221 #308@222} physReg:NA Preferences=[rcx]
Interval 55: ref RefPositions {#317@223 #318@224} physReg:NA Preferences=[rax]
Interval 56: long (constant) RefPositions {#319@229 #320@230} physReg:NA Preferences=[allIntButFP]
Interval 57: ref RefPositions {#321@231 #323@232} physReg:NA Preferences=[rdx]
Interval 58: ref RefPositions {#325@233 #332@238} physReg:NA Preferences=[rdx]
Interval 59: ref RefPositions {#326@235 #328@236} physReg:NA Preferences=[rcx]
Interval 60: ref RefPositions {#330@237 #334@238} physReg:NA Preferences=[rcx]
Interval 61: ref RefPositions {#343@239 #344@240} physReg:NA Preferences=[rax]
Interval 62: ref RefPositions {#345@245 #347@246} physReg:NA Preferences=[rcx]
Interval 63: ref RefPositions {#349@247 #351@248} physReg:NA Preferences=[rcx]
Interval 64: int (constant) RefPositions {#359@257 #360@258} physReg:NA Preferences=[allIntButFP]
Interval 65: int RefPositions {#362@273 #363@274} physReg:NA Preferences=[allIntButFP]
Interval 66: ref RefPositions {#365@295 #366@298} physReg:NA Preferences=[allIntButFP]
Interval 67: ref RefPositions {#367@299 #368@300} physReg:NA Preferences=[allIntButFP]
Interval 68: int (constant) RefPositions {#369@305 #370@306} physReg:NA Preferences=[allIntButFP]
Interval 69: long RefPositions {#372@313 #374@314} physReg:NA Preferences=[rdx]
Interval 70: long RefPositions {#376@315 #383@320} physReg:NA Preferences=[rdx]
Interval 71: ref RefPositions {#377@317 #379@318} physReg:NA Preferences=[rcx]
Interval 72: ref RefPositions {#381@319 #385@320} physReg:NA Preferences=[rcx]
Interval 73: long (constant) RefPositions {#393@333 #395@334} physReg:NA Preferences=[rcx]
Interval 74: long RefPositions {#397@335 #399@336} physReg:NA Preferences=[rcx]
Interval 75: ref RefPositions {#408@337 #409@338} physReg:NA Preferences=[rax]
Interval 76: ref RefPositions {#410@341 #411@344} physReg:NA Preferences=[allIntButFP]
Interval 77: ref RefPositions {#412@345 #413@348} physReg:NA Preferences=[allIntButFP]
Interval 78: ref RefPositions {#414@349 #415@350} physReg:NA Preferences=[allIntButFP]
Interval 79: ref RefPositions {#416@353 #418@354} physReg:NA Preferences=[rcx]
Interval 80: ref RefPositions {#420@355 #422@356} physReg:NA Preferences=[rcx]
Interval 81: ref RefPositions {#430@361 #431@362} physReg:NA Preferences=[allIntButFP]
Interval 82: byref RefPositions {#432@363 #435@366} physReg:NA Preferences=[rcx]
Interval 83: ref RefPositions {#433@365 #437@366} physReg:NA Preferences=[rdx]
Interval 84: ref RefPositions {#451@371 #452@374} physReg:NA Preferences=[allIntButFP]
Interval 85: ref RefPositions {#453@375 #454@376} physReg:NA Preferences=[allIntButFP]
Interval 86: byref RefPositions {#455@377 #464@392} physReg:NA Preferences=[rcx]
Interval 87: ref RefPositions {#456@379 #457@382} physReg:NA Preferences=[allIntButFP]
Interval 88: ref RefPositions {#458@383 #459@386} physReg:NA Preferences=[allIntButFP]
Interval 89: ref RefPositions {#460@387 #461@390} physReg:NA Preferences=[allIntButFP]
Interval 90: ref RefPositions {#462@391 #466@392} physReg:NA Preferences=[rdx]
Interval 91: long (constant) RefPositions {#480@397 #482@398} physReg:NA Preferences=[rcx]
Interval 92: long RefPositions {#484@399 #486@400} physReg:NA Preferences=[rcx]
Interval 93: ref RefPositions {#495@401 #496@402} physReg:NA Preferences=[rax]
Interval 94: ref RefPositions {#497@405 #498@408} physReg:NA Preferences=[allIntButFP]
Interval 95: ref RefPositions {#499@409 #500@412} physReg:NA Preferences=[allIntButFP]
Interval 96: ref RefPositions {#501@413 #502@414} physReg:NA Preferences=[allIntButFP]
Interval 97: ref RefPositions {#503@417 #505@418} physReg:NA Preferences=[rcx]
Interval 98: ref RefPositions {#507@419 #509@420} physReg:NA Preferences=[rcx]
Interval 99: ref RefPositions {#517@425 #518@426} physReg:NA Preferences=[allIntButFP]
Interval 100: byref RefPositions {#519@427 #522@430} physReg:NA Preferences=[rcx]
Interval 101: ref RefPositions {#520@429 #524@430} physReg:NA Preferences=[rdx]
Interval 102: int RefPositions {#540@447 #541@448} physReg:NA Preferences=[allIntButFP]
Interval 103: int RefPositions {#542@449 #543@452} physReg:NA Preferences=[allIntButFP]
Interval 104: ref RefPositions {#545@461 #547@462} physReg:NA Preferences=[rcx]
Interval 105: ref RefPositions {#549@463 #551@464} physReg:NA Preferences=[rcx]
Interval 106: int RefPositions {#562@487 #563@490} physReg:NA Preferences=[allIntButFP] RelatedInterval <I107>
Interval 107: int RefPositions {#564@491 #565@492} physReg:NA Preferences=[allIntButFP]
Interval 108: long RefPositions {#575@499 #576@500} physReg:NA Preferences=[rax]
Interval 109: long RefPositions {#577@505 #578@506} physReg:NA Preferences=[allIntButFP]
Interval 110: byref RefPositions {#579@511 #581@512} physReg:NA Preferences=[rcx]
Interval 111: byref RefPositions {#583@513 #585@514} physReg:NA Preferences=[rcx]
Interval 112: ref RefPositions {#594@515 #595@516} physReg:NA Preferences=[rax]
Interval 113: long (constant) RefPositions {#596@521 #597@522} physReg:NA Preferences=[allIntButFP]
Interval 114: ref RefPositions {#598@523 #600@524} physReg:NA Preferences=[rdx]
Interval 115: ref RefPositions {#602@525 #609@530} physReg:NA Preferences=[rdx]
Interval 116: ref RefPositions {#603@527 #605@528} physReg:NA Preferences=[rcx]
Interval 117: ref RefPositions {#607@529 #611@530} physReg:NA Preferences=[rcx]
Interval 118: ref RefPositions {#620@531 #621@532} physReg:NA Preferences=[rax]
Interval 119: ref RefPositions {#622@537 #624@538} physReg:NA Preferences=[rcx]
Interval 120: ref RefPositions {#626@539 #628@540} physReg:NA Preferences=[rcx]
Interval 121: ref RefPositions {#638@571 #639@574} physReg:NA Preferences=[allIntButFP]
Interval 122: ref RefPositions {#640@575 #641@576} physReg:NA Preferences=[allIntButFP]
Interval 123: int (constant) RefPositions {#642@581 #643@582} physReg:NA Preferences=[allIntButFP]
Interval 124: long RefPositions {#645@589 #647@590} physReg:NA Preferences=[rdx]
Interval 125: long RefPositions {#649@591 #656@596} physReg:NA Preferences=[rdx]
Interval 126: ref RefPositions {#650@593 #652@594} physReg:NA Preferences=[rcx]
Interval 127: ref RefPositions {#654@595 #658@596} physReg:NA Preferences=[rcx]
Interval 128: ref RefPositions {#666@609 #667@612} physReg:NA Preferences=[allIntButFP]
Interval 129: ref RefPositions {#668@613 #669@616} physReg:NA Preferences=[allIntButFP]
Interval 130: ref RefPositions {#670@617 #674@628} physReg:NA Preferences=[allIntButFP]
Interval 131: ref RefPositions {#671@619 #672@622} physReg:NA Preferences=[allIntButFP]
Interval 132: ref RefPositions {#673@623 #675@628} physReg:NA Preferences=[allIntButFP]
Interval 133: int RefPositions {#676@629 #677@630} physReg:NA Preferences=[allIntButFP]
Interval 134: int RefPositions {#683@671 #684@672} physReg:NA Preferences=[allIntButFP]
Interval 135: int RefPositions {#685@673 #686@676} physReg:NA Preferences=[allIntButFP]
Interval 136: ref RefPositions {#688@685 #690@686} physReg:NA Preferences=[rcx]
Interval 137: ref RefPositions {#692@687 #694@688} physReg:NA Preferences=[rcx]
Interval 138: int (constant) RefPositions {#706@709 #708@710} physReg:NA Preferences=[rcx]
Interval 139: int RefPositions {#710@711 #712@712} physReg:NA Preferences=[rcx]
Interval 140: long RefPositions {#729@727 #730@728} physReg:NA Preferences=[rax]
Interval 141: long RefPositions {#731@733 #732@734} physReg:NA Preferences=[allIntButFP]
Interval 142: byref RefPositions {#733@739 #735@740} physReg:NA Preferences=[rcx]
Interval 143: byref RefPositions {#737@741 #739@742} physReg:NA Preferences=[rcx]
Interval 144: ref RefPositions {#748@743 #749@744} physReg:NA Preferences=[rax]
Interval 145: long (constant) RefPositions {#750@749 #751@750} physReg:NA Preferences=[allIntButFP]
Interval 146: ref RefPositions {#752@751 #754@752} physReg:NA Preferences=[rdx]
Interval 147: ref RefPositions {#756@753 #763@758} physReg:NA Preferences=[rdx]
Interval 148: ref RefPositions {#757@755 #759@756} physReg:NA Preferences=[rcx]
Interval 149: ref RefPositions {#761@757 #765@758} physReg:NA Preferences=[rcx]
Interval 150: ref RefPositions {#774@759 #775@760} physReg:NA Preferences=[rax]
Interval 151: ref RefPositions {#776@765 #778@766} physReg:NA Preferences=[rcx]
Interval 152: ref RefPositions {#780@767 #782@768} physReg:NA Preferences=[rcx]
Interval 153: long (constant) RefPositions {#790@777 #791@778} physReg:NA Preferences=[allIntButFP]
Interval 154: ref RefPositions {#792@779 #794@780} physReg:NA Preferences=[rcx]
Interval 155: ref RefPositions {#796@781 #798@782} physReg:NA Preferences=[rcx]
Interval 156: long (constant) RefPositions {#806@791 #807@792} physReg:NA Preferences=[allIntButFP]
Interval 157: ref RefPositions {#808@793 #810@794} physReg:NA Preferences=[rcx]
Interval 158: ref RefPositions {#812@795 #814@796} physReg:NA Preferences=[rcx]
Interval 159: long (constant) RefPositions {#822@805 #823@806} physReg:NA Preferences=[allIntButFP]
Interval 160: ref RefPositions {#824@807 #826@808} physReg:NA Preferences=[rcx]
Interval 161: ref RefPositions {#828@809 #830@810} physReg:NA Preferences=[rcx]
Interval 162: long (constant) RefPositions {#838@819 #839@820} physReg:NA Preferences=[allIntButFP]
Interval 163: ref RefPositions {#840@821 #842@822} physReg:NA Preferences=[rcx]
Interval 164: ref RefPositions {#844@823 #846@824} physReg:NA Preferences=[rcx]
Interval 165: long RefPositions {#856@855 #858@856} physReg:NA Preferences=[rcx]
Interval 166: long RefPositions {#860@857 #862@858} physReg:NA Preferences=[rcx]
Interval 167: int (INTERNAL) RefPositions {#870@866 #871@866} physReg:NA Preferences=[allIntButFP]
Interval 168: byref RefPositions {#872@871 #874@872} physReg:NA Preferences=[rcx]
Interval 169: byref RefPositions {#876@873 #878@874} physReg:NA Preferences=[rcx]
Interval 170: int RefPositions {#887@875 #888@876} physReg:NA Preferences=[rax]
Interval 171: int RefPositions {#889@885 #890@886} physReg:NA Preferences=[allIntButFP]
Interval 172: int RefPositions {#900@907 #901@908} physReg:NA Preferences=[rax]
Interval 173: int RefPositions {#902@913 #904@914} physReg:NA Preferences=[rcx]
Interval 174: int RefPositions {#906@915 #908@916} physReg:NA Preferences=[rcx]
Interval 175: byref RefPositions {#917@935 #919@936} physReg:NA Preferences=[rcx]
Interval 176: byref RefPositions {#921@937 #923@938} physReg:NA Preferences=[rcx]
Interval 177: int RefPositions {#932@939 #933@940} physReg:NA Preferences=[rax]
Interval 178: int RefPositions {#934@949 #935@950} physReg:NA Preferences=[allIntButFP]
Interval 179: byref RefPositions {#945@989 #947@990} physReg:NA Preferences=[rcx]
Interval 180: byref RefPositions {#949@991 #951@992} physReg:NA Preferences=[rcx]
Interval 181: int RefPositions {#960@993 #961@994} physReg:NA Preferences=[rax]
Interval 182: int RefPositions {#962@1003 #963@1004} physReg:NA Preferences=[allIntButFP]
Interval 183: ref RefPositions {#965@1025 #966@1030} physReg:NA Preferences=[allIntButFP]
Interval 184: byref RefPositions {#968@1045 #970@1046} physReg:NA Preferences=[rcx]
Interval 185: byref RefPositions {#972@1047 #974@1048} physReg:NA Preferences=[rcx]
Interval 186: int RefPositions {#983@1049 #984@1050} physReg:NA Preferences=[rax]
Interval 187: int RefPositions {#985@1059 #986@1060} physReg:NA Preferences=[allIntButFP]
Interval 188: ref RefPositions {#990@1093 #991@1098} physReg:NA Preferences=[allIntButFP]

*************** In LinearScan::allocateRegisters()

Linear scan intervals before allocateRegisters:
Interval  0: long RefPositions {#20@31 #21@32} physReg:NA Preferences=[rax]
Interval  1: long RefPositions {#22@37 #23@38} physReg:NA Preferences=[allIntButFP]
Interval  2: byref RefPositions {#24@43 #26@44} physReg:NA Preferences=[rcx]
Interval  3: byref RefPositions {#28@45 #30@46} physReg:NA Preferences=[rcx]
Interval  4: ref RefPositions {#39@47 #40@48} physReg:NA Preferences=[rax]
Interval  5: long (constant) RefPositions {#41@53 #42@54} physReg:NA Preferences=[allIntButFP]
Interval  6: ref RefPositions {#43@55 #45@56} physReg:NA Preferences=[rdx]
Interval  7: ref RefPositions {#47@57 #54@62} physReg:NA Preferences=[rdx]
Interval  8: ref RefPositions {#48@59 #50@60} physReg:NA Preferences=[rcx]
Interval  9: ref RefPositions {#52@61 #56@62} physReg:NA Preferences=[rcx]
Interval 10: ref RefPositions {#65@63 #66@64} physReg:NA Preferences=[rax]
Interval 11: ref RefPositions {#67@69 #69@70} physReg:NA Preferences=[rcx]
Interval 12: ref RefPositions {#71@71 #73@72} physReg:NA Preferences=[rcx]
Interval 13: long (constant) RefPositions {#81@81 #83@82} physReg:NA Preferences=[rcx]
Interval 14: long RefPositions {#85@83 #87@84} physReg:NA Preferences=[rcx]
Interval 15: ref RefPositions {#96@85 #97@86} physReg:NA Preferences=[rax]
Interval 16: ref RefPositions {#98@89 #100@90} physReg:NA Preferences=[rcx]
Interval 17: ref RefPositions {#102@91 #104@92} physReg:NA Preferences=[rcx]
Interval 18: ref RefPositions {#112@97 #113@98} physReg:NA Preferences=[allIntButFP]
Interval 19: byref RefPositions {#114@99 #117@102} physReg:NA Preferences=[rcx]
Interval 20: ref RefPositions {#115@101 #119@102} physReg:NA Preferences=[rdx]
Interval 21: long (constant) RefPositions {#133@107 #135@108} physReg:NA Preferences=[rcx]
Interval 22: long RefPositions {#137@109 #139@110} physReg:NA Preferences=[rcx]
Interval 23: ref RefPositions {#148@111 #149@112} physReg:NA Preferences=[rax]
Interval 24: ref RefPositions {#150@115 #151@118} physReg:NA Preferences=[allIntButFP]
Interval 25: ref RefPositions {#152@119 #153@122} physReg:NA Preferences=[allIntButFP]
Interval 26: ref RefPositions {#154@123 #155@124} physReg:NA Preferences=[allIntButFP]
Interval 27: ref RefPositions {#156@127 #158@128} physReg:NA Preferences=[rcx]
Interval 28: ref RefPositions {#160@129 #162@130} physReg:NA Preferences=[rcx]
Interval 29: ref RefPositions {#170@135 #171@136} physReg:NA Preferences=[allIntButFP]
Interval 30: byref RefPositions {#172@137 #175@140} physReg:NA Preferences=[rcx]
Interval 31: ref RefPositions {#173@139 #177@140} physReg:NA Preferences=[rdx]
Interval 32: long (constant) RefPositions {#191@145 #193@146} physReg:NA Preferences=[rcx]
Interval 33: long RefPositions {#195@147 #197@148} physReg:NA Preferences=[rcx]
Interval 34: ref RefPositions {#206@149 #207@150} physReg:NA Preferences=[rax]
Interval 35: ref RefPositions {#208@153 #210@154} physReg:NA Preferences=[rcx]
Interval 36: ref RefPositions {#212@155 #224@164} physReg:NA Preferences=[rcx]
Interval 37: ref RefPositions {#213@157 #215@158} physReg:NA Preferences=[rdx]
Interval 38: ref RefPositions {#217@159 #226@164} physReg:NA Preferences=[rdx]
Interval 39: long (constant) RefPositions {#218@161 #220@162} physReg:NA Preferences=[r8]
Interval 40: long RefPositions {#222@163 #228@164} physReg:NA Preferences=[r8]
Interval 41: long (constant) RefPositions {#236@169 #238@170} physReg:NA Preferences=[rcx]
Interval 42: long RefPositions {#240@171 #242@172} physReg:NA Preferences=[rcx]
Interval 43: ref RefPositions {#251@173 #252@174} physReg:NA Preferences=[rax]
Interval 44: ref RefPositions {#253@177 #255@178} physReg:NA Preferences=[rcx]
Interval 45: ref RefPositions {#257@179 #264@184} physReg:NA Preferences=[rcx]
Interval 46: ref RefPositions {#258@181 #260@182} physReg:NA Preferences=[rdx]
Interval 47: ref RefPositions {#262@183 #266@184} physReg:NA Preferences=[rdx]
Interval 48: ref RefPositions {#274@189 #275@190} physReg:NA Preferences=[allIntButFP]
Interval 49: ref RefPositions {#276@195 #278@196} physReg:NA Preferences=[rcx]
Interval 50: ref RefPositions {#280@197 #282@198} physReg:NA Preferences=[rcx]
Interval 51: long RefPositions {#298@207 #299@208} physReg:NA Preferences=[rax]
Interval 52: long RefPositions {#300@213 #301@214} physReg:NA Preferences=[allIntButFP]
Interval 53: byref RefPositions {#302@219 #304@220} physReg:NA Preferences=[rcx]
Interval 54: byref RefPositions {#306@221 #308@222} physReg:NA Preferences=[rcx]
Interval 55: ref RefPositions {#317@223 #318@224} physReg:NA Preferences=[rax]
Interval 56: long (constant) RefPositions {#319@229 #320@230} physReg:NA Preferences=[allIntButFP]
Interval 57: ref RefPositions {#321@231 #323@232} physReg:NA Preferences=[rdx]
Interval 58: ref RefPositions {#325@233 #332@238} physReg:NA Preferences=[rdx]
Interval 59: ref RefPositions {#326@235 #328@236} physReg:NA Preferences=[rcx]
Interval 60: ref RefPositions {#330@237 #334@238} physReg:NA Preferences=[rcx]
Interval 61: ref RefPositions {#343@239 #344@240} physReg:NA Preferences=[rax]
Interval 62: ref RefPositions {#345@245 #347@246} physReg:NA Preferences=[rcx]
Interval 63: ref RefPositions {#349@247 #351@248} physReg:NA Preferences=[rcx]
Interval 64: int (constant) RefPositions {#359@257 #360@258} physReg:NA Preferences=[allIntButFP]
Interval 65: int RefPositions {#362@273 #363@274} physReg:NA Preferences=[allIntButFP]
Interval 66: ref RefPositions {#365@295 #366@298} physReg:NA Preferences=[allIntButFP]
Interval 67: ref RefPositions {#367@299 #368@300} physReg:NA Preferences=[allIntButFP]
Interval 68: int (constant) RefPositions {#369@305 #370@306} physReg:NA Preferences=[allIntButFP]
Interval 69: long RefPositions {#372@313 #374@314} physReg:NA Preferences=[rdx]
Interval 70: long RefPositions {#376@315 #383@320} physReg:NA Preferences=[rdx]
Interval 71: ref RefPositions {#377@317 #379@318} physReg:NA Preferences=[rcx]
Interval 72: ref RefPositions {#381@319 #385@320} physReg:NA Preferences=[rcx]
Interval 73: long (constant) RefPositions {#393@333 #395@334} physReg:NA Preferences=[rcx]
Interval 74: long RefPositions {#397@335 #399@336} physReg:NA Preferences=[rcx]
Interval 75: ref RefPositions {#408@337 #409@338} physReg:NA Preferences=[rax]
Interval 76: ref RefPositions {#410@341 #411@344} physReg:NA Preferences=[allIntButFP]
Interval 77: ref RefPositions {#412@345 #413@348} physReg:NA Preferences=[allIntButFP]
Interval 78: ref RefPositions {#414@349 #415@350} physReg:NA Preferences=[allIntButFP]
Interval 79: ref RefPositions {#416@353 #418@354} physReg:NA Preferences=[rcx]
Interval 80: ref RefPositions {#420@355 #422@356} physReg:NA Preferences=[rcx]
Interval 81: ref RefPositions {#430@361 #431@362} physReg:NA Preferences=[allIntButFP]
Interval 82: byref RefPositions {#432@363 #435@366} physReg:NA Preferences=[rcx]
Interval 83: ref RefPositions {#433@365 #437@366} physReg:NA Preferences=[rdx]
Interval 84: ref RefPositions {#451@371 #452@374} physReg:NA Preferences=[allIntButFP]
Interval 85: ref RefPositions {#453@375 #454@376} physReg:NA Preferences=[allIntButFP]
Interval 86: byref RefPositions {#455@377 #464@392} physReg:NA Preferences=[rcx]
Interval 87: ref RefPositions {#456@379 #457@382} physReg:NA Preferences=[allIntButFP]
Interval 88: ref RefPositions {#458@383 #459@386} physReg:NA Preferences=[allIntButFP]
Interval 89: ref RefPositions {#460@387 #461@390} physReg:NA Preferences=[allIntButFP]
Interval 90: ref RefPositions {#462@391 #466@392} physReg:NA Preferences=[rdx]
Interval 91: long (constant) RefPositions {#480@397 #482@398} physReg:NA Preferences=[rcx]
Interval 92: long RefPositions {#484@399 #486@400} physReg:NA Preferences=[rcx]
Interval 93: ref RefPositions {#495@401 #496@402} physReg:NA Preferences=[rax]
Interval 94: ref RefPositions {#497@405 #498@408} physReg:NA Preferences=[allIntButFP]
Interval 95: ref RefPositions {#499@409 #500@412} physReg:NA Preferences=[allIntButFP]
Interval 96: ref RefPositions {#501@413 #502@414} physReg:NA Preferences=[allIntButFP]
Interval 97: ref RefPositions {#503@417 #505@418} physReg:NA Preferences=[rcx]
Interval 98: ref RefPositions {#507@419 #509@420} physReg:NA Preferences=[rcx]
Interval 99: ref RefPositions {#517@425 #518@426} physReg:NA Preferences=[allIntButFP]
Interval 100: byref RefPositions {#519@427 #522@430} physReg:NA Preferences=[rcx]
Interval 101: ref RefPositions {#520@429 #524@430} physReg:NA Preferences=[rdx]
Interval 102: int RefPositions {#540@447 #541@448} physReg:NA Preferences=[allIntButFP]
Interval 103: int RefPositions {#542@449 #543@452} physReg:NA Preferences=[allIntButFP]
Interval 104: ref RefPositions {#545@461 #547@462} physReg:NA Preferences=[rcx]
Interval 105: ref RefPositions {#549@463 #551@464} physReg:NA Preferences=[rcx]
Interval 106: int RefPositions {#562@487 #563@490} physReg:NA Preferences=[allIntButFP] RelatedInterval <I107>
Interval 107: int RefPositions {#564@491 #565@492} physReg:NA Preferences=[allIntButFP]
Interval 108: long RefPositions {#575@499 #576@500} physReg:NA Preferences=[rax]
Interval 109: long RefPositions {#577@505 #578@506} physReg:NA Preferences=[allIntButFP]
Interval 110: byref RefPositions {#579@511 #581@512} physReg:NA Preferences=[rcx]
Interval 111: byref RefPositions {#583@513 #585@514} physReg:NA Preferences=[rcx]
Interval 112: ref RefPositions {#594@515 #595@516} physReg:NA Preferences=[rax]
Interval 113: long (constant) RefPositions {#596@521 #597@522} physReg:NA Preferences=[allIntButFP]
Interval 114: ref RefPositions {#598@523 #600@524} physReg:NA Preferences=[rdx]
Interval 115: ref RefPositions {#602@525 #609@530} physReg:NA Preferences=[rdx]
Interval 116: ref RefPositions {#603@527 #605@528} physReg:NA Preferences=[rcx]
Interval 117: ref RefPositions {#607@529 #611@530} physReg:NA Preferences=[rcx]
Interval 118: ref RefPositions {#620@531 #621@532} physReg:NA Preferences=[rax]
Interval 119: ref RefPositions {#622@537 #624@538} physReg:NA Preferences=[rcx]
Interval 120: ref RefPositions {#626@539 #628@540} physReg:NA Preferences=[rcx]
Interval 121: ref RefPositions {#638@571 #639@574} physReg:NA Preferences=[allIntButFP]
Interval 122: ref RefPositions {#640@575 #641@576} physReg:NA Preferences=[allIntButFP]
Interval 123: int (constant) RefPositions {#642@581 #643@582} physReg:NA Preferences=[allIntButFP]
Interval 124: long RefPositions {#645@589 #647@590} physReg:NA Preferences=[rdx]
Interval 125: long RefPositions {#649@591 #656@596} physReg:NA Preferences=[rdx]
Interval 126: ref RefPositions {#650@593 #652@594} physReg:NA Preferences=[rcx]
Interval 127: ref RefPositions {#654@595 #658@596} physReg:NA Preferences=[rcx]
Interval 128: ref RefPositions {#666@609 #667@612} physReg:NA Preferences=[allIntButFP]
Interval 129: ref RefPositions {#668@613 #669@616} physReg:NA Preferences=[allIntButFP]
Interval 130: ref RefPositions {#670@617 #674@628} physReg:NA Preferences=[allIntButFP]
Interval 131: ref RefPositions {#671@619 #672@622} physReg:NA Preferences=[allIntButFP]
Interval 132: ref RefPositions {#673@623 #675@628} physReg:NA Preferences=[allIntButFP]
Interval 133: int RefPositions {#676@629 #677@630} physReg:NA Preferences=[allIntButFP]
Interval 134: int RefPositions {#683@671 #684@672} physReg:NA Preferences=[allIntButFP]
Interval 135: int RefPositions {#685@673 #686@676} physReg:NA Preferences=[allIntButFP]
Interval 136: ref RefPositions {#688@685 #690@686} physReg:NA Preferences=[rcx]
Interval 137: ref RefPositions {#692@687 #694@688} physReg:NA Preferences=[rcx]
Interval 138: int (constant) RefPositions {#706@709 #708@710} physReg:NA Preferences=[rcx]
Interval 139: int RefPositions {#710@711 #712@712} physReg:NA Preferences=[rcx]
Interval 140: long RefPositions {#729@727 #730@728} physReg:NA Preferences=[rax]
Interval 141: long RefPositions {#731@733 #732@734} physReg:NA Preferences=[allIntButFP]
Interval 142: byref RefPositions {#733@739 #735@740} physReg:NA Preferences=[rcx]
Interval 143: byref RefPositions {#737@741 #739@742} physReg:NA Preferences=[rcx]
Interval 144: ref RefPositions {#748@743 #749@744} physReg:NA Preferences=[rax]
Interval 145: long (constant) RefPositions {#750@749 #751@750} physReg:NA Preferences=[allIntButFP]
Interval 146: ref RefPositions {#752@751 #754@752} physReg:NA Preferences=[rdx]
Interval 147: ref RefPositions {#756@753 #763@758} physReg:NA Preferences=[rdx]
Interval 148: ref RefPositions {#757@755 #759@756} physReg:NA Preferences=[rcx]
Interval 149: ref RefPositions {#761@757 #765@758} physReg:NA Preferences=[rcx]
Interval 150: ref RefPositions {#774@759 #775@760} physReg:NA Preferences=[rax]
Interval 151: ref RefPositions {#776@765 #778@766} physReg:NA Preferences=[rcx]
Interval 152: ref RefPositions {#780@767 #782@768} physReg:NA Preferences=[rcx]
Interval 153: long (constant) RefPositions {#790@777 #791@778} physReg:NA Preferences=[allIntButFP]
Interval 154: ref RefPositions {#792@779 #794@780} physReg:NA Preferences=[rcx]
Interval 155: ref RefPositions {#796@781 #798@782} physReg:NA Preferences=[rcx]
Interval 156: long (constant) RefPositions {#806@791 #807@792} physReg:NA Preferences=[allIntButFP]
Interval 157: ref RefPositions {#808@793 #810@794} physReg:NA Preferences=[rcx]
Interval 158: ref RefPositions {#812@795 #814@796} physReg:NA Preferences=[rcx]
Interval 159: long (constant) RefPositions {#822@805 #823@806} physReg:NA Preferences=[allIntButFP]
Interval 160: ref RefPositions {#824@807 #826@808} physReg:NA Preferences=[rcx]
Interval 161: ref RefPositions {#828@809 #830@810} physReg:NA Preferences=[rcx]
Interval 162: long (constant) RefPositions {#838@819 #839@820} physReg:NA Preferences=[allIntButFP]
Interval 163: ref RefPositions {#840@821 #842@822} physReg:NA Preferences=[rcx]
Interval 164: ref RefPositions {#844@823 #846@824} physReg:NA Preferences=[rcx]
Interval 165: long RefPositions {#856@855 #858@856} physReg:NA Preferences=[rcx]
Interval 166: long RefPositions {#860@857 #862@858} physReg:NA Preferences=[rcx]
Interval 167: int (INTERNAL) RefPositions {#870@866 #871@866} physReg:NA Preferences=[allIntButFP]
Interval 168: byref RefPositions {#872@871 #874@872} physReg:NA Preferences=[rcx]
Interval 169: byref RefPositions {#876@873 #878@874} physReg:NA Preferences=[rcx]
Interval 170: int RefPositions {#887@875 #888@876} physReg:NA Preferences=[rax]
Interval 171: int RefPositions {#889@885 #890@886} physReg:NA Preferences=[allIntButFP]
Interval 172: int RefPositions {#900@907 #901@908} physReg:NA Preferences=[rax]
Interval 173: int RefPositions {#902@913 #904@914} physReg:NA Preferences=[rcx]
Interval 174: int RefPositions {#906@915 #908@916} physReg:NA Preferences=[rcx]
Interval 175: byref RefPositions {#917@935 #919@936} physReg:NA Preferences=[rcx]
Interval 176: byref RefPositions {#921@937 #923@938} physReg:NA Preferences=[rcx]
Interval 177: int RefPositions {#932@939 #933@940} physReg:NA Preferences=[rax]
Interval 178: int RefPositions {#934@949 #935@950} physReg:NA Preferences=[allIntButFP]
Interval 179: byref RefPositions {#945@989 #947@990} physReg:NA Preferences=[rcx]
Interval 180: byref RefPositions {#949@991 #951@992} physReg:NA Preferences=[rcx]
Interval 181: int RefPositions {#960@993 #961@994} physReg:NA Preferences=[rax]
Interval 182: int RefPositions {#962@1003 #963@1004} physReg:NA Preferences=[allIntButFP]
Interval 183: ref RefPositions {#965@1025 #966@1030} physReg:NA Preferences=[allIntButFP]
Interval 184: byref RefPositions {#968@1045 #970@1046} physReg:NA Preferences=[rcx]
Interval 185: byref RefPositions {#972@1047 #974@1048} physReg:NA Preferences=[rcx]
Interval 186: int RefPositions {#983@1049 #984@1050} physReg:NA Preferences=[rax]
Interval 187: int RefPositions {#985@1059 #986@1060} physReg:NA Preferences=[allIntButFP]
Interval 188: ref RefPositions {#990@1093 #991@1098} physReg:NA Preferences=[allIntButFP]

------------
REFPOSITIONS BEFORE ALLOCATION: 
------------
<RefPosition #0   @0   RefTypeBB  BB01 regmask=[] minReg=1 wt=100.00>
<RefPosition #1   @4   RefTypeBB  BB02 regmask=[] minReg=1 wt=100.00>
<RefPosition #2   @16  RefTypeBB  BB03 regmask=[] minReg=1 wt=50.00>
<RefPosition #3   @19  RefTypeKill <Reg:rax>  BB03 regmask=[rax] minReg=1 last wt=50.00>
<RefPosition #4   @19  RefTypeKill <Reg:rcx>  BB03 regmask=[rcx] minReg=1 last wt=50.00>
<RefPosition #5   @19  RefTypeKill <Reg:rdx>  BB03 regmask=[rdx] minReg=1 last wt=50.00>
<RefPosition #6   @19  RefTypeKill <Reg:r8 >  BB03 regmask=[r8] minReg=1 last wt=50.00>
<RefPosition #7   @19  RefTypeKill <Reg:r9 >  BB03 regmask=[r9] minReg=1 last wt=50.00>
<RefPosition #8   @19  RefTypeKill <Reg:r10>  BB03 regmask=[r10] minReg=1 last wt=50.00>
<RefPosition #9   @19  RefTypeKill <Reg:r11>  BB03 regmask=[r11] minReg=1 last wt=50.00>
<RefPosition #10  @20  RefTypeBB  BB04 regmask=[] minReg=1 wt=100.00>
<RefPosition #11  @22  RefTypeBB  BB05 regmask=[] minReg=1 wt=100.00>
<RefPosition #12  @31  RefTypeKill <Reg:rax>  BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #13  @31  RefTypeKill <Reg:rcx>  BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #14  @31  RefTypeKill <Reg:rdx>  BB05 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #15  @31  RefTypeKill <Reg:r8 >  BB05 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #16  @31  RefTypeKill <Reg:r9 >  BB05 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #17  @31  RefTypeKill <Reg:r10>  BB05 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #18  @31  RefTypeKill <Reg:r11>  BB05 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #19  @31  RefTypeFixedReg <Reg:rax>  BB05 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #20  @31  RefTypeDef <Ivl:0> CALL BB05 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #21  @32  RefTypeUse <Ivl:0>  BB05 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #22  @37  RefTypeDef <Ivl:1> LCL_VAR BB05 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #23  @38  RefTypeUse <Ivl:1>  BB05 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #24  @43  RefTypeDef <Ivl:2> LCL_VAR_ADDR BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #25  @44  RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #26  @44  RefTypeUse <Ivl:2>  BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #27  @45  RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #28  @45  RefTypeDef <Ivl:3> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #29  @46  RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #30  @46  RefTypeUse <Ivl:3>  BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #31  @47  RefTypeKill <Reg:rax>  BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #32  @47  RefTypeKill <Reg:rcx>  BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #33  @47  RefTypeKill <Reg:rdx>  BB05 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #34  @47  RefTypeKill <Reg:r8 >  BB05 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #35  @47  RefTypeKill <Reg:r9 >  BB05 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #36  @47  RefTypeKill <Reg:r10>  BB05 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #37  @47  RefTypeKill <Reg:r11>  BB05 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #38  @47  RefTypeFixedReg <Reg:rax>  BB05 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #39  @47  RefTypeDef <Ivl:4> CALL BB05 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #40  @48  RefTypeUse <Ivl:4>  BB05 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #41  @53  RefTypeDef <Ivl:5> CNS_INT BB05 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #42  @54  RefTypeUse <Ivl:5>  BB05 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #43  @55  RefTypeDef <Ivl:6> IND BB05 regmask=[rdx] minReg=1 wt=400.00>
<RefPosition #44  @56  RefTypeFixedReg <Reg:rdx>  BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #45  @56  RefTypeUse <Ivl:6>  BB05 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #46  @57  RefTypeFixedReg <Reg:rdx>  BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #47  @57  RefTypeDef <Ivl:7> PUTARG_REG BB05 regmask=[rdx] minReg=1 fixed wt=400.00>
<RefPosition #48  @59  RefTypeDef <Ivl:8> LCL_VAR BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #49  @60  RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #50  @60  RefTypeUse <Ivl:8>  BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #51  @61  RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #52  @61  RefTypeDef <Ivl:9> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #53  @62  RefTypeFixedReg <Reg:rdx>  BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #54  @62  RefTypeUse <Ivl:7>  BB05 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #55  @62  RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #56  @62  RefTypeUse <Ivl:9>  BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #57  @63  RefTypeKill <Reg:rax>  BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #58  @63  RefTypeKill <Reg:rcx>  BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #59  @63  RefTypeKill <Reg:rdx>  BB05 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #60  @63  RefTypeKill <Reg:r8 >  BB05 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #61  @63  RefTypeKill <Reg:r9 >  BB05 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #62  @63  RefTypeKill <Reg:r10>  BB05 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #63  @63  RefTypeKill <Reg:r11>  BB05 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #64  @63  RefTypeFixedReg <Reg:rax>  BB05 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #65  @63  RefTypeDef <Ivl:10> CALL BB05 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #66  @64  RefTypeUse <Ivl:10>  BB05 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #67  @69  RefTypeDef <Ivl:11> LCL_VAR BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #68  @70  RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #69  @70  RefTypeUse <Ivl:11>  BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #70  @71  RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #71  @71  RefTypeDef <Ivl:12> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #72  @72  RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #73  @72  RefTypeUse <Ivl:12>  BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #74  @73  RefTypeKill <Reg:rax>  BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #75  @73  RefTypeKill <Reg:rcx>  BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #76  @73  RefTypeKill <Reg:rdx>  BB05 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #77  @73  RefTypeKill <Reg:r8 >  BB05 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #78  @73  RefTypeKill <Reg:r9 >  BB05 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #79  @73  RefTypeKill <Reg:r10>  BB05 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #80  @73  RefTypeKill <Reg:r11>  BB05 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #81  @81  RefTypeDef <Ivl:13> CNS_INT BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #82  @82  RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #83  @82  RefTypeUse <Ivl:13>  BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #84  @83  RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #85  @83  RefTypeDef <Ivl:14> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #86  @84  RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #87  @84  RefTypeUse <Ivl:14>  BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #88  @85  RefTypeKill <Reg:rax>  BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #89  @85  RefTypeKill <Reg:rcx>  BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #90  @85  RefTypeKill <Reg:rdx>  BB05 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #91  @85  RefTypeKill <Reg:r8 >  BB05 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #92  @85  RefTypeKill <Reg:r9 >  BB05 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #93  @85  RefTypeKill <Reg:r10>  BB05 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #94  @85  RefTypeKill <Reg:r11>  BB05 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #95  @85  RefTypeFixedReg <Reg:rax>  BB05 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #96  @85  RefTypeDef <Ivl:15> CALL BB05 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #97  @86  RefTypeUse <Ivl:15>  BB05 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #98  @89  RefTypeDef <Ivl:16> LCL_VAR BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #99  @90  RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #100 @90  RefTypeUse <Ivl:16>  BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #101 @91  RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #102 @91  RefTypeDef <Ivl:17> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #103 @92  RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #104 @92  RefTypeUse <Ivl:17>  BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #105 @93  RefTypeKill <Reg:rax>  BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #106 @93  RefTypeKill <Reg:rcx>  BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #107 @93  RefTypeKill <Reg:rdx>  BB05 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #108 @93  RefTypeKill <Reg:r8 >  BB05 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #109 @93  RefTypeKill <Reg:r9 >  BB05 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #110 @93  RefTypeKill <Reg:r10>  BB05 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #111 @93  RefTypeKill <Reg:r11>  BB05 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #112 @97  RefTypeDef <Ivl:18> LCL_VAR BB05 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #113 @98  RefTypeUse <Ivl:18>  BB05 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #114 @99  RefTypeDef <Ivl:19> LEA BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #115 @101 RefTypeDef <Ivl:20> LCL_VAR BB05 regmask=[rdx] minReg=1 wt=400.00>
<RefPosition #116 @102 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #117 @102 RefTypeUse <Ivl:19>  BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #118 @102 RefTypeFixedReg <Reg:rdx>  BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #119 @102 RefTypeUse <Ivl:20>  BB05 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #120 @103 RefTypeKill <Reg:rax>  BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #121 @103 RefTypeKill <Reg:rcx>  BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #122 @103 RefTypeKill <Reg:rdx>  BB05 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #123 @103 RefTypeKill <Reg:r8 >  BB05 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #124 @103 RefTypeKill <Reg:r9 >  BB05 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #125 @103 RefTypeKill <Reg:r10>  BB05 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #126 @103 RefTypeKill <Reg:r11>  BB05 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #127 @103 RefTypeKill <Reg:mm0>  BB05 regmask=[mm0] minReg=1 last wt=100.00>
<RefPosition #128 @103 RefTypeKill <Reg:mm1>  BB05 regmask=[mm1] minReg=1 last wt=100.00>
<RefPosition #129 @103 RefTypeKill <Reg:mm2>  BB05 regmask=[mm2] minReg=1 last wt=100.00>
<RefPosition #130 @103 RefTypeKill <Reg:mm3>  BB05 regmask=[mm3] minReg=1 last wt=100.00>
<RefPosition #131 @103 RefTypeKill <Reg:mm4>  BB05 regmask=[mm4] minReg=1 last wt=100.00>
<RefPosition #132 @103 RefTypeKill <Reg:mm5>  BB05 regmask=[mm5] minReg=1 last wt=100.00>
<RefPosition #133 @107 RefTypeDef <Ivl:21> CNS_INT BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #134 @108 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #135 @108 RefTypeUse <Ivl:21>  BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #136 @109 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #137 @109 RefTypeDef <Ivl:22> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #138 @110 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #139 @110 RefTypeUse <Ivl:22>  BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #140 @111 RefTypeKill <Reg:rax>  BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #141 @111 RefTypeKill <Reg:rcx>  BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #142 @111 RefTypeKill <Reg:rdx>  BB05 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #143 @111 RefTypeKill <Reg:r8 >  BB05 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #144 @111 RefTypeKill <Reg:r9 >  BB05 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #145 @111 RefTypeKill <Reg:r10>  BB05 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #146 @111 RefTypeKill <Reg:r11>  BB05 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #147 @111 RefTypeFixedReg <Reg:rax>  BB05 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #148 @111 RefTypeDef <Ivl:23> CALL BB05 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #149 @112 RefTypeUse <Ivl:23>  BB05 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #150 @115 RefTypeDef <Ivl:24> LCL_VAR BB05 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #151 @118 RefTypeUse <Ivl:24>  BB05 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #152 @119 RefTypeDef <Ivl:25> IND BB05 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #153 @122 RefTypeUse <Ivl:25>  BB05 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #154 @123 RefTypeDef <Ivl:26> IND BB05 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #155 @124 RefTypeUse <Ivl:26>  BB05 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #156 @127 RefTypeDef <Ivl:27> LCL_VAR BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #157 @128 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #158 @128 RefTypeUse <Ivl:27>  BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #159 @129 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #160 @129 RefTypeDef <Ivl:28> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #161 @130 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #162 @130 RefTypeUse <Ivl:28>  BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #163 @131 RefTypeKill <Reg:rax>  BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #164 @131 RefTypeKill <Reg:rcx>  BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #165 @131 RefTypeKill <Reg:rdx>  BB05 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #166 @131 RefTypeKill <Reg:r8 >  BB05 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #167 @131 RefTypeKill <Reg:r9 >  BB05 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #168 @131 RefTypeKill <Reg:r10>  BB05 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #169 @131 RefTypeKill <Reg:r11>  BB05 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #170 @135 RefTypeDef <Ivl:29> LCL_VAR BB05 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #171 @136 RefTypeUse <Ivl:29>  BB05 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #172 @137 RefTypeDef <Ivl:30> LEA BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #173 @139 RefTypeDef <Ivl:31> LCL_VAR BB05 regmask=[rdx] minReg=1 wt=400.00>
<RefPosition #174 @140 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #175 @140 RefTypeUse <Ivl:30>  BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #176 @140 RefTypeFixedReg <Reg:rdx>  BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #177 @140 RefTypeUse <Ivl:31>  BB05 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #178 @141 RefTypeKill <Reg:rax>  BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #179 @141 RefTypeKill <Reg:rcx>  BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #180 @141 RefTypeKill <Reg:rdx>  BB05 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #181 @141 RefTypeKill <Reg:r8 >  BB05 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #182 @141 RefTypeKill <Reg:r9 >  BB05 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #183 @141 RefTypeKill <Reg:r10>  BB05 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #184 @141 RefTypeKill <Reg:r11>  BB05 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #185 @141 RefTypeKill <Reg:mm0>  BB05 regmask=[mm0] minReg=1 last wt=100.00>
<RefPosition #186 @141 RefTypeKill <Reg:mm1>  BB05 regmask=[mm1] minReg=1 last wt=100.00>
<RefPosition #187 @141 RefTypeKill <Reg:mm2>  BB05 regmask=[mm2] minReg=1 last wt=100.00>
<RefPosition #188 @141 RefTypeKill <Reg:mm3>  BB05 regmask=[mm3] minReg=1 last wt=100.00>
<RefPosition #189 @141 RefTypeKill <Reg:mm4>  BB05 regmask=[mm4] minReg=1 last wt=100.00>
<RefPosition #190 @141 RefTypeKill <Reg:mm5>  BB05 regmask=[mm5] minReg=1 last wt=100.00>
<RefPosition #191 @145 RefTypeDef <Ivl:32> CNS_INT BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #192 @146 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #193 @146 RefTypeUse <Ivl:32>  BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #194 @147 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #195 @147 RefTypeDef <Ivl:33> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #196 @148 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #197 @148 RefTypeUse <Ivl:33>  BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #198 @149 RefTypeKill <Reg:rax>  BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #199 @149 RefTypeKill <Reg:rcx>  BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #200 @149 RefTypeKill <Reg:rdx>  BB05 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #201 @149 RefTypeKill <Reg:r8 >  BB05 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #202 @149 RefTypeKill <Reg:r9 >  BB05 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #203 @149 RefTypeKill <Reg:r10>  BB05 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #204 @149 RefTypeKill <Reg:r11>  BB05 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #205 @149 RefTypeFixedReg <Reg:rax>  BB05 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #206 @149 RefTypeDef <Ivl:34> CALL BB05 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #207 @150 RefTypeUse <Ivl:34>  BB05 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #208 @153 RefTypeDef <Ivl:35> LCL_VAR BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #209 @154 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #210 @154 RefTypeUse <Ivl:35>  BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #211 @155 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #212 @155 RefTypeDef <Ivl:36> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #213 @157 RefTypeDef <Ivl:37> LCL_VAR BB05 regmask=[rdx] minReg=1 wt=400.00>
<RefPosition #214 @158 RefTypeFixedReg <Reg:rdx>  BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #215 @158 RefTypeUse <Ivl:37>  BB05 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #216 @159 RefTypeFixedReg <Reg:rdx>  BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #217 @159 RefTypeDef <Ivl:38> PUTARG_REG BB05 regmask=[rdx] minReg=1 fixed wt=400.00>
<RefPosition #218 @161 RefTypeDef <Ivl:39> CNS_INT BB05 regmask=[r8] minReg=1 wt=400.00>
<RefPosition #219 @162 RefTypeFixedReg <Reg:r8 >  BB05 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #220 @162 RefTypeUse <Ivl:39>  BB05 regmask=[r8] minReg=1 last fixed wt=100.00>
<RefPosition #221 @163 RefTypeFixedReg <Reg:r8 >  BB05 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #222 @163 RefTypeDef <Ivl:40> PUTARG_REG BB05 regmask=[r8] minReg=1 fixed wt=400.00>
<RefPosition #223 @164 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #224 @164 RefTypeUse <Ivl:36>  BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #225 @164 RefTypeFixedReg <Reg:rdx>  BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #226 @164 RefTypeUse <Ivl:38>  BB05 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #227 @164 RefTypeFixedReg <Reg:r8 >  BB05 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #228 @164 RefTypeUse <Ivl:40>  BB05 regmask=[r8] minReg=1 last fixed wt=100.00>
<RefPosition #229 @165 RefTypeKill <Reg:rax>  BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #230 @165 RefTypeKill <Reg:rcx>  BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #231 @165 RefTypeKill <Reg:rdx>  BB05 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #232 @165 RefTypeKill <Reg:r8 >  BB05 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #233 @165 RefTypeKill <Reg:r9 >  BB05 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #234 @165 RefTypeKill <Reg:r10>  BB05 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #235 @165 RefTypeKill <Reg:r11>  BB05 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #236 @169 RefTypeDef <Ivl:41> CNS_INT BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #237 @170 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #238 @170 RefTypeUse <Ivl:41>  BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #239 @171 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #240 @171 RefTypeDef <Ivl:42> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #241 @172 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #242 @172 RefTypeUse <Ivl:42>  BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #243 @173 RefTypeKill <Reg:rax>  BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #244 @173 RefTypeKill <Reg:rcx>  BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #245 @173 RefTypeKill <Reg:rdx>  BB05 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #246 @173 RefTypeKill <Reg:r8 >  BB05 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #247 @173 RefTypeKill <Reg:r9 >  BB05 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #248 @173 RefTypeKill <Reg:r10>  BB05 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #249 @173 RefTypeKill <Reg:r11>  BB05 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #250 @173 RefTypeFixedReg <Reg:rax>  BB05 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #251 @173 RefTypeDef <Ivl:43> CALL BB05 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #252 @174 RefTypeUse <Ivl:43>  BB05 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #253 @177 RefTypeDef <Ivl:44> LCL_VAR BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #254 @178 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #255 @178 RefTypeUse <Ivl:44>  BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #256 @179 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #257 @179 RefTypeDef <Ivl:45> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #258 @181 RefTypeDef <Ivl:46> LCL_VAR BB05 regmask=[rdx] minReg=1 wt=400.00>
<RefPosition #259 @182 RefTypeFixedReg <Reg:rdx>  BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #260 @182 RefTypeUse <Ivl:46>  BB05 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #261 @183 RefTypeFixedReg <Reg:rdx>  BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #262 @183 RefTypeDef <Ivl:47> PUTARG_REG BB05 regmask=[rdx] minReg=1 fixed wt=400.00>
<RefPosition #263 @184 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #264 @184 RefTypeUse <Ivl:45>  BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #265 @184 RefTypeFixedReg <Reg:rdx>  BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #266 @184 RefTypeUse <Ivl:47>  BB05 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #267 @185 RefTypeKill <Reg:rax>  BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #268 @185 RefTypeKill <Reg:rcx>  BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #269 @185 RefTypeKill <Reg:rdx>  BB05 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #270 @185 RefTypeKill <Reg:r8 >  BB05 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #271 @185 RefTypeKill <Reg:r9 >  BB05 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #272 @185 RefTypeKill <Reg:r10>  BB05 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #273 @185 RefTypeKill <Reg:r11>  BB05 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #274 @189 RefTypeDef <Ivl:48> LCL_VAR BB05 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #275 @190 RefTypeUse <Ivl:48>  BB05 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #276 @195 RefTypeDef <Ivl:49> LCL_VAR BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #277 @196 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #278 @196 RefTypeUse <Ivl:49>  BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #279 @197 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #280 @197 RefTypeDef <Ivl:50> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #281 @198 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #282 @198 RefTypeUse <Ivl:50>  BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #283 @199 RefTypeKill <Reg:rax>  BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #284 @199 RefTypeKill <Reg:rcx>  BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #285 @199 RefTypeKill <Reg:rdx>  BB05 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #286 @199 RefTypeKill <Reg:r8 >  BB05 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #287 @199 RefTypeKill <Reg:r9 >  BB05 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #288 @199 RefTypeKill <Reg:r10>  BB05 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #289 @199 RefTypeKill <Reg:r11>  BB05 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #290 @207 RefTypeKill <Reg:rax>  BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #291 @207 RefTypeKill <Reg:rcx>  BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #292 @207 RefTypeKill <Reg:rdx>  BB05 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #293 @207 RefTypeKill <Reg:r8 >  BB05 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #294 @207 RefTypeKill <Reg:r9 >  BB05 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #295 @207 RefTypeKill <Reg:r10>  BB05 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #296 @207 RefTypeKill <Reg:r11>  BB05 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #297 @207 RefTypeFixedReg <Reg:rax>  BB05 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #298 @207 RefTypeDef <Ivl:51> CALL BB05 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #299 @208 RefTypeUse <Ivl:51>  BB05 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #300 @213 RefTypeDef <Ivl:52> LCL_VAR BB05 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #301 @214 RefTypeUse <Ivl:52>  BB05 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #302 @219 RefTypeDef <Ivl:53> LCL_VAR_ADDR BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #303 @220 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #304 @220 RefTypeUse <Ivl:53>  BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #305 @221 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #306 @221 RefTypeDef <Ivl:54> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #307 @222 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #308 @222 RefTypeUse <Ivl:54>  BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #309 @223 RefTypeKill <Reg:rax>  BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #310 @223 RefTypeKill <Reg:rcx>  BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #311 @223 RefTypeKill <Reg:rdx>  BB05 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #312 @223 RefTypeKill <Reg:r8 >  BB05 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #313 @223 RefTypeKill <Reg:r9 >  BB05 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #314 @223 RefTypeKill <Reg:r10>  BB05 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #315 @223 RefTypeKill <Reg:r11>  BB05 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #316 @223 RefTypeFixedReg <Reg:rax>  BB05 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #317 @223 RefTypeDef <Ivl:55> CALL BB05 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #318 @224 RefTypeUse <Ivl:55>  BB05 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #319 @229 RefTypeDef <Ivl:56> CNS_INT BB05 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #320 @230 RefTypeUse <Ivl:56>  BB05 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #321 @231 RefTypeDef <Ivl:57> IND BB05 regmask=[rdx] minReg=1 wt=400.00>
<RefPosition #322 @232 RefTypeFixedReg <Reg:rdx>  BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #323 @232 RefTypeUse <Ivl:57>  BB05 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #324 @233 RefTypeFixedReg <Reg:rdx>  BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #325 @233 RefTypeDef <Ivl:58> PUTARG_REG BB05 regmask=[rdx] minReg=1 fixed wt=400.00>
<RefPosition #326 @235 RefTypeDef <Ivl:59> LCL_VAR BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #327 @236 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #328 @236 RefTypeUse <Ivl:59>  BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #329 @237 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #330 @237 RefTypeDef <Ivl:60> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #331 @238 RefTypeFixedReg <Reg:rdx>  BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #332 @238 RefTypeUse <Ivl:58>  BB05 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #333 @238 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #334 @238 RefTypeUse <Ivl:60>  BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #335 @239 RefTypeKill <Reg:rax>  BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #336 @239 RefTypeKill <Reg:rcx>  BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #337 @239 RefTypeKill <Reg:rdx>  BB05 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #338 @239 RefTypeKill <Reg:r8 >  BB05 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #339 @239 RefTypeKill <Reg:r9 >  BB05 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #340 @239 RefTypeKill <Reg:r10>  BB05 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #341 @239 RefTypeKill <Reg:r11>  BB05 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #342 @239 RefTypeFixedReg <Reg:rax>  BB05 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #343 @239 RefTypeDef <Ivl:61> CALL BB05 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #344 @240 RefTypeUse <Ivl:61>  BB05 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #345 @245 RefTypeDef <Ivl:62> LCL_VAR BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #346 @246 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #347 @246 RefTypeUse <Ivl:62>  BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #348 @247 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #349 @247 RefTypeDef <Ivl:63> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #350 @248 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #351 @248 RefTypeUse <Ivl:63>  BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #352 @249 RefTypeKill <Reg:rax>  BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #353 @249 RefTypeKill <Reg:rcx>  BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #354 @249 RefTypeKill <Reg:rdx>  BB05 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #355 @249 RefTypeKill <Reg:r8 >  BB05 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #356 @249 RefTypeKill <Reg:r9 >  BB05 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #357 @249 RefTypeKill <Reg:r10>  BB05 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #358 @249 RefTypeKill <Reg:r11>  BB05 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #359 @257 RefTypeDef <Ivl:64> CNS_INT BB05 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #360 @258 RefTypeUse <Ivl:64>  BB05 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #361 @264 RefTypeBB  BB14 regmask=[] minReg=1 wt=100.00>
<RefPosition #362 @273 RefTypeDef <Ivl:65> LT BB14 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #363 @274 RefTypeUse <Ivl:65>  BB14 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #364 @286 RefTypeBB  BB06 regmask=[] minReg=1 wt=100.00>
<RefPosition #365 @295 RefTypeDef <Ivl:66> LCL_VAR BB06 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #366 @298 RefTypeUse <Ivl:66>  BB06 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #367 @299 RefTypeDef <Ivl:67> IND BB06 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #368 @300 RefTypeUse <Ivl:67>  BB06 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #369 @305 RefTypeDef <Ivl:68> CNS_INT BB06 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #370 @306 RefTypeUse <Ivl:68>  BB06 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #371 @308 RefTypeBB  BB07 regmask=[] minReg=1 wt=100.00>
<RefPosition #372 @313 RefTypeDef <Ivl:69> LCL_VAR_ADDR BB07 regmask=[rdx] minReg=1 wt=400.00>
<RefPosition #373 @314 RefTypeFixedReg <Reg:rdx>  BB07 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #374 @314 RefTypeUse <Ivl:69>  BB07 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #375 @315 RefTypeFixedReg <Reg:rdx>  BB07 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #376 @315 RefTypeDef <Ivl:70> PUTARG_REG BB07 regmask=[rdx] minReg=1 fixed wt=400.00>
<RefPosition #377 @317 RefTypeDef <Ivl:71> LCL_VAR BB07 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #378 @318 RefTypeFixedReg <Reg:rcx>  BB07 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #379 @318 RefTypeUse <Ivl:71>  BB07 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #380 @319 RefTypeFixedReg <Reg:rcx>  BB07 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #381 @319 RefTypeDef <Ivl:72> PUTARG_REG BB07 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #382 @320 RefTypeFixedReg <Reg:rdx>  BB07 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #383 @320 RefTypeUse <Ivl:70>  BB07 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #384 @320 RefTypeFixedReg <Reg:rcx>  BB07 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #385 @320 RefTypeUse <Ivl:72>  BB07 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #386 @321 RefTypeKill <Reg:rax>  BB07 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #387 @321 RefTypeKill <Reg:rcx>  BB07 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #388 @321 RefTypeKill <Reg:rdx>  BB07 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #389 @321 RefTypeKill <Reg:r8 >  BB07 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #390 @321 RefTypeKill <Reg:r9 >  BB07 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #391 @321 RefTypeKill <Reg:r10>  BB07 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #392 @321 RefTypeKill <Reg:r11>  BB07 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #393 @333 RefTypeDef <Ivl:73> CNS_INT BB07 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #394 @334 RefTypeFixedReg <Reg:rcx>  BB07 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #395 @334 RefTypeUse <Ivl:73>  BB07 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #396 @335 RefTypeFixedReg <Reg:rcx>  BB07 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #397 @335 RefTypeDef <Ivl:74> PUTARG_REG BB07 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #398 @336 RefTypeFixedReg <Reg:rcx>  BB07 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #399 @336 RefTypeUse <Ivl:74>  BB07 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #400 @337 RefTypeKill <Reg:rax>  BB07 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #401 @337 RefTypeKill <Reg:rcx>  BB07 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #402 @337 RefTypeKill <Reg:rdx>  BB07 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #403 @337 RefTypeKill <Reg:r8 >  BB07 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #404 @337 RefTypeKill <Reg:r9 >  BB07 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #405 @337 RefTypeKill <Reg:r10>  BB07 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #406 @337 RefTypeKill <Reg:r11>  BB07 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #407 @337 RefTypeFixedReg <Reg:rax>  BB07 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #408 @337 RefTypeDef <Ivl:75> CALL BB07 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #409 @338 RefTypeUse <Ivl:75>  BB07 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #410 @341 RefTypeDef <Ivl:76> LCL_VAR BB07 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #411 @344 RefTypeUse <Ivl:76>  BB07 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #412 @345 RefTypeDef <Ivl:77> IND BB07 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #413 @348 RefTypeUse <Ivl:77>  BB07 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #414 @349 RefTypeDef <Ivl:78> IND BB07 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #415 @350 RefTypeUse <Ivl:78>  BB07 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #416 @353 RefTypeDef <Ivl:79> LCL_VAR BB07 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #417 @354 RefTypeFixedReg <Reg:rcx>  BB07 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #418 @354 RefTypeUse <Ivl:79>  BB07 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #419 @355 RefTypeFixedReg <Reg:rcx>  BB07 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #420 @355 RefTypeDef <Ivl:80> PUTARG_REG BB07 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #421 @356 RefTypeFixedReg <Reg:rcx>  BB07 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #422 @356 RefTypeUse <Ivl:80>  BB07 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #423 @357 RefTypeKill <Reg:rax>  BB07 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #424 @357 RefTypeKill <Reg:rcx>  BB07 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #425 @357 RefTypeKill <Reg:rdx>  BB07 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #426 @357 RefTypeKill <Reg:r8 >  BB07 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #427 @357 RefTypeKill <Reg:r9 >  BB07 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #428 @357 RefTypeKill <Reg:r10>  BB07 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #429 @357 RefTypeKill <Reg:r11>  BB07 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #430 @361 RefTypeDef <Ivl:81> LCL_VAR BB07 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #431 @362 RefTypeUse <Ivl:81>  BB07 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #432 @363 RefTypeDef <Ivl:82> LEA BB07 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #433 @365 RefTypeDef <Ivl:83> LCL_VAR BB07 regmask=[rdx] minReg=1 wt=400.00>
<RefPosition #434 @366 RefTypeFixedReg <Reg:rcx>  BB07 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #435 @366 RefTypeUse <Ivl:82>  BB07 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #436 @366 RefTypeFixedReg <Reg:rdx>  BB07 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #437 @366 RefTypeUse <Ivl:83>  BB07 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #438 @367 RefTypeKill <Reg:rax>  BB07 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #439 @367 RefTypeKill <Reg:rcx>  BB07 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #440 @367 RefTypeKill <Reg:rdx>  BB07 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #441 @367 RefTypeKill <Reg:r8 >  BB07 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #442 @367 RefTypeKill <Reg:r9 >  BB07 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #443 @367 RefTypeKill <Reg:r10>  BB07 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #444 @367 RefTypeKill <Reg:r11>  BB07 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #445 @367 RefTypeKill <Reg:mm0>  BB07 regmask=[mm0] minReg=1 last wt=100.00>
<RefPosition #446 @367 RefTypeKill <Reg:mm1>  BB07 regmask=[mm1] minReg=1 last wt=100.00>
<RefPosition #447 @367 RefTypeKill <Reg:mm2>  BB07 regmask=[mm2] minReg=1 last wt=100.00>
<RefPosition #448 @367 RefTypeKill <Reg:mm3>  BB07 regmask=[mm3] minReg=1 last wt=100.00>
<RefPosition #449 @367 RefTypeKill <Reg:mm4>  BB07 regmask=[mm4] minReg=1 last wt=100.00>
<RefPosition #450 @367 RefTypeKill <Reg:mm5>  BB07 regmask=[mm5] minReg=1 last wt=100.00>
<RefPosition #451 @371 RefTypeDef <Ivl:84> LCL_VAR BB07 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #452 @374 RefTypeUse <Ivl:84>  BB07 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #453 @375 RefTypeDef <Ivl:85> IND BB07 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #454 @376 RefTypeUse <Ivl:85>  BB07 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #455 @377 RefTypeDef <Ivl:86> LEA BB07 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #456 @379 RefTypeDef <Ivl:87> LCL_VAR BB07 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #457 @382 RefTypeUse <Ivl:87>  BB07 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #458 @383 RefTypeDef <Ivl:88> IND BB07 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #459 @386 RefTypeUse <Ivl:88>  BB07 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #460 @387 RefTypeDef <Ivl:89> IND BB07 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #461 @390 RefTypeUse <Ivl:89>  BB07 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #462 @391 RefTypeDef <Ivl:90> IND BB07 regmask=[rdx] minReg=1 wt=400.00>
<RefPosition #463 @392 RefTypeFixedReg <Reg:rcx>  BB07 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #464 @392 RefTypeUse <Ivl:86>  BB07 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #465 @392 RefTypeFixedReg <Reg:rdx>  BB07 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #466 @392 RefTypeUse <Ivl:90>  BB07 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #467 @393 RefTypeKill <Reg:rax>  BB07 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #468 @393 RefTypeKill <Reg:rcx>  BB07 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #469 @393 RefTypeKill <Reg:rdx>  BB07 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #470 @393 RefTypeKill <Reg:r8 >  BB07 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #471 @393 RefTypeKill <Reg:r9 >  BB07 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #472 @393 RefTypeKill <Reg:r10>  BB07 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #473 @393 RefTypeKill <Reg:r11>  BB07 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #474 @393 RefTypeKill <Reg:mm0>  BB07 regmask=[mm0] minReg=1 last wt=100.00>
<RefPosition #475 @393 RefTypeKill <Reg:mm1>  BB07 regmask=[mm1] minReg=1 last wt=100.00>
<RefPosition #476 @393 RefTypeKill <Reg:mm2>  BB07 regmask=[mm2] minReg=1 last wt=100.00>
<RefPosition #477 @393 RefTypeKill <Reg:mm3>  BB07 regmask=[mm3] minReg=1 last wt=100.00>
<RefPosition #478 @393 RefTypeKill <Reg:mm4>  BB07 regmask=[mm4] minReg=1 last wt=100.00>
<RefPosition #479 @393 RefTypeKill <Reg:mm5>  BB07 regmask=[mm5] minReg=1 last wt=100.00>
<RefPosition #480 @397 RefTypeDef <Ivl:91> CNS_INT BB07 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #481 @398 RefTypeFixedReg <Reg:rcx>  BB07 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #482 @398 RefTypeUse <Ivl:91>  BB07 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #483 @399 RefTypeFixedReg <Reg:rcx>  BB07 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #484 @399 RefTypeDef <Ivl:92> PUTARG_REG BB07 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #485 @400 RefTypeFixedReg <Reg:rcx>  BB07 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #486 @400 RefTypeUse <Ivl:92>  BB07 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #487 @401 RefTypeKill <Reg:rax>  BB07 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #488 @401 RefTypeKill <Reg:rcx>  BB07 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #489 @401 RefTypeKill <Reg:rdx>  BB07 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #490 @401 RefTypeKill <Reg:r8 >  BB07 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #491 @401 RefTypeKill <Reg:r9 >  BB07 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #492 @401 RefTypeKill <Reg:r10>  BB07 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #493 @401 RefTypeKill <Reg:r11>  BB07 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #494 @401 RefTypeFixedReg <Reg:rax>  BB07 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #495 @401 RefTypeDef <Ivl:93> CALL BB07 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #496 @402 RefTypeUse <Ivl:93>  BB07 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #497 @405 RefTypeDef <Ivl:94> LCL_VAR BB07 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #498 @408 RefTypeUse <Ivl:94>  BB07 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #499 @409 RefTypeDef <Ivl:95> IND BB07 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #500 @412 RefTypeUse <Ivl:95>  BB07 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #501 @413 RefTypeDef <Ivl:96> IND BB07 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #502 @414 RefTypeUse <Ivl:96>  BB07 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #503 @417 RefTypeDef <Ivl:97> LCL_VAR BB07 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #504 @418 RefTypeFixedReg <Reg:rcx>  BB07 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #505 @418 RefTypeUse <Ivl:97>  BB07 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #506 @419 RefTypeFixedReg <Reg:rcx>  BB07 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #507 @419 RefTypeDef <Ivl:98> PUTARG_REG BB07 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #508 @420 RefTypeFixedReg <Reg:rcx>  BB07 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #509 @420 RefTypeUse <Ivl:98>  BB07 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #510 @421 RefTypeKill <Reg:rax>  BB07 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #511 @421 RefTypeKill <Reg:rcx>  BB07 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #512 @421 RefTypeKill <Reg:rdx>  BB07 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #513 @421 RefTypeKill <Reg:r8 >  BB07 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #514 @421 RefTypeKill <Reg:r9 >  BB07 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #515 @421 RefTypeKill <Reg:r10>  BB07 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #516 @421 RefTypeKill <Reg:r11>  BB07 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #517 @425 RefTypeDef <Ivl:99> LCL_VAR BB07 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #518 @426 RefTypeUse <Ivl:99>  BB07 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #519 @427 RefTypeDef <Ivl:100> LEA BB07 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #520 @429 RefTypeDef <Ivl:101> LCL_VAR BB07 regmask=[rdx] minReg=1 wt=400.00>
<RefPosition #521 @430 RefTypeFixedReg <Reg:rcx>  BB07 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #522 @430 RefTypeUse <Ivl:100>  BB07 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #523 @430 RefTypeFixedReg <Reg:rdx>  BB07 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #524 @430 RefTypeUse <Ivl:101>  BB07 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #525 @431 RefTypeKill <Reg:rax>  BB07 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #526 @431 RefTypeKill <Reg:rcx>  BB07 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #527 @431 RefTypeKill <Reg:rdx>  BB07 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #528 @431 RefTypeKill <Reg:r8 >  BB07 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #529 @431 RefTypeKill <Reg:r9 >  BB07 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #530 @431 RefTypeKill <Reg:r10>  BB07 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #531 @431 RefTypeKill <Reg:r11>  BB07 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #532 @431 RefTypeKill <Reg:mm0>  BB07 regmask=[mm0] minReg=1 last wt=100.00>
<RefPosition #533 @431 RefTypeKill <Reg:mm1>  BB07 regmask=[mm1] minReg=1 last wt=100.00>
<RefPosition #534 @431 RefTypeKill <Reg:mm2>  BB07 regmask=[mm2] minReg=1 last wt=100.00>
<RefPosition #535 @431 RefTypeKill <Reg:mm3>  BB07 regmask=[mm3] minReg=1 last wt=100.00>
<RefPosition #536 @431 RefTypeKill <Reg:mm4>  BB07 regmask=[mm4] minReg=1 last wt=100.00>
<RefPosition #537 @431 RefTypeKill <Reg:mm5>  BB07 regmask=[mm5] minReg=1 last wt=100.00>
<RefPosition #538 @440 RefTypeBB  BB08 regmask=[] minReg=1 wt=100.00>
<RefPosition #539 @442 RefTypeBB  BB10 regmask=[] minReg=1 wt=100.00>
<RefPosition #540 @447 RefTypeDef <Ivl:102> LCL_VAR BB10 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #541 @448 RefTypeUse <Ivl:102>  BB10 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #542 @449 RefTypeDef <Ivl:103> CAST BB10 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #543 @452 RefTypeUse <Ivl:103>  BB10 regmask=[allIntButFP] minReg=1 last regOptional wt=100.00>
<RefPosition #544 @456 RefTypeBB  BB11 regmask=[] minReg=1 wt=100.00>
<RefPosition #545 @461 RefTypeDef <Ivl:104> LCL_VAR BB11 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #546 @462 RefTypeFixedReg <Reg:rcx>  BB11 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #547 @462 RefTypeUse <Ivl:104>  BB11 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #548 @463 RefTypeFixedReg <Reg:rcx>  BB11 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #549 @463 RefTypeDef <Ivl:105> PUTARG_REG BB11 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #550 @464 RefTypeFixedReg <Reg:rcx>  BB11 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #551 @464 RefTypeUse <Ivl:105>  BB11 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #552 @465 RefTypeKill <Reg:rax>  BB11 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #553 @465 RefTypeKill <Reg:rcx>  BB11 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #554 @465 RefTypeKill <Reg:rdx>  BB11 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #555 @465 RefTypeKill <Reg:r8 >  BB11 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #556 @465 RefTypeKill <Reg:r9 >  BB11 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #557 @465 RefTypeKill <Reg:r10>  BB11 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #558 @465 RefTypeKill <Reg:r11>  BB11 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #559 @470 RefTypeBB  BB12 regmask=[] minReg=1 wt=100.00>
<RefPosition #560 @476 RefTypeBB  BB09 regmask=[] minReg=1 wt=100.00>
<RefPosition #561 @478 RefTypeBB  BB13 regmask=[] minReg=1 wt=100.00>
<RefPosition #562 @487 RefTypeDef <Ivl:106> LCL_VAR BB13 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #563 @490 RefTypeUse <Ivl:106>  BB13 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #564 @491 RefTypeDef <Ivl:107> ADD BB13 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #565 @492 RefTypeUse <Ivl:107>  BB13 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #566 @494 RefTypeBB  BB15 regmask=[] minReg=1 wt=100.00>
<RefPosition #567 @499 RefTypeKill <Reg:rax>  BB15 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #568 @499 RefTypeKill <Reg:rcx>  BB15 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #569 @499 RefTypeKill <Reg:rdx>  BB15 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #570 @499 RefTypeKill <Reg:r8 >  BB15 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #571 @499 RefTypeKill <Reg:r9 >  BB15 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #572 @499 RefTypeKill <Reg:r10>  BB15 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #573 @499 RefTypeKill <Reg:r11>  BB15 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #574 @499 RefTypeFixedReg <Reg:rax>  BB15 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #575 @499 RefTypeDef <Ivl:108> CALL BB15 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #576 @500 RefTypeUse <Ivl:108>  BB15 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #577 @505 RefTypeDef <Ivl:109> LCL_VAR BB15 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #578 @506 RefTypeUse <Ivl:109>  BB15 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #579 @511 RefTypeDef <Ivl:110> LCL_VAR_ADDR BB15 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #580 @512 RefTypeFixedReg <Reg:rcx>  BB15 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #581 @512 RefTypeUse <Ivl:110>  BB15 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #582 @513 RefTypeFixedReg <Reg:rcx>  BB15 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #583 @513 RefTypeDef <Ivl:111> PUTARG_REG BB15 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #584 @514 RefTypeFixedReg <Reg:rcx>  BB15 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #585 @514 RefTypeUse <Ivl:111>  BB15 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #586 @515 RefTypeKill <Reg:rax>  BB15 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #587 @515 RefTypeKill <Reg:rcx>  BB15 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #588 @515 RefTypeKill <Reg:rdx>  BB15 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #589 @515 RefTypeKill <Reg:r8 >  BB15 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #590 @515 RefTypeKill <Reg:r9 >  BB15 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #591 @515 RefTypeKill <Reg:r10>  BB15 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #592 @515 RefTypeKill <Reg:r11>  BB15 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #593 @515 RefTypeFixedReg <Reg:rax>  BB15 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #594 @515 RefTypeDef <Ivl:112> CALL BB15 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #595 @516 RefTypeUse <Ivl:112>  BB15 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #596 @521 RefTypeDef <Ivl:113> CNS_INT BB15 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #597 @522 RefTypeUse <Ivl:113>  BB15 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #598 @523 RefTypeDef <Ivl:114> IND BB15 regmask=[rdx] minReg=1 wt=400.00>
<RefPosition #599 @524 RefTypeFixedReg <Reg:rdx>  BB15 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #600 @524 RefTypeUse <Ivl:114>  BB15 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #601 @525 RefTypeFixedReg <Reg:rdx>  BB15 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #602 @525 RefTypeDef <Ivl:115> PUTARG_REG BB15 regmask=[rdx] minReg=1 fixed wt=400.00>
<RefPosition #603 @527 RefTypeDef <Ivl:116> LCL_VAR BB15 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #604 @528 RefTypeFixedReg <Reg:rcx>  BB15 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #605 @528 RefTypeUse <Ivl:116>  BB15 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #606 @529 RefTypeFixedReg <Reg:rcx>  BB15 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #607 @529 RefTypeDef <Ivl:117> PUTARG_REG BB15 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #608 @530 RefTypeFixedReg <Reg:rdx>  BB15 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #609 @530 RefTypeUse <Ivl:115>  BB15 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #610 @530 RefTypeFixedReg <Reg:rcx>  BB15 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #611 @530 RefTypeUse <Ivl:117>  BB15 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #612 @531 RefTypeKill <Reg:rax>  BB15 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #613 @531 RefTypeKill <Reg:rcx>  BB15 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #614 @531 RefTypeKill <Reg:rdx>  BB15 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #615 @531 RefTypeKill <Reg:r8 >  BB15 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #616 @531 RefTypeKill <Reg:r9 >  BB15 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #617 @531 RefTypeKill <Reg:r10>  BB15 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #618 @531 RefTypeKill <Reg:r11>  BB15 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #619 @531 RefTypeFixedReg <Reg:rax>  BB15 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #620 @531 RefTypeDef <Ivl:118> CALL BB15 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #621 @532 RefTypeUse <Ivl:118>  BB15 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #622 @537 RefTypeDef <Ivl:119> LCL_VAR BB15 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #623 @538 RefTypeFixedReg <Reg:rcx>  BB15 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #624 @538 RefTypeUse <Ivl:119>  BB15 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #625 @539 RefTypeFixedReg <Reg:rcx>  BB15 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #626 @539 RefTypeDef <Ivl:120> PUTARG_REG BB15 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #627 @540 RefTypeFixedReg <Reg:rcx>  BB15 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #628 @540 RefTypeUse <Ivl:120>  BB15 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #629 @541 RefTypeKill <Reg:rax>  BB15 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #630 @541 RefTypeKill <Reg:rcx>  BB15 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #631 @541 RefTypeKill <Reg:rdx>  BB15 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #632 @541 RefTypeKill <Reg:r8 >  BB15 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #633 @541 RefTypeKill <Reg:r9 >  BB15 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #634 @541 RefTypeKill <Reg:r10>  BB15 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #635 @541 RefTypeKill <Reg:r11>  BB15 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #636 @550 RefTypeBB  BB28 regmask=[] minReg=1 wt=100.00>
<RefPosition #637 @562 RefTypeBB  BB16 regmask=[] minReg=1 wt=100.00>
<RefPosition #638 @571 RefTypeDef <Ivl:121> LCL_VAR BB16 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #639 @574 RefTypeUse <Ivl:121>  BB16 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #640 @575 RefTypeDef <Ivl:122> IND BB16 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #641 @576 RefTypeUse <Ivl:122>  BB16 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #642 @581 RefTypeDef <Ivl:123> CNS_INT BB16 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #643 @582 RefTypeUse <Ivl:123>  BB16 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #644 @584 RefTypeBB  BB17 regmask=[] minReg=1 wt=100.00>
<RefPosition #645 @589 RefTypeDef <Ivl:124> LCL_VAR_ADDR BB17 regmask=[rdx] minReg=1 wt=400.00>
<RefPosition #646 @590 RefTypeFixedReg <Reg:rdx>  BB17 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #647 @590 RefTypeUse <Ivl:124>  BB17 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #648 @591 RefTypeFixedReg <Reg:rdx>  BB17 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #649 @591 RefTypeDef <Ivl:125> PUTARG_REG BB17 regmask=[rdx] minReg=1 fixed wt=400.00>
<RefPosition #650 @593 RefTypeDef <Ivl:126> LCL_VAR BB17 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #651 @594 RefTypeFixedReg <Reg:rcx>  BB17 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #652 @594 RefTypeUse <Ivl:126>  BB17 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #653 @595 RefTypeFixedReg <Reg:rcx>  BB17 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #654 @595 RefTypeDef <Ivl:127> PUTARG_REG BB17 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #655 @596 RefTypeFixedReg <Reg:rdx>  BB17 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #656 @596 RefTypeUse <Ivl:125>  BB17 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #657 @596 RefTypeFixedReg <Reg:rcx>  BB17 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #658 @596 RefTypeUse <Ivl:127>  BB17 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #659 @597 RefTypeKill <Reg:rax>  BB17 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #660 @597 RefTypeKill <Reg:rcx>  BB17 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #661 @597 RefTypeKill <Reg:rdx>  BB17 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #662 @597 RefTypeKill <Reg:r8 >  BB17 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #663 @597 RefTypeKill <Reg:r9 >  BB17 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #664 @597 RefTypeKill <Reg:r10>  BB17 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #665 @597 RefTypeKill <Reg:r11>  BB17 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #666 @609 RefTypeDef <Ivl:128> LCL_VAR BB17 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #667 @612 RefTypeUse <Ivl:128>  BB17 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #668 @613 RefTypeDef <Ivl:129> IND BB17 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #669 @616 RefTypeUse <Ivl:129>  BB17 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #670 @617 RefTypeDef <Ivl:130> IND BB17 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #671 @619 RefTypeDef <Ivl:131> LCL_VAR BB17 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #672 @622 RefTypeUse <Ivl:131>  BB17 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #673 @623 RefTypeDef <Ivl:132> IND BB17 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #674 @628 RefTypeUse <Ivl:130>  BB17 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #675 @628 RefTypeUse <Ivl:132>  BB17 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #676 @629 RefTypeDef <Ivl:133> EQ BB17 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #677 @630 RefTypeUse <Ivl:133>  BB17 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #678 @642 RefTypeBB  BB18 regmask=[] minReg=1 wt=100.00>
<RefPosition #679 @652 RefTypeBB  BB19 regmask=[] minReg=1 wt=100.00>
<RefPosition #680 @662 RefTypeBB  BB20 regmask=[] minReg=1 wt=100.00>
<RefPosition #681 @664 RefTypeBB  BB22 regmask=[] minReg=1 wt=100.00>
<RefPosition #682 @666 RefTypeBB  BB24 regmask=[] minReg=1 wt=100.00>
<RefPosition #683 @671 RefTypeDef <Ivl:134> LCL_VAR BB24 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #684 @672 RefTypeUse <Ivl:134>  BB24 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #685 @673 RefTypeDef <Ivl:135> CAST BB24 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #686 @676 RefTypeUse <Ivl:135>  BB24 regmask=[allIntButFP] minReg=1 last regOptional wt=100.00>
<RefPosition #687 @680 RefTypeBB  BB25 regmask=[] minReg=1 wt=100.00>
<RefPosition #688 @685 RefTypeDef <Ivl:136> LCL_VAR BB25 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #689 @686 RefTypeFixedReg <Reg:rcx>  BB25 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #690 @686 RefTypeUse <Ivl:136>  BB25 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #691 @687 RefTypeFixedReg <Reg:rcx>  BB25 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #692 @687 RefTypeDef <Ivl:137> PUTARG_REG BB25 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #693 @688 RefTypeFixedReg <Reg:rcx>  BB25 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #694 @688 RefTypeUse <Ivl:137>  BB25 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #695 @689 RefTypeKill <Reg:rax>  BB25 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #696 @689 RefTypeKill <Reg:rcx>  BB25 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #697 @689 RefTypeKill <Reg:rdx>  BB25 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #698 @689 RefTypeKill <Reg:r8 >  BB25 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #699 @689 RefTypeKill <Reg:r9 >  BB25 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #700 @689 RefTypeKill <Reg:r10>  BB25 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #701 @689 RefTypeKill <Reg:r11>  BB25 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #702 @694 RefTypeBB  BB26 regmask=[] minReg=1 wt=100.00>
<RefPosition #703 @700 RefTypeBB  BB21 regmask=[] minReg=1 wt=100.00>
<RefPosition #704 @702 RefTypeBB  BB23 regmask=[] minReg=1 wt=100.00>
<RefPosition #705 @704 RefTypeBB  BB27 regmask=[] minReg=1 wt=100.00>
<RefPosition #706 @709 RefTypeDef <Ivl:138> CNS_INT BB27 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #707 @710 RefTypeFixedReg <Reg:rcx>  BB27 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #708 @710 RefTypeUse <Ivl:138>  BB27 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #709 @711 RefTypeFixedReg <Reg:rcx>  BB27 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #710 @711 RefTypeDef <Ivl:139> PUTARG_REG BB27 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #711 @712 RefTypeFixedReg <Reg:rcx>  BB27 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #712 @712 RefTypeUse <Ivl:139>  BB27 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #713 @713 RefTypeKill <Reg:rax>  BB27 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #714 @713 RefTypeKill <Reg:rcx>  BB27 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #715 @713 RefTypeKill <Reg:rdx>  BB27 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #716 @713 RefTypeKill <Reg:r8 >  BB27 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #717 @713 RefTypeKill <Reg:r9 >  BB27 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #718 @713 RefTypeKill <Reg:r10>  BB27 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #719 @713 RefTypeKill <Reg:r11>  BB27 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #720 @722 RefTypeBB  BB29 regmask=[] minReg=1 wt=100.00>
<RefPosition #721 @727 RefTypeKill <Reg:rax>  BB29 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #722 @727 RefTypeKill <Reg:rcx>  BB29 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #723 @727 RefTypeKill <Reg:rdx>  BB29 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #724 @727 RefTypeKill <Reg:r8 >  BB29 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #725 @727 RefTypeKill <Reg:r9 >  BB29 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #726 @727 RefTypeKill <Reg:r10>  BB29 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #727 @727 RefTypeKill <Reg:r11>  BB29 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #728 @727 RefTypeFixedReg <Reg:rax>  BB29 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #729 @727 RefTypeDef <Ivl:140> CALL BB29 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #730 @728 RefTypeUse <Ivl:140>  BB29 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #731 @733 RefTypeDef <Ivl:141> LCL_VAR BB29 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #732 @734 RefTypeUse <Ivl:141>  BB29 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #733 @739 RefTypeDef <Ivl:142> LCL_VAR_ADDR BB29 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #734 @740 RefTypeFixedReg <Reg:rcx>  BB29 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #735 @740 RefTypeUse <Ivl:142>  BB29 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #736 @741 RefTypeFixedReg <Reg:rcx>  BB29 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #737 @741 RefTypeDef <Ivl:143> PUTARG_REG BB29 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #738 @742 RefTypeFixedReg <Reg:rcx>  BB29 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #739 @742 RefTypeUse <Ivl:143>  BB29 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #740 @743 RefTypeKill <Reg:rax>  BB29 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #741 @743 RefTypeKill <Reg:rcx>  BB29 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #742 @743 RefTypeKill <Reg:rdx>  BB29 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #743 @743 RefTypeKill <Reg:r8 >  BB29 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #744 @743 RefTypeKill <Reg:r9 >  BB29 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #745 @743 RefTypeKill <Reg:r10>  BB29 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #746 @743 RefTypeKill <Reg:r11>  BB29 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #747 @743 RefTypeFixedReg <Reg:rax>  BB29 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #748 @743 RefTypeDef <Ivl:144> CALL BB29 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #749 @744 RefTypeUse <Ivl:144>  BB29 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #750 @749 RefTypeDef <Ivl:145> CNS_INT BB29 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #751 @750 RefTypeUse <Ivl:145>  BB29 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #752 @751 RefTypeDef <Ivl:146> IND BB29 regmask=[rdx] minReg=1 wt=400.00>
<RefPosition #753 @752 RefTypeFixedReg <Reg:rdx>  BB29 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #754 @752 RefTypeUse <Ivl:146>  BB29 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #755 @753 RefTypeFixedReg <Reg:rdx>  BB29 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #756 @753 RefTypeDef <Ivl:147> PUTARG_REG BB29 regmask=[rdx] minReg=1 fixed wt=400.00>
<RefPosition #757 @755 RefTypeDef <Ivl:148> LCL_VAR BB29 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #758 @756 RefTypeFixedReg <Reg:rcx>  BB29 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #759 @756 RefTypeUse <Ivl:148>  BB29 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #760 @757 RefTypeFixedReg <Reg:rcx>  BB29 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #761 @757 RefTypeDef <Ivl:149> PUTARG_REG BB29 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #762 @758 RefTypeFixedReg <Reg:rdx>  BB29 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #763 @758 RefTypeUse <Ivl:147>  BB29 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #764 @758 RefTypeFixedReg <Reg:rcx>  BB29 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #765 @758 RefTypeUse <Ivl:149>  BB29 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #766 @759 RefTypeKill <Reg:rax>  BB29 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #767 @759 RefTypeKill <Reg:rcx>  BB29 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #768 @759 RefTypeKill <Reg:rdx>  BB29 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #769 @759 RefTypeKill <Reg:r8 >  BB29 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #770 @759 RefTypeKill <Reg:r9 >  BB29 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #771 @759 RefTypeKill <Reg:r10>  BB29 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #772 @759 RefTypeKill <Reg:r11>  BB29 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #773 @759 RefTypeFixedReg <Reg:rax>  BB29 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #774 @759 RefTypeDef <Ivl:150> CALL BB29 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #775 @760 RefTypeUse <Ivl:150>  BB29 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #776 @765 RefTypeDef <Ivl:151> LCL_VAR BB29 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #777 @766 RefTypeFixedReg <Reg:rcx>  BB29 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #778 @766 RefTypeUse <Ivl:151>  BB29 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #779 @767 RefTypeFixedReg <Reg:rcx>  BB29 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #780 @767 RefTypeDef <Ivl:152> PUTARG_REG BB29 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #781 @768 RefTypeFixedReg <Reg:rcx>  BB29 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #782 @768 RefTypeUse <Ivl:152>  BB29 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #783 @769 RefTypeKill <Reg:rax>  BB29 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #784 @769 RefTypeKill <Reg:rcx>  BB29 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #785 @769 RefTypeKill <Reg:rdx>  BB29 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #786 @769 RefTypeKill <Reg:r8 >  BB29 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #787 @769 RefTypeKill <Reg:r9 >  BB29 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #788 @769 RefTypeKill <Reg:r10>  BB29 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #789 @769 RefTypeKill <Reg:r11>  BB29 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #790 @777 RefTypeDef <Ivl:153> CNS_INT BB29 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #791 @778 RefTypeUse <Ivl:153>  BB29 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #792 @779 RefTypeDef <Ivl:154> IND BB29 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #793 @780 RefTypeFixedReg <Reg:rcx>  BB29 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #794 @780 RefTypeUse <Ivl:154>  BB29 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #795 @781 RefTypeFixedReg <Reg:rcx>  BB29 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #796 @781 RefTypeDef <Ivl:155> PUTARG_REG BB29 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #797 @782 RefTypeFixedReg <Reg:rcx>  BB29 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #798 @782 RefTypeUse <Ivl:155>  BB29 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #799 @783 RefTypeKill <Reg:rax>  BB29 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #800 @783 RefTypeKill <Reg:rcx>  BB29 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #801 @783 RefTypeKill <Reg:rdx>  BB29 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #802 @783 RefTypeKill <Reg:r8 >  BB29 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #803 @783 RefTypeKill <Reg:r9 >  BB29 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #804 @783 RefTypeKill <Reg:r10>  BB29 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #805 @783 RefTypeKill <Reg:r11>  BB29 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #806 @791 RefTypeDef <Ivl:156> CNS_INT BB29 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #807 @792 RefTypeUse <Ivl:156>  BB29 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #808 @793 RefTypeDef <Ivl:157> IND BB29 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #809 @794 RefTypeFixedReg <Reg:rcx>  BB29 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #810 @794 RefTypeUse <Ivl:157>  BB29 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #811 @795 RefTypeFixedReg <Reg:rcx>  BB29 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #812 @795 RefTypeDef <Ivl:158> PUTARG_REG BB29 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #813 @796 RefTypeFixedReg <Reg:rcx>  BB29 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #814 @796 RefTypeUse <Ivl:158>  BB29 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #815 @797 RefTypeKill <Reg:rax>  BB29 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #816 @797 RefTypeKill <Reg:rcx>  BB29 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #817 @797 RefTypeKill <Reg:rdx>  BB29 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #818 @797 RefTypeKill <Reg:r8 >  BB29 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #819 @797 RefTypeKill <Reg:r9 >  BB29 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #820 @797 RefTypeKill <Reg:r10>  BB29 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #821 @797 RefTypeKill <Reg:r11>  BB29 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #822 @805 RefTypeDef <Ivl:159> CNS_INT BB29 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #823 @806 RefTypeUse <Ivl:159>  BB29 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #824 @807 RefTypeDef <Ivl:160> IND BB29 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #825 @808 RefTypeFixedReg <Reg:rcx>  BB29 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #826 @808 RefTypeUse <Ivl:160>  BB29 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #827 @809 RefTypeFixedReg <Reg:rcx>  BB29 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #828 @809 RefTypeDef <Ivl:161> PUTARG_REG BB29 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #829 @810 RefTypeFixedReg <Reg:rcx>  BB29 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #830 @810 RefTypeUse <Ivl:161>  BB29 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #831 @811 RefTypeKill <Reg:rax>  BB29 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #832 @811 RefTypeKill <Reg:rcx>  BB29 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #833 @811 RefTypeKill <Reg:rdx>  BB29 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #834 @811 RefTypeKill <Reg:r8 >  BB29 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #835 @811 RefTypeKill <Reg:r9 >  BB29 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #836 @811 RefTypeKill <Reg:r10>  BB29 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #837 @811 RefTypeKill <Reg:r11>  BB29 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #838 @819 RefTypeDef <Ivl:162> CNS_INT BB29 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #839 @820 RefTypeUse <Ivl:162>  BB29 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #840 @821 RefTypeDef <Ivl:163> IND BB29 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #841 @822 RefTypeFixedReg <Reg:rcx>  BB29 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #842 @822 RefTypeUse <Ivl:163>  BB29 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #843 @823 RefTypeFixedReg <Reg:rcx>  BB29 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #844 @823 RefTypeDef <Ivl:164> PUTARG_REG BB29 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #845 @824 RefTypeFixedReg <Reg:rcx>  BB29 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #846 @824 RefTypeUse <Ivl:164>  BB29 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #847 @825 RefTypeKill <Reg:rax>  BB29 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #848 @825 RefTypeKill <Reg:rcx>  BB29 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #849 @825 RefTypeKill <Reg:rdx>  BB29 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #850 @825 RefTypeKill <Reg:r8 >  BB29 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #851 @825 RefTypeKill <Reg:r9 >  BB29 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #852 @825 RefTypeKill <Reg:r10>  BB29 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #853 @825 RefTypeKill <Reg:r11>  BB29 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #854 @834 RefTypeBB  BB39 regmask=[] minReg=1 wt=100.00>
<RefPosition #855 @846 RefTypeBB  BB30 regmask=[] minReg=1 wt=100.00>
<RefPosition #856 @855 RefTypeDef <Ivl:165> LCL_VAR_ADDR BB30 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #857 @856 RefTypeFixedReg <Reg:rcx>  BB30 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #858 @856 RefTypeUse <Ivl:165>  BB30 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #859 @857 RefTypeFixedReg <Reg:rcx>  BB30 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #860 @857 RefTypeDef <Ivl:166> PUTARG_REG BB30 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #861 @858 RefTypeFixedReg <Reg:rcx>  BB30 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #862 @858 RefTypeUse <Ivl:166>  BB30 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #863 @859 RefTypeKill <Reg:rax>  BB30 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #864 @859 RefTypeKill <Reg:rcx>  BB30 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #865 @859 RefTypeKill <Reg:rdx>  BB30 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #866 @859 RefTypeKill <Reg:r8 >  BB30 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #867 @859 RefTypeKill <Reg:r9 >  BB30 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #868 @859 RefTypeKill <Reg:r10>  BB30 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #869 @859 RefTypeKill <Reg:r11>  BB30 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #870 @866 RefTypeDef <Ivl:167 internal> STORE_BLK BB30 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #871 @866 RefTypeUse <Ivl:167 internal> STORE_BLK BB30 regmask=[allIntButFP] minReg=1 last wt=400.00>
<RefPosition #872 @871 RefTypeDef <Ivl:168> LCL_VAR_ADDR BB30 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #873 @872 RefTypeFixedReg <Reg:rcx>  BB30 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #874 @872 RefTypeUse <Ivl:168>  BB30 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #875 @873 RefTypeFixedReg <Reg:rcx>  BB30 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #876 @873 RefTypeDef <Ivl:169> PUTARG_REG BB30 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #877 @874 RefTypeFixedReg <Reg:rcx>  BB30 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #878 @874 RefTypeUse <Ivl:169>  BB30 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #879 @875 RefTypeKill <Reg:rax>  BB30 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #880 @875 RefTypeKill <Reg:rcx>  BB30 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #881 @875 RefTypeKill <Reg:rdx>  BB30 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #882 @875 RefTypeKill <Reg:r8 >  BB30 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #883 @875 RefTypeKill <Reg:r9 >  BB30 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #884 @875 RefTypeKill <Reg:r10>  BB30 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #885 @875 RefTypeKill <Reg:r11>  BB30 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #886 @875 RefTypeFixedReg <Reg:rax>  BB30 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #887 @875 RefTypeDef <Ivl:170> CALL BB30 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #888 @876 RefTypeUse <Ivl:170>  BB30 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #889 @885 RefTypeDef <Ivl:171> EQ BB30 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #890 @886 RefTypeUse <Ivl:171>  BB30 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #891 @898 RefTypeBB  BB31 regmask=[] minReg=1 wt=100.00>
<RefPosition #892 @907 RefTypeKill <Reg:rax>  BB31 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #893 @907 RefTypeKill <Reg:rcx>  BB31 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #894 @907 RefTypeKill <Reg:rdx>  BB31 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #895 @907 RefTypeKill <Reg:r8 >  BB31 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #896 @907 RefTypeKill <Reg:r9 >  BB31 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #897 @907 RefTypeKill <Reg:r10>  BB31 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #898 @907 RefTypeKill <Reg:r11>  BB31 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #899 @907 RefTypeFixedReg <Reg:rax>  BB31 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #900 @907 RefTypeDef <Ivl:172> CALL BB31 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #901 @908 RefTypeUse <Ivl:172>  BB31 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #902 @913 RefTypeDef <Ivl:173> LCL_VAR BB31 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #903 @914 RefTypeFixedReg <Reg:rcx>  BB31 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #904 @914 RefTypeUse <Ivl:173>  BB31 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #905 @915 RefTypeFixedReg <Reg:rcx>  BB31 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #906 @915 RefTypeDef <Ivl:174> PUTARG_REG BB31 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #907 @916 RefTypeFixedReg <Reg:rcx>  BB31 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #908 @916 RefTypeUse <Ivl:174>  BB31 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #909 @917 RefTypeKill <Reg:rax>  BB31 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #910 @917 RefTypeKill <Reg:rcx>  BB31 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #911 @917 RefTypeKill <Reg:rdx>  BB31 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #912 @917 RefTypeKill <Reg:r8 >  BB31 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #913 @917 RefTypeKill <Reg:r9 >  BB31 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #914 @917 RefTypeKill <Reg:r10>  BB31 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #915 @917 RefTypeKill <Reg:r11>  BB31 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #916 @930 RefTypeBB  BB32 regmask=[] minReg=1 wt=100.00>
<RefPosition #917 @935 RefTypeDef <Ivl:175> LCL_VAR_ADDR BB32 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #918 @936 RefTypeFixedReg <Reg:rcx>  BB32 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #919 @936 RefTypeUse <Ivl:175>  BB32 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #920 @937 RefTypeFixedReg <Reg:rcx>  BB32 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #921 @937 RefTypeDef <Ivl:176> PUTARG_REG BB32 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #922 @938 RefTypeFixedReg <Reg:rcx>  BB32 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #923 @938 RefTypeUse <Ivl:176>  BB32 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #924 @939 RefTypeKill <Reg:rax>  BB32 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #925 @939 RefTypeKill <Reg:rcx>  BB32 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #926 @939 RefTypeKill <Reg:rdx>  BB32 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #927 @939 RefTypeKill <Reg:r8 >  BB32 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #928 @939 RefTypeKill <Reg:r9 >  BB32 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #929 @939 RefTypeKill <Reg:r10>  BB32 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #930 @939 RefTypeKill <Reg:r11>  BB32 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #931 @939 RefTypeFixedReg <Reg:rax>  BB32 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #932 @939 RefTypeDef <Ivl:177> CALL BB32 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #933 @940 RefTypeUse <Ivl:177>  BB32 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #934 @949 RefTypeDef <Ivl:178> EQ BB32 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #935 @950 RefTypeUse <Ivl:178>  BB32 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #936 @962 RefTypeBB  BB33 regmask=[] minReg=1 wt=100.00>
<RefPosition #937 @971 RefTypeKill <Reg:rax>  BB33 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #938 @971 RefTypeKill <Reg:rcx>  BB33 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #939 @971 RefTypeKill <Reg:rdx>  BB33 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #940 @971 RefTypeKill <Reg:r8 >  BB33 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #941 @971 RefTypeKill <Reg:r9 >  BB33 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #942 @971 RefTypeKill <Reg:r10>  BB33 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #943 @971 RefTypeKill <Reg:r11>  BB33 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #944 @984 RefTypeBB  BB34 regmask=[] minReg=1 wt=100.00>
<RefPosition #945 @989 RefTypeDef <Ivl:179> LCL_VAR_ADDR BB34 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #946 @990 RefTypeFixedReg <Reg:rcx>  BB34 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #947 @990 RefTypeUse <Ivl:179>  BB34 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #948 @991 RefTypeFixedReg <Reg:rcx>  BB34 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #949 @991 RefTypeDef <Ivl:180> PUTARG_REG BB34 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #950 @992 RefTypeFixedReg <Reg:rcx>  BB34 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #951 @992 RefTypeUse <Ivl:180>  BB34 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #952 @993 RefTypeKill <Reg:rax>  BB34 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #953 @993 RefTypeKill <Reg:rcx>  BB34 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #954 @993 RefTypeKill <Reg:rdx>  BB34 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #955 @993 RefTypeKill <Reg:r8 >  BB34 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #956 @993 RefTypeKill <Reg:r9 >  BB34 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #957 @993 RefTypeKill <Reg:r10>  BB34 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #958 @993 RefTypeKill <Reg:r11>  BB34 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #959 @993 RefTypeFixedReg <Reg:rax>  BB34 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #960 @993 RefTypeDef <Ivl:181> CALL BB34 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #961 @994 RefTypeUse <Ivl:181>  BB34 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #962 @1003 RefTypeDef <Ivl:182> EQ BB34 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #963 @1004 RefTypeUse <Ivl:182>  BB34 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #964 @1016 RefTypeBB  BB35 regmask=[] minReg=1 wt=100.00>
<RefPosition #965 @1025 RefTypeDef <Ivl:183> LCL_VAR BB35 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #966 @1030 RefTypeUse <Ivl:183>  BB35 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #967 @1040 RefTypeBB  BB36 regmask=[] minReg=1 wt=100.00>
<RefPosition #968 @1045 RefTypeDef <Ivl:184> LCL_VAR_ADDR BB36 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #969 @1046 RefTypeFixedReg <Reg:rcx>  BB36 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #970 @1046 RefTypeUse <Ivl:184>  BB36 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #971 @1047 RefTypeFixedReg <Reg:rcx>  BB36 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #972 @1047 RefTypeDef <Ivl:185> PUTARG_REG BB36 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #973 @1048 RefTypeFixedReg <Reg:rcx>  BB36 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #974 @1048 RefTypeUse <Ivl:185>  BB36 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #975 @1049 RefTypeKill <Reg:rax>  BB36 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #976 @1049 RefTypeKill <Reg:rcx>  BB36 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #977 @1049 RefTypeKill <Reg:rdx>  BB36 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #978 @1049 RefTypeKill <Reg:r8 >  BB36 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #979 @1049 RefTypeKill <Reg:r9 >  BB36 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #980 @1049 RefTypeKill <Reg:r10>  BB36 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #981 @1049 RefTypeKill <Reg:r11>  BB36 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #982 @1049 RefTypeFixedReg <Reg:rax>  BB36 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #983 @1049 RefTypeDef <Ivl:186> CALL BB36 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #984 @1050 RefTypeUse <Ivl:186>  BB36 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #985 @1059 RefTypeDef <Ivl:187> EQ BB36 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #986 @1060 RefTypeUse <Ivl:187>  BB36 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #987 @1072 RefTypeBB  BB37 regmask=[] minReg=1 wt=100.00>
<RefPosition #988 @1082 RefTypeBB  BB38 regmask=[] minReg=1 wt=100.00>
<RefPosition #989 @1088 RefTypeBB  BB40 regmask=[] minReg=1 wt=100.00>
<RefPosition #990 @1093 RefTypeDef <Ivl:188> LCL_VAR BB40 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #991 @1098 RefTypeUse <Ivl:188>  BB40 regmask=[allIntButFP] minReg=1 last wt=100.00>


Allocating Registers
--------------------
The following table has one or more rows for each RefPosition that is handled during allocation.
The first column provides the basic information about the RefPosition, with its type (e.g. Def,
Use, Fixd) followed by a '*' if it is a last use, and a 'D' if it is delayRegFree, and then the
action taken during allocation (e.g. Alloc a new register, or Keep an existing one).
The subsequent columns show the Interval occupying each register, if any, followed by 'a' if it is
active, a 'p' if it is a large vector that has been partially spilled, and 'i'if it is inactive.
Columns are only printed up to the last modifed register, which may increase during allocation,
in which case additional columns will appear.  
Registers which are not marked modified have ---- in their column.

-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc  RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
                                     |     |     |     |     |     |     |     |     |     |
   0.#0   BB1  PredBB0               |     |     |     |     |     |     |     |     |     |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc  RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
   4.#1   BB2  PredBB1               |     |     |     |     |     |     |     |     |     |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc  RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
  16.#2   BB3  PredBB2               |     |     |     |     |     |     |     |     |     |
  19.#3   rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
  19.#4   rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
  19.#5   rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
  19.#6   r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
  19.#7   r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
  19.#8   r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
  19.#9   r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc  RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
  20.#10  BB4  PredBB2               |     |     |     |     |     |     |     |     |     |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc  RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
  22.#11  BB5  PredBB4               |     |     |     |     |     |     |     |     |     |
  31.#12  rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
  31.#13  rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
  31.#14  rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
  31.#15  r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
  31.#16  r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
  31.#17  r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
  31.#18  r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
  31.#19  rax   Fixd   Keep     rax  |     |     |     |     |     |     |     |     |     |
  31.#20  I0    Def    Alloc    rax  |I0  a|     |     |     |     |     |     |     |     |
  32.#21  I0    Use *  Keep     rax  |I0  a|     |     |     |     |     |     |     |     |
  37.#22  I1    Def    BSFIT(A) rcx  |     |I1  a|     |     |     |     |     |     |     |
  38.#23  I1    Use *  Keep     rcx  |     |I1  a|     |     |     |     |     |     |     |
  43.#24  I2    Def    Alloc    rcx  |     |I2  a|     |     |     |     |     |     |     |
  44.#25  rcx   Fixd   Keep     rcx  |     |I2  a|     |     |     |     |     |     |     |
  44.#26  I2    Use *  Keep     rcx  |     |I2  a|     |     |     |     |     |     |     |
  45.#27  rcx   Fixd   Keep     rcx  |     |     |     |     |     |     |     |     |     |
  45.#28  I3    Def    Alloc    rcx  |     |I3  a|     |     |     |     |     |     |     |
  46.#29  rcx   Fixd   Keep     rcx  |     |I3  a|     |     |     |     |     |     |     |
  46.#30  I3    Use *  Keep     rcx  |     |I3  a|     |     |     |     |     |     |     |
  47.#31  rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
  47.#32  rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
  47.#33  rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
  47.#34  r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
  47.#35  r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
  47.#36  r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
  47.#37  r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
  47.#38  rax   Fixd   Keep     rax  |     |     |     |     |     |     |     |     |     |
  47.#39  I4    Def    Alloc    rax  |I4  a|     |     |     |     |     |     |     |     |
  48.#40  I4    Use *  Keep     rax  |I4  a|     |     |     |     |     |     |     |     |
  53.#41  C5    Def    BSFIT(A) rdx  |     |     |C5  a|     |     |     |     |     |     |
  54.#42  C5    Use *  Keep     rdx  |     |     |C5  a|     |     |     |     |     |     |
  55.#43  I6    Def    Alloc    rdx  |     |     |I6  a|     |     |     |     |     |     |
  56.#44  rdx   Fixd   Keep     rdx  |     |     |I6  a|     |     |     |     |     |     |
  56.#45  I6    Use *  Keep     rdx  |     |     |I6  a|     |     |     |     |     |     |
  57.#46  rdx   Fixd   Keep     rdx  |     |     |     |     |     |     |     |     |     |
  57.#47  I7    Def    Alloc    rdx  |     |     |I7  a|     |     |     |     |     |     |
  59.#48  I8    Def    Alloc    rcx  |     |I8  a|I7  a|     |     |     |     |     |     |
  60.#49  rcx   Fixd   Keep     rcx  |     |I8  a|I7  a|     |     |     |     |     |     |
  60.#50  I8    Use *  Keep     rcx  |     |I8  a|I7  a|     |     |     |     |     |     |
  61.#51  rcx   Fixd   Keep     rcx  |     |     |I7  a|     |     |     |     |     |     |
  61.#52  I9    Def    Alloc    rcx  |     |I9  a|I7  a|     |     |     |     |     |     |
  62.#53  rdx   Fixd   Keep     rdx  |     |I9  a|I7  a|     |     |     |     |     |     |
  62.#54  I7    Use *  Keep     rdx  |     |I9  a|I7  a|     |     |     |     |     |     |
  62.#55  rcx   Fixd   Keep     rcx  |     |I9  a|I7  a|     |     |     |     |     |     |
  62.#56  I9    Use *  Keep     rcx  |     |I9  a|I7  a|     |     |     |     |     |     |
  63.#57  rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
  63.#58  rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
  63.#59  rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
  63.#60  r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
  63.#61  r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
  63.#62  r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
  63.#63  r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
  63.#64  rax   Fixd   Keep     rax  |     |     |     |     |     |     |     |     |     |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc  RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
  63.#65  I10   Def    Alloc    rax  |I10 a|     |     |     |     |     |     |     |     |
  64.#66  I10   Use *  Keep     rax  |I10 a|     |     |     |     |     |     |     |     |
  69.#67  I11   Def    Alloc    rcx  |     |I11 a|     |     |     |     |     |     |     |
  70.#68  rcx   Fixd   Keep     rcx  |     |I11 a|     |     |     |     |     |     |     |
  70.#69  I11   Use *  Keep     rcx  |     |I11 a|     |     |     |     |     |     |     |
  71.#70  rcx   Fixd   Keep     rcx  |     |     |     |     |     |     |     |     |     |
  71.#71  I12   Def    Alloc    rcx  |     |I12 a|     |     |     |     |     |     |     |
  72.#72  rcx   Fixd   Keep     rcx  |     |I12 a|     |     |     |     |     |     |     |
  72.#73  I12   Use *  Keep     rcx  |     |I12 a|     |     |     |     |     |     |     |
  73.#74  rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
  73.#75  rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
  73.#76  rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
  73.#77  r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
  73.#78  r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
  73.#79  r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
  73.#80  r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
  81.#81  C13   Def    Alloc    rcx  |     |C13 a|     |     |     |     |     |     |     |
  82.#82  rcx   Fixd   Keep     rcx  |     |C13 a|     |     |     |     |     |     |     |
  82.#83  C13   Use *  Keep     rcx  |     |C13 a|     |     |     |     |     |     |     |
  83.#84  rcx   Fixd   Keep     rcx  |     |     |     |     |     |     |     |     |     |
  83.#85  I14   Def    Alloc    rcx  |     |I14 a|     |     |     |     |     |     |     |
  84.#86  rcx   Fixd   Keep     rcx  |     |I14 a|     |     |     |     |     |     |     |
  84.#87  I14   Use *  Keep     rcx  |     |I14 a|     |     |     |     |     |     |     |
  85.#88  rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
  85.#89  rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
  85.#90  rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
  85.#91  r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
  85.#92  r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
  85.#93  r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
  85.#94  r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
  85.#95  rax   Fixd   Keep     rax  |     |     |     |     |     |     |     |     |     |
  85.#96  I15   Def    Alloc    rax  |I15 a|     |     |     |     |     |     |     |     |
  86.#97  I15   Use *  Keep     rax  |I15 a|     |     |     |     |     |     |     |     |
  89.#98  I16   Def    Alloc    rcx  |     |I16 a|     |     |     |     |     |     |     |
  90.#99  rcx   Fixd   Keep     rcx  |     |I16 a|     |     |     |     |     |     |     |
  90.#100 I16   Use *  Keep     rcx  |     |I16 a|     |     |     |     |     |     |     |
  91.#101 rcx   Fixd   Keep     rcx  |     |     |     |     |     |     |     |     |     |
  91.#102 I17   Def    Alloc    rcx  |     |I17 a|     |     |     |     |     |     |     |
  92.#103 rcx   Fixd   Keep     rcx  |     |I17 a|     |     |     |     |     |     |     |
  92.#104 I17   Use *  Keep     rcx  |     |I17 a|     |     |     |     |     |     |     |
  93.#105 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
  93.#106 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
  93.#107 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
  93.#108 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
  93.#109 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
  93.#110 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
  93.#111 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
  97.#112 I18   Def    ORDER(A) rdx  |     |     |I18 a|     |     |     |     |     |     |
  98.#113 I18   Use *  Keep     rdx  |     |     |I18 a|     |     |     |     |     |     |
  99.#114 I19   Def    Alloc    rcx  |     |I19 a|     |     |     |     |     |     |     |
 101.#115 I20   Def    Alloc    rdx  |     |I19 a|I20 a|     |     |     |     |     |     |
 102.#116 rcx   Fixd   Keep     rcx  |     |I19 a|I20 a|     |     |     |     |     |     |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc  RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
 102.#117 I19   Use *  Keep     rcx  |     |I19 a|I20 a|     |     |     |     |     |     |
 102.#118 rdx   Fixd   Keep     rdx  |     |I19 a|I20 a|     |     |     |     |     |     |
 102.#119 I20   Use *  Keep     rdx  |     |I19 a|I20 a|     |     |     |     |     |     |
 103.#120 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
 103.#121 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 103.#122 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
 103.#123 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
 103.#124 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
 103.#125 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
 103.#126 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
 103.#127 mm0   Kill   Keep     mm0  |     |     |     |     |     |     |     |     |     |
 103.#128 mm1   Kill   Keep     mm1  |     |     |     |     |     |     |     |     |     |
 103.#129 mm2   Kill   Keep     mm2  |     |     |     |     |     |     |     |     |     |
 103.#130 mm3   Kill   Keep     mm3  |     |     |     |     |     |     |     |     |     |
 103.#131 mm4   Kill   Keep     mm4  |     |     |     |     |     |     |     |     |     |
 103.#132 mm5   Kill   Keep     mm5  |     |     |     |     |     |     |     |     |     |
 107.#133 C21   Def    Alloc    rcx  |     |C21 a|     |     |     |     |     |     |     |
 108.#134 rcx   Fixd   Keep     rcx  |     |C21 a|     |     |     |     |     |     |     |
 108.#135 C21   Use *  Keep     rcx  |     |C21 a|     |     |     |     |     |     |     |
 109.#136 rcx   Fixd   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 109.#137 I22   Def    Alloc    rcx  |     |I22 a|     |     |     |     |     |     |     |
 110.#138 rcx   Fixd   Keep     rcx  |     |I22 a|     |     |     |     |     |     |     |
 110.#139 I22   Use *  Keep     rcx  |     |I22 a|     |     |     |     |     |     |     |
 111.#140 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
 111.#141 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 111.#142 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
 111.#143 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
 111.#144 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
 111.#145 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
 111.#146 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
 111.#147 rax   Fixd   Keep     rax  |     |     |     |     |     |     |     |     |     |
 111.#148 I23   Def    Alloc    rax  |I23 a|     |     |     |     |     |     |     |     |
 112.#149 I23   Use *  Keep     rax  |I23 a|     |     |     |     |     |     |     |     |
 115.#150 I24   Def    BSFIT(A) rcx  |     |I24 a|     |     |     |     |     |     |     |
 118.#151 I24   Use *  Keep     rcx  |     |I24 a|     |     |     |     |     |     |     |
 119.#152 I25   Def    BSFIT(A) rcx  |     |I25 a|     |     |     |     |     |     |     |
 122.#153 I25   Use *  Keep     rcx  |     |I25 a|     |     |     |     |     |     |     |
 123.#154 I26   Def    BSFIT(A) rcx  |     |I26 a|     |     |     |     |     |     |     |
 124.#155 I26   Use *  Keep     rcx  |     |I26 a|     |     |     |     |     |     |     |
 127.#156 I27   Def    Alloc    rcx  |     |I27 a|     |     |     |     |     |     |     |
 128.#157 rcx   Fixd   Keep     rcx  |     |I27 a|     |     |     |     |     |     |     |
 128.#158 I27   Use *  Keep     rcx  |     |I27 a|     |     |     |     |     |     |     |
 129.#159 rcx   Fixd   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 129.#160 I28   Def    Alloc    rcx  |     |I28 a|     |     |     |     |     |     |     |
 130.#161 rcx   Fixd   Keep     rcx  |     |I28 a|     |     |     |     |     |     |     |
 130.#162 I28   Use *  Keep     rcx  |     |I28 a|     |     |     |     |     |     |     |
 131.#163 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
 131.#164 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 131.#165 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
 131.#166 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
 131.#167 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
 131.#168 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
 131.#169 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc  RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
 135.#170 I29   Def    ORDER(A) rdx  |     |     |I29 a|     |     |     |     |     |     |
 136.#171 I29   Use *  Keep     rdx  |     |     |I29 a|     |     |     |     |     |     |
 137.#172 I30   Def    Alloc    rcx  |     |I30 a|     |     |     |     |     |     |     |
 139.#173 I31   Def    Alloc    rdx  |     |I30 a|I31 a|     |     |     |     |     |     |
 140.#174 rcx   Fixd   Keep     rcx  |     |I30 a|I31 a|     |     |     |     |     |     |
 140.#175 I30   Use *  Keep     rcx  |     |I30 a|I31 a|     |     |     |     |     |     |
 140.#176 rdx   Fixd   Keep     rdx  |     |I30 a|I31 a|     |     |     |     |     |     |
 140.#177 I31   Use *  Keep     rdx  |     |I30 a|I31 a|     |     |     |     |     |     |
 141.#178 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
 141.#179 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 141.#180 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
 141.#181 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
 141.#182 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
 141.#183 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
 141.#184 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
 141.#185 mm0   Kill   Keep     mm0  |     |     |     |     |     |     |     |     |     |
 141.#186 mm1   Kill   Keep     mm1  |     |     |     |     |     |     |     |     |     |
 141.#187 mm2   Kill   Keep     mm2  |     |     |     |     |     |     |     |     |     |
 141.#188 mm3   Kill   Keep     mm3  |     |     |     |     |     |     |     |     |     |
 141.#189 mm4   Kill   Keep     mm4  |     |     |     |     |     |     |     |     |     |
 141.#190 mm5   Kill   Keep     mm5  |     |     |     |     |     |     |     |     |     |
 145.#191 C32   Def    Alloc    rcx  |     |C32 a|     |     |     |     |     |     |     |
 146.#192 rcx   Fixd   Keep     rcx  |     |C32 a|     |     |     |     |     |     |     |
 146.#193 C32   Use *  Keep     rcx  |     |C32 a|     |     |     |     |     |     |     |
 147.#194 rcx   Fixd   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 147.#195 I33   Def    Alloc    rcx  |     |I33 a|     |     |     |     |     |     |     |
 148.#196 rcx   Fixd   Keep     rcx  |     |I33 a|     |     |     |     |     |     |     |
 148.#197 I33   Use *  Keep     rcx  |     |I33 a|     |     |     |     |     |     |     |
 149.#198 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
 149.#199 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 149.#200 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
 149.#201 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
 149.#202 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
 149.#203 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
 149.#204 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
 149.#205 rax   Fixd   Keep     rax  |     |     |     |     |     |     |     |     |     |
 149.#206 I34   Def    Alloc    rax  |I34 a|     |     |     |     |     |     |     |     |
 150.#207 I34   Use *  Keep     rax  |I34 a|     |     |     |     |     |     |     |     |
 153.#208 I35   Def    Alloc    rcx  |     |I35 a|     |     |     |     |     |     |     |
 154.#209 rcx   Fixd   Keep     rcx  |     |I35 a|     |     |     |     |     |     |     |
 154.#210 I35   Use *  Keep     rcx  |     |I35 a|     |     |     |     |     |     |     |
 155.#211 rcx   Fixd   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 155.#212 I36   Def    Alloc    rcx  |     |I36 a|     |     |     |     |     |     |     |
 157.#213 I37   Def    Alloc    rdx  |     |I36 a|I37 a|     |     |     |     |     |     |
 158.#214 rdx   Fixd   Keep     rdx  |     |I36 a|I37 a|     |     |     |     |     |     |
 158.#215 I37   Use *  Keep     rdx  |     |I36 a|I37 a|     |     |     |     |     |     |
 159.#216 rdx   Fixd   Keep     rdx  |     |I36 a|     |     |     |     |     |     |     |
 159.#217 I38   Def    Alloc    rdx  |     |I36 a|I38 a|     |     |     |     |     |     |
 161.#218 C39   Def    Alloc    r8   |     |I36 a|I38 a|     |     |     |     |C39 a|     |
 162.#219 r8    Fixd   Keep     r8   |     |I36 a|I38 a|     |     |     |     |C39 a|     |
 162.#220 C39   Use *  Keep     r8   |     |I36 a|I38 a|     |     |     |     |C39 a|     |
 163.#221 r8    Fixd   Keep     r8   |     |I36 a|I38 a|     |     |     |     |     |     |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc  RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
 163.#222 I40   Def    Alloc    r8   |     |I36 a|I38 a|     |     |     |     |I40 a|     |
 164.#223 rcx   Fixd   Keep     rcx  |     |I36 a|I38 a|     |     |     |     |I40 a|     |
 164.#224 I36   Use *  Keep     rcx  |     |I36 a|I38 a|     |     |     |     |I40 a|     |
 164.#225 rdx   Fixd   Keep     rdx  |     |I36 a|I38 a|     |     |     |     |I40 a|     |
 164.#226 I38   Use *  Keep     rdx  |     |I36 a|I38 a|     |     |     |     |I40 a|     |
 164.#227 r8    Fixd   Keep     r8   |     |I36 a|I38 a|     |     |     |     |I40 a|     |
 164.#228 I40   Use *  Keep     r8   |     |I36 a|I38 a|     |     |     |     |I40 a|     |
 165.#229 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
 165.#230 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 165.#231 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
 165.#232 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
 165.#233 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
 165.#234 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
 165.#235 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
 169.#236 C41   Def    Alloc    rcx  |     |C41 a|     |     |     |     |     |     |     |
 170.#237 rcx   Fixd   Keep     rcx  |     |C41 a|     |     |     |     |     |     |     |
 170.#238 C41   Use *  Keep     rcx  |     |C41 a|     |     |     |     |     |     |     |
 171.#239 rcx   Fixd   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 171.#240 I42   Def    Alloc    rcx  |     |I42 a|     |     |     |     |     |     |     |
 172.#241 rcx   Fixd   Keep     rcx  |     |I42 a|     |     |     |     |     |     |     |
 172.#242 I42   Use *  Keep     rcx  |     |I42 a|     |     |     |     |     |     |     |
 173.#243 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
 173.#244 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 173.#245 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
 173.#246 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
 173.#247 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
 173.#248 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
 173.#249 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
 173.#250 rax   Fixd   Keep     rax  |     |     |     |     |     |     |     |     |     |
 173.#251 I43   Def    Alloc    rax  |I43 a|     |     |     |     |     |     |     |     |
 174.#252 I43   Use *  Keep     rax  |I43 a|     |     |     |     |     |     |     |     |
 177.#253 I44   Def    Alloc    rcx  |     |I44 a|     |     |     |     |     |     |     |
 178.#254 rcx   Fixd   Keep     rcx  |     |I44 a|     |     |     |     |     |     |     |
 178.#255 I44   Use *  Keep     rcx  |     |I44 a|     |     |     |     |     |     |     |
 179.#256 rcx   Fixd   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 179.#257 I45   Def    Alloc    rcx  |     |I45 a|     |     |     |     |     |     |     |
 181.#258 I46   Def    Alloc    rdx  |     |I45 a|I46 a|     |     |     |     |     |     |
 182.#259 rdx   Fixd   Keep     rdx  |     |I45 a|I46 a|     |     |     |     |     |     |
 182.#260 I46   Use *  Keep     rdx  |     |I45 a|I46 a|     |     |     |     |     |     |
 183.#261 rdx   Fixd   Keep     rdx  |     |I45 a|     |     |     |     |     |     |     |
 183.#262 I47   Def    Alloc    rdx  |     |I45 a|I47 a|     |     |     |     |     |     |
 184.#263 rcx   Fixd   Keep     rcx  |     |I45 a|I47 a|     |     |     |     |     |     |
 184.#264 I45   Use *  Keep     rcx  |     |I45 a|I47 a|     |     |     |     |     |     |
 184.#265 rdx   Fixd   Keep     rdx  |     |I45 a|I47 a|     |     |     |     |     |     |
 184.#266 I47   Use *  Keep     rdx  |     |I45 a|I47 a|     |     |     |     |     |     |
 185.#267 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
 185.#268 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 185.#269 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
 185.#270 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
 185.#271 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
 185.#272 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
 185.#273 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc  RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
 189.#274 I48   Def    BSFIT(A) rcx  |     |I48 a|     |     |     |     |     |     |     |
 190.#275 I48   Use *  Keep     rcx  |     |I48 a|     |     |     |     |     |     |     |
 195.#276 I49   Def    Alloc    rcx  |     |I49 a|     |     |     |     |     |     |     |
 196.#277 rcx   Fixd   Keep     rcx  |     |I49 a|     |     |     |     |     |     |     |
 196.#278 I49   Use *  Keep     rcx  |     |I49 a|     |     |     |     |     |     |     |
 197.#279 rcx   Fixd   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 197.#280 I50   Def    Alloc    rcx  |     |I50 a|     |     |     |     |     |     |     |
 198.#281 rcx   Fixd   Keep     rcx  |     |I50 a|     |     |     |     |     |     |     |
 198.#282 I50   Use *  Keep     rcx  |     |I50 a|     |     |     |     |     |     |     |
 199.#283 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
 199.#284 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 199.#285 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
 199.#286 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
 199.#287 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
 199.#288 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
 199.#289 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
 207.#290 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
 207.#291 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 207.#292 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
 207.#293 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
 207.#294 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
 207.#295 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
 207.#296 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
 207.#297 rax   Fixd   Keep     rax  |     |     |     |     |     |     |     |     |     |
 207.#298 I51   Def    Alloc    rax  |I51 a|     |     |     |     |     |     |     |     |
 208.#299 I51   Use *  Keep     rax  |I51 a|     |     |     |     |     |     |     |     |
 213.#300 I52   Def    BSFIT(A) rcx  |     |I52 a|     |     |     |     |     |     |     |
 214.#301 I52   Use *  Keep     rcx  |     |I52 a|     |     |     |     |     |     |     |
 219.#302 I53   Def    Alloc    rcx  |     |I53 a|     |     |     |     |     |     |     |
 220.#303 rcx   Fixd   Keep     rcx  |     |I53 a|     |     |     |     |     |     |     |
 220.#304 I53   Use *  Keep     rcx  |     |I53 a|     |     |     |     |     |     |     |
 221.#305 rcx   Fixd   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 221.#306 I54   Def    Alloc    rcx  |     |I54 a|     |     |     |     |     |     |     |
 222.#307 rcx   Fixd   Keep     rcx  |     |I54 a|     |     |     |     |     |     |     |
 222.#308 I54   Use *  Keep     rcx  |     |I54 a|     |     |     |     |     |     |     |
 223.#309 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
 223.#310 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 223.#311 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
 223.#312 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
 223.#313 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
 223.#314 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
 223.#315 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
 223.#316 rax   Fixd   Keep     rax  |     |     |     |     |     |     |     |     |     |
 223.#317 I55   Def    Alloc    rax  |I55 a|     |     |     |     |     |     |     |     |
 224.#318 I55   Use *  Keep     rax  |I55 a|     |     |     |     |     |     |     |     |
 229.#319 C56   Def    BSFIT(A) rdx  |     |     |C56 a|     |     |     |     |     |     |
 230.#320 C56   Use *  Keep     rdx  |     |     |C56 a|     |     |     |     |     |     |
 231.#321 I57   Def    Alloc    rdx  |     |     |I57 a|     |     |     |     |     |     |
 232.#322 rdx   Fixd   Keep     rdx  |     |     |I57 a|     |     |     |     |     |     |
 232.#323 I57   Use *  Keep     rdx  |     |     |I57 a|     |     |     |     |     |     |
 233.#324 rdx   Fixd   Keep     rdx  |     |     |     |     |     |     |     |     |     |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc  RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
 233.#325 I58   Def    Alloc    rdx  |     |     |I58 a|     |     |     |     |     |     |
 235.#326 I59   Def    Alloc    rcx  |     |I59 a|I58 a|     |     |     |     |     |     |
 236.#327 rcx   Fixd   Keep     rcx  |     |I59 a|I58 a|     |     |     |     |     |     |
 236.#328 I59   Use *  Keep     rcx  |     |I59 a|I58 a|     |     |     |     |     |     |
 237.#329 rcx   Fixd   Keep     rcx  |     |     |I58 a|     |     |     |     |     |     |
 237.#330 I60   Def    Alloc    rcx  |     |I60 a|I58 a|     |     |     |     |     |     |
 238.#331 rdx   Fixd   Keep     rdx  |     |I60 a|I58 a|     |     |     |     |     |     |
 238.#332 I58   Use *  Keep     rdx  |     |I60 a|I58 a|     |     |     |     |     |     |
 238.#333 rcx   Fixd   Keep     rcx  |     |I60 a|I58 a|     |     |     |     |     |     |
 238.#334 I60   Use *  Keep     rcx  |     |I60 a|I58 a|     |     |     |     |     |     |
 239.#335 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
 239.#336 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 239.#337 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
 239.#338 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
 239.#339 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
 239.#340 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
 239.#341 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
 239.#342 rax   Fixd   Keep     rax  |     |     |     |     |     |     |     |     |     |
 239.#343 I61   Def    Alloc    rax  |I61 a|     |     |     |     |     |     |     |     |
 240.#344 I61   Use *  Keep     rax  |I61 a|     |     |     |     |     |     |     |     |
 245.#345 I62   Def    Alloc    rcx  |     |I62 a|     |     |     |     |     |     |     |
 246.#346 rcx   Fixd   Keep     rcx  |     |I62 a|     |     |     |     |     |     |     |
 246.#347 I62   Use *  Keep     rcx  |     |I62 a|     |     |     |     |     |     |     |
 247.#348 rcx   Fixd   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 247.#349 I63   Def    Alloc    rcx  |     |I63 a|     |     |     |     |     |     |     |
 248.#350 rcx   Fixd   Keep     rcx  |     |I63 a|     |     |     |     |     |     |     |
 248.#351 I63   Use *  Keep     rcx  |     |I63 a|     |     |     |     |     |     |     |
 249.#352 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
 249.#353 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 249.#354 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
 249.#355 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
 249.#356 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
 249.#357 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
 249.#358 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
 257.#359 C64   Def    BSFIT(A) rdx  |     |     |C64 a|     |     |     |     |     |     |
 258.#360 C64   Use *  Keep     rdx  |     |     |C64 a|     |     |     |     |     |     |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc  RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
 264.#361 BB14 PredBB5               |     |     |     |     |     |     |     |     |     |
 273.#362 I65   Def    BSFIT(A) rdx  |     |     |I65 a|     |     |     |     |     |     |
 274.#363 I65   Use *  Keep     rdx  |     |     |I65 a|     |     |     |     |     |     |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc  RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
 286.#364 BB6  PredBB14              |     |     |     |     |     |     |     |     |     |
 295.#365 I66   Def    BSFIT(A) rdx  |     |     |I66 a|     |     |     |     |     |     |
 298.#366 I66   Use *  Keep     rdx  |     |     |I66 a|     |     |     |     |     |     |
 299.#367 I67   Def    BSFIT(A) rdx  |     |     |I67 a|     |     |     |     |     |     |
 300.#368 I67   Use *  Keep     rdx  |     |     |I67 a|     |     |     |     |     |     |
 305.#369 C68   Def    BSFIT(A) rdx  |     |     |C68 a|     |     |     |     |     |     |
 306.#370 C68   Use *  Keep     rdx  |     |     |C68 a|     |     |     |     |     |     |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc  RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
 308.#371 BB7  PredBB6               |     |     |     |     |     |     |     |     |     |
 313.#372 I69   Def    Alloc    rdx  |     |     |I69 a|     |     |     |     |     |     |
 314.#373 rdx   Fixd   Keep     rdx  |     |     |I69 a|     |     |     |     |     |     |
 314.#374 I69   Use *  Keep     rdx  |     |     |I69 a|     |     |     |     |     |     |
 315.#375 rdx   Fixd   Keep     rdx  |     |     |     |     |     |     |     |     |     |
 315.#376 I70   Def    Alloc    rdx  |     |     |I70 a|     |     |     |     |     |     |
 317.#377 I71   Def    Alloc    rcx  |     |I71 a|I70 a|     |     |     |     |     |     |
 318.#378 rcx   Fixd   Keep     rcx  |     |I71 a|I70 a|     |     |     |     |     |     |
 318.#379 I71   Use *  Keep     rcx  |     |I71 a|I70 a|     |     |     |     |     |     |
 319.#380 rcx   Fixd   Keep     rcx  |     |     |I70 a|     |     |     |     |     |     |
 319.#381 I72   Def    Alloc    rcx  |     |I72 a|I70 a|     |     |     |     |     |     |
 320.#382 rdx   Fixd   Keep     rdx  |     |I72 a|I70 a|     |     |     |     |     |     |
 320.#383 I70   Use *  Keep     rdx  |     |I72 a|I70 a|     |     |     |     |     |     |
 320.#384 rcx   Fixd   Keep     rcx  |     |I72 a|I70 a|     |     |     |     |     |     |
 320.#385 I72   Use *  Keep     rcx  |     |I72 a|I70 a|     |     |     |     |     |     |
 321.#386 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
 321.#387 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 321.#388 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
 321.#389 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
 321.#390 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
 321.#391 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
 321.#392 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
 333.#393 C73   Def    Alloc    rcx  |     |C73 a|     |     |     |     |     |     |     |
 334.#394 rcx   Fixd   Keep     rcx  |     |C73 a|     |     |     |     |     |     |     |
 334.#395 C73   Use *  Keep     rcx  |     |C73 a|     |     |     |     |     |     |     |
 335.#396 rcx   Fixd   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 335.#397 I74   Def    Alloc    rcx  |     |I74 a|     |     |     |     |     |     |     |
 336.#398 rcx   Fixd   Keep     rcx  |     |I74 a|     |     |     |     |     |     |     |
 336.#399 I74   Use *  Keep     rcx  |     |I74 a|     |     |     |     |     |     |     |
 337.#400 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
 337.#401 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 337.#402 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
 337.#403 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
 337.#404 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
 337.#405 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
 337.#406 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
 337.#407 rax   Fixd   Keep     rax  |     |     |     |     |     |     |     |     |     |
 337.#408 I75   Def    Alloc    rax  |I75 a|     |     |     |     |     |     |     |     |
 338.#409 I75   Use *  Keep     rax  |I75 a|     |     |     |     |     |     |     |     |
 341.#410 I76   Def    BSFIT(A) rcx  |     |I76 a|     |     |     |     |     |     |     |
 344.#411 I76   Use *  Keep     rcx  |     |I76 a|     |     |     |     |     |     |     |
 345.#412 I77   Def    BSFIT(A) rcx  |     |I77 a|     |     |     |     |     |     |     |
 348.#413 I77   Use *  Keep     rcx  |     |I77 a|     |     |     |     |     |     |     |
 349.#414 I78   Def    BSFIT(A) rcx  |     |I78 a|     |     |     |     |     |     |     |
 350.#415 I78   Use *  Keep     rcx  |     |I78 a|     |     |     |     |     |     |     |
 353.#416 I79   Def    Alloc    rcx  |     |I79 a|     |     |     |     |     |     |     |
 354.#417 rcx   Fixd   Keep     rcx  |     |I79 a|     |     |     |     |     |     |     |
 354.#418 I79   Use *  Keep     rcx  |     |I79 a|     |     |     |     |     |     |     |
 355.#419 rcx   Fixd   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 355.#420 I80   Def    Alloc    rcx  |     |I80 a|     |     |     |     |     |     |     |
 356.#421 rcx   Fixd   Keep     rcx  |     |I80 a|     |     |     |     |     |     |     |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc  RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
 356.#422 I80   Use *  Keep     rcx  |     |I80 a|     |     |     |     |     |     |     |
 357.#423 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
 357.#424 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 357.#425 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
 357.#426 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
 357.#427 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
 357.#428 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
 357.#429 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
 361.#430 I81   Def    ORDER(A) rdx  |     |     |I81 a|     |     |     |     |     |     |
 362.#431 I81   Use *  Keep     rdx  |     |     |I81 a|     |     |     |     |     |     |
 363.#432 I82   Def    Alloc    rcx  |     |I82 a|     |     |     |     |     |     |     |
 365.#433 I83   Def    Alloc    rdx  |     |I82 a|I83 a|     |     |     |     |     |     |
 366.#434 rcx   Fixd   Keep     rcx  |     |I82 a|I83 a|     |     |     |     |     |     |
 366.#435 I82   Use *  Keep     rcx  |     |I82 a|I83 a|     |     |     |     |     |     |
 366.#436 rdx   Fixd   Keep     rdx  |     |I82 a|I83 a|     |     |     |     |     |     |
 366.#437 I83   Use *  Keep     rdx  |     |I82 a|I83 a|     |     |     |     |     |     |
 367.#438 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
 367.#439 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 367.#440 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
 367.#441 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
 367.#442 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
 367.#443 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
 367.#444 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
 367.#445 mm0   Kill   Keep     mm0  |     |     |     |     |     |     |     |     |     |
 367.#446 mm1   Kill   Keep     mm1  |     |     |     |     |     |     |     |     |     |
 367.#447 mm2   Kill   Keep     mm2  |     |     |     |     |     |     |     |     |     |
 367.#448 mm3   Kill   Keep     mm3  |     |     |     |     |     |     |     |     |     |
 367.#449 mm4   Kill   Keep     mm4  |     |     |     |     |     |     |     |     |     |
 367.#450 mm5   Kill   Keep     mm5  |     |     |     |     |     |     |     |     |     |
 371.#451 I84   Def    ORDER(A) rdx  |     |     |I84 a|     |     |     |     |     |     |
 374.#452 I84   Use *  Keep     rdx  |     |     |I84 a|     |     |     |     |     |     |
 375.#453 I85   Def    ORDER(A) rdx  |     |     |I85 a|     |     |     |     |     |     |
 376.#454 I85   Use *  Keep     rdx  |     |     |I85 a|     |     |     |     |     |     |
 377.#455 I86   Def    Alloc    rcx  |     |I86 a|     |     |     |     |     |     |     |
 379.#456 I87   Def    BSFIT(A) rdx  |     |I86 a|I87 a|     |     |     |     |     |     |
 382.#457 I87   Use *  Keep     rdx  |     |I86 a|I87 a|     |     |     |     |     |     |
 383.#458 I88   Def    BSFIT(A) rdx  |     |I86 a|I88 a|     |     |     |     |     |     |
 386.#459 I88   Use *  Keep     rdx  |     |I86 a|I88 a|     |     |     |     |     |     |
 387.#460 I89   Def    BSFIT(A) rdx  |     |I86 a|I89 a|     |     |     |     |     |     |
 390.#461 I89   Use *  Keep     rdx  |     |I86 a|I89 a|     |     |     |     |     |     |
 391.#462 I90   Def    Alloc    rdx  |     |I86 a|I90 a|     |     |     |     |     |     |
 392.#463 rcx   Fixd   Keep     rcx  |     |I86 a|I90 a|     |     |     |     |     |     |
 392.#464 I86   Use *  Keep     rcx  |     |I86 a|I90 a|     |     |     |     |     |     |
 392.#465 rdx   Fixd   Keep     rdx  |     |I86 a|I90 a|     |     |     |     |     |     |
 392.#466 I90   Use *  Keep     rdx  |     |I86 a|I90 a|     |     |     |     |     |     |
 393.#467 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
 393.#468 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 393.#469 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
 393.#470 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
 393.#471 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
 393.#472 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
 393.#473 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
 393.#474 mm0   Kill   Keep     mm0  |     |     |     |     |     |     |     |     |     |
 393.#475 mm1   Kill   Keep     mm1  |     |     |     |     |     |     |     |     |     |
 393.#476 mm2   Kill   Keep     mm2  |     |     |     |     |     |     |     |     |     |
 393.#477 mm3   Kill   Keep     mm3  |     |     |     |     |     |     |     |     |     |
 393.#478 mm4   Kill   Keep     mm4  |     |     |     |     |     |     |     |     |     |
 393.#479 mm5   Kill   Keep     mm5  |     |     |     |     |     |     |     |     |     |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc  RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
 397.#480 C91   Def    Alloc    rcx  |     |C91 a|     |     |     |     |     |     |     |
 398.#481 rcx   Fixd   Keep     rcx  |     |C91 a|     |     |     |     |     |     |     |
 398.#482 C91   Use *  Keep     rcx  |     |C91 a|     |     |     |     |     |     |     |
 399.#483 rcx   Fixd   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 399.#484 I92   Def    Alloc    rcx  |     |I92 a|     |     |     |     |     |     |     |
 400.#485 rcx   Fixd   Keep     rcx  |     |I92 a|     |     |     |     |     |     |     |
 400.#486 I92   Use *  Keep     rcx  |     |I92 a|     |     |     |     |     |     |     |
 401.#487 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
 401.#488 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 401.#489 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
 401.#490 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
 401.#491 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
 401.#492 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
 401.#493 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
 401.#494 rax   Fixd   Keep     rax  |     |     |     |     |     |     |     |     |     |
 401.#495 I93   Def    Alloc    rax  |I93 a|     |     |     |     |     |     |     |     |
 402.#496 I93   Use *  Keep     rax  |I93 a|     |     |     |     |     |     |     |     |
 405.#497 I94   Def    BSFIT(A) rcx  |     |I94 a|     |     |     |     |     |     |     |
 408.#498 I94   Use *  Keep     rcx  |     |I94 a|     |     |     |     |     |     |     |
 409.#499 I95   Def    BSFIT(A) rcx  |     |I95 a|     |     |     |     |     |     |     |
 412.#500 I95   Use *  Keep     rcx  |     |I95 a|     |     |     |     |     |     |     |
 413.#501 I96   Def    BSFIT(A) rcx  |     |I96 a|     |     |     |     |     |     |     |
 414.#502 I96   Use *  Keep     rcx  |     |I96 a|     |     |     |     |     |     |     |
 417.#503 I97   Def    Alloc    rcx  |     |I97 a|     |     |     |     |     |     |     |
 418.#504 rcx   Fixd   Keep     rcx  |     |I97 a|     |     |     |     |     |     |     |
 418.#505 I97   Use *  Keep     rcx  |     |I97 a|     |     |     |     |     |     |     |
 419.#506 rcx   Fixd   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 419.#507 I98   Def    Alloc    rcx  |     |I98 a|     |     |     |     |     |     |     |
 420.#508 rcx   Fixd   Keep     rcx  |     |I98 a|     |     |     |     |     |     |     |
 420.#509 I98   Use *  Keep     rcx  |     |I98 a|     |     |     |     |     |     |     |
 421.#510 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
 421.#511 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 421.#512 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
 421.#513 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
 421.#514 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
 421.#515 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
 421.#516 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
 425.#517 I99   Def    ORDER(A) rdx  |     |     |I99 a|     |     |     |     |     |     |
 426.#518 I99   Use *  Keep     rdx  |     |     |I99 a|     |     |     |     |     |     |
 427.#519 I100  Def    Alloc    rcx  |     |I100a|     |     |     |     |     |     |     |
 429.#520 I101  Def    Alloc    rdx  |     |I100a|I101a|     |     |     |     |     |     |
 430.#521 rcx   Fixd   Keep     rcx  |     |I100a|I101a|     |     |     |     |     |     |
 430.#522 I100  Use *  Keep     rcx  |     |I100a|I101a|     |     |     |     |     |     |
 430.#523 rdx   Fixd   Keep     rdx  |     |I100a|I101a|     |     |     |     |     |     |
 430.#524 I101  Use *  Keep     rdx  |     |I100a|I101a|     |     |     |     |     |     |
 431.#525 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
 431.#526 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 431.#527 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
 431.#528 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
 431.#529 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
 431.#530 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
 431.#531 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
 431.#532 mm0   Kill   Keep     mm0  |     |     |     |     |     |     |     |     |     |
 431.#533 mm1   Kill   Keep     mm1  |     |     |     |     |     |     |     |     |     |
 431.#534 mm2   Kill   Keep     mm2  |     |     |     |     |     |     |     |     |     |
 431.#535 mm3   Kill   Keep     mm3  |     |     |     |     |     |     |     |     |     |
 431.#536 mm4   Kill   Keep     mm4  |     |     |     |     |     |     |     |     |     |
 431.#537 mm5   Kill   Keep     mm5  |     |     |     |     |     |     |     |     |     |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc  RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
 440.#538 BB8  PredBB7               |     |     |     |     |     |     |     |     |     |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc  RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
 442.#539 BB10 PredBB0               |     |     |     |     |     |     |     |     |     |
 447.#540 I102  Def    BSFIT(A) rcx  |     |I102a|     |     |     |     |     |     |     |
 448.#541 I102  Use *  Keep     rcx  |     |I102a|     |     |     |     |     |     |     |
 449.#542 I103  Def    BSFIT(A) rcx  |     |I103a|     |     |     |     |     |     |     |
 452.#543 I103  Use *  Keep     rcx  |     |I103a|     |     |     |     |     |     |     |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc  RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
 456.#544 BB11 PredBB10              |     |     |     |     |     |     |     |     |     |
 461.#545 I104  Def    Alloc    rcx  |     |I104a|     |     |     |     |     |     |     |
 462.#546 rcx   Fixd   Keep     rcx  |     |I104a|     |     |     |     |     |     |     |
 462.#547 I104  Use *  Keep     rcx  |     |I104a|     |     |     |     |     |     |     |
 463.#548 rcx   Fixd   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 463.#549 I105  Def    Alloc    rcx  |     |I105a|     |     |     |     |     |     |     |
 464.#550 rcx   Fixd   Keep     rcx  |     |I105a|     |     |     |     |     |     |     |
 464.#551 I105  Use *  Keep     rcx  |     |I105a|     |     |     |     |     |     |     |
 465.#552 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
 465.#553 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 465.#554 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
 465.#555 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
 465.#556 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
 465.#557 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
 465.#558 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc  RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
 470.#559 BB12 PredBB10              |     |     |     |     |     |     |     |     |     |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc  RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
 476.#560 BB9  PredBB0               |     |     |     |     |     |     |     |     |     |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc  RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
 478.#561 BB13 PredBB0               |     |     |     |     |     |     |     |     |     |
 487.#562 I106  Def    ORDER(A) rax  |I106a|     |     |     |     |     |     |     |     |
 490.#563 I106  Use *  Keep     rax  |I106a|     |     |     |     |     |     |     |     |
 491.#564 I107  Def    COVRS(A) rax  |I107a|     |     |     |     |     |     |     |     |
 492.#565 I107  Use *  Keep     rax  |I107a|     |     |     |     |     |     |     |     |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc  RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
 494.#566 BB15 PredBB14              |     |     |     |     |     |     |     |     |     |
 499.#567 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
 499.#568 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 499.#569 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
 499.#570 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
 499.#571 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
 499.#572 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
 499.#573 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
 499.#574 rax   Fixd   Keep     rax  |     |     |     |     |     |     |     |     |     |
 499.#575 I108  Def    Alloc    rax  |I108a|     |     |     |     |     |     |     |     |
 500.#576 I108  Use *  Keep     rax  |I108a|     |     |     |     |     |     |     |     |
 505.#577 I109  Def    BSFIT(A) rcx  |     |I109a|     |     |     |     |     |     |     |
 506.#578 I109  Use *  Keep     rcx  |     |I109a|     |     |     |     |     |     |     |
 511.#579 I110  Def    Alloc    rcx  |     |I110a|     |     |     |     |     |     |     |
 512.#580 rcx   Fixd   Keep     rcx  |     |I110a|     |     |     |     |     |     |     |
 512.#581 I110  Use *  Keep     rcx  |     |I110a|     |     |     |     |     |     |     |
 513.#582 rcx   Fixd   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 513.#583 I111  Def    Alloc    rcx  |     |I111a|     |     |     |     |     |     |     |
 514.#584 rcx   Fixd   Keep     rcx  |     |I111a|     |     |     |     |     |     |     |
 514.#585 I111  Use *  Keep     rcx  |     |I111a|     |     |     |     |     |     |     |
 515.#586 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
 515.#587 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 515.#588 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
 515.#589 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
 515.#590 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
 515.#591 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
 515.#592 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
 515.#593 rax   Fixd   Keep     rax  |     |     |     |     |     |     |     |     |     |
 515.#594 I112  Def    Alloc    rax  |I112a|     |     |     |     |     |     |     |     |
 516.#595 I112  Use *  Keep     rax  |I112a|     |     |     |     |     |     |     |     |
 521.#596 C113  Def    BSFIT(A) rdx  |     |     |C113a|     |     |     |     |     |     |
 522.#597 C113  Use *  Keep     rdx  |     |     |C113a|     |     |     |     |     |     |
 523.#598 I114  Def    Alloc    rdx  |     |     |I114a|     |     |     |     |     |     |
 524.#599 rdx   Fixd   Keep     rdx  |     |     |I114a|     |     |     |     |     |     |
 524.#600 I114  Use *  Keep     rdx  |     |     |I114a|     |     |     |     |     |     |
 525.#601 rdx   Fixd   Keep     rdx  |     |     |     |     |     |     |     |     |     |
 525.#602 I115  Def    Alloc    rdx  |     |     |I115a|     |     |     |     |     |     |
 527.#603 I116  Def    Alloc    rcx  |     |I116a|I115a|     |     |     |     |     |     |
 528.#604 rcx   Fixd   Keep     rcx  |     |I116a|I115a|     |     |     |     |     |     |
 528.#605 I116  Use *  Keep     rcx  |     |I116a|I115a|     |     |     |     |     |     |
 529.#606 rcx   Fixd   Keep     rcx  |     |     |I115a|     |     |     |     |     |     |
 529.#607 I117  Def    Alloc    rcx  |     |I117a|I115a|     |     |     |     |     |     |
 530.#608 rdx   Fixd   Keep     rdx  |     |I117a|I115a|     |     |     |     |     |     |
 530.#609 I115  Use *  Keep     rdx  |     |I117a|I115a|     |     |     |     |     |     |
 530.#610 rcx   Fixd   Keep     rcx  |     |I117a|I115a|     |     |     |     |     |     |
 530.#611 I117  Use *  Keep     rcx  |     |I117a|I115a|     |     |     |     |     |     |
 531.#612 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
 531.#613 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 531.#614 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
 531.#615 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
 531.#616 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
 531.#617 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
 531.#618 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
 531.#619 rax   Fixd   Keep     rax  |     |     |     |     |     |     |     |     |     |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc  RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
 531.#620 I118  Def    Alloc    rax  |I118a|     |     |     |     |     |     |     |     |
 532.#621 I118  Use *  Keep     rax  |I118a|     |     |     |     |     |     |     |     |
 537.#622 I119  Def    Alloc    rcx  |     |I119a|     |     |     |     |     |     |     |
 538.#623 rcx   Fixd   Keep     rcx  |     |I119a|     |     |     |     |     |     |     |
 538.#624 I119  Use *  Keep     rcx  |     |I119a|     |     |     |     |     |     |     |
 539.#625 rcx   Fixd   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 539.#626 I120  Def    Alloc    rcx  |     |I120a|     |     |     |     |     |     |     |
 540.#627 rcx   Fixd   Keep     rcx  |     |I120a|     |     |     |     |     |     |     |
 540.#628 I120  Use *  Keep     rcx  |     |I120a|     |     |     |     |     |     |     |
 541.#629 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
 541.#630 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 541.#631 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
 541.#632 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
 541.#633 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
 541.#634 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
 541.#635 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc  RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
 550.#636 BB28 PredBB15              |     |     |     |     |     |     |     |     |     |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc  RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
 562.#637 BB16 PredBB28              |     |     |     |     |     |     |     |     |     |
 571.#638 I121  Def    BSFIT(A) rdx  |     |     |I121a|     |     |     |     |     |     |
 574.#639 I121  Use *  Keep     rdx  |     |     |I121a|     |     |     |     |     |     |
 575.#640 I122  Def    BSFIT(A) rdx  |     |     |I122a|     |     |     |     |     |     |
 576.#641 I122  Use *  Keep     rdx  |     |     |I122a|     |     |     |     |     |     |
 581.#642 C123  Def    BSFIT(A) rdx  |     |     |C123a|     |     |     |     |     |     |
 582.#643 C123  Use *  Keep     rdx  |     |     |C123a|     |     |     |     |     |     |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc  RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
 584.#644 BB17 PredBB16              |     |     |     |     |     |     |     |     |     |
 589.#645 I124  Def    Alloc    rdx  |     |     |I124a|     |     |     |     |     |     |
 590.#646 rdx   Fixd   Keep     rdx  |     |     |I124a|     |     |     |     |     |     |
 590.#647 I124  Use *  Keep     rdx  |     |     |I124a|     |     |     |     |     |     |
 591.#648 rdx   Fixd   Keep     rdx  |     |     |     |     |     |     |     |     |     |
 591.#649 I125  Def    Alloc    rdx  |     |     |I125a|     |     |     |     |     |     |
 593.#650 I126  Def    Alloc    rcx  |     |I126a|I125a|     |     |     |     |     |     |
 594.#651 rcx   Fixd   Keep     rcx  |     |I126a|I125a|     |     |     |     |     |     |
 594.#652 I126  Use *  Keep     rcx  |     |I126a|I125a|     |     |     |     |     |     |
 595.#653 rcx   Fixd   Keep     rcx  |     |     |I125a|     |     |     |     |     |     |
 595.#654 I127  Def    Alloc    rcx  |     |I127a|I125a|     |     |     |     |     |     |
 596.#655 rdx   Fixd   Keep     rdx  |     |I127a|I125a|     |     |     |     |     |     |
 596.#656 I125  Use *  Keep     rdx  |     |I127a|I125a|     |     |     |     |     |     |
 596.#657 rcx   Fixd   Keep     rcx  |     |I127a|I125a|     |     |     |     |     |     |
 596.#658 I127  Use *  Keep     rcx  |     |I127a|I125a|     |     |     |     |     |     |
 597.#659 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
 597.#660 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 597.#661 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
 597.#662 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
 597.#663 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
 597.#664 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
 597.#665 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
 609.#666 I128  Def    BSFIT(A) rcx  |     |I128a|     |     |     |     |     |     |     |
 612.#667 I128  Use *  Keep     rcx  |     |I128a|     |     |     |     |     |     |     |
 613.#668 I129  Def    BSFIT(A) rcx  |     |I129a|     |     |     |     |     |     |     |
 616.#669 I129  Use *  Keep     rcx  |     |I129a|     |     |     |     |     |     |     |
 617.#670 I130  Def    BSFIT(A) rcx  |     |I130a|     |     |     |     |     |     |     |
 619.#671 I131  Def    ORDER(A) rax  |I131a|I130a|     |     |     |     |     |     |     |
 622.#672 I131  Use *  Keep     rax  |I131a|I130a|     |     |     |     |     |     |     |
 623.#673 I132  Def    ORDER(A) rax  |I132a|I130a|     |     |     |     |     |     |     |
 628.#674 I130  Use *  Keep     rcx  |I132a|I130a|     |     |     |     |     |     |     |
 628.#675 I132  Use *  Keep     rax  |I132a|I130a|     |     |     |     |     |     |     |
 629.#676 I133  Def    BSFIT(A) rcx  |     |I133a|     |     |     |     |     |     |     |
 630.#677 I133  Use *  Keep     rcx  |     |I133a|     |     |     |     |     |     |     |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc  RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
 642.#678 BB18 PredBB17              |     |     |     |     |     |     |     |     |     |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc  RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
 652.#679 BB19 PredBB17              |     |     |     |     |     |     |     |     |     |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc  RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
 662.#680 BB20 PredBB18              |     |     |     |     |     |     |     |     |     |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc  RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
 664.#681 BB22 PredBB19              |     |     |     |     |     |     |     |     |     |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc  RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
 666.#682 BB24 PredBB0               |     |     |     |     |     |     |     |     |     |
 671.#683 I134  Def    BSFIT(A) rcx  |     |I134a|     |     |     |     |     |     |     |
 672.#684 I134  Use *  Keep     rcx  |     |I134a|     |     |     |     |     |     |     |
 673.#685 I135  Def    BSFIT(A) rcx  |     |I135a|     |     |     |     |     |     |     |
 676.#686 I135  Use *  Keep     rcx  |     |I135a|     |     |     |     |     |     |     |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc  RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
 680.#687 BB25 PredBB24              |     |     |     |     |     |     |     |     |     |
 685.#688 I136  Def    Alloc    rcx  |     |I136a|     |     |     |     |     |     |     |
 686.#689 rcx   Fixd   Keep     rcx  |     |I136a|     |     |     |     |     |     |     |
 686.#690 I136  Use *  Keep     rcx  |     |I136a|     |     |     |     |     |     |     |
 687.#691 rcx   Fixd   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 687.#692 I137  Def    Alloc    rcx  |     |I137a|     |     |     |     |     |     |     |
 688.#693 rcx   Fixd   Keep     rcx  |     |I137a|     |     |     |     |     |     |     |
 688.#694 I137  Use *  Keep     rcx  |     |I137a|     |     |     |     |     |     |     |
 689.#695 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
 689.#696 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 689.#697 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
 689.#698 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
 689.#699 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
 689.#700 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
 689.#701 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc  RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
 694.#702 BB26 PredBB24              |     |     |     |     |     |     |     |     |     |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc  RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
 700.#703 BB21 PredBB0               |     |     |     |     |     |     |     |     |     |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc  RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
 702.#704 BB23 PredBB0               |     |     |     |     |     |     |     |     |     |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc  RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
 704.#705 BB27 PredBB0               |     |     |     |     |     |     |     |     |     |
 709.#706 C138  Def    Alloc    rcx  |     |C138a|     |     |     |     |     |     |     |
 710.#707 rcx   Fixd   Keep     rcx  |     |C138a|     |     |     |     |     |     |     |
 710.#708 C138  Use *  Keep     rcx  |     |C138a|     |     |     |     |     |     |     |
 711.#709 rcx   Fixd   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 711.#710 I139  Def    Alloc    rcx  |     |I139a|     |     |     |     |     |     |     |
 712.#711 rcx   Fixd   Keep     rcx  |     |I139a|     |     |     |     |     |     |     |
 712.#712 I139  Use *  Keep     rcx  |     |I139a|     |     |     |     |     |     |     |
 713.#713 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
 713.#714 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 713.#715 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
 713.#716 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
 713.#717 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
 713.#718 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
 713.#719 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc  RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
 722.#720 BB29 PredBB0               |     |     |     |     |     |     |     |     |     |
 727.#721 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
 727.#722 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 727.#723 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
 727.#724 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
 727.#725 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
 727.#726 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
 727.#727 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
 727.#728 rax   Fixd   Keep     rax  |     |     |     |     |     |     |     |     |     |
 727.#729 I140  Def    Alloc    rax  |I140a|     |     |     |     |     |     |     |     |
 728.#730 I140  Use *  Keep     rax  |I140a|     |     |     |     |     |     |     |     |
 733.#731 I141  Def    BSFIT(A) rcx  |     |I141a|     |     |     |     |     |     |     |
 734.#732 I141  Use *  Keep     rcx  |     |I141a|     |     |     |     |     |     |     |
 739.#733 I142  Def    Alloc    rcx  |     |I142a|     |     |     |     |     |     |     |
 740.#734 rcx   Fixd   Keep     rcx  |     |I142a|     |     |     |     |     |     |     |
 740.#735 I142  Use *  Keep     rcx  |     |I142a|     |     |     |     |     |     |     |
 741.#736 rcx   Fixd   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 741.#737 I143  Def    Alloc    rcx  |     |I143a|     |     |     |     |     |     |     |
 742.#738 rcx   Fixd   Keep     rcx  |     |I143a|     |     |     |     |     |     |     |
 742.#739 I143  Use *  Keep     rcx  |     |I143a|     |     |     |     |     |     |     |
 743.#740 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
 743.#741 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 743.#742 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
 743.#743 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
 743.#744 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
 743.#745 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
 743.#746 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
 743.#747 rax   Fixd   Keep     rax  |     |     |     |     |     |     |     |     |     |
 743.#748 I144  Def    Alloc    rax  |I144a|     |     |     |     |     |     |     |     |
 744.#749 I144  Use *  Keep     rax  |I144a|     |     |     |     |     |     |     |     |
 749.#750 C145  Def    BSFIT(A) rdx  |     |     |C145a|     |     |     |     |     |     |
 750.#751 C145  Use *  Keep     rdx  |     |     |C145a|     |     |     |     |     |     |
 751.#752 I146  Def    Alloc    rdx  |     |     |I146a|     |     |     |     |     |     |
 752.#753 rdx   Fixd   Keep     rdx  |     |     |I146a|     |     |     |     |     |     |
 752.#754 I146  Use *  Keep     rdx  |     |     |I146a|     |     |     |     |     |     |
 753.#755 rdx   Fixd   Keep     rdx  |     |     |     |     |     |     |     |     |     |
 753.#756 I147  Def    Alloc    rdx  |     |     |I147a|     |     |     |     |     |     |
 755.#757 I148  Def    Alloc    rcx  |     |I148a|I147a|     |     |     |     |     |     |
 756.#758 rcx   Fixd   Keep     rcx  |     |I148a|I147a|     |     |     |     |     |     |
 756.#759 I148  Use *  Keep     rcx  |     |I148a|I147a|     |     |     |     |     |     |
 757.#760 rcx   Fixd   Keep     rcx  |     |     |I147a|     |     |     |     |     |     |
 757.#761 I149  Def    Alloc    rcx  |     |I149a|I147a|     |     |     |     |     |     |
 758.#762 rdx   Fixd   Keep     rdx  |     |I149a|I147a|     |     |     |     |     |     |
 758.#763 I147  Use *  Keep     rdx  |     |I149a|I147a|     |     |     |     |     |     |
 758.#764 rcx   Fixd   Keep     rcx  |     |I149a|I147a|     |     |     |     |     |     |
 758.#765 I149  Use *  Keep     rcx  |     |I149a|I147a|     |     |     |     |     |     |
 759.#766 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
 759.#767 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 759.#768 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
 759.#769 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
 759.#770 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
 759.#771 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
 759.#772 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
 759.#773 rax   Fixd   Keep     rax  |     |     |     |     |     |     |     |     |     |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc  RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
 759.#774 I150  Def    Alloc    rax  |I150a|     |     |     |     |     |     |     |     |
 760.#775 I150  Use *  Keep     rax  |I150a|     |     |     |     |     |     |     |     |
 765.#776 I151  Def    Alloc    rcx  |     |I151a|     |     |     |     |     |     |     |
 766.#777 rcx   Fixd   Keep     rcx  |     |I151a|     |     |     |     |     |     |     |
 766.#778 I151  Use *  Keep     rcx  |     |I151a|     |     |     |     |     |     |     |
 767.#779 rcx   Fixd   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 767.#780 I152  Def    Alloc    rcx  |     |I152a|     |     |     |     |     |     |     |
 768.#781 rcx   Fixd   Keep     rcx  |     |I152a|     |     |     |     |     |     |     |
 768.#782 I152  Use *  Keep     rcx  |     |I152a|     |     |     |     |     |     |     |
 769.#783 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
 769.#784 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 769.#785 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
 769.#786 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
 769.#787 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
 769.#788 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
 769.#789 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
 777.#790 C153  Def    BSFIT(A) rcx  |     |C153a|     |     |     |     |     |     |     |
 778.#791 C153  Use *  Keep     rcx  |     |C153a|     |     |     |     |     |     |     |
 779.#792 I154  Def    Alloc    rcx  |     |I154a|     |     |     |     |     |     |     |
 780.#793 rcx   Fixd   Keep     rcx  |     |I154a|     |     |     |     |     |     |     |
 780.#794 I154  Use *  Keep     rcx  |     |I154a|     |     |     |     |     |     |     |
 781.#795 rcx   Fixd   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 781.#796 I155  Def    Alloc    rcx  |     |I155a|     |     |     |     |     |     |     |
 782.#797 rcx   Fixd   Keep     rcx  |     |I155a|     |     |     |     |     |     |     |
 782.#798 I155  Use *  Keep     rcx  |     |I155a|     |     |     |     |     |     |     |
 783.#799 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
 783.#800 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 783.#801 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
 783.#802 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
 783.#803 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
 783.#804 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
 783.#805 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
 791.#806 C156  Def    BSFIT(A) rcx  |     |C156a|     |     |     |     |     |     |     |
 792.#807 C156  Use *  Keep     rcx  |     |C156a|     |     |     |     |     |     |     |
 793.#808 I157  Def    Alloc    rcx  |     |I157a|     |     |     |     |     |     |     |
 794.#809 rcx   Fixd   Keep     rcx  |     |I157a|     |     |     |     |     |     |     |
 794.#810 I157  Use *  Keep     rcx  |     |I157a|     |     |     |     |     |     |     |
 795.#811 rcx   Fixd   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 795.#812 I158  Def    Alloc    rcx  |     |I158a|     |     |     |     |     |     |     |
 796.#813 rcx   Fixd   Keep     rcx  |     |I158a|     |     |     |     |     |     |     |
 796.#814 I158  Use *  Keep     rcx  |     |I158a|     |     |     |     |     |     |     |
 797.#815 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
 797.#816 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 797.#817 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
 797.#818 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
 797.#819 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
 797.#820 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
 797.#821 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
 805.#822 C159  Def    BSFIT(A) rcx  |     |C159a|     |     |     |     |     |     |     |
 806.#823 C159  Use *  Keep     rcx  |     |C159a|     |     |     |     |     |     |     |
 807.#824 I160  Def    Alloc    rcx  |     |I160a|     |     |     |     |     |     |     |
 808.#825 rcx   Fixd   Keep     rcx  |     |I160a|     |     |     |     |     |     |     |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc  RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
 808.#826 I160  Use *  Keep     rcx  |     |I160a|     |     |     |     |     |     |     |
 809.#827 rcx   Fixd   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 809.#828 I161  Def    Alloc    rcx  |     |I161a|     |     |     |     |     |     |     |
 810.#829 rcx   Fixd   Keep     rcx  |     |I161a|     |     |     |     |     |     |     |
 810.#830 I161  Use *  Keep     rcx  |     |I161a|     |     |     |     |     |     |     |
 811.#831 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
 811.#832 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 811.#833 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
 811.#834 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
 811.#835 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
 811.#836 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
 811.#837 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
 819.#838 C162  Def    BSFIT(A) rcx  |     |C162a|     |     |     |     |     |     |     |
 820.#839 C162  Use *  Keep     rcx  |     |C162a|     |     |     |     |     |     |     |
 821.#840 I163  Def    Alloc    rcx  |     |I163a|     |     |     |     |     |     |     |
 822.#841 rcx   Fixd   Keep     rcx  |     |I163a|     |     |     |     |     |     |     |
 822.#842 I163  Use *  Keep     rcx  |     |I163a|     |     |     |     |     |     |     |
 823.#843 rcx   Fixd   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 823.#844 I164  Def    Alloc    rcx  |     |I164a|     |     |     |     |     |     |     |
 824.#845 rcx   Fixd   Keep     rcx  |     |I164a|     |     |     |     |     |     |     |
 824.#846 I164  Use *  Keep     rcx  |     |I164a|     |     |     |     |     |     |     |
 825.#847 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
 825.#848 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 825.#849 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
 825.#850 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
 825.#851 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
 825.#852 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
 825.#853 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc  RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
 834.#854 BB39 PredBB29              |     |     |     |     |     |     |     |     |     |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc  RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
 846.#855 BB30 PredBB39              |     |     |     |     |     |     |     |     |     |
 855.#856 I165  Def    Alloc    rcx  |     |I165a|     |     |     |     |     |     |     |
 856.#857 rcx   Fixd   Keep     rcx  |     |I165a|     |     |     |     |     |     |     |
 856.#858 I165  Use *  Keep     rcx  |     |I165a|     |     |     |     |     |     |     |
 857.#859 rcx   Fixd   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 857.#860 I166  Def    Alloc    rcx  |     |I166a|     |     |     |     |     |     |     |
 858.#861 rcx   Fixd   Keep     rcx  |     |I166a|     |     |     |     |     |     |     |
 858.#862 I166  Use *  Keep     rcx  |     |I166a|     |     |     |     |     |     |     |
 859.#863 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
 859.#864 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 859.#865 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
 859.#866 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
 859.#867 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
 859.#868 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
 859.#869 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
 866.#870 I167  Def    BSFIT(A) rcx  |     |I167a|     |     |     |     |     |     |     |
 866.#871 I167  Use *  Keep     rcx  |     |I167a|     |     |     |     |     |     |     |
 871.#872 I168  Def    Alloc    rcx  |     |I168a|     |     |     |     |     |     |     |
 872.#873 rcx   Fixd   Keep     rcx  |     |I168a|     |     |     |     |     |     |     |
 872.#874 I168  Use *  Keep     rcx  |     |I168a|     |     |     |     |     |     |     |
 873.#875 rcx   Fixd   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 873.#876 I169  Def    Alloc    rcx  |     |I169a|     |     |     |     |     |     |     |
 874.#877 rcx   Fixd   Keep     rcx  |     |I169a|     |     |     |     |     |     |     |
 874.#878 I169  Use *  Keep     rcx  |     |I169a|     |     |     |     |     |     |     |
 875.#879 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
 875.#880 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 875.#881 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
 875.#882 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
 875.#883 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
 875.#884 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
 875.#885 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
 875.#886 rax   Fixd   Keep     rax  |     |     |     |     |     |     |     |     |     |
 875.#887 I170  Def    Alloc    rax  |I170a|     |     |     |     |     |     |     |     |
 876.#888 I170  Use *  Keep     rax  |I170a|     |     |     |     |     |     |     |     |
 885.#889 I171  Def    ORDER(A) rax  |I171a|     |     |     |     |     |     |     |     |
 886.#890 I171  Use *  Keep     rax  |I171a|     |     |     |     |     |     |     |     |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc  RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
 898.#891 BB31 PredBB30              |     |     |     |     |     |     |     |     |     |
 907.#892 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
 907.#893 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 907.#894 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
 907.#895 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
 907.#896 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
 907.#897 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
 907.#898 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
 907.#899 rax   Fixd   Keep     rax  |     |     |     |     |     |     |     |     |     |
 907.#900 I172  Def    Alloc    rax  |I172a|     |     |     |     |     |     |     |     |
 908.#901 I172  Use *  Keep     rax  |I172a|     |     |     |     |     |     |     |     |
 913.#902 I173  Def    Alloc    rcx  |     |I173a|     |     |     |     |     |     |     |
 914.#903 rcx   Fixd   Keep     rcx  |     |I173a|     |     |     |     |     |     |     |
 914.#904 I173  Use *  Keep     rcx  |     |I173a|     |     |     |     |     |     |     |
 915.#905 rcx   Fixd   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 915.#906 I174  Def    Alloc    rcx  |     |I174a|     |     |     |     |     |     |     |
 916.#907 rcx   Fixd   Keep     rcx  |     |I174a|     |     |     |     |     |     |     |
 916.#908 I174  Use *  Keep     rcx  |     |I174a|     |     |     |     |     |     |     |
 917.#909 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
 917.#910 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 917.#911 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
 917.#912 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
 917.#913 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
 917.#914 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
 917.#915 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc  RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
 930.#916 BB32 PredBB30              |     |     |     |     |     |     |     |     |     |
 935.#917 I175  Def    Alloc    rcx  |     |I175a|     |     |     |     |     |     |     |
 936.#918 rcx   Fixd   Keep     rcx  |     |I175a|     |     |     |     |     |     |     |
 936.#919 I175  Use *  Keep     rcx  |     |I175a|     |     |     |     |     |     |     |
 937.#920 rcx   Fixd   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 937.#921 I176  Def    Alloc    rcx  |     |I176a|     |     |     |     |     |     |     |
 938.#922 rcx   Fixd   Keep     rcx  |     |I176a|     |     |     |     |     |     |     |
 938.#923 I176  Use *  Keep     rcx  |     |I176a|     |     |     |     |     |     |     |
 939.#924 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
 939.#925 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 939.#926 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
 939.#927 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
 939.#928 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
 939.#929 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
 939.#930 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
 939.#931 rax   Fixd   Keep     rax  |     |     |     |     |     |     |     |     |     |
 939.#932 I177  Def    Alloc    rax  |I177a|     |     |     |     |     |     |     |     |
 940.#933 I177  Use *  Keep     rax  |I177a|     |     |     |     |     |     |     |     |
 949.#934 I178  Def    ORDER(A) rax  |I178a|     |     |     |     |     |     |     |     |
 950.#935 I178  Use *  Keep     rax  |I178a|     |     |     |     |     |     |     |     |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc  RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
 962.#936 BB33 PredBB32              |     |     |     |     |     |     |     |     |     |
 971.#937 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
 971.#938 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 971.#939 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
 971.#940 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
 971.#941 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
 971.#942 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
 971.#943 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc  RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
 984.#944 BB34 PredBB32              |     |     |     |     |     |     |     |     |     |
 989.#945 I179  Def    Alloc    rcx  |     |I179a|     |     |     |     |     |     |     |
 990.#946 rcx   Fixd   Keep     rcx  |     |I179a|     |     |     |     |     |     |     |
 990.#947 I179  Use *  Keep     rcx  |     |I179a|     |     |     |     |     |     |     |
 991.#948 rcx   Fixd   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 991.#949 I180  Def    Alloc    rcx  |     |I180a|     |     |     |     |     |     |     |
 992.#950 rcx   Fixd   Keep     rcx  |     |I180a|     |     |     |     |     |     |     |
 992.#951 I180  Use *  Keep     rcx  |     |I180a|     |     |     |     |     |     |     |
 993.#952 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
 993.#953 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 993.#954 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
 993.#955 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
 993.#956 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
 993.#957 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
 993.#958 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
 993.#959 rax   Fixd   Keep     rax  |     |     |     |     |     |     |     |     |     |
 993.#960 I181  Def    Alloc    rax  |I181a|     |     |     |     |     |     |     |     |
 994.#961 I181  Use *  Keep     rax  |I181a|     |     |     |     |     |     |     |     |
1003.#962 I182  Def    BSFIT(A) rcx  |     |I182a|     |     |     |     |     |     |     |
1004.#963 I182  Use *  Keep     rcx  |     |I182a|     |     |     |     |     |     |     |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc  RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
1016.#964 BB35 PredBB34              |     |     |     |     |     |     |     |     |     |
1025.#965 I183  Def    BSFIT(A) rcx  |     |I183a|     |     |     |     |     |     |     |
1030.#966 I183  Use *  Keep     rcx  |     |I183a|     |     |     |     |     |     |     |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc  RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
1040.#967 BB36 PredBB34              |     |     |     |     |     |     |     |     |     |
1045.#968 I184  Def    Alloc    rcx  |     |I184a|     |     |     |     |     |     |     |
1046.#969 rcx   Fixd   Keep     rcx  |     |I184a|     |     |     |     |     |     |     |
1046.#970 I184  Use *  Keep     rcx  |     |I184a|     |     |     |     |     |     |     |
1047.#971 rcx   Fixd   Keep     rcx  |     |     |     |     |     |     |     |     |     |
1047.#972 I185  Def    Alloc    rcx  |     |I185a|     |     |     |     |     |     |     |
1048.#973 rcx   Fixd   Keep     rcx  |     |I185a|     |     |     |     |     |     |     |
1048.#974 I185  Use *  Keep     rcx  |     |I185a|     |     |     |     |     |     |     |
1049.#975 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
1049.#976 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
1049.#977 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
1049.#978 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
1049.#979 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
1049.#980 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
1049.#981 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
1049.#982 rax   Fixd   Keep     rax  |     |     |     |     |     |     |     |     |     |
1049.#983 I186  Def    Alloc    rax  |I186a|     |     |     |     |     |     |     |     |
1050.#984 I186  Use *  Keep     rax  |I186a|     |     |     |     |     |     |     |     |
1059.#985 I187  Def    ORDER(A) rax  |I187a|     |     |     |     |     |     |     |     |
1060.#986 I187  Use *  Keep     rax  |I187a|     |     |     |     |     |     |     |     |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc  RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
1072.#987 BB37 PredBB36              |     |     |     |     |     |     |     |     |     |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc  RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
1082.#988 BB38 PredBB31              |     |     |     |     |     |     |     |     |     |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc  RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
1088.#989 BB40 PredBB37              |     |     |     |     |     |     |     |     |     |
1093.#990 I188  Def    ORDER(A) rax  |I188a|     |     |     |     |     |     |     |     |
1098.#991 I188  Use *  Keep     rax  |     |     |     |     |     |     |     |     |     |

------------
REFPOSITIONS AFTER ALLOCATION: 
------------
<RefPosition #0   @0   RefTypeBB  BB01 regmask=[] minReg=1 wt=100.00>
<RefPosition #1   @4   RefTypeBB  BB02 regmask=[] minReg=1 wt=100.00>
<RefPosition #2   @16  RefTypeBB  BB03 regmask=[] minReg=1 wt=50.00>
<RefPosition #3   @19  RefTypeKill <Reg:rax>  BB03 regmask=[rax] minReg=1 last wt=50.00>
<RefPosition #4   @19  RefTypeKill <Reg:rcx>  BB03 regmask=[rcx] minReg=1 last wt=50.00>
<RefPosition #5   @19  RefTypeKill <Reg:rdx>  BB03 regmask=[rdx] minReg=1 last wt=50.00>
<RefPosition #6   @19  RefTypeKill <Reg:r8 >  BB03 regmask=[r8] minReg=1 last wt=50.00>
<RefPosition #7   @19  RefTypeKill <Reg:r9 >  BB03 regmask=[r9] minReg=1 last wt=50.00>
<RefPosition #8   @19  RefTypeKill <Reg:r10>  BB03 regmask=[r10] minReg=1 last wt=50.00>
<RefPosition #9   @19  RefTypeKill <Reg:r11>  BB03 regmask=[r11] minReg=1 last wt=50.00>
<RefPosition #10  @20  RefTypeBB  BB04 regmask=[] minReg=1 wt=100.00>
<RefPosition #11  @22  RefTypeBB  BB05 regmask=[] minReg=1 wt=100.00>
<RefPosition #12  @31  RefTypeKill <Reg:rax>  BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #13  @31  RefTypeKill <Reg:rcx>  BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #14  @31  RefTypeKill <Reg:rdx>  BB05 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #15  @31  RefTypeKill <Reg:r8 >  BB05 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #16  @31  RefTypeKill <Reg:r9 >  BB05 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #17  @31  RefTypeKill <Reg:r10>  BB05 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #18  @31  RefTypeKill <Reg:r11>  BB05 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #19  @31  RefTypeFixedReg <Reg:rax>  BB05 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #20  @31  RefTypeDef <Ivl:0> CALL BB05 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #21  @32  RefTypeUse <Ivl:0>  BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #22  @37  RefTypeDef <Ivl:1> LCL_VAR BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #23  @38  RefTypeUse <Ivl:1>  BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #24  @43  RefTypeDef <Ivl:2> LCL_VAR_ADDR BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #25  @44  RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #26  @44  RefTypeUse <Ivl:2>  BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #27  @45  RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #28  @45  RefTypeDef <Ivl:3> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #29  @46  RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #30  @46  RefTypeUse <Ivl:3>  BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #31  @47  RefTypeKill <Reg:rax>  BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #32  @47  RefTypeKill <Reg:rcx>  BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #33  @47  RefTypeKill <Reg:rdx>  BB05 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #34  @47  RefTypeKill <Reg:r8 >  BB05 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #35  @47  RefTypeKill <Reg:r9 >  BB05 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #36  @47  RefTypeKill <Reg:r10>  BB05 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #37  @47  RefTypeKill <Reg:r11>  BB05 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #38  @47  RefTypeFixedReg <Reg:rax>  BB05 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #39  @47  RefTypeDef <Ivl:4> CALL BB05 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #40  @48  RefTypeUse <Ivl:4>  BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #41  @53  RefTypeDef <Ivl:5> CNS_INT BB05 regmask=[rdx] minReg=1 wt=400.00>
<RefPosition #42  @54  RefTypeUse <Ivl:5>  BB05 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #43  @55  RefTypeDef <Ivl:6> IND BB05 regmask=[rdx] minReg=1 wt=400.00>
<RefPosition #44  @56  RefTypeFixedReg <Reg:rdx>  BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #45  @56  RefTypeUse <Ivl:6>  BB05 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #46  @57  RefTypeFixedReg <Reg:rdx>  BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #47  @57  RefTypeDef <Ivl:7> PUTARG_REG BB05 regmask=[rdx] minReg=1 fixed wt=400.00>
<RefPosition #48  @59  RefTypeDef <Ivl:8> LCL_VAR BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #49  @60  RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #50  @60  RefTypeUse <Ivl:8>  BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #51  @61  RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #52  @61  RefTypeDef <Ivl:9> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #53  @62  RefTypeFixedReg <Reg:rdx>  BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #54  @62  RefTypeUse <Ivl:7>  BB05 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #55  @62  RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #56  @62  RefTypeUse <Ivl:9>  BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #57  @63  RefTypeKill <Reg:rax>  BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #58  @63  RefTypeKill <Reg:rcx>  BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #59  @63  RefTypeKill <Reg:rdx>  BB05 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #60  @63  RefTypeKill <Reg:r8 >  BB05 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #61  @63  RefTypeKill <Reg:r9 >  BB05 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #62  @63  RefTypeKill <Reg:r10>  BB05 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #63  @63  RefTypeKill <Reg:r11>  BB05 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #64  @63  RefTypeFixedReg <Reg:rax>  BB05 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #65  @63  RefTypeDef <Ivl:10> CALL BB05 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #66  @64  RefTypeUse <Ivl:10>  BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #67  @69  RefTypeDef <Ivl:11> LCL_VAR BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #68  @70  RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #69  @70  RefTypeUse <Ivl:11>  BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #70  @71  RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #71  @71  RefTypeDef <Ivl:12> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #72  @72  RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #73  @72  RefTypeUse <Ivl:12>  BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #74  @73  RefTypeKill <Reg:rax>  BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #75  @73  RefTypeKill <Reg:rcx>  BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #76  @73  RefTypeKill <Reg:rdx>  BB05 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #77  @73  RefTypeKill <Reg:r8 >  BB05 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #78  @73  RefTypeKill <Reg:r9 >  BB05 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #79  @73  RefTypeKill <Reg:r10>  BB05 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #80  @73  RefTypeKill <Reg:r11>  BB05 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #81  @81  RefTypeDef <Ivl:13> CNS_INT BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #82  @82  RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #83  @82  RefTypeUse <Ivl:13>  BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #84  @83  RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #85  @83  RefTypeDef <Ivl:14> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #86  @84  RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #87  @84  RefTypeUse <Ivl:14>  BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #88  @85  RefTypeKill <Reg:rax>  BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #89  @85  RefTypeKill <Reg:rcx>  BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #90  @85  RefTypeKill <Reg:rdx>  BB05 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #91  @85  RefTypeKill <Reg:r8 >  BB05 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #92  @85  RefTypeKill <Reg:r9 >  BB05 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #93  @85  RefTypeKill <Reg:r10>  BB05 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #94  @85  RefTypeKill <Reg:r11>  BB05 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #95  @85  RefTypeFixedReg <Reg:rax>  BB05 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #96  @85  RefTypeDef <Ivl:15> CALL BB05 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #97  @86  RefTypeUse <Ivl:15>  BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #98  @89  RefTypeDef <Ivl:16> LCL_VAR BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #99  @90  RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #100 @90  RefTypeUse <Ivl:16>  BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #101 @91  RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #102 @91  RefTypeDef <Ivl:17> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #103 @92  RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #104 @92  RefTypeUse <Ivl:17>  BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #105 @93  RefTypeKill <Reg:rax>  BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #106 @93  RefTypeKill <Reg:rcx>  BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #107 @93  RefTypeKill <Reg:rdx>  BB05 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #108 @93  RefTypeKill <Reg:r8 >  BB05 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #109 @93  RefTypeKill <Reg:r9 >  BB05 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #110 @93  RefTypeKill <Reg:r10>  BB05 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #111 @93  RefTypeKill <Reg:r11>  BB05 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #112 @97  RefTypeDef <Ivl:18> LCL_VAR BB05 regmask=[rdx] minReg=1 wt=400.00>
<RefPosition #113 @98  RefTypeUse <Ivl:18>  BB05 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #114 @99  RefTypeDef <Ivl:19> LEA BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #115 @101 RefTypeDef <Ivl:20> LCL_VAR BB05 regmask=[rdx] minReg=1 wt=400.00>
<RefPosition #116 @102 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #117 @102 RefTypeUse <Ivl:19>  BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #118 @102 RefTypeFixedReg <Reg:rdx>  BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #119 @102 RefTypeUse <Ivl:20>  BB05 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #120 @103 RefTypeKill <Reg:rax>  BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #121 @103 RefTypeKill <Reg:rcx>  BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #122 @103 RefTypeKill <Reg:rdx>  BB05 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #123 @103 RefTypeKill <Reg:r8 >  BB05 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #124 @103 RefTypeKill <Reg:r9 >  BB05 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #125 @103 RefTypeKill <Reg:r10>  BB05 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #126 @103 RefTypeKill <Reg:r11>  BB05 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #127 @103 RefTypeKill <Reg:mm0>  BB05 regmask=[mm0] minReg=1 last wt=100.00>
<RefPosition #128 @103 RefTypeKill <Reg:mm1>  BB05 regmask=[mm1] minReg=1 last wt=100.00>
<RefPosition #129 @103 RefTypeKill <Reg:mm2>  BB05 regmask=[mm2] minReg=1 last wt=100.00>
<RefPosition #130 @103 RefTypeKill <Reg:mm3>  BB05 regmask=[mm3] minReg=1 last wt=100.00>
<RefPosition #131 @103 RefTypeKill <Reg:mm4>  BB05 regmask=[mm4] minReg=1 last wt=100.00>
<RefPosition #132 @103 RefTypeKill <Reg:mm5>  BB05 regmask=[mm5] minReg=1 last wt=100.00>
<RefPosition #133 @107 RefTypeDef <Ivl:21> CNS_INT BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #134 @108 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #135 @108 RefTypeUse <Ivl:21>  BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #136 @109 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #137 @109 RefTypeDef <Ivl:22> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #138 @110 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #139 @110 RefTypeUse <Ivl:22>  BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #140 @111 RefTypeKill <Reg:rax>  BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #141 @111 RefTypeKill <Reg:rcx>  BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #142 @111 RefTypeKill <Reg:rdx>  BB05 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #143 @111 RefTypeKill <Reg:r8 >  BB05 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #144 @111 RefTypeKill <Reg:r9 >  BB05 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #145 @111 RefTypeKill <Reg:r10>  BB05 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #146 @111 RefTypeKill <Reg:r11>  BB05 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #147 @111 RefTypeFixedReg <Reg:rax>  BB05 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #148 @111 RefTypeDef <Ivl:23> CALL BB05 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #149 @112 RefTypeUse <Ivl:23>  BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #150 @115 RefTypeDef <Ivl:24> LCL_VAR BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #151 @118 RefTypeUse <Ivl:24>  BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #152 @119 RefTypeDef <Ivl:25> IND BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #153 @122 RefTypeUse <Ivl:25>  BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #154 @123 RefTypeDef <Ivl:26> IND BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #155 @124 RefTypeUse <Ivl:26>  BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #156 @127 RefTypeDef <Ivl:27> LCL_VAR BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #157 @128 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #158 @128 RefTypeUse <Ivl:27>  BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #159 @129 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #160 @129 RefTypeDef <Ivl:28> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #161 @130 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #162 @130 RefTypeUse <Ivl:28>  BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #163 @131 RefTypeKill <Reg:rax>  BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #164 @131 RefTypeKill <Reg:rcx>  BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #165 @131 RefTypeKill <Reg:rdx>  BB05 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #166 @131 RefTypeKill <Reg:r8 >  BB05 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #167 @131 RefTypeKill <Reg:r9 >  BB05 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #168 @131 RefTypeKill <Reg:r10>  BB05 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #169 @131 RefTypeKill <Reg:r11>  BB05 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #170 @135 RefTypeDef <Ivl:29> LCL_VAR BB05 regmask=[rdx] minReg=1 wt=400.00>
<RefPosition #171 @136 RefTypeUse <Ivl:29>  BB05 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #172 @137 RefTypeDef <Ivl:30> LEA BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #173 @139 RefTypeDef <Ivl:31> LCL_VAR BB05 regmask=[rdx] minReg=1 wt=400.00>
<RefPosition #174 @140 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #175 @140 RefTypeUse <Ivl:30>  BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #176 @140 RefTypeFixedReg <Reg:rdx>  BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #177 @140 RefTypeUse <Ivl:31>  BB05 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #178 @141 RefTypeKill <Reg:rax>  BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #179 @141 RefTypeKill <Reg:rcx>  BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #180 @141 RefTypeKill <Reg:rdx>  BB05 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #181 @141 RefTypeKill <Reg:r8 >  BB05 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #182 @141 RefTypeKill <Reg:r9 >  BB05 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #183 @141 RefTypeKill <Reg:r10>  BB05 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #184 @141 RefTypeKill <Reg:r11>  BB05 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #185 @141 RefTypeKill <Reg:mm0>  BB05 regmask=[mm0] minReg=1 last wt=100.00>
<RefPosition #186 @141 RefTypeKill <Reg:mm1>  BB05 regmask=[mm1] minReg=1 last wt=100.00>
<RefPosition #187 @141 RefTypeKill <Reg:mm2>  BB05 regmask=[mm2] minReg=1 last wt=100.00>
<RefPosition #188 @141 RefTypeKill <Reg:mm3>  BB05 regmask=[mm3] minReg=1 last wt=100.00>
<RefPosition #189 @141 RefTypeKill <Reg:mm4>  BB05 regmask=[mm4] minReg=1 last wt=100.00>
<RefPosition #190 @141 RefTypeKill <Reg:mm5>  BB05 regmask=[mm5] minReg=1 last wt=100.00>
<RefPosition #191 @145 RefTypeDef <Ivl:32> CNS_INT BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #192 @146 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #193 @146 RefTypeUse <Ivl:32>  BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #194 @147 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #195 @147 RefTypeDef <Ivl:33> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #196 @148 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #197 @148 RefTypeUse <Ivl:33>  BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #198 @149 RefTypeKill <Reg:rax>  BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #199 @149 RefTypeKill <Reg:rcx>  BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #200 @149 RefTypeKill <Reg:rdx>  BB05 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #201 @149 RefTypeKill <Reg:r8 >  BB05 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #202 @149 RefTypeKill <Reg:r9 >  BB05 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #203 @149 RefTypeKill <Reg:r10>  BB05 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #204 @149 RefTypeKill <Reg:r11>  BB05 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #205 @149 RefTypeFixedReg <Reg:rax>  BB05 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #206 @149 RefTypeDef <Ivl:34> CALL BB05 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #207 @150 RefTypeUse <Ivl:34>  BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #208 @153 RefTypeDef <Ivl:35> LCL_VAR BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #209 @154 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #210 @154 RefTypeUse <Ivl:35>  BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #211 @155 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #212 @155 RefTypeDef <Ivl:36> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #213 @157 RefTypeDef <Ivl:37> LCL_VAR BB05 regmask=[rdx] minReg=1 wt=400.00>
<RefPosition #214 @158 RefTypeFixedReg <Reg:rdx>  BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #215 @158 RefTypeUse <Ivl:37>  BB05 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #216 @159 RefTypeFixedReg <Reg:rdx>  BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #217 @159 RefTypeDef <Ivl:38> PUTARG_REG BB05 regmask=[rdx] minReg=1 fixed wt=400.00>
<RefPosition #218 @161 RefTypeDef <Ivl:39> CNS_INT BB05 regmask=[r8] minReg=1 wt=400.00>
<RefPosition #219 @162 RefTypeFixedReg <Reg:r8 >  BB05 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #220 @162 RefTypeUse <Ivl:39>  BB05 regmask=[r8] minReg=1 last fixed wt=100.00>
<RefPosition #221 @163 RefTypeFixedReg <Reg:r8 >  BB05 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #222 @163 RefTypeDef <Ivl:40> PUTARG_REG BB05 regmask=[r8] minReg=1 fixed wt=400.00>
<RefPosition #223 @164 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #224 @164 RefTypeUse <Ivl:36>  BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #225 @164 RefTypeFixedReg <Reg:rdx>  BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #226 @164 RefTypeUse <Ivl:38>  BB05 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #227 @164 RefTypeFixedReg <Reg:r8 >  BB05 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #228 @164 RefTypeUse <Ivl:40>  BB05 regmask=[r8] minReg=1 last fixed wt=100.00>
<RefPosition #229 @165 RefTypeKill <Reg:rax>  BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #230 @165 RefTypeKill <Reg:rcx>  BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #231 @165 RefTypeKill <Reg:rdx>  BB05 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #232 @165 RefTypeKill <Reg:r8 >  BB05 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #233 @165 RefTypeKill <Reg:r9 >  BB05 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #234 @165 RefTypeKill <Reg:r10>  BB05 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #235 @165 RefTypeKill <Reg:r11>  BB05 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #236 @169 RefTypeDef <Ivl:41> CNS_INT BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #237 @170 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #238 @170 RefTypeUse <Ivl:41>  BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #239 @171 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #240 @171 RefTypeDef <Ivl:42> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #241 @172 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #242 @172 RefTypeUse <Ivl:42>  BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #243 @173 RefTypeKill <Reg:rax>  BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #244 @173 RefTypeKill <Reg:rcx>  BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #245 @173 RefTypeKill <Reg:rdx>  BB05 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #246 @173 RefTypeKill <Reg:r8 >  BB05 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #247 @173 RefTypeKill <Reg:r9 >  BB05 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #248 @173 RefTypeKill <Reg:r10>  BB05 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #249 @173 RefTypeKill <Reg:r11>  BB05 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #250 @173 RefTypeFixedReg <Reg:rax>  BB05 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #251 @173 RefTypeDef <Ivl:43> CALL BB05 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #252 @174 RefTypeUse <Ivl:43>  BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #253 @177 RefTypeDef <Ivl:44> LCL_VAR BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #254 @178 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #255 @178 RefTypeUse <Ivl:44>  BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #256 @179 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #257 @179 RefTypeDef <Ivl:45> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #258 @181 RefTypeDef <Ivl:46> LCL_VAR BB05 regmask=[rdx] minReg=1 wt=400.00>
<RefPosition #259 @182 RefTypeFixedReg <Reg:rdx>  BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #260 @182 RefTypeUse <Ivl:46>  BB05 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #261 @183 RefTypeFixedReg <Reg:rdx>  BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #262 @183 RefTypeDef <Ivl:47> PUTARG_REG BB05 regmask=[rdx] minReg=1 fixed wt=400.00>
<RefPosition #263 @184 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #264 @184 RefTypeUse <Ivl:45>  BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #265 @184 RefTypeFixedReg <Reg:rdx>  BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #266 @184 RefTypeUse <Ivl:47>  BB05 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #267 @185 RefTypeKill <Reg:rax>  BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #268 @185 RefTypeKill <Reg:rcx>  BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #269 @185 RefTypeKill <Reg:rdx>  BB05 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #270 @185 RefTypeKill <Reg:r8 >  BB05 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #271 @185 RefTypeKill <Reg:r9 >  BB05 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #272 @185 RefTypeKill <Reg:r10>  BB05 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #273 @185 RefTypeKill <Reg:r11>  BB05 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #274 @189 RefTypeDef <Ivl:48> LCL_VAR BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #275 @190 RefTypeUse <Ivl:48>  BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #276 @195 RefTypeDef <Ivl:49> LCL_VAR BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #277 @196 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #278 @196 RefTypeUse <Ivl:49>  BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #279 @197 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #280 @197 RefTypeDef <Ivl:50> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #281 @198 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #282 @198 RefTypeUse <Ivl:50>  BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #283 @199 RefTypeKill <Reg:rax>  BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #284 @199 RefTypeKill <Reg:rcx>  BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #285 @199 RefTypeKill <Reg:rdx>  BB05 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #286 @199 RefTypeKill <Reg:r8 >  BB05 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #287 @199 RefTypeKill <Reg:r9 >  BB05 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #288 @199 RefTypeKill <Reg:r10>  BB05 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #289 @199 RefTypeKill <Reg:r11>  BB05 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #290 @207 RefTypeKill <Reg:rax>  BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #291 @207 RefTypeKill <Reg:rcx>  BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #292 @207 RefTypeKill <Reg:rdx>  BB05 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #293 @207 RefTypeKill <Reg:r8 >  BB05 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #294 @207 RefTypeKill <Reg:r9 >  BB05 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #295 @207 RefTypeKill <Reg:r10>  BB05 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #296 @207 RefTypeKill <Reg:r11>  BB05 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #297 @207 RefTypeFixedReg <Reg:rax>  BB05 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #298 @207 RefTypeDef <Ivl:51> CALL BB05 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #299 @208 RefTypeUse <Ivl:51>  BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #300 @213 RefTypeDef <Ivl:52> LCL_VAR BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #301 @214 RefTypeUse <Ivl:52>  BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #302 @219 RefTypeDef <Ivl:53> LCL_VAR_ADDR BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #303 @220 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #304 @220 RefTypeUse <Ivl:53>  BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #305 @221 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #306 @221 RefTypeDef <Ivl:54> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #307 @222 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #308 @222 RefTypeUse <Ivl:54>  BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #309 @223 RefTypeKill <Reg:rax>  BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #310 @223 RefTypeKill <Reg:rcx>  BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #311 @223 RefTypeKill <Reg:rdx>  BB05 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #312 @223 RefTypeKill <Reg:r8 >  BB05 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #313 @223 RefTypeKill <Reg:r9 >  BB05 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #314 @223 RefTypeKill <Reg:r10>  BB05 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #315 @223 RefTypeKill <Reg:r11>  BB05 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #316 @223 RefTypeFixedReg <Reg:rax>  BB05 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #317 @223 RefTypeDef <Ivl:55> CALL BB05 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #318 @224 RefTypeUse <Ivl:55>  BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #319 @229 RefTypeDef <Ivl:56> CNS_INT BB05 regmask=[rdx] minReg=1 wt=400.00>
<RefPosition #320 @230 RefTypeUse <Ivl:56>  BB05 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #321 @231 RefTypeDef <Ivl:57> IND BB05 regmask=[rdx] minReg=1 wt=400.00>
<RefPosition #322 @232 RefTypeFixedReg <Reg:rdx>  BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #323 @232 RefTypeUse <Ivl:57>  BB05 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #324 @233 RefTypeFixedReg <Reg:rdx>  BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #325 @233 RefTypeDef <Ivl:58> PUTARG_REG BB05 regmask=[rdx] minReg=1 fixed wt=400.00>
<RefPosition #326 @235 RefTypeDef <Ivl:59> LCL_VAR BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #327 @236 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #328 @236 RefTypeUse <Ivl:59>  BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #329 @237 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #330 @237 RefTypeDef <Ivl:60> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #331 @238 RefTypeFixedReg <Reg:rdx>  BB05 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #332 @238 RefTypeUse <Ivl:58>  BB05 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #333 @238 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #334 @238 RefTypeUse <Ivl:60>  BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #335 @239 RefTypeKill <Reg:rax>  BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #336 @239 RefTypeKill <Reg:rcx>  BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #337 @239 RefTypeKill <Reg:rdx>  BB05 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #338 @239 RefTypeKill <Reg:r8 >  BB05 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #339 @239 RefTypeKill <Reg:r9 >  BB05 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #340 @239 RefTypeKill <Reg:r10>  BB05 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #341 @239 RefTypeKill <Reg:r11>  BB05 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #342 @239 RefTypeFixedReg <Reg:rax>  BB05 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #343 @239 RefTypeDef <Ivl:61> CALL BB05 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #344 @240 RefTypeUse <Ivl:61>  BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #345 @245 RefTypeDef <Ivl:62> LCL_VAR BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #346 @246 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #347 @246 RefTypeUse <Ivl:62>  BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #348 @247 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #349 @247 RefTypeDef <Ivl:63> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #350 @248 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #351 @248 RefTypeUse <Ivl:63>  BB05 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #352 @249 RefTypeKill <Reg:rax>  BB05 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #353 @249 RefTypeKill <Reg:rcx>  BB05 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #354 @249 RefTypeKill <Reg:rdx>  BB05 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #355 @249 RefTypeKill <Reg:r8 >  BB05 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #356 @249 RefTypeKill <Reg:r9 >  BB05 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #357 @249 RefTypeKill <Reg:r10>  BB05 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #358 @249 RefTypeKill <Reg:r11>  BB05 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #359 @257 RefTypeDef <Ivl:64> CNS_INT BB05 regmask=[rdx] minReg=1 wt=400.00>
<RefPosition #360 @258 RefTypeUse <Ivl:64>  BB05 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #361 @264 RefTypeBB  BB14 regmask=[] minReg=1 wt=100.00>
<RefPosition #362 @273 RefTypeDef <Ivl:65> LT BB14 regmask=[rdx] minReg=1 wt=400.00>
<RefPosition #363 @274 RefTypeUse <Ivl:65>  BB14 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #364 @286 RefTypeBB  BB06 regmask=[] minReg=1 wt=100.00>
<RefPosition #365 @295 RefTypeDef <Ivl:66> LCL_VAR BB06 regmask=[rdx] minReg=1 wt=400.00>
<RefPosition #366 @298 RefTypeUse <Ivl:66>  BB06 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #367 @299 RefTypeDef <Ivl:67> IND BB06 regmask=[rdx] minReg=1 wt=400.00>
<RefPosition #368 @300 RefTypeUse <Ivl:67>  BB06 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #369 @305 RefTypeDef <Ivl:68> CNS_INT BB06 regmask=[rdx] minReg=1 wt=400.00>
<RefPosition #370 @306 RefTypeUse <Ivl:68>  BB06 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #371 @308 RefTypeBB  BB07 regmask=[] minReg=1 wt=100.00>
<RefPosition #372 @313 RefTypeDef <Ivl:69> LCL_VAR_ADDR BB07 regmask=[rdx] minReg=1 wt=400.00>
<RefPosition #373 @314 RefTypeFixedReg <Reg:rdx>  BB07 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #374 @314 RefTypeUse <Ivl:69>  BB07 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #375 @315 RefTypeFixedReg <Reg:rdx>  BB07 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #376 @315 RefTypeDef <Ivl:70> PUTARG_REG BB07 regmask=[rdx] minReg=1 fixed wt=400.00>
<RefPosition #377 @317 RefTypeDef <Ivl:71> LCL_VAR BB07 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #378 @318 RefTypeFixedReg <Reg:rcx>  BB07 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #379 @318 RefTypeUse <Ivl:71>  BB07 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #380 @319 RefTypeFixedReg <Reg:rcx>  BB07 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #381 @319 RefTypeDef <Ivl:72> PUTARG_REG BB07 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #382 @320 RefTypeFixedReg <Reg:rdx>  BB07 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #383 @320 RefTypeUse <Ivl:70>  BB07 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #384 @320 RefTypeFixedReg <Reg:rcx>  BB07 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #385 @320 RefTypeUse <Ivl:72>  BB07 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #386 @321 RefTypeKill <Reg:rax>  BB07 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #387 @321 RefTypeKill <Reg:rcx>  BB07 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #388 @321 RefTypeKill <Reg:rdx>  BB07 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #389 @321 RefTypeKill <Reg:r8 >  BB07 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #390 @321 RefTypeKill <Reg:r9 >  BB07 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #391 @321 RefTypeKill <Reg:r10>  BB07 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #392 @321 RefTypeKill <Reg:r11>  BB07 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #393 @333 RefTypeDef <Ivl:73> CNS_INT BB07 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #394 @334 RefTypeFixedReg <Reg:rcx>  BB07 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #395 @334 RefTypeUse <Ivl:73>  BB07 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #396 @335 RefTypeFixedReg <Reg:rcx>  BB07 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #397 @335 RefTypeDef <Ivl:74> PUTARG_REG BB07 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #398 @336 RefTypeFixedReg <Reg:rcx>  BB07 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #399 @336 RefTypeUse <Ivl:74>  BB07 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #400 @337 RefTypeKill <Reg:rax>  BB07 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #401 @337 RefTypeKill <Reg:rcx>  BB07 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #402 @337 RefTypeKill <Reg:rdx>  BB07 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #403 @337 RefTypeKill <Reg:r8 >  BB07 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #404 @337 RefTypeKill <Reg:r9 >  BB07 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #405 @337 RefTypeKill <Reg:r10>  BB07 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #406 @337 RefTypeKill <Reg:r11>  BB07 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #407 @337 RefTypeFixedReg <Reg:rax>  BB07 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #408 @337 RefTypeDef <Ivl:75> CALL BB07 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #409 @338 RefTypeUse <Ivl:75>  BB07 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #410 @341 RefTypeDef <Ivl:76> LCL_VAR BB07 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #411 @344 RefTypeUse <Ivl:76>  BB07 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #412 @345 RefTypeDef <Ivl:77> IND BB07 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #413 @348 RefTypeUse <Ivl:77>  BB07 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #414 @349 RefTypeDef <Ivl:78> IND BB07 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #415 @350 RefTypeUse <Ivl:78>  BB07 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #416 @353 RefTypeDef <Ivl:79> LCL_VAR BB07 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #417 @354 RefTypeFixedReg <Reg:rcx>  BB07 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #418 @354 RefTypeUse <Ivl:79>  BB07 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #419 @355 RefTypeFixedReg <Reg:rcx>  BB07 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #420 @355 RefTypeDef <Ivl:80> PUTARG_REG BB07 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #421 @356 RefTypeFixedReg <Reg:rcx>  BB07 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #422 @356 RefTypeUse <Ivl:80>  BB07 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #423 @357 RefTypeKill <Reg:rax>  BB07 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #424 @357 RefTypeKill <Reg:rcx>  BB07 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #425 @357 RefTypeKill <Reg:rdx>  BB07 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #426 @357 RefTypeKill <Reg:r8 >  BB07 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #427 @357 RefTypeKill <Reg:r9 >  BB07 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #428 @357 RefTypeKill <Reg:r10>  BB07 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #429 @357 RefTypeKill <Reg:r11>  BB07 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #430 @361 RefTypeDef <Ivl:81> LCL_VAR BB07 regmask=[rdx] minReg=1 wt=400.00>
<RefPosition #431 @362 RefTypeUse <Ivl:81>  BB07 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #432 @363 RefTypeDef <Ivl:82> LEA BB07 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #433 @365 RefTypeDef <Ivl:83> LCL_VAR BB07 regmask=[rdx] minReg=1 wt=400.00>
<RefPosition #434 @366 RefTypeFixedReg <Reg:rcx>  BB07 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #435 @366 RefTypeUse <Ivl:82>  BB07 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #436 @366 RefTypeFixedReg <Reg:rdx>  BB07 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #437 @366 RefTypeUse <Ivl:83>  BB07 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #438 @367 RefTypeKill <Reg:rax>  BB07 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #439 @367 RefTypeKill <Reg:rcx>  BB07 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #440 @367 RefTypeKill <Reg:rdx>  BB07 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #441 @367 RefTypeKill <Reg:r8 >  BB07 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #442 @367 RefTypeKill <Reg:r9 >  BB07 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #443 @367 RefTypeKill <Reg:r10>  BB07 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #444 @367 RefTypeKill <Reg:r11>  BB07 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #445 @367 RefTypeKill <Reg:mm0>  BB07 regmask=[mm0] minReg=1 last wt=100.00>
<RefPosition #446 @367 RefTypeKill <Reg:mm1>  BB07 regmask=[mm1] minReg=1 last wt=100.00>
<RefPosition #447 @367 RefTypeKill <Reg:mm2>  BB07 regmask=[mm2] minReg=1 last wt=100.00>
<RefPosition #448 @367 RefTypeKill <Reg:mm3>  BB07 regmask=[mm3] minReg=1 last wt=100.00>
<RefPosition #449 @367 RefTypeKill <Reg:mm4>  BB07 regmask=[mm4] minReg=1 last wt=100.00>
<RefPosition #450 @367 RefTypeKill <Reg:mm5>  BB07 regmask=[mm5] minReg=1 last wt=100.00>
<RefPosition #451 @371 RefTypeDef <Ivl:84> LCL_VAR BB07 regmask=[rdx] minReg=1 wt=400.00>
<RefPosition #452 @374 RefTypeUse <Ivl:84>  BB07 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #453 @375 RefTypeDef <Ivl:85> IND BB07 regmask=[rdx] minReg=1 wt=400.00>
<RefPosition #454 @376 RefTypeUse <Ivl:85>  BB07 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #455 @377 RefTypeDef <Ivl:86> LEA BB07 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #456 @379 RefTypeDef <Ivl:87> LCL_VAR BB07 regmask=[rdx] minReg=1 wt=400.00>
<RefPosition #457 @382 RefTypeUse <Ivl:87>  BB07 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #458 @383 RefTypeDef <Ivl:88> IND BB07 regmask=[rdx] minReg=1 wt=400.00>
<RefPosition #459 @386 RefTypeUse <Ivl:88>  BB07 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #460 @387 RefTypeDef <Ivl:89> IND BB07 regmask=[rdx] minReg=1 wt=400.00>
<RefPosition #461 @390 RefTypeUse <Ivl:89>  BB07 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #462 @391 RefTypeDef <Ivl:90> IND BB07 regmask=[rdx] minReg=1 wt=400.00>
<RefPosition #463 @392 RefTypeFixedReg <Reg:rcx>  BB07 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #464 @392 RefTypeUse <Ivl:86>  BB07 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #465 @392 RefTypeFixedReg <Reg:rdx>  BB07 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #466 @392 RefTypeUse <Ivl:90>  BB07 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #467 @393 RefTypeKill <Reg:rax>  BB07 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #468 @393 RefTypeKill <Reg:rcx>  BB07 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #469 @393 RefTypeKill <Reg:rdx>  BB07 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #470 @393 RefTypeKill <Reg:r8 >  BB07 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #471 @393 RefTypeKill <Reg:r9 >  BB07 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #472 @393 RefTypeKill <Reg:r10>  BB07 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #473 @393 RefTypeKill <Reg:r11>  BB07 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #474 @393 RefTypeKill <Reg:mm0>  BB07 regmask=[mm0] minReg=1 last wt=100.00>
<RefPosition #475 @393 RefTypeKill <Reg:mm1>  BB07 regmask=[mm1] minReg=1 last wt=100.00>
<RefPosition #476 @393 RefTypeKill <Reg:mm2>  BB07 regmask=[mm2] minReg=1 last wt=100.00>
<RefPosition #477 @393 RefTypeKill <Reg:mm3>  BB07 regmask=[mm3] minReg=1 last wt=100.00>
<RefPosition #478 @393 RefTypeKill <Reg:mm4>  BB07 regmask=[mm4] minReg=1 last wt=100.00>
<RefPosition #479 @393 RefTypeKill <Reg:mm5>  BB07 regmask=[mm5] minReg=1 last wt=100.00>
<RefPosition #480 @397 RefTypeDef <Ivl:91> CNS_INT BB07 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #481 @398 RefTypeFixedReg <Reg:rcx>  BB07 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #482 @398 RefTypeUse <Ivl:91>  BB07 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #483 @399 RefTypeFixedReg <Reg:rcx>  BB07 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #484 @399 RefTypeDef <Ivl:92> PUTARG_REG BB07 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #485 @400 RefTypeFixedReg <Reg:rcx>  BB07 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #486 @400 RefTypeUse <Ivl:92>  BB07 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #487 @401 RefTypeKill <Reg:rax>  BB07 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #488 @401 RefTypeKill <Reg:rcx>  BB07 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #489 @401 RefTypeKill <Reg:rdx>  BB07 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #490 @401 RefTypeKill <Reg:r8 >  BB07 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #491 @401 RefTypeKill <Reg:r9 >  BB07 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #492 @401 RefTypeKill <Reg:r10>  BB07 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #493 @401 RefTypeKill <Reg:r11>  BB07 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #494 @401 RefTypeFixedReg <Reg:rax>  BB07 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #495 @401 RefTypeDef <Ivl:93> CALL BB07 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #496 @402 RefTypeUse <Ivl:93>  BB07 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #497 @405 RefTypeDef <Ivl:94> LCL_VAR BB07 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #498 @408 RefTypeUse <Ivl:94>  BB07 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #499 @409 RefTypeDef <Ivl:95> IND BB07 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #500 @412 RefTypeUse <Ivl:95>  BB07 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #501 @413 RefTypeDef <Ivl:96> IND BB07 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #502 @414 RefTypeUse <Ivl:96>  BB07 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #503 @417 RefTypeDef <Ivl:97> LCL_VAR BB07 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #504 @418 RefTypeFixedReg <Reg:rcx>  BB07 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #505 @418 RefTypeUse <Ivl:97>  BB07 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #506 @419 RefTypeFixedReg <Reg:rcx>  BB07 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #507 @419 RefTypeDef <Ivl:98> PUTARG_REG BB07 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #508 @420 RefTypeFixedReg <Reg:rcx>  BB07 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #509 @420 RefTypeUse <Ivl:98>  BB07 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #510 @421 RefTypeKill <Reg:rax>  BB07 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #511 @421 RefTypeKill <Reg:rcx>  BB07 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #512 @421 RefTypeKill <Reg:rdx>  BB07 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #513 @421 RefTypeKill <Reg:r8 >  BB07 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #514 @421 RefTypeKill <Reg:r9 >  BB07 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #515 @421 RefTypeKill <Reg:r10>  BB07 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #516 @421 RefTypeKill <Reg:r11>  BB07 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #517 @425 RefTypeDef <Ivl:99> LCL_VAR BB07 regmask=[rdx] minReg=1 wt=400.00>
<RefPosition #518 @426 RefTypeUse <Ivl:99>  BB07 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #519 @427 RefTypeDef <Ivl:100> LEA BB07 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #520 @429 RefTypeDef <Ivl:101> LCL_VAR BB07 regmask=[rdx] minReg=1 wt=400.00>
<RefPosition #521 @430 RefTypeFixedReg <Reg:rcx>  BB07 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #522 @430 RefTypeUse <Ivl:100>  BB07 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #523 @430 RefTypeFixedReg <Reg:rdx>  BB07 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #524 @430 RefTypeUse <Ivl:101>  BB07 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #525 @431 RefTypeKill <Reg:rax>  BB07 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #526 @431 RefTypeKill <Reg:rcx>  BB07 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #527 @431 RefTypeKill <Reg:rdx>  BB07 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #528 @431 RefTypeKill <Reg:r8 >  BB07 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #529 @431 RefTypeKill <Reg:r9 >  BB07 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #530 @431 RefTypeKill <Reg:r10>  BB07 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #531 @431 RefTypeKill <Reg:r11>  BB07 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #532 @431 RefTypeKill <Reg:mm0>  BB07 regmask=[mm0] minReg=1 last wt=100.00>
<RefPosition #533 @431 RefTypeKill <Reg:mm1>  BB07 regmask=[mm1] minReg=1 last wt=100.00>
<RefPosition #534 @431 RefTypeKill <Reg:mm2>  BB07 regmask=[mm2] minReg=1 last wt=100.00>
<RefPosition #535 @431 RefTypeKill <Reg:mm3>  BB07 regmask=[mm3] minReg=1 last wt=100.00>
<RefPosition #536 @431 RefTypeKill <Reg:mm4>  BB07 regmask=[mm4] minReg=1 last wt=100.00>
<RefPosition #537 @431 RefTypeKill <Reg:mm5>  BB07 regmask=[mm5] minReg=1 last wt=100.00>
<RefPosition #538 @440 RefTypeBB  BB08 regmask=[] minReg=1 wt=100.00>
<RefPosition #539 @442 RefTypeBB  BB10 regmask=[] minReg=1 wt=100.00>
<RefPosition #540 @447 RefTypeDef <Ivl:102> LCL_VAR BB10 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #541 @448 RefTypeUse <Ivl:102>  BB10 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #542 @449 RefTypeDef <Ivl:103> CAST BB10 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #543 @452 RefTypeUse <Ivl:103>  BB10 regmask=[rcx] minReg=1 last regOptional wt=100.00>
<RefPosition #544 @456 RefTypeBB  BB11 regmask=[] minReg=1 wt=100.00>
<RefPosition #545 @461 RefTypeDef <Ivl:104> LCL_VAR BB11 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #546 @462 RefTypeFixedReg <Reg:rcx>  BB11 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #547 @462 RefTypeUse <Ivl:104>  BB11 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #548 @463 RefTypeFixedReg <Reg:rcx>  BB11 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #549 @463 RefTypeDef <Ivl:105> PUTARG_REG BB11 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #550 @464 RefTypeFixedReg <Reg:rcx>  BB11 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #551 @464 RefTypeUse <Ivl:105>  BB11 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #552 @465 RefTypeKill <Reg:rax>  BB11 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #553 @465 RefTypeKill <Reg:rcx>  BB11 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #554 @465 RefTypeKill <Reg:rdx>  BB11 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #555 @465 RefTypeKill <Reg:r8 >  BB11 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #556 @465 RefTypeKill <Reg:r9 >  BB11 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #557 @465 RefTypeKill <Reg:r10>  BB11 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #558 @465 RefTypeKill <Reg:r11>  BB11 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #559 @470 RefTypeBB  BB12 regmask=[] minReg=1 wt=100.00>
<RefPosition #560 @476 RefTypeBB  BB09 regmask=[] minReg=1 wt=100.00>
<RefPosition #561 @478 RefTypeBB  BB13 regmask=[] minReg=1 wt=100.00>
<RefPosition #562 @487 RefTypeDef <Ivl:106> LCL_VAR BB13 regmask=[rax] minReg=1 wt=400.00>
<RefPosition #563 @490 RefTypeUse <Ivl:106>  BB13 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #564 @491 RefTypeDef <Ivl:107> ADD BB13 regmask=[rax] minReg=1 wt=400.00>
<RefPosition #565 @492 RefTypeUse <Ivl:107>  BB13 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #566 @494 RefTypeBB  BB15 regmask=[] minReg=1 wt=100.00>
<RefPosition #567 @499 RefTypeKill <Reg:rax>  BB15 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #568 @499 RefTypeKill <Reg:rcx>  BB15 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #569 @499 RefTypeKill <Reg:rdx>  BB15 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #570 @499 RefTypeKill <Reg:r8 >  BB15 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #571 @499 RefTypeKill <Reg:r9 >  BB15 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #572 @499 RefTypeKill <Reg:r10>  BB15 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #573 @499 RefTypeKill <Reg:r11>  BB15 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #574 @499 RefTypeFixedReg <Reg:rax>  BB15 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #575 @499 RefTypeDef <Ivl:108> CALL BB15 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #576 @500 RefTypeUse <Ivl:108>  BB15 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #577 @505 RefTypeDef <Ivl:109> LCL_VAR BB15 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #578 @506 RefTypeUse <Ivl:109>  BB15 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #579 @511 RefTypeDef <Ivl:110> LCL_VAR_ADDR BB15 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #580 @512 RefTypeFixedReg <Reg:rcx>  BB15 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #581 @512 RefTypeUse <Ivl:110>  BB15 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #582 @513 RefTypeFixedReg <Reg:rcx>  BB15 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #583 @513 RefTypeDef <Ivl:111> PUTARG_REG BB15 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #584 @514 RefTypeFixedReg <Reg:rcx>  BB15 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #585 @514 RefTypeUse <Ivl:111>  BB15 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #586 @515 RefTypeKill <Reg:rax>  BB15 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #587 @515 RefTypeKill <Reg:rcx>  BB15 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #588 @515 RefTypeKill <Reg:rdx>  BB15 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #589 @515 RefTypeKill <Reg:r8 >  BB15 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #590 @515 RefTypeKill <Reg:r9 >  BB15 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #591 @515 RefTypeKill <Reg:r10>  BB15 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #592 @515 RefTypeKill <Reg:r11>  BB15 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #593 @515 RefTypeFixedReg <Reg:rax>  BB15 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #594 @515 RefTypeDef <Ivl:112> CALL BB15 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #595 @516 RefTypeUse <Ivl:112>  BB15 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #596 @521 RefTypeDef <Ivl:113> CNS_INT BB15 regmask=[rdx] minReg=1 wt=400.00>
<RefPosition #597 @522 RefTypeUse <Ivl:113>  BB15 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #598 @523 RefTypeDef <Ivl:114> IND BB15 regmask=[rdx] minReg=1 wt=400.00>
<RefPosition #599 @524 RefTypeFixedReg <Reg:rdx>  BB15 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #600 @524 RefTypeUse <Ivl:114>  BB15 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #601 @525 RefTypeFixedReg <Reg:rdx>  BB15 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #602 @525 RefTypeDef <Ivl:115> PUTARG_REG BB15 regmask=[rdx] minReg=1 fixed wt=400.00>
<RefPosition #603 @527 RefTypeDef <Ivl:116> LCL_VAR BB15 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #604 @528 RefTypeFixedReg <Reg:rcx>  BB15 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #605 @528 RefTypeUse <Ivl:116>  BB15 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #606 @529 RefTypeFixedReg <Reg:rcx>  BB15 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #607 @529 RefTypeDef <Ivl:117> PUTARG_REG BB15 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #608 @530 RefTypeFixedReg <Reg:rdx>  BB15 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #609 @530 RefTypeUse <Ivl:115>  BB15 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #610 @530 RefTypeFixedReg <Reg:rcx>  BB15 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #611 @530 RefTypeUse <Ivl:117>  BB15 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #612 @531 RefTypeKill <Reg:rax>  BB15 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #613 @531 RefTypeKill <Reg:rcx>  BB15 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #614 @531 RefTypeKill <Reg:rdx>  BB15 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #615 @531 RefTypeKill <Reg:r8 >  BB15 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #616 @531 RefTypeKill <Reg:r9 >  BB15 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #617 @531 RefTypeKill <Reg:r10>  BB15 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #618 @531 RefTypeKill <Reg:r11>  BB15 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #619 @531 RefTypeFixedReg <Reg:rax>  BB15 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #620 @531 RefTypeDef <Ivl:118> CALL BB15 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #621 @532 RefTypeUse <Ivl:118>  BB15 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #622 @537 RefTypeDef <Ivl:119> LCL_VAR BB15 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #623 @538 RefTypeFixedReg <Reg:rcx>  BB15 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #624 @538 RefTypeUse <Ivl:119>  BB15 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #625 @539 RefTypeFixedReg <Reg:rcx>  BB15 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #626 @539 RefTypeDef <Ivl:120> PUTARG_REG BB15 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #627 @540 RefTypeFixedReg <Reg:rcx>  BB15 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #628 @540 RefTypeUse <Ivl:120>  BB15 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #629 @541 RefTypeKill <Reg:rax>  BB15 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #630 @541 RefTypeKill <Reg:rcx>  BB15 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #631 @541 RefTypeKill <Reg:rdx>  BB15 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #632 @541 RefTypeKill <Reg:r8 >  BB15 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #633 @541 RefTypeKill <Reg:r9 >  BB15 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #634 @541 RefTypeKill <Reg:r10>  BB15 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #635 @541 RefTypeKill <Reg:r11>  BB15 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #636 @550 RefTypeBB  BB28 regmask=[] minReg=1 wt=100.00>
<RefPosition #637 @562 RefTypeBB  BB16 regmask=[] minReg=1 wt=100.00>
<RefPosition #638 @571 RefTypeDef <Ivl:121> LCL_VAR BB16 regmask=[rdx] minReg=1 wt=400.00>
<RefPosition #639 @574 RefTypeUse <Ivl:121>  BB16 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #640 @575 RefTypeDef <Ivl:122> IND BB16 regmask=[rdx] minReg=1 wt=400.00>
<RefPosition #641 @576 RefTypeUse <Ivl:122>  BB16 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #642 @581 RefTypeDef <Ivl:123> CNS_INT BB16 regmask=[rdx] minReg=1 wt=400.00>
<RefPosition #643 @582 RefTypeUse <Ivl:123>  BB16 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #644 @584 RefTypeBB  BB17 regmask=[] minReg=1 wt=100.00>
<RefPosition #645 @589 RefTypeDef <Ivl:124> LCL_VAR_ADDR BB17 regmask=[rdx] minReg=1 wt=400.00>
<RefPosition #646 @590 RefTypeFixedReg <Reg:rdx>  BB17 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #647 @590 RefTypeUse <Ivl:124>  BB17 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #648 @591 RefTypeFixedReg <Reg:rdx>  BB17 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #649 @591 RefTypeDef <Ivl:125> PUTARG_REG BB17 regmask=[rdx] minReg=1 fixed wt=400.00>
<RefPosition #650 @593 RefTypeDef <Ivl:126> LCL_VAR BB17 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #651 @594 RefTypeFixedReg <Reg:rcx>  BB17 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #652 @594 RefTypeUse <Ivl:126>  BB17 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #653 @595 RefTypeFixedReg <Reg:rcx>  BB17 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #654 @595 RefTypeDef <Ivl:127> PUTARG_REG BB17 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #655 @596 RefTypeFixedReg <Reg:rdx>  BB17 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #656 @596 RefTypeUse <Ivl:125>  BB17 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #657 @596 RefTypeFixedReg <Reg:rcx>  BB17 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #658 @596 RefTypeUse <Ivl:127>  BB17 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #659 @597 RefTypeKill <Reg:rax>  BB17 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #660 @597 RefTypeKill <Reg:rcx>  BB17 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #661 @597 RefTypeKill <Reg:rdx>  BB17 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #662 @597 RefTypeKill <Reg:r8 >  BB17 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #663 @597 RefTypeKill <Reg:r9 >  BB17 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #664 @597 RefTypeKill <Reg:r10>  BB17 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #665 @597 RefTypeKill <Reg:r11>  BB17 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #666 @609 RefTypeDef <Ivl:128> LCL_VAR BB17 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #667 @612 RefTypeUse <Ivl:128>  BB17 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #668 @613 RefTypeDef <Ivl:129> IND BB17 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #669 @616 RefTypeUse <Ivl:129>  BB17 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #670 @617 RefTypeDef <Ivl:130> IND BB17 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #671 @619 RefTypeDef <Ivl:131> LCL_VAR BB17 regmask=[rax] minReg=1 wt=400.00>
<RefPosition #672 @622 RefTypeUse <Ivl:131>  BB17 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #673 @623 RefTypeDef <Ivl:132> IND BB17 regmask=[rax] minReg=1 wt=400.00>
<RefPosition #674 @628 RefTypeUse <Ivl:130>  BB17 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #675 @628 RefTypeUse <Ivl:132>  BB17 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #676 @629 RefTypeDef <Ivl:133> EQ BB17 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #677 @630 RefTypeUse <Ivl:133>  BB17 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #678 @642 RefTypeBB  BB18 regmask=[] minReg=1 wt=100.00>
<RefPosition #679 @652 RefTypeBB  BB19 regmask=[] minReg=1 wt=100.00>
<RefPosition #680 @662 RefTypeBB  BB20 regmask=[] minReg=1 wt=100.00>
<RefPosition #681 @664 RefTypeBB  BB22 regmask=[] minReg=1 wt=100.00>
<RefPosition #682 @666 RefTypeBB  BB24 regmask=[] minReg=1 wt=100.00>
<RefPosition #683 @671 RefTypeDef <Ivl:134> LCL_VAR BB24 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #684 @672 RefTypeUse <Ivl:134>  BB24 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #685 @673 RefTypeDef <Ivl:135> CAST BB24 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #686 @676 RefTypeUse <Ivl:135>  BB24 regmask=[rcx] minReg=1 last regOptional wt=100.00>
<RefPosition #687 @680 RefTypeBB  BB25 regmask=[] minReg=1 wt=100.00>
<RefPosition #688 @685 RefTypeDef <Ivl:136> LCL_VAR BB25 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #689 @686 RefTypeFixedReg <Reg:rcx>  BB25 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #690 @686 RefTypeUse <Ivl:136>  BB25 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #691 @687 RefTypeFixedReg <Reg:rcx>  BB25 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #692 @687 RefTypeDef <Ivl:137> PUTARG_REG BB25 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #693 @688 RefTypeFixedReg <Reg:rcx>  BB25 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #694 @688 RefTypeUse <Ivl:137>  BB25 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #695 @689 RefTypeKill <Reg:rax>  BB25 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #696 @689 RefTypeKill <Reg:rcx>  BB25 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #697 @689 RefTypeKill <Reg:rdx>  BB25 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #698 @689 RefTypeKill <Reg:r8 >  BB25 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #699 @689 RefTypeKill <Reg:r9 >  BB25 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #700 @689 RefTypeKill <Reg:r10>  BB25 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #701 @689 RefTypeKill <Reg:r11>  BB25 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #702 @694 RefTypeBB  BB26 regmask=[] minReg=1 wt=100.00>
<RefPosition #703 @700 RefTypeBB  BB21 regmask=[] minReg=1 wt=100.00>
<RefPosition #704 @702 RefTypeBB  BB23 regmask=[] minReg=1 wt=100.00>
<RefPosition #705 @704 RefTypeBB  BB27 regmask=[] minReg=1 wt=100.00>
<RefPosition #706 @709 RefTypeDef <Ivl:138> CNS_INT BB27 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #707 @710 RefTypeFixedReg <Reg:rcx>  BB27 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #708 @710 RefTypeUse <Ivl:138>  BB27 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #709 @711 RefTypeFixedReg <Reg:rcx>  BB27 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #710 @711 RefTypeDef <Ivl:139> PUTARG_REG BB27 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #711 @712 RefTypeFixedReg <Reg:rcx>  BB27 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #712 @712 RefTypeUse <Ivl:139>  BB27 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #713 @713 RefTypeKill <Reg:rax>  BB27 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #714 @713 RefTypeKill <Reg:rcx>  BB27 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #715 @713 RefTypeKill <Reg:rdx>  BB27 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #716 @713 RefTypeKill <Reg:r8 >  BB27 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #717 @713 RefTypeKill <Reg:r9 >  BB27 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #718 @713 RefTypeKill <Reg:r10>  BB27 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #719 @713 RefTypeKill <Reg:r11>  BB27 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #720 @722 RefTypeBB  BB29 regmask=[] minReg=1 wt=100.00>
<RefPosition #721 @727 RefTypeKill <Reg:rax>  BB29 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #722 @727 RefTypeKill <Reg:rcx>  BB29 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #723 @727 RefTypeKill <Reg:rdx>  BB29 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #724 @727 RefTypeKill <Reg:r8 >  BB29 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #725 @727 RefTypeKill <Reg:r9 >  BB29 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #726 @727 RefTypeKill <Reg:r10>  BB29 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #727 @727 RefTypeKill <Reg:r11>  BB29 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #728 @727 RefTypeFixedReg <Reg:rax>  BB29 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #729 @727 RefTypeDef <Ivl:140> CALL BB29 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #730 @728 RefTypeUse <Ivl:140>  BB29 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #731 @733 RefTypeDef <Ivl:141> LCL_VAR BB29 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #732 @734 RefTypeUse <Ivl:141>  BB29 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #733 @739 RefTypeDef <Ivl:142> LCL_VAR_ADDR BB29 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #734 @740 RefTypeFixedReg <Reg:rcx>  BB29 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #735 @740 RefTypeUse <Ivl:142>  BB29 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #736 @741 RefTypeFixedReg <Reg:rcx>  BB29 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #737 @741 RefTypeDef <Ivl:143> PUTARG_REG BB29 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #738 @742 RefTypeFixedReg <Reg:rcx>  BB29 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #739 @742 RefTypeUse <Ivl:143>  BB29 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #740 @743 RefTypeKill <Reg:rax>  BB29 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #741 @743 RefTypeKill <Reg:rcx>  BB29 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #742 @743 RefTypeKill <Reg:rdx>  BB29 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #743 @743 RefTypeKill <Reg:r8 >  BB29 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #744 @743 RefTypeKill <Reg:r9 >  BB29 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #745 @743 RefTypeKill <Reg:r10>  BB29 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #746 @743 RefTypeKill <Reg:r11>  BB29 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #747 @743 RefTypeFixedReg <Reg:rax>  BB29 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #748 @743 RefTypeDef <Ivl:144> CALL BB29 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #749 @744 RefTypeUse <Ivl:144>  BB29 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #750 @749 RefTypeDef <Ivl:145> CNS_INT BB29 regmask=[rdx] minReg=1 wt=400.00>
<RefPosition #751 @750 RefTypeUse <Ivl:145>  BB29 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #752 @751 RefTypeDef <Ivl:146> IND BB29 regmask=[rdx] minReg=1 wt=400.00>
<RefPosition #753 @752 RefTypeFixedReg <Reg:rdx>  BB29 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #754 @752 RefTypeUse <Ivl:146>  BB29 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #755 @753 RefTypeFixedReg <Reg:rdx>  BB29 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #756 @753 RefTypeDef <Ivl:147> PUTARG_REG BB29 regmask=[rdx] minReg=1 fixed wt=400.00>
<RefPosition #757 @755 RefTypeDef <Ivl:148> LCL_VAR BB29 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #758 @756 RefTypeFixedReg <Reg:rcx>  BB29 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #759 @756 RefTypeUse <Ivl:148>  BB29 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #760 @757 RefTypeFixedReg <Reg:rcx>  BB29 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #761 @757 RefTypeDef <Ivl:149> PUTARG_REG BB29 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #762 @758 RefTypeFixedReg <Reg:rdx>  BB29 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #763 @758 RefTypeUse <Ivl:147>  BB29 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #764 @758 RefTypeFixedReg <Reg:rcx>  BB29 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #765 @758 RefTypeUse <Ivl:149>  BB29 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #766 @759 RefTypeKill <Reg:rax>  BB29 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #767 @759 RefTypeKill <Reg:rcx>  BB29 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #768 @759 RefTypeKill <Reg:rdx>  BB29 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #769 @759 RefTypeKill <Reg:r8 >  BB29 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #770 @759 RefTypeKill <Reg:r9 >  BB29 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #771 @759 RefTypeKill <Reg:r10>  BB29 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #772 @759 RefTypeKill <Reg:r11>  BB29 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #773 @759 RefTypeFixedReg <Reg:rax>  BB29 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #774 @759 RefTypeDef <Ivl:150> CALL BB29 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #775 @760 RefTypeUse <Ivl:150>  BB29 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #776 @765 RefTypeDef <Ivl:151> LCL_VAR BB29 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #777 @766 RefTypeFixedReg <Reg:rcx>  BB29 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #778 @766 RefTypeUse <Ivl:151>  BB29 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #779 @767 RefTypeFixedReg <Reg:rcx>  BB29 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #780 @767 RefTypeDef <Ivl:152> PUTARG_REG BB29 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #781 @768 RefTypeFixedReg <Reg:rcx>  BB29 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #782 @768 RefTypeUse <Ivl:152>  BB29 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #783 @769 RefTypeKill <Reg:rax>  BB29 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #784 @769 RefTypeKill <Reg:rcx>  BB29 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #785 @769 RefTypeKill <Reg:rdx>  BB29 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #786 @769 RefTypeKill <Reg:r8 >  BB29 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #787 @769 RefTypeKill <Reg:r9 >  BB29 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #788 @769 RefTypeKill <Reg:r10>  BB29 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #789 @769 RefTypeKill <Reg:r11>  BB29 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #790 @777 RefTypeDef <Ivl:153> CNS_INT BB29 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #791 @778 RefTypeUse <Ivl:153>  BB29 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #792 @779 RefTypeDef <Ivl:154> IND BB29 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #793 @780 RefTypeFixedReg <Reg:rcx>  BB29 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #794 @780 RefTypeUse <Ivl:154>  BB29 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #795 @781 RefTypeFixedReg <Reg:rcx>  BB29 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #796 @781 RefTypeDef <Ivl:155> PUTARG_REG BB29 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #797 @782 RefTypeFixedReg <Reg:rcx>  BB29 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #798 @782 RefTypeUse <Ivl:155>  BB29 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #799 @783 RefTypeKill <Reg:rax>  BB29 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #800 @783 RefTypeKill <Reg:rcx>  BB29 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #801 @783 RefTypeKill <Reg:rdx>  BB29 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #802 @783 RefTypeKill <Reg:r8 >  BB29 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #803 @783 RefTypeKill <Reg:r9 >  BB29 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #804 @783 RefTypeKill <Reg:r10>  BB29 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #805 @783 RefTypeKill <Reg:r11>  BB29 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #806 @791 RefTypeDef <Ivl:156> CNS_INT BB29 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #807 @792 RefTypeUse <Ivl:156>  BB29 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #808 @793 RefTypeDef <Ivl:157> IND BB29 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #809 @794 RefTypeFixedReg <Reg:rcx>  BB29 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #810 @794 RefTypeUse <Ivl:157>  BB29 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #811 @795 RefTypeFixedReg <Reg:rcx>  BB29 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #812 @795 RefTypeDef <Ivl:158> PUTARG_REG BB29 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #813 @796 RefTypeFixedReg <Reg:rcx>  BB29 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #814 @796 RefTypeUse <Ivl:158>  BB29 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #815 @797 RefTypeKill <Reg:rax>  BB29 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #816 @797 RefTypeKill <Reg:rcx>  BB29 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #817 @797 RefTypeKill <Reg:rdx>  BB29 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #818 @797 RefTypeKill <Reg:r8 >  BB29 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #819 @797 RefTypeKill <Reg:r9 >  BB29 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #820 @797 RefTypeKill <Reg:r10>  BB29 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #821 @797 RefTypeKill <Reg:r11>  BB29 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #822 @805 RefTypeDef <Ivl:159> CNS_INT BB29 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #823 @806 RefTypeUse <Ivl:159>  BB29 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #824 @807 RefTypeDef <Ivl:160> IND BB29 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #825 @808 RefTypeFixedReg <Reg:rcx>  BB29 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #826 @808 RefTypeUse <Ivl:160>  BB29 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #827 @809 RefTypeFixedReg <Reg:rcx>  BB29 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #828 @809 RefTypeDef <Ivl:161> PUTARG_REG BB29 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #829 @810 RefTypeFixedReg <Reg:rcx>  BB29 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #830 @810 RefTypeUse <Ivl:161>  BB29 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #831 @811 RefTypeKill <Reg:rax>  BB29 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #832 @811 RefTypeKill <Reg:rcx>  BB29 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #833 @811 RefTypeKill <Reg:rdx>  BB29 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #834 @811 RefTypeKill <Reg:r8 >  BB29 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #835 @811 RefTypeKill <Reg:r9 >  BB29 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #836 @811 RefTypeKill <Reg:r10>  BB29 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #837 @811 RefTypeKill <Reg:r11>  BB29 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #838 @819 RefTypeDef <Ivl:162> CNS_INT BB29 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #839 @820 RefTypeUse <Ivl:162>  BB29 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #840 @821 RefTypeDef <Ivl:163> IND BB29 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #841 @822 RefTypeFixedReg <Reg:rcx>  BB29 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #842 @822 RefTypeUse <Ivl:163>  BB29 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #843 @823 RefTypeFixedReg <Reg:rcx>  BB29 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #844 @823 RefTypeDef <Ivl:164> PUTARG_REG BB29 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #845 @824 RefTypeFixedReg <Reg:rcx>  BB29 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #846 @824 RefTypeUse <Ivl:164>  BB29 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #847 @825 RefTypeKill <Reg:rax>  BB29 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #848 @825 RefTypeKill <Reg:rcx>  BB29 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #849 @825 RefTypeKill <Reg:rdx>  BB29 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #850 @825 RefTypeKill <Reg:r8 >  BB29 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #851 @825 RefTypeKill <Reg:r9 >  BB29 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #852 @825 RefTypeKill <Reg:r10>  BB29 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #853 @825 RefTypeKill <Reg:r11>  BB29 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #854 @834 RefTypeBB  BB39 regmask=[] minReg=1 wt=100.00>
<RefPosition #855 @846 RefTypeBB  BB30 regmask=[] minReg=1 wt=100.00>
<RefPosition #856 @855 RefTypeDef <Ivl:165> LCL_VAR_ADDR BB30 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #857 @856 RefTypeFixedReg <Reg:rcx>  BB30 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #858 @856 RefTypeUse <Ivl:165>  BB30 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #859 @857 RefTypeFixedReg <Reg:rcx>  BB30 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #860 @857 RefTypeDef <Ivl:166> PUTARG_REG BB30 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #861 @858 RefTypeFixedReg <Reg:rcx>  BB30 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #862 @858 RefTypeUse <Ivl:166>  BB30 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #863 @859 RefTypeKill <Reg:rax>  BB30 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #864 @859 RefTypeKill <Reg:rcx>  BB30 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #865 @859 RefTypeKill <Reg:rdx>  BB30 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #866 @859 RefTypeKill <Reg:r8 >  BB30 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #867 @859 RefTypeKill <Reg:r9 >  BB30 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #868 @859 RefTypeKill <Reg:r10>  BB30 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #869 @859 RefTypeKill <Reg:r11>  BB30 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #870 @866 RefTypeDef <Ivl:167 internal> STORE_BLK BB30 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #871 @866 RefTypeUse <Ivl:167 internal> STORE_BLK BB30 regmask=[rcx] minReg=1 last wt=400.00>
<RefPosition #872 @871 RefTypeDef <Ivl:168> LCL_VAR_ADDR BB30 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #873 @872 RefTypeFixedReg <Reg:rcx>  BB30 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #874 @872 RefTypeUse <Ivl:168>  BB30 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #875 @873 RefTypeFixedReg <Reg:rcx>  BB30 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #876 @873 RefTypeDef <Ivl:169> PUTARG_REG BB30 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #877 @874 RefTypeFixedReg <Reg:rcx>  BB30 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #878 @874 RefTypeUse <Ivl:169>  BB30 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #879 @875 RefTypeKill <Reg:rax>  BB30 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #880 @875 RefTypeKill <Reg:rcx>  BB30 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #881 @875 RefTypeKill <Reg:rdx>  BB30 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #882 @875 RefTypeKill <Reg:r8 >  BB30 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #883 @875 RefTypeKill <Reg:r9 >  BB30 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #884 @875 RefTypeKill <Reg:r10>  BB30 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #885 @875 RefTypeKill <Reg:r11>  BB30 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #886 @875 RefTypeFixedReg <Reg:rax>  BB30 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #887 @875 RefTypeDef <Ivl:170> CALL BB30 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #888 @876 RefTypeUse <Ivl:170>  BB30 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #889 @885 RefTypeDef <Ivl:171> EQ BB30 regmask=[rax] minReg=1 wt=400.00>
<RefPosition #890 @886 RefTypeUse <Ivl:171>  BB30 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #891 @898 RefTypeBB  BB31 regmask=[] minReg=1 wt=100.00>
<RefPosition #892 @907 RefTypeKill <Reg:rax>  BB31 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #893 @907 RefTypeKill <Reg:rcx>  BB31 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #894 @907 RefTypeKill <Reg:rdx>  BB31 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #895 @907 RefTypeKill <Reg:r8 >  BB31 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #896 @907 RefTypeKill <Reg:r9 >  BB31 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #897 @907 RefTypeKill <Reg:r10>  BB31 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #898 @907 RefTypeKill <Reg:r11>  BB31 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #899 @907 RefTypeFixedReg <Reg:rax>  BB31 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #900 @907 RefTypeDef <Ivl:172> CALL BB31 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #901 @908 RefTypeUse <Ivl:172>  BB31 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #902 @913 RefTypeDef <Ivl:173> LCL_VAR BB31 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #903 @914 RefTypeFixedReg <Reg:rcx>  BB31 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #904 @914 RefTypeUse <Ivl:173>  BB31 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #905 @915 RefTypeFixedReg <Reg:rcx>  BB31 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #906 @915 RefTypeDef <Ivl:174> PUTARG_REG BB31 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #907 @916 RefTypeFixedReg <Reg:rcx>  BB31 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #908 @916 RefTypeUse <Ivl:174>  BB31 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #909 @917 RefTypeKill <Reg:rax>  BB31 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #910 @917 RefTypeKill <Reg:rcx>  BB31 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #911 @917 RefTypeKill <Reg:rdx>  BB31 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #912 @917 RefTypeKill <Reg:r8 >  BB31 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #913 @917 RefTypeKill <Reg:r9 >  BB31 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #914 @917 RefTypeKill <Reg:r10>  BB31 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #915 @917 RefTypeKill <Reg:r11>  BB31 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #916 @930 RefTypeBB  BB32 regmask=[] minReg=1 wt=100.00>
<RefPosition #917 @935 RefTypeDef <Ivl:175> LCL_VAR_ADDR BB32 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #918 @936 RefTypeFixedReg <Reg:rcx>  BB32 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #919 @936 RefTypeUse <Ivl:175>  BB32 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #920 @937 RefTypeFixedReg <Reg:rcx>  BB32 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #921 @937 RefTypeDef <Ivl:176> PUTARG_REG BB32 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #922 @938 RefTypeFixedReg <Reg:rcx>  BB32 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #923 @938 RefTypeUse <Ivl:176>  BB32 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #924 @939 RefTypeKill <Reg:rax>  BB32 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #925 @939 RefTypeKill <Reg:rcx>  BB32 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #926 @939 RefTypeKill <Reg:rdx>  BB32 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #927 @939 RefTypeKill <Reg:r8 >  BB32 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #928 @939 RefTypeKill <Reg:r9 >  BB32 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #929 @939 RefTypeKill <Reg:r10>  BB32 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #930 @939 RefTypeKill <Reg:r11>  BB32 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #931 @939 RefTypeFixedReg <Reg:rax>  BB32 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #932 @939 RefTypeDef <Ivl:177> CALL BB32 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #933 @940 RefTypeUse <Ivl:177>  BB32 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #934 @949 RefTypeDef <Ivl:178> EQ BB32 regmask=[rax] minReg=1 wt=400.00>
<RefPosition #935 @950 RefTypeUse <Ivl:178>  BB32 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #936 @962 RefTypeBB  BB33 regmask=[] minReg=1 wt=100.00>
<RefPosition #937 @971 RefTypeKill <Reg:rax>  BB33 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #938 @971 RefTypeKill <Reg:rcx>  BB33 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #939 @971 RefTypeKill <Reg:rdx>  BB33 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #940 @971 RefTypeKill <Reg:r8 >  BB33 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #941 @971 RefTypeKill <Reg:r9 >  BB33 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #942 @971 RefTypeKill <Reg:r10>  BB33 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #943 @971 RefTypeKill <Reg:r11>  BB33 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #944 @984 RefTypeBB  BB34 regmask=[] minReg=1 wt=100.00>
<RefPosition #945 @989 RefTypeDef <Ivl:179> LCL_VAR_ADDR BB34 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #946 @990 RefTypeFixedReg <Reg:rcx>  BB34 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #947 @990 RefTypeUse <Ivl:179>  BB34 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #948 @991 RefTypeFixedReg <Reg:rcx>  BB34 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #949 @991 RefTypeDef <Ivl:180> PUTARG_REG BB34 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #950 @992 RefTypeFixedReg <Reg:rcx>  BB34 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #951 @992 RefTypeUse <Ivl:180>  BB34 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #952 @993 RefTypeKill <Reg:rax>  BB34 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #953 @993 RefTypeKill <Reg:rcx>  BB34 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #954 @993 RefTypeKill <Reg:rdx>  BB34 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #955 @993 RefTypeKill <Reg:r8 >  BB34 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #956 @993 RefTypeKill <Reg:r9 >  BB34 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #957 @993 RefTypeKill <Reg:r10>  BB34 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #958 @993 RefTypeKill <Reg:r11>  BB34 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #959 @993 RefTypeFixedReg <Reg:rax>  BB34 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #960 @993 RefTypeDef <Ivl:181> CALL BB34 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #961 @994 RefTypeUse <Ivl:181>  BB34 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #962 @1003 RefTypeDef <Ivl:182> EQ BB34 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #963 @1004 RefTypeUse <Ivl:182>  BB34 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #964 @1016 RefTypeBB  BB35 regmask=[] minReg=1 wt=100.00>
<RefPosition #965 @1025 RefTypeDef <Ivl:183> LCL_VAR BB35 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #966 @1030 RefTypeUse <Ivl:183>  BB35 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #967 @1040 RefTypeBB  BB36 regmask=[] minReg=1 wt=100.00>
<RefPosition #968 @1045 RefTypeDef <Ivl:184> LCL_VAR_ADDR BB36 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #969 @1046 RefTypeFixedReg <Reg:rcx>  BB36 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #970 @1046 RefTypeUse <Ivl:184>  BB36 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #971 @1047 RefTypeFixedReg <Reg:rcx>  BB36 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #972 @1047 RefTypeDef <Ivl:185> PUTARG_REG BB36 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #973 @1048 RefTypeFixedReg <Reg:rcx>  BB36 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #974 @1048 RefTypeUse <Ivl:185>  BB36 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #975 @1049 RefTypeKill <Reg:rax>  BB36 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #976 @1049 RefTypeKill <Reg:rcx>  BB36 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #977 @1049 RefTypeKill <Reg:rdx>  BB36 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #978 @1049 RefTypeKill <Reg:r8 >  BB36 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #979 @1049 RefTypeKill <Reg:r9 >  BB36 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #980 @1049 RefTypeKill <Reg:r10>  BB36 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #981 @1049 RefTypeKill <Reg:r11>  BB36 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #982 @1049 RefTypeFixedReg <Reg:rax>  BB36 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #983 @1049 RefTypeDef <Ivl:186> CALL BB36 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #984 @1050 RefTypeUse <Ivl:186>  BB36 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #985 @1059 RefTypeDef <Ivl:187> EQ BB36 regmask=[rax] minReg=1 wt=400.00>
<RefPosition #986 @1060 RefTypeUse <Ivl:187>  BB36 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #987 @1072 RefTypeBB  BB37 regmask=[] minReg=1 wt=100.00>
<RefPosition #988 @1082 RefTypeBB  BB38 regmask=[] minReg=1 wt=100.00>
<RefPosition #989 @1088 RefTypeBB  BB40 regmask=[] minReg=1 wt=100.00>
<RefPosition #990 @1093 RefTypeDef <Ivl:188> LCL_VAR BB40 regmask=[rax] minReg=1 wt=400.00>
<RefPosition #991 @1098 RefTypeUse <Ivl:188>  BB40 regmask=[rax] minReg=1 last wt=100.00>
Active intervals at end of allocation:

Trees after linear scan register allocator (LSRA)

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [???..???)                                     i internal hascall LIR 
BB02 [0038]  1       BB01                  1       [???..???)-> BB04 ( cond )                     internal LIR 
BB03 [0039]  1       BB02                  0.50    [???..???)                                     internal LIR 
BB04 [0037]  2       BB02,BB03             1       [???..???)                                     i internal hascall LIR 
BB05 [0001]  1       BB04                  1       [000..078)-> BB14 (always)                     i hascall gcsafe newobj LIR 
BB06 [0002]  1       BB14                  1       [078..083)                                     i bwd bwd-target LIR 
BB07 [0003]  1  0    BB06                  1       [083..0D5)-> BB08 (always) T0      try { }     keep i try hascall gcsafe newobj bwd LIR 
BB08 [0031]  1       BB07                  1       [???..???)-> BB10 (callf )                     i internal LIR 
BB09 [0032]  1       BB12                  1       [???..???)-> BB13 (ALWAYS)                     i internal LIR KEEP 
BB13 [0007]  1       BB09                  1       [0E1..0E6)                                     i bwd LIR 
BB14 [0008]  2       BB05,BB13             1       [0E6..0F1)-> BB06 ( cond )                     i bwd LIR 
BB15 [0009]  1       BB14                  1       [0F1..110)-> BB28 (always)                     i hascall gcsafe LIR 
BB16 [0010]  1       BB28                  1       [110..11C)                                     i bwd bwd-target LIR 
BB17 [0011]  1  1    BB16                  1       [11C..145)-> BB19 ( cond ) T1      try {       keep i try hascall gcsafe bwd LIR 
BB18 [0012]  1  1    BB17                  1       [145..148)-> BB20 (always) T1                  i bwd LIR 
BB19 [0013]  1  1    BB17                  1       [148..14B)-> BB22 (always) T1      }           i bwd LIR 
BB20 [0035]  1       BB18                  1       [???..???)-> BB24 (callf )                     i internal LIR 
BB21 [0036]  1       BB26                  1       [???..???)-> BB29 (ALWAYS)                     i internal LIR KEEP 
BB22 [0033]  1       BB19                  1       [???..???)-> BB24 (callf )                     i internal LIR 
BB23 [0034]  1       BB26                  1       [???..???)-> BB27 (ALWAYS)                     i internal LIR KEEP 
BB27 [0017]  1       BB23                  1       [158..161)                                     i hascall gcsafe bwd LIR 
BB28 [0018]  2       BB15,BB27             1       [161..166)-> BB16 (always)                     i bwd LIR 
BB29 [0019]  1       BB21                  1       [166..1B1)-> BB39 (always)                     i hascall gcsafe LIR 
BB30 [0020]  1       BB39                  1       [1B1..1CA)-> BB32 ( cond )                     i hascall gcsafe bwd bwd-target LIR 
BB31 [0021]  1       BB30                  1       [1CA..1D9)-> BB38 (always)                     i hascall gcsafe bwd LIR 
BB32 [0022]  1       BB30                  1       [1D9..1EA)-> BB34 ( cond )                     i hascall gcsafe bwd LIR 
BB33 [0023]  1       BB32                  1       [1EA..1F4)-> BB38 (always)                     i hascall gcsafe bwd LIR 
BB34 [0024]  1       BB32                  1       [1F4..205)-> BB36 ( cond )                     i hascall gcsafe bwd LIR 
BB35 [0025]  1       BB34                  1       [205..210)-> BB38 (always)                     i bwd LIR 
BB36 [0026]  1       BB34                  1       [210..221)-> BB38 ( cond )                     i hascall gcsafe bwd LIR 
BB37 [0027]  1       BB36                  1       [221..224)-> BB40 (always)                     i bwd LIR 
BB38 [0028]  4       BB31,BB33,BB35,BB36   1       [224..225)                                     i bwd LIR 
BB39 [0029]  2       BB29,BB38             1       [225..22A)-> BB30 (always)                     i bwd LIR 
BB40 [0030]  1       BB37                  1       [22A..232)        (return)                     i LIR 
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ funclets follow
BB10 [0004]  2     0 BB08                  1       [0D5..0D9)-> BB12 ( cond )    H0 F finally {   keep i flet bwd LIR 
BB11 [0005]  1     0 BB10                  1       [0D9..0E0)                    H0               i hascall bwd LIR 
BB12 [0006]  2     0 BB10,BB11             1       [0E0..0E1)        (finret)    H0   }           i bwd LIR 
BB24 [0014]  3     1 BB20,BB22             1       [14B..14F)-> BB26 ( cond )    H1 F finally {   keep i flet bwd LIR 
BB25 [0015]  1     1 BB24                  1       [14F..157)                    H1               i hascall bwd LIR 
BB26 [0016]  2     1 BB24,BB25             1       [157..158)        (finret)    H1   }           i bwd LIR 
-----------------------------------------------------------------------------------------------------------------------------------------

------------ BB01 [???..???), preds={} succs={BB02}
N002 (  0,  0) [000000] ------------                 NOP       void   REG NA

------------ BB02 [???..???) -> BB04 (cond), preds={BB01} succs={BB03,BB04}
N006 (  2, 10) [000371] Hc----------       t371 =    CNS_INT(h) long   0x7ffdb6f1d838 global ptr REG NA
                                                  /--*  t371   long   
N008 (  4, 12) [000372] nc----------       t372 = *  IND       int    REG NA
N010 (  1,  1) [000373] -c----------       t373 =    CNS_INT   int    0 REG NA
                                                  /--*  t372   int    
                                                  +--*  t373   int    
N012 (  6, 14) [000374] J------N----              *  EQ        void   REG NA
N014 (  8, 16) [000494] ------------              *  JTRUE     void   REG NA

------------ BB03 [???..???), preds={BB02} succs={BB04}
N018 ( 14,  5) [000375] --C-G-?-----                 CALL help void   HELPER.CORINFO_HELP_DBG_IS_JUST_MY_CODE REG NA

------------ BB04 [???..???), preds={BB02,BB03} succs={BB05}

------------ BB05 [000..078) -> BB14 (always), preds={BB04} succs={BB14}
N024 (???,???) [000495] ------------                 IL_OFFSET void   IL offset: 0x0 REG NA
N026 (  1,  1) [000001] ------------                 NO_OP     void   REG NA
N028 (???,???) [000496] ------------                 IL_OFFSET void   IL offset: 0x1 REG NA
N030 ( 14,  5) [000002] --CXG-------         t2 =    CALL      long   System.DateTime.get_Now REG rax
                                                  /--*  t2     long   
N032 ( 18,  8) [000005] DA-XG-------              *  STORE_LCL_VAR struct<System.DateTime, 8> V19 tmp1          NA REG NA
N034 (???,???) [000497] ------------                 IL_OFFSET void   IL offset: 0x6 REG NA
N036 (  3,  2) [000006] ------------         t6 =    LCL_VAR   struct<System.DateTime, 8> V19 tmp1          rcx REG rcx
                                                  /--*  t6     struct 
N038 (  7,  5) [000009] DA--G-------              *  STORE_LCL_VAR struct<System.DateTime, 8>(AX) V03 loc1          NA REG NA
N040 (???,???) [000498] ------------                 IL_OFFSET void   IL offset: 0x7 REG NA
N042 (  3,  3) [000011] ------------        t11 =    LCL_VAR_ADDR byref  V03 loc1          rcx REG rcx
                                                  /--*  t11    byref  
N044 (???,???) [000627] ------------       t627 = *  PUTARG_REG byref  REG rcx
                                                  /--*  t627   byref  this in rcx
N046 ( 17, 10) [000012] --CXG-------        t12 = *  CALL      ref    System.DateTime.ToString REG rax
                                                  /--*  t12    ref    
N048 ( 21, 13) [000014] DA-XG-------              *  STORE_LCL_VAR ref    V20 tmp2          NA REG NA
N050 (???,???) [000499] ------------                 IL_OFFSET void   IL offset: 0xe REG NA
N052 (  2, 10) [000380] H-----------       t380 =    CNS_INT(h) long   0xBE2A31F0 "	 Created list" REG rdx
                                                  /--*  t380   long   
N054 (  4, 12) [000381] #---G-------       t381 = *  IND       ref    REG rdx
                                                  /--*  t381   ref    
N056 (???,???) [000628] ----G-------       t628 = *  PUTARG_REG ref    REG rdx
N058 (  3,  2) [000015] ------------        t15 =    LCL_VAR   ref    V20 tmp2          rcx REG rcx
                                                  /--*  t15    ref    
N060 (???,???) [000629] ------------       t629 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t628   ref    arg1 in rdx
                                                  +--*  t629   ref    arg0 in rcx
N062 ( 21, 21) [000017] --CXG-------        t17 = *  CALL      ref    System.String.Concat REG rax
                                                  /--*  t17    ref    
N064 ( 25, 24) [000019] DA-XG-------              *  STORE_LCL_VAR ref    V21 tmp3          NA REG NA
N066 (???,???) [000500] ------------                 IL_OFFSET void   IL offset: 0x18 REG NA
N068 (  3,  2) [000020] ------------        t20 =    LCL_VAR   ref    V21 tmp3          rcx REG rcx
                                                  /--*  t20    ref    
N070 (???,???) [000630] ------------       t630 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t630   ref    arg0 in rcx
N072 ( 17,  8) [000021] --CXG-------              *  CALL      void   System.Console.WriteLine REG NA
N074 (???,???) [000501] ------------                 IL_OFFSET void   IL offset: 0x1d REG NA
N076 (  1,  1) [000022] ------------                 NO_OP     void   REG NA
N078 (???,???) [000502] ------------                 IL_OFFSET void   IL offset: 0x1e REG NA
N080 (  2, 10) [000024] H-----------        t24 =    CNS_INT(h) long   0x7ffdb7022b70 method REG rcx
                                                  /--*  t24    long   
N082 (???,???) [000631] ------------       t631 = *  PUTARG_REG long   REG rcx
                                                  /--*  t631   long   arg0 in rcx
N084 ( 16, 16) [000025] --C---------        t25 = *  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST REG rax
                                                  /--*  t25    ref    
N086 ( 20, 19) [000027] DA----------              *  STORE_LCL_VAR ref    V22 tmp4          NA REG NA
N088 (  3,  2) [000028] ------------        t28 =    LCL_VAR   ref    V22 tmp4          rcx REG rcx
                                                  /--*  t28    ref    
N090 (???,???) [000632] ------------       t632 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t632   ref    this in rcx
N092 ( 17,  9) [000029] --CXG-------              *  CALL      void   FalseLeakRepro.List..ctor REG NA
N094 (???,???) [000503] ------------                 IL_OFFSET void   IL offset: 0x24 REG NA
N096 (  3,  2) [000023] ------------        t23 =    LCL_VAR   ref    V00 this          rdx REG rdx
                                                  /--*  t23    ref    
N098 (  4,  3) [000388] ------------       t388 = *  LEA(b+8)  byref  REG rcx
N100 (  3,  2) [000030] ------------        t30 =    LCL_VAR   ref    V22 tmp4          rdx REG rdx
                                                  /--*  t388   byref  
                                                  +--*  t30    ref    
N102 (???,???) [000504] -A-XG-------              *  STOREIND  ref    REG NA
N104 (???,???) [000505] ------------                 IL_OFFSET void   IL offset: 0x29 REG NA
N106 (  2, 10) [000036] H-----------        t36 =    CNS_INT(h) long   0x7ffdb6c458b8 token REG rcx
                                                  /--*  t36    long   
N108 (???,???) [000633] ------------       t633 = *  PUTARG_REG long   REG rcx
                                                  /--*  t633   long   arg0 in rcx
N110 ( 16, 16) [000037] --C---------        t37 = *  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST REG rax
                                                  /--*  t37    ref    
N112 ( 20, 19) [000039] DA----------              *  STORE_LCL_VAR ref    V23 tmp5          NA REG NA
N114 (  3,  2) [000033] ------------        t33 =    LCL_VAR   ref    V00 this          rcx REG rcx
                                                  /--*  t33    ref    
N116 (  4,  3) [000393] -c----------       t393 = *  LEA(b+8)  byref  REG NA
                                                  /--*  t393   byref  
N118 (  6,  5) [000034] ---XG-------        t34 = *  IND       ref    REG rcx
                                                  /--*  t34    ref    
N120 (  7,  6) [000391] -c----------       t391 = *  LEA(b+8)  byref  REG NA
                                                  /--*  t391   byref  
N122 (  9,  8) [000035] ---XG-------        t35 = *  IND       ref    REG rcx
                                                  /--*  t35    ref    
N124 ( 13, 11) [000043] DA-XG-------              *  STORE_LCL_VAR ref    V24 tmp6          NA REG NA
N126 (  3,  2) [000040] ------------        t40 =    LCL_VAR   ref    V23 tmp5          rcx REG rcx
                                                  /--*  t40    ref    
N128 (???,???) [000634] ------------       t634 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t634   ref    this in rcx
N130 ( 17,  9) [000041] --CXG-------              *  CALL      void   System.Object..ctor REG NA
N132 (???,???) [000506] ------------                 IL_OFFSET void   IL offset: 0x39 REG NA
N134 (  3,  2) [000044] ------------        t44 =    LCL_VAR   ref    V24 tmp6          rdx REG rdx
                                                  /--*  t44    ref    
N136 (  4,  3) [000396] ------------       t396 = *  LEA(b+16) byref  REG rcx
N138 (  3,  2) [000045] ------------        t45 =    LCL_VAR   ref    V23 tmp5          rdx REG rdx
                                                  /--*  t396   byref  
                                                  +--*  t45    ref    
N140 (???,???) [000507] -A-XG-------              *  STOREIND  ref    REG NA
N142 (???,???) [000508] ------------                 IL_OFFSET void   IL offset: 0x3e REG NA
N144 (  2, 10) [000050] H-----------        t50 =    CNS_INT(h) long   0x7ffdb7026348 token REG rcx
                                                  /--*  t50    long   
N146 (???,???) [000635] ------------       t635 = *  PUTARG_REG long   REG rcx
                                                  /--*  t635   long   arg0 in rcx
N148 ( 16, 16) [000051] --C---------        t51 = *  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST REG rax
                                                  /--*  t51    ref    
N150 ( 20, 19) [000053] DA----------              *  STORE_LCL_VAR ref    V25 tmp7          NA REG NA
N152 (  3,  2) [000054] ------------        t54 =    LCL_VAR   ref    V25 tmp7          rcx REG rcx
                                                  /--*  t54    ref    
N154 (???,???) [000636] ------------       t636 = *  PUTARG_REG ref    REG rcx
N156 (  3,  2) [000048] ------------        t48 =    LCL_VAR   ref    V00 this          rdx REG rdx
                                                  /--*  t48    ref    
N158 (???,???) [000637] ------------       t637 = *  PUTARG_REG ref    REG rdx
N160 (  2, 10) [000049] H-----------        t49 =    CNS_INT(h) long   0x7ffdb6c613f8 ftn REG r8
                                                  /--*  t49    long   
N162 (???,???) [000638] ------------       t638 = *  PUTARG_REG long   REG r8
                                                  /--*  t636   ref    this in rcx
                                                  +--*  t637   ref    arg1 in rdx
                                                  +--*  t638   long   arg2 in r8
N164 ( 22, 23) [000055] --CXG-------              *  CALL      void   System.MulticastDelegate.CtorClosed REG NA
N166 (???,???) [000509] ------------                 IL_OFFSET void   IL offset: 0x4a REG NA
N168 (  2, 10) [000057] H-----------        t57 =    CNS_INT(h) long   0x7ffdb6dc4e80 token REG rcx
                                                  /--*  t57    long   
N170 (???,???) [000639] ------------       t639 = *  PUTARG_REG long   REG rcx
                                                  /--*  t639   long   arg0 in rcx
N172 ( 16, 16) [000058] --C---------        t58 = *  CALL help ref    HELPER.CORINFO_HELP_NEWFAST REG rax
                                                  /--*  t58    ref    
N174 ( 20, 19) [000060] DA----------              *  STORE_LCL_VAR ref    V26 tmp8          NA REG NA
N176 (  3,  2) [000061] ------------        t61 =    LCL_VAR   ref    V26 tmp8          rcx REG rcx
                                                  /--*  t61    ref    
N178 (???,???) [000640] ------------       t640 = *  PUTARG_REG ref    REG rcx
N180 (  3,  2) [000056] ------------        t56 =    LCL_VAR   ref    V25 tmp7          rdx REG rdx
                                                  /--*  t56    ref    
N182 (???,???) [000641] ------------       t641 = *  PUTARG_REG ref    REG rdx
                                                  /--*  t640   ref    this in rcx
                                                  +--*  t641   ref    arg1 in rdx
N184 ( 20, 12) [000062] --CXG-------              *  CALL      void   System.Threading.Thread..ctor REG NA
N186 (???,???) [000510] ------------                 IL_OFFSET void   IL offset: 0x4f REG NA
N188 (  3,  2) [000063] ------------        t63 =    LCL_VAR   ref    V26 tmp8          rcx REG rcx
                                                  /--*  t63    ref    
N190 (  7,  5) [000065] DA----------              *  STORE_LCL_VAR ref    V02 loc0          NA REG NA
N192 (???,???) [000511] ------------                 IL_OFFSET void   IL offset: 0x50 REG NA
N194 (  3,  2) [000066] ------------        t66 =    LCL_VAR   ref    V02 loc0          rcx REG rcx
                                                  /--*  t66    ref    
N196 (???,???) [000642] ------------       t642 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t642   ref    this in rcx
N198 ( 17,  9) [000067] --CXG-------              *  CALL nullcheck void   System.Threading.Thread.Start REG NA
N200 (???,???) [000512] ------------                 IL_OFFSET void   IL offset: 0x56 REG NA
N202 (  1,  1) [000068] ------------                 NO_OP     void   REG NA
N204 (???,???) [000513] ------------                 IL_OFFSET void   IL offset: 0x57 REG NA
N206 ( 14,  5) [000069] --CXG-------        t69 =    CALL      long   System.DateTime.get_Now REG rax
                                                  /--*  t69    long   
N208 ( 18,  8) [000072] DA-XG-------              *  STORE_LCL_VAR struct<System.DateTime, 8> V27 tmp9          NA REG NA
N210 (???,???) [000514] ------------                 IL_OFFSET void   IL offset: 0x5c REG NA
N212 (  3,  2) [000073] ------------        t73 =    LCL_VAR   struct<System.DateTime, 8> V27 tmp9          rcx REG rcx
                                                  /--*  t73    struct 
N214 (  7,  5) [000076] DA--G-------              *  STORE_LCL_VAR struct<System.DateTime, 8>(AX) V03 loc1          NA REG NA
N216 (???,???) [000515] ------------                 IL_OFFSET void   IL offset: 0x5d REG NA
N218 (  3,  3) [000078] ------------        t78 =    LCL_VAR_ADDR byref  V03 loc1          rcx REG rcx
                                                  /--*  t78    byref  
N220 (???,???) [000643] ------------       t643 = *  PUTARG_REG byref  REG rcx
                                                  /--*  t643   byref  this in rcx
N222 ( 17, 10) [000079] --CXG-------        t79 = *  CALL      ref    System.DateTime.ToString REG rax
                                                  /--*  t79    ref    
N224 ( 21, 13) [000081] DA-XG-------              *  STORE_LCL_VAR ref    V28 tmp10         NA REG NA
N226 (???,???) [000516] ------------                 IL_OFFSET void   IL offset: 0x64 REG NA
N228 (  2, 10) [000406] H-----------       t406 =    CNS_INT(h) long   0xBE2A31F8 "	 Consumer thread started, adding items..." REG rdx
                                                  /--*  t406   long   
N230 (  4, 12) [000407] #---G-------       t407 = *  IND       ref    REG rdx
                                                  /--*  t407   ref    
N232 (???,???) [000644] ----G-------       t644 = *  PUTARG_REG ref    REG rdx
N234 (  3,  2) [000082] ------------        t82 =    LCL_VAR   ref    V28 tmp10         rcx REG rcx
                                                  /--*  t82    ref    
N236 (???,???) [000645] ------------       t645 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t644   ref    arg1 in rdx
                                                  +--*  t645   ref    arg0 in rcx
N238 ( 21, 21) [000084] --CXG-------        t84 = *  CALL      ref    System.String.Concat REG rax
                                                  /--*  t84    ref    
N240 ( 25, 24) [000086] DA-XG-------              *  STORE_LCL_VAR ref    V29 tmp11         NA REG NA
N242 (???,???) [000517] ------------                 IL_OFFSET void   IL offset: 0x6e REG NA
N244 (  3,  2) [000087] ------------        t87 =    LCL_VAR   ref    V29 tmp11         rcx REG rcx
                                                  /--*  t87    ref    
N246 (???,???) [000646] ------------       t646 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t646   ref    arg0 in rcx
N248 ( 17,  8) [000088] --CXG-------              *  CALL      void   System.Console.WriteLine REG NA
N250 (???,???) [000518] ------------                 IL_OFFSET void   IL offset: 0x73 REG NA
N252 (  1,  1) [000089] ------------                 NO_OP     void   REG NA
N254 (???,???) [000519] ------------                 IL_OFFSET void   IL offset: 0x74 REG NA
N256 (  1,  1) [000090] ------------        t90 =    CNS_INT   int    0 REG rdx
                                                  /--*  t90    int    
N258 (  5,  4) [000092] DA----------              *  STORE_LCL_VAR int    V04 loc2          NA REG NA
N260 (???,???) [000520] ------------                 IL_OFFSET void   IL offset: 0x76 REG NA
N262 (  0,  0) [000093] ------------                 NOP       void   REG NA

------------ BB06 [078..083), preds={BB14} succs={BB07}
N288 (???,???) [000521] ------------                 IL_OFFSET void   IL offset: 0x78 REG NA
N290 (  1,  1) [000103] ------------                 NO_OP     void   REG NA
N292 (???,???) [000522] ------------                 IL_OFFSET void   IL offset: 0x79 REG NA
N294 (  3,  2) [000104] ------------       t104 =    LCL_VAR   ref    V00 this          rdx REG rdx
                                                  /--*  t104   ref    
N296 (  4,  3) [000412] -c----------       t412 = *  LEA(b+8)  byref  REG NA
                                                  /--*  t412   byref  
N298 (  6,  5) [000105] ---XG-------       t105 = *  IND       ref    REG rdx
                                                  /--*  t105   ref    
N300 ( 10,  8) [000107] DA-XG-------              *  STORE_LCL_VAR ref    V05 loc3          NA REG NA
N302 (???,???) [000523] ------------                 IL_OFFSET void   IL offset: 0x80 REG NA
N304 (  1,  1) [000108] ------------       t108 =    CNS_INT   int    0 REG rdx
                                                  /--*  t108   int    
N306 (  5,  4) [000110] DA--G-------              *  STORE_LCL_VAR int   (AX) V06 loc4          NA REG NA

------------ BB07 [083..0D5) -> BB08 (always), preds={BB06} succs={BB08}
N310 (???,???) [000524] ------------                 IL_OFFSET void   IL offset: 0x83 REG NA
N312 (  3,  3) [000113] ------------       t113 =    LCL_VAR_ADDR long   V06 loc4          rdx REG rdx
                                                  /--*  t113   long   
N314 (???,???) [000647] ------------       t647 = *  PUTARG_REG long   REG rdx
N316 (  3,  2) [000111] ------------       t111 =    LCL_VAR   ref    V05 loc3          rcx REG rcx
                                                  /--*  t111   ref    
N318 (???,???) [000648] ------------       t648 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t647   long   arg1 in rdx
                                                  +--*  t648   ref    arg0 in rcx
N320 ( 20, 12) [000114] --CXG-------              *  CALL      void   System.Threading.Monitor.Enter REG NA
N322 (???,???) [000525] ------------                 IL_OFFSET void   IL offset: 0x8b REG NA
N324 (  1,  1) [000115] ------------                 NO_OP     void   REG NA
N326 (???,???) [000526] ------------                 IL_OFFSET void   IL offset: 0x8c REG NA
N328 (  1,  1) [000116] ------------                 NO_OP     void   REG NA
N330 (???,???) [000527] ------------                 IL_OFFSET void   IL offset: 0x8d REG NA
N332 (  2, 10) [000120] H-----------       t120 =    CNS_INT(h) long   0x7ffdb70260c8 method REG rcx
                                                  /--*  t120   long   
N334 (???,???) [000649] ------------       t649 = *  PUTARG_REG long   REG rcx
                                                  /--*  t649   long   arg0 in rcx
N336 ( 16, 16) [000121] --C---------       t121 = *  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST REG rax
                                                  /--*  t121   ref    
N338 ( 20, 19) [000123] DA----------              *  STORE_LCL_VAR ref    V30 tmp12         NA REG NA
N340 (  3,  2) [000117] ------------       t117 =    LCL_VAR   ref    V00 this          rcx REG rcx
                                                  /--*  t117   ref    
N342 (  4,  3) [000419] -c----------       t419 = *  LEA(b+8)  byref  REG NA
                                                  /--*  t419   byref  
N344 (  6,  5) [000118] ---XG-------       t118 = *  IND       ref    REG rcx
                                                  /--*  t118   ref    
N346 (  7,  6) [000417] -c----------       t417 = *  LEA(b+8)  byref  REG NA
                                                  /--*  t417   byref  
N348 (  9,  8) [000119] ---XG-------       t119 = *  IND       ref    REG rcx
                                                  /--*  t119   ref    
N350 ( 13, 11) [000127] DA-XG-------              *  STORE_LCL_VAR ref    V31 tmp13         NA REG NA
N352 (  3,  2) [000124] ------------       t124 =    LCL_VAR   ref    V30 tmp12         rcx REG rcx
                                                  /--*  t124   ref    
N354 (???,???) [000650] ------------       t650 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t650   ref    this in rcx
N356 ( 17,  9) [000125] --CXG-------              *  CALL      void   FalseLeakRepro.Node..ctor REG NA
N358 (???,???) [000528] ------------                 IL_OFFSET void   IL offset: 0x9d REG NA
N360 (  3,  2) [000128] ------------       t128 =    LCL_VAR   ref    V31 tmp13         rdx REG rdx
                                                  /--*  t128   ref    
N362 (  4,  3) [000422] ------------       t422 = *  LEA(b+8)  byref  REG rcx
N364 (  3,  2) [000129] ------------       t129 =    LCL_VAR   ref    V30 tmp12         rdx REG rdx
                                                  /--*  t422   byref  
                                                  +--*  t129   ref    
N366 (???,???) [000529] -A-XG-------              *  STOREIND  ref    REG NA
N368 (???,???) [000530] ------------                 IL_OFFSET void   IL offset: 0xa2 REG NA
N370 (  3,  2) [000132] ------------       t132 =    LCL_VAR   ref    V00 this          rdx REG rdx
                                                  /--*  t132   ref    
N372 (  4,  3) [000426] -c----------       t426 = *  LEA(b+8)  byref  REG NA
                                                  /--*  t426   byref  
N374 (  6,  5) [000133] ---XG-------       t133 = *  IND       ref    REG rdx
                                                  /--*  t133   ref    
N376 (  7,  6) [000424] ------------       t424 = *  LEA(b+8)  byref  REG rcx
N378 (  3,  2) [000134] ------------       t134 =    LCL_VAR   ref    V00 this          rdx REG rdx
                                                  /--*  t134   ref    
N380 (  4,  3) [000432] -c----------       t432 = *  LEA(b+8)  byref  REG NA
                                                  /--*  t432   byref  
N382 (  6,  5) [000135] ---XG-------       t135 = *  IND       ref    REG rdx
                                                  /--*  t135   ref    
N384 (  7,  6) [000430] -c----------       t430 = *  LEA(b+8)  byref  REG NA
                                                  /--*  t430   byref  
N386 (  9,  8) [000136] ---XG-------       t136 = *  IND       ref    REG rdx
                                                  /--*  t136   ref    
N388 ( 10,  9) [000428] -c----------       t428 = *  LEA(b+8)  byref  REG NA
                                                  /--*  t428   byref  
N390 ( 12, 11) [000137] ---XG-------       t137 = *  IND       ref    REG rdx
                                                  /--*  t424   byref  
                                                  +--*  t137   ref    
N392 (???,???) [000531] -A-XG-------              *  STOREIND  ref    REG NA
N394 (???,???) [000532] ------------                 IL_OFFSET void   IL offset: 0xbd REG NA
N396 (  2, 10) [000143] H-----------       t143 =    CNS_INT(h) long   0x7ffdb6c458b8 token REG rcx
                                                  /--*  t143   long   
N398 (???,???) [000651] ------------       t651 = *  PUTARG_REG long   REG rcx
                                                  /--*  t651   long   arg0 in rcx
N400 ( 16, 16) [000144] --C---------       t144 = *  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST REG rax
                                                  /--*  t144   ref    
N402 ( 20, 19) [000146] DA----------              *  STORE_LCL_VAR ref    V32 tmp14         NA REG NA
N404 (  3,  2) [000140] ------------       t140 =    LCL_VAR   ref    V00 this          rcx REG rcx
                                                  /--*  t140   ref    
N406 (  4,  3) [000437] -c----------       t437 = *  LEA(b+8)  byref  REG NA
                                                  /--*  t437   byref  
N408 (  6,  5) [000141] ---XG-------       t141 = *  IND       ref    REG rcx
                                                  /--*  t141   ref    
N410 (  7,  6) [000435] -c----------       t435 = *  LEA(b+8)  byref  REG NA
                                                  /--*  t435   byref  
N412 (  9,  8) [000142] ---XG-------       t142 = *  IND       ref    REG rcx
                                                  /--*  t142   ref    
N414 ( 13, 11) [000150] DA-XG-------              *  STORE_LCL_VAR ref    V33 tmp15         NA REG NA
N416 (  3,  2) [000147] ------------       t147 =    LCL_VAR   ref    V32 tmp14         rcx REG rcx
                                                  /--*  t147   ref    
N418 (???,???) [000652] ------------       t652 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t652   ref    this in rcx
N420 ( 17,  9) [000148] --CXG-------              *  CALL      void   System.Object..ctor REG NA
N422 (???,???) [000533] ------------                 IL_OFFSET void   IL offset: 0xcd REG NA
N424 (  3,  2) [000151] ------------       t151 =    LCL_VAR   ref    V33 tmp15         rdx REG rdx
                                                  /--*  t151   ref    
N426 (  4,  3) [000440] ------------       t440 = *  LEA(b+16) byref  REG rcx
N428 (  3,  2) [000152] ------------       t152 =    LCL_VAR   ref    V32 tmp14         rdx REG rdx
                                                  /--*  t440   byref  
                                                  +--*  t152   ref    
N430 (???,???) [000534] -A-XG-------              *  STOREIND  ref    REG NA
N432 (???,???) [000535] ------------                 IL_OFFSET void   IL offset: 0xd2 REG NA
N434 (  1,  1) [000155] ------------                 NO_OP     void   REG NA
N436 (???,???) [000536] ------------                 IL_OFFSET void   IL offset: 0xd3 REG NA
N438 (  0,  0) [000156] ------------                 NOP       void   REG NA

------------ BB08 [???..???) -> BB10 (callf), preds={BB07} succs={BB10}

------------ BB09 [???..???) -> BB13 (ALWAYS), preds={BB12} succs={BB13}

------------ BB13 [0E1..0E6), preds={BB09} succs={BB14}
N480 (???,???) [000537] ------------                 IL_OFFSET void   IL offset: 0xe1 REG NA
N482 (  1,  1) [000157] ------------                 NO_OP     void   REG NA
N484 (???,???) [000538] ------------                 IL_OFFSET void   IL offset: 0xe2 REG NA
N486 (  3,  2) [000158] ------------       t158 =    LCL_VAR   int    V04 loc2          rax REG rax
N488 (  1,  1) [000159] -c----------       t159 =    CNS_INT   int    1 REG NA
                                                  /--*  t158   int    
                                                  +--*  t159   int    
N490 (  5,  4) [000160] ------------       t160 = *  ADD       int    REG rax
                                                  /--*  t160   int    
N492 (  9,  7) [000162] DA----------              *  STORE_LCL_VAR int    V04 loc2          NA REG NA

------------ BB14 [0E6..0F1) -> BB06 (cond), preds={BB05,BB13} succs={BB15,BB06}
N266 (???,???) [000539] ------------                 IL_OFFSET void   IL offset: 0xe6 REG NA
N268 (  3,  2) [000094] -c----------        t94 =    LCL_VAR   int    V04 loc2          NA REG NA
N270 (  1,  1) [000095] -c----------        t95 =    CNS_INT   int    10 REG NA
                                                  /--*  t94    int    
                                                  +--*  t95    int    
N272 (  8,  4) [000096] ------------        t96 = *  LT        int    REG rdx
                                                  /--*  t96    int    
N274 ( 12,  7) [000098] DA----------              *  STORE_LCL_VAR int    V07 loc5          NA REG NA
N276 (???,???) [000540] ------------                 IL_OFFSET void   IL offset: 0xed REG NA
N278 (  3,  2) [000099] -c----------        t99 =    LCL_VAR   int    V07 loc5          NA REG NA
N280 (  1,  1) [000100] -c----------       t100 =    CNS_INT   int    0 REG NA
                                                  /--*  t99    int    
                                                  +--*  t100   int    
N282 (  5,  4) [000101] J------N----              *  NE        void   REG NA
N284 (  7,  6) [000102] ------------              *  JTRUE     void   REG NA

------------ BB15 [0F1..110) -> BB28 (always), preds={BB14} succs={BB28}
N496 (???,???) [000541] ------------                 IL_OFFSET void   IL offset: 0xf1 REG NA
N498 ( 14,  5) [000171] --CXG-------       t171 =    CALL      long   System.DateTime.get_Now REG rax
                                                  /--*  t171   long   
N500 ( 18,  8) [000174] DA-XG-------              *  STORE_LCL_VAR struct<System.DateTime, 8> V34 tmp16         NA REG NA
N502 (???,???) [000542] ------------                 IL_OFFSET void   IL offset: 0xf6 REG NA
N504 (  3,  2) [000175] ------------       t175 =    LCL_VAR   struct<System.DateTime, 8> V34 tmp16         rcx REG rcx
                                                  /--*  t175   struct 
N506 (  7,  5) [000178] DA--G-------              *  STORE_LCL_VAR struct<System.DateTime, 8>(AX) V03 loc1          NA REG NA
N508 (???,???) [000543] ------------                 IL_OFFSET void   IL offset: 0xf7 REG NA
N510 (  3,  3) [000180] ------------       t180 =    LCL_VAR_ADDR byref  V03 loc1          rcx REG rcx
                                                  /--*  t180   byref  
N512 (???,???) [000653] ------------       t653 = *  PUTARG_REG byref  REG rcx
                                                  /--*  t653   byref  this in rcx
N514 ( 17, 10) [000181] --CXG-------       t181 = *  CALL      ref    System.DateTime.ToString REG rax
                                                  /--*  t181   ref    
N516 ( 21, 13) [000183] DA-XG-------              *  STORE_LCL_VAR ref    V35 tmp17         NA REG NA
N518 (???,???) [000544] ------------                 IL_OFFSET void   IL offset: 0xfe REG NA
N520 (  2, 10) [000444] H-----------       t444 =    CNS_INT(h) long   0xBE2A3200 "	 Waiting for list processing to complete..." REG rdx
                                                  /--*  t444   long   
N522 (  4, 12) [000445] #---G-------       t445 = *  IND       ref    REG rdx
                                                  /--*  t445   ref    
N524 (???,???) [000654] ----G-------       t654 = *  PUTARG_REG ref    REG rdx
N526 (  3,  2) [000184] ------------       t184 =    LCL_VAR   ref    V35 tmp17         rcx REG rcx
                                                  /--*  t184   ref    
N528 (???,???) [000655] ------------       t655 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t654   ref    arg1 in rdx
                                                  +--*  t655   ref    arg0 in rcx
N530 ( 21, 21) [000186] --CXG-------       t186 = *  CALL      ref    System.String.Concat REG rax
                                                  /--*  t186   ref    
N532 ( 25, 24) [000188] DA-XG-------              *  STORE_LCL_VAR ref    V36 tmp18         NA REG NA
N534 (???,???) [000545] ------------                 IL_OFFSET void   IL offset: 0x108 REG NA
N536 (  3,  2) [000189] ------------       t189 =    LCL_VAR   ref    V36 tmp18         rcx REG rcx
                                                  /--*  t189   ref    
N538 (???,???) [000656] ------------       t656 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t656   ref    arg0 in rcx
N540 ( 17,  8) [000190] --CXG-------              *  CALL      void   System.Console.WriteLine REG NA
N542 (???,???) [000546] ------------                 IL_OFFSET void   IL offset: 0x10d REG NA
N544 (  1,  1) [000191] ------------                 NO_OP     void   REG NA
N546 (???,???) [000547] ------------                 IL_OFFSET void   IL offset: 0x10e REG NA
N548 (  0,  0) [000192] ------------                 NOP       void   REG NA

------------ BB16 [110..11C), preds={BB28} succs={BB17}
N564 (???,???) [000548] ------------                 IL_OFFSET void   IL offset: 0x110 REG NA
N566 (  1,  1) [000197] ------------                 NO_OP     void   REG NA
N568 (???,???) [000549] ------------                 IL_OFFSET void   IL offset: 0x111 REG NA
N570 (  3,  2) [000198] ------------       t198 =    LCL_VAR   ref    V00 this          rdx REG rdx
                                                  /--*  t198   ref    
N572 (  4,  3) [000450] -c----------       t450 = *  LEA(b+8)  byref  REG NA
                                                  /--*  t450   byref  
N574 (  6,  5) [000199] ---XG-------       t199 = *  IND       ref    REG rdx
                                                  /--*  t199   ref    
N576 ( 10,  8) [000201] DA-XG-------              *  STORE_LCL_VAR ref    V08 loc6          NA REG NA
N578 (???,???) [000550] ------------                 IL_OFFSET void   IL offset: 0x119 REG NA
N580 (  1,  1) [000202] ------------       t202 =    CNS_INT   int    0 REG rdx
                                                  /--*  t202   int    
N582 (  5,  4) [000204] DA--G-------              *  STORE_LCL_VAR int   (AX) V09 loc7          NA REG NA

------------ BB17 [11C..145) -> BB19 (cond), preds={BB16} succs={BB18,BB19}
N586 (???,???) [000551] ------------                 IL_OFFSET void   IL offset: 0x11c REG NA
N588 (  3,  3) [000207] ------------       t207 =    LCL_VAR_ADDR long   V09 loc7          rdx REG rdx
                                                  /--*  t207   long   
N590 (???,???) [000657] ------------       t657 = *  PUTARG_REG long   REG rdx
N592 (  3,  2) [000205] ------------       t205 =    LCL_VAR   ref    V08 loc6          rcx REG rcx
                                                  /--*  t205   ref    
N594 (???,???) [000658] ------------       t658 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t657   long   arg1 in rdx
                                                  +--*  t658   ref    arg0 in rcx
N596 ( 20, 12) [000208] --CXG-------              *  CALL      void   System.Threading.Monitor.Enter REG NA
N598 (???,???) [000552] ------------                 IL_OFFSET void   IL offset: 0x125 REG NA
N600 (  1,  1) [000209] ------------                 NO_OP     void   REG NA
N602 (???,???) [000553] ------------                 IL_OFFSET void   IL offset: 0x126 REG NA
N604 (  1,  1) [000210] ------------                 NO_OP     void   REG NA
N606 (???,???) [000554] ------------                 IL_OFFSET void   IL offset: 0x127 REG NA
N608 (  3,  2) [000211] ------------       t211 =    LCL_VAR   ref    V00 this          rcx REG rcx
                                                  /--*  t211   ref    
N610 (  4,  3) [000456] -c----------       t456 = *  LEA(b+8)  byref  REG NA
                                                  /--*  t456   byref  
N612 (  6,  5) [000212] ---XG-------       t212 = *  IND       ref    REG rcx
                                                  /--*  t212   ref    
N614 (  7,  6) [000454] -c----------       t454 = *  LEA(b+8)  byref  REG NA
                                                  /--*  t454   byref  
N616 (  9,  8) [000213] ---XG-------       t213 = *  IND       ref    REG rcx
N618 (  3,  2) [000214] ------------       t214 =    LCL_VAR   ref    V00 this          rax REG rax
                                                  /--*  t214   ref    
N620 (  4,  3) [000460] -c----------       t460 = *  LEA(b+8)  byref  REG NA
                                                  /--*  t460   byref  
N622 (  6,  5) [000215] ---XG-------       t215 = *  IND       ref    REG rax
                                                  /--*  t215   ref    
N624 (  7,  6) [000458] -c----------       t458 = *  LEA(b+16) byref  REG NA
                                                  /--*  t458   byref  
N626 (  9,  8) [000216] -c-XG-------       t216 = *  IND       ref    REG NA
                                                  /--*  t213   ref    
                                                  +--*  t216   ref    
N628 ( 22, 17) [000217] ---XG-------       t217 = *  EQ        int    REG rcx
                                                  /--*  t217   int    
N630 ( 26, 20) [000219] DA-XG-------              *  STORE_LCL_VAR int    V10 loc8          NA REG NA
N632 (???,???) [000555] ------------                 IL_OFFSET void   IL offset: 0x141 REG NA
N634 (  3,  2) [000220] -c----------       t220 =    LCL_VAR   int    V10 loc8          NA REG NA
N636 (  1,  1) [000221] -c----------       t221 =    CNS_INT   int    0 REG NA
                                                  /--*  t220   int    
                                                  +--*  t221   int    
N638 (  5,  4) [000222] J------N----              *  EQ        void   REG NA
N640 (  7,  6) [000223] ------------              *  JTRUE     void   REG NA

------------ BB18 [145..148) -> BB20 (always), preds={BB17} succs={BB20}
N644 (???,???) [000556] ------------                 IL_OFFSET void   IL offset: 0x145 REG NA
N646 (  1,  1) [000230] ------------                 NO_OP     void   REG NA
N648 (???,???) [000557] ------------                 IL_OFFSET void   IL offset: 0x146 REG NA
N650 (  0,  0) [000231] ------------                 NOP       void   REG NA

------------ BB19 [148..14B) -> BB22 (always), preds={BB17} succs={BB22}
N654 (???,???) [000558] ------------                 IL_OFFSET void   IL offset: 0x148 REG NA
N656 (  1,  1) [000224] ------------                 NO_OP     void   REG NA
N658 (???,???) [000559] ------------                 IL_OFFSET void   IL offset: 0x149 REG NA
N660 (  0,  0) [000225] ------------                 NOP       void   REG NA

------------ BB20 [???..???) -> BB24 (callf), preds={BB18} succs={BB24}

------------ BB21 [???..???) -> BB29 (ALWAYS), preds={BB26} succs={BB29}

------------ BB22 [???..???) -> BB24 (callf), preds={BB19} succs={BB24}

------------ BB23 [???..???) -> BB27 (ALWAYS), preds={BB26} succs={BB27}

------------ BB27 [158..161), preds={BB23} succs={BB28}
N706 (???,???) [000560] ------------                 IL_OFFSET void   IL offset: 0x158 REG NA
N708 (  1,  1) [000226] ------------       t226 =    CNS_INT   int    100 REG rcx
                                                  /--*  t226   int    
N710 (???,???) [000659] ------------       t659 = *  PUTARG_REG int    REG rcx
                                                  /--*  t659   int    arg0 in rcx
N712 ( 15,  7) [000227] --CXG-------              *  CALL      void   System.Threading.Thread.Sleep REG NA
N714 (???,???) [000561] ------------                 IL_OFFSET void   IL offset: 0x15f REG NA
N716 (  1,  1) [000228] ------------                 NO_OP     void   REG NA
N718 (???,???) [000562] ------------                 IL_OFFSET void   IL offset: 0x160 REG NA
N720 (  1,  1) [000229] ------------                 NO_OP     void   REG NA

------------ BB28 [161..166) -> BB16 (always), preds={BB15,BB27} succs={BB16}
N552 (???,???) [000563] ------------                 IL_OFFSET void   IL offset: 0x161 REG NA
N554 (  1,  1) [000193] -c----------       t193 =    CNS_INT   int    1 REG NA
                                                  /--*  t193   int    
N556 (  5,  4) [000195] DA----------              *  STORE_LCL_VAR int    V11 loc9          NA REG NA
N558 (???,???) [000564] ------------                 IL_OFFSET void   IL offset: 0x164 REG NA
N560 (  0,  0) [000196] ------------                 NOP       void   REG NA

------------ BB29 [166..1B1) -> BB39 (always), preds={BB21} succs={BB39}
N724 (???,???) [000565] ------------                 IL_OFFSET void   IL offset: 0x166 REG NA
N726 ( 14,  5) [000232] --CXG-------       t232 =    CALL      long   System.DateTime.get_Now REG rax
                                                  /--*  t232   long   
N728 ( 18,  8) [000235] DA-XG-------              *  STORE_LCL_VAR struct<System.DateTime, 8> V37 tmp19         NA REG NA
N730 (???,???) [000566] ------------                 IL_OFFSET void   IL offset: 0x16b REG NA
N732 (  3,  2) [000236] ------------       t236 =    LCL_VAR   struct<System.DateTime, 8> V37 tmp19         rcx REG rcx
                                                  /--*  t236   struct 
N734 (  7,  5) [000239] DA--G-------              *  STORE_LCL_VAR struct<System.DateTime, 8>(AX) V03 loc1          NA REG NA
N736 (???,???) [000567] ------------                 IL_OFFSET void   IL offset: 0x16c REG NA
N738 (  3,  3) [000241] ------------       t241 =    LCL_VAR_ADDR byref  V03 loc1          rcx REG rcx
                                                  /--*  t241   byref  
N740 (???,???) [000660] ------------       t660 = *  PUTARG_REG byref  REG rcx
                                                  /--*  t660   byref  this in rcx
N742 ( 17, 10) [000242] --CXG-------       t242 = *  CALL      ref    System.DateTime.ToString REG rax
                                                  /--*  t242   ref    
N744 ( 21, 13) [000244] DA-XG-------              *  STORE_LCL_VAR ref    V38 tmp20         NA REG NA
N746 (???,???) [000568] ------------                 IL_OFFSET void   IL offset: 0x173 REG NA
N748 (  2, 10) [000466] H-----------       t466 =    CNS_INT(h) long   0xBE2A3208 "	 Done.  Profiler is active, available options:" REG rdx
                                                  /--*  t466   long   
N750 (  4, 12) [000467] #---G-------       t467 = *  IND       ref    REG rdx
                                                  /--*  t467   ref    
N752 (???,???) [000661] ----G-------       t661 = *  PUTARG_REG ref    REG rdx
N754 (  3,  2) [000245] ------------       t245 =    LCL_VAR   ref    V38 tmp20         rcx REG rcx
                                                  /--*  t245   ref    
N756 (???,???) [000662] ------------       t662 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t661   ref    arg1 in rdx
                                                  +--*  t662   ref    arg0 in rcx
N758 ( 21, 21) [000247] --CXG-------       t247 = *  CALL      ref    System.String.Concat REG rax
                                                  /--*  t247   ref    
N760 ( 25, 24) [000249] DA-XG-------              *  STORE_LCL_VAR ref    V39 tmp21         NA REG NA
N762 (???,???) [000569] ------------                 IL_OFFSET void   IL offset: 0x17d REG NA
N764 (  3,  2) [000250] ------------       t250 =    LCL_VAR   ref    V39 tmp21         rcx REG rcx
                                                  /--*  t250   ref    
N766 (???,???) [000663] ------------       t663 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t663   ref    arg0 in rcx
N768 ( 17,  8) [000251] --CXG-------              *  CALL      void   System.Console.WriteLine REG NA
N770 (???,???) [000570] ------------                 IL_OFFSET void   IL offset: 0x182 REG NA
N772 (  1,  1) [000252] ------------                 NO_OP     void   REG NA
N774 (???,???) [000571] ------------                 IL_OFFSET void   IL offset: 0x183 REG NA
N776 (  2, 10) [000471] H-----------       t471 =    CNS_INT(h) long   0xBE2A3210 "   Q = quit" REG rcx
                                                  /--*  t471   long   
N778 (  4, 12) [000472] #---G-------       t472 = *  IND       ref    REG rcx
                                                  /--*  t472   ref    
N780 (???,???) [000664] ----G-------       t664 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t664   ref    arg0 in rcx
N782 ( 18, 18) [000254] --CXG-------              *  CALL      void   System.Console.WriteLine REG NA
N784 (???,???) [000572] ------------                 IL_OFFSET void   IL offset: 0x18d REG NA
N786 (  1,  1) [000255] ------------                 NO_OP     void   REG NA
N788 (???,???) [000573] ------------                 IL_OFFSET void   IL offset: 0x18e REG NA
N790 (  2, 10) [000474] H-----------       t474 =    CNS_INT(h) long   0xBE2A3218 "   H = heap snapshot" REG rcx
                                                  /--*  t474   long   
N792 (  4, 12) [000475] #---G-------       t475 = *  IND       ref    REG rcx
                                                  /--*  t475   ref    
N794 (???,???) [000665] ----G-------       t665 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t665   ref    arg0 in rcx
N796 ( 18, 18) [000257] --CXG-------              *  CALL      void   System.Console.WriteLine REG NA
N798 (???,???) [000574] ------------                 IL_OFFSET void   IL offset: 0x198 REG NA
N800 (  1,  1) [000258] ------------                 NO_OP     void   REG NA
N802 (???,???) [000575] ------------                 IL_OFFSET void   IL offset: 0x199 REG NA
N804 (  2, 10) [000477] H-----------       t477 =    CNS_INT(h) long   0xBE2A3220 "   G = GC (max gen)" REG rcx
                                                  /--*  t477   long   
N806 (  4, 12) [000478] #---G-------       t478 = *  IND       ref    REG rcx
                                                  /--*  t478   ref    
N808 (???,???) [000666] ----G-------       t666 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t666   ref    arg0 in rcx
N810 ( 18, 18) [000260] --CXG-------              *  CALL      void   System.Console.WriteLine REG NA
N812 (???,???) [000576] ------------                 IL_OFFSET void   IL offset: 0x1a3 REG NA
N814 (  1,  1) [000261] ------------                 NO_OP     void   REG NA
N816 (???,???) [000577] ------------                 IL_OFFSET void   IL offset: 0x1a4 REG NA
N818 (  2, 10) [000480] H-----------       t480 =    CNS_INT(h) long   0xBE2A3228 "   R = clear the running flag to stop the consumer thread" REG rcx
                                                  /--*  t480   long   
N820 (  4, 12) [000481] #---G-------       t481 = *  IND       ref    REG rcx
                                                  /--*  t481   ref    
N822 (???,???) [000667] ----G-------       t667 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t667   ref    arg0 in rcx
N824 ( 18, 18) [000263] --CXG-------              *  CALL      void   System.Console.WriteLine REG NA
N826 (???,???) [000578] ------------                 IL_OFFSET void   IL offset: 0x1ae REG NA
N828 (  1,  1) [000264] ------------                 NO_OP     void   REG NA
N830 (???,???) [000579] ------------                 IL_OFFSET void   IL offset: 0x1af REG NA
N832 (  0,  0) [000265] ------------                 NOP       void   REG NA

------------ BB30 [1B1..1CA) -> BB32 (cond), preds={BB39} succs={BB31,BB32}
N848 (???,???) [000580] ------------                 IL_OFFSET void   IL offset: 0x1b1 REG NA
N850 (  1,  1) [000270] ------------                 NO_OP     void   REG NA
N852 (???,???) [000581] ------------                 IL_OFFSET void   IL offset: 0x1b2 REG NA
N854 (  3,  3) [000273] ------------       t273 =    LCL_VAR_ADDR long   V40 tmp22         rcx REG rcx
                                                  /--*  t273   long   
N856 (???,???) [000668] ------------       t668 = *  PUTARG_REG long   REG rcx
                                                  /--*  t668   long   arg0 in rcx
N858 ( 17,  9) [000271] S-CXG-------              *  CALL      void   System.Console.ReadKey REG NA
N860 (???,???) [000582] ------------                 IL_OFFSET void   IL offset: 0x1b7 REG NA
N862 (  3,  2) [000274] -c----------       t274 =    LCL_VAR   struct<System.ConsoleKeyInfo, 12>(AX) V40 tmp22         NA REG NA
N864 (???,???) [000669] Dc-----N----       t669 =    LCL_VAR_ADDR byref  V12 loc10         NA REG NA
                                                  /--*  t669   byref  
                                                  +--*  t274   struct 
N866 (  7,  5) [000277] sA----------              *  STORE_BLK struct<System.ConsoleKeyInfo, 12> (copy) (Unroll) REG NA
N868 (???,???) [000583] ------------                 IL_OFFSET void   IL offset: 0x1b9 REG NA
N870 (  3,  3) [000279] ------------       t279 =    LCL_VAR_ADDR byref  V12 loc10         rcx REG rcx
                                                  /--*  t279   byref  
N872 (???,???) [000670] ------------       t670 = *  PUTARG_REG byref  REG rcx
                                                  /--*  t670   byref  this in rcx
N874 ( 17, 10) [000280] --CXG-------       t280 = *  CALL      int    System.ConsoleKeyInfo.get_Key REG rax
                                                  /--*  t280   int    
N876 ( 21, 13) [000282] DA-XG-------              *  STORE_LCL_VAR int    V41 tmp23         NA REG NA
N878 (???,???) [000584] ------------                 IL_OFFSET void   IL offset: 0x1c0 REG NA
N880 (  3,  2) [000283] -c----------       t283 =    LCL_VAR   int    V41 tmp23         NA REG NA
N882 (  1,  1) [000284] -c----------       t284 =    CNS_INT   int    71 REG NA
                                                  /--*  t283   int    
                                                  +--*  t284   int    
N884 (  8,  4) [000285] ------------       t285 = *  EQ        int    REG rax
                                                  /--*  t285   int    
N886 ( 12,  7) [000287] DA----------              *  STORE_LCL_VAR int    V13 loc11         NA REG NA
N888 (???,???) [000585] ------------                 IL_OFFSET void   IL offset: 0x1c6 REG NA
N890 (  3,  2) [000288] -c----------       t288 =    LCL_VAR   int    V13 loc11         NA REG NA
N892 (  1,  1) [000289] -c----------       t289 =    CNS_INT   int    0 REG NA
                                                  /--*  t288   int    
                                                  +--*  t289   int    
N894 (  5,  4) [000290] J------N----              *  EQ        void   REG NA
N896 (  7,  6) [000291] ------------              *  JTRUE     void   REG NA

------------ BB31 [1CA..1D9) -> BB38 (always), preds={BB30} succs={BB38}
N900 (???,???) [000586] ------------                 IL_OFFSET void   IL offset: 0x1ca REG NA
N902 (  1,  1) [000354] ------------                 NO_OP     void   REG NA
N904 (???,???) [000587] ------------                 IL_OFFSET void   IL offset: 0x1cb REG NA
N906 ( 14,  5) [000355] --CXG-------       t355 =    CALL      int    System.GC.get_MaxGeneration REG rax
                                                  /--*  t355   int    
N908 ( 18,  8) [000357] DA-XG-------              *  STORE_LCL_VAR int    V45 tmp27         NA REG NA
N910 (???,???) [000588] ------------                 IL_OFFSET void   IL offset: 0x1d0 REG NA
N912 (  3,  2) [000358] ------------       t358 =    LCL_VAR   int    V45 tmp27         rcx REG rcx
                                                  /--*  t358   int    
N914 (???,???) [000671] ------------       t671 = *  PUTARG_REG int    REG rcx
                                                  /--*  t671   int    arg0 in rcx
N916 ( 17,  8) [000359] --CXG-------              *  CALL      void   System.GC.Collect REG NA
N918 (???,???) [000589] ------------                 IL_OFFSET void   IL offset: 0x1d5 REG NA
N920 (  1,  1) [000360] ------------                 NO_OP     void   REG NA
N922 (???,???) [000590] ------------                 IL_OFFSET void   IL offset: 0x1d6 REG NA
N924 (  1,  1) [000361] ------------                 NO_OP     void   REG NA
N926 (???,???) [000591] ------------                 IL_OFFSET void   IL offset: 0x1d7 REG NA
N928 (  0,  0) [000362] ------------                 NOP       void   REG NA

------------ BB32 [1D9..1EA) -> BB34 (cond), preds={BB30} succs={BB33,BB34}
N932 (???,???) [000592] ------------                 IL_OFFSET void   IL offset: 0x1d9 REG NA
N934 (  3,  3) [000293] ------------       t293 =    LCL_VAR_ADDR byref  V12 loc10         rcx REG rcx
                                                  /--*  t293   byref  
N936 (???,???) [000672] ------------       t672 = *  PUTARG_REG byref  REG rcx
                                                  /--*  t672   byref  this in rcx
N938 ( 17, 10) [000294] --CXG-------       t294 = *  CALL      int    System.ConsoleKeyInfo.get_Key REG rax
                                                  /--*  t294   int    
N940 ( 21, 13) [000296] DA-XG-------              *  STORE_LCL_VAR int    V42 tmp24         NA REG NA
N942 (???,???) [000593] ------------                 IL_OFFSET void   IL offset: 0x1e0 REG NA
N944 (  3,  2) [000297] -c----------       t297 =    LCL_VAR   int    V42 tmp24         NA REG NA
N946 (  1,  1) [000298] -c----------       t298 =    CNS_INT   int    72 REG NA
                                                  /--*  t297   int    
                                                  +--*  t298   int    
N948 (  8,  4) [000299] ------------       t299 = *  EQ        int    REG rax
                                                  /--*  t299   int    
N950 ( 12,  7) [000301] DA----------              *  STORE_LCL_VAR int    V14 loc12         NA REG NA
N952 (???,???) [000594] ------------                 IL_OFFSET void   IL offset: 0x1e6 REG NA
N954 (  3,  2) [000302] -c----------       t302 =    LCL_VAR   int    V14 loc12         NA REG NA
N956 (  1,  1) [000303] -c----------       t303 =    CNS_INT   int    0 REG NA
                                                  /--*  t302   int    
                                                  +--*  t303   int    
N958 (  5,  4) [000304] J------N----              *  EQ        void   REG NA
N960 (  7,  6) [000305] ------------              *  JTRUE     void   REG NA

------------ BB33 [1EA..1F4) -> BB38 (always), preds={BB32} succs={BB38}
N964 (???,???) [000595] ------------                 IL_OFFSET void   IL offset: 0x1ea REG NA
N966 (  1,  1) [000349] ------------                 NO_OP     void   REG NA
N968 (???,???) [000596] ------------                 IL_OFFSET void   IL offset: 0x1eb REG NA
N970 ( 14,  5) [000350] --CXG-------                 CALL      void   System.Diagnostics.Debugger.Break REG NA
N972 (???,???) [000597] ------------                 IL_OFFSET void   IL offset: 0x1f0 REG NA
N974 (  1,  1) [000351] ------------                 NO_OP     void   REG NA
N976 (???,???) [000598] ------------                 IL_OFFSET void   IL offset: 0x1f1 REG NA
N978 (  1,  1) [000352] ------------                 NO_OP     void   REG NA
N980 (???,???) [000599] ------------                 IL_OFFSET void   IL offset: 0x1f2 REG NA
N982 (  0,  0) [000353] ------------                 NOP       void   REG NA

------------ BB34 [1F4..205) -> BB36 (cond), preds={BB32} succs={BB35,BB36}
N986 (???,???) [000600] ------------                 IL_OFFSET void   IL offset: 0x1f4 REG NA
N988 (  3,  3) [000307] ------------       t307 =    LCL_VAR_ADDR byref  V12 loc10         rcx REG rcx
                                                  /--*  t307   byref  
N990 (???,???) [000673] ------------       t673 = *  PUTARG_REG byref  REG rcx
                                                  /--*  t673   byref  this in rcx
N992 ( 17, 10) [000308] --CXG-------       t308 = *  CALL      int    System.ConsoleKeyInfo.get_Key REG rax
                                                  /--*  t308   int    
N994 ( 21, 13) [000310] DA-XG-------              *  STORE_LCL_VAR int    V43 tmp25         NA REG NA
N996 (???,???) [000601] ------------                 IL_OFFSET void   IL offset: 0x1fb REG NA
N998 (  3,  2) [000311] -c----------       t311 =    LCL_VAR   int    V43 tmp25         NA REG NA
N1000 (  1,  1) [000312] -c----------       t312 =    CNS_INT   int    82 REG NA
                                                  /--*  t311   int    
                                                  +--*  t312   int    
N1002 (  8,  4) [000313] ------------       t313 = *  EQ        int    REG rcx
                                                  /--*  t313   int    
N1004 ( 12,  7) [000315] DA----------              *  STORE_LCL_VAR int    V15 loc13         NA REG NA
N1006 (???,???) [000602] ------------                 IL_OFFSET void   IL offset: 0x201 REG NA
N1008 (  3,  2) [000316] -c----------       t316 =    LCL_VAR   int    V15 loc13         NA REG NA
N1010 (  1,  1) [000317] -c----------       t317 =    CNS_INT   int    0 REG NA
                                                  /--*  t316   int    
                                                  +--*  t317   int    
N1012 (  5,  4) [000318] J------N----              *  EQ        void   REG NA
N1014 (  7,  6) [000319] ------------              *  JTRUE     void   REG NA

------------ BB35 [205..210) -> BB38 (always), preds={BB34} succs={BB38}
N1018 (???,???) [000603] ------------                 IL_OFFSET void   IL offset: 0x205 REG NA
N1020 (  1,  1) [000342] ------------                 NO_OP     void   REG NA
N1022 (???,???) [000604] ------------                 IL_OFFSET void   IL offset: 0x206 REG NA
N1024 (  3,  2) [000343] ------------       t343 =    LCL_VAR   ref    V00 this          rcx REG rcx
                                                  /--*  t343   ref    
N1026 (  4,  3) [000489] -c----------       t489 = *  LEA(b+16) byref  REG NA
N1028 (  1,  1) [000344] -c----------       t344 =    CNS_INT   int    0 REG NA
                                                  /--*  t489   byref  
                                                  +--*  t344   int    
N1030 (???,???) [000605] -A-XG-------              *  STOREIND  bool   REG NA
N1032 (???,???) [000606] ------------                 IL_OFFSET void   IL offset: 0x20d REG NA
N1034 (  1,  1) [000347] ------------                 NO_OP     void   REG NA
N1036 (???,???) [000607] ------------                 IL_OFFSET void   IL offset: 0x20e REG NA
N1038 (  0,  0) [000348] ------------                 NOP       void   REG NA

------------ BB36 [210..221) -> BB38 (cond), preds={BB34} succs={BB37,BB38}
N1042 (???,???) [000608] ------------                 IL_OFFSET void   IL offset: 0x210 REG NA
N1044 (  3,  3) [000321] ------------       t321 =    LCL_VAR_ADDR byref  V12 loc10         rcx REG rcx
                                                  /--*  t321   byref  
N1046 (???,???) [000674] ------------       t674 = *  PUTARG_REG byref  REG rcx
                                                  /--*  t674   byref  this in rcx
N1048 ( 17, 10) [000322] --CXG-------       t322 = *  CALL      int    System.ConsoleKeyInfo.get_Key REG rax
                                                  /--*  t322   int    
N1050 ( 21, 13) [000324] DA-XG-------              *  STORE_LCL_VAR int    V44 tmp26         NA REG NA
N1052 (???,???) [000609] ------------                 IL_OFFSET void   IL offset: 0x217 REG NA
N1054 (  3,  2) [000325] -c----------       t325 =    LCL_VAR   int    V44 tmp26         NA REG NA
N1056 (  1,  1) [000326] -c----------       t326 =    CNS_INT   int    81 REG NA
                                                  /--*  t325   int    
                                                  +--*  t326   int    
N1058 (  8,  4) [000327] ------------       t327 = *  EQ        int    REG rax
                                                  /--*  t327   int    
N1060 ( 12,  7) [000329] DA----------              *  STORE_LCL_VAR int    V16 loc14         NA REG NA
N1062 (???,???) [000610] ------------                 IL_OFFSET void   IL offset: 0x21d REG NA
N1064 (  3,  2) [000330] -c----------       t330 =    LCL_VAR   int    V16 loc14         NA REG NA
N1066 (  1,  1) [000331] -c----------       t331 =    CNS_INT   int    0 REG NA
                                                  /--*  t330   int    
                                                  +--*  t331   int    
N1068 (  5,  4) [000332] J------N----              *  EQ        void   REG NA
N1070 (  7,  6) [000333] ------------              *  JTRUE     void   REG NA

------------ BB37 [221..224) -> BB40 (always), preds={BB36} succs={BB40}
N1074 (???,???) [000611] ------------                 IL_OFFSET void   IL offset: 0x221 REG NA
N1076 (  1,  1) [000335] ------------                 NO_OP     void   REG NA
N1078 (???,???) [000612] ------------                 IL_OFFSET void   IL offset: 0x222 REG NA
N1080 (  0,  0) [000336] ------------                 NOP       void   REG NA

------------ BB38 [224..225), preds={BB31,BB33,BB35,BB36} succs={BB39}
N1084 (???,???) [000613] ------------                 IL_OFFSET void   IL offset: 0x224 REG NA
N1086 (  1,  1) [000334] ------------                 NO_OP     void   REG NA

------------ BB39 [225..22A) -> BB30 (always), preds={BB29,BB38} succs={BB30}
N836 (???,???) [000614] ------------                 IL_OFFSET void   IL offset: 0x225 REG NA
N838 (  1,  1) [000266] -c----------       t266 =    CNS_INT   int    1 REG NA
                                                  /--*  t266   int    
N840 (  5,  4) [000268] DA----------              *  STORE_LCL_VAR int    V17 loc15         NA REG NA
N842 (???,???) [000615] ------------                 IL_OFFSET void   IL offset: 0x228 REG NA
N844 (  0,  0) [000269] ------------                 NOP       void   REG NA

------------ BB40 [22A..232) (return), preds={BB37} succs={}
N1090 (???,???) [000616] ------------                 IL_OFFSET void   IL offset: 0x22a REG NA
N1092 (  3,  2) [000337] ------------       t337 =    LCL_VAR   ref    V00 this          rax REG rax
                                                  /--*  t337   ref    
N1094 (  4,  3) [000493] -c----------       t493 = *  LEA(b+16) byref  REG NA
N1096 (  1,  1) [000338] -c----------       t338 =    CNS_INT   int    0 REG NA
                                                  /--*  t493   byref  
                                                  +--*  t338   int    
N1098 (???,???) [000617] -A-XG-------              *  STOREIND  bool   REG NA
N1100 (???,???) [000618] ------------                 IL_OFFSET void   IL offset: 0x231 REG NA
N1102 (  0,  0) [000341] ------------                 RETURN    void   REG NA

------------ BB10 [0D5..0D9) -> BB12 (cond), preds={BB08} succs={BB11,BB12}
N444 (???,???) [000619] ------------                 IL_OFFSET void   IL offset: 0xd5 REG NA
N446 (  3,  2) [000163] ------------       t163 =    LCL_VAR   int   (AX) V06 loc4          rcx REG rcx
                                                  /--*  t163   int    
N448 (  4,  4) [000441] ----G-------       t441 = *  CAST      int <- bool <- int REG rcx
N450 (  1,  1) [000164] -c----------       t164 =    CNS_INT   int    0 REG NA
                                                  /--*  t441   int    
                                                  +--*  t164   int    
N452 (  6,  6) [000165] J---G--N----              *  EQ        void   REG NA
N454 (  8,  8) [000166] ----G-------              *  JTRUE     void   REG NA

------------ BB11 [0D9..0E0), preds={BB10} succs={BB12}
N458 (???,???) [000620] ------------                 IL_OFFSET void   IL offset: 0xd9 REG NA
N460 (  3,  2) [000168] ------------       t168 =    LCL_VAR   ref    V05 loc3          rcx REG rcx
                                                  /--*  t168   ref    
N462 (???,???) [000675] ------------       t675 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t675   ref    arg0 in rcx
N464 ( 17,  8) [000169] --CXG-------              *  CALL      void   System.Threading.Monitor.Exit REG NA
N466 (???,???) [000621] ------------                 IL_OFFSET void   IL offset: 0xdf REG NA
N468 (  1,  1) [000170] ------------                 NO_OP     void   REG NA

------------ BB12 [0E0..0E1) (finret), preds={BB10,BB11} succs={BB09}
N472 (???,???) [000622] ------------                 IL_OFFSET void   IL offset: 0xe0 REG NA
N474 (  0,  0) [000167] ------------                 RETFILT   void   REG NA

------------ BB24 [14B..14F) -> BB26 (cond), preds={BB20,BB22} succs={BB25,BB26}
N668 (???,???) [000623] ------------                 IL_OFFSET void   IL offset: 0x14b REG NA
N670 (  3,  2) [000363] ------------       t363 =    LCL_VAR   int   (AX) V09 loc7          rcx REG rcx
                                                  /--*  t363   int    
N672 (  4,  4) [000461] ----G-------       t461 = *  CAST      int <- bool <- int REG rcx
N674 (  1,  1) [000364] -c----------       t364 =    CNS_INT   int    0 REG NA
                                                  /--*  t461   int    
                                                  +--*  t364   int    
N676 (  6,  6) [000365] J---G--N----              *  EQ        void   REG NA
N678 (  8,  8) [000366] ----G-------              *  JTRUE     void   REG NA

------------ BB25 [14F..157), preds={BB24} succs={BB26}
N682 (???,???) [000624] ------------                 IL_OFFSET void   IL offset: 0x14f REG NA
N684 (  3,  2) [000368] ------------       t368 =    LCL_VAR   ref    V08 loc6          rcx REG rcx
                                                  /--*  t368   ref    
N686 (???,???) [000676] ------------       t676 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t676   ref    arg0 in rcx
N688 ( 17,  8) [000369] --CXG-------              *  CALL      void   System.Threading.Monitor.Exit REG NA
N690 (???,???) [000625] ------------                 IL_OFFSET void   IL offset: 0x156 REG NA
N692 (  1,  1) [000370] ------------                 NO_OP     void   REG NA

------------ BB26 [157..158) (finret), preds={BB24,BB25} succs={BB21,BB23}
N696 (???,???) [000626] ------------                 IL_OFFSET void   IL offset: 0x157 REG NA
N698 (  0,  0) [000367] ------------                 RETFILT   void   REG NA

-------------------------------------------------------------------------------------------------------------------

Final allocation
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc  RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
   0.#0   BB1  PredBB0               |     |     |     |     |     |     |     |     |     |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc  RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
   4.#1   BB2  PredBB1               |     |     |     |     |     |     |     |     |     |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc  RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
  16.#2   BB3  PredBB2               |     |     |     |     |     |     |     |     |     |
  19.#3   rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
  19.#4   rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
  19.#5   rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
  19.#6   r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
  19.#7   r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
  19.#8   r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
  19.#9   r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc  RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
  20.#10  BB4  PredBB2               |     |     |     |     |     |     |     |     |     |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc  RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
  22.#11  BB5  PredBB4               |     |     |     |     |     |     |     |     |     |
  31.#12  rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
  31.#13  rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
  31.#14  rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
  31.#15  r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
  31.#16  r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
  31.#17  r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
  31.#18  r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
  31.#19  rax   Fixd   Keep     rax  |     |     |     |     |     |     |     |     |     |
  31.#20  I0    Def    Alloc    rax  |I0  a|     |     |     |     |     |     |     |     |
  32.#21  I0    Use *  Keep     rax  |I0  i|     |     |     |     |     |     |     |     |
  37.#22  I1    Def    Alloc    rcx  |     |I1  a|     |     |     |     |     |     |     |
  38.#23  I1    Use *  Keep     rcx  |     |I1  i|     |     |     |     |     |     |     |
  43.#24  I2    Def    Alloc    rcx  |     |I2  a|     |     |     |     |     |     |     |
  44.#25  rcx   Fixd   Keep     rcx  |     |I2  a|     |     |     |     |     |     |     |
  44.#26  I2    Use *  Keep     rcx  |     |I2  i|     |     |     |     |     |     |     |
  45.#27  rcx   Fixd   Keep     rcx  |     |     |     |     |     |     |     |     |     |
  45.#28  I3    Def    Alloc    rcx  |     |I3  a|     |     |     |     |     |     |     |
  46.#29  rcx   Fixd   Keep     rcx  |     |I3  a|     |     |     |     |     |     |     |
  46.#30  I3    Use *  Keep     rcx  |     |I3  i|     |     |     |     |     |     |     |
  47.#31  rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
  47.#32  rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
  47.#33  rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
  47.#34  r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
  47.#35  r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
  47.#36  r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
  47.#37  r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
  47.#38  rax   Fixd   Keep     rax  |     |     |     |     |     |     |     |     |     |
  47.#39  I4    Def    Alloc    rax  |I4  a|     |     |     |     |     |     |     |     |
  48.#40  I4    Use *  Keep     rax  |I4  i|     |     |     |     |     |     |     |     |
  53.#41  C5    Def    Alloc    rdx  |     |     |C5  a|     |     |     |     |     |     |
  54.#42  C5    Use *  Keep     rdx  |     |     |C5  i|     |     |     |     |     |     |
  55.#43  I6    Def    Alloc    rdx  |     |     |I6  a|     |     |     |     |     |     |
  56.#44  rdx   Fixd   Keep     rdx  |     |     |I6  a|     |     |     |     |     |     |
  56.#45  I6    Use *  Keep     rdx  |     |     |I6  i|     |     |     |     |     |     |
  57.#46  rdx   Fixd   Keep     rdx  |     |     |     |     |     |     |     |     |     |
  57.#47  I7    Def    Alloc    rdx  |     |     |I7  a|     |     |     |     |     |     |
  59.#48  I8    Def    Alloc    rcx  |     |I8  a|I7  a|     |     |     |     |     |     |
  60.#49  rcx   Fixd   Keep     rcx  |     |I8  a|I7  a|     |     |     |     |     |     |
  60.#50  I8    Use *  Keep     rcx  |     |I8  i|I7  a|     |     |     |     |     |     |
  61.#51  rcx   Fixd   Keep     rcx  |     |     |I7  a|     |     |     |     |     |     |
  61.#52  I9    Def    Alloc    rcx  |     |I9  a|I7  a|     |     |     |     |     |     |
  62.#53  rdx   Fixd   Keep     rdx  |     |I9  a|I7  a|     |     |     |     |     |     |
  62.#54  I7    Use *  Keep     rdx  |     |I9  a|I7  i|     |     |     |     |     |     |
  62.#55  rcx   Fixd   Keep     rcx  |     |I9  a|     |     |     |     |     |     |     |
  62.#56  I9    Use *  Keep     rcx  |     |I9  i|     |     |     |     |     |     |     |
  63.#57  rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
  63.#58  rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
  63.#59  rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
  63.#60  r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
  63.#61  r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
  63.#62  r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
  63.#63  r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
  63.#64  rax   Fixd   Keep     rax  |     |     |     |     |     |     |     |     |     |
  63.#65  I10   Def    Alloc    rax  |I10 a|     |     |     |     |     |     |     |     |
  64.#66  I10   Use *  Keep     rax  |I10 i|     |     |     |     |     |     |     |     |
  69.#67  I11   Def    Alloc    rcx  |     |I11 a|     |     |     |     |     |     |     |
  70.#68  rcx   Fixd   Keep     rcx  |     |I11 a|     |     |     |     |     |     |     |
  70.#69  I11   Use *  Keep     rcx  |     |I11 i|     |     |     |     |     |     |     |
  71.#70  rcx   Fixd   Keep     rcx  |     |     |     |     |     |     |     |     |     |
  71.#71  I12   Def    Alloc    rcx  |     |I12 a|     |     |     |     |     |     |     |
  72.#72  rcx   Fixd   Keep     rcx  |     |I12 a|     |     |     |     |     |     |     |
  72.#73  I12   Use *  Keep     rcx  |     |I12 i|     |     |     |     |     |     |     |
  73.#74  rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
  73.#75  rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
  73.#76  rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
  73.#77  r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
  73.#78  r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
  73.#79  r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
  73.#80  r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
  81.#81  C13   Def    Alloc    rcx  |     |C13 a|     |     |     |     |     |     |     |
  82.#82  rcx   Fixd   Keep     rcx  |     |C13 a|     |     |     |     |     |     |     |
  82.#83  C13   Use *  Keep     rcx  |     |C13 i|     |     |     |     |     |     |     |
  83.#84  rcx   Fixd   Keep     rcx  |     |     |     |     |     |     |     |     |     |
  83.#85  I14   Def    Alloc    rcx  |     |I14 a|     |     |     |     |     |     |     |
  84.#86  rcx   Fixd   Keep     rcx  |     |I14 a|     |     |     |     |     |     |     |
  84.#87  I14   Use *  Keep     rcx  |     |I14 i|     |     |     |     |     |     |     |
  85.#88  rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
  85.#89  rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
  85.#90  rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
  85.#91  r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
  85.#92  r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
  85.#93  r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
  85.#94  r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
  85.#95  rax   Fixd   Keep     rax  |     |     |     |     |     |     |     |     |     |
  85.#96  I15   Def    Alloc    rax  |I15 a|     |     |     |     |     |     |     |     |
  86.#97  I15   Use *  Keep     rax  |I15 i|     |     |     |     |     |     |     |     |
  89.#98  I16   Def    Alloc    rcx  |     |I16 a|     |     |     |     |     |     |     |
  90.#99  rcx   Fixd   Keep     rcx  |     |I16 a|     |     |     |     |     |     |     |
  90.#100 I16   Use *  Keep     rcx  |     |I16 i|     |     |     |     |     |     |     |
  91.#101 rcx   Fixd   Keep     rcx  |     |     |     |     |     |     |     |     |     |
  91.#102 I17   Def    Alloc    rcx  |     |I17 a|     |     |     |     |     |     |     |
  92.#103 rcx   Fixd   Keep     rcx  |     |I17 a|     |     |     |     |     |     |     |
  92.#104 I17   Use *  Keep     rcx  |     |I17 i|     |     |     |     |     |     |     |
  93.#105 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
  93.#106 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
  93.#107 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
  93.#108 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
  93.#109 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
  93.#110 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
  93.#111 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
  97.#112 I18   Def    Alloc    rdx  |     |     |I18 a|     |     |     |     |     |     |
  98.#113 I18   Use *  Keep     rdx  |     |     |I18 i|     |     |     |     |     |     |
  99.#114 I19   Def    Alloc    rcx  |     |I19 a|     |     |     |     |     |     |     |
 101.#115 I20   Def    Alloc    rdx  |     |I19 a|I20 a|     |     |     |     |     |     |
 102.#116 rcx   Fixd   Keep     rcx  |     |I19 a|I20 a|     |     |     |     |     |     |
 102.#117 I19   Use *  Keep     rcx  |     |I19 i|I20 a|     |     |     |     |     |     |
 102.#118 rdx   Fixd   Keep     rdx  |     |     |I20 a|     |     |     |     |     |     |
 102.#119 I20   Use *  Keep     rdx  |     |     |I20 i|     |     |     |     |     |     |
 103.#120 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
 103.#121 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 103.#122 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
 103.#123 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
 103.#124 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
 103.#125 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
 103.#126 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
 103.#127 mm0   Kill   Keep     mm0  |     |     |     |     |     |     |     |     |     |
 103.#128 mm1   Kill   Keep     mm1  |     |     |     |     |     |     |     |     |     |
 103.#129 mm2   Kill   Keep     mm2  |     |     |     |     |     |     |     |     |     |
 103.#130 mm3   Kill   Keep     mm3  |     |     |     |     |     |     |     |     |     |
 103.#131 mm4   Kill   Keep     mm4  |     |     |     |     |     |     |     |     |     |
 103.#132 mm5   Kill   Keep     mm5  |     |     |     |     |     |     |     |     |     |
 107.#133 C21   Def    Alloc    rcx  |     |C21 a|     |     |     |     |     |     |     |
 108.#134 rcx   Fixd   Keep     rcx  |     |C21 a|     |     |     |     |     |     |     |
 108.#135 C21   Use *  Keep     rcx  |     |C21 i|     |     |     |     |     |     |     |
 109.#136 rcx   Fixd   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 109.#137 I22   Def    Alloc    rcx  |     |I22 a|     |     |     |     |     |     |     |
 110.#138 rcx   Fixd   Keep     rcx  |     |I22 a|     |     |     |     |     |     |     |
 110.#139 I22   Use *  Keep     rcx  |     |I22 i|     |     |     |     |     |     |     |
 111.#140 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
 111.#141 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 111.#142 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
 111.#143 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
 111.#144 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
 111.#145 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
 111.#146 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
 111.#147 rax   Fixd   Keep     rax  |     |     |     |     |     |     |     |     |     |
 111.#148 I23   Def    Alloc    rax  |I23 a|     |     |     |     |     |     |     |     |
 112.#149 I23   Use *  Keep     rax  |I23 i|     |     |     |     |     |     |     |     |
 115.#150 I24   Def    Alloc    rcx  |     |I24 a|     |     |     |     |     |     |     |
 118.#151 I24   Use *  Keep     rcx  |     |I24 i|     |     |     |     |     |     |     |
 119.#152 I25   Def    Alloc    rcx  |     |I25 a|     |     |     |     |     |     |     |
 122.#153 I25   Use *  Keep     rcx  |     |I25 i|     |     |     |     |     |     |     |
 123.#154 I26   Def    Alloc    rcx  |     |I26 a|     |     |     |     |     |     |     |
 124.#155 I26   Use *  Keep     rcx  |     |I26 i|     |     |     |     |     |     |     |
 127.#156 I27   Def    Alloc    rcx  |     |I27 a|     |     |     |     |     |     |     |
 128.#157 rcx   Fixd   Keep     rcx  |     |I27 a|     |     |     |     |     |     |     |
 128.#158 I27   Use *  Keep     rcx  |     |I27 i|     |     |     |     |     |     |     |
 129.#159 rcx   Fixd   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 129.#160 I28   Def    Alloc    rcx  |     |I28 a|     |     |     |     |     |     |     |
 130.#161 rcx   Fixd   Keep     rcx  |     |I28 a|     |     |     |     |     |     |     |
 130.#162 I28   Use *  Keep     rcx  |     |I28 i|     |     |     |     |     |     |     |
 131.#163 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
 131.#164 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 131.#165 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
 131.#166 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
 131.#167 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
 131.#168 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
 131.#169 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
 135.#170 I29   Def    Alloc    rdx  |     |     |I29 a|     |     |     |     |     |     |
 136.#171 I29   Use *  Keep     rdx  |     |     |I29 i|     |     |     |     |     |     |
 137.#172 I30   Def    Alloc    rcx  |     |I30 a|     |     |     |     |     |     |     |
 139.#173 I31   Def    Alloc    rdx  |     |I30 a|I31 a|     |     |     |     |     |     |
 140.#174 rcx   Fixd   Keep     rcx  |     |I30 a|I31 a|     |     |     |     |     |     |
 140.#175 I30   Use *  Keep     rcx  |     |I30 i|I31 a|     |     |     |     |     |     |
 140.#176 rdx   Fixd   Keep     rdx  |     |     |I31 a|     |     |     |     |     |     |
 140.#177 I31   Use *  Keep     rdx  |     |     |I31 i|     |     |     |     |     |     |
 141.#178 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
 141.#179 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 141.#180 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
 141.#181 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
 141.#182 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
 141.#183 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
 141.#184 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
 141.#185 mm0   Kill   Keep     mm0  |     |     |     |     |     |     |     |     |     |
 141.#186 mm1   Kill   Keep     mm1  |     |     |     |     |     |     |     |     |     |
 141.#187 mm2   Kill   Keep     mm2  |     |     |     |     |     |     |     |     |     |
 141.#188 mm3   Kill   Keep     mm3  |     |     |     |     |     |     |     |     |     |
 141.#189 mm4   Kill   Keep     mm4  |     |     |     |     |     |     |     |     |     |
 141.#190 mm5   Kill   Keep     mm5  |     |     |     |     |     |     |     |     |     |
 145.#191 C32   Def    Alloc    rcx  |     |C32 a|     |     |     |     |     |     |     |
 146.#192 rcx   Fixd   Keep     rcx  |     |C32 a|     |     |     |     |     |     |     |
 146.#193 C32   Use *  Keep     rcx  |     |C32 i|     |     |     |     |     |     |     |
 147.#194 rcx   Fixd   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 147.#195 I33   Def    Alloc    rcx  |     |I33 a|     |     |     |     |     |     |     |
 148.#196 rcx   Fixd   Keep     rcx  |     |I33 a|     |     |     |     |     |     |     |
 148.#197 I33   Use *  Keep     rcx  |     |I33 i|     |     |     |     |     |     |     |
 149.#198 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
 149.#199 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 149.#200 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
 149.#201 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
 149.#202 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
 149.#203 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
 149.#204 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
 149.#205 rax   Fixd   Keep     rax  |     |     |     |     |     |     |     |     |     |
 149.#206 I34   Def    Alloc    rax  |I34 a|     |     |     |     |     |     |     |     |
 150.#207 I34   Use *  Keep     rax  |I34 i|     |     |     |     |     |     |     |     |
 153.#208 I35   Def    Alloc    rcx  |     |I35 a|     |     |     |     |     |     |     |
 154.#209 rcx   Fixd   Keep     rcx  |     |I35 a|     |     |     |     |     |     |     |
 154.#210 I35   Use *  Keep     rcx  |     |I35 i|     |     |     |     |     |     |     |
 155.#211 rcx   Fixd   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 155.#212 I36   Def    Alloc    rcx  |     |I36 a|     |     |     |     |     |     |     |
 157.#213 I37   Def    Alloc    rdx  |     |I36 a|I37 a|     |     |     |     |     |     |
 158.#214 rdx   Fixd   Keep     rdx  |     |I36 a|I37 a|     |     |     |     |     |     |
 158.#215 I37   Use *  Keep     rdx  |     |I36 a|I37 i|     |     |     |     |     |     |
 159.#216 rdx   Fixd   Keep     rdx  |     |I36 a|     |     |     |     |     |     |     |
 159.#217 I38   Def    Alloc    rdx  |     |I36 a|I38 a|     |     |     |     |     |     |
 161.#218 C39   Def    Alloc    r8   |     |I36 a|I38 a|     |     |     |     |C39 a|     |
 162.#219 r8    Fixd   Keep     r8   |     |I36 a|I38 a|     |     |     |     |C39 a|     |
 162.#220 C39   Use *  Keep     r8   |     |I36 a|I38 a|     |     |     |     |C39 i|     |
 163.#221 r8    Fixd   Keep     r8   |     |I36 a|I38 a|     |     |     |     |     |     |
 163.#222 I40   Def    Alloc    r8   |     |I36 a|I38 a|     |     |     |     |I40 a|     |
 164.#223 rcx   Fixd   Keep     rcx  |     |I36 a|I38 a|     |     |     |     |I40 a|     |
 164.#224 I36   Use *  Keep     rcx  |     |I36 i|I38 a|     |     |     |     |I40 a|     |
 164.#225 rdx   Fixd   Keep     rdx  |     |     |I38 a|     |     |     |     |I40 a|     |
 164.#226 I38   Use *  Keep     rdx  |     |     |I38 i|     |     |     |     |I40 a|     |
 164.#227 r8    Fixd   Keep     r8   |     |     |     |     |     |     |     |I40 a|     |
 164.#228 I40   Use *  Keep     r8   |     |     |     |     |     |     |     |I40 i|     |
 165.#229 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
 165.#230 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 165.#231 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
 165.#232 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
 165.#233 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
 165.#234 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
 165.#235 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
 169.#236 C41   Def    Alloc    rcx  |     |C41 a|     |     |     |     |     |     |     |
 170.#237 rcx   Fixd   Keep     rcx  |     |C41 a|     |     |     |     |     |     |     |
 170.#238 C41   Use *  Keep     rcx  |     |C41 i|     |     |     |     |     |     |     |
 171.#239 rcx   Fixd   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 171.#240 I42   Def    Alloc    rcx  |     |I42 a|     |     |     |     |     |     |     |
 172.#241 rcx   Fixd   Keep     rcx  |     |I42 a|     |     |     |     |     |     |     |
 172.#242 I42   Use *  Keep     rcx  |     |I42 i|     |     |     |     |     |     |     |
 173.#243 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
 173.#244 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 173.#245 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
 173.#246 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
 173.#247 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
 173.#248 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
 173.#249 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
 173.#250 rax   Fixd   Keep     rax  |     |     |     |     |     |     |     |     |     |
 173.#251 I43   Def    Alloc    rax  |I43 a|     |     |     |     |     |     |     |     |
 174.#252 I43   Use *  Keep     rax  |I43 i|     |     |     |     |     |     |     |     |
 177.#253 I44   Def    Alloc    rcx  |     |I44 a|     |     |     |     |     |     |     |
 178.#254 rcx   Fixd   Keep     rcx  |     |I44 a|     |     |     |     |     |     |     |
 178.#255 I44   Use *  Keep     rcx  |     |I44 i|     |     |     |     |     |     |     |
 179.#256 rcx   Fixd   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 179.#257 I45   Def    Alloc    rcx  |     |I45 a|     |     |     |     |     |     |     |
 181.#258 I46   Def    Alloc    rdx  |     |I45 a|I46 a|     |     |     |     |     |     |
 182.#259 rdx   Fixd   Keep     rdx  |     |I45 a|I46 a|     |     |     |     |     |     |
 182.#260 I46   Use *  Keep     rdx  |     |I45 a|I46 i|     |     |     |     |     |     |
 183.#261 rdx   Fixd   Keep     rdx  |     |I45 a|     |     |     |     |     |     |     |
 183.#262 I47   Def    Alloc    rdx  |     |I45 a|I47 a|     |     |     |     |     |     |
 184.#263 rcx   Fixd   Keep     rcx  |     |I45 a|I47 a|     |     |     |     |     |     |
 184.#264 I45   Use *  Keep     rcx  |     |I45 i|I47 a|     |     |     |     |     |     |
 184.#265 rdx   Fixd   Keep     rdx  |     |     |I47 a|     |     |     |     |     |     |
 184.#266 I47   Use *  Keep     rdx  |     |     |I47 i|     |     |     |     |     |     |
 185.#267 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
 185.#268 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 185.#269 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
 185.#270 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
 185.#271 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
 185.#272 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
 185.#273 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
 189.#274 I48   Def    Alloc    rcx  |     |I48 a|     |     |     |     |     |     |     |
 190.#275 I48   Use *  Keep     rcx  |     |I48 i|     |     |     |     |     |     |     |
 195.#276 I49   Def    Alloc    rcx  |     |I49 a|     |     |     |     |     |     |     |
 196.#277 rcx   Fixd   Keep     rcx  |     |I49 a|     |     |     |     |     |     |     |
 196.#278 I49   Use *  Keep     rcx  |     |I49 i|     |     |     |     |     |     |     |
 197.#279 rcx   Fixd   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 197.#280 I50   Def    Alloc    rcx  |     |I50 a|     |     |     |     |     |     |     |
 198.#281 rcx   Fixd   Keep     rcx  |     |I50 a|     |     |     |     |     |     |     |
 198.#282 I50   Use *  Keep     rcx  |     |I50 i|     |     |     |     |     |     |     |
 199.#283 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
 199.#284 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 199.#285 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
 199.#286 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
 199.#287 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
 199.#288 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
 199.#289 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
 207.#290 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
 207.#291 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 207.#292 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
 207.#293 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
 207.#294 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
 207.#295 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
 207.#296 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
 207.#297 rax   Fixd   Keep     rax  |     |     |     |     |     |     |     |     |     |
 207.#298 I51   Def    Alloc    rax  |I51 a|     |     |     |     |     |     |     |     |
 208.#299 I51   Use *  Keep     rax  |I51 i|     |     |     |     |     |     |     |     |
 213.#300 I52   Def    Alloc    rcx  |     |I52 a|     |     |     |     |     |     |     |
 214.#301 I52   Use *  Keep     rcx  |     |I52 i|     |     |     |     |     |     |     |
 219.#302 I53   Def    Alloc    rcx  |     |I53 a|     |     |     |     |     |     |     |
 220.#303 rcx   Fixd   Keep     rcx  |     |I53 a|     |     |     |     |     |     |     |
 220.#304 I53   Use *  Keep     rcx  |     |I53 i|     |     |     |     |     |     |     |
 221.#305 rcx   Fixd   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 221.#306 I54   Def    Alloc    rcx  |     |I54 a|     |     |     |     |     |     |     |
 222.#307 rcx   Fixd   Keep     rcx  |     |I54 a|     |     |     |     |     |     |     |
 222.#308 I54   Use *  Keep     rcx  |     |I54 i|     |     |     |     |     |     |     |
 223.#309 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
 223.#310 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 223.#311 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
 223.#312 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
 223.#313 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
 223.#314 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
 223.#315 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
 223.#316 rax   Fixd   Keep     rax  |     |     |     |     |     |     |     |     |     |
 223.#317 I55   Def    Alloc    rax  |I55 a|     |     |     |     |     |     |     |     |
 224.#318 I55   Use *  Keep     rax  |I55 i|     |     |     |     |     |     |     |     |
 229.#319 C56   Def    Alloc    rdx  |     |     |C56 a|     |     |     |     |     |     |
 230.#320 C56   Use *  Keep     rdx  |     |     |C56 i|     |     |     |     |     |     |
 231.#321 I57   Def    Alloc    rdx  |     |     |I57 a|     |     |     |     |     |     |
 232.#322 rdx   Fixd   Keep     rdx  |     |     |I57 a|     |     |     |     |     |     |
 232.#323 I57   Use *  Keep     rdx  |     |     |I57 i|     |     |     |     |     |     |
 233.#324 rdx   Fixd   Keep     rdx  |     |     |     |     |     |     |     |     |     |
 233.#325 I58   Def    Alloc    rdx  |     |     |I58 a|     |     |     |     |     |     |
 235.#326 I59   Def    Alloc    rcx  |     |I59 a|I58 a|     |     |     |     |     |     |
 236.#327 rcx   Fixd   Keep     rcx  |     |I59 a|I58 a|     |     |     |     |     |     |
 236.#328 I59   Use *  Keep     rcx  |     |I59 i|I58 a|     |     |     |     |     |     |
 237.#329 rcx   Fixd   Keep     rcx  |     |     |I58 a|     |     |     |     |     |     |
 237.#330 I60   Def    Alloc    rcx  |     |I60 a|I58 a|     |     |     |     |     |     |
 238.#331 rdx   Fixd   Keep     rdx  |     |I60 a|I58 a|     |     |     |     |     |     |
 238.#332 I58   Use *  Keep     rdx  |     |I60 a|I58 i|     |     |     |     |     |     |
 238.#333 rcx   Fixd   Keep     rcx  |     |I60 a|     |     |     |     |     |     |     |
 238.#334 I60   Use *  Keep     rcx  |     |I60 i|     |     |     |     |     |     |     |
 239.#335 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
 239.#336 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 239.#337 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
 239.#338 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
 239.#339 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
 239.#340 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
 239.#341 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
 239.#342 rax   Fixd   Keep     rax  |     |     |     |     |     |     |     |     |     |
 239.#343 I61   Def    Alloc    rax  |I61 a|     |     |     |     |     |     |     |     |
 240.#344 I61   Use *  Keep     rax  |I61 i|     |     |     |     |     |     |     |     |
 245.#345 I62   Def    Alloc    rcx  |     |I62 a|     |     |     |     |     |     |     |
 246.#346 rcx   Fixd   Keep     rcx  |     |I62 a|     |     |     |     |     |     |     |
 246.#347 I62   Use *  Keep     rcx  |     |I62 i|     |     |     |     |     |     |     |
 247.#348 rcx   Fixd   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 247.#349 I63   Def    Alloc    rcx  |     |I63 a|     |     |     |     |     |     |     |
 248.#350 rcx   Fixd   Keep     rcx  |     |I63 a|     |     |     |     |     |     |     |
 248.#351 I63   Use *  Keep     rcx  |     |I63 i|     |     |     |     |     |     |     |
 249.#352 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
 249.#353 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 249.#354 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
 249.#355 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
 249.#356 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
 249.#357 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
 249.#358 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
 257.#359 C64   Def    Alloc    rdx  |     |     |C64 a|     |     |     |     |     |     |
 258.#360 C64   Use *  Keep     rdx  |     |     |C64 i|     |     |     |     |     |     |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc  RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
 264.#361 BB14 PredBB5               |     |     |     |     |     |     |     |     |     |
 273.#362 I65   Def    Alloc    rdx  |     |     |I65 a|     |     |     |     |     |     |
 274.#363 I65   Use *  Keep     rdx  |     |     |I65 i|     |     |     |     |     |     |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc  RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
 286.#364 BB6  PredBB14              |     |     |     |     |     |     |     |     |     |
 295.#365 I66   Def    Alloc    rdx  |     |     |I66 a|     |     |     |     |     |     |
 298.#366 I66   Use *  Keep     rdx  |     |     |I66 i|     |     |     |     |     |     |
 299.#367 I67   Def    Alloc    rdx  |     |     |I67 a|     |     |     |     |     |     |
 300.#368 I67   Use *  Keep     rdx  |     |     |I67 i|     |     |     |     |     |     |
 305.#369 C68   Def    Alloc    rdx  |     |     |C68 a|     |     |     |     |     |     |
 306.#370 C68   Use *  Keep     rdx  |     |     |C68 i|     |     |     |     |     |     |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc  RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
 308.#371 BB7  PredBB6               |     |     |     |     |     |     |     |     |     |
 313.#372 I69   Def    Alloc    rdx  |     |     |I69 a|     |     |     |     |     |     |
 314.#373 rdx   Fixd   Keep     rdx  |     |     |I69 a|     |     |     |     |     |     |
 314.#374 I69   Use *  Keep     rdx  |     |     |I69 i|     |     |     |     |     |     |
 315.#375 rdx   Fixd   Keep     rdx  |     |     |     |     |     |     |     |     |     |
 315.#376 I70   Def    Alloc    rdx  |     |     |I70 a|     |     |     |     |     |     |
 317.#377 I71   Def    Alloc    rcx  |     |I71 a|I70 a|     |     |     |     |     |     |
 318.#378 rcx   Fixd   Keep     rcx  |     |I71 a|I70 a|     |     |     |     |     |     |
 318.#379 I71   Use *  Keep     rcx  |     |I71 i|I70 a|     |     |     |     |     |     |
 319.#380 rcx   Fixd   Keep     rcx  |     |     |I70 a|     |     |     |     |     |     |
 319.#381 I72   Def    Alloc    rcx  |     |I72 a|I70 a|     |     |     |     |     |     |
 320.#382 rdx   Fixd   Keep     rdx  |     |I72 a|I70 a|     |     |     |     |     |     |
 320.#383 I70   Use *  Keep     rdx  |     |I72 a|I70 i|     |     |     |     |     |     |
 320.#384 rcx   Fixd   Keep     rcx  |     |I72 a|     |     |     |     |     |     |     |
 320.#385 I72   Use *  Keep     rcx  |     |I72 i|     |     |     |     |     |     |     |
 321.#386 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
 321.#387 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 321.#388 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
 321.#389 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
 321.#390 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
 321.#391 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
 321.#392 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
 333.#393 C73   Def    Alloc    rcx  |     |C73 a|     |     |     |     |     |     |     |
 334.#394 rcx   Fixd   Keep     rcx  |     |C73 a|     |     |     |     |     |     |     |
 334.#395 C73   Use *  Keep     rcx  |     |C73 i|     |     |     |     |     |     |     |
 335.#396 rcx   Fixd   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 335.#397 I74   Def    Alloc    rcx  |     |I74 a|     |     |     |     |     |     |     |
 336.#398 rcx   Fixd   Keep     rcx  |     |I74 a|     |     |     |     |     |     |     |
 336.#399 I74   Use *  Keep     rcx  |     |I74 i|     |     |     |     |     |     |     |
 337.#400 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
 337.#401 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 337.#402 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
 337.#403 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
 337.#404 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
 337.#405 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
 337.#406 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
 337.#407 rax   Fixd   Keep     rax  |     |     |     |     |     |     |     |     |     |
 337.#408 I75   Def    Alloc    rax  |I75 a|     |     |     |     |     |     |     |     |
 338.#409 I75   Use *  Keep     rax  |I75 i|     |     |     |     |     |     |     |     |
 341.#410 I76   Def    Alloc    rcx  |     |I76 a|     |     |     |     |     |     |     |
 344.#411 I76   Use *  Keep     rcx  |     |I76 i|     |     |     |     |     |     |     |
 345.#412 I77   Def    Alloc    rcx  |     |I77 a|     |     |     |     |     |     |     |
 348.#413 I77   Use *  Keep     rcx  |     |I77 i|     |     |     |     |     |     |     |
 349.#414 I78   Def    Alloc    rcx  |     |I78 a|     |     |     |     |     |     |     |
 350.#415 I78   Use *  Keep     rcx  |     |I78 i|     |     |     |     |     |     |     |
 353.#416 I79   Def    Alloc    rcx  |     |I79 a|     |     |     |     |     |     |     |
 354.#417 rcx   Fixd   Keep     rcx  |     |I79 a|     |     |     |     |     |     |     |
 354.#418 I79   Use *  Keep     rcx  |     |I79 i|     |     |     |     |     |     |     |
 355.#419 rcx   Fixd   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 355.#420 I80   Def    Alloc    rcx  |     |I80 a|     |     |     |     |     |     |     |
 356.#421 rcx   Fixd   Keep     rcx  |     |I80 a|     |     |     |     |     |     |     |
 356.#422 I80   Use *  Keep     rcx  |     |I80 i|     |     |     |     |     |     |     |
 357.#423 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
 357.#424 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 357.#425 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
 357.#426 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
 357.#427 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
 357.#428 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
 357.#429 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
 361.#430 I81   Def    Alloc    rdx  |     |     |I81 a|     |     |     |     |     |     |
 362.#431 I81   Use *  Keep     rdx  |     |     |I81 i|     |     |     |     |     |     |
 363.#432 I82   Def    Alloc    rcx  |     |I82 a|     |     |     |     |     |     |     |
 365.#433 I83   Def    Alloc    rdx  |     |I82 a|I83 a|     |     |     |     |     |     |
 366.#434 rcx   Fixd   Keep     rcx  |     |I82 a|I83 a|     |     |     |     |     |     |
 366.#435 I82   Use *  Keep     rcx  |     |I82 i|I83 a|     |     |     |     |     |     |
 366.#436 rdx   Fixd   Keep     rdx  |     |     |I83 a|     |     |     |     |     |     |
 366.#437 I83   Use *  Keep     rdx  |     |     |I83 i|     |     |     |     |     |     |
 367.#438 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
 367.#439 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 367.#440 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
 367.#441 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
 367.#442 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
 367.#443 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
 367.#444 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
 367.#445 mm0   Kill   Keep     mm0  |     |     |     |     |     |     |     |     |     |
 367.#446 mm1   Kill   Keep     mm1  |     |     |     |     |     |     |     |     |     |
 367.#447 mm2   Kill   Keep     mm2  |     |     |     |     |     |     |     |     |     |
 367.#448 mm3   Kill   Keep     mm3  |     |     |     |     |     |     |     |     |     |
 367.#449 mm4   Kill   Keep     mm4  |     |     |     |     |     |     |     |     |     |
 367.#450 mm5   Kill   Keep     mm5  |     |     |     |     |     |     |     |     |     |
 371.#451 I84   Def    Alloc    rdx  |     |     |I84 a|     |     |     |     |     |     |
 374.#452 I84   Use *  Keep     rdx  |     |     |I84 i|     |     |     |     |     |     |
 375.#453 I85   Def    Alloc    rdx  |     |     |I85 a|     |     |     |     |     |     |
 376.#454 I85   Use *  Keep     rdx  |     |     |I85 i|     |     |     |     |     |     |
 377.#455 I86   Def    Alloc    rcx  |     |I86 a|     |     |     |     |     |     |     |
 379.#456 I87   Def    Alloc    rdx  |     |I86 a|I87 a|     |     |     |     |     |     |
 382.#457 I87   Use *  Keep     rdx  |     |I86 a|I87 i|     |     |     |     |     |     |
 383.#458 I88   Def    Alloc    rdx  |     |I86 a|I88 a|     |     |     |     |     |     |
 386.#459 I88   Use *  Keep     rdx  |     |I86 a|I88 i|     |     |     |     |     |     |
 387.#460 I89   Def    Alloc    rdx  |     |I86 a|I89 a|     |     |     |     |     |     |
 390.#461 I89   Use *  Keep     rdx  |     |I86 a|I89 i|     |     |     |     |     |     |
 391.#462 I90   Def    Alloc    rdx  |     |I86 a|I90 a|     |     |     |     |     |     |
 392.#463 rcx   Fixd   Keep     rcx  |     |I86 a|I90 a|     |     |     |     |     |     |
 392.#464 I86   Use *  Keep     rcx  |     |I86 i|I90 a|     |     |     |     |     |     |
 392.#465 rdx   Fixd   Keep     rdx  |     |     |I90 a|     |     |     |     |     |     |
 392.#466 I90   Use *  Keep     rdx  |     |     |I90 i|     |     |     |     |     |     |
 393.#467 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
 393.#468 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 393.#469 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
 393.#470 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
 393.#471 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
 393.#472 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
 393.#473 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
 393.#474 mm0   Kill   Keep     mm0  |     |     |     |     |     |     |     |     |     |
 393.#475 mm1   Kill   Keep     mm1  |     |     |     |     |     |     |     |     |     |
 393.#476 mm2   Kill   Keep     mm2  |     |     |     |     |     |     |     |     |     |
 393.#477 mm3   Kill   Keep     mm3  |     |     |     |     |     |     |     |     |     |
 393.#478 mm4   Kill   Keep     mm4  |     |     |     |     |     |     |     |     |     |
 393.#479 mm5   Kill   Keep     mm5  |     |     |     |     |     |     |     |     |     |
 397.#480 C91   Def    Alloc    rcx  |     |C91 a|     |     |     |     |     |     |     |
 398.#481 rcx   Fixd   Keep     rcx  |     |C91 a|     |     |     |     |     |     |     |
 398.#482 C91   Use *  Keep     rcx  |     |C91 i|     |     |     |     |     |     |     |
 399.#483 rcx   Fixd   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 399.#484 I92   Def    Alloc    rcx  |     |I92 a|     |     |     |     |     |     |     |
 400.#485 rcx   Fixd   Keep     rcx  |     |I92 a|     |     |     |     |     |     |     |
 400.#486 I92   Use *  Keep     rcx  |     |I92 i|     |     |     |     |     |     |     |
 401.#487 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
 401.#488 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 401.#489 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
 401.#490 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
 401.#491 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
 401.#492 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
 401.#493 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
 401.#494 rax   Fixd   Keep     rax  |     |     |     |     |     |     |     |     |     |
 401.#495 I93   Def    Alloc    rax  |I93 a|     |     |     |     |     |     |     |     |
 402.#496 I93   Use *  Keep     rax  |I93 i|     |     |     |     |     |     |     |     |
 405.#497 I94   Def    Alloc    rcx  |     |I94 a|     |     |     |     |     |     |     |
 408.#498 I94   Use *  Keep     rcx  |     |I94 i|     |     |     |     |     |     |     |
 409.#499 I95   Def    Alloc    rcx  |     |I95 a|     |     |     |     |     |     |     |
 412.#500 I95   Use *  Keep     rcx  |     |I95 i|     |     |     |     |     |     |     |
 413.#501 I96   Def    Alloc    rcx  |     |I96 a|     |     |     |     |     |     |     |
 414.#502 I96   Use *  Keep     rcx  |     |I96 i|     |     |     |     |     |     |     |
 417.#503 I97   Def    Alloc    rcx  |     |I97 a|     |     |     |     |     |     |     |
 418.#504 rcx   Fixd   Keep     rcx  |     |I97 a|     |     |     |     |     |     |     |
 418.#505 I97   Use *  Keep     rcx  |     |I97 i|     |     |     |     |     |     |     |
 419.#506 rcx   Fixd   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 419.#507 I98   Def    Alloc    rcx  |     |I98 a|     |     |     |     |     |     |     |
 420.#508 rcx   Fixd   Keep     rcx  |     |I98 a|     |     |     |     |     |     |     |
 420.#509 I98   Use *  Keep     rcx  |     |I98 i|     |     |     |     |     |     |     |
 421.#510 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
 421.#511 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 421.#512 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
 421.#513 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
 421.#514 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
 421.#515 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
 421.#516 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
 425.#517 I99   Def    Alloc    rdx  |     |     |I99 a|     |     |     |     |     |     |
 426.#518 I99   Use *  Keep     rdx  |     |     |I99 i|     |     |     |     |     |     |
 427.#519 I100  Def    Alloc    rcx  |     |I100a|     |     |     |     |     |     |     |
 429.#520 I101  Def    Alloc    rdx  |     |I100a|I101a|     |     |     |     |     |     |
 430.#521 rcx   Fixd   Keep     rcx  |     |I100a|I101a|     |     |     |     |     |     |
 430.#522 I100  Use *  Keep     rcx  |     |I100i|I101a|     |     |     |     |     |     |
 430.#523 rdx   Fixd   Keep     rdx  |     |     |I101a|     |     |     |     |     |     |
 430.#524 I101  Use *  Keep     rdx  |     |     |I101i|     |     |     |     |     |     |
 431.#525 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
 431.#526 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 431.#527 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
 431.#528 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
 431.#529 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
 431.#530 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
 431.#531 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
 431.#532 mm0   Kill   Keep     mm0  |     |     |     |     |     |     |     |     |     |
 431.#533 mm1   Kill   Keep     mm1  |     |     |     |     |     |     |     |     |     |
 431.#534 mm2   Kill   Keep     mm2  |     |     |     |     |     |     |     |     |     |
 431.#535 mm3   Kill   Keep     mm3  |     |     |     |     |     |     |     |     |     |
 431.#536 mm4   Kill   Keep     mm4  |     |     |     |     |     |     |     |     |     |
 431.#537 mm5   Kill   Keep     mm5  |     |     |     |     |     |     |     |     |     |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc  RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
 440.#538 BB8  PredBB7               |     |     |     |     |     |     |     |     |     |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc  RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
 442.#539 BB10 PredBB0               |     |     |     |     |     |     |     |     |     |
 447.#540 I102  Def    Alloc    rcx  |     |I102a|     |     |     |     |     |     |     |
 448.#541 I102  Use *  Keep     rcx  |     |I102i|     |     |     |     |     |     |     |
 449.#542 I103  Def    Alloc    rcx  |     |I103a|     |     |     |     |     |     |     |
 452.#543 I103  Use *  Keep     rcx  |     |I103i|     |     |     |     |     |     |     |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc  RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
 456.#544 BB11 PredBB10              |     |     |     |     |     |     |     |     |     |
 461.#545 I104  Def    Alloc    rcx  |     |I104a|     |     |     |     |     |     |     |
 462.#546 rcx   Fixd   Keep     rcx  |     |I104a|     |     |     |     |     |     |     |
 462.#547 I104  Use *  Keep     rcx  |     |I104i|     |     |     |     |     |     |     |
 463.#548 rcx   Fixd   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 463.#549 I105  Def    Alloc    rcx  |     |I105a|     |     |     |     |     |     |     |
 464.#550 rcx   Fixd   Keep     rcx  |     |I105a|     |     |     |     |     |     |     |
 464.#551 I105  Use *  Keep     rcx  |     |I105i|     |     |     |     |     |     |     |
 465.#552 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
 465.#553 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 465.#554 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
 465.#555 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
 465.#556 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
 465.#557 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
 465.#558 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc  RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
 470.#559 BB12 PredBB10              |     |     |     |     |     |     |     |     |     |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc  RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
 476.#560 BB9  PredBB0               |     |     |     |     |     |     |     |     |     |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc  RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
 478.#561 BB13 PredBB0               |     |     |     |     |     |     |     |     |     |
 487.#562 I106  Def    Alloc    rax  |I106a|     |     |     |     |     |     |     |     |
 490.#563 I106  Use *  Keep     rax  |I106i|     |     |     |     |     |     |     |     |
 491.#564 I107  Def    Alloc    rax  |I107a|     |     |     |     |     |     |     |     |
 492.#565 I107  Use *  Keep     rax  |I107i|     |     |     |     |     |     |     |     |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc  RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
 494.#566 BB15 PredBB14              |     |     |     |     |     |     |     |     |     |
 499.#567 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
 499.#568 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 499.#569 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
 499.#570 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
 499.#571 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
 499.#572 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
 499.#573 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
 499.#574 rax   Fixd   Keep     rax  |     |     |     |     |     |     |     |     |     |
 499.#575 I108  Def    Alloc    rax  |I108a|     |     |     |     |     |     |     |     |
 500.#576 I108  Use *  Keep     rax  |I108i|     |     |     |     |     |     |     |     |
 505.#577 I109  Def    Alloc    rcx  |     |I109a|     |     |     |     |     |     |     |
 506.#578 I109  Use *  Keep     rcx  |     |I109i|     |     |     |     |     |     |     |
 511.#579 I110  Def    Alloc    rcx  |     |I110a|     |     |     |     |     |     |     |
 512.#580 rcx   Fixd   Keep     rcx  |     |I110a|     |     |     |     |     |     |     |
 512.#581 I110  Use *  Keep     rcx  |     |I110i|     |     |     |     |     |     |     |
 513.#582 rcx   Fixd   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 513.#583 I111  Def    Alloc    rcx  |     |I111a|     |     |     |     |     |     |     |
 514.#584 rcx   Fixd   Keep     rcx  |     |I111a|     |     |     |     |     |     |     |
 514.#585 I111  Use *  Keep     rcx  |     |I111i|     |     |     |     |     |     |     |
 515.#586 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
 515.#587 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 515.#588 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
 515.#589 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
 515.#590 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
 515.#591 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
 515.#592 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
 515.#593 rax   Fixd   Keep     rax  |     |     |     |     |     |     |     |     |     |
 515.#594 I112  Def    Alloc    rax  |I112a|     |     |     |     |     |     |     |     |
 516.#595 I112  Use *  Keep     rax  |I112i|     |     |     |     |     |     |     |     |
 521.#596 C113  Def    Alloc    rdx  |     |     |C113a|     |     |     |     |     |     |
 522.#597 C113  Use *  Keep     rdx  |     |     |C113i|     |     |     |     |     |     |
 523.#598 I114  Def    Alloc    rdx  |     |     |I114a|     |     |     |     |     |     |
 524.#599 rdx   Fixd   Keep     rdx  |     |     |I114a|     |     |     |     |     |     |
 524.#600 I114  Use *  Keep     rdx  |     |     |I114i|     |     |     |     |     |     |
 525.#601 rdx   Fixd   Keep     rdx  |     |     |     |     |     |     |     |     |     |
 525.#602 I115  Def    Alloc    rdx  |     |     |I115a|     |     |     |     |     |     |
 527.#603 I116  Def    Alloc    rcx  |     |I116a|I115a|     |     |     |     |     |     |
 528.#604 rcx   Fixd   Keep     rcx  |     |I116a|I115a|     |     |     |     |     |     |
 528.#605 I116  Use *  Keep     rcx  |     |I116i|I115a|     |     |     |     |     |     |
 529.#606 rcx   Fixd   Keep     rcx  |     |     |I115a|     |     |     |     |     |     |
 529.#607 I117  Def    Alloc    rcx  |     |I117a|I115a|     |     |     |     |     |     |
 530.#608 rdx   Fixd   Keep     rdx  |     |I117a|I115a|     |     |     |     |     |     |
 530.#609 I115  Use *  Keep     rdx  |     |I117a|I115i|     |     |     |     |     |     |
 530.#610 rcx   Fixd   Keep     rcx  |     |I117a|     |     |     |     |     |     |     |
 530.#611 I117  Use *  Keep     rcx  |     |I117i|     |     |     |     |     |     |     |
 531.#612 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
 531.#613 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 531.#614 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
 531.#615 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
 531.#616 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
 531.#617 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
 531.#618 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
 531.#619 rax   Fixd   Keep     rax  |     |     |     |     |     |     |     |     |     |
 531.#620 I118  Def    Alloc    rax  |I118a|     |     |     |     |     |     |     |     |
 532.#621 I118  Use *  Keep     rax  |I118i|     |     |     |     |     |     |     |     |
 537.#622 I119  Def    Alloc    rcx  |     |I119a|     |     |     |     |     |     |     |
 538.#623 rcx   Fixd   Keep     rcx  |     |I119a|     |     |     |     |     |     |     |
 538.#624 I119  Use *  Keep     rcx  |     |I119i|     |     |     |     |     |     |     |
 539.#625 rcx   Fixd   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 539.#626 I120  Def    Alloc    rcx  |     |I120a|     |     |     |     |     |     |     |
 540.#627 rcx   Fixd   Keep     rcx  |     |I120a|     |     |     |     |     |     |     |
 540.#628 I120  Use *  Keep     rcx  |     |I120i|     |     |     |     |     |     |     |
 541.#629 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
 541.#630 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 541.#631 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
 541.#632 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
 541.#633 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
 541.#634 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
 541.#635 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc  RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
 550.#636 BB28 PredBB15              |     |     |     |     |     |     |     |     |     |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc  RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
 562.#637 BB16 PredBB28              |     |     |     |     |     |     |     |     |     |
 571.#638 I121  Def    Alloc    rdx  |     |     |I121a|     |     |     |     |     |     |
 574.#639 I121  Use *  Keep     rdx  |     |     |I121i|     |     |     |     |     |     |
 575.#640 I122  Def    Alloc    rdx  |     |     |I122a|     |     |     |     |     |     |
 576.#641 I122  Use *  Keep     rdx  |     |     |I122i|     |     |     |     |     |     |
 581.#642 C123  Def    Alloc    rdx  |     |     |C123a|     |     |     |     |     |     |
 582.#643 C123  Use *  Keep     rdx  |     |     |C123i|     |     |     |     |     |     |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc  RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
 584.#644 BB17 PredBB16              |     |     |     |     |     |     |     |     |     |
 589.#645 I124  Def    Alloc    rdx  |     |     |I124a|     |     |     |     |     |     |
 590.#646 rdx   Fixd   Keep     rdx  |     |     |I124a|     |     |     |     |     |     |
 590.#647 I124  Use *  Keep     rdx  |     |     |I124i|     |     |     |     |     |     |
 591.#648 rdx   Fixd   Keep     rdx  |     |     |     |     |     |     |     |     |     |
 591.#649 I125  Def    Alloc    rdx  |     |     |I125a|     |     |     |     |     |     |
 593.#650 I126  Def    Alloc    rcx  |     |I126a|I125a|     |     |     |     |     |     |
 594.#651 rcx   Fixd   Keep     rcx  |     |I126a|I125a|     |     |     |     |     |     |
 594.#652 I126  Use *  Keep     rcx  |     |I126i|I125a|     |     |     |     |     |     |
 595.#653 rcx   Fixd   Keep     rcx  |     |     |I125a|     |     |     |     |     |     |
 595.#654 I127  Def    Alloc    rcx  |     |I127a|I125a|     |     |     |     |     |     |
 596.#655 rdx   Fixd   Keep     rdx  |     |I127a|I125a|     |     |     |     |     |     |
 596.#656 I125  Use *  Keep     rdx  |     |I127a|I125i|     |     |     |     |     |     |
 596.#657 rcx   Fixd   Keep     rcx  |     |I127a|     |     |     |     |     |     |     |
 596.#658 I127  Use *  Keep     rcx  |     |I127i|     |     |     |     |     |     |     |
 597.#659 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
 597.#660 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 597.#661 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
 597.#662 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
 597.#663 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
 597.#664 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
 597.#665 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
 609.#666 I128  Def    Alloc    rcx  |     |I128a|     |     |     |     |     |     |     |
 612.#667 I128  Use *  Keep     rcx  |     |I128i|     |     |     |     |     |     |     |
 613.#668 I129  Def    Alloc    rcx  |     |I129a|     |     |     |     |     |     |     |
 616.#669 I129  Use *  Keep     rcx  |     |I129i|     |     |     |     |     |     |     |
 617.#670 I130  Def    Alloc    rcx  |     |I130a|     |     |     |     |     |     |     |
 619.#671 I131  Def    Alloc    rax  |I131a|I130a|     |     |     |     |     |     |     |
 622.#672 I131  Use *  Keep     rax  |I131i|I130a|     |     |     |     |     |     |     |
 623.#673 I132  Def    Alloc    rax  |I132a|I130a|     |     |     |     |     |     |     |
 628.#674 I130  Use *  Keep     rcx  |I132a|I130i|     |     |     |     |     |     |     |
 628.#675 I132  Use *  Keep     rax  |I132i|     |     |     |     |     |     |     |     |
 629.#676 I133  Def    Alloc    rcx  |     |I133a|     |     |     |     |     |     |     |
 630.#677 I133  Use *  Keep     rcx  |     |I133i|     |     |     |     |     |     |     |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc  RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
 642.#678 BB18 PredBB17              |     |     |     |     |     |     |     |     |     |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc  RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
 652.#679 BB19 PredBB17              |     |     |     |     |     |     |     |     |     |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc  RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
 662.#680 BB20 PredBB18              |     |     |     |     |     |     |     |     |     |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc  RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
 664.#681 BB22 PredBB19              |     |     |     |     |     |     |     |     |     |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc  RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
 666.#682 BB24 PredBB0               |     |     |     |     |     |     |     |     |     |
 671.#683 I134  Def    Alloc    rcx  |     |I134a|     |     |     |     |     |     |     |
 672.#684 I134  Use *  Keep     rcx  |     |I134i|     |     |     |     |     |     |     |
 673.#685 I135  Def    Alloc    rcx  |     |I135a|     |     |     |     |     |     |     |
 676.#686 I135  Use *  Keep     rcx  |     |I135i|     |     |     |     |     |     |     |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc  RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
 680.#687 BB25 PredBB24              |     |     |     |     |     |     |     |     |     |
 685.#688 I136  Def    Alloc    rcx  |     |I136a|     |     |     |     |     |     |     |
 686.#689 rcx   Fixd   Keep     rcx  |     |I136a|     |     |     |     |     |     |     |
 686.#690 I136  Use *  Keep     rcx  |     |I136i|     |     |     |     |     |     |     |
 687.#691 rcx   Fixd   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 687.#692 I137  Def    Alloc    rcx  |     |I137a|     |     |     |     |     |     |     |
 688.#693 rcx   Fixd   Keep     rcx  |     |I137a|     |     |     |     |     |     |     |
 688.#694 I137  Use *  Keep     rcx  |     |I137i|     |     |     |     |     |     |     |
 689.#695 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
 689.#696 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 689.#697 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
 689.#698 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
 689.#699 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
 689.#700 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
 689.#701 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc  RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
 694.#702 BB26 PredBB24              |     |     |     |     |     |     |     |     |     |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc  RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
 700.#703 BB21 PredBB0               |     |     |     |     |     |     |     |     |     |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc  RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
 702.#704 BB23 PredBB0               |     |     |     |     |     |     |     |     |     |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc  RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
 704.#705 BB27 PredBB0               |     |     |     |     |     |     |     |     |     |
 709.#706 C138  Def    Alloc    rcx  |     |C138a|     |     |     |     |     |     |     |
 710.#707 rcx   Fixd   Keep     rcx  |     |C138a|     |     |     |     |     |     |     |
 710.#708 C138  Use *  Keep     rcx  |     |C138i|     |     |     |     |     |     |     |
 711.#709 rcx   Fixd   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 711.#710 I139  Def    Alloc    rcx  |     |I139a|     |     |     |     |     |     |     |
 712.#711 rcx   Fixd   Keep     rcx  |     |I139a|     |     |     |     |     |     |     |
 712.#712 I139  Use *  Keep     rcx  |     |I139i|     |     |     |     |     |     |     |
 713.#713 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
 713.#714 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 713.#715 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
 713.#716 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
 713.#717 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
 713.#718 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
 713.#719 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc  RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
 722.#720 BB29 PredBB0               |     |     |     |     |     |     |     |     |     |
 727.#721 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
 727.#722 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 727.#723 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
 727.#724 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
 727.#725 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
 727.#726 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
 727.#727 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
 727.#728 rax   Fixd   Keep     rax  |     |     |     |     |     |     |     |     |     |
 727.#729 I140  Def    Alloc    rax  |I140a|     |     |     |     |     |     |     |     |
 728.#730 I140  Use *  Keep     rax  |I140i|     |     |     |     |     |     |     |     |
 733.#731 I141  Def    Alloc    rcx  |     |I141a|     |     |     |     |     |     |     |
 734.#732 I141  Use *  Keep     rcx  |     |I141i|     |     |     |     |     |     |     |
 739.#733 I142  Def    Alloc    rcx  |     |I142a|     |     |     |     |     |     |     |
 740.#734 rcx   Fixd   Keep     rcx  |     |I142a|     |     |     |     |     |     |     |
 740.#735 I142  Use *  Keep     rcx  |     |I142i|     |     |     |     |     |     |     |
 741.#736 rcx   Fixd   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 741.#737 I143  Def    Alloc    rcx  |     |I143a|     |     |     |     |     |     |     |
 742.#738 rcx   Fixd   Keep     rcx  |     |I143a|     |     |     |     |     |     |     |
 742.#739 I143  Use *  Keep     rcx  |     |I143i|     |     |     |     |     |     |     |
 743.#740 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
 743.#741 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 743.#742 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
 743.#743 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
 743.#744 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
 743.#745 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
 743.#746 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
 743.#747 rax   Fixd   Keep     rax  |     |     |     |     |     |     |     |     |     |
 743.#748 I144  Def    Alloc    rax  |I144a|     |     |     |     |     |     |     |     |
 744.#749 I144  Use *  Keep     rax  |I144i|     |     |     |     |     |     |     |     |
 749.#750 C145  Def    Alloc    rdx  |     |     |C145a|     |     |     |     |     |     |
 750.#751 C145  Use *  Keep     rdx  |     |     |C145i|     |     |     |     |     |     |
 751.#752 I146  Def    Alloc    rdx  |     |     |I146a|     |     |     |     |     |     |
 752.#753 rdx   Fixd   Keep     rdx  |     |     |I146a|     |     |     |     |     |     |
 752.#754 I146  Use *  Keep     rdx  |     |     |I146i|     |     |     |     |     |     |
 753.#755 rdx   Fixd   Keep     rdx  |     |     |     |     |     |     |     |     |     |
 753.#756 I147  Def    Alloc    rdx  |     |     |I147a|     |     |     |     |     |     |
 755.#757 I148  Def    Alloc    rcx  |     |I148a|I147a|     |     |     |     |     |     |
 756.#758 rcx   Fixd   Keep     rcx  |     |I148a|I147a|     |     |     |     |     |     |
 756.#759 I148  Use *  Keep     rcx  |     |I148i|I147a|     |     |     |     |     |     |
 757.#760 rcx   Fixd   Keep     rcx  |     |     |I147a|     |     |     |     |     |     |
 757.#761 I149  Def    Alloc    rcx  |     |I149a|I147a|     |     |     |     |     |     |
 758.#762 rdx   Fixd   Keep     rdx  |     |I149a|I147a|     |     |     |     |     |     |
 758.#763 I147  Use *  Keep     rdx  |     |I149a|I147i|     |     |     |     |     |     |
 758.#764 rcx   Fixd   Keep     rcx  |     |I149a|     |     |     |     |     |     |     |
 758.#765 I149  Use *  Keep     rcx  |     |I149i|     |     |     |     |     |     |     |
 759.#766 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
 759.#767 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 759.#768 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
 759.#769 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
 759.#770 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
 759.#771 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
 759.#772 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
 759.#773 rax   Fixd   Keep     rax  |     |     |     |     |     |     |     |     |     |
 759.#774 I150  Def    Alloc    rax  |I150a|     |     |     |     |     |     |     |     |
 760.#775 I150  Use *  Keep     rax  |I150i|     |     |     |     |     |     |     |     |
 765.#776 I151  Def    Alloc    rcx  |     |I151a|     |     |     |     |     |     |     |
 766.#777 rcx   Fixd   Keep     rcx  |     |I151a|     |     |     |     |     |     |     |
 766.#778 I151  Use *  Keep     rcx  |     |I151i|     |     |     |     |     |     |     |
 767.#779 rcx   Fixd   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 767.#780 I152  Def    Alloc    rcx  |     |I152a|     |     |     |     |     |     |     |
 768.#781 rcx   Fixd   Keep     rcx  |     |I152a|     |     |     |     |     |     |     |
 768.#782 I152  Use *  Keep     rcx  |     |I152i|     |     |     |     |     |     |     |
 769.#783 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
 769.#784 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 769.#785 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
 769.#786 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
 769.#787 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
 769.#788 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
 769.#789 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
 777.#790 C153  Def    Alloc    rcx  |     |C153a|     |     |     |     |     |     |     |
 778.#791 C153  Use *  Keep     rcx  |     |C153i|     |     |     |     |     |     |     |
 779.#792 I154  Def    Alloc    rcx  |     |I154a|     |     |     |     |     |     |     |
 780.#793 rcx   Fixd   Keep     rcx  |     |I154a|     |     |     |     |     |     |     |
 780.#794 I154  Use *  Keep     rcx  |     |I154i|     |     |     |     |     |     |     |
 781.#795 rcx   Fixd   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 781.#796 I155  Def    Alloc    rcx  |     |I155a|     |     |     |     |     |     |     |
 782.#797 rcx   Fixd   Keep     rcx  |     |I155a|     |     |     |     |     |     |     |
 782.#798 I155  Use *  Keep     rcx  |     |I155i|     |     |     |     |     |     |     |
 783.#799 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
 783.#800 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 783.#801 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
 783.#802 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
 783.#803 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
 783.#804 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
 783.#805 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
 791.#806 C156  Def    Alloc    rcx  |     |C156a|     |     |     |     |     |     |     |
 792.#807 C156  Use *  Keep     rcx  |     |C156i|     |     |     |     |     |     |     |
 793.#808 I157  Def    Alloc    rcx  |     |I157a|     |     |     |     |     |     |     |
 794.#809 rcx   Fixd   Keep     rcx  |     |I157a|     |     |     |     |     |     |     |
 794.#810 I157  Use *  Keep     rcx  |     |I157i|     |     |     |     |     |     |     |
 795.#811 rcx   Fixd   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 795.#812 I158  Def    Alloc    rcx  |     |I158a|     |     |     |     |     |     |     |
 796.#813 rcx   Fixd   Keep     rcx  |     |I158a|     |     |     |     |     |     |     |
 796.#814 I158  Use *  Keep     rcx  |     |I158i|     |     |     |     |     |     |     |
 797.#815 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
 797.#816 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 797.#817 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
 797.#818 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
 797.#819 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
 797.#820 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
 797.#821 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
 805.#822 C159  Def    Alloc    rcx  |     |C159a|     |     |     |     |     |     |     |
 806.#823 C159  Use *  Keep     rcx  |     |C159i|     |     |     |     |     |     |     |
 807.#824 I160  Def    Alloc    rcx  |     |I160a|     |     |     |     |     |     |     |
 808.#825 rcx   Fixd   Keep     rcx  |     |I160a|     |     |     |     |     |     |     |
 808.#826 I160  Use *  Keep     rcx  |     |I160i|     |     |     |     |     |     |     |
 809.#827 rcx   Fixd   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 809.#828 I161  Def    Alloc    rcx  |     |I161a|     |     |     |     |     |     |     |
 810.#829 rcx   Fixd   Keep     rcx  |     |I161a|     |     |     |     |     |     |     |
 810.#830 I161  Use *  Keep     rcx  |     |I161i|     |     |     |     |     |     |     |
 811.#831 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
 811.#832 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 811.#833 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
 811.#834 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
 811.#835 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
 811.#836 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
 811.#837 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
 819.#838 C162  Def    Alloc    rcx  |     |C162a|     |     |     |     |     |     |     |
 820.#839 C162  Use *  Keep     rcx  |     |C162i|     |     |     |     |     |     |     |
 821.#840 I163  Def    Alloc    rcx  |     |I163a|     |     |     |     |     |     |     |
 822.#841 rcx   Fixd   Keep     rcx  |     |I163a|     |     |     |     |     |     |     |
 822.#842 I163  Use *  Keep     rcx  |     |I163i|     |     |     |     |     |     |     |
 823.#843 rcx   Fixd   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 823.#844 I164  Def    Alloc    rcx  |     |I164a|     |     |     |     |     |     |     |
 824.#845 rcx   Fixd   Keep     rcx  |     |I164a|     |     |     |     |     |     |     |
 824.#846 I164  Use *  Keep     rcx  |     |I164i|     |     |     |     |     |     |     |
 825.#847 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
 825.#848 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 825.#849 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
 825.#850 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
 825.#851 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
 825.#852 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
 825.#853 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc  RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
 834.#854 BB39 PredBB29              |     |     |     |     |     |     |     |     |     |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc  RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
 846.#855 BB30 PredBB39              |     |     |     |     |     |     |     |     |     |
 855.#856 I165  Def    Alloc    rcx  |     |I165a|     |     |     |     |     |     |     |
 856.#857 rcx   Fixd   Keep     rcx  |     |I165a|     |     |     |     |     |     |     |
 856.#858 I165  Use *  Keep     rcx  |     |I165i|     |     |     |     |     |     |     |
 857.#859 rcx   Fixd   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 857.#860 I166  Def    Alloc    rcx  |     |I166a|     |     |     |     |     |     |     |
 858.#861 rcx   Fixd   Keep     rcx  |     |I166a|     |     |     |     |     |     |     |
 858.#862 I166  Use *  Keep     rcx  |     |I166i|     |     |     |     |     |     |     |
 859.#863 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
 859.#864 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 859.#865 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
 859.#866 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
 859.#867 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
 859.#868 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
 859.#869 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
 866.#870 I167  Def    Alloc    rcx  |     |I167a|     |     |     |     |     |     |     |
 866.#871 I167  Use *  Keep     rcx  |     |I167i|     |     |     |     |     |     |     |
 871.#872 I168  Def    Alloc    rcx  |     |I168a|     |     |     |     |     |     |     |
 872.#873 rcx   Fixd   Keep     rcx  |     |I168a|     |     |     |     |     |     |     |
 872.#874 I168  Use *  Keep     rcx  |     |I168i|     |     |     |     |     |     |     |
 873.#875 rcx   Fixd   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 873.#876 I169  Def    Alloc    rcx  |     |I169a|     |     |     |     |     |     |     |
 874.#877 rcx   Fixd   Keep     rcx  |     |I169a|     |     |     |     |     |     |     |
 874.#878 I169  Use *  Keep     rcx  |     |I169i|     |     |     |     |     |     |     |
 875.#879 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
 875.#880 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 875.#881 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
 875.#882 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
 875.#883 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
 875.#884 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
 875.#885 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
 875.#886 rax   Fixd   Keep     rax  |     |     |     |     |     |     |     |     |     |
 875.#887 I170  Def    Alloc    rax  |I170a|     |     |     |     |     |     |     |     |
 876.#888 I170  Use *  Keep     rax  |I170i|     |     |     |     |     |     |     |     |
 885.#889 I171  Def    Alloc    rax  |I171a|     |     |     |     |     |     |     |     |
 886.#890 I171  Use *  Keep     rax  |I171i|     |     |     |     |     |     |     |     |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc  RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
 898.#891 BB31 PredBB30              |     |     |     |     |     |     |     |     |     |
 907.#892 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
 907.#893 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 907.#894 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
 907.#895 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
 907.#896 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
 907.#897 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
 907.#898 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
 907.#899 rax   Fixd   Keep     rax  |     |     |     |     |     |     |     |     |     |
 907.#900 I172  Def    Alloc    rax  |I172a|     |     |     |     |     |     |     |     |
 908.#901 I172  Use *  Keep     rax  |I172i|     |     |     |     |     |     |     |     |
 913.#902 I173  Def    Alloc    rcx  |     |I173a|     |     |     |     |     |     |     |
 914.#903 rcx   Fixd   Keep     rcx  |     |I173a|     |     |     |     |     |     |     |
 914.#904 I173  Use *  Keep     rcx  |     |I173i|     |     |     |     |     |     |     |
 915.#905 rcx   Fixd   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 915.#906 I174  Def    Alloc    rcx  |     |I174a|     |     |     |     |     |     |     |
 916.#907 rcx   Fixd   Keep     rcx  |     |I174a|     |     |     |     |     |     |     |
 916.#908 I174  Use *  Keep     rcx  |     |I174i|     |     |     |     |     |     |     |
 917.#909 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
 917.#910 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 917.#911 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
 917.#912 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
 917.#913 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
 917.#914 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
 917.#915 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc  RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
 930.#916 BB32 PredBB30              |     |     |     |     |     |     |     |     |     |
 935.#917 I175  Def    Alloc    rcx  |     |I175a|     |     |     |     |     |     |     |
 936.#918 rcx   Fixd   Keep     rcx  |     |I175a|     |     |     |     |     |     |     |
 936.#919 I175  Use *  Keep     rcx  |     |I175i|     |     |     |     |     |     |     |
 937.#920 rcx   Fixd   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 937.#921 I176  Def    Alloc    rcx  |     |I176a|     |     |     |     |     |     |     |
 938.#922 rcx   Fixd   Keep     rcx  |     |I176a|     |     |     |     |     |     |     |
 938.#923 I176  Use *  Keep     rcx  |     |I176i|     |     |     |     |     |     |     |
 939.#924 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
 939.#925 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 939.#926 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
 939.#927 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
 939.#928 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
 939.#929 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
 939.#930 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
 939.#931 rax   Fixd   Keep     rax  |     |     |     |     |     |     |     |     |     |
 939.#932 I177  Def    Alloc    rax  |I177a|     |     |     |     |     |     |     |     |
 940.#933 I177  Use *  Keep     rax  |I177i|     |     |     |     |     |     |     |     |
 949.#934 I178  Def    Alloc    rax  |I178a|     |     |     |     |     |     |     |     |
 950.#935 I178  Use *  Keep     rax  |I178i|     |     |     |     |     |     |     |     |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc  RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
 962.#936 BB33 PredBB32              |     |     |     |     |     |     |     |     |     |
 971.#937 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
 971.#938 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 971.#939 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
 971.#940 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
 971.#941 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
 971.#942 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
 971.#943 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc  RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
 984.#944 BB34 PredBB32              |     |     |     |     |     |     |     |     |     |
 989.#945 I179  Def    Alloc    rcx  |     |I179a|     |     |     |     |     |     |     |
 990.#946 rcx   Fixd   Keep     rcx  |     |I179a|     |     |     |     |     |     |     |
 990.#947 I179  Use *  Keep     rcx  |     |I179i|     |     |     |     |     |     |     |
 991.#948 rcx   Fixd   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 991.#949 I180  Def    Alloc    rcx  |     |I180a|     |     |     |     |     |     |     |
 992.#950 rcx   Fixd   Keep     rcx  |     |I180a|     |     |     |     |     |     |     |
 992.#951 I180  Use *  Keep     rcx  |     |I180i|     |     |     |     |     |     |     |
 993.#952 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
 993.#953 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 993.#954 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
 993.#955 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
 993.#956 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
 993.#957 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
 993.#958 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
 993.#959 rax   Fixd   Keep     rax  |     |     |     |     |     |     |     |     |     |
 993.#960 I181  Def    Alloc    rax  |I181a|     |     |     |     |     |     |     |     |
 994.#961 I181  Use *  Keep     rax  |I181i|     |     |     |     |     |     |     |     |
1003.#962 I182  Def    Alloc    rcx  |     |I182a|     |     |     |     |     |     |     |
1004.#963 I182  Use *  Keep     rcx  |     |I182i|     |     |     |     |     |     |     |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc  RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
1016.#964 BB35 PredBB34              |     |     |     |     |     |     |     |     |     |
1025.#965 I183  Def    Alloc    rcx  |     |I183a|     |     |     |     |     |     |     |
1030.#966 I183  Use *  Keep     rcx  |     |I183i|     |     |     |     |     |     |     |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc  RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
1040.#967 BB36 PredBB34              |     |     |     |     |     |     |     |     |     |
1045.#968 I184  Def    Alloc    rcx  |     |I184a|     |     |     |     |     |     |     |
1046.#969 rcx   Fixd   Keep     rcx  |     |I184a|     |     |     |     |     |     |     |
1046.#970 I184  Use *  Keep     rcx  |     |I184i|     |     |     |     |     |     |     |
1047.#971 rcx   Fixd   Keep     rcx  |     |     |     |     |     |     |     |     |     |
1047.#972 I185  Def    Alloc    rcx  |     |I185a|     |     |     |     |     |     |     |
1048.#973 rcx   Fixd   Keep     rcx  |     |I185a|     |     |     |     |     |     |     |
1048.#974 I185  Use *  Keep     rcx  |     |I185i|     |     |     |     |     |     |     |
1049.#975 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
1049.#976 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
1049.#977 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
1049.#978 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
1049.#979 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
1049.#980 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
1049.#981 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
1049.#982 rax   Fixd   Keep     rax  |     |     |     |     |     |     |     |     |     |
1049.#983 I186  Def    Alloc    rax  |I186a|     |     |     |     |     |     |     |     |
1050.#984 I186  Use *  Keep     rax  |I186i|     |     |     |     |     |     |     |     |
1059.#985 I187  Def    Alloc    rax  |I187a|     |     |     |     |     |     |     |     |
1060.#986 I187  Use *  Keep     rax  |I187i|     |     |     |     |     |     |     |     |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc  RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
1072.#987 BB37 PredBB36              |     |     |     |     |     |     |     |     |     |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc  RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
1082.#988 BB38 PredBB31              |     |     |     |     |     |     |     |     |     |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc  RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
-------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
1088.#989 BB40 PredBB37              |     |     |     |     |     |     |     |     |     |
1093.#990 I188  Def    Alloc    rax  |I188a|     |     |     |     |     |     |     |     |
1098.#991 I188  Use *  Keep     rax  |I188i|     |     |     |     |     |     |     |     |

Recording the maximum number of concurrent spills:

----------
LSRA Stats
----------
Register selection order: ABCDEFGHIJKLMNOPQ
Total Tracked Vars:  0
Total Reg Cand Vars: 0
Total number of Intervals: 188
Total number of RefPositions: 991
Total Number of spill temps created: 0
..........
BB05 [  100.00]: BEST_FIT = 9, REG_ORDER = 2
BB06 [  100.00]: BEST_FIT = 3
BB07 [  100.00]: BEST_FIT = 9, REG_ORDER = 4
BB13 [  100.00]: COVERS = 1, REG_ORDER = 1
BB14 [  100.00]: BEST_FIT = 1
BB15 [  100.00]: BEST_FIT = 2
BB16 [  100.00]: BEST_FIT = 3
BB17 [  100.00]: BEST_FIT = 4, REG_ORDER = 2
BB29 [  100.00]: BEST_FIT = 6
BB30 [  100.00]: BEST_FIT = 1, REG_ORDER = 1
BB32 [  100.00]: REG_ORDER = 1
BB34 [  100.00]: BEST_FIT = 1
BB35 [  100.00]: BEST_FIT = 1
BB36 [  100.00]: REG_ORDER = 1
BB40 [  100.00]: REG_ORDER = 1
BB10 [  100.00]: BEST_FIT = 2
BB24 [  100.00]: BEST_FIT = 2
..........
Total SpillCount : 0   Weighted: 0.000000
Total CopyReg : 0   Weighted: 0.000000
Total ResolutionMovs : 0   Weighted: 0.000000
Total SplitEdges : 0   Weighted: 0.000000
..........
Total COVERS [# 4] : 1   Weighted: 100.000000
Total BEST_FIT [#11] : 44   Weighted: 4400.000000
Total REG_ORDER [#13] : 13   Weighted: 1300.000000

TUPLE STYLE DUMP WITH REGISTER ASSIGNMENTS
Incoming Parameters: 
BB01 [???..???), preds={} succs={BB02}
=====
  N002.                    NOP      

BB02 [???..???) -> BB04 (cond), preds={BB01} succs={BB03,BB04}
=====
  N006.                    CNS_INT(h) 0x7ffdb6f1d838 global ptr
  N008.                    IND      
  N010.                    CNS_INT   0
  N012.                    EQ       
  N014.                    JTRUE    

BB03 [???..???), preds={BB02} succs={BB04}
=====
  N018.                    CALL help

BB04 [???..???), preds={BB02,BB03} succs={BB05}
=====

BB05 [000..078) -> BB14 (always), preds={BB04} succs={BB14}
=====
  N024.                    IL_OFFSET IL offset: 0x0
  N026.                    NO_OP    
  N028.                    IL_OFFSET IL offset: 0x1
  N030. rax             =  CALL     
  N032.                    V19 MEM; rax
  N034.                    IL_OFFSET IL offset: 0x6
  N036. rcx             =  V19 MEM
  N038.                    V03 MEM; rcx
  N040.                    IL_OFFSET IL offset: 0x7
  N042. rcx             =  LCL_VAR_ADDR V03 loc1          rcx
  N044. rcx             =  PUTARG_REG; rcx
  N046. rax             =  CALL     ; rcx
  N048.                    V20 MEM; rax
  N050.                    IL_OFFSET IL offset: 0xe
  N052. rdx             =  CNS_INT(h) 0xBE2A31F0 "	 Created list"
  N054. rdx             =  IND      ; rdx
  N056. rdx             =  PUTARG_REG; rdx
  N058. rcx             =  V20 MEM
  N060. rcx             =  PUTARG_REG; rcx
  N062. rax             =  CALL     ; rdx,rcx
  N064.                    V21 MEM; rax
  N066.                    IL_OFFSET IL offset: 0x18
  N068. rcx             =  V21 MEM
  N070. rcx             =  PUTARG_REG; rcx
  N072.                    CALL     ; rcx
  N074.                    IL_OFFSET IL offset: 0x1d
  N076.                    NO_OP    
  N078.                    IL_OFFSET IL offset: 0x1e
  N080. rcx             =  CNS_INT(h) 0x7ffdb7022b70 method
  N082. rcx             =  PUTARG_REG; rcx
  N084. rax             =  CALL help; rcx
  N086.                    V22 MEM; rax
  N088. rcx             =  V22 MEM
  N090. rcx             =  PUTARG_REG; rcx
  N092.                    CALL     ; rcx
  N094.                    IL_OFFSET IL offset: 0x24
  N096. rdx             =  V00 MEM
  N098. rcx             =  LEA(b+8) ; rdx
  N100. rdx             =  V22 MEM
  N102.                    STOREIND ; rcx,rdx
  N104.                    IL_OFFSET IL offset: 0x29
  N106. rcx             =  CNS_INT(h) 0x7ffdb6c458b8 token
  N108. rcx             =  PUTARG_REG; rcx
  N110. rax             =  CALL help; rcx
  N112.                    V23 MEM; rax
  N114. rcx             =  V00 MEM
  N116. STK             =  LEA(b+8) ; rcx
  N118. rcx             =  IND      ; STK
  N120. STK             =  LEA(b+8) ; rcx
  N122. rcx             =  IND      ; STK
  N124.                    V24 MEM; rcx
  N126. rcx             =  V23 MEM
  N128. rcx             =  PUTARG_REG; rcx
  N130.                    CALL     ; rcx
  N132.                    IL_OFFSET IL offset: 0x39
  N134. rdx             =  V24 MEM
  N136. rcx             =  LEA(b+16); rdx
  N138. rdx             =  V23 MEM
  N140.                    STOREIND ; rcx,rdx
  N142.                    IL_OFFSET IL offset: 0x3e
  N144. rcx             =  CNS_INT(h) 0x7ffdb7026348 token
  N146. rcx             =  PUTARG_REG; rcx
  N148. rax             =  CALL help; rcx
  N150.                    V25 MEM; rax
  N152. rcx             =  V25 MEM
  N154. rcx             =  PUTARG_REG; rcx
  N156. rdx             =  V00 MEM
  N158. rdx             =  PUTARG_REG; rdx
  N160. r8              =  CNS_INT(h) 0x7ffdb6c613f8 ftn
  N162. r8              =  PUTARG_REG; r8
  N164.                    CALL     ; rcx,rdx,r8
  N166.                    IL_OFFSET IL offset: 0x4a
  N168. rcx             =  CNS_INT(h) 0x7ffdb6dc4e80 token
  N170. rcx             =  PUTARG_REG; rcx
  N172. rax             =  CALL help; rcx
  N174.                    V26 MEM; rax
  N176. rcx             =  V26 MEM
  N178. rcx             =  PUTARG_REG; rcx
  N180. rdx             =  V25 MEM
  N182. rdx             =  PUTARG_REG; rdx
  N184.                    CALL     ; rcx,rdx
  N186.                    IL_OFFSET IL offset: 0x4f
  N188. rcx             =  V26 MEM
  N190.                    V02 MEM; rcx
  N192.                    IL_OFFSET IL offset: 0x50
  N194. rcx             =  V02 MEM
  N196. rcx             =  PUTARG_REG; rcx
  N198.                    CALL nullcheck; rcx
  N200.                    IL_OFFSET IL offset: 0x56
  N202.                    NO_OP    
  N204.                    IL_OFFSET IL offset: 0x57
  N206. rax             =  CALL     
  N208.                    V27 MEM; rax
  N210.                    IL_OFFSET IL offset: 0x5c
  N212. rcx             =  V27 MEM
  N214.                    V03 MEM; rcx
  N216.                    IL_OFFSET IL offset: 0x5d
  N218. rcx             =  LCL_VAR_ADDR V03 loc1          rcx
  N220. rcx             =  PUTARG_REG; rcx
  N222. rax             =  CALL     ; rcx
  N224.                    V28 MEM; rax
  N226.                    IL_OFFSET IL offset: 0x64
  N228. rdx             =  CNS_INT(h) 0xBE2A31F8 "	 Consumer thread started, adding items..."
  N230. rdx             =  IND      ; rdx
  N232. rdx             =  PUTARG_REG; rdx
  N234. rcx             =  V28 MEM
  N236. rcx             =  PUTARG_REG; rcx
  N238. rax             =  CALL     ; rdx,rcx
  N240.                    V29 MEM; rax
  N242.                    IL_OFFSET IL offset: 0x6e
  N244. rcx             =  V29 MEM
  N246. rcx             =  PUTARG_REG; rcx
  N248.                    CALL     ; rcx
  N250.                    IL_OFFSET IL offset: 0x73
  N252.                    NO_OP    
  N254.                    IL_OFFSET IL offset: 0x74
  N256. rdx             =  CNS_INT   0
  N258.                    V04 MEM; rdx
  N260.                    IL_OFFSET IL offset: 0x76
  N262.                    NOP      

BB14 [0E6..0F1) -> BB06 (cond), preds={BB05,BB13} succs={BB15,BB06}
=====
  N266.                    IL_OFFSET IL offset: 0xe6
  N268.                    V04 MEM
  N270.                    CNS_INT   10
  N272. rdx             =  LT       
  N274.                    V07 MEM; rdx
  N276.                    IL_OFFSET IL offset: 0xed
  N278.                    V07 MEM
  N280.                    CNS_INT   0
  N282.                    NE       
  N284.                    JTRUE    

BB06 [078..083), preds={BB14} succs={BB07}
=====
  N288.                    IL_OFFSET IL offset: 0x78
  N290.                    NO_OP    
  N292.                    IL_OFFSET IL offset: 0x79
  N294. rdx             =  V00 MEM
  N296. STK             =  LEA(b+8) ; rdx
  N298. rdx             =  IND      ; STK
  N300.                    V05 MEM; rdx
  N302.                    IL_OFFSET IL offset: 0x80
  N304. rdx             =  CNS_INT   0
  N306.                    V06 MEM; rdx

BB07 [083..0D5) -> BB08 (always), preds={BB06} succs={BB08}
=====
  N310.                    IL_OFFSET IL offset: 0x83
  N312. rdx             =  LCL_VAR_ADDR V06 loc4          rdx
  N314. rdx             =  PUTARG_REG; rdx
  N316. rcx             =  V05 MEM
  N318. rcx             =  PUTARG_REG; rcx
  N320.                    CALL     ; rdx,rcx
  N322.                    IL_OFFSET IL offset: 0x8b
  N324.                    NO_OP    
  N326.                    IL_OFFSET IL offset: 0x8c
  N328.                    NO_OP    
  N330.                    IL_OFFSET IL offset: 0x8d
  N332. rcx             =  CNS_INT(h) 0x7ffdb70260c8 method
  N334. rcx             =  PUTARG_REG; rcx
  N336. rax             =  CALL help; rcx
  N338.                    V30 MEM; rax
  N340. rcx             =  V00 MEM
  N342. STK             =  LEA(b+8) ; rcx
  N344. rcx             =  IND      ; STK
  N346. STK             =  LEA(b+8) ; rcx
  N348. rcx             =  IND      ; STK
  N350.                    V31 MEM; rcx
  N352. rcx             =  V30 MEM
  N354. rcx             =  PUTARG_REG; rcx
  N356.                    CALL     ; rcx
  N358.                    IL_OFFSET IL offset: 0x9d
  N360. rdx             =  V31 MEM
  N362. rcx             =  LEA(b+8) ; rdx
  N364. rdx             =  V30 MEM
  N366.                    STOREIND ; rcx,rdx
  N368.                    IL_OFFSET IL offset: 0xa2
  N370. rdx             =  V00 MEM
  N372. STK             =  LEA(b+8) ; rdx
  N374. rdx             =  IND      ; STK
  N376. rcx             =  LEA(b+8) ; rdx
  N378. rdx             =  V00 MEM
  N380. STK             =  LEA(b+8) ; rdx
  N382. rdx             =  IND      ; STK
  N384. STK             =  LEA(b+8) ; rdx
  N386. rdx             =  IND      ; STK
  N388. STK             =  LEA(b+8) ; rdx
  N390. rdx             =  IND      ; STK
  N392.                    STOREIND ; rcx,rdx
  N394.                    IL_OFFSET IL offset: 0xbd
  N396. rcx             =  CNS_INT(h) 0x7ffdb6c458b8 token
  N398. rcx             =  PUTARG_REG; rcx
  N400. rax             =  CALL help; rcx
  N402.                    V32 MEM; rax
  N404. rcx             =  V00 MEM
  N406. STK             =  LEA(b+8) ; rcx
  N408. rcx             =  IND      ; STK
  N410. STK             =  LEA(b+8) ; rcx
  N412. rcx             =  IND      ; STK
  N414.                    V33 MEM; rcx
  N416. rcx             =  V32 MEM
  N418. rcx             =  PUTARG_REG; rcx
  N420.                    CALL     ; rcx
  N422.                    IL_OFFSET IL offset: 0xcd
  N424. rdx             =  V33 MEM
  N426. rcx             =  LEA(b+16); rdx
  N428. rdx             =  V32 MEM
  N430.                    STOREIND ; rcx,rdx
  N432.                    IL_OFFSET IL offset: 0xd2
  N434.                    NO_OP    
  N436.                    IL_OFFSET IL offset: 0xd3
  N438.                    NOP      

BB08 [???..???) -> BB10 (callf), preds={BB07} succs={BB10}
=====

BB10 [0D5..0D9) -> BB12 (cond), preds={BB08} succs={BB11,BB12}
=====
  N444.                    IL_OFFSET IL offset: 0xd5
  N446. rcx             =  V06 MEM
  N448. rcx             =  CAST     ; rcx
  N450.                    CNS_INT   0
  N452.                    EQ       ; rcx
  N454.                    JTRUE    

BB11 [0D9..0E0), preds={BB10} succs={BB12}
=====
  N458.                    IL_OFFSET IL offset: 0xd9
  N460. rcx             =  V05 MEM
  N462. rcx             =  PUTARG_REG; rcx
  N464.                    CALL     ; rcx
  N466.                    IL_OFFSET IL offset: 0xdf
  N468.                    NO_OP    

BB12 [0E0..0E1) (finret), preds={BB10,BB11} succs={BB09}
=====
  N472.                    IL_OFFSET IL offset: 0xe0
  N474.                    RETFILT  

BB09 [???..???) -> BB13 (ALWAYS), preds={BB12} succs={BB13}
=====

BB13 [0E1..0E6), preds={BB09} succs={BB14}
=====
  N480.                    IL_OFFSET IL offset: 0xe1
  N482.                    NO_OP    
  N484.                    IL_OFFSET IL offset: 0xe2
  N486. rax             =  V04 MEM
  N488.                    CNS_INT   1
  N490. rax             =  ADD      ; rax
  N492.                    V04 MEM; rax

BB15 [0F1..110) -> BB28 (always), preds={BB14} succs={BB28}
=====
  N496.                    IL_OFFSET IL offset: 0xf1
  N498. rax             =  CALL     
  N500.                    V34 MEM; rax
  N502.                    IL_OFFSET IL offset: 0xf6
  N504. rcx             =  V34 MEM
  N506.                    V03 MEM; rcx
  N508.                    IL_OFFSET IL offset: 0xf7
  N510. rcx             =  LCL_VAR_ADDR V03 loc1          rcx
  N512. rcx             =  PUTARG_REG; rcx
  N514. rax             =  CALL     ; rcx
  N516.                    V35 MEM; rax
  N518.                    IL_OFFSET IL offset: 0xfe
  N520. rdx             =  CNS_INT(h) 0xBE2A3200 "	 Waiting for list processing to complete..."
  N522. rdx             =  IND      ; rdx
  N524. rdx             =  PUTARG_REG; rdx
  N526. rcx             =  V35 MEM
  N528. rcx             =  PUTARG_REG; rcx
  N530. rax             =  CALL     ; rdx,rcx
  N532.                    V36 MEM; rax
  N534.                    IL_OFFSET IL offset: 0x108
  N536. rcx             =  V36 MEM
  N538. rcx             =  PUTARG_REG; rcx
  N540.                    CALL     ; rcx
  N542.                    IL_OFFSET IL offset: 0x10d
  N544.                    NO_OP    
  N546.                    IL_OFFSET IL offset: 0x10e
  N548.                    NOP      

BB28 [161..166) -> BB16 (always), preds={BB15,BB27} succs={BB16}
=====
  N552.                    IL_OFFSET IL offset: 0x161
  N554.                    CNS_INT   1
  N556.                    V11 MEM
  N558.                    IL_OFFSET IL offset: 0x164
  N560.                    NOP      

BB16 [110..11C), preds={BB28} succs={BB17}
=====
  N564.                    IL_OFFSET IL offset: 0x110
  N566.                    NO_OP    
  N568.                    IL_OFFSET IL offset: 0x111
  N570. rdx             =  V00 MEM
  N572. STK             =  LEA(b+8) ; rdx
  N574. rdx             =  IND      ; STK
  N576.                    V08 MEM; rdx
  N578.                    IL_OFFSET IL offset: 0x119
  N580. rdx             =  CNS_INT   0
  N582.                    V09 MEM; rdx

BB17 [11C..145) -> BB19 (cond), preds={BB16} succs={BB18,BB19}
=====
  N586.                    IL_OFFSET IL offset: 0x11c
  N588. rdx             =  LCL_VAR_ADDR V09 loc7          rdx
  N590. rdx             =  PUTARG_REG; rdx
  N592. rcx             =  V08 MEM
  N594. rcx             =  PUTARG_REG; rcx
  N596.                    CALL     ; rdx,rcx
  N598.                    IL_OFFSET IL offset: 0x125
  N600.                    NO_OP    
  N602.                    IL_OFFSET IL offset: 0x126
  N604.                    NO_OP    
  N606.                    IL_OFFSET IL offset: 0x127
  N608. rcx             =  V00 MEM
  N610. STK             =  LEA(b+8) ; rcx
  N612. rcx             =  IND      ; STK
  N614. STK             =  LEA(b+8) ; rcx
  N616. rcx             =  IND      ; STK
  N618. rax             =  V00 MEM
  N620. STK             =  LEA(b+8) ; rax
  N622. rax             =  IND      ; STK
  N624. STK             =  LEA(b+16); rax
  N626. STK             =  IND      ; STK
  N628. rcx             =  EQ       ; rcx,STK
  N630.                    V10 MEM; rcx
  N632.                    IL_OFFSET IL offset: 0x141
  N634.                    V10 MEM
  N636.                    CNS_INT   0
  N638.                    EQ       
  N640.                    JTRUE    

BB18 [145..148) -> BB20 (always), preds={BB17} succs={BB20}
=====
  N644.                    IL_OFFSET IL offset: 0x145
  N646.                    NO_OP    
  N648.                    IL_OFFSET IL offset: 0x146
  N650.                    NOP      

BB19 [148..14B) -> BB22 (always), preds={BB17} succs={BB22}
=====
  N654.                    IL_OFFSET IL offset: 0x148
  N656.                    NO_OP    
  N658.                    IL_OFFSET IL offset: 0x149
  N660.                    NOP      

BB20 [???..???) -> BB24 (callf), preds={BB18} succs={BB24}
=====

BB22 [???..???) -> BB24 (callf), preds={BB19} succs={BB24}
=====

BB24 [14B..14F) -> BB26 (cond), preds={BB20,BB22} succs={BB25,BB26}
=====
  N668.                    IL_OFFSET IL offset: 0x14b
  N670. rcx             =  V09 MEM
  N672. rcx             =  CAST     ; rcx
  N674.                    CNS_INT   0
  N676.                    EQ       ; rcx
  N678.                    JTRUE    

BB25 [14F..157), preds={BB24} succs={BB26}
=====
  N682.                    IL_OFFSET IL offset: 0x14f
  N684. rcx             =  V08 MEM
  N686. rcx             =  PUTARG_REG; rcx
  N688.                    CALL     ; rcx
  N690.                    IL_OFFSET IL offset: 0x156
  N692.                    NO_OP    

BB26 [157..158) (finret), preds={BB24,BB25} succs={BB21,BB23}
=====
  N696.                    IL_OFFSET IL offset: 0x157
  N698.                    RETFILT  

BB21 [???..???) -> BB29 (ALWAYS), preds={BB26} succs={BB29}
=====

BB23 [???..???) -> BB27 (ALWAYS), preds={BB26} succs={BB27}
=====

BB27 [158..161), preds={BB23} succs={BB28}
=====
  N706.                    IL_OFFSET IL offset: 0x158
  N708. rcx             =  CNS_INT   100
  N710. rcx             =  PUTARG_REG; rcx
  N712.                    CALL     ; rcx
  N714.                    IL_OFFSET IL offset: 0x15f
  N716.                    NO_OP    
  N718.                    IL_OFFSET IL offset: 0x160
  N720.                    NO_OP    

BB29 [166..1B1) -> BB39 (always), preds={BB21} succs={BB39}
=====
  N724.                    IL_OFFSET IL offset: 0x166
  N726. rax             =  CALL     
  N728.                    V37 MEM; rax
  N730.                    IL_OFFSET IL offset: 0x16b
  N732. rcx             =  V37 MEM
  N734.                    V03 MEM; rcx
  N736.                    IL_OFFSET IL offset: 0x16c
  N738. rcx             =  LCL_VAR_ADDR V03 loc1          rcx
  N740. rcx             =  PUTARG_REG; rcx
  N742. rax             =  CALL     ; rcx
  N744.                    V38 MEM; rax
  N746.                    IL_OFFSET IL offset: 0x173
  N748. rdx             =  CNS_INT(h) 0xBE2A3208 "	 Done.  Profiler is active, available options:"
  N750. rdx             =  IND      ; rdx
  N752. rdx             =  PUTARG_REG; rdx
  N754. rcx             =  V38 MEM
  N756. rcx             =  PUTARG_REG; rcx
  N758. rax             =  CALL     ; rdx,rcx
  N760.                    V39 MEM; rax
  N762.                    IL_OFFSET IL offset: 0x17d
  N764. rcx             =  V39 MEM
  N766. rcx             =  PUTARG_REG; rcx
  N768.                    CALL     ; rcx
  N770.                    IL_OFFSET IL offset: 0x182
  N772.                    NO_OP    
  N774.                    IL_OFFSET IL offset: 0x183
  N776. rcx             =  CNS_INT(h) 0xBE2A3210 "   Q = quit"
  N778. rcx             =  IND      ; rcx
  N780. rcx             =  PUTARG_REG; rcx
  N782.                    CALL     ; rcx
  N784.                    IL_OFFSET IL offset: 0x18d
  N786.                    NO_OP    
  N788.                    IL_OFFSET IL offset: 0x18e
  N790. rcx             =  CNS_INT(h) 0xBE2A3218 "   H = heap snapshot"
  N792. rcx             =  IND      ; rcx
  N794. rcx             =  PUTARG_REG; rcx
  N796.                    CALL     ; rcx
  N798.                    IL_OFFSET IL offset: 0x198
  N800.                    NO_OP    
  N802.                    IL_OFFSET IL offset: 0x199
  N804. rcx             =  CNS_INT(h) 0xBE2A3220 "   G = GC (max gen)"
  N806. rcx             =  IND      ; rcx
  N808. rcx             =  PUTARG_REG; rcx
  N810.                    CALL     ; rcx
  N812.                    IL_OFFSET IL offset: 0x1a3
  N814.                    NO_OP    
  N816.                    IL_OFFSET IL offset: 0x1a4
  N818. rcx             =  CNS_INT(h) 0xBE2A3228 "   R = clear the running flag to stop the consumer thread"
  N820. rcx             =  IND      ; rcx
  N822. rcx             =  PUTARG_REG; rcx
  N824.                    CALL     ; rcx
  N826.                    IL_OFFSET IL offset: 0x1ae
  N828.                    NO_OP    
  N830.                    IL_OFFSET IL offset: 0x1af
  N832.                    NOP      

BB39 [225..22A) -> BB30 (always), preds={BB29,BB38} succs={BB30}
=====
  N836.                    IL_OFFSET IL offset: 0x225
  N838.                    CNS_INT   1
  N840.                    V17 MEM
  N842.                    IL_OFFSET IL offset: 0x228
  N844.                    NOP      

BB30 [1B1..1CA) -> BB32 (cond), preds={BB39} succs={BB31,BB32}
=====
  N848.                    IL_OFFSET IL offset: 0x1b1
  N850.                    NO_OP    
  N852.                    IL_OFFSET IL offset: 0x1b2
  N854. rcx             =  LCL_VAR_ADDR V40 tmp22         rcx
  N856. rcx             =  PUTARG_REG; rcx
  N858.                    CALL     ; rcx
  N860.                    IL_OFFSET IL offset: 0x1b7
  N862.                    V40 MEM
  N864.                    LCL_VAR_ADDR V12 loc10         NA
  N866.                    STORE_BLK
  N868.                    IL_OFFSET IL offset: 0x1b9
  N870. rcx             =  LCL_VAR_ADDR V12 loc10         rcx
  N872. rcx             =  PUTARG_REG; rcx
  N874. rax             =  CALL     ; rcx
  N876.                    V41 MEM; rax
  N878.                    IL_OFFSET IL offset: 0x1c0
  N880.                    V41 MEM
  N882.                    CNS_INT   71
  N884. rax             =  EQ       
  N886.                    V13 MEM; rax
  N888.                    IL_OFFSET IL offset: 0x1c6
  N890.                    V13 MEM
  N892.                    CNS_INT   0
  N894.                    EQ       
  N896.                    JTRUE    

BB31 [1CA..1D9) -> BB38 (always), preds={BB30} succs={BB38}
=====
  N900.                    IL_OFFSET IL offset: 0x1ca
  N902.                    NO_OP    
  N904.                    IL_OFFSET IL offset: 0x1cb
  N906. rax             =  CALL     
  N908.                    V45 MEM; rax
  N910.                    IL_OFFSET IL offset: 0x1d0
  N912. rcx             =  V45 MEM
  N914. rcx             =  PUTARG_REG; rcx
  N916.                    CALL     ; rcx
  N918.                    IL_OFFSET IL offset: 0x1d5
  N920.                    NO_OP    
  N922.                    IL_OFFSET IL offset: 0x1d6
  N924.                    NO_OP    
  N926.                    IL_OFFSET IL offset: 0x1d7
  N928.                    NOP      

BB32 [1D9..1EA) -> BB34 (cond), preds={BB30} succs={BB33,BB34}
=====
  N932.                    IL_OFFSET IL offset: 0x1d9
  N934. rcx             =  LCL_VAR_ADDR V12 loc10         rcx
  N936. rcx             =  PUTARG_REG; rcx
  N938. rax             =  CALL     ; rcx
  N940.                    V42 MEM; rax
  N942.                    IL_OFFSET IL offset: 0x1e0
  N944.                    V42 MEM
  N946.                    CNS_INT   72
  N948. rax             =  EQ       
  N950.                    V14 MEM; rax
  N952.                    IL_OFFSET IL offset: 0x1e6
  N954.                    V14 MEM
  N956.                    CNS_INT   0
  N958.                    EQ       
  N960.                    JTRUE    

BB33 [1EA..1F4) -> BB38 (always), preds={BB32} succs={BB38}
=====
  N964.                    IL_OFFSET IL offset: 0x1ea
  N966.                    NO_OP    
  N968.                    IL_OFFSET IL offset: 0x1eb
  N970.                    CALL     
  N972.                    IL_OFFSET IL offset: 0x1f0
  N974.                    NO_OP    
  N976.                    IL_OFFSET IL offset: 0x1f1
  N978.                    NO_OP    
  N980.                    IL_OFFSET IL offset: 0x1f2
  N982.                    NOP      

BB34 [1F4..205) -> BB36 (cond), preds={BB32} succs={BB35,BB36}
=====
  N986.                    IL_OFFSET IL offset: 0x1f4
  N988. rcx             =  LCL_VAR_ADDR V12 loc10         rcx
  N990. rcx             =  PUTARG_REG; rcx
  N992. rax             =  CALL     ; rcx
  N994.                    V43 MEM; rax
  N996.                    IL_OFFSET IL offset: 0x1fb
  N998.                    V43 MEM
  N1000.                    CNS_INT   82
  N1002. rcx             =  EQ       
  N1004.                    V15 MEM; rcx
  N1006.                    IL_OFFSET IL offset: 0x201
  N1008.                    V15 MEM
  N1010.                    CNS_INT   0
  N1012.                    EQ       
  N1014.                    JTRUE    

BB35 [205..210) -> BB38 (always), preds={BB34} succs={BB38}
=====
  N1018.                    IL_OFFSET IL offset: 0x205
  N1020.                    NO_OP    
  N1022.                    IL_OFFSET IL offset: 0x206
  N1024. rcx             =  V00 MEM
  N1026. STK             =  LEA(b+16); rcx
  N1028.                    CNS_INT   0
  N1030.                    STOREIND ; STK
  N1032.                    IL_OFFSET IL offset: 0x20d
  N1034.                    NO_OP    
  N1036.                    IL_OFFSET IL offset: 0x20e
  N1038.                    NOP      

BB36 [210..221) -> BB38 (cond), preds={BB34} succs={BB37,BB38}
=====
  N1042.                    IL_OFFSET IL offset: 0x210
  N1044. rcx             =  LCL_VAR_ADDR V12 loc10         rcx
  N1046. rcx             =  PUTARG_REG; rcx
  N1048. rax             =  CALL     ; rcx
  N1050.                    V44 MEM; rax
  N1052.                    IL_OFFSET IL offset: 0x217
  N1054.                    V44 MEM
  N1056.                    CNS_INT   81
  N1058. rax             =  EQ       
  N1060.                    V16 MEM; rax
  N1062.                    IL_OFFSET IL offset: 0x21d
  N1064.                    V16 MEM
  N1066.                    CNS_INT   0
  N1068.                    EQ       
  N1070.                    JTRUE    

BB37 [221..224) -> BB40 (always), preds={BB36} succs={BB40}
=====
  N1074.                    IL_OFFSET IL offset: 0x221
  N1076.                    NO_OP    
  N1078.                    IL_OFFSET IL offset: 0x222
  N1080.                    NOP      

BB38 [224..225), preds={BB31,BB33,BB35,BB36} succs={BB39}
=====
  N1084.                    IL_OFFSET IL offset: 0x224
  N1086.                    NO_OP    

BB40 [22A..232) (return), preds={BB37} succs={}
=====
  N1090.                    IL_OFFSET IL offset: 0x22a
  N1092. rax             =  V00 MEM
  N1094. STK             =  LEA(b+16); rax
  N1096.                    CNS_INT   0
  N1098.                    STOREIND ; STK
  N1100.                    IL_OFFSET IL offset: 0x231
  N1102.                    RETURN   




*************** Finishing PHASE Linear scan register alloc
*************** In genGenerateCode()

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [???..???)                                     i internal hascall LIR 
BB02 [0038]  1       BB01                  1       [???..???)-> BB04 ( cond )                     internal LIR 
BB03 [0039]  1       BB02                  0.50    [???..???)                                     internal LIR 
BB04 [0037]  2       BB02,BB03             1       [???..???)                                     i internal hascall LIR 
BB05 [0001]  1       BB04                  1       [000..078)-> BB14 (always)                     i hascall gcsafe newobj LIR 
BB06 [0002]  1       BB14                  1       [078..083)                                     i bwd bwd-target LIR 
BB07 [0003]  1  0    BB06                  1       [083..0D5)-> BB08 (always) T0      try { }     keep i try hascall gcsafe newobj bwd LIR 
BB08 [0031]  1       BB07                  1       [???..???)-> BB10 (callf )                     i internal LIR 
BB09 [0032]  1       BB12                  1       [???..???)-> BB13 (ALWAYS)                     i internal LIR KEEP 
BB13 [0007]  1       BB09                  1       [0E1..0E6)                                     i bwd LIR 
BB14 [0008]  2       BB05,BB13             1       [0E6..0F1)-> BB06 ( cond )                     i bwd LIR 
BB15 [0009]  1       BB14                  1       [0F1..110)-> BB28 (always)                     i hascall gcsafe LIR 
BB16 [0010]  1       BB28                  1       [110..11C)                                     i bwd bwd-target LIR 
BB17 [0011]  1  1    BB16                  1       [11C..145)-> BB19 ( cond ) T1      try {       keep i try hascall gcsafe bwd LIR 
BB18 [0012]  1  1    BB17                  1       [145..148)-> BB20 (always) T1                  i bwd LIR 
BB19 [0013]  1  1    BB17                  1       [148..14B)-> BB22 (always) T1      }           i bwd LIR 
BB20 [0035]  1       BB18                  1       [???..???)-> BB24 (callf )                     i internal LIR 
BB21 [0036]  1       BB26                  1       [???..???)-> BB29 (ALWAYS)                     i internal LIR KEEP 
BB22 [0033]  1       BB19                  1       [???..???)-> BB24 (callf )                     i internal LIR 
BB23 [0034]  1       BB26                  1       [???..???)-> BB27 (ALWAYS)                     i internal LIR KEEP 
BB27 [0017]  1       BB23                  1       [158..161)                                     i hascall gcsafe bwd LIR 
BB28 [0018]  2       BB15,BB27             1       [161..166)-> BB16 (always)                     i bwd LIR 
BB29 [0019]  1       BB21                  1       [166..1B1)-> BB39 (always)                     i hascall gcsafe LIR 
BB30 [0020]  1       BB39                  1       [1B1..1CA)-> BB32 ( cond )                     i hascall gcsafe bwd bwd-target LIR 
BB31 [0021]  1       BB30                  1       [1CA..1D9)-> BB38 (always)                     i hascall gcsafe bwd LIR 
BB32 [0022]  1       BB30                  1       [1D9..1EA)-> BB34 ( cond )                     i hascall gcsafe bwd LIR 
BB33 [0023]  1       BB32                  1       [1EA..1F4)-> BB38 (always)                     i hascall gcsafe bwd LIR 
BB34 [0024]  1       BB32                  1       [1F4..205)-> BB36 ( cond )                     i hascall gcsafe bwd LIR 
BB35 [0025]  1       BB34                  1       [205..210)-> BB38 (always)                     i bwd LIR 
BB36 [0026]  1       BB34                  1       [210..221)-> BB38 ( cond )                     i hascall gcsafe bwd LIR 
BB37 [0027]  1       BB36                  1       [221..224)-> BB40 (always)                     i bwd LIR 
BB38 [0028]  4       BB31,BB33,BB35,BB36   1       [224..225)                                     i bwd LIR 
BB39 [0029]  2       BB29,BB38             1       [225..22A)-> BB30 (always)                     i bwd LIR 
BB40 [0030]  1       BB37                  1       [22A..232)        (return)                     i LIR 
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ funclets follow
BB10 [0004]  2     0 BB08                  1       [0D5..0D9)-> BB12 ( cond )    H0 F finally {   keep i flet bwd LIR 
BB11 [0005]  1     0 BB10                  1       [0D9..0E0)                    H0               i hascall bwd LIR 
BB12 [0006]  2     0 BB10,BB11             1       [0E0..0E1)        (finret)    H0   }           i bwd LIR 
BB24 [0014]  3     1 BB20,BB22             1       [14B..14F)-> BB26 ( cond )    H1 F finally {   keep i flet bwd LIR 
BB25 [0015]  1     1 BB24                  1       [14F..157)                    H1               i hascall bwd LIR 
BB26 [0016]  2     1 BB24,BB25             1       [157..158)        (finret)    H1   }           i bwd LIR 
-----------------------------------------------------------------------------------------------------------------------------------------

*************** Starting PHASE Generate code
*************** In fgDebugCheckBBlist
Finalizing stack frame
must init V02 because it has a GC ref
must init V03 because compInitMem is set and it is not a temp
must init V04 because compInitMem is set and it is not a temp
must init V05 because it has a GC ref
must init V06 because compInitMem is set and it is not a temp
must init V07 because compInitMem is set and it is not a temp
must init V08 because it has a GC ref
must init V09 because compInitMem is set and it is not a temp
must init V10 because compInitMem is set and it is not a temp
must init V11 because compInitMem is set and it is not a temp
must init V12 because compInitMem is set and it is not a temp
must init V13 because compInitMem is set and it is not a temp
must init V14 because compInitMem is set and it is not a temp
must init V15 because compInitMem is set and it is not a temp
must init V16 because compInitMem is set and it is not a temp
must init V17 because compInitMem is set and it is not a temp
must init V20 because it has a GC ref
must init V21 because it has a GC ref
must init V22 because it has a GC ref
must init V23 because it has a GC ref
must init V24 because it has a GC ref
must init V25 because it has a GC ref
must init V26 because it has a GC ref
must init V28 because it has a GC ref
must init V29 because it has a GC ref
must init V30 because it has a GC ref
must init V31 because it has a GC ref
must init V32 because it has a GC ref
must init V33 because it has a GC ref
must init V35 because it has a GC ref
must init V36 because it has a GC ref
must init V38 because it has a GC ref
must init V39 because it has a GC ref
Modified regs: [rax rcx rdx r8-r11 mm0-mm5]
Callee-saved registers pushed: 0 []
*************** In lvaAssignFrameOffsets(FINAL_FRAME_LAYOUT)
Assign V02 loc0, size=8, stkOffs=-0x18
Assign V03 loc1, size=8, stkOffs=-0x20
Assign V04 loc2, size=4, stkOffs=-0x24
Pad V05 loc3, size=8, stkOffs=-0x28, pad=4
Assign V05 loc3, size=8, stkOffs=-0x30
Assign V06 loc4, size=8, stkOffs=-0x38
Assign V07 loc5, size=4, stkOffs=-0x3c
Pad V08 loc6, size=8, stkOffs=-0x40, pad=4
Assign V08 loc6, size=8, stkOffs=-0x48
Assign V09 loc7, size=8, stkOffs=-0x50
Assign V10 loc8, size=4, stkOffs=-0x54
Assign V11 loc9, size=4, stkOffs=-0x58
Assign V12 loc10, size=16, stkOffs=-0x68
Assign V13 loc11, size=4, stkOffs=-0x6c
Assign V14 loc12, size=4, stkOffs=-0x70
Assign V15 loc13, size=4, stkOffs=-0x74
Assign V16 loc14, size=4, stkOffs=-0x78
Assign V17 loc15, size=4, stkOffs=-0x7c
Pad V19 tmp1, size=8, stkOffs=-0x80, pad=4
Assign V19 tmp1, size=8, stkOffs=-0x88
Assign V20 tmp2, size=8, stkOffs=-0x90
Assign V21 tmp3, size=8, stkOffs=-0x98
Assign V22 tmp4, size=8, stkOffs=-0xa0
Assign V23 tmp5, size=8, stkOffs=-0xa8
Assign V24 tmp6, size=8, stkOffs=-0xb0
Assign V25 tmp7, size=8, stkOffs=-0xb8
Assign V26 tmp8, size=8, stkOffs=-0xc0
Assign V27 tmp9, size=8, stkOffs=-0xc8
Assign V28 tmp10, size=8, stkOffs=-0xd0
Assign V29 tmp11, size=8, stkOffs=-0xd8
Assign V30 tmp12, size=8, stkOffs=-0xe0
Assign V31 tmp13, size=8, stkOffs=-0xe8
Assign V32 tmp14, size=8, stkOffs=-0xf0
Assign V33 tmp15, size=8, stkOffs=-0xf8
Assign V34 tmp16, size=8, stkOffs=-0x100
Assign V35 tmp17, size=8, stkOffs=-0x108
Assign V36 tmp18, size=8, stkOffs=-0x110
Assign V37 tmp19, size=8, stkOffs=-0x118
Assign V38 tmp20, size=8, stkOffs=-0x120
Assign V39 tmp21, size=8, stkOffs=-0x128
Assign V40 tmp22, size=16, stkOffs=-0x138
Assign V41 tmp23, size=4, stkOffs=-0x13c
Assign V42 tmp24, size=4, stkOffs=-0x140
Assign V43 tmp25, size=4, stkOffs=-0x144
Assign V44 tmp26, size=4, stkOffs=-0x148
Assign V45 tmp27, size=4, stkOffs=-0x14c
Pad V46 PSPSym, size=8, stkOffs=-0x150, pad=4
Assign V46 PSPSym, size=8, stkOffs=-0x158
Assign V18 OutArgs, size=32, stkOffs=-0x178
--- delta bump 8 for RA
--- delta bump 8 for FP
--- delta bump 0 for RBP frame
--- virtual stack offset to actual stack offset delta is 16
-- V00 was 0, now 16
-- V01 was 8, now 24
-- V02 was -24, now -8
-- V03 was -32, now -16
-- V04 was -36, now -20
-- V05 was -48, now -32
-- V06 was -56, now -40
-- V07 was -60, now -44
-- V08 was -72, now -56
-- V09 was -80, now -64
-- V10 was -84, now -68
-- V11 was -88, now -72
-- V12 was -104, now -88
-- V13 was -108, now -92
-- V14 was -112, now -96
-- V15 was -116, now -100
-- V16 was -120, now -104
-- V17 was -124, now -108
-- V18 was -376, now -360
-- V19 was -136, now -120
-- V20 was -144, now -128
-- V21 was -152, now -136
-- V22 was -160, now -144
-- V23 was -168, now -152
-- V24 was -176, now -160
-- V25 was -184, now -168
-- V26 was -192, now -176
-- V27 was -200, now -184
-- V28 was -208, now -192
-- V29 was -216, now -200
-- V30 was -224, now -208
-- V31 was -232, now -216
-- V32 was -240, now -224
-- V33 was -248, now -232
-- V34 was -256, now -240
-- V35 was -264, now -248
-- V36 was -272, now -256
-- V37 was -280, now -264
-- V38 was -288, now -272
-- V39 was -296, now -280
-- V40 was -312, now -296
-- V41 was -316, now -300
-- V42 was -320, now -304
-- V43 was -324, now -308
-- V44 was -328, now -312
-- V45 was -332, now -316
-- V46 was -352, now -336
; Final local variable assignments
;
;  V00 this         [V00    ] (  1,  1   )     ref  ->  [rbp+10H]   do-not-enreg[] this class-hnd
;  V01 arg1         [V01    ] (  1,  1   )     ref  ->  [rbp+18H]   do-not-enreg[] class-hnd
;  V02 loc0         [V02    ] (  1,  1   )     ref  ->  [rbp-08H]   do-not-enreg[] must-init class-hnd exact
;  V03 loc1         [V03    ] (  1,  1   )  struct ( 8) [rbp-10H]   do-not-enreg[XSB] must-init addr-exposed ld-addr-op
;  V04 loc2         [V04    ] (  1,  1   )     int  ->  [rbp-14H]   do-not-enreg[] must-init
;  V05 loc3         [V05    ] (  1,  1   )     ref  ->  [rbp-20H]   do-not-enreg[] must-init class-hnd
;  V06 loc4         [V06    ] (  1,  1   )    bool  ->  [rbp-28H]   do-not-enreg[XB] must-init addr-exposed ld-addr-op
;  V07 loc5         [V07    ] (  1,  1   )    bool  ->  [rbp-2CH]   do-not-enreg[] must-init
;  V08 loc6         [V08    ] (  1,  1   )     ref  ->  [rbp-38H]   do-not-enreg[] must-init class-hnd
;  V09 loc7         [V09    ] (  1,  1   )    bool  ->  [rbp-40H]   do-not-enreg[XB] must-init addr-exposed ld-addr-op
;  V10 loc8         [V10    ] (  1,  1   )    bool  ->  [rbp-44H]   do-not-enreg[] must-init
;  V11 loc9         [V11    ] (  1,  1   )    bool  ->  [rbp-48H]   do-not-enreg[] must-init
;  V12 loc10        [V12    ] (  1,  1   )  struct (16) [rbp-58H]   do-not-enreg[XSB] must-init addr-exposed ld-addr-op
;  V13 loc11        [V13    ] (  1,  1   )    bool  ->  [rbp-5CH]   do-not-enreg[] must-init
;  V14 loc12        [V14    ] (  1,  1   )    bool  ->  [rbp-60H]   do-not-enreg[] must-init
;  V15 loc13        [V15    ] (  1,  1   )    bool  ->  [rbp-64H]   do-not-enreg[] must-init
;  V16 loc14        [V16    ] (  1,  1   )    bool  ->  [rbp-68H]   do-not-enreg[] must-init
;  V17 loc15        [V17    ] (  1,  1   )    bool  ->  [rbp-6CH]   do-not-enreg[] must-init
;  V18 OutArgs      [V18    ] (  1,  1   )  lclBlk (32) [rsp+00H]   do-not-enreg[] "OutgoingArgSpace"
;  V19 tmp1         [V19    ] (  1,  1   )  struct ( 8) [rbp-78H]   do-not-enreg[S] "impSpillStackEnsure"
;  V20 tmp2         [V20    ] (  1,  1   )     ref  ->  [rbp-80H]   do-not-enreg[] must-init class-hnd "impSpillStackEnsure"
;  V21 tmp3         [V21    ] (  1,  1   )     ref  ->  [rbp-88H]   do-not-enreg[] must-init class-hnd "impSpillStackEnsure"
;  V22 tmp4         [V22    ] (  1,  1   )     ref  ->  [rbp-90H]   do-not-enreg[] must-init class-hnd exact "NewObj constructor temp"
;  V23 tmp5         [V23    ] (  1,  1   )     ref  ->  [rbp-98H]   do-not-enreg[] must-init class-hnd exact "NewObj constructor temp"
;  V24 tmp6         [V24    ] (  1,  1   )     ref  ->  [rbp-A0H]   do-not-enreg[] must-init class-hnd "impAppendStmt"
;  V25 tmp7         [V25    ] (  1,  1   )     ref  ->  [rbp-A8H]   do-not-enreg[] must-init class-hnd exact "NewObj constructor temp"
;  V26 tmp8         [V26    ] (  1,  1   )     ref  ->  [rbp-B0H]   do-not-enreg[] must-init class-hnd exact "NewObj constructor temp"
;  V27 tmp9         [V27    ] (  1,  1   )  struct ( 8) [rbp-B8H]   do-not-enreg[S] "impSpillStackEnsure"
;  V28 tmp10        [V28    ] (  1,  1   )     ref  ->  [rbp-C0H]   do-not-enreg[] must-init class-hnd "impSpillStackEnsure"
;  V29 tmp11        [V29    ] (  1,  1   )     ref  ->  [rbp-C8H]   do-not-enreg[] must-init class-hnd "impSpillStackEnsure"
;  V30 tmp12        [V30    ] (  1,  1   )     ref  ->  [rbp-D0H]   do-not-enreg[] must-init class-hnd exact "NewObj constructor temp"
;  V31 tmp13        [V31    ] (  1,  1   )     ref  ->  [rbp-D8H]   do-not-enreg[] must-init class-hnd "impAppendStmt"
;  V32 tmp14        [V32    ] (  1,  1   )     ref  ->  [rbp-E0H]   do-not-enreg[] must-init class-hnd exact "NewObj constructor temp"
;  V33 tmp15        [V33    ] (  1,  1   )     ref  ->  [rbp-E8H]   do-not-enreg[] must-init class-hnd "impAppendStmt"
;  V34 tmp16        [V34    ] (  1,  1   )  struct ( 8) [rbp-F0H]   do-not-enreg[S] "impSpillStackEnsure"
;  V35 tmp17        [V35    ] (  1,  1   )     ref  ->  [rbp-F8H]   do-not-enreg[] must-init class-hnd "impSpillStackEnsure"
;  V36 tmp18        [V36    ] (  1,  1   )     ref  ->  [rbp-100H]   do-not-enreg[] must-init class-hnd "impSpillStackEnsure"
;  V37 tmp19        [V37    ] (  1,  1   )  struct ( 8) [rbp-108H]   do-not-enreg[S] "impSpillStackEnsure"
;  V38 tmp20        [V38    ] (  1,  1   )     ref  ->  [rbp-110H]   do-not-enreg[] must-init class-hnd "impSpillStackEnsure"
;  V39 tmp21        [V39    ] (  1,  1   )     ref  ->  [rbp-118H]   do-not-enreg[] must-init class-hnd "impSpillStackEnsure"
;  V40 tmp22        [V40    ] (  1,  1   )  struct (16) [rbp-128H]   do-not-enreg[XSB] addr-exposed "impSpillStackEnsure"
;  V41 tmp23        [V41    ] (  1,  1   )     int  ->  [rbp-12CH]   do-not-enreg[] "impSpillStackEnsure"
;  V42 tmp24        [V42    ] (  1,  1   )     int  ->  [rbp-130H]   do-not-enreg[] "impSpillStackEnsure"
;  V43 tmp25        [V43    ] (  1,  1   )     int  ->  [rbp-134H]   do-not-enreg[] "impSpillStackEnsure"
;  V44 tmp26        [V44    ] (  1,  1   )     int  ->  [rbp-138H]   do-not-enreg[] "impSpillStackEnsure"
;  V45 tmp27        [V45    ] (  1,  1   )     int  ->  [rbp-13CH]   do-not-enreg[] "impSpillStackEnsure"
;  V46 PSPSym       [V46    ] (  1,  1   )    long  ->  [rbp-150H]   do-not-enreg[X] addr-exposed "PSPSym"
;
; Lcl frame size = 368
Mark labels for codegen
  BB01 : first block
  BB04 : branch target
  BB14 : branch target
  BB08 : branch target
  BB13 : callfinally thunk region end
  BB13 : branch target
  BB06 : branch target
  BB28 : branch target
  BB19 : branch target
  BB20 : branch target
  BB22 : branch target
  BB22 : callfinally thunk region end
  BB29 : branch target
  BB27 : callfinally thunk region end
  BB27 : branch target
  BB16 : branch target
  BB39 : branch target
  BB32 : branch target
  BB38 : branch target
  BB34 : branch target
  BB38 : branch target
  BB36 : branch target
  BB38 : branch target
  BB38 : branch target
  BB40 : branch target
  BB30 : branch target
  BB12 : branch target
  BB26 : branch target
  BB07 : try begin
  BB10 : hnd begin
  BB08 : try end
  BB24 : hnd end
  BB17 : try begin
  BB24 : hnd begin
  BB20 : try end
*************** After genMarkLabelsForCodegen()

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [???..???)                                     i internal label hascall LIR 
BB02 [0038]  1       BB01                  1       [???..???)-> BB04 ( cond )                     internal LIR 
BB03 [0039]  1       BB02                  0.50    [???..???)                                     internal LIR 
BB04 [0037]  2       BB02,BB03             1       [???..???)                                     i internal label hascall LIR 
BB05 [0001]  1       BB04                  1       [000..078)-> BB14 (always)                     i hascall gcsafe newobj LIR 
BB06 [0002]  1       BB14                  1       [078..083)                                     i label bwd bwd-target LIR 
BB07 [0003]  1  0    BB06                  1       [083..0D5)-> BB08 (always) T0      try { }     keep i try label hascall gcsafe newobj bwd LIR 
BB08 [0031]  1       BB07                  1       [???..???)-> BB10 (callf )                     i internal label LIR 
BB09 [0032]  1       BB12                  1       [???..???)-> BB13 (ALWAYS)                     i internal LIR KEEP 
BB13 [0007]  1       BB09                  1       [0E1..0E6)                                     i label bwd LIR 
BB14 [0008]  2       BB05,BB13             1       [0E6..0F1)-> BB06 ( cond )                     i label bwd LIR 
BB15 [0009]  1       BB14                  1       [0F1..110)-> BB28 (always)                     i hascall gcsafe LIR 
BB16 [0010]  1       BB28                  1       [110..11C)                                     i label bwd bwd-target LIR 
BB17 [0011]  1  1    BB16                  1       [11C..145)-> BB19 ( cond ) T1      try {       keep i try label hascall gcsafe bwd LIR 
BB18 [0012]  1  1    BB17                  1       [145..148)-> BB20 (always) T1                  i bwd LIR 
BB19 [0013]  1  1    BB17                  1       [148..14B)-> BB22 (always) T1      }           i label bwd LIR 
BB20 [0035]  1       BB18                  1       [???..???)-> BB24 (callf )                     i internal label LIR 
BB21 [0036]  1       BB26                  1       [???..???)-> BB29 (ALWAYS)                     i internal LIR KEEP 
BB22 [0033]  1       BB19                  1       [???..???)-> BB24 (callf )                     i internal label LIR 
BB23 [0034]  1       BB26                  1       [???..???)-> BB27 (ALWAYS)                     i internal LIR KEEP 
BB27 [0017]  1       BB23                  1       [158..161)                                     i label hascall gcsafe bwd LIR 
BB28 [0018]  2       BB15,BB27             1       [161..166)-> BB16 (always)                     i label bwd LIR 
BB29 [0019]  1       BB21                  1       [166..1B1)-> BB39 (always)                     i label hascall gcsafe LIR 
BB30 [0020]  1       BB39                  1       [1B1..1CA)-> BB32 ( cond )                     i label hascall gcsafe bwd bwd-target LIR 
BB31 [0021]  1       BB30                  1       [1CA..1D9)-> BB38 (always)                     i hascall gcsafe bwd LIR 
BB32 [0022]  1       BB30                  1       [1D9..1EA)-> BB34 ( cond )                     i label hascall gcsafe bwd LIR 
BB33 [0023]  1       BB32                  1       [1EA..1F4)-> BB38 (always)                     i hascall gcsafe bwd LIR 
BB34 [0024]  1       BB32                  1       [1F4..205)-> BB36 ( cond )                     i label hascall gcsafe bwd LIR 
BB35 [0025]  1       BB34                  1       [205..210)-> BB38 (always)                     i bwd LIR 
BB36 [0026]  1       BB34                  1       [210..221)-> BB38 ( cond )                     i label hascall gcsafe bwd LIR 
BB37 [0027]  1       BB36                  1       [221..224)-> BB40 (always)                     i bwd LIR 
BB38 [0028]  4       BB31,BB33,BB35,BB36   1       [224..225)                                     i label bwd LIR 
BB39 [0029]  2       BB29,BB38             1       [225..22A)-> BB30 (always)                     i label bwd LIR 
BB40 [0030]  1       BB37                  1       [22A..232)        (return)                     i label LIR 
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ funclets follow
BB10 [0004]  2     0 BB08                  1       [0D5..0D9)-> BB12 ( cond )    H0 F finally {   keep i label flet bwd LIR 
BB11 [0005]  1     0 BB10                  1       [0D9..0E0)                    H0               i hascall bwd LIR 
BB12 [0006]  2     0 BB10,BB11             1       [0E0..0E1)        (finret)    H0   }           i label bwd LIR 
BB24 [0014]  3     1 BB20,BB22             1       [14B..14F)-> BB26 ( cond )    H1 F finally {   keep i label flet bwd LIR 
BB25 [0015]  1     1 BB24                  1       [14F..157)                    H1               i hascall bwd LIR 
BB26 [0016]  2     1 BB24,BB25             1       [157..158)        (finret)    H1   }           i label bwd LIR 
-----------------------------------------------------------------------------------------------------------------------------------------
Setting stack level from -572662307 to 0

=============== Generating BB01 [???..???), preds={} succs={BB02} flags=0x00000002.20010060: i internal label hascall LIR 
BB01 IN (0)={} + ByrefExposed + GcHeap
     OUT(0)={} + ByrefExposed + GcHeap

Liveness not changing: 0000000000000000 {}
							Live regs: (unchanged) 00000000 {}
							GC regs: (unchanged) 00000000 {}
							Byref regs: (unchanged) 00000000 {}

      L_M48562_BB01:
Mapped BB01 to G_M48562_IG02
Label: IG02, GCvars=0000000000000000 {}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}

Scope info: begin block BB01, IL range [???..???)
Scope info: ignoring block beginning
Generating: N002 (  0,  0) [000000] ------------                 NOP       void   REG NA
Scope info: ignoring block end

Variable Live Range History Dump for BB01
..None..

=============== Generating BB02 [???..???) -> BB04 (cond), preds={BB01} succs={BB03,BB04} flags=0x00000000.20000040: internal LIR 
BB02 IN (0)={} + ByrefExposed + GcHeap
     OUT(0)={} + ByrefExposed + GcHeap

Liveness not changing: 0000000000000000 {}
							Live regs: (unchanged) 00000000 {}
							GC regs: (unchanged) 00000000 {}
							Byref regs: (unchanged) 00000000 {}

      L_M48562_BB02:

Scope info: begin block BB02, IL range [???..???)
Scope info: ignoring block beginning
Added IP mapping: NO_MAP STACK_EMPTY (G_M48562_IG02,ins#0,ofs#0) label
Generating: N006 (  2, 10) [000371] Hc----------       t371 =    CNS_INT(h) long   0x7ffdb6f1d838 global ptr REG NA
                                                              /--*  t371   long   
Generating: N008 (  4, 12) [000372] nc----------       t372 = *  IND       int    REG NA
Generating: N010 (  1,  1) [000373] -c----------       t373 =    CNS_INT   int    0 REG NA
                                                              /--*  t372   int    
                                                              +--*  t373   int    
Generating: N012 (  6, 14) [000374] J------N----              *  EQ        void   REG NA
IN0001:        cmp      dword ptr [(reloc 0x7ffdb6f1d838)], 0
Generating: N014 (  8, 16) [000494] ------------              *  JTRUE     void   REG NA
IN0002:        je       L_M48562_BB04
Scope info: ignoring block end

Variable Live Range History Dump for BB02
..None..

=============== Generating BB03 [???..???), preds={BB02} succs={BB04} flags=0x00000000.20000040: internal LIR 
BB03 IN (0)={} + ByrefExposed + GcHeap
     OUT(0)={} + ByrefExposed + GcHeap

Liveness not changing: 0000000000000000 {}
							Live regs: (unchanged) 00000000 {}
							GC regs: (unchanged) 00000000 {}
							Byref regs: (unchanged) 00000000 {}

      L_M48562_BB03:
Adding label due to BB weight difference: BBJ_COND BB02 with weight 100 different from BB03 with weight 50

      G_M48562_IG02:        ; offs=000000H, funclet=00, bbWeight=1   
Mapped BB03 to G_M48562_IG03
Label: IG03, GCvars=0000000000000000 {}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}

Scope info: begin block BB03, IL range [???..???)
Scope info: ignoring block beginning
genIPmappingAdd: ignoring duplicate IL offset 0xffffffff
Generating: N018 ( 14,  5) [000375] --C-G-?-----                 CALL help void   HELPER.CORINFO_HELP_DBG_IS_JUST_MY_CODE REG NA
							Call: GCvars=0000000000000000 {}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}
IN0003:        call     CORINFO_HELP_DBG_IS_JUST_MY_CODE
Scope info: ignoring block end

Variable Live Range History Dump for BB03
..None..

=============== Generating BB04 [???..???), preds={BB02,BB03} succs={BB05} flags=0x00000002.20010060: i internal label hascall LIR 
BB04 IN (0)={} + ByrefExposed + GcHeap
     OUT(0)={} + ByrefExposed + GcHeap

Liveness not changing: 0000000000000000 {}
							Live regs: (unchanged) 00000000 {}
							GC regs: (unchanged) 00000000 {}
							Byref regs: (unchanged) 00000000 {}

      L_M48562_BB04:

      G_M48562_IG03:        ; offs=00000DH, funclet=00, bbWeight=0.50
Mapped BB04 to G_M48562_IG04
Label: IG04, GCvars=0000000000000000 {}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}

Scope info: begin block BB04, IL range [???..???)
Scope info: ignoring block beginning
genIPmappingAdd: ignoring duplicate IL offset 0xffffffff
Scope info: ignoring block end

Variable Live Range History Dump for BB04
..None..

=============== Generating BB05 [000..078) -> BB14 (always), preds={BB04} succs={BB14} flags=0x00000002.20480020: i hascall gcsafe newobj LIR 
BB05 IN (0)={} + ByrefExposed + GcHeap
     OUT(0)={} + ByrefExposed + GcHeap

Liveness not changing: 0000000000000000 {}
							Live regs: (unchanged) 00000000 {}
							GC regs: (unchanged) 00000000 {}
							Byref regs: (unchanged) 00000000 {}

      L_M48562_BB05:

Scope info: begin block BB05, IL range [000..078)
Scope info: opening scope, LVnum=0 [000..232)
New debug range: first
Scope info: opening scope, LVnum=10 [000..232)
New debug range: first
Scope info: opening scope, LVnum=11 [000..232)
New debug range: first
Scope info: opening scope, LVnum=12 [000..232)
New debug range: first
Scope info: opening scope, LVnum=13 [000..232)
New debug range: first
Scope info: opening scope, LVnum=14 [000..232)
New debug range: first
Scope info: opening scope, LVnum=15 [000..232)
New debug range: first
Scope info: opening scope, LVnum=16 [000..232)
New debug range: first
Scope info: opening scope, LVnum=9 [000..232)
New debug range: first
Scope info: opening scope, LVnum=8 [000..232)
New debug range: first
Scope info: opening scope, LVnum=1 [000..232)
New debug range: first
Scope info: opening scope, LVnum=2 [000..232)
New debug range: first
Scope info: opening scope, LVnum=3 [000..232)
New debug range: first
Scope info: opening scope, LVnum=4 [000..232)
New debug range: first
Scope info: opening scope, LVnum=5 [000..232)
New debug range: first
Scope info: opening scope, LVnum=6 [000..232)
New debug range: first
Scope info: opening scope, LVnum=7 [000..232)
New debug range: first
Scope info: opening scope, LVnum=17 [000..232)
New debug range: first
Added IP mapping: 0x0000 STACK_EMPTY (G_M48562_IG04,ins#0,ofs#0) label
Generating: N024 (???,???) [000495] ------------                 IL_OFFSET void   IL offset: 0x0 REG NA
Generating: N026 (  1,  1) [000001] ------------                 NO_OP     void   REG NA
IN0004:        nop      
Added IP mapping: 0x0001 STACK_EMPTY (G_M48562_IG04,ins#1,ofs#1)
Generating: N028 (???,???) [000496] ------------                 IL_OFFSET void   IL offset: 0x1 REG NA
Generating: N030 ( 14,  5) [000002] --CXG-------         t2 =    CALL      long   System.DateTime.get_Now REG rax
							Call: GCvars=0000000000000000 {}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}
Added IP mapping: 0x0001 STACK_EMPTY CALL_INSTRUCTION (G_M48562_IG04,ins#1,ofs#1)
IN0005:        call     System.DateTime:get_Now():System.DateTime
                                                              /--*  t2     long   
Generating: N032 ( 18,  8) [000005] DA-XG-------              *  STORE_LCL_VAR struct<System.DateTime, 8> V19 tmp1          NA REG NA
IN0006:        mov      qword ptr [V19 rbp-78H], rax
Added IP mapping: 0x0006 (G_M48562_IG04,ins#3,ofs#10)
Generating: N034 (???,???) [000497] ------------                 IL_OFFSET void   IL offset: 0x6 REG NA
Generating: N036 (  3,  2) [000006] ------------         t6 =    LCL_VAR   struct<System.DateTime, 8> V19 tmp1          rcx REG rcx
IN0007:        mov      rcx, qword ptr [V19 rbp-78H]
                                                              /--*  t6     struct 
Generating: N038 (  7,  5) [000009] DA--G-------              *  STORE_LCL_VAR struct<System.DateTime, 8>(AX) V03 loc1          NA REG NA
IN0008:        mov      qword ptr [V03 rbp-10H], rcx
Added IP mapping: 0x0007 STACK_EMPTY (G_M48562_IG04,ins#5,ofs#18)
Generating: N040 (???,???) [000498] ------------                 IL_OFFSET void   IL offset: 0x7 REG NA
Generating: N042 (  3,  3) [000011] ------------        t11 =    LCL_VAR_ADDR byref  V03 loc1          rcx REG rcx
IN0009:        lea      rcx, bword ptr [V03 rbp-10H]
							Byref regs: 00000000 {} => 00000002 {rcx}
                                                              /--*  t11    byref  
Generating: N044 (???,???) [000627] ------------       t627 = *  PUTARG_REG byref  REG rcx
							Byref regs: 00000002 {rcx} => 00000000 {}
							Byref regs: 00000000 {} => 00000002 {rcx}
                                                              /--*  t627   byref  this in rcx
Generating: N046 ( 17, 10) [000012] --CXG-------        t12 = *  CALL      ref    System.DateTime.ToString REG rax
							Byref regs: 00000002 {rcx} => 00000000 {}
							Call: GCvars=0000000000000000 {}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}
Added IP mapping: 0x0009 CALL_INSTRUCTION (G_M48562_IG04,ins#6,ofs#22)
IN000a:        call     System.DateTime:ToString():System.String:this
							GC regs: 00000000 {} => 00000001 {rax}
                                                              /--*  t12    ref    
Generating: N048 ( 21, 13) [000014] DA-XG-------              *  STORE_LCL_VAR ref    V20 tmp2          NA REG NA
							GC regs: 00000001 {rax} => 00000000 {}
IN000b:        mov      gword ptr [V20 rbp-80H], rax
Added IP mapping: 0x000E (G_M48562_IG04,ins#8,ofs#31)
Generating: N050 (???,???) [000499] ------------                 IL_OFFSET void   IL offset: 0xe REG NA
Generating: N052 (  2, 10) [000380] H-----------       t380 =    CNS_INT(h) long   0xBE2A31F0 "	 Created list" REG rdx
IN000c:        mov      rdx, 0x1EDBE2A31F0      ; "	 Created list"
                                                              /--*  t380   long   
Generating: N054 (  4, 12) [000381] #---G-------       t381 = *  IND       ref    REG rdx
IN000d:        mov      rdx, gword ptr [rdx]
							GC regs: 00000000 {} => 00000004 {rdx}
                                                              /--*  t381   ref    
Generating: N056 (???,???) [000628] ----G-------       t628 = *  PUTARG_REG ref    REG rdx
							GC regs: 00000004 {rdx} => 00000000 {}
							GC regs: 00000000 {} => 00000004 {rdx}
Generating: N058 (  3,  2) [000015] ------------        t15 =    LCL_VAR   ref    V20 tmp2          rcx REG rcx
IN000e:        mov      rcx, gword ptr [V20 rbp-80H]
							GC regs: 00000004 {rdx} => 00000006 {rcx rdx}
                                                              /--*  t15    ref    
Generating: N060 (???,???) [000629] ------------       t629 = *  PUTARG_REG ref    REG rcx
							GC regs: 00000006 {rcx rdx} => 00000004 {rdx}
							GC regs: 00000004 {rdx} => 00000006 {rcx rdx}
                                                              /--*  t628   ref    arg1 in rdx
                                                              +--*  t629   ref    arg0 in rcx
Generating: N062 ( 21, 21) [000017] --CXG-------        t17 = *  CALL      ref    System.String.Concat REG rax
							GC regs: 00000006 {rcx rdx} => 00000002 {rcx}
							GC regs: 00000002 {rcx} => 00000000 {}
							Call: GCvars=0000000000000000 {}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}
Added IP mapping: 0x0013 CALL_INSTRUCTION (G_M48562_IG04,ins#11,ofs#48)
IN000f:        call     System.String:Concat(System.String,System.String):System.String
							GC regs: 00000000 {} => 00000001 {rax}
                                                              /--*  t17    ref    
Generating: N064 ( 25, 24) [000019] DA-XG-------              *  STORE_LCL_VAR ref    V21 tmp3          NA REG NA
							GC regs: 00000001 {rax} => 00000000 {}
IN0010:        mov      gword ptr [V21 rbp-88H], rax
Added IP mapping: 0x0018 (G_M48562_IG04,ins#13,ofs#60)
Generating: N066 (???,???) [000500] ------------                 IL_OFFSET void   IL offset: 0x18 REG NA
Generating: N068 (  3,  2) [000020] ------------        t20 =    LCL_VAR   ref    V21 tmp3          rcx REG rcx
IN0011:        mov      rcx, gword ptr [V21 rbp-88H]
							GC regs: 00000000 {} => 00000002 {rcx}
                                                              /--*  t20    ref    
Generating: N070 (???,???) [000630] ------------       t630 = *  PUTARG_REG ref    REG rcx
							GC regs: 00000002 {rcx} => 00000000 {}
							GC regs: 00000000 {} => 00000002 {rcx}
                                                              /--*  t630   ref    arg0 in rcx
Generating: N072 ( 17,  8) [000021] --CXG-------              *  CALL      void   System.Console.WriteLine REG NA
							GC regs: 00000002 {rcx} => 00000000 {}
							Call: GCvars=0000000000000000 {}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}
Added IP mapping: 0x0018 CALL_INSTRUCTION (G_M48562_IG04,ins#14,ofs#67)
IN0012:        call     System.Console:WriteLine(System.String)
Added IP mapping: 0x001D STACK_EMPTY (G_M48562_IG04,ins#15,ofs#72)
Generating: N074 (???,???) [000501] ------------                 IL_OFFSET void   IL offset: 0x1d REG NA
Generating: N076 (  1,  1) [000022] ------------                 NO_OP     void   REG NA
IN0013:        nop      
Added IP mapping: 0x001E STACK_EMPTY (G_M48562_IG04,ins#16,ofs#73)
Generating: N078 (???,???) [000502] ------------                 IL_OFFSET void   IL offset: 0x1e REG NA
Generating: N080 (  2, 10) [000024] H-----------        t24 =    CNS_INT(h) long   0x7ffdb7022b70 method REG rcx
IN0014:        mov      rcx, 0x7FFDB7022B70
                                                              /--*  t24    long   
Generating: N082 (???,???) [000631] ------------       t631 = *  PUTARG_REG long   REG rcx
                                                              /--*  t631   long   arg0 in rcx
Generating: N084 ( 16, 16) [000025] --C---------        t25 = *  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST REG rax
							Call: GCvars=0000000000000000 {}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}
IN0015:        call     CORINFO_HELP_NEWSFAST
							GC regs: 00000000 {} => 00000001 {rax}
                                                              /--*  t25    ref    
Generating: N086 ( 20, 19) [000027] DA----------              *  STORE_LCL_VAR ref    V22 tmp4          NA REG NA
							GC regs: 00000001 {rax} => 00000000 {}
IN0016:        mov      gword ptr [V22 rbp-90H], rax
Generating: N088 (  3,  2) [000028] ------------        t28 =    LCL_VAR   ref    V22 tmp4          rcx REG rcx
IN0017:        mov      rcx, gword ptr [V22 rbp-90H]
							GC regs: 00000000 {} => 00000002 {rcx}
                                                              /--*  t28    ref    
Generating: N090 (???,???) [000632] ------------       t632 = *  PUTARG_REG ref    REG rcx
							GC regs: 00000002 {rcx} => 00000000 {}
							GC regs: 00000000 {} => 00000002 {rcx}
                                                              /--*  t632   ref    this in rcx
Generating: N092 ( 17,  9) [000029] --CXG-------              *  CALL      void   FalseLeakRepro.List..ctor REG NA
							GC regs: 00000002 {rcx} => 00000000 {}
							Call: GCvars=0000000000000000 {}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}
Added IP mapping: 0x001F CALL_INSTRUCTION (G_M48562_IG04,ins#20,ofs#102)
IN0018:        call     FalseLeakRepro.List:.ctor():this
Added IP mapping: 0x0024 (G_M48562_IG04,ins#21,ofs#107)
Generating: N094 (???,???) [000503] ------------                 IL_OFFSET void   IL offset: 0x24 REG NA
Generating: N096 (  3,  2) [000023] ------------        t23 =    LCL_VAR   ref    V00 this          rdx REG rdx
IN0019:        mov      rdx, gword ptr [V00 rbp+10H]
							GC regs: 00000000 {} => 00000004 {rdx}
                                                              /--*  t23    ref    
Generating: N098 (  4,  3) [000388] ------------       t388 = *  LEA(b+8)  byref  REG rcx
							GC regs: 00000004 {rdx} => 00000000 {}
IN001a:        lea      rcx, bword ptr [rdx+8]
							Byref regs: 00000000 {} => 00000002 {rcx}
Generating: N100 (  3,  2) [000030] ------------        t30 =    LCL_VAR   ref    V22 tmp4          rdx REG rdx
IN001b:        mov      rdx, gword ptr [V22 rbp-90H]
							GC regs: 00000000 {} => 00000004 {rdx}
                                                              /--*  t388   byref  
                                                              +--*  t30    ref    
Generating: N102 (???,???) [000504] -A-XG-------              *  STOREIND  ref    REG NA
							Byref regs: 00000002 {rcx} => 00000000 {}
							GC regs: 00000004 {rdx} => 00000000 {}
NoGC Call: savedSet=0000F0E8 {rbx rbp rsi rdi r12 r13 r14 r15}
							Call: GCvars=0000000000000000 {}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}
IN001c:        call     CORINFO_HELP_ASSIGN_REF
Added IP mapping: 0x0029 STACK_EMPTY (G_M48562_IG04,ins#25,ofs#127)
Generating: N104 (???,???) [000505] ------------                 IL_OFFSET void   IL offset: 0x29 REG NA
Generating: N106 (  2, 10) [000036] H-----------        t36 =    CNS_INT(h) long   0x7ffdb6c458b8 token REG rcx
IN001d:        mov      rcx, 0x7FFDB6C458B8
                                                              /--*  t36    long   
Generating: N108 (???,???) [000633] ------------       t633 = *  PUTARG_REG long   REG rcx
                                                              /--*  t633   long   arg0 in rcx
Generating: N110 ( 16, 16) [000037] --C---------        t37 = *  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST REG rax
							Call: GCvars=0000000000000000 {}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}
IN001e:        call     CORINFO_HELP_NEWSFAST
							GC regs: 00000000 {} => 00000001 {rax}
                                                              /--*  t37    ref    
Generating: N112 ( 20, 19) [000039] DA----------              *  STORE_LCL_VAR ref    V23 tmp5          NA REG NA
							GC regs: 00000001 {rax} => 00000000 {}
IN001f:        mov      gword ptr [V23 rbp-98H], rax
Generating: N114 (  3,  2) [000033] ------------        t33 =    LCL_VAR   ref    V00 this          rcx REG rcx
IN0020:        mov      rcx, gword ptr [V00 rbp+10H]
							GC regs: 00000000 {} => 00000002 {rcx}
                                                              /--*  t33    ref    
Generating: N116 (  4,  3) [000393] -c----------       t393 = *  LEA(b+8)  byref  REG NA
                                                              /--*  t393   byref  
Generating: N118 (  6,  5) [000034] ---XG-------        t34 = *  IND       ref    REG rcx
							GC regs: 00000002 {rcx} => 00000000 {}
IN0021:        mov      rcx, gword ptr [rcx+8]
							GC regs: 00000000 {} => 00000002 {rcx}
                                                              /--*  t34    ref    
Generating: N120 (  7,  6) [000391] -c----------       t391 = *  LEA(b+8)  byref  REG NA
                                                              /--*  t391   byref  
Generating: N122 (  9,  8) [000035] ---XG-------        t35 = *  IND       ref    REG rcx
							GC regs: 00000002 {rcx} => 00000000 {}
IN0022:        mov      rcx, gword ptr [rcx+8]
							GC regs: 00000000 {} => 00000002 {rcx}
                                                              /--*  t35    ref    
Generating: N124 ( 13, 11) [000043] DA-XG-------              *  STORE_LCL_VAR ref    V24 tmp6          NA REG NA
							GC regs: 00000002 {rcx} => 00000000 {}
IN0023:        mov      gword ptr [V24 rbp-A0H], rcx
Generating: N126 (  3,  2) [000040] ------------        t40 =    LCL_VAR   ref    V23 tmp5          rcx REG rcx
IN0024:        mov      rcx, gword ptr [V23 rbp-98H]
							GC regs: 00000000 {} => 00000002 {rcx}
                                                              /--*  t40    ref    
Generating: N128 (???,???) [000634] ------------       t634 = *  PUTARG_REG ref    REG rcx
							GC regs: 00000002 {rcx} => 00000000 {}
							GC regs: 00000000 {} => 00000002 {rcx}
                                                              /--*  t634   ref    this in rcx
Generating: N130 ( 17,  9) [000041] --CXG-------              *  CALL      void   System.Object..ctor REG NA
							GC regs: 00000002 {rcx} => 00000000 {}
							Call: GCvars=0000000000000000 {}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}
Added IP mapping: 0x0034 CALL_INSTRUCTION (G_M48562_IG04,ins#33,ofs#175)
IN0025:        call     System.Object:.ctor():this
Added IP mapping: 0x0039 (G_M48562_IG04,ins#34,ofs#180)
Generating: N132 (???,???) [000506] ------------                 IL_OFFSET void   IL offset: 0x39 REG NA
Generating: N134 (  3,  2) [000044] ------------        t44 =    LCL_VAR   ref    V24 tmp6          rdx REG rdx
IN0026:        mov      rdx, gword ptr [V24 rbp-A0H]
							GC regs: 00000000 {} => 00000004 {rdx}
                                                              /--*  t44    ref    
Generating: N136 (  4,  3) [000396] ------------       t396 = *  LEA(b+16) byref  REG rcx
							GC regs: 00000004 {rdx} => 00000000 {}
IN0027:        lea      rcx, bword ptr [rdx+16]
							Byref regs: 00000000 {} => 00000002 {rcx}
Generating: N138 (  3,  2) [000045] ------------        t45 =    LCL_VAR   ref    V23 tmp5          rdx REG rdx
IN0028:        mov      rdx, gword ptr [V23 rbp-98H]
							GC regs: 00000000 {} => 00000004 {rdx}
                                                              /--*  t396   byref  
                                                              +--*  t45    ref    
Generating: N140 (???,???) [000507] -A-XG-------              *  STOREIND  ref    REG NA
							Byref regs: 00000002 {rcx} => 00000000 {}
							GC regs: 00000004 {rdx} => 00000000 {}
NoGC Call: savedSet=0000F0E8 {rbx rbp rsi rdi r12 r13 r14 r15}
							Call: GCvars=0000000000000000 {}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}
IN0029:        call     CORINFO_HELP_ASSIGN_REF
Added IP mapping: 0x003E STACK_EMPTY (G_M48562_IG04,ins#38,ofs#203)
Generating: N142 (???,???) [000508] ------------                 IL_OFFSET void   IL offset: 0x3e REG NA
Generating: N144 (  2, 10) [000050] H-----------        t50 =    CNS_INT(h) long   0x7ffdb7026348 token REG rcx
IN002a:        mov      rcx, 0x7FFDB7026348
                                                              /--*  t50    long   
Generating: N146 (???,???) [000635] ------------       t635 = *  PUTARG_REG long   REG rcx
                                                              /--*  t635   long   arg0 in rcx
Generating: N148 ( 16, 16) [000051] --C---------        t51 = *  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST REG rax
							Call: GCvars=0000000000000000 {}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}
IN002b:        call     CORINFO_HELP_NEWSFAST
							GC regs: 00000000 {} => 00000001 {rax}
                                                              /--*  t51    ref    
Generating: N150 ( 20, 19) [000053] DA----------              *  STORE_LCL_VAR ref    V25 tmp7          NA REG NA
							GC regs: 00000001 {rax} => 00000000 {}
IN002c:        mov      gword ptr [V25 rbp-A8H], rax
Generating: N152 (  3,  2) [000054] ------------        t54 =    LCL_VAR   ref    V25 tmp7          rcx REG rcx
IN002d:        mov      rcx, gword ptr [V25 rbp-A8H]
							GC regs: 00000000 {} => 00000002 {rcx}
                                                              /--*  t54    ref    
Generating: N154 (???,???) [000636] ------------       t636 = *  PUTARG_REG ref    REG rcx
							GC regs: 00000002 {rcx} => 00000000 {}
							GC regs: 00000000 {} => 00000002 {rcx}
Generating: N156 (  3,  2) [000048] ------------        t48 =    LCL_VAR   ref    V00 this          rdx REG rdx
IN002e:        mov      rdx, gword ptr [V00 rbp+10H]
							GC regs: 00000002 {rcx} => 00000006 {rcx rdx}
                                                              /--*  t48    ref    
Generating: N158 (???,???) [000637] ------------       t637 = *  PUTARG_REG ref    REG rdx
							GC regs: 00000006 {rcx rdx} => 00000002 {rcx}
							GC regs: 00000002 {rcx} => 00000006 {rcx rdx}
Generating: N160 (  2, 10) [000049] H-----------        t49 =    CNS_INT(h) long   0x7ffdb6c613f8 ftn REG r8
IN002f:        mov      r8, 0x7FFDB6C613F8
                                                              /--*  t49    long   
Generating: N162 (???,???) [000638] ------------       t638 = *  PUTARG_REG long   REG r8
                                                              /--*  t636   ref    this in rcx
                                                              +--*  t637   ref    arg1 in rdx
                                                              +--*  t638   long   arg2 in r8
Generating: N164 ( 22, 23) [000055] --CXG-------              *  CALL      void   System.MulticastDelegate.CtorClosed REG NA
							GC regs: 00000006 {rcx rdx} => 00000004 {rdx}
							GC regs: 00000004 {rdx} => 00000000 {}
							Call: GCvars=0000000000000000 {}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}
Added IP mapping: 0x0045 CALL_INSTRUCTION (G_M48562_IG04,ins#44,ofs#246)
IN0030:        call     System.MulticastDelegate:CtorClosed(System.Object,long):this
Added IP mapping: 0x004A (G_M48562_IG04,ins#45,ofs#251)
Generating: N166 (???,???) [000509] ------------                 IL_OFFSET void   IL offset: 0x4a REG NA
Generating: N168 (  2, 10) [000057] H-----------        t57 =    CNS_INT(h) long   0x7ffdb6dc4e80 token REG rcx
IN0031:        mov      rcx, 0x7FFDB6DC4E80
                                                              /--*  t57    long   
Generating: N170 (???,???) [000639] ------------       t639 = *  PUTARG_REG long   REG rcx
                                                              /--*  t639   long   arg0 in rcx
Generating: N172 ( 16, 16) [000058] --C---------        t58 = *  CALL help ref    HELPER.CORINFO_HELP_NEWFAST REG rax
							Call: GCvars=0000000000000000 {}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}
IN0032:        call     CORINFO_HELP_NEWFAST
							GC regs: 00000000 {} => 00000001 {rax}
                                                              /--*  t58    ref    
Generating: N174 ( 20, 19) [000060] DA----------              *  STORE_LCL_VAR ref    V26 tmp8          NA REG NA
							GC regs: 00000001 {rax} => 00000000 {}
IN0033:        mov      gword ptr [V26 rbp-B0H], rax
Generating: N176 (  3,  2) [000061] ------------        t61 =    LCL_VAR   ref    V26 tmp8          rcx REG rcx
IN0034:        mov      rcx, gword ptr [V26 rbp-B0H]
							GC regs: 00000000 {} => 00000002 {rcx}
                                                              /--*  t61    ref    
Generating: N178 (???,???) [000640] ------------       t640 = *  PUTARG_REG ref    REG rcx
							GC regs: 00000002 {rcx} => 00000000 {}
							GC regs: 00000000 {} => 00000002 {rcx}
Generating: N180 (  3,  2) [000056] ------------        t56 =    LCL_VAR   ref    V25 tmp7          rdx REG rdx
IN0035:        mov      rdx, gword ptr [V25 rbp-A8H]
							GC regs: 00000002 {rcx} => 00000006 {rcx rdx}
                                                              /--*  t56    ref    
Generating: N182 (???,???) [000641] ------------       t641 = *  PUTARG_REG ref    REG rdx
							GC regs: 00000006 {rcx rdx} => 00000002 {rcx}
							GC regs: 00000002 {rcx} => 00000006 {rcx rdx}
                                                              /--*  t640   ref    this in rcx
                                                              +--*  t641   ref    arg1 in rdx
Generating: N184 ( 20, 12) [000062] --CXG-------              *  CALL      void   System.Threading.Thread..ctor REG NA
							GC regs: 00000006 {rcx rdx} => 00000004 {rdx}
							GC regs: 00000004 {rdx} => 00000000 {}
							Call: GCvars=0000000000000000 {}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}
Added IP mapping: 0x004A CALL_INSTRUCTION (G_M48562_IG04,ins#50,ofs#287)
IN0036:        call     System.Threading.Thread:.ctor(System.Threading.ParameterizedThreadStart):this
Added IP mapping: 0x004F (G_M48562_IG04,ins#51,ofs#292)
Generating: N186 (???,???) [000510] ------------                 IL_OFFSET void   IL offset: 0x4f REG NA
Generating: N188 (  3,  2) [000063] ------------        t63 =    LCL_VAR   ref    V26 tmp8          rcx REG rcx
IN0037:        mov      rcx, gword ptr [V26 rbp-B0H]
							GC regs: 00000000 {} => 00000002 {rcx}
                                                              /--*  t63    ref    
Generating: N190 (  7,  5) [000065] DA----------              *  STORE_LCL_VAR ref    V02 loc0          NA REG NA
							GC regs: 00000002 {rcx} => 00000000 {}
IN0038:        mov      gword ptr [V02 rbp-08H], rcx
Added IP mapping: 0x0050 STACK_EMPTY (G_M48562_IG04,ins#53,ofs#303)
Generating: N192 (???,???) [000511] ------------                 IL_OFFSET void   IL offset: 0x50 REG NA
Generating: N194 (  3,  2) [000066] ------------        t66 =    LCL_VAR   ref    V02 loc0          rcx REG rcx
IN0039:        mov      rcx, gword ptr [V02 rbp-08H]
							GC regs: 00000000 {} => 00000002 {rcx}
                                                              /--*  t66    ref    
Generating: N196 (???,???) [000642] ------------       t642 = *  PUTARG_REG ref    REG rcx
							GC regs: 00000002 {rcx} => 00000000 {}
							GC regs: 00000000 {} => 00000002 {rcx}
                                                              /--*  t642   ref    this in rcx
Generating: N198 ( 17,  9) [000067] --CXG-------              *  CALL nullcheck void   System.Threading.Thread.Start REG NA
							GC regs: 00000002 {rcx} => 00000000 {}
IN003a:        cmp      dword ptr [rcx], ecx
							Call: GCvars=0000000000000000 {}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}
Added IP mapping: 0x0051 CALL_INSTRUCTION (G_M48562_IG04,ins#55,ofs#309)
IN003b:        call     System.Threading.Thread:Start():this
Added IP mapping: 0x0056 STACK_EMPTY (G_M48562_IG04,ins#56,ofs#314)
Generating: N200 (???,???) [000512] ------------                 IL_OFFSET void   IL offset: 0x56 REG NA
Generating: N202 (  1,  1) [000068] ------------                 NO_OP     void   REG NA
IN003c:        nop      
Added IP mapping: 0x0057 STACK_EMPTY (G_M48562_IG04,ins#57,ofs#315)
Generating: N204 (???,???) [000513] ------------                 IL_OFFSET void   IL offset: 0x57 REG NA
Generating: N206 ( 14,  5) [000069] --CXG-------        t69 =    CALL      long   System.DateTime.get_Now REG rax
							Call: GCvars=0000000000000000 {}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}
Added IP mapping: 0x0057 STACK_EMPTY CALL_INSTRUCTION (G_M48562_IG04,ins#57,ofs#315)

      G_M48562_IG04:        ; offs=000012H, funclet=00, bbWeight=1   
IN003d:        call     System.DateTime:get_Now():System.DateTime
                                                              /--*  t69    long   
Generating: N208 ( 18,  8) [000072] DA-XG-------              *  STORE_LCL_VAR struct<System.DateTime, 8> V27 tmp9          NA REG NA
IN003e:        mov      qword ptr [V27 rbp-B8H], rax
Added IP mapping: 0x005C (G_M48562_IG05,ins#2,ofs#12)
Generating: N210 (???,???) [000514] ------------                 IL_OFFSET void   IL offset: 0x5c REG NA
Generating: N212 (  3,  2) [000073] ------------        t73 =    LCL_VAR   struct<System.DateTime, 8> V27 tmp9          rcx REG rcx
IN003f:        mov      rcx, qword ptr [V27 rbp-B8H]
                                                              /--*  t73    struct 
Generating: N214 (  7,  5) [000076] DA--G-------              *  STORE_LCL_VAR struct<System.DateTime, 8>(AX) V03 loc1          NA REG NA
IN0040:        mov      qword ptr [V03 rbp-10H], rcx
Added IP mapping: 0x005D STACK_EMPTY (G_M48562_IG05,ins#4,ofs#23)
Generating: N216 (???,???) [000515] ------------                 IL_OFFSET void   IL offset: 0x5d REG NA
Generating: N218 (  3,  3) [000078] ------------        t78 =    LCL_VAR_ADDR byref  V03 loc1          rcx REG rcx
IN0041:        lea      rcx, bword ptr [V03 rbp-10H]
							Byref regs: 00000000 {} => 00000002 {rcx}
                                                              /--*  t78    byref  
Generating: N220 (???,???) [000643] ------------       t643 = *  PUTARG_REG byref  REG rcx
							Byref regs: 00000002 {rcx} => 00000000 {}
							Byref regs: 00000000 {} => 00000002 {rcx}
                                                              /--*  t643   byref  this in rcx
Generating: N222 ( 17, 10) [000079] --CXG-------        t79 = *  CALL      ref    System.DateTime.ToString REG rax
							Byref regs: 00000002 {rcx} => 00000000 {}
							Call: GCvars=0000000000000000 {}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}
Added IP mapping: 0x005F CALL_INSTRUCTION (G_M48562_IG05,ins#5,ofs#27)
IN0042:        call     System.DateTime:ToString():System.String:this
							GC regs: 00000000 {} => 00000001 {rax}
                                                              /--*  t79    ref    
Generating: N224 ( 21, 13) [000081] DA-XG-------              *  STORE_LCL_VAR ref    V28 tmp10         NA REG NA
							GC regs: 00000001 {rax} => 00000000 {}
IN0043:        mov      gword ptr [V28 rbp-C0H], rax
Added IP mapping: 0x0064 (G_M48562_IG05,ins#7,ofs#39)
Generating: N226 (???,???) [000516] ------------                 IL_OFFSET void   IL offset: 0x64 REG NA
Generating: N228 (  2, 10) [000406] H-----------       t406 =    CNS_INT(h) long   0xBE2A31F8 "	 Consumer thread started, adding items..." REG rdx
IN0044:        mov      rdx, 0x1EDBE2A31F8      ; "	 Consumer thread started, adding items..."
                                                              /--*  t406   long   
Generating: N230 (  4, 12) [000407] #---G-------       t407 = *  IND       ref    REG rdx
IN0045:        mov      rdx, gword ptr [rdx]
							GC regs: 00000000 {} => 00000004 {rdx}
                                                              /--*  t407   ref    
Generating: N232 (???,???) [000644] ----G-------       t644 = *  PUTARG_REG ref    REG rdx
							GC regs: 00000004 {rdx} => 00000000 {}
							GC regs: 00000000 {} => 00000004 {rdx}
Generating: N234 (  3,  2) [000082] ------------        t82 =    LCL_VAR   ref    V28 tmp10         rcx REG rcx
IN0046:        mov      rcx, gword ptr [V28 rbp-C0H]
							GC regs: 00000004 {rdx} => 00000006 {rcx rdx}
                                                              /--*  t82    ref    
Generating: N236 (???,???) [000645] ------------       t645 = *  PUTARG_REG ref    REG rcx
							GC regs: 00000006 {rcx rdx} => 00000004 {rdx}
							GC regs: 00000004 {rdx} => 00000006 {rcx rdx}
                                                              /--*  t644   ref    arg1 in rdx
                                                              +--*  t645   ref    arg0 in rcx
Generating: N238 ( 21, 21) [000084] --CXG-------        t84 = *  CALL      ref    System.String.Concat REG rax
							GC regs: 00000006 {rcx rdx} => 00000002 {rcx}
							GC regs: 00000002 {rcx} => 00000000 {}
							Call: GCvars=0000000000000000 {}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}
Added IP mapping: 0x0069 CALL_INSTRUCTION (G_M48562_IG05,ins#10,ofs#59)
IN0047:        call     System.String:Concat(System.String,System.String):System.String
							GC regs: 00000000 {} => 00000001 {rax}
                                                              /--*  t84    ref    
Generating: N240 ( 25, 24) [000086] DA-XG-------              *  STORE_LCL_VAR ref    V29 tmp11         NA REG NA
							GC regs: 00000001 {rax} => 00000000 {}
IN0048:        mov      gword ptr [V29 rbp-C8H], rax
Added IP mapping: 0x006E (G_M48562_IG05,ins#12,ofs#71)
Generating: N242 (???,???) [000517] ------------                 IL_OFFSET void   IL offset: 0x6e REG NA
Generating: N244 (  3,  2) [000087] ------------        t87 =    LCL_VAR   ref    V29 tmp11         rcx REG rcx
IN0049:        mov      rcx, gword ptr [V29 rbp-C8H]
							GC regs: 00000000 {} => 00000002 {rcx}
                                                              /--*  t87    ref    
Generating: N246 (???,???) [000646] ------------       t646 = *  PUTARG_REG ref    REG rcx
							GC regs: 00000002 {rcx} => 00000000 {}
							GC regs: 00000000 {} => 00000002 {rcx}
                                                              /--*  t646   ref    arg0 in rcx
Generating: N248 ( 17,  8) [000088] --CXG-------              *  CALL      void   System.Console.WriteLine REG NA
							GC regs: 00000002 {rcx} => 00000000 {}
							Call: GCvars=0000000000000000 {}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}
Added IP mapping: 0x006E CALL_INSTRUCTION (G_M48562_IG05,ins#13,ofs#78)
IN004a:        call     System.Console:WriteLine(System.String)
Added IP mapping: 0x0073 STACK_EMPTY (G_M48562_IG05,ins#14,ofs#83)
Generating: N250 (???,???) [000518] ------------                 IL_OFFSET void   IL offset: 0x73 REG NA
Generating: N252 (  1,  1) [000089] ------------                 NO_OP     void   REG NA
IN004b:        nop      
Added IP mapping: 0x0074 STACK_EMPTY (G_M48562_IG05,ins#15,ofs#84)
Generating: N254 (???,???) [000519] ------------                 IL_OFFSET void   IL offset: 0x74 REG NA
Generating: N256 (  1,  1) [000090] ------------        t90 =    CNS_INT   int    0 REG rdx
IN004c:        xor      edx, edx
                                                              /--*  t90    int    
Generating: N258 (  5,  4) [000092] DA----------              *  STORE_LCL_VAR int    V04 loc2          NA REG NA
IN004d:        mov      dword ptr [V04 rbp-14H], edx
Added IP mapping: 0x0076 STACK_EMPTY (G_M48562_IG05,ins#17,ofs#89)
Generating: N260 (???,???) [000520] ------------                 IL_OFFSET void   IL offset: 0x76 REG NA
Generating: N262 (  0,  0) [000093] ------------                 NOP       void   REG NA
IN004e:        nop      
IN004f:        jmp      L_M48562_BB14

Variable Live Range History Dump for BB05
V00 this: rbp[16] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V01 arg1: rbp[24] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V02 loc0: rbp[-8] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V03 loc1: rbp[-16] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V04 loc2: rbp[-20] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V05 loc3: rbp[-32] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V06 loc4: rbp[-40] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V07 loc5: rbp[-44] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V08 loc6: rbp[-56] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V09 loc7: rbp[-64] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V10 loc8: rbp[-68] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V11 loc9: rbp[-72] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V12 loc10: rbp[-88] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V13 loc11: rbp[-92] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V14 loc12: rbp[-96] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V15 loc13: rbp[-100] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V16 loc14: rbp[-104] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V17 loc15: rbp[-108] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]

=============== Generating BB06 [078..083), preds={BB14} succs={BB07} flags=0x00000008.21010020: i label bwd bwd-target LIR 
BB06 IN (0)={} + ByrefExposed + GcHeap
     OUT(0)={} + ByrefExposed + GcHeap

Liveness not changing: 0000000000000000 {}
							Live regs: (unchanged) 00000000 {}
							GC regs: (unchanged) 00000000 {}
							Byref regs: (unchanged) 00000000 {}

      L_M48562_BB06:

      G_M48562_IG05:        ; offs=00014DH, funclet=00, bbWeight=1   
Mapped BB06 to G_M48562_IG06
Label: IG06, GCvars=0000000000000000 {}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}

Scope info: begin block BB06, IL range [078..083)
Added IP mapping: 0x0078 STACK_EMPTY (G_M48562_IG06,ins#0,ofs#0) label
Generating: N288 (???,???) [000521] ------------                 IL_OFFSET void   IL offset: 0x78 REG NA
Generating: N290 (  1,  1) [000103] ------------                 NO_OP     void   REG NA
IN0050:        nop      
Added IP mapping: 0x0079 STACK_EMPTY (G_M48562_IG06,ins#1,ofs#1)
Generating: N292 (???,???) [000522] ------------                 IL_OFFSET void   IL offset: 0x79 REG NA
Generating: N294 (  3,  2) [000104] ------------       t104 =    LCL_VAR   ref    V00 this          rdx REG rdx
IN0051:        mov      rdx, gword ptr [V00 rbp+10H]
							GC regs: 00000000 {} => 00000004 {rdx}
                                                              /--*  t104   ref    
Generating: N296 (  4,  3) [000412] -c----------       t412 = *  LEA(b+8)  byref  REG NA
                                                              /--*  t412   byref  
Generating: N298 (  6,  5) [000105] ---XG-------       t105 = *  IND       ref    REG rdx
							GC regs: 00000004 {rdx} => 00000000 {}
IN0052:        mov      rdx, gword ptr [rdx+8]
							GC regs: 00000000 {} => 00000004 {rdx}
                                                              /--*  t105   ref    
Generating: N300 ( 10,  8) [000107] DA-XG-------              *  STORE_LCL_VAR ref    V05 loc3          NA REG NA
							GC regs: 00000004 {rdx} => 00000000 {}
IN0053:        mov      gword ptr [V05 rbp-20H], rdx
Added IP mapping: 0x0080 STACK_EMPTY (G_M48562_IG06,ins#4,ofs#13)
Generating: N302 (???,???) [000523] ------------                 IL_OFFSET void   IL offset: 0x80 REG NA
Generating: N304 (  1,  1) [000108] ------------       t108 =    CNS_INT   int    0 REG rdx
IN0054:        xor      edx, edx
                                                              /--*  t108   int    
Generating: N306 (  5,  4) [000110] DA--G-------              *  STORE_LCL_VAR int   (AX) V06 loc4          NA REG NA
IN0055:        mov      dword ptr [V06 rbp-28H], edx

Variable Live Range History Dump for BB06
V00 this: rbp[16] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V01 arg1: rbp[24] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V02 loc0: rbp[-8] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V03 loc1: rbp[-16] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V04 loc2: rbp[-20] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V05 loc3: rbp[-32] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V06 loc4: rbp[-40] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V07 loc5: rbp[-44] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V08 loc6: rbp[-56] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V09 loc7: rbp[-64] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V10 loc8: rbp[-68] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V11 loc9: rbp[-72] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V12 loc10: rbp[-88] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V13 loc11: rbp[-92] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V14 loc12: rbp[-96] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V15 loc13: rbp[-100] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V16 loc14: rbp[-104] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V17 loc15: rbp[-108] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]

=============== Generating BB07 [083..0D5) -> BB08 (always), preds={BB06} succs={BB08} flags=0x00000002.21490130: keep i try label hascall gcsafe newobj bwd LIR 
BB07 IN (0)={} + ByrefExposed + GcHeap
     OUT(0)={} + ByrefExposed + GcHeap

Liveness not changing: 0000000000000000 {}
							Live regs: (unchanged) 00000000 {}
							GC regs: (unchanged) 00000000 {}
							Byref regs: (unchanged) 00000000 {}

      L_M48562_BB07:

      G_M48562_IG06:        ; offs=0001ACH, funclet=00, bbWeight=1   
Mapped BB07 to G_M48562_IG07
Label: IG07, GCvars=0000000000000000 {}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}

Scope info: begin block BB07, IL range [083..0D5)
Added IP mapping: 0x0083 STACK_EMPTY (G_M48562_IG07,ins#0,ofs#0) label
Generating: N310 (???,???) [000524] ------------                 IL_OFFSET void   IL offset: 0x83 REG NA
Generating: N312 (  3,  3) [000113] ------------       t113 =    LCL_VAR_ADDR long   V06 loc4          rdx REG rdx
IN0056:        lea      rdx, [V06 rbp-28H]
                                                              /--*  t113   long   
Generating: N314 (???,???) [000647] ------------       t647 = *  PUTARG_REG long   REG rdx
Generating: N316 (  3,  2) [000111] ------------       t111 =    LCL_VAR   ref    V05 loc3          rcx REG rcx
IN0057:        mov      rcx, gword ptr [V05 rbp-20H]
							GC regs: 00000000 {} => 00000002 {rcx}
                                                              /--*  t111   ref    
Generating: N318 (???,???) [000648] ------------       t648 = *  PUTARG_REG ref    REG rcx
							GC regs: 00000002 {rcx} => 00000000 {}
							GC regs: 00000000 {} => 00000002 {rcx}
                                                              /--*  t647   long   arg1 in rdx
                                                              +--*  t648   ref    arg0 in rcx
Generating: N320 ( 20, 12) [000114] --CXG-------              *  CALL      void   System.Threading.Monitor.Enter REG NA
							GC regs: 00000002 {rcx} => 00000000 {}
							Call: GCvars=0000000000000000 {}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}
Added IP mapping: 0x0086 CALL_INSTRUCTION (G_M48562_IG07,ins#2,ofs#8)
IN0058:        call     System.Threading.Monitor:Enter(System.Object,byref)
Added IP mapping: 0x008B STACK_EMPTY (G_M48562_IG07,ins#3,ofs#13)
Generating: N322 (???,???) [000525] ------------                 IL_OFFSET void   IL offset: 0x8b REG NA
Generating: N324 (  1,  1) [000115] ------------                 NO_OP     void   REG NA
IN0059:        nop      
Added IP mapping: 0x008C STACK_EMPTY (G_M48562_IG07,ins#4,ofs#14)
Generating: N326 (???,???) [000526] ------------                 IL_OFFSET void   IL offset: 0x8c REG NA
Generating: N328 (  1,  1) [000116] ------------                 NO_OP     void   REG NA
IN005a:        nop      
Added IP mapping: 0x008D STACK_EMPTY (G_M48562_IG07,ins#5,ofs#15)
Generating: N330 (???,???) [000527] ------------                 IL_OFFSET void   IL offset: 0x8d REG NA
Generating: N332 (  2, 10) [000120] H-----------       t120 =    CNS_INT(h) long   0x7ffdb70260c8 method REG rcx
IN005b:        mov      rcx, 0x7FFDB70260C8
                                                              /--*  t120   long   
Generating: N334 (???,???) [000649] ------------       t649 = *  PUTARG_REG long   REG rcx
                                                              /--*  t649   long   arg0 in rcx
Generating: N336 ( 16, 16) [000121] --C---------       t121 = *  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST REG rax
							Call: GCvars=0000000000000000 {}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}
IN005c:        call     CORINFO_HELP_NEWSFAST
							GC regs: 00000000 {} => 00000001 {rax}
                                                              /--*  t121   ref    
Generating: N338 ( 20, 19) [000123] DA----------              *  STORE_LCL_VAR ref    V30 tmp12         NA REG NA
							GC regs: 00000001 {rax} => 00000000 {}
IN005d:        mov      gword ptr [V30 rbp-D0H], rax
Generating: N340 (  3,  2) [000117] ------------       t117 =    LCL_VAR   ref    V00 this          rcx REG rcx
IN005e:        mov      rcx, gword ptr [V00 rbp+10H]
							GC regs: 00000000 {} => 00000002 {rcx}
                                                              /--*  t117   ref    
Generating: N342 (  4,  3) [000419] -c----------       t419 = *  LEA(b+8)  byref  REG NA
                                                              /--*  t419   byref  
Generating: N344 (  6,  5) [000118] ---XG-------       t118 = *  IND       ref    REG rcx
							GC regs: 00000002 {rcx} => 00000000 {}
IN005f:        mov      rcx, gword ptr [rcx+8]
							GC regs: 00000000 {} => 00000002 {rcx}
                                                              /--*  t118   ref    
Generating: N346 (  7,  6) [000417] -c----------       t417 = *  LEA(b+8)  byref  REG NA
                                                              /--*  t417   byref  
Generating: N348 (  9,  8) [000119] ---XG-------       t119 = *  IND       ref    REG rcx
							GC regs: 00000002 {rcx} => 00000000 {}
IN0060:        mov      rcx, gword ptr [rcx+8]
							GC regs: 00000000 {} => 00000002 {rcx}
                                                              /--*  t119   ref    
Generating: N350 ( 13, 11) [000127] DA-XG-------              *  STORE_LCL_VAR ref    V31 tmp13         NA REG NA
							GC regs: 00000002 {rcx} => 00000000 {}
IN0061:        mov      gword ptr [V31 rbp-D8H], rcx
Generating: N352 (  3,  2) [000124] ------------       t124 =    LCL_VAR   ref    V30 tmp12         rcx REG rcx
IN0062:        mov      rcx, gword ptr [V30 rbp-D0H]
							GC regs: 00000000 {} => 00000002 {rcx}
                                                              /--*  t124   ref    
Generating: N354 (???,???) [000650] ------------       t650 = *  PUTARG_REG ref    REG rcx
							GC regs: 00000002 {rcx} => 00000000 {}
							GC regs: 00000000 {} => 00000002 {rcx}
                                                              /--*  t650   ref    this in rcx
Generating: N356 ( 17,  9) [000125] --CXG-------              *  CALL      void   FalseLeakRepro.Node..ctor REG NA
							GC regs: 00000002 {rcx} => 00000000 {}
							Call: GCvars=0000000000000000 {}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}
Added IP mapping: 0x0098 CALL_INSTRUCTION (G_M48562_IG07,ins#13,ofs#63)
IN0063:        call     FalseLeakRepro.Node:.ctor():this
Added IP mapping: 0x009D (G_M48562_IG07,ins#14,ofs#68)
Generating: N358 (???,???) [000528] ------------                 IL_OFFSET void   IL offset: 0x9d REG NA
Generating: N360 (  3,  2) [000128] ------------       t128 =    LCL_VAR   ref    V31 tmp13         rdx REG rdx
IN0064:        mov      rdx, gword ptr [V31 rbp-D8H]
							GC regs: 00000000 {} => 00000004 {rdx}
                                                              /--*  t128   ref    
Generating: N362 (  4,  3) [000422] ------------       t422 = *  LEA(b+8)  byref  REG rcx
							GC regs: 00000004 {rdx} => 00000000 {}
IN0065:        lea      rcx, bword ptr [rdx+8]
							Byref regs: 00000000 {} => 00000002 {rcx}
Generating: N364 (  3,  2) [000129] ------------       t129 =    LCL_VAR   ref    V30 tmp12         rdx REG rdx
IN0066:        mov      rdx, gword ptr [V30 rbp-D0H]
							GC regs: 00000000 {} => 00000004 {rdx}
                                                              /--*  t422   byref  
                                                              +--*  t129   ref    
Generating: N366 (???,???) [000529] -A-XG-------              *  STOREIND  ref    REG NA
							Byref regs: 00000002 {rcx} => 00000000 {}
							GC regs: 00000004 {rdx} => 00000000 {}
NoGC Call: savedSet=0000F0E8 {rbx rbp rsi rdi r12 r13 r14 r15}
							Call: GCvars=0000000000000000 {}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}
IN0067:        call     CORINFO_HELP_ASSIGN_REF
Added IP mapping: 0x00A2 STACK_EMPTY (G_M48562_IG07,ins#18,ofs#91)
Generating: N368 (???,???) [000530] ------------                 IL_OFFSET void   IL offset: 0xa2 REG NA
Generating: N370 (  3,  2) [000132] ------------       t132 =    LCL_VAR   ref    V00 this          rdx REG rdx
IN0068:        mov      rdx, gword ptr [V00 rbp+10H]
							GC regs: 00000000 {} => 00000004 {rdx}
                                                              /--*  t132   ref    
Generating: N372 (  4,  3) [000426] -c----------       t426 = *  LEA(b+8)  byref  REG NA
                                                              /--*  t426   byref  
Generating: N374 (  6,  5) [000133] ---XG-------       t133 = *  IND       ref    REG rdx
							GC regs: 00000004 {rdx} => 00000000 {}
IN0069:        mov      rdx, gword ptr [rdx+8]
							GC regs: 00000000 {} => 00000004 {rdx}
                                                              /--*  t133   ref    
Generating: N376 (  7,  6) [000424] ------------       t424 = *  LEA(b+8)  byref  REG rcx
							GC regs: 00000004 {rdx} => 00000000 {}
IN006a:        lea      rcx, bword ptr [rdx+8]
							Byref regs: 00000000 {} => 00000002 {rcx}
Generating: N378 (  3,  2) [000134] ------------       t134 =    LCL_VAR   ref    V00 this          rdx REG rdx
IN006b:        mov      rdx, gword ptr [V00 rbp+10H]
							GC regs: 00000000 {} => 00000004 {rdx}
                                                              /--*  t134   ref    
Generating: N380 (  4,  3) [000432] -c----------       t432 = *  LEA(b+8)  byref  REG NA
                                                              /--*  t432   byref  
Generating: N382 (  6,  5) [000135] ---XG-------       t135 = *  IND       ref    REG rdx
							GC regs: 00000004 {rdx} => 00000000 {}
IN006c:        mov      rdx, gword ptr [rdx+8]
							GC regs: 00000000 {} => 00000004 {rdx}
                                                              /--*  t135   ref    
Generating: N384 (  7,  6) [000430] -c----------       t430 = *  LEA(b+8)  byref  REG NA
                                                              /--*  t430   byref  
Generating: N386 (  9,  8) [000136] ---XG-------       t136 = *  IND       ref    REG rdx
							GC regs: 00000004 {rdx} => 00000000 {}
IN006d:        mov      rdx, gword ptr [rdx+8]
							GC regs: 00000000 {} => 00000004 {rdx}
                                                              /--*  t136   ref    
Generating: N388 ( 10,  9) [000428] -c----------       t428 = *  LEA(b+8)  byref  REG NA
                                                              /--*  t428   byref  
Generating: N390 ( 12, 11) [000137] ---XG-------       t137 = *  IND       ref    REG rdx
							GC regs: 00000004 {rdx} => 00000000 {}
IN006e:        mov      rdx, gword ptr [rdx+8]
							GC regs: 00000000 {} => 00000004 {rdx}
                                                              /--*  t424   byref  
                                                              +--*  t137   ref    
Generating: N392 (???,???) [000531] -A-XG-------              *  STOREIND  ref    REG NA
							Byref regs: 00000002 {rcx} => 00000000 {}
							GC regs: 00000004 {rdx} => 00000000 {}
NoGC Call: savedSet=0000F0E8 {rbx rbp rsi rdi r12 r13 r14 r15}
							Call: GCvars=0000000000000000 {}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}
IN006f:        call     CORINFO_HELP_ASSIGN_REF
Added IP mapping: 0x00BD STACK_EMPTY (G_M48562_IG07,ins#26,ofs#124)
Generating: N394 (???,???) [000532] ------------                 IL_OFFSET void   IL offset: 0xbd REG NA
Generating: N396 (  2, 10) [000143] H-----------       t143 =    CNS_INT(h) long   0x7ffdb6c458b8 token REG rcx
IN0070:        mov      rcx, 0x7FFDB6C458B8
                                                              /--*  t143   long   
Generating: N398 (???,???) [000651] ------------       t651 = *  PUTARG_REG long   REG rcx
                                                              /--*  t651   long   arg0 in rcx
Generating: N400 ( 16, 16) [000144] --C---------       t144 = *  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST REG rax
							Call: GCvars=0000000000000000 {}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}
IN0071:        call     CORINFO_HELP_NEWSFAST
							GC regs: 00000000 {} => 00000001 {rax}
                                                              /--*  t144   ref    
Generating: N402 ( 20, 19) [000146] DA----------              *  STORE_LCL_VAR ref    V32 tmp14         NA REG NA
							GC regs: 00000001 {rax} => 00000000 {}
IN0072:        mov      gword ptr [V32 rbp-E0H], rax
Generating: N404 (  3,  2) [000140] ------------       t140 =    LCL_VAR   ref    V00 this          rcx REG rcx
IN0073:        mov      rcx, gword ptr [V00 rbp+10H]
							GC regs: 00000000 {} => 00000002 {rcx}
                                                              /--*  t140   ref    
Generating: N406 (  4,  3) [000437] -c----------       t437 = *  LEA(b+8)  byref  REG NA
                                                              /--*  t437   byref  
Generating: N408 (  6,  5) [000141] ---XG-------       t141 = *  IND       ref    REG rcx
							GC regs: 00000002 {rcx} => 00000000 {}
IN0074:        mov      rcx, gword ptr [rcx+8]
							GC regs: 00000000 {} => 00000002 {rcx}
                                                              /--*  t141   ref    
Generating: N410 (  7,  6) [000435] -c----------       t435 = *  LEA(b+8)  byref  REG NA
                                                              /--*  t435   byref  
Generating: N412 (  9,  8) [000142] ---XG-------       t142 = *  IND       ref    REG rcx
							GC regs: 00000002 {rcx} => 00000000 {}
IN0075:        mov      rcx, gword ptr [rcx+8]
							GC regs: 00000000 {} => 00000002 {rcx}
                                                              /--*  t142   ref    
Generating: N414 ( 13, 11) [000150] DA-XG-------              *  STORE_LCL_VAR ref    V33 tmp15         NA REG NA
							GC regs: 00000002 {rcx} => 00000000 {}
IN0076:        mov      gword ptr [V33 rbp-E8H], rcx
Generating: N416 (  3,  2) [000147] ------------       t147 =    LCL_VAR   ref    V32 tmp14         rcx REG rcx
IN0077:        mov      rcx, gword ptr [V32 rbp-E0H]
							GC regs: 00000000 {} => 00000002 {rcx}
                                                              /--*  t147   ref    
Generating: N418 (???,???) [000652] ------------       t652 = *  PUTARG_REG ref    REG rcx
							GC regs: 00000002 {rcx} => 00000000 {}
							GC regs: 00000000 {} => 00000002 {rcx}
                                                              /--*  t652   ref    this in rcx
Generating: N420 ( 17,  9) [000148] --CXG-------              *  CALL      void   System.Object..ctor REG NA
							GC regs: 00000002 {rcx} => 00000000 {}
							Call: GCvars=0000000000000000 {}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}
Added IP mapping: 0x00C8 CALL_INSTRUCTION (G_M48562_IG07,ins#34,ofs#172)
IN0078:        call     System.Object:.ctor():this
Added IP mapping: 0x00CD (G_M48562_IG07,ins#35,ofs#177)
Generating: N422 (???,???) [000533] ------------                 IL_OFFSET void   IL offset: 0xcd REG NA
Generating: N424 (  3,  2) [000151] ------------       t151 =    LCL_VAR   ref    V33 tmp15         rdx REG rdx
IN0079:        mov      rdx, gword ptr [V33 rbp-E8H]
							GC regs: 00000000 {} => 00000004 {rdx}
                                                              /--*  t151   ref    
Generating: N426 (  4,  3) [000440] ------------       t440 = *  LEA(b+16) byref  REG rcx
							GC regs: 00000004 {rdx} => 00000000 {}
IN007a:        lea      rcx, bword ptr [rdx+16]
							Byref regs: 00000000 {} => 00000002 {rcx}
Generating: N428 (  3,  2) [000152] ------------       t152 =    LCL_VAR   ref    V32 tmp14         rdx REG rdx
IN007b:        mov      rdx, gword ptr [V32 rbp-E0H]
							GC regs: 00000000 {} => 00000004 {rdx}
                                                              /--*  t440   byref  
                                                              +--*  t152   ref    
Generating: N430 (???,???) [000534] -A-XG-------              *  STOREIND  ref    REG NA
							Byref regs: 00000002 {rcx} => 00000000 {}
							GC regs: 00000004 {rdx} => 00000000 {}
NoGC Call: savedSet=0000F0E8 {rbx rbp rsi rdi r12 r13 r14 r15}
							Call: GCvars=0000000000000000 {}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}
IN007c:        call     CORINFO_HELP_ASSIGN_REF
Added IP mapping: 0x00D2 STACK_EMPTY (G_M48562_IG07,ins#39,ofs#200)
Generating: N432 (???,???) [000535] ------------                 IL_OFFSET void   IL offset: 0xd2 REG NA
Generating: N434 (  1,  1) [000155] ------------                 NO_OP     void   REG NA
IN007d:        nop      
Added IP mapping: 0x00D3 STACK_EMPTY (G_M48562_IG07,ins#40,ofs#201)
Generating: N436 (???,???) [000536] ------------                 IL_OFFSET void   IL offset: 0xd3 REG NA
Generating: N438 (  0,  0) [000156] ------------                 NOP       void   REG NA
IN007e:        nop      
IN007f:        jmp      L_M48562_BB08

Variable Live Range History Dump for BB07
V00 this: rbp[16] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V01 arg1: rbp[24] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V02 loc0: rbp[-8] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V03 loc1: rbp[-16] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V04 loc2: rbp[-20] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V05 loc3: rbp[-32] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V06 loc4: rbp[-40] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V07 loc5: rbp[-44] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V08 loc6: rbp[-56] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V09 loc7: rbp[-64] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V10 loc8: rbp[-68] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V11 loc9: rbp[-72] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V12 loc10: rbp[-88] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V13 loc11: rbp[-92] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V14 loc12: rbp[-96] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V15 loc13: rbp[-100] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V16 loc14: rbp[-104] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V17 loc15: rbp[-108] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]

=============== Generating BB08 [???..???) -> BB10 (callf), preds={BB07} succs={BB10} flags=0x00000000.20010060: i internal label LIR 
BB08 IN (0)={} + ByrefExposed + GcHeap
     OUT(0)={} + ByrefExposed + GcHeap

Liveness not changing: 0000000000000000 {}
							Live regs: (unchanged) 00000000 {}
							GC regs: (unchanged) 00000000 {}
							Byref regs: (unchanged) 00000000 {}

      L_M48562_BB08:

      G_M48562_IG07:        ; offs=0001BEH, funclet=00, bbWeight=1   
Mapped BB08 to G_M48562_IG08
Label: IG08, GCvars=0000000000000000 {}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}

Scope info: begin block BB08, IL range [???..???)
Scope info: ignoring block beginning
Added IP mapping: NO_MAP STACK_EMPTY (G_M48562_IG08,ins#0,ofs#0) label
Scope info: ignoring block end
IN0080:        mov      rcx, rsp
IN0081:        call     L_M48562_BB10

      G_M48562_IG08:        ; offs=00028DH, funclet=00, bbWeight=1   
IN0082:        nop      

Variable Live Range History Dump for BB09
V00 this: rbp[16] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V01 arg1: rbp[24] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V02 loc0: rbp[-8] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V03 loc1: rbp[-16] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V04 loc2: rbp[-20] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V05 loc3: rbp[-32] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V06 loc4: rbp[-40] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V07 loc5: rbp[-44] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V08 loc6: rbp[-56] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V09 loc7: rbp[-64] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V10 loc8: rbp[-68] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V11 loc9: rbp[-72] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V12 loc10: rbp[-88] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V13 loc11: rbp[-92] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V14 loc12: rbp[-96] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V15 loc13: rbp[-100] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V16 loc14: rbp[-104] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V17 loc15: rbp[-108] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]

=============== Generating BB13 [0E1..0E6), preds={BB09} succs={BB14} flags=0x00000000.21010020: i label bwd LIR 
BB13 IN (0)={} + ByrefExposed + GcHeap
     OUT(0)={} + ByrefExposed + GcHeap

Liveness not changing: 0000000000000000 {}
							Live regs: (unchanged) 00000000 {}
							GC regs: (unchanged) 00000000 {}
							Byref regs: (unchanged) 00000000 {}

      L_M48562_BB13:

      G_M48562_IG09:        ; offs=000295H, funclet=00, bbWeight=1   
Mapped BB13 to G_M48562_IG10
Label: IG10, GCvars=0000000000000000 {}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}

Scope info: begin block BB13, IL range [0E1..0E6)
Scope info: found offset hole. lastOffs=213, currOffs=225
Added IP mapping: 0x00E1 STACK_EMPTY (G_M48562_IG10,ins#0,ofs#0) label
Generating: N480 (???,???) [000537] ------------                 IL_OFFSET void   IL offset: 0xe1 REG NA
Generating: N482 (  1,  1) [000157] ------------                 NO_OP     void   REG NA
IN0083:        nop      
Added IP mapping: 0x00E2 STACK_EMPTY (G_M48562_IG10,ins#1,ofs#1)
Generating: N484 (???,???) [000538] ------------                 IL_OFFSET void   IL offset: 0xe2 REG NA
Generating: N486 (  3,  2) [000158] ------------       t158 =    LCL_VAR   int    V04 loc2          rax REG rax
IN0084:        mov      eax, dword ptr [V04 rbp-14H]
Generating: N488 (  1,  1) [000159] -c----------       t159 =    CNS_INT   int    1 REG NA
                                                              /--*  t158   int    
                                                              +--*  t159   int    
Generating: N490 (  5,  4) [000160] ------------       t160 = *  ADD       int    REG rax
IN0085:        inc      eax
                                                              /--*  t160   int    
Generating: N492 (  9,  7) [000162] DA----------              *  STORE_LCL_VAR int    V04 loc2          NA REG NA
IN0086:        mov      dword ptr [V04 rbp-14H], eax

Variable Live Range History Dump for BB13
V00 this: rbp[16] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V01 arg1: rbp[24] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V02 loc0: rbp[-8] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V03 loc1: rbp[-16] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V04 loc2: rbp[-20] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V05 loc3: rbp[-32] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V06 loc4: rbp[-40] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V07 loc5: rbp[-44] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V08 loc6: rbp[-56] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V09 loc7: rbp[-64] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V10 loc8: rbp[-68] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V11 loc9: rbp[-72] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V12 loc10: rbp[-88] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V13 loc11: rbp[-92] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V14 loc12: rbp[-96] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V15 loc13: rbp[-100] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V16 loc14: rbp[-104] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V17 loc15: rbp[-108] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]

=============== Generating BB14 [0E6..0F1) -> BB06 (cond), preds={BB05,BB13} succs={BB15,BB06} flags=0x00000000.21010020: i label bwd LIR 
BB14 IN (0)={} + ByrefExposed + GcHeap
     OUT(0)={} + ByrefExposed + GcHeap

Liveness not changing: 0000000000000000 {}
							Live regs: (unchanged) 00000000 {}
							GC regs: (unchanged) 00000000 {}
							Byref regs: (unchanged) 00000000 {}

      L_M48562_BB14:

      G_M48562_IG10:        ; offs=000296H, funclet=00, bbWeight=1   
Mapped BB14 to G_M48562_IG11
Label: IG11, GCvars=0000000000000000 {}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}

Scope info: begin block BB14, IL range [0E6..0F1)
Added IP mapping: 0x00E6 STACK_EMPTY (G_M48562_IG11,ins#0,ofs#0) label
Generating: N266 (???,???) [000539] ------------                 IL_OFFSET void   IL offset: 0xe6 REG NA
Generating: N268 (  3,  2) [000094] -c----------        t94 =    LCL_VAR   int    V04 loc2          NA REG NA
Generating: N270 (  1,  1) [000095] -c----------        t95 =    CNS_INT   int    10 REG NA
                                                              /--*  t94    int    
                                                              +--*  t95    int    
Generating: N272 (  8,  4) [000096] ------------        t96 = *  LT        int    REG rdx
IN0087:        cmp      dword ptr [V04 rbp-14H], 10
IN0088:        setl     dl
IN0089:        movzx    rdx, dl
                                                              /--*  t96    int    
Generating: N274 ( 12,  7) [000098] DA----------              *  STORE_LCL_VAR int    V07 loc5          NA REG NA
IN008a:        mov      dword ptr [V07 rbp-2CH], edx
Added IP mapping: 0x00ED STACK_EMPTY (G_M48562_IG11,ins#4,ofs#13)
Generating: N276 (???,???) [000540] ------------                 IL_OFFSET void   IL offset: 0xed REG NA
Generating: N278 (  3,  2) [000099] -c----------        t99 =    LCL_VAR   int    V07 loc5          NA REG NA
Generating: N280 (  1,  1) [000100] -c----------       t100 =    CNS_INT   int    0 REG NA
                                                              /--*  t99    int    
                                                              +--*  t100   int    
Generating: N282 (  5,  4) [000101] J------N----              *  NE        void   REG NA
IN008b:        cmp      dword ptr [V07 rbp-2CH], 0
Generating: N284 (  7,  6) [000102] ------------              *  JTRUE     void   REG NA
IN008c:        jne      L_M48562_BB06

Variable Live Range History Dump for BB14
V00 this: rbp[16] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V01 arg1: rbp[24] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V02 loc0: rbp[-8] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V03 loc1: rbp[-16] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V04 loc2: rbp[-20] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V05 loc3: rbp[-32] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V06 loc4: rbp[-40] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V07 loc5: rbp[-44] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V08 loc6: rbp[-56] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V09 loc7: rbp[-64] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V10 loc8: rbp[-68] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V11 loc9: rbp[-72] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V12 loc10: rbp[-88] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V13 loc11: rbp[-92] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V14 loc12: rbp[-96] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V15 loc13: rbp[-100] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V16 loc14: rbp[-104] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V17 loc15: rbp[-108] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]

=============== Generating BB15 [0F1..110) -> BB28 (always), preds={BB14} succs={BB28} flags=0x00000002.20080020: i hascall gcsafe LIR 
BB15 IN (0)={} + ByrefExposed + GcHeap
     OUT(0)={} + ByrefExposed + GcHeap

Liveness not changing: 0000000000000000 {}
							Live regs: (unchanged) 00000000 {}
							GC regs: (unchanged) 00000000 {}
							Byref regs: (unchanged) 00000000 {}

      L_M48562_BB15:

Scope info: begin block BB15, IL range [0F1..110)
Added IP mapping: 0x00F1 STACK_EMPTY (G_M48562_IG11,ins#6,ofs#23) label
Generating: N496 (???,???) [000541] ------------                 IL_OFFSET void   IL offset: 0xf1 REG NA
Generating: N498 ( 14,  5) [000171] --CXG-------       t171 =    CALL      long   System.DateTime.get_Now REG rax
							Call: GCvars=0000000000000000 {}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}
Added IP mapping: 0x00F1 STACK_EMPTY CALL_INSTRUCTION (G_M48562_IG11,ins#6,ofs#23)
IN008d:        call     System.DateTime:get_Now():System.DateTime
                                                              /--*  t171   long   
Generating: N500 ( 18,  8) [000174] DA-XG-------              *  STORE_LCL_VAR struct<System.DateTime, 8> V34 tmp16         NA REG NA
IN008e:        mov      qword ptr [V34 rbp-F0H], rax
Added IP mapping: 0x00F6 (G_M48562_IG11,ins#8,ofs#35)
Generating: N502 (???,???) [000542] ------------                 IL_OFFSET void   IL offset: 0xf6 REG NA
Generating: N504 (  3,  2) [000175] ------------       t175 =    LCL_VAR   struct<System.DateTime, 8> V34 tmp16         rcx REG rcx
IN008f:        mov      rcx, qword ptr [V34 rbp-F0H]
                                                              /--*  t175   struct 
Generating: N506 (  7,  5) [000178] DA--G-------              *  STORE_LCL_VAR struct<System.DateTime, 8>(AX) V03 loc1          NA REG NA
IN0090:        mov      qword ptr [V03 rbp-10H], rcx
Added IP mapping: 0x00F7 STACK_EMPTY (G_M48562_IG11,ins#10,ofs#46)
Generating: N508 (???,???) [000543] ------------                 IL_OFFSET void   IL offset: 0xf7 REG NA
Generating: N510 (  3,  3) [000180] ------------       t180 =    LCL_VAR_ADDR byref  V03 loc1          rcx REG rcx
IN0091:        lea      rcx, bword ptr [V03 rbp-10H]
							Byref regs: 00000000 {} => 00000002 {rcx}
                                                              /--*  t180   byref  
Generating: N512 (???,???) [000653] ------------       t653 = *  PUTARG_REG byref  REG rcx
							Byref regs: 00000002 {rcx} => 00000000 {}
							Byref regs: 00000000 {} => 00000002 {rcx}
                                                              /--*  t653   byref  this in rcx
Generating: N514 ( 17, 10) [000181] --CXG-------       t181 = *  CALL      ref    System.DateTime.ToString REG rax
							Byref regs: 00000002 {rcx} => 00000000 {}
							Call: GCvars=0000000000000000 {}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}
Added IP mapping: 0x00F9 CALL_INSTRUCTION (G_M48562_IG11,ins#11,ofs#50)
IN0092:        call     System.DateTime:ToString():System.String:this
							GC regs: 00000000 {} => 00000001 {rax}
                                                              /--*  t181   ref    
Generating: N516 ( 21, 13) [000183] DA-XG-------              *  STORE_LCL_VAR ref    V35 tmp17         NA REG NA
							GC regs: 00000001 {rax} => 00000000 {}
IN0093:        mov      gword ptr [V35 rbp-F8H], rax
Added IP mapping: 0x00FE (G_M48562_IG11,ins#13,ofs#62)
Generating: N518 (???,???) [000544] ------------                 IL_OFFSET void   IL offset: 0xfe REG NA
Generating: N520 (  2, 10) [000444] H-----------       t444 =    CNS_INT(h) long   0xBE2A3200 "	 Waiting for list processing to complete..." REG rdx
IN0094:        mov      rdx, 0x1EDBE2A3200      ; "	 Waiting for list processing to complete..."
                                                              /--*  t444   long   
Generating: N522 (  4, 12) [000445] #---G-------       t445 = *  IND       ref    REG rdx
IN0095:        mov      rdx, gword ptr [rdx]
							GC regs: 00000000 {} => 00000004 {rdx}
                                                              /--*  t445   ref    
Generating: N524 (???,???) [000654] ----G-------       t654 = *  PUTARG_REG ref    REG rdx
							GC regs: 00000004 {rdx} => 00000000 {}
							GC regs: 00000000 {} => 00000004 {rdx}
Generating: N526 (  3,  2) [000184] ------------       t184 =    LCL_VAR   ref    V35 tmp17         rcx REG rcx
IN0096:        mov      rcx, gword ptr [V35 rbp-F8H]
							GC regs: 00000004 {rdx} => 00000006 {rcx rdx}
                                                              /--*  t184   ref    
Generating: N528 (???,???) [000655] ------------       t655 = *  PUTARG_REG ref    REG rcx
							GC regs: 00000006 {rcx rdx} => 00000004 {rdx}
							GC regs: 00000004 {rdx} => 00000006 {rcx rdx}
                                                              /--*  t654   ref    arg1 in rdx
                                                              +--*  t655   ref    arg0 in rcx
Generating: N530 ( 21, 21) [000186] --CXG-------       t186 = *  CALL      ref    System.String.Concat REG rax
							GC regs: 00000006 {rcx rdx} => 00000002 {rcx}
							GC regs: 00000002 {rcx} => 00000000 {}
							Call: GCvars=0000000000000000 {}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}
Added IP mapping: 0x0103 CALL_INSTRUCTION (G_M48562_IG11,ins#16,ofs#82)
IN0097:        call     System.String:Concat(System.String,System.String):System.String
							GC regs: 00000000 {} => 00000001 {rax}
                                                              /--*  t186   ref    
Generating: N532 ( 25, 24) [000188] DA-XG-------              *  STORE_LCL_VAR ref    V36 tmp18         NA REG NA
							GC regs: 00000001 {rax} => 00000000 {}
IN0098:        mov      gword ptr [V36 rbp-100H], rax
Added IP mapping: 0x0108 (G_M48562_IG11,ins#18,ofs#94)
Generating: N534 (???,???) [000545] ------------                 IL_OFFSET void   IL offset: 0x108 REG NA
Generating: N536 (  3,  2) [000189] ------------       t189 =    LCL_VAR   ref    V36 tmp18         rcx REG rcx
IN0099:        mov      rcx, gword ptr [V36 rbp-100H]
							GC regs: 00000000 {} => 00000002 {rcx}
                                                              /--*  t189   ref    
Generating: N538 (???,???) [000656] ------------       t656 = *  PUTARG_REG ref    REG rcx
							GC regs: 00000002 {rcx} => 00000000 {}
							GC regs: 00000000 {} => 00000002 {rcx}
                                                              /--*  t656   ref    arg0 in rcx
Generating: N540 ( 17,  8) [000190] --CXG-------              *  CALL      void   System.Console.WriteLine REG NA
							GC regs: 00000002 {rcx} => 00000000 {}
							Call: GCvars=0000000000000000 {}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}
Added IP mapping: 0x0108 CALL_INSTRUCTION (G_M48562_IG11,ins#19,ofs#101)
IN009a:        call     System.Console:WriteLine(System.String)
Added IP mapping: 0x010D STACK_EMPTY (G_M48562_IG11,ins#20,ofs#106)
Generating: N542 (???,???) [000546] ------------                 IL_OFFSET void   IL offset: 0x10d REG NA
Generating: N544 (  1,  1) [000191] ------------                 NO_OP     void   REG NA
IN009b:        nop      
Added IP mapping: 0x010E STACK_EMPTY (G_M48562_IG11,ins#21,ofs#107)
Generating: N546 (???,???) [000547] ------------                 IL_OFFSET void   IL offset: 0x10e REG NA
Generating: N548 (  0,  0) [000192] ------------                 NOP       void   REG NA
IN009c:        nop      
IN009d:        jmp      L_M48562_BB28

Variable Live Range History Dump for BB15
V00 this: rbp[16] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V01 arg1: rbp[24] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V02 loc0: rbp[-8] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V03 loc1: rbp[-16] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V04 loc2: rbp[-20] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V05 loc3: rbp[-32] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V06 loc4: rbp[-40] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V07 loc5: rbp[-44] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V08 loc6: rbp[-56] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V09 loc7: rbp[-64] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V10 loc8: rbp[-68] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V11 loc9: rbp[-72] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V12 loc10: rbp[-88] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V13 loc11: rbp[-92] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V14 loc12: rbp[-96] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V15 loc13: rbp[-100] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V16 loc14: rbp[-104] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V17 loc15: rbp[-108] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]

=============== Generating BB16 [110..11C), preds={BB28} succs={BB17} flags=0x00000008.21010020: i label bwd bwd-target LIR 
BB16 IN (0)={} + ByrefExposed + GcHeap
     OUT(0)={} + ByrefExposed + GcHeap

Liveness not changing: 0000000000000000 {}
							Live regs: (unchanged) 00000000 {}
							GC regs: (unchanged) 00000000 {}
							Byref regs: (unchanged) 00000000 {}

      L_M48562_BB16:

      G_M48562_IG11:        ; offs=00029FH, funclet=00, bbWeight=1   
Mapped BB16 to G_M48562_IG12
Label: IG12, GCvars=0000000000000000 {}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}

Scope info: begin block BB16, IL range [110..11C)
Added IP mapping: 0x0110 STACK_EMPTY (G_M48562_IG12,ins#0,ofs#0) label
Generating: N564 (???,???) [000548] ------------                 IL_OFFSET void   IL offset: 0x110 REG NA
Generating: N566 (  1,  1) [000197] ------------                 NO_OP     void   REG NA
IN009e:        nop      
Added IP mapping: 0x0111 STACK_EMPTY (G_M48562_IG12,ins#1,ofs#1)
Generating: N568 (???,???) [000549] ------------                 IL_OFFSET void   IL offset: 0x111 REG NA
Generating: N570 (  3,  2) [000198] ------------       t198 =    LCL_VAR   ref    V00 this          rdx REG rdx
IN009f:        mov      rdx, gword ptr [V00 rbp+10H]
							GC regs: 00000000 {} => 00000004 {rdx}
                                                              /--*  t198   ref    
Generating: N572 (  4,  3) [000450] -c----------       t450 = *  LEA(b+8)  byref  REG NA
                                                              /--*  t450   byref  
Generating: N574 (  6,  5) [000199] ---XG-------       t199 = *  IND       ref    REG rdx
							GC regs: 00000004 {rdx} => 00000000 {}
IN00a0:        mov      rdx, gword ptr [rdx+8]
							GC regs: 00000000 {} => 00000004 {rdx}
                                                              /--*  t199   ref    
Generating: N576 ( 10,  8) [000201] DA-XG-------              *  STORE_LCL_VAR ref    V08 loc6          NA REG NA
							GC regs: 00000004 {rdx} => 00000000 {}
IN00a1:        mov      gword ptr [V08 rbp-38H], rdx
Added IP mapping: 0x0119 STACK_EMPTY (G_M48562_IG12,ins#4,ofs#13)
Generating: N578 (???,???) [000550] ------------                 IL_OFFSET void   IL offset: 0x119 REG NA
Generating: N580 (  1,  1) [000202] ------------       t202 =    CNS_INT   int    0 REG rdx
IN00a2:        xor      edx, edx
                                                              /--*  t202   int    
Generating: N582 (  5,  4) [000204] DA--G-------              *  STORE_LCL_VAR int   (AX) V09 loc7          NA REG NA
IN00a3:        mov      dword ptr [V09 rbp-40H], edx

Variable Live Range History Dump for BB16
V00 this: rbp[16] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V01 arg1: rbp[24] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V02 loc0: rbp[-8] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V03 loc1: rbp[-16] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V04 loc2: rbp[-20] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V05 loc3: rbp[-32] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V06 loc4: rbp[-40] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V07 loc5: rbp[-44] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V08 loc6: rbp[-56] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V09 loc7: rbp[-64] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V10 loc8: rbp[-68] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V11 loc9: rbp[-72] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V12 loc10: rbp[-88] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V13 loc11: rbp[-92] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V14 loc12: rbp[-96] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V15 loc13: rbp[-100] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V16 loc14: rbp[-104] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V17 loc15: rbp[-108] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]

=============== Generating BB17 [11C..145) -> BB19 (cond), preds={BB16} succs={BB18,BB19} flags=0x00000002.21090130: keep i try label hascall gcsafe bwd LIR 
BB17 IN (0)={} + ByrefExposed + GcHeap
     OUT(0)={} + ByrefExposed + GcHeap

Liveness not changing: 0000000000000000 {}
							Live regs: (unchanged) 00000000 {}
							GC regs: (unchanged) 00000000 {}
							Byref regs: (unchanged) 00000000 {}

      L_M48562_BB17:

      G_M48562_IG12:        ; offs=000310H, funclet=00, bbWeight=1   
Mapped BB17 to G_M48562_IG13
Label: IG13, GCvars=0000000000000000 {}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}

Scope info: begin block BB17, IL range [11C..145)
Added IP mapping: 0x011C STACK_EMPTY (G_M48562_IG13,ins#0,ofs#0) label
Generating: N586 (???,???) [000551] ------------                 IL_OFFSET void   IL offset: 0x11c REG NA
Generating: N588 (  3,  3) [000207] ------------       t207 =    LCL_VAR_ADDR long   V09 loc7          rdx REG rdx
IN00a4:        lea      rdx, [V09 rbp-40H]
                                                              /--*  t207   long   
Generating: N590 (???,???) [000657] ------------       t657 = *  PUTARG_REG long   REG rdx
Generating: N592 (  3,  2) [000205] ------------       t205 =    LCL_VAR   ref    V08 loc6          rcx REG rcx
IN00a5:        mov      rcx, gword ptr [V08 rbp-38H]
							GC regs: 00000000 {} => 00000002 {rcx}
                                                              /--*  t205   ref    
Generating: N594 (???,???) [000658] ------------       t658 = *  PUTARG_REG ref    REG rcx
							GC regs: 00000002 {rcx} => 00000000 {}
							GC regs: 00000000 {} => 00000002 {rcx}
                                                              /--*  t657   long   arg1 in rdx
                                                              +--*  t658   ref    arg0 in rcx
Generating: N596 ( 20, 12) [000208] --CXG-------              *  CALL      void   System.Threading.Monitor.Enter REG NA
							GC regs: 00000002 {rcx} => 00000000 {}
							Call: GCvars=0000000000000000 {}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}
Added IP mapping: 0x0120 CALL_INSTRUCTION (G_M48562_IG13,ins#2,ofs#8)
IN00a6:        call     System.Threading.Monitor:Enter(System.Object,byref)
Added IP mapping: 0x0125 STACK_EMPTY (G_M48562_IG13,ins#3,ofs#13)
Generating: N598 (???,???) [000552] ------------                 IL_OFFSET void   IL offset: 0x125 REG NA
Generating: N600 (  1,  1) [000209] ------------                 NO_OP     void   REG NA
IN00a7:        nop      
Added IP mapping: 0x0126 STACK_EMPTY (G_M48562_IG13,ins#4,ofs#14)
Generating: N602 (???,???) [000553] ------------                 IL_OFFSET void   IL offset: 0x126 REG NA
Generating: N604 (  1,  1) [000210] ------------                 NO_OP     void   REG NA
IN00a8:        nop      
Added IP mapping: 0x0127 STACK_EMPTY (G_M48562_IG13,ins#5,ofs#15)
Generating: N606 (???,???) [000554] ------------                 IL_OFFSET void   IL offset: 0x127 REG NA
Generating: N608 (  3,  2) [000211] ------------       t211 =    LCL_VAR   ref    V00 this          rcx REG rcx
IN00a9:        mov      rcx, gword ptr [V00 rbp+10H]
							GC regs: 00000000 {} => 00000002 {rcx}
                                                              /--*  t211   ref    
Generating: N610 (  4,  3) [000456] -c----------       t456 = *  LEA(b+8)  byref  REG NA
                                                              /--*  t456   byref  
Generating: N612 (  6,  5) [000212] ---XG-------       t212 = *  IND       ref    REG rcx
							GC regs: 00000002 {rcx} => 00000000 {}
IN00aa:        mov      rcx, gword ptr [rcx+8]
							GC regs: 00000000 {} => 00000002 {rcx}
                                                              /--*  t212   ref    
Generating: N614 (  7,  6) [000454] -c----------       t454 = *  LEA(b+8)  byref  REG NA
                                                              /--*  t454   byref  
Generating: N616 (  9,  8) [000213] ---XG-------       t213 = *  IND       ref    REG rcx
							GC regs: 00000002 {rcx} => 00000000 {}
IN00ab:        mov      rcx, gword ptr [rcx+8]
							GC regs: 00000000 {} => 00000002 {rcx}
Generating: N618 (  3,  2) [000214] ------------       t214 =    LCL_VAR   ref    V00 this          rax REG rax
IN00ac:        mov      rax, gword ptr [V00 rbp+10H]
							GC regs: 00000002 {rcx} => 00000003 {rax rcx}
                                                              /--*  t214   ref    
Generating: N620 (  4,  3) [000460] -c----------       t460 = *  LEA(b+8)  byref  REG NA
                                                              /--*  t460   byref  
Generating: N622 (  6,  5) [000215] ---XG-------       t215 = *  IND       ref    REG rax
							GC regs: 00000003 {rax rcx} => 00000002 {rcx}
IN00ad:        mov      rax, gword ptr [rax+8]
							GC regs: 00000002 {rcx} => 00000003 {rax rcx}
                                                              /--*  t215   ref    
Generating: N624 (  7,  6) [000458] -c----------       t458 = *  LEA(b+16) byref  REG NA
                                                              /--*  t458   byref  
Generating: N626 (  9,  8) [000216] -c-XG-------       t216 = *  IND       ref    REG NA
                                                              /--*  t213   ref    
                                                              +--*  t216   ref    
Generating: N628 ( 22, 17) [000217] ---XG-------       t217 = *  EQ        int    REG rcx
							GC regs: 00000003 {rax rcx} => 00000001 {rax}
							GC regs: 00000001 {rax} => 00000000 {}
IN00ae:        cmp      rcx, gword ptr [rax+16]
IN00af:        sete     cl
IN00b0:        movzx    rcx, cl
                                                              /--*  t217   int    
Generating: N630 ( 26, 20) [000219] DA-XG-------              *  STORE_LCL_VAR int    V10 loc8          NA REG NA
IN00b1:        mov      dword ptr [V10 rbp-44H], ecx
Added IP mapping: 0x0141 STACK_EMPTY (G_M48562_IG13,ins#14,ofs#48)
Generating: N632 (???,???) [000555] ------------                 IL_OFFSET void   IL offset: 0x141 REG NA
Generating: N634 (  3,  2) [000220] -c----------       t220 =    LCL_VAR   int    V10 loc8          NA REG NA
Generating: N636 (  1,  1) [000221] -c----------       t221 =    CNS_INT   int    0 REG NA
                                                              /--*  t220   int    
                                                              +--*  t221   int    
Generating: N638 (  5,  4) [000222] J------N----              *  EQ        void   REG NA
IN00b2:        cmp      dword ptr [V10 rbp-44H], 0
Generating: N640 (  7,  6) [000223] ------------              *  JTRUE     void   REG NA
IN00b3:        je       L_M48562_BB19

Variable Live Range History Dump for BB17
V00 this: rbp[16] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V01 arg1: rbp[24] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V02 loc0: rbp[-8] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V03 loc1: rbp[-16] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V04 loc2: rbp[-20] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V05 loc3: rbp[-32] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V06 loc4: rbp[-40] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V07 loc5: rbp[-44] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V08 loc6: rbp[-56] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V09 loc7: rbp[-64] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V10 loc8: rbp[-68] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V11 loc9: rbp[-72] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V12 loc10: rbp[-88] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V13 loc11: rbp[-92] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V14 loc12: rbp[-96] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V15 loc13: rbp[-100] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V16 loc14: rbp[-104] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V17 loc15: rbp[-108] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]

=============== Generating BB18 [145..148) -> BB20 (always), preds={BB17} succs={BB20} flags=0x00000000.21000020: i bwd LIR 
BB18 IN (0)={} + ByrefExposed + GcHeap
     OUT(0)={} + ByrefExposed + GcHeap

Liveness not changing: 0000000000000000 {}
							Live regs: (unchanged) 00000000 {}
							GC regs: (unchanged) 00000000 {}
							Byref regs: (unchanged) 00000000 {}

      L_M48562_BB18:

Scope info: begin block BB18, IL range [145..148)
Added IP mapping: 0x0145 STACK_EMPTY (G_M48562_IG13,ins#16,ofs#58) label
Generating: N644 (???,???) [000556] ------------                 IL_OFFSET void   IL offset: 0x145 REG NA
Generating: N646 (  1,  1) [000230] ------------                 NO_OP     void   REG NA
IN00b4:        nop      
Added IP mapping: 0x0146 STACK_EMPTY (G_M48562_IG13,ins#17,ofs#59)
Generating: N648 (???,???) [000557] ------------                 IL_OFFSET void   IL offset: 0x146 REG NA
Generating: N650 (  0,  0) [000231] ------------                 NOP       void   REG NA
IN00b5:        nop      
IN00b6:        jmp      L_M48562_BB20

Variable Live Range History Dump for BB18
V00 this: rbp[16] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V01 arg1: rbp[24] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V02 loc0: rbp[-8] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V03 loc1: rbp[-16] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V04 loc2: rbp[-20] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V05 loc3: rbp[-32] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V06 loc4: rbp[-40] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V07 loc5: rbp[-44] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V08 loc6: rbp[-56] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V09 loc7: rbp[-64] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V10 loc8: rbp[-68] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V11 loc9: rbp[-72] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V12 loc10: rbp[-88] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V13 loc11: rbp[-92] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V14 loc12: rbp[-96] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V15 loc13: rbp[-100] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V16 loc14: rbp[-104] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V17 loc15: rbp[-108] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]

=============== Generating BB19 [148..14B) -> BB22 (always), preds={BB17} succs={BB22} flags=0x00000000.21010020: i label bwd LIR 
BB19 IN (0)={} + ByrefExposed + GcHeap
     OUT(0)={} + ByrefExposed + GcHeap

Liveness not changing: 0000000000000000 {}
							Live regs: (unchanged) 00000000 {}
							GC regs: (unchanged) 00000000 {}
							Byref regs: (unchanged) 00000000 {}

      L_M48562_BB19:

      G_M48562_IG13:        ; offs=000322H, funclet=00, bbWeight=1   
Mapped BB19 to G_M48562_IG14
Label: IG14, GCvars=0000000000000000 {}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}

Scope info: begin block BB19, IL range [148..14B)
Added IP mapping: 0x0148 STACK_EMPTY (G_M48562_IG14,ins#0,ofs#0) label
Generating: N654 (???,???) [000558] ------------                 IL_OFFSET void   IL offset: 0x148 REG NA
Generating: N656 (  1,  1) [000224] ------------                 NO_OP     void   REG NA
IN00b7:        nop      
Added IP mapping: 0x0149 STACK_EMPTY (G_M48562_IG14,ins#1,ofs#1)
Generating: N658 (???,???) [000559] ------------                 IL_OFFSET void   IL offset: 0x149 REG NA
Generating: N660 (  0,  0) [000225] ------------                 NOP       void   REG NA
IN00b8:        nop      
IN00b9:        jmp      L_M48562_BB22

Variable Live Range History Dump for BB19
V00 this: rbp[16] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V01 arg1: rbp[24] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V02 loc0: rbp[-8] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V03 loc1: rbp[-16] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V04 loc2: rbp[-20] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V05 loc3: rbp[-32] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V06 loc4: rbp[-40] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V07 loc5: rbp[-44] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V08 loc6: rbp[-56] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V09 loc7: rbp[-64] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V10 loc8: rbp[-68] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V11 loc9: rbp[-72] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V12 loc10: rbp[-88] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V13 loc11: rbp[-92] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V14 loc12: rbp[-96] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V15 loc13: rbp[-100] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V16 loc14: rbp[-104] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V17 loc15: rbp[-108] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]

=============== Generating BB20 [???..???) -> BB24 (callf), preds={BB18} succs={BB24} flags=0x00000000.20010060: i internal label LIR 
BB20 IN (0)={} + ByrefExposed + GcHeap
     OUT(0)={} + ByrefExposed + GcHeap

Liveness not changing: 0000000000000000 {}
							Live regs: (unchanged) 00000000 {}
							GC regs: (unchanged) 00000000 {}
							Byref regs: (unchanged) 00000000 {}

      L_M48562_BB20:

      G_M48562_IG14:        ; offs=000363H, funclet=00, bbWeight=1   
Mapped BB20 to G_M48562_IG15
Label: IG15, GCvars=0000000000000000 {}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}

Scope info: begin block BB20, IL range [???..???)
Scope info: ignoring block beginning
Added IP mapping: NO_MAP STACK_EMPTY (G_M48562_IG15,ins#0,ofs#0) label
Scope info: ignoring block end
IN00ba:        mov      rcx, rsp
IN00bb:        call     L_M48562_BB24

      G_M48562_IG15:        ; offs=00036AH, funclet=00, bbWeight=1   
IN00bc:        jmp      L_M48562_BB29

Variable Live Range History Dump for BB21
V00 this: rbp[16] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V01 arg1: rbp[24] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V02 loc0: rbp[-8] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V03 loc1: rbp[-16] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V04 loc2: rbp[-20] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V05 loc3: rbp[-32] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V06 loc4: rbp[-40] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V07 loc5: rbp[-44] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V08 loc6: rbp[-56] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V09 loc7: rbp[-64] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V10 loc8: rbp[-68] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V11 loc9: rbp[-72] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V12 loc10: rbp[-88] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V13 loc11: rbp[-92] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V14 loc12: rbp[-96] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V15 loc13: rbp[-100] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V16 loc14: rbp[-104] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V17 loc15: rbp[-108] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]

=============== Generating BB22 [???..???) -> BB24 (callf), preds={BB19} succs={BB24} flags=0x00000000.20010060: i internal label LIR 
BB22 IN (0)={} + ByrefExposed + GcHeap
     OUT(0)={} + ByrefExposed + GcHeap

Liveness not changing: 0000000000000000 {}
							Live regs: (unchanged) 00000000 {}
							GC regs: (unchanged) 00000000 {}
							Byref regs: (unchanged) 00000000 {}

      L_M48562_BB22:

      G_M48562_IG16:        ; offs=000372H, funclet=00, bbWeight=1   
Mapped BB22 to G_M48562_IG17
Label: IG17, GCvars=0000000000000000 {}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}

Scope info: begin block BB22, IL range [???..???)
Scope info: ignoring block beginning
genIPmappingAdd: ignoring duplicate IL offset 0xffffffff
Scope info: ignoring block end
IN00bd:        mov      rcx, rsp
IN00be:        call     L_M48562_BB24

      G_M48562_IG17:        ; offs=000377H, funclet=00, bbWeight=1   
IN00bf:        nop      

Variable Live Range History Dump for BB23
V00 this: rbp[16] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V01 arg1: rbp[24] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V02 loc0: rbp[-8] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V03 loc1: rbp[-16] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V04 loc2: rbp[-20] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V05 loc3: rbp[-32] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V06 loc4: rbp[-40] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V07 loc5: rbp[-44] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V08 loc6: rbp[-56] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V09 loc7: rbp[-64] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V10 loc8: rbp[-68] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V11 loc9: rbp[-72] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V12 loc10: rbp[-88] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V13 loc11: rbp[-92] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V14 loc12: rbp[-96] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V15 loc13: rbp[-100] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V16 loc14: rbp[-104] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V17 loc15: rbp[-108] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]

=============== Generating BB27 [158..161), preds={BB23} succs={BB28} flags=0x00000002.21090020: i label hascall gcsafe bwd LIR 
BB27 IN (0)={} + ByrefExposed + GcHeap
     OUT(0)={} + ByrefExposed + GcHeap

Liveness not changing: 0000000000000000 {}
							Live regs: (unchanged) 00000000 {}
							GC regs: (unchanged) 00000000 {}
							Byref regs: (unchanged) 00000000 {}

      L_M48562_BB27:

      G_M48562_IG18:        ; offs=00037FH, funclet=00, bbWeight=1   
Mapped BB27 to G_M48562_IG19
Label: IG19, GCvars=0000000000000000 {}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}

Scope info: begin block BB27, IL range [158..161)
Scope info: found offset hole. lastOffs=331, currOffs=344
Added IP mapping: 0x0158 STACK_EMPTY (G_M48562_IG19,ins#0,ofs#0) label
Generating: N706 (???,???) [000560] ------------                 IL_OFFSET void   IL offset: 0x158 REG NA
Generating: N708 (  1,  1) [000226] ------------       t226 =    CNS_INT   int    100 REG rcx
IN00c0:        mov      ecx, 100
                                                              /--*  t226   int    
Generating: N710 (???,???) [000659] ------------       t659 = *  PUTARG_REG int    REG rcx
                                                              /--*  t659   int    arg0 in rcx
Generating: N712 ( 15,  7) [000227] --CXG-------              *  CALL      void   System.Threading.Thread.Sleep REG NA
							Call: GCvars=0000000000000000 {}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}
Added IP mapping: 0x015A CALL_INSTRUCTION (G_M48562_IG19,ins#1,ofs#5)
IN00c1:        call     System.Threading.Thread:Sleep(int)
Added IP mapping: 0x015F STACK_EMPTY (G_M48562_IG19,ins#2,ofs#10)
Generating: N714 (???,???) [000561] ------------                 IL_OFFSET void   IL offset: 0x15f REG NA
Generating: N716 (  1,  1) [000228] ------------                 NO_OP     void   REG NA
IN00c2:        nop      
Added IP mapping: 0x0160 STACK_EMPTY (G_M48562_IG19,ins#3,ofs#11)
Generating: N718 (???,???) [000562] ------------                 IL_OFFSET void   IL offset: 0x160 REG NA
Generating: N720 (  1,  1) [000229] ------------                 NO_OP     void   REG NA
IN00c3:        nop      

Variable Live Range History Dump for BB27
V00 this: rbp[16] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V01 arg1: rbp[24] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V02 loc0: rbp[-8] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V03 loc1: rbp[-16] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V04 loc2: rbp[-20] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V05 loc3: rbp[-32] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V06 loc4: rbp[-40] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V07 loc5: rbp[-44] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V08 loc6: rbp[-56] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V09 loc7: rbp[-64] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V10 loc8: rbp[-68] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V11 loc9: rbp[-72] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V12 loc10: rbp[-88] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V13 loc11: rbp[-92] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V14 loc12: rbp[-96] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V15 loc13: rbp[-100] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V16 loc14: rbp[-104] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V17 loc15: rbp[-108] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]

=============== Generating BB28 [161..166) -> BB16 (always), preds={BB15,BB27} succs={BB16} flags=0x00000000.21010020: i label bwd LIR 
BB28 IN (0)={} + ByrefExposed + GcHeap
     OUT(0)={} + ByrefExposed + GcHeap

Liveness not changing: 0000000000000000 {}
							Live regs: (unchanged) 00000000 {}
							GC regs: (unchanged) 00000000 {}
							Byref regs: (unchanged) 00000000 {}

      L_M48562_BB28:

      G_M48562_IG19:        ; offs=000380H, funclet=00, bbWeight=1   
Mapped BB28 to G_M48562_IG20
Label: IG20, GCvars=0000000000000000 {}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}

Scope info: begin block BB28, IL range [161..166)
Added IP mapping: 0x0161 STACK_EMPTY (G_M48562_IG20,ins#0,ofs#0) label
Generating: N552 (???,???) [000563] ------------                 IL_OFFSET void   IL offset: 0x161 REG NA
Generating: N554 (  1,  1) [000193] -c----------       t193 =    CNS_INT   int    1 REG NA
                                                              /--*  t193   int    
Generating: N556 (  5,  4) [000195] DA----------              *  STORE_LCL_VAR int    V11 loc9          NA REG NA
IN00c4:        mov      dword ptr [V11 rbp-48H], 1
Added IP mapping: 0x0164 STACK_EMPTY (G_M48562_IG20,ins#1,ofs#7)
Generating: N558 (???,???) [000564] ------------                 IL_OFFSET void   IL offset: 0x164 REG NA
Generating: N560 (  0,  0) [000196] ------------                 NOP       void   REG NA
IN00c5:        nop      
IN00c6:        jmp      L_M48562_BB16

Variable Live Range History Dump for BB28
V00 this: rbp[16] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V01 arg1: rbp[24] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V02 loc0: rbp[-8] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V03 loc1: rbp[-16] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V04 loc2: rbp[-20] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V05 loc3: rbp[-32] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V06 loc4: rbp[-40] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V07 loc5: rbp[-44] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V08 loc6: rbp[-56] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V09 loc7: rbp[-64] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V10 loc8: rbp[-68] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V11 loc9: rbp[-72] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V12 loc10: rbp[-88] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V13 loc11: rbp[-92] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V14 loc12: rbp[-96] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V15 loc13: rbp[-100] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V16 loc14: rbp[-104] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V17 loc15: rbp[-108] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]

=============== Generating BB29 [166..1B1) -> BB39 (always), preds={BB21} succs={BB39} flags=0x00000002.20090020: i label hascall gcsafe LIR 
BB29 IN (0)={} + ByrefExposed + GcHeap
     OUT(0)={} + ByrefExposed + GcHeap

Liveness not changing: 0000000000000000 {}
							Live regs: (unchanged) 00000000 {}
							GC regs: (unchanged) 00000000 {}
							Byref regs: (unchanged) 00000000 {}

      L_M48562_BB29:

      G_M48562_IG20:        ; offs=00038CH, funclet=00, bbWeight=1   
Mapped BB29 to G_M48562_IG21
Label: IG21, GCvars=0000000000000000 {}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}

Scope info: begin block BB29, IL range [166..1B1)
Added IP mapping: 0x0166 STACK_EMPTY (G_M48562_IG21,ins#0,ofs#0) label
Generating: N724 (???,???) [000565] ------------                 IL_OFFSET void   IL offset: 0x166 REG NA
Generating: N726 ( 14,  5) [000232] --CXG-------       t232 =    CALL      long   System.DateTime.get_Now REG rax
							Call: GCvars=0000000000000000 {}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}
Added IP mapping: 0x0166 STACK_EMPTY CALL_INSTRUCTION (G_M48562_IG21,ins#0,ofs#0)
IN00c7:        call     System.DateTime:get_Now():System.DateTime
                                                              /--*  t232   long   
Generating: N728 ( 18,  8) [000235] DA-XG-------              *  STORE_LCL_VAR struct<System.DateTime, 8> V37 tmp19         NA REG NA
IN00c8:        mov      qword ptr [V37 rbp-108H], rax
Added IP mapping: 0x016B (G_M48562_IG21,ins#2,ofs#12)
Generating: N730 (???,???) [000566] ------------                 IL_OFFSET void   IL offset: 0x16b REG NA
Generating: N732 (  3,  2) [000236] ------------       t236 =    LCL_VAR   struct<System.DateTime, 8> V37 tmp19         rcx REG rcx
IN00c9:        mov      rcx, qword ptr [V37 rbp-108H]
                                                              /--*  t236   struct 
Generating: N734 (  7,  5) [000239] DA--G-------              *  STORE_LCL_VAR struct<System.DateTime, 8>(AX) V03 loc1          NA REG NA
IN00ca:        mov      qword ptr [V03 rbp-10H], rcx
Added IP mapping: 0x016C STACK_EMPTY (G_M48562_IG21,ins#4,ofs#23)
Generating: N736 (???,???) [000567] ------------                 IL_OFFSET void   IL offset: 0x16c REG NA
Generating: N738 (  3,  3) [000241] ------------       t241 =    LCL_VAR_ADDR byref  V03 loc1          rcx REG rcx
IN00cb:        lea      rcx, bword ptr [V03 rbp-10H]
							Byref regs: 00000000 {} => 00000002 {rcx}
                                                              /--*  t241   byref  
Generating: N740 (???,???) [000660] ------------       t660 = *  PUTARG_REG byref  REG rcx
							Byref regs: 00000002 {rcx} => 00000000 {}
							Byref regs: 00000000 {} => 00000002 {rcx}
                                                              /--*  t660   byref  this in rcx
Generating: N742 ( 17, 10) [000242] --CXG-------       t242 = *  CALL      ref    System.DateTime.ToString REG rax
							Byref regs: 00000002 {rcx} => 00000000 {}
							Call: GCvars=0000000000000000 {}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}
Added IP mapping: 0x016E CALL_INSTRUCTION (G_M48562_IG21,ins#5,ofs#27)
IN00cc:        call     System.DateTime:ToString():System.String:this
							GC regs: 00000000 {} => 00000001 {rax}
                                                              /--*  t242   ref    
Generating: N744 ( 21, 13) [000244] DA-XG-------              *  STORE_LCL_VAR ref    V38 tmp20         NA REG NA
							GC regs: 00000001 {rax} => 00000000 {}
IN00cd:        mov      gword ptr [V38 rbp-110H], rax
Added IP mapping: 0x0173 (G_M48562_IG21,ins#7,ofs#39)
Generating: N746 (???,???) [000568] ------------                 IL_OFFSET void   IL offset: 0x173 REG NA
Generating: N748 (  2, 10) [000466] H-----------       t466 =    CNS_INT(h) long   0xBE2A3208 "	 Done.  Profiler is active, available options:" REG rdx
IN00ce:        mov      rdx, 0x1EDBE2A3208      ; "	 Done.  Profiler is active, available options:"
                                                              /--*  t466   long   
Generating: N750 (  4, 12) [000467] #---G-------       t467 = *  IND       ref    REG rdx
IN00cf:        mov      rdx, gword ptr [rdx]
							GC regs: 00000000 {} => 00000004 {rdx}
                                                              /--*  t467   ref    
Generating: N752 (???,???) [000661] ----G-------       t661 = *  PUTARG_REG ref    REG rdx
							GC regs: 00000004 {rdx} => 00000000 {}
							GC regs: 00000000 {} => 00000004 {rdx}
Generating: N754 (  3,  2) [000245] ------------       t245 =    LCL_VAR   ref    V38 tmp20         rcx REG rcx
IN00d0:        mov      rcx, gword ptr [V38 rbp-110H]
							GC regs: 00000004 {rdx} => 00000006 {rcx rdx}
                                                              /--*  t245   ref    
Generating: N756 (???,???) [000662] ------------       t662 = *  PUTARG_REG ref    REG rcx
							GC regs: 00000006 {rcx rdx} => 00000004 {rdx}
							GC regs: 00000004 {rdx} => 00000006 {rcx rdx}
                                                              /--*  t661   ref    arg1 in rdx
                                                              +--*  t662   ref    arg0 in rcx
Generating: N758 ( 21, 21) [000247] --CXG-------       t247 = *  CALL      ref    System.String.Concat REG rax
							GC regs: 00000006 {rcx rdx} => 00000002 {rcx}
							GC regs: 00000002 {rcx} => 00000000 {}
							Call: GCvars=0000000000000000 {}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}
Added IP mapping: 0x0178 CALL_INSTRUCTION (G_M48562_IG21,ins#10,ofs#59)
IN00d1:        call     System.String:Concat(System.String,System.String):System.String
							GC regs: 00000000 {} => 00000001 {rax}
                                                              /--*  t247   ref    
Generating: N760 ( 25, 24) [000249] DA-XG-------              *  STORE_LCL_VAR ref    V39 tmp21         NA REG NA
							GC regs: 00000001 {rax} => 00000000 {}
IN00d2:        mov      gword ptr [V39 rbp-118H], rax
Added IP mapping: 0x017D (G_M48562_IG21,ins#12,ofs#71)
Generating: N762 (???,???) [000569] ------------                 IL_OFFSET void   IL offset: 0x17d REG NA
Generating: N764 (  3,  2) [000250] ------------       t250 =    LCL_VAR   ref    V39 tmp21         rcx REG rcx
IN00d3:        mov      rcx, gword ptr [V39 rbp-118H]
							GC regs: 00000000 {} => 00000002 {rcx}
                                                              /--*  t250   ref    
Generating: N766 (???,???) [000663] ------------       t663 = *  PUTARG_REG ref    REG rcx
							GC regs: 00000002 {rcx} => 00000000 {}
							GC regs: 00000000 {} => 00000002 {rcx}
                                                              /--*  t663   ref    arg0 in rcx
Generating: N768 ( 17,  8) [000251] --CXG-------              *  CALL      void   System.Console.WriteLine REG NA
							GC regs: 00000002 {rcx} => 00000000 {}
							Call: GCvars=0000000000000000 {}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}
Added IP mapping: 0x017D CALL_INSTRUCTION (G_M48562_IG21,ins#13,ofs#78)
IN00d4:        call     System.Console:WriteLine(System.String)
Added IP mapping: 0x0182 STACK_EMPTY (G_M48562_IG21,ins#14,ofs#83)
Generating: N770 (???,???) [000570] ------------                 IL_OFFSET void   IL offset: 0x182 REG NA
Generating: N772 (  1,  1) [000252] ------------                 NO_OP     void   REG NA
IN00d5:        nop      
Added IP mapping: 0x0183 STACK_EMPTY (G_M48562_IG21,ins#15,ofs#84)
Generating: N774 (???,???) [000571] ------------                 IL_OFFSET void   IL offset: 0x183 REG NA
Generating: N776 (  2, 10) [000471] H-----------       t471 =    CNS_INT(h) long   0xBE2A3210 "   Q = quit" REG rcx
IN00d6:        mov      rcx, 0x1EDBE2A3210      ; "   Q = quit"
                                                              /--*  t471   long   
Generating: N778 (  4, 12) [000472] #---G-------       t472 = *  IND       ref    REG rcx
IN00d7:        mov      rcx, gword ptr [rcx]
							GC regs: 00000000 {} => 00000002 {rcx}
                                                              /--*  t472   ref    
Generating: N780 (???,???) [000664] ----G-------       t664 = *  PUTARG_REG ref    REG rcx
							GC regs: 00000002 {rcx} => 00000000 {}
							GC regs: 00000000 {} => 00000002 {rcx}
                                                              /--*  t664   ref    arg0 in rcx
Generating: N782 ( 18, 18) [000254] --CXG-------              *  CALL      void   System.Console.WriteLine REG NA
							GC regs: 00000002 {rcx} => 00000000 {}
							Call: GCvars=0000000000000000 {}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}
Added IP mapping: 0x0188 CALL_INSTRUCTION (G_M48562_IG21,ins#17,ofs#97)
IN00d8:        call     System.Console:WriteLine(System.String)
Added IP mapping: 0x018D STACK_EMPTY (G_M48562_IG21,ins#18,ofs#102)
Generating: N784 (???,???) [000572] ------------                 IL_OFFSET void   IL offset: 0x18d REG NA
Generating: N786 (  1,  1) [000255] ------------                 NO_OP     void   REG NA
IN00d9:        nop      
Added IP mapping: 0x018E STACK_EMPTY (G_M48562_IG21,ins#19,ofs#103)
Generating: N788 (???,???) [000573] ------------                 IL_OFFSET void   IL offset: 0x18e REG NA
Generating: N790 (  2, 10) [000474] H-----------       t474 =    CNS_INT(h) long   0xBE2A3218 "   H = heap snapshot" REG rcx
IN00da:        mov      rcx, 0x1EDBE2A3218      ; "   H = heap snapshot"
                                                              /--*  t474   long   
Generating: N792 (  4, 12) [000475] #---G-------       t475 = *  IND       ref    REG rcx
IN00db:        mov      rcx, gword ptr [rcx]
							GC regs: 00000000 {} => 00000002 {rcx}
                                                              /--*  t475   ref    
Generating: N794 (???,???) [000665] ----G-------       t665 = *  PUTARG_REG ref    REG rcx
							GC regs: 00000002 {rcx} => 00000000 {}
							GC regs: 00000000 {} => 00000002 {rcx}
                                                              /--*  t665   ref    arg0 in rcx
Generating: N796 ( 18, 18) [000257] --CXG-------              *  CALL      void   System.Console.WriteLine REG NA
							GC regs: 00000002 {rcx} => 00000000 {}
							Call: GCvars=0000000000000000 {}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}
Added IP mapping: 0x0193 CALL_INSTRUCTION (G_M48562_IG21,ins#21,ofs#116)
IN00dc:        call     System.Console:WriteLine(System.String)
Added IP mapping: 0x0198 STACK_EMPTY (G_M48562_IG21,ins#22,ofs#121)
Generating: N798 (???,???) [000574] ------------                 IL_OFFSET void   IL offset: 0x198 REG NA
Generating: N800 (  1,  1) [000258] ------------                 NO_OP     void   REG NA
IN00dd:        nop      
Added IP mapping: 0x0199 STACK_EMPTY (G_M48562_IG21,ins#23,ofs#122)
Generating: N802 (???,???) [000575] ------------                 IL_OFFSET void   IL offset: 0x199 REG NA
Generating: N804 (  2, 10) [000477] H-----------       t477 =    CNS_INT(h) long   0xBE2A3220 "   G = GC (max gen)" REG rcx
IN00de:        mov      rcx, 0x1EDBE2A3220      ; "   G = GC (max gen)"
                                                              /--*  t477   long   
Generating: N806 (  4, 12) [000478] #---G-------       t478 = *  IND       ref    REG rcx
IN00df:        mov      rcx, gword ptr [rcx]
							GC regs: 00000000 {} => 00000002 {rcx}
                                                              /--*  t478   ref    
Generating: N808 (???,???) [000666] ----G-------       t666 = *  PUTARG_REG ref    REG rcx
							GC regs: 00000002 {rcx} => 00000000 {}
							GC regs: 00000000 {} => 00000002 {rcx}
                                                              /--*  t666   ref    arg0 in rcx
Generating: N810 ( 18, 18) [000260] --CXG-------              *  CALL      void   System.Console.WriteLine REG NA
							GC regs: 00000002 {rcx} => 00000000 {}
							Call: GCvars=0000000000000000 {}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}
Added IP mapping: 0x019E CALL_INSTRUCTION (G_M48562_IG21,ins#25,ofs#135)
IN00e0:        call     System.Console:WriteLine(System.String)
Added IP mapping: 0x01A3 STACK_EMPTY (G_M48562_IG21,ins#26,ofs#140)
Generating: N812 (???,???) [000576] ------------                 IL_OFFSET void   IL offset: 0x1a3 REG NA
Generating: N814 (  1,  1) [000261] ------------                 NO_OP     void   REG NA
IN00e1:        nop      
Added IP mapping: 0x01A4 STACK_EMPTY (G_M48562_IG21,ins#27,ofs#141)
Generating: N816 (???,???) [000577] ------------                 IL_OFFSET void   IL offset: 0x1a4 REG NA
Generating: N818 (  2, 10) [000480] H-----------       t480 =    CNS_INT(h) long   0xBE2A3228 "   R = clear the running flag to stop the consumer thread" REG rcx
IN00e2:        mov      rcx, 0x1EDBE2A3228      ; "   R = clear the running flag to stop the consumer thread"
                                                              /--*  t480   long   
Generating: N820 (  4, 12) [000481] #---G-------       t481 = *  IND       ref    REG rcx
IN00e3:        mov      rcx, gword ptr [rcx]
							GC regs: 00000000 {} => 00000002 {rcx}
                                                              /--*  t481   ref    
Generating: N822 (???,???) [000667] ----G-------       t667 = *  PUTARG_REG ref    REG rcx
							GC regs: 00000002 {rcx} => 00000000 {}
							GC regs: 00000000 {} => 00000002 {rcx}
                                                              /--*  t667   ref    arg0 in rcx
Generating: N824 ( 18, 18) [000263] --CXG-------              *  CALL      void   System.Console.WriteLine REG NA
							GC regs: 00000002 {rcx} => 00000000 {}
							Call: GCvars=0000000000000000 {}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}
Added IP mapping: 0x01A9 CALL_INSTRUCTION (G_M48562_IG21,ins#29,ofs#154)
IN00e4:        call     System.Console:WriteLine(System.String)
Added IP mapping: 0x01AE STACK_EMPTY (G_M48562_IG21,ins#30,ofs#159)
Generating: N826 (???,???) [000578] ------------                 IL_OFFSET void   IL offset: 0x1ae REG NA
Generating: N828 (  1,  1) [000264] ------------                 NO_OP     void   REG NA
IN00e5:        nop      
Added IP mapping: 0x01AF STACK_EMPTY (G_M48562_IG21,ins#31,ofs#160)
Generating: N830 (???,???) [000579] ------------                 IL_OFFSET void   IL offset: 0x1af REG NA
Generating: N832 (  0,  0) [000265] ------------                 NOP       void   REG NA
IN00e6:        nop      
IN00e7:        jmp      L_M48562_BB39

Variable Live Range History Dump for BB29
V00 this: rbp[16] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V01 arg1: rbp[24] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V02 loc0: rbp[-8] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V03 loc1: rbp[-16] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V04 loc2: rbp[-20] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V05 loc3: rbp[-32] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V06 loc4: rbp[-40] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V07 loc5: rbp[-44] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V08 loc6: rbp[-56] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V09 loc7: rbp[-64] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V10 loc8: rbp[-68] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V11 loc9: rbp[-72] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V12 loc10: rbp[-88] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V13 loc11: rbp[-92] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V14 loc12: rbp[-96] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V15 loc13: rbp[-100] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V16 loc14: rbp[-104] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V17 loc15: rbp[-108] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]

=============== Generating BB30 [1B1..1CA) -> BB32 (cond), preds={BB39} succs={BB31,BB32} flags=0x0000000a.21090020: i label hascall gcsafe bwd bwd-target LIR 
BB30 IN (0)={} + ByrefExposed + GcHeap
     OUT(0)={} + ByrefExposed + GcHeap

Liveness not changing: 0000000000000000 {}
							Live regs: (unchanged) 00000000 {}
							GC regs: (unchanged) 00000000 {}
							Byref regs: (unchanged) 00000000 {}

      L_M48562_BB30:

      G_M48562_IG21:        ; offs=000399H, funclet=00, bbWeight=1   
Mapped BB30 to G_M48562_IG22
Label: IG22, GCvars=0000000000000000 {}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}

Scope info: begin block BB30, IL range [1B1..1CA)
Added IP mapping: 0x01B1 STACK_EMPTY (G_M48562_IG22,ins#0,ofs#0) label
Generating: N848 (???,???) [000580] ------------                 IL_OFFSET void   IL offset: 0x1b1 REG NA
Generating: N850 (  1,  1) [000270] ------------                 NO_OP     void   REG NA
IN00e8:        nop      
Added IP mapping: 0x01B2 STACK_EMPTY (G_M48562_IG22,ins#1,ofs#1)
Generating: N852 (???,???) [000581] ------------                 IL_OFFSET void   IL offset: 0x1b2 REG NA
Generating: N854 (  3,  3) [000273] ------------       t273 =    LCL_VAR_ADDR long   V40 tmp22         rcx REG rcx
IN00e9:        lea      rcx, [V40 rbp-128H]
                                                              /--*  t273   long   
Generating: N856 (???,???) [000668] ------------       t668 = *  PUTARG_REG long   REG rcx
                                                              /--*  t668   long   arg0 in rcx
Generating: N858 ( 17,  9) [000271] S-CXG-------              *  CALL      void   System.Console.ReadKey REG NA
							Call: GCvars=0000000000000000 {}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}
Added IP mapping: 0x01B2 STACK_EMPTY CALL_INSTRUCTION (G_M48562_IG22,ins#2,ofs#8)
IN00ea:        call     System.Console:ReadKey():System.ConsoleKeyInfo
Added IP mapping: 0x01B7 (G_M48562_IG22,ins#3,ofs#13)
Generating: N860 (???,???) [000582] ------------                 IL_OFFSET void   IL offset: 0x1b7 REG NA
Generating: N862 (  3,  2) [000274] -c----------       t274 =    LCL_VAR   struct<System.ConsoleKeyInfo, 12>(AX) V40 tmp22         NA REG NA
Generating: N864 (???,???) [000669] Dc-----N----       t669 =    LCL_VAR_ADDR byref  V12 loc10         NA REG NA
                                                              /--*  t669   byref  
                                                              +--*  t274   struct 
Generating: N866 (  7,  5) [000277] sA----------              *  STORE_BLK struct<System.ConsoleKeyInfo, 12> (copy) (Unroll) REG NA
IN00eb:        mov      rcx, qword ptr [V40 rbp-128H]
IN00ec:        mov      qword ptr [V12 rbp-58H], rcx
IN00ed:        mov      ecx, dword ptr [V40+0x8 rbp-120H]
IN00ee:        mov      dword ptr [V12+0x8 rbp-50H], ecx
Added IP mapping: 0x01B9 STACK_EMPTY (G_M48562_IG22,ins#7,ofs#33)
Generating: N868 (???,???) [000583] ------------                 IL_OFFSET void   IL offset: 0x1b9 REG NA
Generating: N870 (  3,  3) [000279] ------------       t279 =    LCL_VAR_ADDR byref  V12 loc10         rcx REG rcx
IN00ef:        lea      rcx, bword ptr [V12 rbp-58H]
							Byref regs: 00000000 {} => 00000002 {rcx}
                                                              /--*  t279   byref  
Generating: N872 (???,???) [000670] ------------       t670 = *  PUTARG_REG byref  REG rcx
							Byref regs: 00000002 {rcx} => 00000000 {}
							Byref regs: 00000000 {} => 00000002 {rcx}
                                                              /--*  t670   byref  this in rcx
Generating: N874 ( 17, 10) [000280] --CXG-------       t280 = *  CALL      int    System.ConsoleKeyInfo.get_Key REG rax
							Byref regs: 00000002 {rcx} => 00000000 {}
							Call: GCvars=0000000000000000 {}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}
Added IP mapping: 0x01BB CALL_INSTRUCTION (G_M48562_IG22,ins#8,ofs#37)
IN00f0:        call     System.ConsoleKeyInfo:get_Key():int:this
                                                              /--*  t280   int    
Generating: N876 ( 21, 13) [000282] DA-XG-------              *  STORE_LCL_VAR int    V41 tmp23         NA REG NA
IN00f1:        mov      dword ptr [V41 rbp-12CH], eax
Added IP mapping: 0x01C0 (G_M48562_IG22,ins#10,ofs#48)
Generating: N878 (???,???) [000584] ------------                 IL_OFFSET void   IL offset: 0x1c0 REG NA
Generating: N880 (  3,  2) [000283] -c----------       t283 =    LCL_VAR   int    V41 tmp23         NA REG NA
Generating: N882 (  1,  1) [000284] -c----------       t284 =    CNS_INT   int    71 REG NA
                                                              /--*  t283   int    
                                                              +--*  t284   int    
Generating: N884 (  8,  4) [000285] ------------       t285 = *  EQ        int    REG rax
IN00f2:        cmp      dword ptr [V41 rbp-12CH], 71
IN00f3:        sete     al
IN00f4:        movzx    rax, al
                                                              /--*  t285   int    
Generating: N886 ( 12,  7) [000287] DA----------              *  STORE_LCL_VAR int    V13 loc11         NA REG NA
IN00f5:        mov      dword ptr [V13 rbp-5CH], eax
Added IP mapping: 0x01C6 STACK_EMPTY (G_M48562_IG22,ins#14,ofs#64)
Generating: N888 (???,???) [000585] ------------                 IL_OFFSET void   IL offset: 0x1c6 REG NA
Generating: N890 (  3,  2) [000288] -c----------       t288 =    LCL_VAR   int    V13 loc11         NA REG NA
Generating: N892 (  1,  1) [000289] -c----------       t289 =    CNS_INT   int    0 REG NA
                                                              /--*  t288   int    
                                                              +--*  t289   int    
Generating: N894 (  5,  4) [000290] J------N----              *  EQ        void   REG NA
IN00f6:        cmp      dword ptr [V13 rbp-5CH], 0
Generating: N896 (  7,  6) [000291] ------------              *  JTRUE     void   REG NA
IN00f7:        je       L_M48562_BB32

Variable Live Range History Dump for BB30
V00 this: rbp[16] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V01 arg1: rbp[24] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V02 loc0: rbp[-8] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V03 loc1: rbp[-16] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V04 loc2: rbp[-20] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V05 loc3: rbp[-32] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V06 loc4: rbp[-40] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V07 loc5: rbp[-44] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V08 loc6: rbp[-56] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V09 loc7: rbp[-64] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V10 loc8: rbp[-68] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V11 loc9: rbp[-72] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V12 loc10: rbp[-88] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V13 loc11: rbp[-92] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V14 loc12: rbp[-96] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V15 loc13: rbp[-100] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V16 loc14: rbp[-104] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V17 loc15: rbp[-108] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]

=============== Generating BB31 [1CA..1D9) -> BB38 (always), preds={BB30} succs={BB38} flags=0x00000002.21080020: i hascall gcsafe bwd LIR 
BB31 IN (0)={} + ByrefExposed + GcHeap
     OUT(0)={} + ByrefExposed + GcHeap

Liveness not changing: 0000000000000000 {}
							Live regs: (unchanged) 00000000 {}
							GC regs: (unchanged) 00000000 {}
							Byref regs: (unchanged) 00000000 {}

      L_M48562_BB31:

Scope info: begin block BB31, IL range [1CA..1D9)
Added IP mapping: 0x01CA STACK_EMPTY (G_M48562_IG22,ins#16,ofs#74) label
Generating: N900 (???,???) [000586] ------------                 IL_OFFSET void   IL offset: 0x1ca REG NA
Generating: N902 (  1,  1) [000354] ------------                 NO_OP     void   REG NA
IN00f8:        nop      
Added IP mapping: 0x01CB STACK_EMPTY (G_M48562_IG22,ins#17,ofs#75)
Generating: N904 (???,???) [000587] ------------                 IL_OFFSET void   IL offset: 0x1cb REG NA
Generating: N906 ( 14,  5) [000355] --CXG-------       t355 =    CALL      int    System.GC.get_MaxGeneration REG rax
							Call: GCvars=0000000000000000 {}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}
Added IP mapping: 0x01CB STACK_EMPTY CALL_INSTRUCTION (G_M48562_IG22,ins#17,ofs#75)
IN00f9:        call     System.GC:get_MaxGeneration():int
                                                              /--*  t355   int    
Generating: N908 ( 18,  8) [000357] DA-XG-------              *  STORE_LCL_VAR int    V45 tmp27         NA REG NA
IN00fa:        mov      dword ptr [V45 rbp-13CH], eax
Added IP mapping: 0x01D0 (G_M48562_IG22,ins#19,ofs#86)
Generating: N910 (???,???) [000588] ------------                 IL_OFFSET void   IL offset: 0x1d0 REG NA
Generating: N912 (  3,  2) [000358] ------------       t358 =    LCL_VAR   int    V45 tmp27         rcx REG rcx
IN00fb:        mov      ecx, dword ptr [V45 rbp-13CH]
                                                              /--*  t358   int    
Generating: N914 (???,???) [000671] ------------       t671 = *  PUTARG_REG int    REG rcx
                                                              /--*  t671   int    arg0 in rcx
Generating: N916 ( 17,  8) [000359] --CXG-------              *  CALL      void   System.GC.Collect REG NA
							Call: GCvars=0000000000000000 {}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}
Added IP mapping: 0x01D0 CALL_INSTRUCTION (G_M48562_IG22,ins#20,ofs#92)
IN00fc:        call     System.GC:Collect(int)
Added IP mapping: 0x01D5 STACK_EMPTY (G_M48562_IG22,ins#21,ofs#97)
Generating: N918 (???,???) [000589] ------------                 IL_OFFSET void   IL offset: 0x1d5 REG NA
Generating: N920 (  1,  1) [000360] ------------                 NO_OP     void   REG NA
IN00fd:        nop      
Added IP mapping: 0x01D6 STACK_EMPTY (G_M48562_IG22,ins#22,ofs#98)
Generating: N922 (???,???) [000590] ------------                 IL_OFFSET void   IL offset: 0x1d6 REG NA
Generating: N924 (  1,  1) [000361] ------------                 NO_OP     void   REG NA
IN00fe:        nop      
Added IP mapping: 0x01D7 STACK_EMPTY (G_M48562_IG22,ins#23,ofs#99)
Generating: N926 (???,???) [000591] ------------                 IL_OFFSET void   IL offset: 0x1d7 REG NA
Generating: N928 (  0,  0) [000362] ------------                 NOP       void   REG NA
IN00ff:        nop      
IN0100:        jmp      L_M48562_BB38

Variable Live Range History Dump for BB31
V00 this: rbp[16] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V01 arg1: rbp[24] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V02 loc0: rbp[-8] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V03 loc1: rbp[-16] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V04 loc2: rbp[-20] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V05 loc3: rbp[-32] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V06 loc4: rbp[-40] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V07 loc5: rbp[-44] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V08 loc6: rbp[-56] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V09 loc7: rbp[-64] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V10 loc8: rbp[-68] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V11 loc9: rbp[-72] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V12 loc10: rbp[-88] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V13 loc11: rbp[-92] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V14 loc12: rbp[-96] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V15 loc13: rbp[-100] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V16 loc14: rbp[-104] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V17 loc15: rbp[-108] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]

=============== Generating BB32 [1D9..1EA) -> BB34 (cond), preds={BB30} succs={BB33,BB34} flags=0x00000002.21090020: i label hascall gcsafe bwd LIR 
BB32 IN (0)={} + ByrefExposed + GcHeap
     OUT(0)={} + ByrefExposed + GcHeap

Liveness not changing: 0000000000000000 {}
							Live regs: (unchanged) 00000000 {}
							GC regs: (unchanged) 00000000 {}
							Byref regs: (unchanged) 00000000 {}

      L_M48562_BB32:

      G_M48562_IG22:        ; offs=00043FH, funclet=00, bbWeight=1   
Mapped BB32 to G_M48562_IG23
Label: IG23, GCvars=0000000000000000 {}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}

Scope info: begin block BB32, IL range [1D9..1EA)
Added IP mapping: 0x01D9 STACK_EMPTY (G_M48562_IG23,ins#0,ofs#0) label
Generating: N932 (???,???) [000592] ------------                 IL_OFFSET void   IL offset: 0x1d9 REG NA
Generating: N934 (  3,  3) [000293] ------------       t293 =    LCL_VAR_ADDR byref  V12 loc10         rcx REG rcx
IN0101:        lea      rcx, bword ptr [V12 rbp-58H]
							Byref regs: 00000000 {} => 00000002 {rcx}
                                                              /--*  t293   byref  
Generating: N936 (???,???) [000672] ------------       t672 = *  PUTARG_REG byref  REG rcx
							Byref regs: 00000002 {rcx} => 00000000 {}
							Byref regs: 00000000 {} => 00000002 {rcx}
                                                              /--*  t672   byref  this in rcx
Generating: N938 ( 17, 10) [000294] --CXG-------       t294 = *  CALL      int    System.ConsoleKeyInfo.get_Key REG rax
							Byref regs: 00000002 {rcx} => 00000000 {}
							Call: GCvars=0000000000000000 {}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}
Added IP mapping: 0x01DB CALL_INSTRUCTION (G_M48562_IG23,ins#1,ofs#4)
IN0102:        call     System.ConsoleKeyInfo:get_Key():int:this
                                                              /--*  t294   int    
Generating: N940 ( 21, 13) [000296] DA-XG-------              *  STORE_LCL_VAR int    V42 tmp24         NA REG NA
IN0103:        mov      dword ptr [V42 rbp-130H], eax
Added IP mapping: 0x01E0 (G_M48562_IG23,ins#3,ofs#15)
Generating: N942 (???,???) [000593] ------------                 IL_OFFSET void   IL offset: 0x1e0 REG NA
Generating: N944 (  3,  2) [000297] -c----------       t297 =    LCL_VAR   int    V42 tmp24         NA REG NA
Generating: N946 (  1,  1) [000298] -c----------       t298 =    CNS_INT   int    72 REG NA
                                                              /--*  t297   int    
                                                              +--*  t298   int    
Generating: N948 (  8,  4) [000299] ------------       t299 = *  EQ        int    REG rax
IN0104:        cmp      dword ptr [V42 rbp-130H], 72
IN0105:        sete     al
IN0106:        movzx    rax, al
                                                              /--*  t299   int    
Generating: N950 ( 12,  7) [000301] DA----------              *  STORE_LCL_VAR int    V14 loc12         NA REG NA
IN0107:        mov      dword ptr [V14 rbp-60H], eax
Added IP mapping: 0x01E6 STACK_EMPTY (G_M48562_IG23,ins#7,ofs#31)
Generating: N952 (???,???) [000594] ------------                 IL_OFFSET void   IL offset: 0x1e6 REG NA
Generating: N954 (  3,  2) [000302] -c----------       t302 =    LCL_VAR   int    V14 loc12         NA REG NA
Generating: N956 (  1,  1) [000303] -c----------       t303 =    CNS_INT   int    0 REG NA
                                                              /--*  t302   int    
                                                              +--*  t303   int    
Generating: N958 (  5,  4) [000304] J------N----              *  EQ        void   REG NA
IN0108:        cmp      dword ptr [V14 rbp-60H], 0
Generating: N960 (  7,  6) [000305] ------------              *  JTRUE     void   REG NA
IN0109:        je       L_M48562_BB34

Variable Live Range History Dump for BB32
V00 this: rbp[16] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V01 arg1: rbp[24] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V02 loc0: rbp[-8] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V03 loc1: rbp[-16] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V04 loc2: rbp[-20] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V05 loc3: rbp[-32] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V06 loc4: rbp[-40] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V07 loc5: rbp[-44] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V08 loc6: rbp[-56] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V09 loc7: rbp[-64] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V10 loc8: rbp[-68] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V11 loc9: rbp[-72] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V12 loc10: rbp[-88] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V13 loc11: rbp[-92] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V14 loc12: rbp[-96] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V15 loc13: rbp[-100] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V16 loc14: rbp[-104] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V17 loc15: rbp[-108] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]

=============== Generating BB33 [1EA..1F4) -> BB38 (always), preds={BB32} succs={BB38} flags=0x00000002.21080020: i hascall gcsafe bwd LIR 
BB33 IN (0)={} + ByrefExposed + GcHeap
     OUT(0)={} + ByrefExposed + GcHeap

Liveness not changing: 0000000000000000 {}
							Live regs: (unchanged) 00000000 {}
							GC regs: (unchanged) 00000000 {}
							Byref regs: (unchanged) 00000000 {}

      L_M48562_BB33:

Scope info: begin block BB33, IL range [1EA..1F4)
Added IP mapping: 0x01EA STACK_EMPTY (G_M48562_IG23,ins#9,ofs#41) label
Generating: N964 (???,???) [000595] ------------                 IL_OFFSET void   IL offset: 0x1ea REG NA
Generating: N966 (  1,  1) [000349] ------------                 NO_OP     void   REG NA
IN010a:        nop      
Added IP mapping: 0x01EB STACK_EMPTY (G_M48562_IG23,ins#10,ofs#42)
Generating: N968 (???,???) [000596] ------------                 IL_OFFSET void   IL offset: 0x1eb REG NA
Generating: N970 ( 14,  5) [000350] --CXG-------                 CALL      void   System.Diagnostics.Debugger.Break REG NA
							Call: GCvars=0000000000000000 {}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}
Added IP mapping: 0x01EB STACK_EMPTY CALL_INSTRUCTION (G_M48562_IG23,ins#10,ofs#42)
IN010b:        call     System.Diagnostics.Debugger:Break()
Added IP mapping: 0x01F0 STACK_EMPTY (G_M48562_IG23,ins#11,ofs#47)
Generating: N972 (???,???) [000597] ------------                 IL_OFFSET void   IL offset: 0x1f0 REG NA
Generating: N974 (  1,  1) [000351] ------------                 NO_OP     void   REG NA
IN010c:        nop      
Added IP mapping: 0x01F1 STACK_EMPTY (G_M48562_IG23,ins#12,ofs#48)
Generating: N976 (???,???) [000598] ------------                 IL_OFFSET void   IL offset: 0x1f1 REG NA
Generating: N978 (  1,  1) [000352] ------------                 NO_OP     void   REG NA
IN010d:        nop      
Added IP mapping: 0x01F2 STACK_EMPTY (G_M48562_IG23,ins#13,ofs#49)
Generating: N980 (???,???) [000599] ------------                 IL_OFFSET void   IL offset: 0x1f2 REG NA
Generating: N982 (  0,  0) [000353] ------------                 NOP       void   REG NA
IN010e:        nop      
IN010f:        jmp      L_M48562_BB38

Variable Live Range History Dump for BB33
V00 this: rbp[16] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V01 arg1: rbp[24] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V02 loc0: rbp[-8] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V03 loc1: rbp[-16] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V04 loc2: rbp[-20] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V05 loc3: rbp[-32] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V06 loc4: rbp[-40] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V07 loc5: rbp[-44] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V08 loc6: rbp[-56] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V09 loc7: rbp[-64] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V10 loc8: rbp[-68] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V11 loc9: rbp[-72] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V12 loc10: rbp[-88] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V13 loc11: rbp[-92] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V14 loc12: rbp[-96] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V15 loc13: rbp[-100] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V16 loc14: rbp[-104] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V17 loc15: rbp[-108] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]

=============== Generating BB34 [1F4..205) -> BB36 (cond), preds={BB32} succs={BB35,BB36} flags=0x00000002.21090020: i label hascall gcsafe bwd LIR 
BB34 IN (0)={} + ByrefExposed + GcHeap
     OUT(0)={} + ByrefExposed + GcHeap

Liveness not changing: 0000000000000000 {}
							Live regs: (unchanged) 00000000 {}
							GC regs: (unchanged) 00000000 {}
							Byref regs: (unchanged) 00000000 {}

      L_M48562_BB34:

      G_M48562_IG23:        ; offs=0004A8H, funclet=00, bbWeight=1   
Mapped BB34 to G_M48562_IG24
Label: IG24, GCvars=0000000000000000 {}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}

Scope info: begin block BB34, IL range [1F4..205)
Added IP mapping: 0x01F4 STACK_EMPTY (G_M48562_IG24,ins#0,ofs#0) label
Generating: N986 (???,???) [000600] ------------                 IL_OFFSET void   IL offset: 0x1f4 REG NA
Generating: N988 (  3,  3) [000307] ------------       t307 =    LCL_VAR_ADDR byref  V12 loc10         rcx REG rcx
IN0110:        lea      rcx, bword ptr [V12 rbp-58H]
							Byref regs: 00000000 {} => 00000002 {rcx}
                                                              /--*  t307   byref  
Generating: N990 (???,???) [000673] ------------       t673 = *  PUTARG_REG byref  REG rcx
							Byref regs: 00000002 {rcx} => 00000000 {}
							Byref regs: 00000000 {} => 00000002 {rcx}
                                                              /--*  t673   byref  this in rcx
Generating: N992 ( 17, 10) [000308] --CXG-------       t308 = *  CALL      int    System.ConsoleKeyInfo.get_Key REG rax
							Byref regs: 00000002 {rcx} => 00000000 {}
							Call: GCvars=0000000000000000 {}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}
Added IP mapping: 0x01F6 CALL_INSTRUCTION (G_M48562_IG24,ins#1,ofs#4)
IN0111:        call     System.ConsoleKeyInfo:get_Key():int:this
                                                              /--*  t308   int    
Generating: N994 ( 21, 13) [000310] DA-XG-------              *  STORE_LCL_VAR int    V43 tmp25         NA REG NA
IN0112:        mov      dword ptr [V43 rbp-134H], eax
Added IP mapping: 0x01FB (G_M48562_IG24,ins#3,ofs#15)
Generating: N996 (???,???) [000601] ------------                 IL_OFFSET void   IL offset: 0x1fb REG NA
Generating: N998 (  3,  2) [000311] -c----------       t311 =    LCL_VAR   int    V43 tmp25         NA REG NA
Generating: N1000 (  1,  1) [000312] -c----------       t312 =    CNS_INT   int    82 REG NA
                                                              /--*  t311   int    
                                                              +--*  t312   int    
Generating: N1002 (  8,  4) [000313] ------------       t313 = *  EQ        int    REG rcx
IN0113:        cmp      dword ptr [V43 rbp-134H], 82
IN0114:        sete     cl
IN0115:        movzx    rcx, cl
                                                              /--*  t313   int    
Generating: N1004 ( 12,  7) [000315] DA----------              *  STORE_LCL_VAR int    V15 loc13         NA REG NA
IN0116:        mov      dword ptr [V15 rbp-64H], ecx
Added IP mapping: 0x0201 STACK_EMPTY (G_M48562_IG24,ins#7,ofs#31)
Generating: N1006 (???,???) [000602] ------------                 IL_OFFSET void   IL offset: 0x201 REG NA
Generating: N1008 (  3,  2) [000316] -c----------       t316 =    LCL_VAR   int    V15 loc13         NA REG NA
Generating: N1010 (  1,  1) [000317] -c----------       t317 =    CNS_INT   int    0 REG NA
                                                              /--*  t316   int    
                                                              +--*  t317   int    
Generating: N1012 (  5,  4) [000318] J------N----              *  EQ        void   REG NA
IN0117:        cmp      dword ptr [V15 rbp-64H], 0
Generating: N1014 (  7,  6) [000319] ------------              *  JTRUE     void   REG NA
IN0118:        je       L_M48562_BB36

Variable Live Range History Dump for BB34
V00 this: rbp[16] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V01 arg1: rbp[24] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V02 loc0: rbp[-8] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V03 loc1: rbp[-16] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V04 loc2: rbp[-20] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V05 loc3: rbp[-32] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V06 loc4: rbp[-40] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V07 loc5: rbp[-44] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V08 loc6: rbp[-56] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V09 loc7: rbp[-64] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V10 loc8: rbp[-68] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V11 loc9: rbp[-72] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V12 loc10: rbp[-88] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V13 loc11: rbp[-92] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V14 loc12: rbp[-96] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V15 loc13: rbp[-100] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V16 loc14: rbp[-104] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V17 loc15: rbp[-108] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]

=============== Generating BB35 [205..210) -> BB38 (always), preds={BB34} succs={BB38} flags=0x00000000.21000020: i bwd LIR 
BB35 IN (0)={} + ByrefExposed + GcHeap
     OUT(0)={} + ByrefExposed + GcHeap

Liveness not changing: 0000000000000000 {}
							Live regs: (unchanged) 00000000 {}
							GC regs: (unchanged) 00000000 {}
							Byref regs: (unchanged) 00000000 {}

      L_M48562_BB35:

Scope info: begin block BB35, IL range [205..210)
Added IP mapping: 0x0205 STACK_EMPTY (G_M48562_IG24,ins#9,ofs#41) label
Generating: N1018 (???,???) [000603] ------------                 IL_OFFSET void   IL offset: 0x205 REG NA
Generating: N1020 (  1,  1) [000342] ------------                 NO_OP     void   REG NA
IN0119:        nop      
Added IP mapping: 0x0206 STACK_EMPTY (G_M48562_IG24,ins#10,ofs#42)
Generating: N1022 (???,???) [000604] ------------                 IL_OFFSET void   IL offset: 0x206 REG NA
Generating: N1024 (  3,  2) [000343] ------------       t343 =    LCL_VAR   ref    V00 this          rcx REG rcx
IN011a:        mov      rcx, gword ptr [V00 rbp+10H]
							GC regs: 00000000 {} => 00000002 {rcx}
                                                              /--*  t343   ref    
Generating: N1026 (  4,  3) [000489] -c----------       t489 = *  LEA(b+16) byref  REG NA
Generating: N1028 (  1,  1) [000344] -c----------       t344 =    CNS_INT   int    0 REG NA
                                                              /--*  t489   byref  
                                                              +--*  t344   int    
Generating: N1030 (???,???) [000605] -A-XG-------              *  STOREIND  bool   REG NA
							GC regs: 00000002 {rcx} => 00000000 {}
IN011b:        mov      byte  ptr [rcx+16], 0
Added IP mapping: 0x020D STACK_EMPTY (G_M48562_IG24,ins#12,ofs#50)
Generating: N1032 (???,???) [000606] ------------                 IL_OFFSET void   IL offset: 0x20d REG NA
Generating: N1034 (  1,  1) [000347] ------------                 NO_OP     void   REG NA
IN011c:        nop      
Added IP mapping: 0x020E STACK_EMPTY (G_M48562_IG24,ins#13,ofs#51)
Generating: N1036 (???,???) [000607] ------------                 IL_OFFSET void   IL offset: 0x20e REG NA
Generating: N1038 (  0,  0) [000348] ------------                 NOP       void   REG NA
IN011d:        nop      
IN011e:        jmp      L_M48562_BB38

Variable Live Range History Dump for BB35
V00 this: rbp[16] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V01 arg1: rbp[24] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V02 loc0: rbp[-8] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V03 loc1: rbp[-16] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V04 loc2: rbp[-20] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V05 loc3: rbp[-32] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V06 loc4: rbp[-40] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V07 loc5: rbp[-44] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V08 loc6: rbp[-56] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V09 loc7: rbp[-64] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V10 loc8: rbp[-68] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V11 loc9: rbp[-72] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V12 loc10: rbp[-88] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V13 loc11: rbp[-92] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V14 loc12: rbp[-96] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V15 loc13: rbp[-100] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V16 loc14: rbp[-104] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V17 loc15: rbp[-108] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]

=============== Generating BB36 [210..221) -> BB38 (cond), preds={BB34} succs={BB37,BB38} flags=0x00000002.21090020: i label hascall gcsafe bwd LIR 
BB36 IN (0)={} + ByrefExposed + GcHeap
     OUT(0)={} + ByrefExposed + GcHeap

Liveness not changing: 0000000000000000 {}
							Live regs: (unchanged) 00000000 {}
							GC regs: (unchanged) 00000000 {}
							Byref regs: (unchanged) 00000000 {}

      L_M48562_BB36:

      G_M48562_IG24:        ; offs=0004DFH, funclet=00, bbWeight=1   
Mapped BB36 to G_M48562_IG25
Label: IG25, GCvars=0000000000000000 {}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}

Scope info: begin block BB36, IL range [210..221)
Added IP mapping: 0x0210 STACK_EMPTY (G_M48562_IG25,ins#0,ofs#0) label
Generating: N1042 (???,???) [000608] ------------                 IL_OFFSET void   IL offset: 0x210 REG NA
Generating: N1044 (  3,  3) [000321] ------------       t321 =    LCL_VAR_ADDR byref  V12 loc10         rcx REG rcx
IN011f:        lea      rcx, bword ptr [V12 rbp-58H]
							Byref regs: 00000000 {} => 00000002 {rcx}
                                                              /--*  t321   byref  
Generating: N1046 (???,???) [000674] ------------       t674 = *  PUTARG_REG byref  REG rcx
							Byref regs: 00000002 {rcx} => 00000000 {}
							Byref regs: 00000000 {} => 00000002 {rcx}
                                                              /--*  t674   byref  this in rcx
Generating: N1048 ( 17, 10) [000322] --CXG-------       t322 = *  CALL      int    System.ConsoleKeyInfo.get_Key REG rax
							Byref regs: 00000002 {rcx} => 00000000 {}
							Call: GCvars=0000000000000000 {}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}
Added IP mapping: 0x0212 CALL_INSTRUCTION (G_M48562_IG25,ins#1,ofs#4)
IN0120:        call     System.ConsoleKeyInfo:get_Key():int:this
                                                              /--*  t322   int    
Generating: N1050 ( 21, 13) [000324] DA-XG-------              *  STORE_LCL_VAR int    V44 tmp26         NA REG NA
IN0121:        mov      dword ptr [V44 rbp-138H], eax
Added IP mapping: 0x0217 (G_M48562_IG25,ins#3,ofs#15)
Generating: N1052 (???,???) [000609] ------------                 IL_OFFSET void   IL offset: 0x217 REG NA
Generating: N1054 (  3,  2) [000325] -c----------       t325 =    LCL_VAR   int    V44 tmp26         NA REG NA
Generating: N1056 (  1,  1) [000326] -c----------       t326 =    CNS_INT   int    81 REG NA
                                                              /--*  t325   int    
                                                              +--*  t326   int    
Generating: N1058 (  8,  4) [000327] ------------       t327 = *  EQ        int    REG rax
IN0122:        cmp      dword ptr [V44 rbp-138H], 81
IN0123:        sete     al
IN0124:        movzx    rax, al
                                                              /--*  t327   int    
Generating: N1060 ( 12,  7) [000329] DA----------              *  STORE_LCL_VAR int    V16 loc14         NA REG NA
IN0125:        mov      dword ptr [V16 rbp-68H], eax
Added IP mapping: 0x021D STACK_EMPTY (G_M48562_IG25,ins#7,ofs#31)
Generating: N1062 (???,???) [000610] ------------                 IL_OFFSET void   IL offset: 0x21d REG NA
Generating: N1064 (  3,  2) [000330] -c----------       t330 =    LCL_VAR   int    V16 loc14         NA REG NA
Generating: N1066 (  1,  1) [000331] -c----------       t331 =    CNS_INT   int    0 REG NA
                                                              /--*  t330   int    
                                                              +--*  t331   int    
Generating: N1068 (  5,  4) [000332] J------N----              *  EQ        void   REG NA
IN0126:        cmp      dword ptr [V16 rbp-68H], 0
Generating: N1070 (  7,  6) [000333] ------------              *  JTRUE     void   REG NA
IN0127:        je       L_M48562_BB38

Variable Live Range History Dump for BB36
V00 this: rbp[16] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V01 arg1: rbp[24] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V02 loc0: rbp[-8] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V03 loc1: rbp[-16] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V04 loc2: rbp[-20] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V05 loc3: rbp[-32] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V06 loc4: rbp[-40] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V07 loc5: rbp[-44] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V08 loc6: rbp[-56] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V09 loc7: rbp[-64] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V10 loc8: rbp[-68] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V11 loc9: rbp[-72] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V12 loc10: rbp[-88] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V13 loc11: rbp[-92] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V14 loc12: rbp[-96] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V15 loc13: rbp[-100] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V16 loc14: rbp[-104] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V17 loc15: rbp[-108] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]

=============== Generating BB37 [221..224) -> BB40 (always), preds={BB36} succs={BB40} flags=0x00000000.21000020: i bwd LIR 
BB37 IN (0)={} + ByrefExposed + GcHeap
     OUT(0)={} + ByrefExposed + GcHeap

Liveness not changing: 0000000000000000 {}
							Live regs: (unchanged) 00000000 {}
							GC regs: (unchanged) 00000000 {}
							Byref regs: (unchanged) 00000000 {}

      L_M48562_BB37:

Scope info: begin block BB37, IL range [221..224)
Added IP mapping: 0x0221 STACK_EMPTY (G_M48562_IG25,ins#9,ofs#41) label
Generating: N1074 (???,???) [000611] ------------                 IL_OFFSET void   IL offset: 0x221 REG NA
Generating: N1076 (  1,  1) [000335] ------------                 NO_OP     void   REG NA
IN0128:        nop      
Added IP mapping: 0x0222 STACK_EMPTY (G_M48562_IG25,ins#10,ofs#42)
Generating: N1078 (???,???) [000612] ------------                 IL_OFFSET void   IL offset: 0x222 REG NA
Generating: N1080 (  0,  0) [000336] ------------                 NOP       void   REG NA
IN0129:        nop      
IN012a:        jmp      L_M48562_BB40

Variable Live Range History Dump for BB37
V00 this: rbp[16] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V01 arg1: rbp[24] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V02 loc0: rbp[-8] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V03 loc1: rbp[-16] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V04 loc2: rbp[-20] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V05 loc3: rbp[-32] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V06 loc4: rbp[-40] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V07 loc5: rbp[-44] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V08 loc6: rbp[-56] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V09 loc7: rbp[-64] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V10 loc8: rbp[-68] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V11 loc9: rbp[-72] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V12 loc10: rbp[-88] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V13 loc11: rbp[-92] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V14 loc12: rbp[-96] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V15 loc13: rbp[-100] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V16 loc14: rbp[-104] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V17 loc15: rbp[-108] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]

=============== Generating BB38 [224..225), preds={BB31,BB33,BB35,BB36} succs={BB39} flags=0x00000000.21010020: i label bwd LIR 
BB38 IN (0)={} + ByrefExposed + GcHeap
     OUT(0)={} + ByrefExposed + GcHeap

Liveness not changing: 0000000000000000 {}
							Live regs: (unchanged) 00000000 {}
							GC regs: (unchanged) 00000000 {}
							Byref regs: (unchanged) 00000000 {}

      L_M48562_BB38:

      G_M48562_IG25:        ; offs=000518H, funclet=00, bbWeight=1   
Mapped BB38 to G_M48562_IG26
Label: IG26, GCvars=0000000000000000 {}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}

Scope info: begin block BB38, IL range [224..225)
Added IP mapping: 0x0224 STACK_EMPTY (G_M48562_IG26,ins#0,ofs#0) label
Generating: N1084 (???,???) [000613] ------------                 IL_OFFSET void   IL offset: 0x224 REG NA
Generating: N1086 (  1,  1) [000334] ------------                 NO_OP     void   REG NA
IN012b:        nop      

Variable Live Range History Dump for BB38
V00 this: rbp[16] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V01 arg1: rbp[24] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V02 loc0: rbp[-8] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V03 loc1: rbp[-16] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V04 loc2: rbp[-20] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V05 loc3: rbp[-32] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V06 loc4: rbp[-40] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V07 loc5: rbp[-44] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V08 loc6: rbp[-56] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V09 loc7: rbp[-64] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V10 loc8: rbp[-68] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V11 loc9: rbp[-72] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V12 loc10: rbp[-88] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V13 loc11: rbp[-92] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V14 loc12: rbp[-96] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V15 loc13: rbp[-100] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V16 loc14: rbp[-104] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V17 loc15: rbp[-108] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]

=============== Generating BB39 [225..22A) -> BB30 (always), preds={BB29,BB38} succs={BB30} flags=0x00000000.21010020: i label bwd LIR 
BB39 IN (0)={} + ByrefExposed + GcHeap
     OUT(0)={} + ByrefExposed + GcHeap

Liveness not changing: 0000000000000000 {}
							Live regs: (unchanged) 00000000 {}
							GC regs: (unchanged) 00000000 {}
							Byref regs: (unchanged) 00000000 {}

      L_M48562_BB39:

      G_M48562_IG26:        ; offs=000548H, funclet=00, bbWeight=1   
Mapped BB39 to G_M48562_IG27
Label: IG27, GCvars=0000000000000000 {}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}

Scope info: begin block BB39, IL range [225..22A)
Added IP mapping: 0x0225 STACK_EMPTY (G_M48562_IG27,ins#0,ofs#0) label
Generating: N836 (???,???) [000614] ------------                 IL_OFFSET void   IL offset: 0x225 REG NA
Generating: N838 (  1,  1) [000266] -c----------       t266 =    CNS_INT   int    1 REG NA
                                                              /--*  t266   int    
Generating: N840 (  5,  4) [000268] DA----------              *  STORE_LCL_VAR int    V17 loc15         NA REG NA
IN012c:        mov      dword ptr [V17 rbp-6CH], 1
Added IP mapping: 0x0228 STACK_EMPTY (G_M48562_IG27,ins#1,ofs#7)
Generating: N842 (???,???) [000615] ------------                 IL_OFFSET void   IL offset: 0x228 REG NA
Generating: N844 (  0,  0) [000269] ------------                 NOP       void   REG NA
IN012d:        nop      
IN012e:        jmp      L_M48562_BB30

Variable Live Range History Dump for BB39
V00 this: rbp[16] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V01 arg1: rbp[24] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V02 loc0: rbp[-8] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V03 loc1: rbp[-16] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V04 loc2: rbp[-20] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V05 loc3: rbp[-32] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V06 loc4: rbp[-40] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V07 loc5: rbp[-44] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V08 loc6: rbp[-56] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V09 loc7: rbp[-64] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V10 loc8: rbp[-68] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V11 loc9: rbp[-72] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V12 loc10: rbp[-88] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V13 loc11: rbp[-92] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V14 loc12: rbp[-96] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V15 loc13: rbp[-100] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V16 loc14: rbp[-104] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V17 loc15: rbp[-108] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]

=============== Generating BB40 [22A..232) (return), preds={BB37} succs={} flags=0x00000000.20010020: i label LIR 
BB40 IN (0)={} + ByrefExposed + GcHeap
     OUT(0)={} + ByrefExposed + GcHeap

Liveness not changing: 0000000000000000 {}
							Live regs: (unchanged) 00000000 {}
							GC regs: (unchanged) 00000000 {}
							Byref regs: (unchanged) 00000000 {}

      L_M48562_BB40:

      G_M48562_IG27:        ; offs=000549H, funclet=00, bbWeight=1   
Mapped BB40 to G_M48562_IG28
Label: IG28, GCvars=0000000000000000 {}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}

Scope info: begin block BB40, IL range [22A..232)
Added IP mapping: 0x022A STACK_EMPTY (G_M48562_IG28,ins#0,ofs#0) label
Generating: N1090 (???,???) [000616] ------------                 IL_OFFSET void   IL offset: 0x22a REG NA
Generating: N1092 (  3,  2) [000337] ------------       t337 =    LCL_VAR   ref    V00 this          rax REG rax
IN012f:        mov      rax, gword ptr [V00 rbp+10H]
							GC regs: 00000000 {} => 00000001 {rax}
                                                              /--*  t337   ref    
Generating: N1094 (  4,  3) [000493] -c----------       t493 = *  LEA(b+16) byref  REG NA
Generating: N1096 (  1,  1) [000338] -c----------       t338 =    CNS_INT   int    0 REG NA
                                                              /--*  t493   byref  
                                                              +--*  t338   int    
Generating: N1098 (???,???) [000617] -A-XG-------              *  STOREIND  bool   REG NA
							GC regs: 00000001 {rax} => 00000000 {}
IN0130:        mov      byte  ptr [rax+16], 0
Added IP mapping: 0x0231 STACK_EMPTY (G_M48562_IG28,ins#2,ofs#8)
Generating: N1100 (???,???) [000618] ------------                 IL_OFFSET void   IL offset: 0x231 REG NA
Generating: N1102 (  0,  0) [000341] ------------                 RETURN    void   REG NA
IN0131:        nop      
Added IP mapping: EPILOG STACK_EMPTY (G_M48562_IG28,ins#3,ofs#9) label
Reserving epilog IG for block BB40

      G_M48562_IG28:        ; offs=000556H, funclet=00, bbWeight=1   
*************** After placeholder IG creation
G_M48562_IG01:        ; func=00, offs=000000H, size=0000H, gcrefRegs=00000000 {} <-- Prolog IG
G_M48562_IG02:        ; offs=000000H, size=000DH, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB02 [0038], byref
G_M48562_IG03:        ; offs=00000DH, size=0005H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB03 [0039], byref
G_M48562_IG04:        ; offs=000012H, size=013BH, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB05 [0001], byref
G_M48562_IG05:        ; offs=00014DH, size=005FH, BB05 [0001], extend
G_M48562_IG06:        ; offs=0001ACH, size=0012H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB06 [0002], byref
G_M48562_IG07:        ; offs=0001BEH, size=00CFH, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB07 [0003], byref
G_M48562_IG08:        ; offs=00028DH, size=0008H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB08 [0031], byref
G_M48562_IG09:        ; offs=000295H, size=0001H, BB08 [0031], nogc, extend
G_M48562_IG10:        ; offs=000296H, size=0009H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB13 [0007], byref
G_M48562_IG11:        ; offs=00029FH, size=0071H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB14 [0008], BB15 [0009], byref
G_M48562_IG12:        ; offs=000310H, size=0012H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB16 [0010], byref
G_M48562_IG13:        ; offs=000322H, size=0041H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB17 [0011], BB18 [0012], byref
G_M48562_IG14:        ; offs=000363H, size=0007H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB19 [0013], byref
G_M48562_IG15:        ; offs=00036AH, size=0008H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB20 [0035], byref
G_M48562_IG16:        ; offs=000372H, size=0005H, BB20 [0035], nogc, extend
G_M48562_IG17:        ; offs=000377H, size=0008H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB22 [0033], byref
G_M48562_IG18:        ; offs=00037FH, size=0001H, BB22 [0033], nogc, extend
G_M48562_IG19:        ; offs=000380H, size=000CH, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB27 [0017], byref
G_M48562_IG20:        ; offs=00038CH, size=000DH, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB28 [0018], byref
G_M48562_IG21:        ; offs=000399H, size=00A6H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB29 [0019], byref
G_M48562_IG22:        ; offs=00043FH, size=0069H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB30 [0020], BB31 [0021], byref
G_M48562_IG23:        ; offs=0004A8H, size=0037H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB32 [0022], BB33 [0023], byref
G_M48562_IG24:        ; offs=0004DFH, size=0039H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB34 [0024], BB35 [0025], byref
G_M48562_IG25:        ; offs=000518H, size=0030H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB36 [0026], BB37 [0027], byref
G_M48562_IG26:        ; offs=000548H, size=0001H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB38 [0028], byref
G_M48562_IG27:        ; offs=000549H, size=000DH, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB39 [0029], byref
G_M48562_IG28:        ; offs=000556H, size=0009H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB40 [0030], byref
G_M48562_IG29:        ; epilog placeholder, next placeholder=<END>, BB40 [0030], epilog, extend <-- First placeholder <-- Last placeholder
                      ;   PrevGCVars=0000000000000000 {}, PrevGCrefRegs=00000000 {}, PrevByrefRegs=00000000 {}
                      ;   InitGCVars=0000000000000000 {}, InitGCrefRegs=00000000 {}, InitByrefRegs=00000000 {}
G_M48562_IG30:        ; offs=00065FH, size=0000H, gcrefRegs=00000000 {} <-- Current IG

Variable Live Range History Dump for BB40
V00 this: rbp[16] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V01 arg1: rbp[24] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V02 loc0: rbp[-8] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V03 loc1: rbp[-16] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V04 loc2: rbp[-20] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V05 loc3: rbp[-32] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V06 loc4: rbp[-40] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V07 loc5: rbp[-44] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V08 loc6: rbp[-56] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V09 loc7: rbp[-64] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V10 loc8: rbp[-68] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V11 loc9: rbp[-72] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V12 loc10: rbp[-88] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V13 loc11: rbp[-92] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V14 loc12: rbp[-96] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V15 loc13: rbp[-100] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V16 loc14: rbp[-104] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V17 loc15: rbp[-108] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]

=============== Generating BB10 [0D5..0D9) -> BB12 (cond), preds={BB08} succs={BB11,BB12} flags=0x00000000.21010230: keep i label flet bwd LIR 
BB10 IN (0)={} + ByrefExposed + GcHeap
     OUT(0)={} + ByrefExposed + GcHeap

Liveness not changing: 0000000000000000 {}
							Live regs: (unchanged) 00000000 {}
							GC regs: (unchanged) 00000000 {}
							Byref regs: (unchanged) 00000000 {}

      L_M48562_BB10:
Mapped BB10 to G_M48562_IG30
Label: IG30, GCvars=0000000000000000 {}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}
Scope info: found beginning of funclet region at block BB10; ignoring following blocks
Reserving funclet prolog IG for block BB10
Added IP mapping: PROLOG STACK_EMPTY (G_M48562_IG30,ins#0,ofs#256) label
*************** After placeholder IG creation
G_M48562_IG01:        ; func=00, offs=000000H, size=0000H, gcrefRegs=00000000 {} <-- Prolog IG
G_M48562_IG02:        ; offs=000000H, size=000DH, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB02 [0038], byref
G_M48562_IG03:        ; offs=00000DH, size=0005H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB03 [0039], byref
G_M48562_IG04:        ; offs=000012H, size=013BH, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB05 [0001], byref
G_M48562_IG05:        ; offs=00014DH, size=005FH, BB05 [0001], extend
G_M48562_IG06:        ; offs=0001ACH, size=0012H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB06 [0002], byref
G_M48562_IG07:        ; offs=0001BEH, size=00CFH, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB07 [0003], byref
G_M48562_IG08:        ; offs=00028DH, size=0008H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB08 [0031], byref
G_M48562_IG09:        ; offs=000295H, size=0001H, BB08 [0031], nogc, extend
G_M48562_IG10:        ; offs=000296H, size=0009H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB13 [0007], byref
G_M48562_IG11:        ; offs=00029FH, size=0071H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB14 [0008], BB15 [0009], byref
G_M48562_IG12:        ; offs=000310H, size=0012H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB16 [0010], byref
G_M48562_IG13:        ; offs=000322H, size=0041H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB17 [0011], BB18 [0012], byref
G_M48562_IG14:        ; offs=000363H, size=0007H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB19 [0013], byref
G_M48562_IG15:        ; offs=00036AH, size=0008H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB20 [0035], byref
G_M48562_IG16:        ; offs=000372H, size=0005H, BB20 [0035], nogc, extend
G_M48562_IG17:        ; offs=000377H, size=0008H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB22 [0033], byref
G_M48562_IG18:        ; offs=00037FH, size=0001H, BB22 [0033], nogc, extend
G_M48562_IG19:        ; offs=000380H, size=000CH, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB27 [0017], byref
G_M48562_IG20:        ; offs=00038CH, size=000DH, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB28 [0018], byref
G_M48562_IG21:        ; offs=000399H, size=00A6H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB29 [0019], byref
G_M48562_IG22:        ; offs=00043FH, size=0069H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB30 [0020], BB31 [0021], byref
G_M48562_IG23:        ; offs=0004A8H, size=0037H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB32 [0022], BB33 [0023], byref
G_M48562_IG24:        ; offs=0004DFH, size=0039H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB34 [0024], BB35 [0025], byref
G_M48562_IG25:        ; offs=000518H, size=0030H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB36 [0026], BB37 [0027], byref
G_M48562_IG26:        ; offs=000548H, size=0001H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB38 [0028], byref
G_M48562_IG27:        ; offs=000549H, size=000DH, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB39 [0029], byref
G_M48562_IG28:        ; offs=000556H, size=0009H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB40 [0030], byref
G_M48562_IG29:        ; epilog placeholder, next placeholder=IG30 , BB40 [0030], epilog, extend <-- First placeholder
                      ;   PrevGCVars=0000000000000000 {}, PrevGCrefRegs=00000000 {}, PrevByrefRegs=00000000 {}
                      ;   InitGCVars=0000000000000000 {}, InitGCrefRegs=00000000 {}, InitByrefRegs=00000000 {}
G_M48562_IG30:        ; func=01, funclet prolog placeholder, next placeholder=<END>, BB10 [0004], funclet prolog <-- Last placeholder
                      ;   PrevGCVars=0000000000000000 {}, PrevGCrefRegs=00000000 {}, PrevByrefRegs=00000000 {}
                      ;   InitGCVars=0000000000000000 {}, InitGCrefRegs=00000000 {}, InitByrefRegs=00000000 {}
G_M48562_IG31:        ; offs=00075FH, size=0000H, gcrefRegs=00000000 {} <-- Current IG
Added IP mapping: 0x00D5 STACK_EMPTY (G_M48562_IG31,ins#0,ofs#0) label
Generating: N444 (???,???) [000619] ------------                 IL_OFFSET void   IL offset: 0xd5 REG NA
Generating: N446 (  3,  2) [000163] ------------       t163 =    LCL_VAR   int   (AX) V06 loc4          rcx REG rcx
IN0132:        mov      ecx, dword ptr [V06 rbp-28H]
                                                              /--*  t163   int    
Generating: N448 (  4,  4) [000441] ----G-------       t441 = *  CAST      int <- bool <- int REG rcx
IN0133:        movzx    rcx, cl
Generating: N450 (  1,  1) [000164] -c----------       t164 =    CNS_INT   int    0 REG NA
                                                              /--*  t441   int    
                                                              +--*  t164   int    
Generating: N452 (  6,  6) [000165] J---G--N----              *  EQ        void   REG NA
IN0134:        test     ecx, ecx
Generating: N454 (  8,  8) [000166] ----G-------              *  JTRUE     void   REG NA
IN0135:        je       L_M48562_BB12

Variable Live Range History Dump for BB10
V00 this: rbp[16] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V01 arg1: rbp[24] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V02 loc0: rbp[-8] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V03 loc1: rbp[-16] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V04 loc2: rbp[-20] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V05 loc3: rbp[-32] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V06 loc4: rbp[-40] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V07 loc5: rbp[-44] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V08 loc6: rbp[-56] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V09 loc7: rbp[-64] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V10 loc8: rbp[-68] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V11 loc9: rbp[-72] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V12 loc10: rbp[-88] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V13 loc11: rbp[-92] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V14 loc12: rbp[-96] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V15 loc13: rbp[-100] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V16 loc14: rbp[-104] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V17 loc15: rbp[-108] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]

=============== Generating BB11 [0D9..0E0), preds={BB10} succs={BB12} flags=0x00000002.21000020: i hascall bwd LIR 
BB11 IN (0)={} + ByrefExposed + GcHeap
     OUT(0)={} + ByrefExposed + GcHeap

Liveness not changing: 0000000000000000 {}
							Live regs: (unchanged) 00000000 {}
							GC regs: (unchanged) 00000000 {}
							Byref regs: (unchanged) 00000000 {}

      L_M48562_BB11:
Added IP mapping: 0x00D9 STACK_EMPTY (G_M48562_IG31,ins#4,ofs#14) label
Generating: N458 (???,???) [000620] ------------                 IL_OFFSET void   IL offset: 0xd9 REG NA
Generating: N460 (  3,  2) [000168] ------------       t168 =    LCL_VAR   ref    V05 loc3          rcx REG rcx
IN0136:        mov      rcx, gword ptr [V05 rbp-20H]
							GC regs: 00000000 {} => 00000002 {rcx}
                                                              /--*  t168   ref    
Generating: N462 (???,???) [000675] ------------       t675 = *  PUTARG_REG ref    REG rcx
							GC regs: 00000002 {rcx} => 00000000 {}
							GC regs: 00000000 {} => 00000002 {rcx}
                                                              /--*  t675   ref    arg0 in rcx
Generating: N464 ( 17,  8) [000169] --CXG-------              *  CALL      void   System.Threading.Monitor.Exit REG NA
							GC regs: 00000002 {rcx} => 00000000 {}
							Call: GCvars=0000000000000000 {}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}
Added IP mapping: 0x00DA CALL_INSTRUCTION (G_M48562_IG31,ins#5,ofs#18)
IN0137:        call     System.Threading.Monitor:Exit(System.Object)
Added IP mapping: 0x00DF STACK_EMPTY (G_M48562_IG31,ins#6,ofs#23)
Generating: N466 (???,???) [000621] ------------                 IL_OFFSET void   IL offset: 0xdf REG NA
Generating: N468 (  1,  1) [000170] ------------                 NO_OP     void   REG NA
IN0138:        nop      

Variable Live Range History Dump for BB11
V00 this: rbp[16] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V01 arg1: rbp[24] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V02 loc0: rbp[-8] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V03 loc1: rbp[-16] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V04 loc2: rbp[-20] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V05 loc3: rbp[-32] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V06 loc4: rbp[-40] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V07 loc5: rbp[-44] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V08 loc6: rbp[-56] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V09 loc7: rbp[-64] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V10 loc8: rbp[-68] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V11 loc9: rbp[-72] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V12 loc10: rbp[-88] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V13 loc11: rbp[-92] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V14 loc12: rbp[-96] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V15 loc13: rbp[-100] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V16 loc14: rbp[-104] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V17 loc15: rbp[-108] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]

=============== Generating BB12 [0E0..0E1) (finret), preds={BB10,BB11} succs={BB09} flags=0x00000000.21010020: i label bwd LIR 
BB12 IN (0)={} + ByrefExposed + GcHeap
     OUT(0)={} + ByrefExposed + GcHeap

Liveness not changing: 0000000000000000 {}
							Live regs: (unchanged) 00000000 {}
							GC regs: (unchanged) 00000000 {}
							Byref regs: (unchanged) 00000000 {}

      L_M48562_BB12:

      G_M48562_IG31:        ; offs=00075FH, funclet=01, bbWeight=1   
Mapped BB12 to G_M48562_IG32
Label: IG32, GCvars=0000000000000000 {}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}
Added IP mapping: 0x00E0 STACK_EMPTY (G_M48562_IG32,ins#0,ofs#0) label
Generating: N472 (???,???) [000622] ------------                 IL_OFFSET void   IL offset: 0xe0 REG NA
Generating: N474 (  0,  0) [000167] ------------                 RETFILT   void   REG NA
IN0139:        nop      
Reserving funclet epilog IG for block BB12

      G_M48562_IG32:        ; offs=000777H, funclet=01, bbWeight=1   
Added IP mapping: EPILOG STACK_EMPTY (G_M48562_IG33,ins#0,ofs#256) label
*************** After placeholder IG creation
G_M48562_IG01:        ; func=00, offs=000000H, size=0000H, gcrefRegs=00000000 {} <-- Prolog IG
G_M48562_IG02:        ; offs=000000H, size=000DH, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB02 [0038], byref
G_M48562_IG03:        ; offs=00000DH, size=0005H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB03 [0039], byref
G_M48562_IG04:        ; offs=000012H, size=013BH, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB05 [0001], byref
G_M48562_IG05:        ; offs=00014DH, size=005FH, BB05 [0001], extend
G_M48562_IG06:        ; offs=0001ACH, size=0012H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB06 [0002], byref
G_M48562_IG07:        ; offs=0001BEH, size=00CFH, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB07 [0003], byref
G_M48562_IG08:        ; offs=00028DH, size=0008H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB08 [0031], byref
G_M48562_IG09:        ; offs=000295H, size=0001H, BB08 [0031], nogc, extend
G_M48562_IG10:        ; offs=000296H, size=0009H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB13 [0007], byref
G_M48562_IG11:        ; offs=00029FH, size=0071H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB14 [0008], BB15 [0009], byref
G_M48562_IG12:        ; offs=000310H, size=0012H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB16 [0010], byref
G_M48562_IG13:        ; offs=000322H, size=0041H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB17 [0011], BB18 [0012], byref
G_M48562_IG14:        ; offs=000363H, size=0007H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB19 [0013], byref
G_M48562_IG15:        ; offs=00036AH, size=0008H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB20 [0035], byref
G_M48562_IG16:        ; offs=000372H, size=0005H, BB20 [0035], nogc, extend
G_M48562_IG17:        ; offs=000377H, size=0008H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB22 [0033], byref
G_M48562_IG18:        ; offs=00037FH, size=0001H, BB22 [0033], nogc, extend
G_M48562_IG19:        ; offs=000380H, size=000CH, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB27 [0017], byref
G_M48562_IG20:        ; offs=00038CH, size=000DH, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB28 [0018], byref
G_M48562_IG21:        ; offs=000399H, size=00A6H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB29 [0019], byref
G_M48562_IG22:        ; offs=00043FH, size=0069H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB30 [0020], BB31 [0021], byref
G_M48562_IG23:        ; offs=0004A8H, size=0037H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB32 [0022], BB33 [0023], byref
G_M48562_IG24:        ; offs=0004DFH, size=0039H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB34 [0024], BB35 [0025], byref
G_M48562_IG25:        ; offs=000518H, size=0030H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB36 [0026], BB37 [0027], byref
G_M48562_IG26:        ; offs=000548H, size=0001H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB38 [0028], byref
G_M48562_IG27:        ; offs=000549H, size=000DH, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB39 [0029], byref
G_M48562_IG28:        ; offs=000556H, size=0009H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB40 [0030], byref
G_M48562_IG29:        ; epilog placeholder, next placeholder=IG30 , BB40 [0030], epilog, extend <-- First placeholder
                      ;   PrevGCVars=0000000000000000 {}, PrevGCrefRegs=00000000 {}, PrevByrefRegs=00000000 {}
                      ;   InitGCVars=0000000000000000 {}, InitGCrefRegs=00000000 {}, InitByrefRegs=00000000 {}
G_M48562_IG30:        ; func=01, funclet prolog placeholder, next placeholder=IG33 , BB10 [0004], funclet prolog
                      ;   PrevGCVars=0000000000000000 {}, PrevGCrefRegs=00000000 {}, PrevByrefRegs=00000000 {}
                      ;   InitGCVars=0000000000000000 {}, InitGCrefRegs=00000000 {}, InitByrefRegs=00000000 {}
G_M48562_IG31:        ; offs=00075FH, size=0018H, gcVars=0000000000000000 {}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB10 [0004], BB11 [0005], gcvars, byref
G_M48562_IG32:        ; offs=000777H, size=0001H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB12 [0006], byref
G_M48562_IG33:        ; funclet epilog placeholder, next placeholder=<END>, BB12 [0006], funclet epilog, extend <-- Last placeholder
                      ;   PrevGCVars=0000000000000000 {}, PrevGCrefRegs=00000000 {}, PrevByrefRegs=00000000 {}
                      ;   InitGCVars=0000000000000000 {}, InitGCrefRegs=00000000 {}, InitByrefRegs=00000000 {}
G_M48562_IG34:        ; offs=000878H, size=0000H, gcrefRegs=00000000 {} <-- Current IG

Variable Live Range History Dump for BB12
V00 this: rbp[16] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V01 arg1: rbp[24] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V02 loc0: rbp[-8] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V03 loc1: rbp[-16] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V04 loc2: rbp[-20] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V05 loc3: rbp[-32] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V06 loc4: rbp[-40] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V07 loc5: rbp[-44] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V08 loc6: rbp[-56] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V09 loc7: rbp[-64] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V10 loc8: rbp[-68] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V11 loc9: rbp[-72] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V12 loc10: rbp[-88] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V13 loc11: rbp[-92] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V14 loc12: rbp[-96] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V15 loc13: rbp[-100] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V16 loc14: rbp[-104] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V17 loc15: rbp[-108] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]

=============== Generating BB24 [14B..14F) -> BB26 (cond), preds={BB20,BB22} succs={BB25,BB26} flags=0x00000000.21010230: keep i label flet bwd LIR 
BB24 IN (0)={} + ByrefExposed + GcHeap
     OUT(0)={} + ByrefExposed + GcHeap

Liveness not changing: 0000000000000000 {}
							Live regs: (unchanged) 00000000 {}
							GC regs: (unchanged) 00000000 {}
							Byref regs: (unchanged) 00000000 {}

      L_M48562_BB24:
Mapped BB24 to G_M48562_IG34
Label: IG34, GCvars=0000000000000000 {}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}
Reserving funclet prolog IG for block BB24
Added IP mapping: PROLOG STACK_EMPTY (G_M48562_IG34,ins#0,ofs#256) label
*************** After placeholder IG creation
G_M48562_IG01:        ; func=00, offs=000000H, size=0000H, gcrefRegs=00000000 {} <-- Prolog IG
G_M48562_IG02:        ; offs=000000H, size=000DH, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB02 [0038], byref
G_M48562_IG03:        ; offs=00000DH, size=0005H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB03 [0039], byref
G_M48562_IG04:        ; offs=000012H, size=013BH, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB05 [0001], byref
G_M48562_IG05:        ; offs=00014DH, size=005FH, BB05 [0001], extend
G_M48562_IG06:        ; offs=0001ACH, size=0012H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB06 [0002], byref
G_M48562_IG07:        ; offs=0001BEH, size=00CFH, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB07 [0003], byref
G_M48562_IG08:        ; offs=00028DH, size=0008H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB08 [0031], byref
G_M48562_IG09:        ; offs=000295H, size=0001H, BB08 [0031], nogc, extend
G_M48562_IG10:        ; offs=000296H, size=0009H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB13 [0007], byref
G_M48562_IG11:        ; offs=00029FH, size=0071H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB14 [0008], BB15 [0009], byref
G_M48562_IG12:        ; offs=000310H, size=0012H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB16 [0010], byref
G_M48562_IG13:        ; offs=000322H, size=0041H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB17 [0011], BB18 [0012], byref
G_M48562_IG14:        ; offs=000363H, size=0007H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB19 [0013], byref
G_M48562_IG15:        ; offs=00036AH, size=0008H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB20 [0035], byref
G_M48562_IG16:        ; offs=000372H, size=0005H, BB20 [0035], nogc, extend
G_M48562_IG17:        ; offs=000377H, size=0008H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB22 [0033], byref
G_M48562_IG18:        ; offs=00037FH, size=0001H, BB22 [0033], nogc, extend
G_M48562_IG19:        ; offs=000380H, size=000CH, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB27 [0017], byref
G_M48562_IG20:        ; offs=00038CH, size=000DH, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB28 [0018], byref
G_M48562_IG21:        ; offs=000399H, size=00A6H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB29 [0019], byref
G_M48562_IG22:        ; offs=00043FH, size=0069H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB30 [0020], BB31 [0021], byref
G_M48562_IG23:        ; offs=0004A8H, size=0037H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB32 [0022], BB33 [0023], byref
G_M48562_IG24:        ; offs=0004DFH, size=0039H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB34 [0024], BB35 [0025], byref
G_M48562_IG25:        ; offs=000518H, size=0030H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB36 [0026], BB37 [0027], byref
G_M48562_IG26:        ; offs=000548H, size=0001H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB38 [0028], byref
G_M48562_IG27:        ; offs=000549H, size=000DH, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB39 [0029], byref
G_M48562_IG28:        ; offs=000556H, size=0009H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB40 [0030], byref
G_M48562_IG29:        ; epilog placeholder, next placeholder=IG30 , BB40 [0030], epilog, extend <-- First placeholder
                      ;   PrevGCVars=0000000000000000 {}, PrevGCrefRegs=00000000 {}, PrevByrefRegs=00000000 {}
                      ;   InitGCVars=0000000000000000 {}, InitGCrefRegs=00000000 {}, InitByrefRegs=00000000 {}
G_M48562_IG30:        ; func=01, funclet prolog placeholder, next placeholder=IG33 , BB10 [0004], funclet prolog
                      ;   PrevGCVars=0000000000000000 {}, PrevGCrefRegs=00000000 {}, PrevByrefRegs=00000000 {}
                      ;   InitGCVars=0000000000000000 {}, InitGCrefRegs=00000000 {}, InitByrefRegs=00000000 {}
G_M48562_IG31:        ; offs=00075FH, size=0018H, gcVars=0000000000000000 {}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB10 [0004], BB11 [0005], gcvars, byref
G_M48562_IG32:        ; offs=000777H, size=0001H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB12 [0006], byref
G_M48562_IG33:        ; funclet epilog placeholder, next placeholder=IG34 , BB12 [0006], funclet epilog, extend
                      ;   PrevGCVars=0000000000000000 {}, PrevGCrefRegs=00000000 {}, PrevByrefRegs=00000000 {}
                      ;   InitGCVars=0000000000000000 {}, InitGCrefRegs=00000000 {}, InitByrefRegs=00000000 {}
G_M48562_IG34:        ; func=02, funclet prolog placeholder, next placeholder=<END>, BB24 [0014], funclet prolog <-- Last placeholder
                      ;   PrevGCVars=0000000000000000 {}, PrevGCrefRegs=00000000 {}, PrevByrefRegs=00000000 {}
                      ;   InitGCVars=0000000000000000 {}, InitGCrefRegs=00000000 {}, InitByrefRegs=00000000 {}
G_M48562_IG35:        ; offs=000978H, size=0000H, gcrefRegs=00000000 {} <-- Current IG
Added IP mapping: 0x014B STACK_EMPTY (G_M48562_IG35,ins#0,ofs#0) label
Generating: N668 (???,???) [000623] ------------                 IL_OFFSET void   IL offset: 0x14b REG NA
Generating: N670 (  3,  2) [000363] ------------       t363 =    LCL_VAR   int   (AX) V09 loc7          rcx REG rcx
IN013a:        mov      ecx, dword ptr [V09 rbp-40H]
                                                              /--*  t363   int    
Generating: N672 (  4,  4) [000461] ----G-------       t461 = *  CAST      int <- bool <- int REG rcx
IN013b:        movzx    rcx, cl
Generating: N674 (  1,  1) [000364] -c----------       t364 =    CNS_INT   int    0 REG NA
                                                              /--*  t461   int    
                                                              +--*  t364   int    
Generating: N676 (  6,  6) [000365] J---G--N----              *  EQ        void   REG NA
IN013c:        test     ecx, ecx
Generating: N678 (  8,  8) [000366] ----G-------              *  JTRUE     void   REG NA
IN013d:        je       L_M48562_BB26

Variable Live Range History Dump for BB24
V00 this: rbp[16] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V01 arg1: rbp[24] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V02 loc0: rbp[-8] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V03 loc1: rbp[-16] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V04 loc2: rbp[-20] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V05 loc3: rbp[-32] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V06 loc4: rbp[-40] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V07 loc5: rbp[-44] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V08 loc6: rbp[-56] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V09 loc7: rbp[-64] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V10 loc8: rbp[-68] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V11 loc9: rbp[-72] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V12 loc10: rbp[-88] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V13 loc11: rbp[-92] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V14 loc12: rbp[-96] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V15 loc13: rbp[-100] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V16 loc14: rbp[-104] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V17 loc15: rbp[-108] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]

=============== Generating BB25 [14F..157), preds={BB24} succs={BB26} flags=0x00000002.21000020: i hascall bwd LIR 
BB25 IN (0)={} + ByrefExposed + GcHeap
     OUT(0)={} + ByrefExposed + GcHeap

Liveness not changing: 0000000000000000 {}
							Live regs: (unchanged) 00000000 {}
							GC regs: (unchanged) 00000000 {}
							Byref regs: (unchanged) 00000000 {}

      L_M48562_BB25:
Added IP mapping: 0x014F STACK_EMPTY (G_M48562_IG35,ins#4,ofs#14) label
Generating: N682 (???,???) [000624] ------------                 IL_OFFSET void   IL offset: 0x14f REG NA
Generating: N684 (  3,  2) [000368] ------------       t368 =    LCL_VAR   ref    V08 loc6          rcx REG rcx
IN013e:        mov      rcx, gword ptr [V08 rbp-38H]
							GC regs: 00000000 {} => 00000002 {rcx}
                                                              /--*  t368   ref    
Generating: N686 (???,???) [000676] ------------       t676 = *  PUTARG_REG ref    REG rcx
							GC regs: 00000002 {rcx} => 00000000 {}
							GC regs: 00000000 {} => 00000002 {rcx}
                                                              /--*  t676   ref    arg0 in rcx
Generating: N688 ( 17,  8) [000369] --CXG-------              *  CALL      void   System.Threading.Monitor.Exit REG NA
							GC regs: 00000002 {rcx} => 00000000 {}
							Call: GCvars=0000000000000000 {}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}
Added IP mapping: 0x0151 CALL_INSTRUCTION (G_M48562_IG35,ins#5,ofs#18)
IN013f:        call     System.Threading.Monitor:Exit(System.Object)
Added IP mapping: 0x0156 STACK_EMPTY (G_M48562_IG35,ins#6,ofs#23)
Generating: N690 (???,???) [000625] ------------                 IL_OFFSET void   IL offset: 0x156 REG NA
Generating: N692 (  1,  1) [000370] ------------                 NO_OP     void   REG NA
IN0140:        nop      

Variable Live Range History Dump for BB25
V00 this: rbp[16] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V01 arg1: rbp[24] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V02 loc0: rbp[-8] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V03 loc1: rbp[-16] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V04 loc2: rbp[-20] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V05 loc3: rbp[-32] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V06 loc4: rbp[-40] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V07 loc5: rbp[-44] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V08 loc6: rbp[-56] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V09 loc7: rbp[-64] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V10 loc8: rbp[-68] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V11 loc9: rbp[-72] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V12 loc10: rbp[-88] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V13 loc11: rbp[-92] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V14 loc12: rbp[-96] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V15 loc13: rbp[-100] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V16 loc14: rbp[-104] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]
V17 loc15: rbp[-108] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), ...]

=============== Generating BB26 [157..158) (finret), preds={BB24,BB25} succs={BB21,BB23} flags=0x00000000.21010020: i label bwd LIR 
BB26 IN (0)={} + ByrefExposed + GcHeap
     OUT(0)={} + ByrefExposed + GcHeap

Liveness not changing: 0000000000000000 {}
							Live regs: (unchanged) 00000000 {}
							GC regs: (unchanged) 00000000 {}
							Byref regs: (unchanged) 00000000 {}

      L_M48562_BB26:

      G_M48562_IG35:        ; offs=000978H, funclet=02, bbWeight=1   
Mapped BB26 to G_M48562_IG36
Label: IG36, GCvars=0000000000000000 {}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}
Added IP mapping: 0x0157 STACK_EMPTY (G_M48562_IG36,ins#0,ofs#0) label
Generating: N696 (???,???) [000626] ------------                 IL_OFFSET void   IL offset: 0x157 REG NA
Generating: N698 (  0,  0) [000367] ------------                 RETFILT   void   REG NA
IN0141:        nop      
Reserving funclet epilog IG for block BB26

      G_M48562_IG36:        ; offs=000990H, funclet=02, bbWeight=1   
Added IP mapping: EPILOG STACK_EMPTY (G_M48562_IG37,ins#0,ofs#256) label
*************** After placeholder IG creation
G_M48562_IG01:        ; func=00, offs=000000H, size=0000H, gcrefRegs=00000000 {} <-- Prolog IG
G_M48562_IG02:        ; offs=000000H, size=000DH, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB02 [0038], byref
G_M48562_IG03:        ; offs=00000DH, size=0005H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB03 [0039], byref
G_M48562_IG04:        ; offs=000012H, size=013BH, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB05 [0001], byref
G_M48562_IG05:        ; offs=00014DH, size=005FH, BB05 [0001], extend
G_M48562_IG06:        ; offs=0001ACH, size=0012H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB06 [0002], byref
G_M48562_IG07:        ; offs=0001BEH, size=00CFH, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB07 [0003], byref
G_M48562_IG08:        ; offs=00028DH, size=0008H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB08 [0031], byref
G_M48562_IG09:        ; offs=000295H, size=0001H, BB08 [0031], nogc, extend
G_M48562_IG10:        ; offs=000296H, size=0009H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB13 [0007], byref
G_M48562_IG11:        ; offs=00029FH, size=0071H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB14 [0008], BB15 [0009], byref
G_M48562_IG12:        ; offs=000310H, size=0012H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB16 [0010], byref
G_M48562_IG13:        ; offs=000322H, size=0041H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB17 [0011], BB18 [0012], byref
G_M48562_IG14:        ; offs=000363H, size=0007H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB19 [0013], byref
G_M48562_IG15:        ; offs=00036AH, size=0008H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB20 [0035], byref
G_M48562_IG16:        ; offs=000372H, size=0005H, BB20 [0035], nogc, extend
G_M48562_IG17:        ; offs=000377H, size=0008H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB22 [0033], byref
G_M48562_IG18:        ; offs=00037FH, size=0001H, BB22 [0033], nogc, extend
G_M48562_IG19:        ; offs=000380H, size=000CH, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB27 [0017], byref
G_M48562_IG20:        ; offs=00038CH, size=000DH, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB28 [0018], byref
G_M48562_IG21:        ; offs=000399H, size=00A6H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB29 [0019], byref
G_M48562_IG22:        ; offs=00043FH, size=0069H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB30 [0020], BB31 [0021], byref
G_M48562_IG23:        ; offs=0004A8H, size=0037H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB32 [0022], BB33 [0023], byref
G_M48562_IG24:        ; offs=0004DFH, size=0039H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB34 [0024], BB35 [0025], byref
G_M48562_IG25:        ; offs=000518H, size=0030H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB36 [0026], BB37 [0027], byref
G_M48562_IG26:        ; offs=000548H, size=0001H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB38 [0028], byref
G_M48562_IG27:        ; offs=000549H, size=000DH, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB39 [0029], byref
G_M48562_IG28:        ; offs=000556H, size=0009H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB40 [0030], byref
G_M48562_IG29:        ; epilog placeholder, next placeholder=IG30 , BB40 [0030], epilog, extend <-- First placeholder
                      ;   PrevGCVars=0000000000000000 {}, PrevGCrefRegs=00000000 {}, PrevByrefRegs=00000000 {}
                      ;   InitGCVars=0000000000000000 {}, InitGCrefRegs=00000000 {}, InitByrefRegs=00000000 {}
G_M48562_IG30:        ; func=01, funclet prolog placeholder, next placeholder=IG33 , BB10 [0004], funclet prolog
                      ;   PrevGCVars=0000000000000000 {}, PrevGCrefRegs=00000000 {}, PrevByrefRegs=00000000 {}
                      ;   InitGCVars=0000000000000000 {}, InitGCrefRegs=00000000 {}, InitByrefRegs=00000000 {}
G_M48562_IG31:        ; offs=00075FH, size=0018H, gcVars=0000000000000000 {}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB10 [0004], BB11 [0005], gcvars, byref
G_M48562_IG32:        ; offs=000777H, size=0001H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB12 [0006], byref
G_M48562_IG33:        ; funclet epilog placeholder, next placeholder=IG34 , BB12 [0006], funclet epilog, extend
                      ;   PrevGCVars=0000000000000000 {}, PrevGCrefRegs=00000000 {}, PrevByrefRegs=00000000 {}
                      ;   InitGCVars=0000000000000000 {}, InitGCrefRegs=00000000 {}, InitByrefRegs=00000000 {}
G_M48562_IG34:        ; func=02, funclet prolog placeholder, next placeholder=IG37 , BB24 [0014], funclet prolog
                      ;   PrevGCVars=0000000000000000 {}, PrevGCrefRegs=00000000 {}, PrevByrefRegs=00000000 {}
                      ;   InitGCVars=0000000000000000 {}, InitGCrefRegs=00000000 {}, InitByrefRegs=00000000 {}
G_M48562_IG35:        ; offs=000978H, size=0018H, gcVars=0000000000000000 {}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB24 [0014], BB25 [0015], gcvars, byref
G_M48562_IG36:        ; offs=000990H, size=0001H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB26 [0016], byref
G_M48562_IG37:        ; funclet epilog placeholder, next placeholder=<END>, BB26 [0016], funclet epilog, extend <-- Last placeholder
                      ;   PrevGCVars=0000000000000000 {}, PrevGCrefRegs=00000000 {}, PrevByrefRegs=00000000 {}
                      ;   InitGCVars=0000000000000000 {}, InitGCrefRegs=00000000 {}, InitByrefRegs=00000000 {}

Variable Live Range History Dump for BB26
V00 this: rbp[16] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), (G_M48562_IG36,ins#1,ofs#1)]
V01 arg1: rbp[24] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), (G_M48562_IG36,ins#1,ofs#1)]
V02 loc0: rbp[-8] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), (G_M48562_IG36,ins#1,ofs#1)]
V03 loc1: rbp[-16] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), (G_M48562_IG36,ins#1,ofs#1)]
V04 loc2: rbp[-20] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), (G_M48562_IG36,ins#1,ofs#1)]
V05 loc3: rbp[-32] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), (G_M48562_IG36,ins#1,ofs#1)]
V06 loc4: rbp[-40] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), (G_M48562_IG36,ins#1,ofs#1)]
V07 loc5: rbp[-44] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), (G_M48562_IG36,ins#1,ofs#1)]
V08 loc6: rbp[-56] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), (G_M48562_IG36,ins#1,ofs#1)]
V09 loc7: rbp[-64] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), (G_M48562_IG36,ins#1,ofs#1)]
V10 loc8: rbp[-68] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), (G_M48562_IG36,ins#1,ofs#1)]
V11 loc9: rbp[-72] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), (G_M48562_IG36,ins#1,ofs#1)]
V12 loc10: rbp[-88] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), (G_M48562_IG36,ins#1,ofs#1)]
V13 loc11: rbp[-92] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), (G_M48562_IG36,ins#1,ofs#1)]
V14 loc12: rbp[-96] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), (G_M48562_IG36,ins#1,ofs#1)]
V15 loc13: rbp[-100] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), (G_M48562_IG36,ins#1,ofs#1)]
V16 loc14: rbp[-104] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), (G_M48562_IG36,ins#1,ofs#1)]
V17 loc15: rbp[-108] (1 slot) [(G_M48562_IG04,ins#0,ofs#0), (G_M48562_IG36,ins#1,ofs#1)]
Liveness not changing: 0000000000000000 {}

# compCycleEstimate =   1298, compSizeEstimate =   944 FalseLeakRepro.Program:Run(System.String[]):this
; Final local variable assignments
;
;  V00 this         [V00    ] (  1,  1   )     ref  ->  [rbp+10H]   do-not-enreg[] this class-hnd
;  V01 arg1         [V01    ] (  1,  1   )     ref  ->  [rbp+18H]   do-not-enreg[] class-hnd
;  V02 loc0         [V02    ] (  1,  1   )     ref  ->  [rbp-08H]   do-not-enreg[] must-init class-hnd exact
;  V03 loc1         [V03    ] (  1,  1   )  struct ( 8) [rbp-10H]   do-not-enreg[XSB] must-init addr-exposed ld-addr-op
;  V04 loc2         [V04    ] (  1,  1   )     int  ->  [rbp-14H]   do-not-enreg[] must-init
;  V05 loc3         [V05    ] (  1,  1   )     ref  ->  [rbp-20H]   do-not-enreg[] must-init class-hnd
;  V06 loc4         [V06    ] (  1,  1   )    bool  ->  [rbp-28H]   do-not-enreg[XB] must-init addr-exposed ld-addr-op
;  V07 loc5         [V07    ] (  1,  1   )    bool  ->  [rbp-2CH]   do-not-enreg[] must-init
;  V08 loc6         [V08    ] (  1,  1   )     ref  ->  [rbp-38H]   do-not-enreg[] must-init class-hnd
;  V09 loc7         [V09    ] (  1,  1   )    bool  ->  [rbp-40H]   do-not-enreg[XB] must-init addr-exposed ld-addr-op
;  V10 loc8         [V10    ] (  1,  1   )    bool  ->  [rbp-44H]   do-not-enreg[] must-init
;  V11 loc9         [V11    ] (  1,  1   )    bool  ->  [rbp-48H]   do-not-enreg[] must-init
;  V12 loc10        [V12    ] (  1,  1   )  struct (16) [rbp-58H]   do-not-enreg[XSB] must-init addr-exposed ld-addr-op
;  V13 loc11        [V13    ] (  1,  1   )    bool  ->  [rbp-5CH]   do-not-enreg[] must-init
;  V14 loc12        [V14    ] (  1,  1   )    bool  ->  [rbp-60H]   do-not-enreg[] must-init
;  V15 loc13        [V15    ] (  1,  1   )    bool  ->  [rbp-64H]   do-not-enreg[] must-init
;  V16 loc14        [V16    ] (  1,  1   )    bool  ->  [rbp-68H]   do-not-enreg[] must-init
;  V17 loc15        [V17    ] (  1,  1   )    bool  ->  [rbp-6CH]   do-not-enreg[] must-init
;  V18 OutArgs      [V18    ] (  1,  1   )  lclBlk (32) [rsp+00H]   do-not-enreg[] "OutgoingArgSpace"
;  V19 tmp1         [V19    ] (  1,  1   )  struct ( 8) [rbp-78H]   do-not-enreg[S] "impSpillStackEnsure"
;  V20 tmp2         [V20    ] (  1,  1   )     ref  ->  [rbp-80H]   do-not-enreg[] must-init class-hnd "impSpillStackEnsure"
;  V21 tmp3         [V21    ] (  1,  1   )     ref  ->  [rbp-88H]   do-not-enreg[] must-init class-hnd "impSpillStackEnsure"
;  V22 tmp4         [V22    ] (  1,  1   )     ref  ->  [rbp-90H]   do-not-enreg[] must-init class-hnd exact "NewObj constructor temp"
;  V23 tmp5         [V23    ] (  1,  1   )     ref  ->  [rbp-98H]   do-not-enreg[] must-init class-hnd exact "NewObj constructor temp"
;  V24 tmp6         [V24    ] (  1,  1   )     ref  ->  [rbp-A0H]   do-not-enreg[] must-init class-hnd "impAppendStmt"
;  V25 tmp7         [V25    ] (  1,  1   )     ref  ->  [rbp-A8H]   do-not-enreg[] must-init class-hnd exact "NewObj constructor temp"
;  V26 tmp8         [V26    ] (  1,  1   )     ref  ->  [rbp-B0H]   do-not-enreg[] must-init class-hnd exact "NewObj constructor temp"
;  V27 tmp9         [V27    ] (  1,  1   )  struct ( 8) [rbp-B8H]   do-not-enreg[S] "impSpillStackEnsure"
;  V28 tmp10        [V28    ] (  1,  1   )     ref  ->  [rbp-C0H]   do-not-enreg[] must-init class-hnd "impSpillStackEnsure"
;  V29 tmp11        [V29    ] (  1,  1   )     ref  ->  [rbp-C8H]   do-not-enreg[] must-init class-hnd "impSpillStackEnsure"
;  V30 tmp12        [V30    ] (  1,  1   )     ref  ->  [rbp-D0H]   do-not-enreg[] must-init class-hnd exact "NewObj constructor temp"
;  V31 tmp13        [V31    ] (  1,  1   )     ref  ->  [rbp-D8H]   do-not-enreg[] must-init class-hnd "impAppendStmt"
;  V32 tmp14        [V32    ] (  1,  1   )     ref  ->  [rbp-E0H]   do-not-enreg[] must-init class-hnd exact "NewObj constructor temp"
;  V33 tmp15        [V33    ] (  1,  1   )     ref  ->  [rbp-E8H]   do-not-enreg[] must-init class-hnd "impAppendStmt"
;  V34 tmp16        [V34    ] (  1,  1   )  struct ( 8) [rbp-F0H]   do-not-enreg[S] "impSpillStackEnsure"
;  V35 tmp17        [V35    ] (  1,  1   )     ref  ->  [rbp-F8H]   do-not-enreg[] must-init class-hnd "impSpillStackEnsure"
;  V36 tmp18        [V36    ] (  1,  1   )     ref  ->  [rbp-100H]   do-not-enreg[] must-init class-hnd "impSpillStackEnsure"
;  V37 tmp19        [V37    ] (  1,  1   )  struct ( 8) [rbp-108H]   do-not-enreg[S] "impSpillStackEnsure"
;  V38 tmp20        [V38    ] (  1,  1   )     ref  ->  [rbp-110H]   do-not-enreg[] must-init class-hnd "impSpillStackEnsure"
;  V39 tmp21        [V39    ] (  1,  1   )     ref  ->  [rbp-118H]   do-not-enreg[] must-init class-hnd "impSpillStackEnsure"
;  V40 tmp22        [V40    ] (  1,  1   )  struct (16) [rbp-128H]   do-not-enreg[XSB] addr-exposed "impSpillStackEnsure"
;  V41 tmp23        [V41    ] (  1,  1   )     int  ->  [rbp-12CH]   do-not-enreg[] "impSpillStackEnsure"
;  V42 tmp24        [V42    ] (  1,  1   )     int  ->  [rbp-130H]   do-not-enreg[] "impSpillStackEnsure"
;  V43 tmp25        [V43    ] (  1,  1   )     int  ->  [rbp-134H]   do-not-enreg[] "impSpillStackEnsure"
;  V44 tmp26        [V44    ] (  1,  1   )     int  ->  [rbp-138H]   do-not-enreg[] "impSpillStackEnsure"
;  V45 tmp27        [V45    ] (  1,  1   )     int  ->  [rbp-13CH]   do-not-enreg[] "impSpillStackEnsure"
;  V46 PSPSym       [V46    ] (  1,  1   )    long  ->  [rbp-150H]   do-not-enreg[X] addr-exposed "PSPSym"
;
; Lcl frame size = 368
*************** Before prolog / epilog generation
G_M48562_IG01:        ; func=00, offs=000000H, size=0000H, gcrefRegs=00000000 {} <-- Prolog IG
G_M48562_IG02:        ; offs=000000H, size=000DH, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB02 [0038], byref
G_M48562_IG03:        ; offs=00000DH, size=0005H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB03 [0039], byref
G_M48562_IG04:        ; offs=000012H, size=013BH, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB05 [0001], byref
G_M48562_IG05:        ; offs=00014DH, size=005FH, BB05 [0001], extend
G_M48562_IG06:        ; offs=0001ACH, size=0012H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB06 [0002], byref
G_M48562_IG07:        ; offs=0001BEH, size=00CFH, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB07 [0003], byref
G_M48562_IG08:        ; offs=00028DH, size=0008H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB08 [0031], byref
G_M48562_IG09:        ; offs=000295H, size=0001H, BB08 [0031], nogc, extend
G_M48562_IG10:        ; offs=000296H, size=0009H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB13 [0007], byref
G_M48562_IG11:        ; offs=00029FH, size=0071H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB14 [0008], BB15 [0009], byref
G_M48562_IG12:        ; offs=000310H, size=0012H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB16 [0010], byref
G_M48562_IG13:        ; offs=000322H, size=0041H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB17 [0011], BB18 [0012], byref
G_M48562_IG14:        ; offs=000363H, size=0007H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB19 [0013], byref
G_M48562_IG15:        ; offs=00036AH, size=0008H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB20 [0035], byref
G_M48562_IG16:        ; offs=000372H, size=0005H, BB20 [0035], nogc, extend
G_M48562_IG17:        ; offs=000377H, size=0008H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB22 [0033], byref
G_M48562_IG18:        ; offs=00037FH, size=0001H, BB22 [0033], nogc, extend
G_M48562_IG19:        ; offs=000380H, size=000CH, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB27 [0017], byref
G_M48562_IG20:        ; offs=00038CH, size=000DH, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB28 [0018], byref
G_M48562_IG21:        ; offs=000399H, size=00A6H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB29 [0019], byref
G_M48562_IG22:        ; offs=00043FH, size=0069H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB30 [0020], BB31 [0021], byref
G_M48562_IG23:        ; offs=0004A8H, size=0037H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB32 [0022], BB33 [0023], byref
G_M48562_IG24:        ; offs=0004DFH, size=0039H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB34 [0024], BB35 [0025], byref
G_M48562_IG25:        ; offs=000518H, size=0030H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB36 [0026], BB37 [0027], byref
G_M48562_IG26:        ; offs=000548H, size=0001H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB38 [0028], byref
G_M48562_IG27:        ; offs=000549H, size=000DH, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB39 [0029], byref
G_M48562_IG28:        ; offs=000556H, size=0009H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB40 [0030], byref
G_M48562_IG29:        ; epilog placeholder, next placeholder=IG30 , BB40 [0030], epilog, extend <-- First placeholder
                      ;   PrevGCVars=0000000000000000 {}, PrevGCrefRegs=00000000 {}, PrevByrefRegs=00000000 {}
                      ;   InitGCVars=0000000000000000 {}, InitGCrefRegs=00000000 {}, InitByrefRegs=00000000 {}
G_M48562_IG30:        ; func=01, funclet prolog placeholder, next placeholder=IG33 , BB10 [0004], funclet prolog
                      ;   PrevGCVars=0000000000000000 {}, PrevGCrefRegs=00000000 {}, PrevByrefRegs=00000000 {}
                      ;   InitGCVars=0000000000000000 {}, InitGCrefRegs=00000000 {}, InitByrefRegs=00000000 {}
G_M48562_IG31:        ; offs=00075FH, size=0018H, gcVars=0000000000000000 {}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB10 [0004], BB11 [0005], gcvars, byref
G_M48562_IG32:        ; offs=000777H, size=0001H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB12 [0006], byref
G_M48562_IG33:        ; funclet epilog placeholder, next placeholder=IG34 , BB12 [0006], funclet epilog, extend
                      ;   PrevGCVars=0000000000000000 {}, PrevGCrefRegs=00000000 {}, PrevByrefRegs=00000000 {}
                      ;   InitGCVars=0000000000000000 {}, InitGCrefRegs=00000000 {}, InitByrefRegs=00000000 {}
G_M48562_IG34:        ; func=02, funclet prolog placeholder, next placeholder=IG37 , BB24 [0014], funclet prolog
                      ;   PrevGCVars=0000000000000000 {}, PrevGCrefRegs=00000000 {}, PrevByrefRegs=00000000 {}
                      ;   InitGCVars=0000000000000000 {}, InitGCrefRegs=00000000 {}, InitByrefRegs=00000000 {}
G_M48562_IG35:        ; offs=000978H, size=0018H, gcVars=0000000000000000 {}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB24 [0014], BB25 [0015], gcvars, byref
G_M48562_IG36:        ; offs=000990H, size=0001H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB26 [0016], byref
G_M48562_IG37:        ; funclet epilog placeholder, next placeholder=<END>, BB26 [0016], funclet epilog, extend <-- Last placeholder
                      ;   PrevGCVars=0000000000000000 {}, PrevGCrefRegs=00000000 {}, PrevByrefRegs=00000000 {}
                      ;   InitGCVars=0000000000000000 {}, InitGCrefRegs=00000000 {}, InitByrefRegs=00000000 {}
*************** In genFnProlog()
Added IP mapping to front: PROLOG STACK_EMPTY (G_M48562_IG01,ins#0,ofs#0) label

__prolog:
New debug range: first
New debug range: first
Found 68 lvMustInit int-sized stack slots, frame offsets 280 through 0
IN0142:        push     rbp
IN0143:        sub      rsp, 368
IN0144:        lea      rbp, [rsp+170H]
Notify VM instruction set (AVX2) must be supported.
IN0145:        xor      rax, rax
IN0146:        mov      qword ptr [rbp-118H], rax
IN0147:        vxorps   xmm4, xmm4
IN0148:        vmovdqa  xmmword ptr [rbp-110H], xmm4
IN0149:        vmovdqa  xmmword ptr [rbp-100H], xmm4
IN014a:        mov      rax, -240
IN014b:        vmovdqa  xmmword ptr [rax+rbp], xmm4
IN014c:        vmovdqa  xmmword ptr [rbp+rax+10H], xmm4
IN014d:        vmovdqa  xmmword ptr [rbp+rax+20H], xmm4
IN014e:        add      rax, 48
IN014f:        jne      SHORT  -5 instr
IN0150:        mov      qword ptr [V46 rbp-150H], rsp
*************** In genFnPrologCalleeRegArgs() for int regs
IN0151:        mov      gword ptr [V00 rbp+10H], rcx
IN0152:        mov      gword ptr [V01 rbp+18H], rdx
*************** In genEnregisterIncomingStackArgs()


      G_M48562_IG01:        ; offs=000000H, funclet=00, bbWeight=1   

Funclet prolog / epilog info
   Function InitialSP-to-FP delta: 368
                         SP delta: 48
       PSP slot Initial SP offset: 32
*************** In genFnEpilog()

__epilog:
gcVarPtrSetCur=0000000000000000 {}, gcRegGCrefSetCur=00000000 {}, gcRegByrefSetCur=00000000 {}
IN0153:        add      rsp, 368
IN0154:        pop      rbp
IN0155:        ret      

      G_M48562_IG29:        ; offs=00055FH, funclet=00, bbWeight=1   
*************** In genFuncletProlog()
IN0156:        push     rbp
IN0157:        sub      rsp, 48
IN0158:        mov      rbp, qword ptr [rcx+32]
Marking regs modified: [rbp] ([rax rcx rdx r8-r11 mm0-mm5] => [rax rcx rdx rbp r8-r11 mm0-mm5])
IN0159:        mov      qword ptr [rsp+20H], rbp
IN015a:        lea      rbp, [rbp+170H]
Removing modified regs: [rbp] ([rax rcx rdx rbp r8-r11 mm0-mm5] => [rax rcx rdx r8-r11 mm0-mm5])

      G_M48562_IG30:        ; offs=00065FH, funclet=01, bbWeight=1   
*************** In genFuncletEpilog()
IN015b:        add      rsp, 48
IN015c:        pop      rbp
IN015d:        ret      

      G_M48562_IG33:        ; offs=000778H, funclet=01, bbWeight=1   
*************** In genFuncletProlog()
IN015e:        push     rbp
IN015f:        sub      rsp, 48
IN0160:        mov      rbp, qword ptr [rcx+32]
Marking regs modified: [rbp] ([rax rcx rdx r8-r11 mm0-mm5] => [rax rcx rdx rbp r8-r11 mm0-mm5])
IN0161:        mov      qword ptr [rsp+20H], rbp
IN0162:        lea      rbp, [rbp+170H]
Removing modified regs: [rbp] ([rax rcx rdx rbp r8-r11 mm0-mm5] => [rax rcx rdx r8-r11 mm0-mm5])

      G_M48562_IG34:        ; offs=000878H, funclet=02, bbWeight=1   
*************** In genFuncletEpilog()
IN0163:        add      rsp, 48
IN0164:        pop      rbp
IN0165:        ret      

      G_M48562_IG37:        ; offs=000991H, funclet=02, bbWeight=1   
0 prologs, 1 epilogs, 2 funclet prologs, 2 funclet epilogs
*************** After prolog / epilog generation
G_M48562_IG01:        ; func=00, offs=000000H, size=0063H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, byref, nogc <-- Prolog IG
G_M48562_IG02:        ; offs=000063H, size=000DH, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB02 [0038], byref
G_M48562_IG03:        ; offs=000070H, size=0005H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB03 [0039], byref
G_M48562_IG04:        ; offs=000075H, size=013BH, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB05 [0001], byref
G_M48562_IG05:        ; offs=0001B0H, size=005FH, BB05 [0001], extend
G_M48562_IG06:        ; offs=00020FH, size=0012H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB06 [0002], byref
G_M48562_IG07:        ; offs=000221H, size=00CFH, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB07 [0003], byref
G_M48562_IG08:        ; offs=0002F0H, size=0008H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB08 [0031], byref
G_M48562_IG09:        ; offs=0002F8H, size=0001H, BB08 [0031], nogc, extend
G_M48562_IG10:        ; offs=0002F9H, size=0009H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB13 [0007], byref
G_M48562_IG11:        ; offs=000302H, size=0071H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB14 [0008], BB15 [0009], byref
G_M48562_IG12:        ; offs=000373H, size=0012H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB16 [0010], byref
G_M48562_IG13:        ; offs=000385H, size=0041H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB17 [0011], BB18 [0012], byref
G_M48562_IG14:        ; offs=0003C6H, size=0007H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB19 [0013], byref
G_M48562_IG15:        ; offs=0003CDH, size=0008H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB20 [0035], byref
G_M48562_IG16:        ; offs=0003D5H, size=0005H, BB20 [0035], nogc, extend
G_M48562_IG17:        ; offs=0003DAH, size=0008H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB22 [0033], byref
G_M48562_IG18:        ; offs=0003E2H, size=0001H, BB22 [0033], nogc, extend
G_M48562_IG19:        ; offs=0003E3H, size=000CH, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB27 [0017], byref
G_M48562_IG20:        ; offs=0003EFH, size=000DH, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB28 [0018], byref
G_M48562_IG21:        ; offs=0003FCH, size=00A6H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB29 [0019], byref
G_M48562_IG22:        ; offs=0004A2H, size=0069H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB30 [0020], BB31 [0021], byref
G_M48562_IG23:        ; offs=00050BH, size=0037H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB32 [0022], BB33 [0023], byref
G_M48562_IG24:        ; offs=000542H, size=0039H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB34 [0024], BB35 [0025], byref
G_M48562_IG25:        ; offs=00057BH, size=0030H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB36 [0026], BB37 [0027], byref
G_M48562_IG26:        ; offs=0005ABH, size=0001H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB38 [0028], byref
G_M48562_IG27:        ; offs=0005ACH, size=000DH, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB39 [0029], byref
G_M48562_IG28:        ; offs=0005B9H, size=0009H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB40 [0030], byref
G_M48562_IG29:        ; offs=0005C2H, size=0009H, epilog, nogc, extend
G_M48562_IG30:        ; func=01, offs=0005CBH, size=0015H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, byref, funclet prolog, nogc
G_M48562_IG31:        ; offs=0005E0H, size=0018H, gcVars=0000000000000000 {}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB10 [0004], BB11 [0005], gcvars, byref
G_M48562_IG32:        ; offs=0005F8H, size=0001H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB12 [0006], byref
G_M48562_IG33:        ; offs=0005F9H, size=0006H, funclet epilog, nogc, extend
G_M48562_IG34:        ; func=02, offs=0005FFH, size=0015H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, byref, funclet prolog, nogc
G_M48562_IG35:        ; offs=000614H, size=0018H, gcVars=0000000000000000 {}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB24 [0014], BB25 [0015], gcvars, byref
G_M48562_IG36:        ; offs=00062CH, size=0001H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB26 [0016], byref
G_M48562_IG37:        ; offs=00062DH, size=0006H, funclet epilog, nogc, extend
*************** In emitJumpDistBind()
Adjusted offset of BB02 from 0063 to 0063
Binding: IN0002: 000000 je       L_M48562_BB04
Binding L_M48562_BB04 to G_M48562_IG04
Estimate of fwd jump [C679E56C/002]: 006A -> 0075 = 0009
Shrinking jump [C679E56C/002]
Adjusted offset of BB03 from 0070 to 006C
Adjusted offset of BB04 from 0075 to 0071
Adjusted offset of BB05 from 01B0 to 01AC
Binding: IN004f: 000000 jmp      L_M48562_BB14
Binding L_M48562_BB14 to G_M48562_IG11
Estimate of fwd jump [C67A0C20/079]: 0206 -> 02FE = 00F6
Adjusted offset of BB06 from 020F to 020B
Adjusted offset of BB07 from 0221 to 021D
Binding: IN007f: 000000 jmp      L_M48562_BB08
Binding L_M48562_BB08 to G_M48562_IG08
Estimate of fwd jump [C67A1EB4/127]: 02E7 -> 02EC = 0003
Shrinking jump [C67A1EB4/127]
Adjusted offset of BB08 from 02F0 to 02E9
Binding: IN0081: 000000 call     L_M48562_BB10
Binding L_M48562_BB10 to G_M48562_IG30
Adjusted offset of BB09 from 02F8 to 02F1
Adjusted offset of BB10 from 02F9 to 02F2
Adjusted offset of BB11 from 0302 to 02FB
Binding: IN008c: 000000 jne      L_M48562_BB06
Binding L_M48562_BB06 to G_M48562_IG06
Estimate of bwd jump [C67A2C24/140]: 030C -> 020B = 0103
Binding: IN009d: 000000 jmp      L_M48562_BB28
Binding L_M48562_BB28 to G_M48562_IG20
Estimate of fwd jump [C67A2DE4/157]: 0367 -> 03E8 = 007F
Shrinking jump [C67A2DE4/157]
Adjusted offset of BB12 from 0373 to 0369
Adjusted offset of BB13 from 0385 to 037B
Binding: IN00b3: 000000 je       L_M48562_BB19
Binding L_M48562_BB19 to G_M48562_IG14
Estimate of fwd jump [C67A383C/179]: 03AF -> 03BC = 000B
Shrinking jump [C67A383C/179]
Binding: IN00b6: 000000 jmp      L_M48562_BB20
Binding L_M48562_BB20 to G_M48562_IG15
Estimate of fwd jump [C67A38A4/182]: 03B3 -> 03BF = 000A
Shrinking jump [C67A38A4/182]
Adjusted offset of BB14 from 03C6 to 03B5
Binding: IN00b9: 000000 jmp      L_M48562_BB22
Binding L_M48562_BB22 to G_M48562_IG17
Estimate of fwd jump [C67A3AAC/185]: 03B7 -> 03C9 = 0010
Shrinking jump [C67A3AAC/185]
Adjusted offset of BB15 from 03CD to 03B9
Binding: IN00bb: 000000 call     L_M48562_BB24
Binding L_M48562_BB24 to G_M48562_IG34
Adjusted offset of BB16 from 03D5 to 03C1
Binding: IN00bc: 000000 jmp      L_M48562_BB29
Binding L_M48562_BB29 to G_M48562_IG21
Estimate of fwd jump [C67A3D48/188]: 03C1 -> 03E8 = 0025
Shrinking jump [C67A3D48/188]
Adjusted offset of BB17 from 03DA to 03C3
Binding: IN00be: 000000 call     L_M48562_BB24
Binding L_M48562_BB24 to G_M48562_IG34
Adjusted offset of BB18 from 03E2 to 03CB
Adjusted offset of BB19 from 03E3 to 03CC
Adjusted offset of BB20 from 03EF to 03D8
Binding: IN00c6: 000000 jmp      L_M48562_BB16
Binding L_M48562_BB16 to G_M48562_IG12
Estimate of bwd jump [C67A4454/198]: 03E0 -> 0369 = 0079
Shrinking jump [C67A4454/198]
Adjusted offset of BB21 from 03FC to 03E2
Binding: IN00e7: 000000 jmp      L_M48562_BB39
Binding L_M48562_BB39 to G_M48562_IG27
Estimate of fwd jump [C67A53F4/231]: 0483 -> 0592 = 010D
Adjusted offset of BB22 from 04A2 to 0488
Binding: IN00f7: 000000 je       L_M48562_BB32
Binding L_M48562_BB32 to G_M48562_IG23
Estimate of fwd jump [C67A5E3C/247]: 04CC -> 04F1 = 0023
Shrinking jump [C67A5E3C/247]
Binding: IN0100: 000000 jmp      L_M48562_BB38
Binding L_M48562_BB38 to G_M48562_IG26
Estimate of fwd jump [C67A5F34/256]: 04E8 -> 058D = 00A3
Adjusted offset of BB23 from 050B to 04ED
Binding: IN0109: 000000 je       L_M48562_BB34
Binding L_M48562_BB34 to G_M48562_IG24
Estimate of fwd jump [C67A65B4/265]: 0510 -> 0524 = 0012
Shrinking jump [C67A65B4/265]
Binding: IN010f: 000000 jmp      L_M48562_BB38
Binding L_M48562_BB38 to G_M48562_IG26
Estimate of fwd jump [C67A6664/271]: 051B -> 0589 = 006C
Shrinking jump [C67A6664/271]
Adjusted offset of BB24 from 0542 to 051D
Binding: IN0118: 000000 je       L_M48562_BB36
Binding L_M48562_BB36 to G_M48562_IG25
Estimate of fwd jump [C67A6C64/280]: 0540 -> 0556 = 0014
Shrinking jump [C67A6C64/280]
Binding: IN011e: 000000 jmp      L_M48562_BB38
Binding L_M48562_BB38 to G_M48562_IG26
Estimate of fwd jump [C67A6D14/286]: 054D -> 0582 = 0033
Shrinking jump [C67A6D14/286]
Adjusted offset of BB25 from 057B to 054F
Binding: IN0127: 000000 je       L_M48562_BB38
Binding L_M48562_BB38 to G_M48562_IG26
Estimate of fwd jump [C67A7244/295]: 0572 -> 057F = 000B
Shrinking jump [C67A7244/295]
Binding: IN012a: 000000 jmp      L_M48562_BB40
Binding L_M48562_BB40 to G_M48562_IG28
Estimate of fwd jump [C67A72AC/298]: 0576 -> 0589 = 0011
Shrinking jump [C67A72AC/298]
Adjusted offset of BB26 from 05AB to 0578
Adjusted offset of BB27 from 05AC to 0579
Binding: IN012e: 000000 jmp      L_M48562_BB30
Binding L_M48562_BB30 to G_M48562_IG22
Estimate of bwd jump [C67A75EC/302]: 0581 -> 0488 = 00FB
Adjusted offset of BB28 from 05B9 to 0586
Adjusted offset of BB29 from 05C2 to 058F
Adjusted offset of BB30 from 05CB to 0598
Adjusted offset of BB31 from 05E0 to 05AD
Binding: IN0135: 000000 je       L_M48562_BB12
Binding L_M48562_BB12 to G_M48562_IG32
Estimate of fwd jump [C67A7DAC/309]: 05B5 -> 05C5 = 000E
Shrinking jump [C67A7DAC/309]
Adjusted offset of BB32 from 05F8 to 05C1
Adjusted offset of BB33 from 05F9 to 05C2
Adjusted offset of BB34 from 05FF to 05C8
Adjusted offset of BB35 from 0614 to 05DD
Binding: IN013d: 000000 je       L_M48562_BB26
Binding L_M48562_BB26 to G_M48562_IG36
Estimate of fwd jump [C67A85F4/317]: 05E5 -> 05F5 = 000E
Shrinking jump [C67A85F4/317]
Adjusted offset of BB36 from 062C to 05F1
Adjusted offset of BB37 from 062D to 05F2
Total shrinkage =  59, min extra jump size =  36
Iterating branch shortening. Iteration = 2
Adjusted offset of BB02 from 0063 to 0063
Adjusted offset of BB03 from 006C to 006C
Adjusted offset of BB04 from 0071 to 0071
Adjusted offset of BB05 from 01AC to 01AC
Estimate of fwd jump [C67A0C20/079]: 0206 -> 02FB = 00F3
Adjusted offset of BB06 from 020B to 020B
Adjusted offset of BB07 from 021D to 021D
Adjusted offset of BB08 from 02E9 to 02E9
Adjusted offset of BB09 from 02F1 to 02F1
Adjusted offset of BB10 from 02F2 to 02F2
Adjusted offset of BB11 from 02FB to 02FB
Estimate of bwd jump [C67A2C24/140]: 030C -> 020B = 0103
Adjusted offset of BB12 from 0369 to 0369
Adjusted offset of BB13 from 037B to 037B
Adjusted offset of BB14 from 03B5 to 03B5
Adjusted offset of BB15 from 03B9 to 03B9
Adjusted offset of BB16 from 03C1 to 03C1
Adjusted offset of BB17 from 03C3 to 03C3
Adjusted offset of BB18 from 03CB to 03CB
Adjusted offset of BB19 from 03CC to 03CC
Adjusted offset of BB20 from 03D8 to 03D8
Adjusted offset of BB21 from 03E2 to 03E2
Estimate of fwd jump [C67A53F4/231]: 0483 -> 0579 = 00F4
Adjusted offset of BB22 from 0488 to 0488
Estimate of fwd jump [C67A5F34/256]: 04E8 -> 0578 = 008E
Adjusted offset of BB23 from 04ED to 04ED
Adjusted offset of BB24 from 051D to 051D
Adjusted offset of BB25 from 054F to 054F
Adjusted offset of BB26 from 0578 to 0578
Adjusted offset of BB27 from 0579 to 0579
Estimate of bwd jump [C67A75EC/302]: 0581 -> 0488 = 00FB
Adjusted offset of BB28 from 0586 to 0586
Adjusted offset of BB29 from 058F to 058F
Adjusted offset of BB30 from 0598 to 0598
Adjusted offset of BB31 from 05AD to 05AD
Adjusted offset of BB32 from 05C1 to 05C1
Adjusted offset of BB33 from 05C2 to 05C2
Adjusted offset of BB34 from 05C8 to 05C8
Adjusted offset of BB35 from 05DD to 05DD

*************** Finishing PHASE Generate code

*************** Starting PHASE Emit code

Hot  code size = 0x5F8 bytes
Cold code size = 0x0 bytes
reserveUnwindInfo(isFunclet=false, isColdCode=false, unwindSize=0xa)
reserveUnwindInfo(isFunclet=true, isColdCode=false, unwindSize=0x8)
reserveUnwindInfo(isFunclet=true, isColdCode=false, unwindSize=0x8)
*************** In emitEndCodeGen()
Converting emitMaxStackDepth from bytes (0) to elements (0)

***************************************************************************
Instructions as they come out of the scheduler


G_M48562_IG01:        ; func=00, offs=000000H, size=0063H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, byref, nogc <-- Prolog IG
IN0142: 000000 55                   push     rbp
IN0143: 000001 4881EC70010000       sub      rsp, 368
IN0144: 000008 488DAC2470010000     lea      rbp, [rsp+170H]
IN0145: 000010 33C0                 xor      eax, eax
IN0146: 000012 488985E8FEFFFF       mov      qword ptr [rbp-118H], rax
IN0147: 000019 C5D857E4             vxorps   xmm4, xmm4 (ECS:5, ACS:4)
Instruction predicted size = 5, actual = 4
Increasing size adj 0 by 1 => 1
IN0148: 00001D C5F97FA5F0FEFFFF     vmovdqa  xmmword ptr [rbp-110H], xmm4 (ECS:9, ACS:8)
Instruction predicted size = 9, actual = 8
Increasing size adj 1 by 1 => 2
IN0149: 000025 C5F97FA500FFFFFF     vmovdqa  xmmword ptr [rbp-100H], xmm4 (ECS:9, ACS:8)
Instruction predicted size = 9, actual = 8
Increasing size adj 2 by 1 => 3
IN014a: 00002D 48B810FFFFFFFFFFFFFF mov      rax, -240
IN014b: 000037 C5F97F2428           vmovdqa  xmmword ptr [rax+rbp], xmm4 (ECS:6, ACS:5)
Instruction predicted size = 6, actual = 5
Increasing size adj 3 by 1 => 4
IN014c: 00003C C5F97F640510         vmovdqa  xmmword ptr [rbp+rax+10H], xmm4 (ECS:7, ACS:6)
Instruction predicted size = 7, actual = 6
Increasing size adj 4 by 1 => 5
IN014d: 000042 C5F97F640520         vmovdqa  xmmword ptr [rbp+rax+20H], xmm4 (ECS:7, ACS:6)
Instruction predicted size = 7, actual = 6
Increasing size adj 5 by 1 => 6
IN014e: 000048 4883C030             add      rax, 48
IN014f: 00004C 75E9                 jne      SHORT  -5 instr
IN0150: 00004E 4889A5B0FEFFFF       mov      qword ptr [rbp-150H], rsp
IN0151: 000055 48894D10             mov      gword ptr [rbp+10H], rcx
IN0152: 000059 48895518             mov      gword ptr [rbp+18H], rdx
						;; bbWeight=1    PerfScore 12.83
G_M48562_IG02:        ; func=00, offs=000063H, size=0009H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB02 [0038], byref, isz
Block predicted offs = 00000063, actual = 0000005D -> size adj = 6
IN0001: 00005D 833DA4DE2A0000       cmp      dword ptr [(reloc 0x7ffdb6f1d838)], 0
IN0002: 000064 7405                 je       SHORT G_M48562_IG04
						;; bbWeight=1    PerfScore 3.00
G_M48562_IG03:        ; func=00, offs=00006CH, size=0005H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB03 [0039], byref
Block predicted offs = 0000006C, actual = 00000066 -> size adj = 6
IN0003: 000066 E89510A25E           call     CORINFO_HELP_DBG_IS_JUST_MY_CODE
                            ; gcr arg pop 0
						;; bbWeight=0.50 PerfScore 0.50
G_M48562_IG04:        ; func=00, offs=000071H, size=013BH, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB05 [0001], byref
Block predicted offs = 00000071, actual = 0000006B -> size adj = 6
IN0004: 00006B 90                   nop      
IN0005: 00006C E89FF3FFFF           call     System.DateTime:get_Now():System.DateTime
                            ; gcr arg pop 0
IN0006: 000071 48894588             mov      qword ptr [rbp-78H], rax
IN0007: 000075 488B4D88             mov      rcx, qword ptr [rbp-78H]
IN0008: 000079 48894DF0             mov      qword ptr [rbp-10H], rcx
IN0009: 00007D 488D4DF0             lea      rcx, bword ptr [rbp-10H]
                            ; byrRegs +[rcx]
IN000a: 000081 E862F2FFFF           call     System.DateTime:ToString():System.String:this
                            ; gcrRegs +[rax]
                            ; byrRegs -[rcx]
                            ; gcr arg pop 0
IN000b: 000086 48894580             mov      gword ptr [rbp-80H], rax
IN000c: 00008A 48BAF0312ABEED010000 mov      rdx, 0x1EDBE2A31F0      ; "	 Created list"
IN000d: 000094 488B12               mov      rdx, gword ptr [rdx]
                            ; gcrRegs +[rdx]
IN000e: 000097 488B4D80             mov      rcx, gword ptr [rbp-80H]
                            ; gcrRegs +[rcx]
IN000f: 00009B E8708CFEFF           call     System.String:Concat(System.String,System.String):System.String
                            ; gcrRegs -[rcx rdx]
                            ; gcr arg pop 0
IN0010: 0000A0 48898578FFFFFF       mov      gword ptr [rbp-88H], rax
IN0011: 0000A7 488B8D78FFFFFF       mov      rcx, gword ptr [rbp-88H]
                            ; gcrRegs +[rcx]
IN0012: 0000AE E8C5F7FFFF           call     System.Console:WriteLine(System.String)
                            ; gcrRegs -[rax rcx]
                            ; gcr arg pop 0
IN0013: 0000B3 90                   nop      
IN0014: 0000B4 48B9702B02B7FD7F0000 mov      rcx, 0x7FFDB7022B70
IN0015: 0000BE E89D62EA5E           call     CORINFO_HELP_NEWSFAST
                            ; gcrRegs +[rax]
                            ; gcr arg pop 0
IN0016: 0000C3 48898570FFFFFF       mov      gword ptr [rbp-90H], rax
IN0017: 0000CA 488B8D70FFFFFF       mov      rcx, gword ptr [rbp-90H]
                            ; gcrRegs +[rcx]
IN0018: 0000D1 E8E2EFFFFF           call     FalseLeakRepro.List:.ctor():this
                            ; gcrRegs -[rax rcx]
                            ; gcr arg pop 0
IN0019: 0000D6 488B5510             mov      rdx, gword ptr [rbp+10H]
                            ; gcrRegs +[rdx]
IN001a: 0000DA 488D4A08             lea      rcx, bword ptr [rdx+8]
                            ; byrRegs +[rcx]
IN001b: 0000DE 488B9570FFFFFF       mov      rdx, gword ptr [rbp-90H]
IN001c: 0000E5 E8F65DEA5E           call     CORINFO_HELP_ASSIGN_REF
                            ; gcrRegs -[rdx]
                            ; byrRegs -[rcx]
IN001d: 0000EA 48B9B858C4B6FD7F0000 mov      rcx, 0x7FFDB6C458B8
IN001e: 0000F4 E86762EA5E           call     CORINFO_HELP_NEWSFAST
                            ; gcrRegs +[rax]
                            ; gcr arg pop 0
IN001f: 0000F9 48898568FFFFFF       mov      gword ptr [rbp-98H], rax
IN0020: 000100 488B4D10             mov      rcx, gword ptr [rbp+10H]
                            ; gcrRegs +[rcx]
IN0021: 000104 488B4908             mov      rcx, gword ptr [rcx+8]
IN0022: 000108 488B4908             mov      rcx, gword ptr [rcx+8]
IN0023: 00010C 48898D60FFFFFF       mov      gword ptr [rbp-A0H], rcx
IN0024: 000113 488B8D68FFFFFF       mov      rcx, gword ptr [rbp-98H]
IN0025: 00011A E8D905FEFF           call     System.Object:.ctor():this
                            ; gcrRegs -[rax rcx]
                            ; gcr arg pop 0
IN0026: 00011F 488B9560FFFFFF       mov      rdx, gword ptr [rbp-A0H]
                            ; gcrRegs +[rdx]
IN0027: 000126 488D4A10             lea      rcx, bword ptr [rdx+16]
                            ; byrRegs +[rcx]
IN0028: 00012A 488B9568FFFFFF       mov      rdx, gword ptr [rbp-98H]
IN0029: 000131 E8AA5DEA5E           call     CORINFO_HELP_ASSIGN_REF
                            ; gcrRegs -[rdx]
                            ; byrRegs -[rcx]
IN002a: 000136 48B9486302B7FD7F0000 mov      rcx, 0x7FFDB7026348
IN002b: 000140 E81B62EA5E           call     CORINFO_HELP_NEWSFAST
                            ; gcrRegs +[rax]
                            ; gcr arg pop 0
IN002c: 000145 48898558FFFFFF       mov      gword ptr [rbp-A8H], rax
IN002d: 00014C 488B8D58FFFFFF       mov      rcx, gword ptr [rbp-A8H]
                            ; gcrRegs +[rcx]
IN002e: 000153 488B5510             mov      rdx, gword ptr [rbp+10H]
                            ; gcrRegs +[rdx]
IN002f: 000157 49B8F813C6B6FD7F0000 mov      r8, 0x7FFDB6C613F8
IN0030: 000161 E85276FEFF           call     System.MulticastDelegate:CtorClosed(System.Object,long):this
                            ; gcrRegs -[rax rcx rdx]
                            ; gcr arg pop 0
IN0031: 000166 48B9804EDCB6FD7F0000 mov      rcx, 0x7FFDB6DC4E80
IN0032: 000170 E85B67A25E           call     CORINFO_HELP_NEWFAST
                            ; gcrRegs +[rax]
                            ; gcr arg pop 0
IN0033: 000175 48898550FFFFFF       mov      gword ptr [rbp-B0H], rax
IN0034: 00017C 488B8D50FFFFFF       mov      rcx, gword ptr [rbp-B0H]
                            ; gcrRegs +[rcx]
IN0035: 000183 488B9558FFFFFF       mov      rdx, gword ptr [rbp-A8H]
                            ; gcrRegs +[rdx]
IN0036: 00018A E8199BFEFF           call     System.Threading.Thread:.ctor(System.Threading.ParameterizedThreadStart):this
                            ; gcrRegs -[rax rcx rdx]
                            ; gcr arg pop 0
IN0037: 00018F 488B8D50FFFFFF       mov      rcx, gword ptr [rbp-B0H]
                            ; gcrRegs +[rcx]
IN0038: 000196 48894DF8             mov      gword ptr [rbp-08H], rcx
IN0039: 00019A 488B4DF8             mov      rcx, gword ptr [rbp-08H]
IN003a: 00019E 3909                 cmp      dword ptr [rcx], ecx
IN003b: 0001A0 E8339BFEFF           call     System.Threading.Thread:Start():this
                            ; gcrRegs -[rcx]
                            ; gcr arg pop 0
IN003c: 0001A5 90                   nop      
						;; bbWeight=1    PerfScore 52.75
G_M48562_IG05:        ; func=00, offs=0001ACH, size=005FH, BB05 [0001], extend
Block predicted offs = 000001AC, actual = 000001A6 -> size adj = 6
IN003d: 0001A6 E865F2FFFF           call     System.DateTime:get_Now():System.DateTime
                            ; gcr arg pop 0
IN003e: 0001AB 48898548FFFFFF       mov      qword ptr [rbp-B8H], rax
IN003f: 0001B2 488B8D48FFFFFF       mov      rcx, qword ptr [rbp-B8H]
IN0040: 0001B9 48894DF0             mov      qword ptr [rbp-10H], rcx
IN0041: 0001BD 488D4DF0             lea      rcx, bword ptr [rbp-10H]
                            ; byrRegs +[rcx]
IN0042: 0001C1 E822F1FFFF           call     System.DateTime:ToString():System.String:this
                            ; gcrRegs +[rax]
                            ; byrRegs -[rcx]
                            ; gcr arg pop 0
IN0043: 0001C6 48898540FFFFFF       mov      gword ptr [rbp-C0H], rax
IN0044: 0001CD 48BAF8312ABEED010000 mov      rdx, 0x1EDBE2A31F8      ; "	 Consumer thread started, adding items..."
IN0045: 0001D7 488B12               mov      rdx, gword ptr [rdx]
                            ; gcrRegs +[rdx]
IN0046: 0001DA 488B8D40FFFFFF       mov      rcx, gword ptr [rbp-C0H]
                            ; gcrRegs +[rcx]
IN0047: 0001E1 E82A8BFEFF           call     System.String:Concat(System.String,System.String):System.String
                            ; gcrRegs -[rcx rdx]
                            ; gcr arg pop 0
IN0048: 0001E6 48898538FFFFFF       mov      gword ptr [rbp-C8H], rax
IN0049: 0001ED 488B8D38FFFFFF       mov      rcx, gword ptr [rbp-C8H]
                            ; gcrRegs +[rcx]
IN004a: 0001F4 E87FF6FFFF           call     System.Console:WriteLine(System.String)
                            ; gcrRegs -[rax rcx]
                            ; gcr arg pop 0
IN004b: 0001F9 90                   nop      
IN004c: 0001FA 33D2                 xor      edx, edx
IN004d: 0001FC 8955EC               mov      dword ptr [rbp-14H], edx
IN004e: 0001FF 90                   nop      
IN004f: 000200 E9F0000000           jmp      G_M48562_IG11
						;; bbWeight=1    PerfScore 17.50
G_M48562_IG06:        ; func=00, offs=00020BH, size=0012H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB06 [0002], byref
Block predicted offs = 0000020B, actual = 00000205 -> size adj = 6
IN0050: 000205 90                   nop      
IN0051: 000206 488B5510             mov      rdx, gword ptr [rbp+10H]
                            ; gcrRegs +[rdx]
IN0052: 00020A 488B5208             mov      rdx, gword ptr [rdx+8]
IN0053: 00020E 488955E0             mov      gword ptr [rbp-20H], rdx
IN0054: 000212 33D2                 xor      edx, edx
                            ; gcrRegs -[rdx]
IN0055: 000214 8955D8               mov      dword ptr [rbp-28H], edx
						;; bbWeight=1    PerfScore 5.50
G_M48562_IG07:        ; func=00, offs=00021DH, size=00CCH, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB07 [0003], byref, isz
Block predicted offs = 0000021D, actual = 00000217 -> size adj = 6
IN0056: 000217 488D55D8             lea      rdx, [rbp-28H]
IN0057: 00021B 488B4DE0             mov      rcx, gword ptr [rbp-20H]
                            ; gcrRegs +[rcx]
IN0058: 00021F E80C9CFEFF           call     System.Threading.Monitor:Enter(System.Object,byref)
                            ; gcrRegs -[rcx]
                            ; gcr arg pop 0
IN0059: 000224 90                   nop      
IN005a: 000225 90                   nop      
IN005b: 000226 48B9C86002B7FD7F0000 mov      rcx, 0x7FFDB70260C8
IN005c: 000230 E82B61EA5E           call     CORINFO_HELP_NEWSFAST
                            ; gcrRegs +[rax]
                            ; gcr arg pop 0
IN005d: 000235 48898530FFFFFF       mov      gword ptr [rbp-D0H], rax
IN005e: 00023C 488B4D10             mov      rcx, gword ptr [rbp+10H]
                            ; gcrRegs +[rcx]
IN005f: 000240 488B4908             mov      rcx, gword ptr [rcx+8]
IN0060: 000244 488B4908             mov      rcx, gword ptr [rcx+8]
IN0061: 000248 48898D28FFFFFF       mov      gword ptr [rbp-D8H], rcx
IN0062: 00024F 488B8D30FFFFFF       mov      rcx, gword ptr [rbp-D0H]
IN0063: 000256 E86DEEFFFF           call     FalseLeakRepro.Node:.ctor():this
                            ; gcrRegs -[rax rcx]
                            ; gcr arg pop 0
IN0064: 00025B 488B9528FFFFFF       mov      rdx, gword ptr [rbp-D8H]
                            ; gcrRegs +[rdx]
IN0065: 000262 488D4A08             lea      rcx, bword ptr [rdx+8]
                            ; byrRegs +[rcx]
IN0066: 000266 488B9530FFFFFF       mov      rdx, gword ptr [rbp-D0H]
IN0067: 00026D E86E5CEA5E           call     CORINFO_HELP_ASSIGN_REF
                            ; gcrRegs -[rdx]
                            ; byrRegs -[rcx]
IN0068: 000272 488B5510             mov      rdx, gword ptr [rbp+10H]
                            ; gcrRegs +[rdx]
IN0069: 000276 488B5208             mov      rdx, gword ptr [rdx+8]
IN006a: 00027A 488D4A08             lea      rcx, bword ptr [rdx+8]
                            ; byrRegs +[rcx]
IN006b: 00027E 488B5510             mov      rdx, gword ptr [rbp+10H]
IN006c: 000282 488B5208             mov      rdx, gword ptr [rdx+8]
IN006d: 000286 488B5208             mov      rdx, gword ptr [rdx+8]
IN006e: 00028A 488B5208             mov      rdx, gword ptr [rdx+8]
IN006f: 00028E E84D5CEA5E           call     CORINFO_HELP_ASSIGN_REF
                            ; gcrRegs -[rdx]
                            ; byrRegs -[rcx]
IN0070: 000293 48B9B858C4B6FD7F0000 mov      rcx, 0x7FFDB6C458B8
IN0071: 00029D E8BE60EA5E           call     CORINFO_HELP_NEWSFAST
                            ; gcrRegs +[rax]
                            ; gcr arg pop 0
IN0072: 0002A2 48898520FFFFFF       mov      gword ptr [rbp-E0H], rax
IN0073: 0002A9 488B4D10             mov      rcx, gword ptr [rbp+10H]
                            ; gcrRegs +[rcx]
IN0074: 0002AD 488B4908             mov      rcx, gword ptr [rcx+8]
IN0075: 0002B1 488B4908             mov      rcx, gword ptr [rcx+8]
IN0076: 0002B5 48898D18FFFFFF       mov      gword ptr [rbp-E8H], rcx
IN0077: 0002BC 488B8D20FFFFFF       mov      rcx, gword ptr [rbp-E0H]
IN0078: 0002C3 E83004FEFF           call     System.Object:.ctor():this
                            ; gcrRegs -[rax rcx]
                            ; gcr arg pop 0
IN0079: 0002C8 488B9518FFFFFF       mov      rdx, gword ptr [rbp-E8H]
                            ; gcrRegs +[rdx]
IN007a: 0002CF 488D4A10             lea      rcx, bword ptr [rdx+16]
                            ; byrRegs +[rcx]
IN007b: 0002D3 488B9520FFFFFF       mov      rdx, gword ptr [rbp-E0H]
IN007c: 0002DA E8015CEA5E           call     CORINFO_HELP_ASSIGN_REF
                            ; gcrRegs -[rdx]
                            ; byrRegs -[rcx]
IN007d: 0002DF 90                   nop      
IN007e: 0002E0 90                   nop      
IN007f: 0002E1 EB00                 jmp      SHORT G_M48562_IG08
						;; bbWeight=1    PerfScore 44.50
G_M48562_IG08:        ; func=00, offs=0002E9H, size=0008H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB08 [0031], byref
Block predicted offs = 000002E9, actual = 000002E3 -> size adj = 6
IN0080: 0002E3 488BCC               mov      rcx, rsp
IN0081: 0002E6 E8A7020000           call     G_M48562_IG30
						;; bbWeight=1    PerfScore 1.25
G_M48562_IG09:        ; func=00, offs=0002F1H, size=0001H, BB08 [0031], nogc, extend
Block predicted offs = 000002F1, actual = 000002EB -> size adj = 6
IN0082: 0002EB 90                   nop      
						;; bbWeight=1    PerfScore 0.25
G_M48562_IG10:        ; func=00, offs=0002F2H, size=0009H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB13 [0007], byref
Block predicted offs = 000002F2, actual = 000002EC -> size adj = 6
IN0083: 0002EC 90                   nop      
IN0084: 0002ED 8B45EC               mov      eax, dword ptr [rbp-14H]
IN0085: 0002F0 FFC0                 inc      eax
IN0086: 0002F2 8945EC               mov      dword ptr [rbp-14H], eax
						;; bbWeight=1    PerfScore 2.50
G_M48562_IG11:        ; func=00, offs=0002FBH, size=006EH, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB14 [0008], BB15 [0009], byref, isz
Block predicted offs = 000002FB, actual = 000002F5 -> size adj = 6
IN0087: 0002F5 837DEC0A             cmp      dword ptr [rbp-14H], 10
IN0088: 0002F9 0F9CC2               setl     dl
IN0089: 0002FC 0FB6D2               movzx    rdx, dl
IN008a: 0002FF 8955D4               mov      dword ptr [rbp-2CH], edx
IN008b: 000302 837DD400             cmp      dword ptr [rbp-2CH], 0
IN008c: 000306 0F85F9FEFFFF         jne      G_M48562_IG06
IN008d: 00030C E8FFF0FFFF           call     System.DateTime:get_Now():System.DateTime
                            ; gcr arg pop 0
IN008e: 000311 48898510FFFFFF       mov      qword ptr [rbp-F0H], rax
IN008f: 000318 488B8D10FFFFFF       mov      rcx, qword ptr [rbp-F0H]
IN0090: 00031F 48894DF0             mov      qword ptr [rbp-10H], rcx
IN0091: 000323 488D4DF0             lea      rcx, bword ptr [rbp-10H]
                            ; byrRegs +[rcx]
IN0092: 000327 E8BCEFFFFF           call     System.DateTime:ToString():System.String:this
                            ; gcrRegs +[rax]
                            ; byrRegs -[rcx]
                            ; gcr arg pop 0
IN0093: 00032C 48898508FFFFFF       mov      gword ptr [rbp-F8H], rax
IN0094: 000333 48BA00322ABEED010000 mov      rdx, 0x1EDBE2A3200      ; "	 Waiting for list processing to complete..."
IN0095: 00033D 488B12               mov      rdx, gword ptr [rdx]
                            ; gcrRegs +[rdx]
IN0096: 000340 488B8D08FFFFFF       mov      rcx, gword ptr [rbp-F8H]
                            ; gcrRegs +[rcx]
IN0097: 000347 E8C489FEFF           call     System.String:Concat(System.String,System.String):System.String
                            ; gcrRegs -[rcx rdx]
                            ; gcr arg pop 0
IN0098: 00034C 48898500FFFFFF       mov      gword ptr [rbp-100H], rax
IN0099: 000353 488B8D00FFFFFF       mov      rcx, gword ptr [rbp-100H]
                            ; gcrRegs +[rcx]
IN009a: 00035A E819F5FFFF           call     System.Console:WriteLine(System.String)
                            ; gcrRegs -[rax rcx]
                            ; gcr arg pop 0
IN009b: 00035F 90                   nop      
IN009c: 000360 90                   nop      
IN009d: 000361 EB6F                 jmp      SHORT G_M48562_IG20
						;; bbWeight=1    PerfScore 21.50
G_M48562_IG12:        ; func=00, offs=000369H, size=0012H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB16 [0010], byref
Block predicted offs = 00000369, actual = 00000363 -> size adj = 6
IN009e: 000363 90                   nop      
IN009f: 000364 488B5510             mov      rdx, gword ptr [rbp+10H]
                            ; gcrRegs +[rdx]
IN00a0: 000368 488B5208             mov      rdx, gword ptr [rdx+8]
IN00a1: 00036C 488955C8             mov      gword ptr [rbp-38H], rdx
IN00a2: 000370 33D2                 xor      edx, edx
                            ; gcrRegs -[rdx]
IN00a3: 000372 8955C0               mov      dword ptr [rbp-40H], edx
						;; bbWeight=1    PerfScore 5.50
G_M48562_IG13:        ; func=00, offs=00037BH, size=003AH, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB17 [0011], BB18 [0012], byref, isz
Block predicted offs = 0000037B, actual = 00000375 -> size adj = 6
IN00a4: 000375 488D55C0             lea      rdx, [rbp-40H]
IN00a5: 000379 488B4DC8             mov      rcx, gword ptr [rbp-38H]
                            ; gcrRegs +[rcx]
IN00a6: 00037D E8AE9AFEFF           call     System.Threading.Monitor:Enter(System.Object,byref)
                            ; gcrRegs -[rcx]
                            ; gcr arg pop 0
IN00a7: 000382 90                   nop      
IN00a8: 000383 90                   nop      
IN00a9: 000384 488B4D10             mov      rcx, gword ptr [rbp+10H]
                            ; gcrRegs +[rcx]
IN00aa: 000388 488B4908             mov      rcx, gword ptr [rcx+8]
IN00ab: 00038C 488B4908             mov      rcx, gword ptr [rcx+8]
IN00ac: 000390 488B4510             mov      rax, gword ptr [rbp+10H]
                            ; gcrRegs +[rax]
IN00ad: 000394 488B4008             mov      rax, gword ptr [rax+8]
IN00ae: 000398 483B4810             cmp      rcx, gword ptr [rax+16]
IN00af: 00039C 0F94C1               sete     cl
                            ; gcrRegs -[rcx]
IN00b0: 00039F 0FB6C9               movzx    rcx, cl
IN00b1: 0003A2 894DBC               mov      dword ptr [rbp-44H], ecx
IN00b2: 0003A5 837DBC00             cmp      dword ptr [rbp-44H], 0
IN00b3: 0003A9 7404                 je       SHORT G_M48562_IG14
IN00b4: 0003AB 90                   nop      
IN00b5: 0003AC 90                   nop      
IN00b6: 0003AD EB04                 jmp      SHORT G_M48562_IG15
						;; bbWeight=1    PerfScore 19.75
G_M48562_IG14:        ; func=00, offs=0003B5H, size=0004H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB19 [0013], byref, isz
Block predicted offs = 000003B5, actual = 000003AF -> size adj = 6
                            ; gcrRegs -[rax]
IN00b7: 0003AF 90                   nop      
IN00b8: 0003B0 90                   nop      
IN00b9: 0003B1 EB0A                 jmp      SHORT G_M48562_IG17
						;; bbWeight=1    PerfScore 2.50
G_M48562_IG15:        ; func=00, offs=0003B9H, size=0008H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB20 [0035], byref
Block predicted offs = 000003B9, actual = 000003B3 -> size adj = 6
IN00ba: 0003B3 488BCC               mov      rcx, rsp
IN00bb: 0003B6 E807020000           call     G_M48562_IG34
						;; bbWeight=1    PerfScore 1.25
G_M48562_IG16:        ; func=00, offs=0003C1H, size=0002H, BB20 [0035], nogc, isz, extend
Block predicted offs = 000003C1, actual = 000003BB -> size adj = 6
IN00bc: 0003BB EB1F                 jmp      SHORT G_M48562_IG21
						;; bbWeight=1    PerfScore 2.00
G_M48562_IG17:        ; func=00, offs=0003C3H, size=0008H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB22 [0033], byref
Block predicted offs = 000003C3, actual = 000003BD -> size adj = 6
IN00bd: 0003BD 488BCC               mov      rcx, rsp
IN00be: 0003C0 E8FD010000           call     G_M48562_IG34
						;; bbWeight=1    PerfScore 1.25
G_M48562_IG18:        ; func=00, offs=0003CBH, size=0001H, BB22 [0033], nogc, extend
Block predicted offs = 000003CB, actual = 000003C5 -> size adj = 6
IN00bf: 0003C5 90                   nop      
						;; bbWeight=1    PerfScore 0.25
G_M48562_IG19:        ; func=00, offs=0003CCH, size=000CH, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB27 [0017], byref
Block predicted offs = 000003CC, actual = 000003C6 -> size adj = 6
IN00c0: 0003C6 B964000000           mov      ecx, 100
IN00c1: 0003CB E8B096FEFF           call     System.Threading.Thread:Sleep(int)
                            ; gcr arg pop 0
IN00c2: 0003D0 90                   nop      
IN00c3: 0003D1 90                   nop      
						;; bbWeight=1    PerfScore 1.75
G_M48562_IG20:        ; func=00, offs=0003D8H, size=000AH, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB28 [0018], byref, isz
Block predicted offs = 000003D8, actual = 000003D2 -> size adj = 6
IN00c4: 0003D2 C745B801000000       mov      dword ptr [rbp-48H], 1
IN00c5: 0003D9 90                   nop      
IN00c6: 0003DA EB87                 jmp      SHORT G_M48562_IG12
						;; bbWeight=1    PerfScore 3.25
G_M48562_IG21:        ; func=00, offs=0003E2H, size=00A6H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB29 [0019], byref
Block predicted offs = 000003E2, actual = 000003DC -> size adj = 6
IN00c7: 0003DC E82FF0FFFF           call     System.DateTime:get_Now():System.DateTime
                            ; gcr arg pop 0
IN00c8: 0003E1 488985F8FEFFFF       mov      qword ptr [rbp-108H], rax
IN00c9: 0003E8 488B8DF8FEFFFF       mov      rcx, qword ptr [rbp-108H]
IN00ca: 0003EF 48894DF0             mov      qword ptr [rbp-10H], rcx
IN00cb: 0003F3 488D4DF0             lea      rcx, bword ptr [rbp-10H]
                            ; byrRegs +[rcx]
IN00cc: 0003F7 E8ECEEFFFF           call     System.DateTime:ToString():System.String:this
                            ; gcrRegs +[rax]
                            ; byrRegs -[rcx]
                            ; gcr arg pop 0
IN00cd: 0003FC 488985F0FEFFFF       mov      gword ptr [rbp-110H], rax
IN00ce: 000403 48BA08322ABEED010000 mov      rdx, 0x1EDBE2A3208      ; "	 Done.  Profiler is active, available options:"
IN00cf: 00040D 488B12               mov      rdx, gword ptr [rdx]
                            ; gcrRegs +[rdx]
IN00d0: 000410 488B8DF0FEFFFF       mov      rcx, gword ptr [rbp-110H]
                            ; gcrRegs +[rcx]
IN00d1: 000417 E8F488FEFF           call     System.String:Concat(System.String,System.String):System.String
                            ; gcrRegs -[rcx rdx]
                            ; gcr arg pop 0
IN00d2: 00041C 488985E8FEFFFF       mov      gword ptr [rbp-118H], rax
IN00d3: 000423 488B8DE8FEFFFF       mov      rcx, gword ptr [rbp-118H]
                            ; gcrRegs +[rcx]
IN00d4: 00042A E849F4FFFF           call     System.Console:WriteLine(System.String)
                            ; gcrRegs -[rax rcx]
                            ; gcr arg pop 0
IN00d5: 00042F 90                   nop      
IN00d6: 000430 48B910322ABEED010000 mov      rcx, 0x1EDBE2A3210      ; "   Q = quit"
IN00d7: 00043A 488B09               mov      rcx, gword ptr [rcx]
                            ; gcrRegs +[rcx]
IN00d8: 00043D E836F4FFFF           call     System.Console:WriteLine(System.String)
                            ; gcrRegs -[rcx]
                            ; gcr arg pop 0
IN00d9: 000442 90                   nop      
IN00da: 000443 48B918322ABEED010000 mov      rcx, 0x1EDBE2A3218      ; "   H = heap snapshot"
IN00db: 00044D 488B09               mov      rcx, gword ptr [rcx]
                            ; gcrRegs +[rcx]
IN00dc: 000450 E823F4FFFF           call     System.Console:WriteLine(System.String)
                            ; gcrRegs -[rcx]
                            ; gcr arg pop 0
IN00dd: 000455 90                   nop      
IN00de: 000456 48B920322ABEED010000 mov      rcx, 0x1EDBE2A3220      ; "   G = GC (max gen)"
IN00df: 000460 488B09               mov      rcx, gword ptr [rcx]
                            ; gcrRegs +[rcx]
IN00e0: 000463 E810F4FFFF           call     System.Console:WriteLine(System.String)
                            ; gcrRegs -[rcx]
                            ; gcr arg pop 0
IN00e1: 000468 90                   nop      
IN00e2: 000469 48B928322ABEED010000 mov      rcx, 0x1EDBE2A3228      ; "   R = clear the running flag to stop the consumer thread"
IN00e3: 000473 488B09               mov      rcx, gword ptr [rcx]
                            ; gcrRegs +[rcx]
IN00e4: 000476 E8FDF3FFFF           call     System.Console:WriteLine(System.String)
                            ; gcrRegs -[rcx]
                            ; gcr arg pop 0
IN00e5: 00047B 90                   nop      
IN00e6: 00047C 90                   nop      
IN00e7: 00047D E9F1000000           jmp      G_M48562_IG27
						;; bbWeight=1    PerfScore 30.25
G_M48562_IG22:        ; func=00, offs=000488H, size=0065H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB30 [0020], BB31 [0021], byref, isz
Block predicted offs = 00000488, actual = 00000482 -> size adj = 6
IN00e8: 000482 90                   nop      
IN00e9: 000483 488D8DD8FEFFFF       lea      rcx, [rbp-128H]
IN00ea: 00048A E881F6FFFF           call     System.Console:ReadKey():System.ConsoleKeyInfo
                            ; gcr arg pop 0
IN00eb: 00048F 488B8DD8FEFFFF       mov      rcx, qword ptr [rbp-128H]
IN00ec: 000496 48894DA8             mov      qword ptr [rbp-58H], rcx
IN00ed: 00049A 8B8DE0FEFFFF         mov      ecx, dword ptr [rbp-120H]
IN00ee: 0004A0 894DB0               mov      dword ptr [rbp-50H], ecx
IN00ef: 0004A3 488D4DA8             lea      rcx, bword ptr [rbp-58H]
                            ; byrRegs +[rcx]
IN00f0: 0004A7 E83CF2FFFF           call     System.ConsoleKeyInfo:get_Key():int:this
                            ; byrRegs -[rcx]
                            ; gcr arg pop 0
IN00f1: 0004AC 8985D4FEFFFF         mov      dword ptr [rbp-12CH], eax
IN00f2: 0004B2 83BDD4FEFFFF47       cmp      dword ptr [rbp-12CH], 71
IN00f3: 0004B9 0F94C0               sete     al
IN00f4: 0004BC 0FB6C0               movzx    rax, al
IN00f5: 0004BF 8945A4               mov      dword ptr [rbp-5CH], eax
IN00f6: 0004C2 837DA400             cmp      dword ptr [rbp-5CH], 0
IN00f7: 0004C6 741F                 je       SHORT G_M48562_IG23
IN00f8: 0004C8 90                   nop      
IN00f9: 0004C9 E88AF7FFFF           call     System.GC:get_MaxGeneration():int
                            ; gcr arg pop 0
IN00fa: 0004CE 8985C4FEFFFF         mov      dword ptr [rbp-13CH], eax
IN00fb: 0004D4 8B8DC4FEFFFF         mov      ecx, dword ptr [rbp-13CH]
IN00fc: 0004DA E801F9FFFF           call     System.GC:Collect(int)
                            ; gcr arg pop 0
IN00fd: 0004DF 90                   nop      
IN00fe: 0004E0 90                   nop      
IN00ff: 0004E1 90                   nop      
IN0100: 0004E2 E98B000000           jmp      G_M48562_IG26
						;; bbWeight=1    PerfScore 20.50
G_M48562_IG23:        ; func=00, offs=0004EDH, size=0030H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB32 [0022], BB33 [0023], byref, isz
Block predicted offs = 000004ED, actual = 000004E7 -> size adj = 6
IN0101: 0004E7 488D4DA8             lea      rcx, bword ptr [rbp-58H]
                            ; byrRegs +[rcx]
IN0102: 0004EB E8F8F1FFFF           call     System.ConsoleKeyInfo:get_Key():int:this
                            ; byrRegs -[rcx]
                            ; gcr arg pop 0
IN0103: 0004F0 8985D0FEFFFF         mov      dword ptr [rbp-130H], eax
IN0104: 0004F6 83BDD0FEFFFF48       cmp      dword ptr [rbp-130H], 72
IN0105: 0004FD 0F94C0               sete     al
IN0106: 000500 0FB6C0               movzx    rax, al
IN0107: 000503 8945A0               mov      dword ptr [rbp-60H], eax
IN0108: 000506 837DA000             cmp      dword ptr [rbp-60H], 0
IN0109: 00050A 740B                 je       SHORT G_M48562_IG24
IN010a: 00050C 90                   nop      
IN010b: 00050D E81EF5FFFF           call     System.Diagnostics.Debugger:Break()
                            ; gcr arg pop 0
IN010c: 000512 90                   nop      
IN010d: 000513 90                   nop      
IN010e: 000514 90                   nop      
IN010f: 000515 EB5B                 jmp      SHORT G_M48562_IG26
						;; bbWeight=1    PerfScore 11.75
G_M48562_IG24:        ; func=00, offs=00051DH, size=0032H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB34 [0024], BB35 [0025], byref, isz
Block predicted offs = 0000051D, actual = 00000517 -> size adj = 6
IN0110: 000517 488D4DA8             lea      rcx, bword ptr [rbp-58H]
                            ; byrRegs +[rcx]
IN0111: 00051B E8C8F1FFFF           call     System.ConsoleKeyInfo:get_Key():int:this
                            ; byrRegs -[rcx]
                            ; gcr arg pop 0
IN0112: 000520 8985CCFEFFFF         mov      dword ptr [rbp-134H], eax
IN0113: 000526 83BDCCFEFFFF52       cmp      dword ptr [rbp-134H], 82
IN0114: 00052D 0F94C1               sete     cl
IN0115: 000530 0FB6C9               movzx    rcx, cl
IN0116: 000533 894D9C               mov      dword ptr [rbp-64H], ecx
IN0117: 000536 837D9C00             cmp      dword ptr [rbp-64H], 0
IN0118: 00053A 740D                 je       SHORT G_M48562_IG25
IN0119: 00053C 90                   nop      
IN011a: 00053D 488B4D10             mov      rcx, gword ptr [rbp+10H]
                            ; gcrRegs +[rcx]
IN011b: 000541 C6411000             mov      byte  ptr [rcx+16], 0
IN011c: 000545 90                   nop      
IN011d: 000546 90                   nop      
IN011e: 000547 EB29                 jmp      SHORT G_M48562_IG26
						;; bbWeight=1    PerfScore 12.50
G_M48562_IG25:        ; func=00, offs=00054FH, size=0029H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB36 [0026], BB37 [0027], byref, isz
Block predicted offs = 0000054F, actual = 00000549 -> size adj = 6
                            ; gcrRegs -[rcx]
IN011f: 000549 488D4DA8             lea      rcx, bword ptr [rbp-58H]
                            ; byrRegs +[rcx]
IN0120: 00054D E896F1FFFF           call     System.ConsoleKeyInfo:get_Key():int:this
                            ; byrRegs -[rcx]
                            ; gcr arg pop 0
IN0121: 000552 8985C8FEFFFF         mov      dword ptr [rbp-138H], eax
IN0122: 000558 83BDC8FEFFFF51       cmp      dword ptr [rbp-138H], 81
IN0123: 00055F 0F94C0               sete     al
IN0124: 000562 0FB6C0               movzx    rax, al
IN0125: 000565 894598               mov      dword ptr [rbp-68H], eax
IN0126: 000568 837D9800             cmp      dword ptr [rbp-68H], 0
IN0127: 00056C 7404                 je       SHORT G_M48562_IG26
IN0128: 00056E 90                   nop      
IN0129: 00056F 90                   nop      
IN012a: 000570 EB0E                 jmp      SHORT G_M48562_IG28
						;; bbWeight=1    PerfScore 10.25
G_M48562_IG26:        ; func=00, offs=000578H, size=0001H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB38 [0028], byref
Block predicted offs = 00000578, actual = 00000572 -> size adj = 6
IN012b: 000572 90                   nop      
						;; bbWeight=1    PerfScore 0.25
G_M48562_IG27:        ; func=00, offs=000579H, size=000DH, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB39 [0029], byref
Block predicted offs = 00000579, actual = 00000573 -> size adj = 6
IN012c: 000573 C7459401000000       mov      dword ptr [rbp-6CH], 1
IN012d: 00057A 90                   nop      
IN012e: 00057B E902FFFFFF           jmp      G_M48562_IG22
						;; bbWeight=1    PerfScore 3.25
G_M48562_IG28:        ; func=00, offs=000586H, size=0009H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB40 [0030], byref
Block predicted offs = 00000586, actual = 00000580 -> size adj = 6
IN012f: 000580 488B4510             mov      rax, gword ptr [rbp+10H]
                            ; gcrRegs +[rax]
IN0130: 000584 C6401000             mov      byte  ptr [rax+16], 0
IN0131: 000588 90                   nop      
						;; bbWeight=1    PerfScore 2.25
G_M48562_IG29:        ; func=00, offs=00058FH, size=0009H, epilog, nogc, extend
Block predicted offs = 0000058F, actual = 00000589 -> size adj = 6
IN0153: 000589 4881C470010000       add      rsp, 368
IN0154: 000590 5D                   pop      rbp
IN0155: 000591 C3                   ret      
						;; bbWeight=1    PerfScore 1.75
G_M48562_IG30:        ; func=01, offs=000598H, size=0015H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, byref, funclet prolog, nogc
Block predicted offs = 00000598, actual = 00000592 -> size adj = 6
                            ; gcrRegs -[rax]
IN0156: 000592 55                   push     rbp
IN0157: 000593 4883EC30             sub      rsp, 48
IN0158: 000597 488B6920             mov      rbp, qword ptr [rcx+32]
IN0159: 00059B 48896C2420           mov      qword ptr [rsp+20H], rbp
IN015a: 0005A0 488DAD70010000       lea      rbp, [rbp+170H]
						;; bbWeight=1    PerfScore 4.75
G_M48562_IG31:        ; func=01, offs=0005ADH, size=0014H, gcVars=0000000000000000 {}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB10 [0004], BB11 [0005], gcvars, byref, isz
Block predicted offs = 000005AD, actual = 000005A7 -> size adj = 6
IN0132: 0005A7 8B4DD8               mov      ecx, dword ptr [rbp-28H]
IN0133: 0005AA 0FB6C9               movzx    rcx, cl
IN0134: 0005AD 85C9                 test     ecx, ecx
IN0135: 0005AF 740A                 je       SHORT G_M48562_IG32
IN0136: 0005B1 488B4DE0             mov      rcx, gword ptr [rbp-20H]
                            ; gcrRegs +[rcx]
IN0137: 0005B5 E86624A45E           call     System.Threading.Monitor:Exit(System.Object)
                            ; gcrRegs -[rcx]
                            ; gcr arg pop 0
IN0138: 0005BA 90                   nop      
						;; bbWeight=1    PerfScore 4.75
G_M48562_IG32:        ; func=01, offs=0005C1H, size=0001H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB12 [0006], byref
Block predicted offs = 000005C1, actual = 000005BB -> size adj = 6
IN0139: 0005BB 90                   nop      
						;; bbWeight=1    PerfScore 0.25
G_M48562_IG33:        ; func=01, offs=0005C2H, size=0006H, funclet epilog, nogc, extend
Block predicted offs = 000005C2, actual = 000005BC -> size adj = 6
IN015b: 0005BC 4883C430             add      rsp, 48
IN015c: 0005C0 5D                   pop      rbp
IN015d: 0005C1 C3                   ret      
						;; bbWeight=1    PerfScore 1.75
G_M48562_IG34:        ; func=02, offs=0005C8H, size=0015H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, byref, funclet prolog, nogc
Block predicted offs = 000005C8, actual = 000005C2 -> size adj = 6
IN015e: 0005C2 55                   push     rbp
IN015f: 0005C3 4883EC30             sub      rsp, 48
IN0160: 0005C7 488B6920             mov      rbp, qword ptr [rcx+32]
IN0161: 0005CB 48896C2420           mov      qword ptr [rsp+20H], rbp
IN0162: 0005D0 488DAD70010000       lea      rbp, [rbp+170H]
						;; bbWeight=1    PerfScore 4.75
G_M48562_IG35:        ; func=02, offs=0005DDH, size=0014H, gcVars=0000000000000000 {}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB24 [0014], BB25 [0015], gcvars, byref, isz
Block predicted offs = 000005DD, actual = 000005D7 -> size adj = 6
IN013a: 0005D7 8B4DC0               mov      ecx, dword ptr [rbp-40H]
IN013b: 0005DA 0FB6C9               movzx    rcx, cl
IN013c: 0005DD 85C9                 test     ecx, ecx
IN013d: 0005DF 740A                 je       SHORT G_M48562_IG36
IN013e: 0005E1 488B4DC8             mov      rcx, gword ptr [rbp-38H]
                            ; gcrRegs +[rcx]
IN013f: 0005E5 E83624A45E           call     System.Threading.Monitor:Exit(System.Object)
                            ; gcrRegs -[rcx]
                            ; gcr arg pop 0
IN0140: 0005EA 90                   nop      
						;; bbWeight=1    PerfScore 4.75
G_M48562_IG36:        ; func=02, offs=0005F1H, size=0001H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB26 [0016], byref
Block predicted offs = 000005F1, actual = 000005EB -> size adj = 6
IN0141: 0005EB 90                   nop      
						;; bbWeight=1    PerfScore 0.25
G_M48562_IG37:        ; func=02, offs=0005F2H, size=0006H, funclet epilog, nogc, extend
Block predicted offs = 000005F2, actual = 000005EC -> size adj = 6
IN0163: 0005EC 4883C430             add      rsp, 48
IN0164: 0005F0 5D                   pop      rbp
IN0165: 0005F1 C3                   ret      
						;; bbWeight=1    PerfScore 1.75Allocated method code size = 1528 , actual size = 1522, unused size =    6

; Total bytes of code 1522, prolog size 93, PerfScore 468.13, instruction count 357, allocated bytes for code 1528 (MethodHash=6911424d) for method FalseLeakRepro.Program:Run(System.String[]):this
; ============================================================

*************** After end code gen, before unwindEmit()
G_M48562_IG01:        ; func=00, offs=000000H, size=005DH, bbWeight=1    PerfScore 12.83, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, byref, nogc, isz <-- Prolog IG

IN0142: 000000 push     rbp
IN0143: 000001 sub      rsp, 368
IN0144: 000008 lea      rbp, [rsp+170H]
IN0145: 000010 xor      eax, eax
IN0146: 000012 mov      qword ptr [rbp-118H], rax
IN0147: 000019 vxorps   xmm4, xmm4
IN0148: 00001D vmovdqa  xmmword ptr [rbp-110H], xmm4
IN0149: 000025 vmovdqa  xmmword ptr [rbp-100H], xmm4
IN014a: 00002D mov      rax, -240
IN014b: 000037 vmovdqa  xmmword ptr [rax+rbp], xmm4
IN014c: 00003C vmovdqa  xmmword ptr [rbp+rax+10H], xmm4
IN014d: 000042 vmovdqa  xmmword ptr [rbp+rax+20H], xmm4
IN014e: 000048 add      rax, 48
IN014f: 00004C jne      SHORT  -5 instr
IN0150: 00004E mov      qword ptr [V46 rbp-150H], rsp
IN0151: 000055 mov      gword ptr [V00 rbp+10H], rcx
IN0152: 000059 mov      gword ptr [V01 rbp+18H], rdx

G_M48562_IG02:        ; offs=00005DH, size=0009H, bbWeight=1    PerfScore 3.00, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB02 [0038], byref, isz

IN0001: 00005D cmp      dword ptr [(reloc 0x7ffdb6f1d838)], 0
IN0002: 000064 je       SHORT G_M48562_IG04

G_M48562_IG03:        ; offs=000066H, size=0005H, bbWeight=0.50 PerfScore 0.50, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB03 [0039], byref

IN0003: 000066 call     CORINFO_HELP_DBG_IS_JUST_MY_CODE

G_M48562_IG04:        ; offs=00006BH, size=013BH, bbWeight=1    PerfScore 52.75, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB05 [0001], byref

IN0004: 00006B nop      
IN0005: 00006C call     System.DateTime:get_Now():System.DateTime
IN0006: 000071 mov      qword ptr [V19 rbp-78H], rax
IN0007: 000075 mov      rcx, qword ptr [V19 rbp-78H]
IN0008: 000079 mov      qword ptr [V03 rbp-10H], rcx
IN0009: 00007D lea      rcx, bword ptr [V03 rbp-10H]
IN000a: 000081 call     System.DateTime:ToString():System.String:this
IN000b: 000086 mov      gword ptr [V20 rbp-80H], rax
IN000c: 00008A mov      rdx, 0x1EDBE2A31F0      ; "	 Created list"
IN000d: 000094 mov      rdx, gword ptr [rdx]
IN000e: 000097 mov      rcx, gword ptr [V20 rbp-80H]
IN000f: 00009B call     System.String:Concat(System.String,System.String):System.String
IN0010: 0000A0 mov      gword ptr [V21 rbp-88H], rax
IN0011: 0000A7 mov      rcx, gword ptr [V21 rbp-88H]
IN0012: 0000AE call     System.Console:WriteLine(System.String)
IN0013: 0000B3 nop      
IN0014: 0000B4 mov      rcx, 0x7FFDB7022B70
IN0015: 0000BE call     CORINFO_HELP_NEWSFAST
IN0016: 0000C3 mov      gword ptr [V22 rbp-90H], rax
IN0017: 0000CA mov      rcx, gword ptr [V22 rbp-90H]
IN0018: 0000D1 call     FalseLeakRepro.List:.ctor():this
IN0019: 0000D6 mov      rdx, gword ptr [V00 rbp+10H]
IN001a: 0000DA lea      rcx, bword ptr [rdx+8]
IN001b: 0000DE mov      rdx, gword ptr [V22 rbp-90H]
IN001c: 0000E5 call     CORINFO_HELP_ASSIGN_REF
IN001d: 0000EA mov      rcx, 0x7FFDB6C458B8
IN001e: 0000F4 call     CORINFO_HELP_NEWSFAST
IN001f: 0000F9 mov      gword ptr [V23 rbp-98H], rax
IN0020: 000100 mov      rcx, gword ptr [V00 rbp+10H]
IN0021: 000104 mov      rcx, gword ptr [rcx+8]
IN0022: 000108 mov      rcx, gword ptr [rcx+8]
IN0023: 00010C mov      gword ptr [V24 rbp-A0H], rcx
IN0024: 000113 mov      rcx, gword ptr [V23 rbp-98H]
IN0025: 00011A call     System.Object:.ctor():this
IN0026: 00011F mov      rdx, gword ptr [V24 rbp-A0H]
IN0027: 000126 lea      rcx, bword ptr [rdx+16]
IN0028: 00012A mov      rdx, gword ptr [V23 rbp-98H]
IN0029: 000131 call     CORINFO_HELP_ASSIGN_REF
IN002a: 000136 mov      rcx, 0x7FFDB7026348
IN002b: 000140 call     CORINFO_HELP_NEWSFAST
IN002c: 000145 mov      gword ptr [V25 rbp-A8H], rax
IN002d: 00014C mov      rcx, gword ptr [V25 rbp-A8H]
IN002e: 000153 mov      rdx, gword ptr [V00 rbp+10H]
IN002f: 000157 mov      r8, 0x7FFDB6C613F8
IN0030: 000161 call     System.MulticastDelegate:CtorClosed(System.Object,long):this
IN0031: 000166 mov      rcx, 0x7FFDB6DC4E80
IN0032: 000170 call     CORINFO_HELP_NEWFAST
IN0033: 000175 mov      gword ptr [V26 rbp-B0H], rax
IN0034: 00017C mov      rcx, gword ptr [V26 rbp-B0H]
IN0035: 000183 mov      rdx, gword ptr [V25 rbp-A8H]
IN0036: 00018A call     System.Threading.Thread:.ctor(System.Threading.ParameterizedThreadStart):this
IN0037: 00018F mov      rcx, gword ptr [V26 rbp-B0H]
IN0038: 000196 mov      gword ptr [V02 rbp-08H], rcx
IN0039: 00019A mov      rcx, gword ptr [V02 rbp-08H]
IN003a: 00019E cmp      dword ptr [rcx], ecx
IN003b: 0001A0 call     System.Threading.Thread:Start():this
IN003c: 0001A5 nop      

G_M48562_IG05:        ; offs=0001A6H, size=005FH, bbWeight=1    PerfScore 17.50, BB05 [0001], extend

IN003d: 0001A6 call     System.DateTime:get_Now():System.DateTime
IN003e: 0001AB mov      qword ptr [V27 rbp-B8H], rax
IN003f: 0001B2 mov      rcx, qword ptr [V27 rbp-B8H]
IN0040: 0001B9 mov      qword ptr [V03 rbp-10H], rcx
IN0041: 0001BD lea      rcx, bword ptr [V03 rbp-10H]
IN0042: 0001C1 call     System.DateTime:ToString():System.String:this
IN0043: 0001C6 mov      gword ptr [V28 rbp-C0H], rax
IN0044: 0001CD mov      rdx, 0x1EDBE2A31F8      ; "	 Consumer thread started, adding items..."
IN0045: 0001D7 mov      rdx, gword ptr [rdx]
IN0046: 0001DA mov      rcx, gword ptr [V28 rbp-C0H]
IN0047: 0001E1 call     System.String:Concat(System.String,System.String):System.String
IN0048: 0001E6 mov      gword ptr [V29 rbp-C8H], rax
IN0049: 0001ED mov      rcx, gword ptr [V29 rbp-C8H]
IN004a: 0001F4 call     System.Console:WriteLine(System.String)
IN004b: 0001F9 nop      
IN004c: 0001FA xor      edx, edx
IN004d: 0001FC mov      dword ptr [V04 rbp-14H], edx
IN004e: 0001FF nop      
IN004f: 000200 jmp      G_M48562_IG11

G_M48562_IG06:        ; offs=000205H, size=0012H, bbWeight=1    PerfScore 5.50, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB06 [0002], byref

IN0050: 000205 nop      
IN0051: 000206 mov      rdx, gword ptr [V00 rbp+10H]
IN0052: 00020A mov      rdx, gword ptr [rdx+8]
IN0053: 00020E mov      gword ptr [V05 rbp-20H], rdx
IN0054: 000212 xor      edx, edx
IN0055: 000214 mov      dword ptr [V06 rbp-28H], edx

G_M48562_IG07:        ; offs=000217H, size=00CCH, bbWeight=1    PerfScore 44.50, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB07 [0003], byref, isz

IN0056: 000217 lea      rdx, [V06 rbp-28H]
IN0057: 00021B mov      rcx, gword ptr [V05 rbp-20H]
IN0058: 00021F call     System.Threading.Monitor:Enter(System.Object,byref)
IN0059: 000224 nop      
IN005a: 000225 nop      
IN005b: 000226 mov      rcx, 0x7FFDB70260C8
IN005c: 000230 call     CORINFO_HELP_NEWSFAST
IN005d: 000235 mov      gword ptr [V30 rbp-D0H], rax
IN005e: 00023C mov      rcx, gword ptr [V00 rbp+10H]
IN005f: 000240 mov      rcx, gword ptr [rcx+8]
IN0060: 000244 mov      rcx, gword ptr [rcx+8]
IN0061: 000248 mov      gword ptr [V31 rbp-D8H], rcx
IN0062: 00024F mov      rcx, gword ptr [V30 rbp-D0H]
IN0063: 000256 call     FalseLeakRepro.Node:.ctor():this
IN0064: 00025B mov      rdx, gword ptr [V31 rbp-D8H]
IN0065: 000262 lea      rcx, bword ptr [rdx+8]
IN0066: 000266 mov      rdx, gword ptr [V30 rbp-D0H]
IN0067: 00026D call     CORINFO_HELP_ASSIGN_REF
IN0068: 000272 mov      rdx, gword ptr [V00 rbp+10H]
IN0069: 000276 mov      rdx, gword ptr [rdx+8]
IN006a: 00027A lea      rcx, bword ptr [rdx+8]
IN006b: 00027E mov      rdx, gword ptr [V00 rbp+10H]
IN006c: 000282 mov      rdx, gword ptr [rdx+8]
IN006d: 000286 mov      rdx, gword ptr [rdx+8]
IN006e: 00028A mov      rdx, gword ptr [rdx+8]
IN006f: 00028E call     CORINFO_HELP_ASSIGN_REF
IN0070: 000293 mov      rcx, 0x7FFDB6C458B8
IN0071: 00029D call     CORINFO_HELP_NEWSFAST
IN0072: 0002A2 mov      gword ptr [V32 rbp-E0H], rax
IN0073: 0002A9 mov      rcx, gword ptr [V00 rbp+10H]
IN0074: 0002AD mov      rcx, gword ptr [rcx+8]
IN0075: 0002B1 mov      rcx, gword ptr [rcx+8]
IN0076: 0002B5 mov      gword ptr [V33 rbp-E8H], rcx
IN0077: 0002BC mov      rcx, gword ptr [V32 rbp-E0H]
IN0078: 0002C3 call     System.Object:.ctor():this
IN0079: 0002C8 mov      rdx, gword ptr [V33 rbp-E8H]
IN007a: 0002CF lea      rcx, bword ptr [rdx+16]
IN007b: 0002D3 mov      rdx, gword ptr [V32 rbp-E0H]
IN007c: 0002DA call     CORINFO_HELP_ASSIGN_REF
IN007d: 0002DF nop      
IN007e: 0002E0 nop      
IN007f: 0002E1 jmp      SHORT G_M48562_IG08

G_M48562_IG08:        ; offs=0002E3H, size=0008H, bbWeight=1    PerfScore 1.25, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB08 [0031], byref

IN0080: 0002E3 mov      rcx, rsp
IN0081: 0002E6 call     G_M48562_IG30

G_M48562_IG09:        ; offs=0002EBH, size=0001H, bbWeight=1    PerfScore 0.25, BB08 [0031], nogc, extend

IN0082: 0002EB nop      

G_M48562_IG10:        ; offs=0002ECH, size=0009H, bbWeight=1    PerfScore 2.50, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB13 [0007], byref

IN0083: 0002EC nop      
IN0084: 0002ED mov      eax, dword ptr [V04 rbp-14H]
IN0085: 0002F0 inc      eax
IN0086: 0002F2 mov      dword ptr [V04 rbp-14H], eax

G_M48562_IG11:        ; offs=0002F5H, size=006EH, bbWeight=1    PerfScore 21.50, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB14 [0008], BB15 [0009], byref, isz

IN0087: 0002F5 cmp      dword ptr [V04 rbp-14H], 10
IN0088: 0002F9 setl     dl
IN0089: 0002FC movzx    rdx, dl
IN008a: 0002FF mov      dword ptr [V07 rbp-2CH], edx
IN008b: 000302 cmp      dword ptr [V07 rbp-2CH], 0
IN008c: 000306 jne      G_M48562_IG06
IN008d: 00030C call     System.DateTime:get_Now():System.DateTime
IN008e: 000311 mov      qword ptr [V34 rbp-F0H], rax
IN008f: 000318 mov      rcx, qword ptr [V34 rbp-F0H]
IN0090: 00031F mov      qword ptr [V03 rbp-10H], rcx
IN0091: 000323 lea      rcx, bword ptr [V03 rbp-10H]
IN0092: 000327 call     System.DateTime:ToString():System.String:this
IN0093: 00032C mov      gword ptr [V35 rbp-F8H], rax
IN0094: 000333 mov      rdx, 0x1EDBE2A3200      ; "	 Waiting for list processing to complete..."
IN0095: 00033D mov      rdx, gword ptr [rdx]
IN0096: 000340 mov      rcx, gword ptr [V35 rbp-F8H]
IN0097: 000347 call     System.String:Concat(System.String,System.String):System.String
IN0098: 00034C mov      gword ptr [V36 rbp-100H], rax
IN0099: 000353 mov      rcx, gword ptr [V36 rbp-100H]
IN009a: 00035A call     System.Console:WriteLine(System.String)
IN009b: 00035F nop      
IN009c: 000360 nop      
IN009d: 000361 jmp      SHORT G_M48562_IG20

G_M48562_IG12:        ; offs=000363H, size=0012H, bbWeight=1    PerfScore 5.50, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB16 [0010], byref

IN009e: 000363 nop      
IN009f: 000364 mov      rdx, gword ptr [V00 rbp+10H]
IN00a0: 000368 mov      rdx, gword ptr [rdx+8]
IN00a1: 00036C mov      gword ptr [V08 rbp-38H], rdx
IN00a2: 000370 xor      edx, edx
IN00a3: 000372 mov      dword ptr [V09 rbp-40H], edx

G_M48562_IG13:        ; offs=000375H, size=003AH, bbWeight=1    PerfScore 19.75, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB17 [0011], BB18 [0012], byref, isz

IN00a4: 000375 lea      rdx, [V09 rbp-40H]
IN00a5: 000379 mov      rcx, gword ptr [V08 rbp-38H]
IN00a6: 00037D call     System.Threading.Monitor:Enter(System.Object,byref)
IN00a7: 000382 nop      
IN00a8: 000383 nop      
IN00a9: 000384 mov      rcx, gword ptr [V00 rbp+10H]
IN00aa: 000388 mov      rcx, gword ptr [rcx+8]
IN00ab: 00038C mov      rcx, gword ptr [rcx+8]
IN00ac: 000390 mov      rax, gword ptr [V00 rbp+10H]
IN00ad: 000394 mov      rax, gword ptr [rax+8]
IN00ae: 000398 cmp      rcx, gword ptr [rax+16]
IN00af: 00039C sete     cl
IN00b0: 00039F movzx    rcx, cl
IN00b1: 0003A2 mov      dword ptr [V10 rbp-44H], ecx
IN00b2: 0003A5 cmp      dword ptr [V10 rbp-44H], 0
IN00b3: 0003A9 je       SHORT G_M48562_IG14
IN00b4: 0003AB nop      
IN00b5: 0003AC nop      
IN00b6: 0003AD jmp      SHORT G_M48562_IG15

G_M48562_IG14:        ; offs=0003AFH, size=0004H, bbWeight=1    PerfScore 2.50, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB19 [0013], byref, isz

IN00b7: 0003AF nop      
IN00b8: 0003B0 nop      
IN00b9: 0003B1 jmp      SHORT G_M48562_IG17

G_M48562_IG15:        ; offs=0003B3H, size=0008H, bbWeight=1    PerfScore 1.25, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB20 [0035], byref

IN00ba: 0003B3 mov      rcx, rsp
IN00bb: 0003B6 call     G_M48562_IG34

G_M48562_IG16:        ; offs=0003BBH, size=0002H, bbWeight=1    PerfScore 2.00, BB20 [0035], nogc, isz, extend

IN00bc: 0003BB jmp      SHORT G_M48562_IG21

G_M48562_IG17:        ; offs=0003BDH, size=0008H, bbWeight=1    PerfScore 1.25, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB22 [0033], byref

IN00bd: 0003BD mov      rcx, rsp
IN00be: 0003C0 call     G_M48562_IG34

G_M48562_IG18:        ; offs=0003C5H, size=0001H, bbWeight=1    PerfScore 0.25, BB22 [0033], nogc, extend

IN00bf: 0003C5 nop      

G_M48562_IG19:        ; offs=0003C6H, size=000CH, bbWeight=1    PerfScore 1.75, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB27 [0017], byref

IN00c0: 0003C6 mov      ecx, 100
IN00c1: 0003CB call     System.Threading.Thread:Sleep(int)
IN00c2: 0003D0 nop      
IN00c3: 0003D1 nop      

G_M48562_IG20:        ; offs=0003D2H, size=000AH, bbWeight=1    PerfScore 3.25, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB28 [0018], byref, isz

IN00c4: 0003D2 mov      dword ptr [V11 rbp-48H], 1
IN00c5: 0003D9 nop      
IN00c6: 0003DA jmp      SHORT G_M48562_IG12

G_M48562_IG21:        ; offs=0003DCH, size=00A6H, bbWeight=1    PerfScore 30.25, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB29 [0019], byref

IN00c7: 0003DC call     System.DateTime:get_Now():System.DateTime
IN00c8: 0003E1 mov      qword ptr [V37 rbp-108H], rax
IN00c9: 0003E8 mov      rcx, qword ptr [V37 rbp-108H]
IN00ca: 0003EF mov      qword ptr [V03 rbp-10H], rcx
IN00cb: 0003F3 lea      rcx, bword ptr [V03 rbp-10H]
IN00cc: 0003F7 call     System.DateTime:ToString():System.String:this
IN00cd: 0003FC mov      gword ptr [V38 rbp-110H], rax
IN00ce: 000403 mov      rdx, 0x1EDBE2A3208      ; "	 Done.  Profiler is active, available options:"
IN00cf: 00040D mov      rdx, gword ptr [rdx]
IN00d0: 000410 mov      rcx, gword ptr [V38 rbp-110H]
IN00d1: 000417 call     System.String:Concat(System.String,System.String):System.String
IN00d2: 00041C mov      gword ptr [V39 rbp-118H], rax
IN00d3: 000423 mov      rcx, gword ptr [V39 rbp-118H]
IN00d4: 00042A call     System.Console:WriteLine(System.String)
IN00d5: 00042F nop      
IN00d6: 000430 mov      rcx, 0x1EDBE2A3210      ; "   Q = quit"
IN00d7: 00043A mov      rcx, gword ptr [rcx]
IN00d8: 00043D call     System.Console:WriteLine(System.String)
IN00d9: 000442 nop      
IN00da: 000443 mov      rcx, 0x1EDBE2A3218      ; "   H = heap snapshot"
IN00db: 00044D mov      rcx, gword ptr [rcx]
IN00dc: 000450 call     System.Console:WriteLine(System.String)
IN00dd: 000455 nop      
IN00de: 000456 mov      rcx, 0x1EDBE2A3220      ; "   G = GC (max gen)"
IN00df: 000460 mov      rcx, gword ptr [rcx]
IN00e0: 000463 call     System.Console:WriteLine(System.String)
IN00e1: 000468 nop      
IN00e2: 000469 mov      rcx, 0x1EDBE2A3228      ; "   R = clear the running flag to stop the consumer thread"
IN00e3: 000473 mov      rcx, gword ptr [rcx]
IN00e4: 000476 call     System.Console:WriteLine(System.String)
IN00e5: 00047B nop      
IN00e6: 00047C nop      
IN00e7: 00047D jmp      G_M48562_IG27

G_M48562_IG22:        ; offs=000482H, size=0065H, bbWeight=1    PerfScore 20.50, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB30 [0020], BB31 [0021], byref, isz

IN00e8: 000482 nop      
IN00e9: 000483 lea      rcx, [V40 rbp-128H]
IN00ea: 00048A call     System.Console:ReadKey():System.ConsoleKeyInfo
IN00eb: 00048F mov      rcx, qword ptr [V40 rbp-128H]
IN00ec: 000496 mov      qword ptr [V12 rbp-58H], rcx
IN00ed: 00049A mov      ecx, dword ptr [V40+0x8 rbp-120H]
IN00ee: 0004A0 mov      dword ptr [V12+0x8 rbp-50H], ecx
IN00ef: 0004A3 lea      rcx, bword ptr [V12 rbp-58H]
IN00f0: 0004A7 call     System.ConsoleKeyInfo:get_Key():int:this
IN00f1: 0004AC mov      dword ptr [V41 rbp-12CH], eax
IN00f2: 0004B2 cmp      dword ptr [V41 rbp-12CH], 71
IN00f3: 0004B9 sete     al
IN00f4: 0004BC movzx    rax, al
IN00f5: 0004BF mov      dword ptr [V13 rbp-5CH], eax
IN00f6: 0004C2 cmp      dword ptr [V13 rbp-5CH], 0
IN00f7: 0004C6 je       SHORT G_M48562_IG23
IN00f8: 0004C8 nop      
IN00f9: 0004C9 call     System.GC:get_MaxGeneration():int
IN00fa: 0004CE mov      dword ptr [V45 rbp-13CH], eax
IN00fb: 0004D4 mov      ecx, dword ptr [V45 rbp-13CH]
IN00fc: 0004DA call     System.GC:Collect(int)
IN00fd: 0004DF nop      
IN00fe: 0004E0 nop      
IN00ff: 0004E1 nop      
IN0100: 0004E2 jmp      G_M48562_IG26

G_M48562_IG23:        ; offs=0004E7H, size=0030H, bbWeight=1    PerfScore 11.75, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB32 [0022], BB33 [0023], byref, isz

IN0101: 0004E7 lea      rcx, bword ptr [V12 rbp-58H]
IN0102: 0004EB call     System.ConsoleKeyInfo:get_Key():int:this
IN0103: 0004F0 mov      dword ptr [V42 rbp-130H], eax
IN0104: 0004F6 cmp      dword ptr [V42 rbp-130H], 72
IN0105: 0004FD sete     al
IN0106: 000500 movzx    rax, al
IN0107: 000503 mov      dword ptr [V14 rbp-60H], eax
IN0108: 000506 cmp      dword ptr [V14 rbp-60H], 0
IN0109: 00050A je       SHORT G_M48562_IG24
IN010a: 00050C nop      
IN010b: 00050D call     System.Diagnostics.Debugger:Break()
IN010c: 000512 nop      
IN010d: 000513 nop      
IN010e: 000514 nop      
IN010f: 000515 jmp      SHORT G_M48562_IG26

G_M48562_IG24:        ; offs=000517H, size=0032H, bbWeight=1    PerfScore 12.50, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB34 [0024], BB35 [0025], byref, isz

IN0110: 000517 lea      rcx, bword ptr [V12 rbp-58H]
IN0111: 00051B call     System.ConsoleKeyInfo:get_Key():int:this
IN0112: 000520 mov      dword ptr [V43 rbp-134H], eax
IN0113: 000526 cmp      dword ptr [V43 rbp-134H], 82
IN0114: 00052D sete     cl
IN0115: 000530 movzx    rcx, cl
IN0116: 000533 mov      dword ptr [V15 rbp-64H], ecx
IN0117: 000536 cmp      dword ptr [V15 rbp-64H], 0
IN0118: 00053A je       SHORT G_M48562_IG25
IN0119: 00053C nop      
IN011a: 00053D mov      rcx, gword ptr [V00 rbp+10H]
IN011b: 000541 mov      byte  ptr [rcx+16], 0
IN011c: 000545 nop      
IN011d: 000546 nop      
IN011e: 000547 jmp      SHORT G_M48562_IG26

G_M48562_IG25:        ; offs=000549H, size=0029H, bbWeight=1    PerfScore 10.25, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB36 [0026], BB37 [0027], byref, isz

IN011f: 000549 lea      rcx, bword ptr [V12 rbp-58H]
IN0120: 00054D call     System.ConsoleKeyInfo:get_Key():int:this
IN0121: 000552 mov      dword ptr [V44 rbp-138H], eax
IN0122: 000558 cmp      dword ptr [V44 rbp-138H], 81
IN0123: 00055F sete     al
IN0124: 000562 movzx    rax, al
IN0125: 000565 mov      dword ptr [V16 rbp-68H], eax
IN0126: 000568 cmp      dword ptr [V16 rbp-68H], 0
IN0127: 00056C je       SHORT G_M48562_IG26
IN0128: 00056E nop      
IN0129: 00056F nop      
IN012a: 000570 jmp      SHORT G_M48562_IG28

G_M48562_IG26:        ; offs=000572H, size=0001H, bbWeight=1    PerfScore 0.25, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB38 [0028], byref

IN012b: 000572 nop      

G_M48562_IG27:        ; offs=000573H, size=000DH, bbWeight=1    PerfScore 3.25, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB39 [0029], byref

IN012c: 000573 mov      dword ptr [V17 rbp-6CH], 1
IN012d: 00057A nop      
IN012e: 00057B jmp      G_M48562_IG22

G_M48562_IG28:        ; offs=000580H, size=0009H, bbWeight=1    PerfScore 2.25, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB40 [0030], byref

IN012f: 000580 mov      rax, gword ptr [V00 rbp+10H]
IN0130: 000584 mov      byte  ptr [rax+16], 0
IN0131: 000588 nop      

G_M48562_IG29:        ; offs=000589H, size=0009H, bbWeight=1    PerfScore 1.75, epilog, nogc, extend

IN0153: 000589 add      rsp, 368
IN0154: 000590 pop      rbp
IN0155: 000591 ret      

G_M48562_IG30:        ; func=01, offs=000592H, size=0015H, bbWeight=1    PerfScore 4.75, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, byref, funclet prolog, nogc

IN0156: 000592 push     rbp
IN0157: 000593 sub      rsp, 48
IN0158: 000597 mov      rbp, qword ptr [rcx+32]
IN0159: 00059B mov      qword ptr [rsp+20H], rbp
IN015a: 0005A0 lea      rbp, [rbp+170H]

G_M48562_IG31:        ; offs=0005A7H, size=0014H, bbWeight=1    PerfScore 4.75, gcVars=0000000000000000 {}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB10 [0004], BB11 [0005], gcvars, byref, isz

IN0132: 0005A7 mov      ecx, dword ptr [V06 rbp-28H]
IN0133: 0005AA movzx    rcx, cl
IN0134: 0005AD test     ecx, ecx
IN0135: 0005AF je       SHORT G_M48562_IG32
IN0136: 0005B1 mov      rcx, gword ptr [V05 rbp-20H]
IN0137: 0005B5 call     System.Threading.Monitor:Exit(System.Object)
IN0138: 0005BA nop      

G_M48562_IG32:        ; offs=0005BBH, size=0001H, bbWeight=1    PerfScore 0.25, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB12 [0006], byref

IN0139: 0005BB nop      

G_M48562_IG33:        ; offs=0005BCH, size=0006H, bbWeight=1    PerfScore 1.75, funclet epilog, nogc, extend

IN015b: 0005BC add      rsp, 48
IN015c: 0005C0 pop      rbp
IN015d: 0005C1 ret      

G_M48562_IG34:        ; func=02, offs=0005C2H, size=0015H, bbWeight=1    PerfScore 4.75, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, byref, funclet prolog, nogc

IN015e: 0005C2 push     rbp
IN015f: 0005C3 sub      rsp, 48
IN0160: 0005C7 mov      rbp, qword ptr [rcx+32]
IN0161: 0005CB mov      qword ptr [rsp+20H], rbp
IN0162: 0005D0 lea      rbp, [rbp+170H]

G_M48562_IG35:        ; offs=0005D7H, size=0014H, bbWeight=1    PerfScore 4.75, gcVars=0000000000000000 {}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB24 [0014], BB25 [0015], gcvars, byref, isz

IN013a: 0005D7 mov      ecx, dword ptr [V09 rbp-40H]
IN013b: 0005DA movzx    rcx, cl
IN013c: 0005DD test     ecx, ecx
IN013d: 0005DF je       SHORT G_M48562_IG36
IN013e: 0005E1 mov      rcx, gword ptr [V08 rbp-38H]
IN013f: 0005E5 call     System.Threading.Monitor:Exit(System.Object)
IN0140: 0005EA nop      

G_M48562_IG36:        ; offs=0005EBH, size=0001H, bbWeight=1    PerfScore 0.25, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB26 [0016], byref

IN0141: 0005EB nop      

G_M48562_IG37:        ; offs=0005ECH, size=0006H, bbWeight=1    PerfScore 1.75, funclet epilog, nogc, extend

IN0163: 0005EC add      rsp, 48
IN0164: 0005F0 pop      rbp
IN0165: 0005F1 ret      


*************** Finishing PHASE Emit code

*************** Starting PHASE Emit GC+EH tables
Unwind Info:
  >> Start offset   : 0x000000 (not in unwind data)
  >>   End offset   : 0x000592 (not in unwind data)
  Version           : 1
  Flags             : 0x00
  SizeOfProlog      : 0x08
  CountOfUnwindCodes: 3
  FrameRegister     : none (0)
  FrameOffset       : N/A (no FrameRegister) (Value=0)
  UnwindCodes       :
    CodeOffset: 0x08 UnwindOp: UWOP_ALLOC_LARGE (1)     OpInfo: 0 - Scaled small  
      Size: 46 * 8 = 368 = 0x00170
    CodeOffset: 0x01 UnwindOp: UWOP_PUSH_NONVOL (0)     OpInfo: rbp (5)
allocUnwindInfo(pHotCode=0x00007FFDB6C6F930, pColdCode=0x0000000000000000, startOffset=0x0, endOffset=0x592, unwindSize=0xa, pUnwindBlock=0x000001EDC6774186, funKind=0 (main function))
Unwind Info:
  >> Start offset   : 0x000592 (not in unwind data)
  >>   End offset   : 0x0005c2 (not in unwind data)
  Version           : 1
  Flags             : 0x00
  SizeOfProlog      : 0x05
  CountOfUnwindCodes: 2
  FrameRegister     : none (0)
  FrameOffset       : N/A (no FrameRegister) (Value=0)
  UnwindCodes       :
    CodeOffset: 0x05 UnwindOp: UWOP_ALLOC_SMALL (2)     OpInfo: 5 * 8 + 8 = 48 = 0x30
    CodeOffset: 0x01 UnwindOp: UWOP_PUSH_NONVOL (0)     OpInfo: rbp (5)
allocUnwindInfo(pHotCode=0x00007FFDB6C6F930, pColdCode=0x0000000000000000, startOffset=0x592, endOffset=0x5c2, unwindSize=0x8, pUnwindBlock=0x000001EDC67743C0, funKind=1 (handler))
Unwind Info:
  >> Start offset   : 0x0005c2 (not in unwind data)
  >>   End offset   : 0x0005f2 (not in unwind data)
  Version           : 1
  Flags             : 0x00
  SizeOfProlog      : 0x05
  CountOfUnwindCodes: 2
  FrameRegister     : none (0)
  FrameOffset       : N/A (no FrameRegister) (Value=0)
  UnwindCodes       :
    CodeOffset: 0x05 UnwindOp: UWOP_ALLOC_SMALL (2)     OpInfo: 5 * 8 + 8 = 48 = 0x30
    CodeOffset: 0x01 UnwindOp: UWOP_PUSH_NONVOL (0)     OpInfo: rbp (5)
allocUnwindInfo(pHotCode=0x00007FFDB6C6F930, pColdCode=0x0000000000000000, startOffset=0x5c2, endOffset=0x5f2, unwindSize=0x8, pUnwindBlock=0x000001EDC67745F8, funKind=1 (handler))
*************** In genIPmappingGen()
IP mapping count : 174
IL offs PROLOG : 0x00000000 ( STACK_EMPTY )
IL offs NO_MAP : 0x0000005D ( STACK_EMPTY )
IL offs 0x0000 : 0x0000006B ( STACK_EMPTY )
IL offs 0x0001 : 0x0000006C ( STACK_EMPTY )
IL offs 0x0001 : 0x0000006C ( STACK_EMPTY CALL_INSTRUCTION )
IL offs 0x0006 : 0x00000075
IL offs 0x0007 : 0x0000007D ( STACK_EMPTY )
IL offs 0x0009 : 0x00000081 ( CALL_INSTRUCTION )
IL offs 0x000E : 0x0000008A
IL offs 0x0013 : 0x0000009B ( CALL_INSTRUCTION )
IL offs 0x0018 : 0x000000A7
IL offs 0x0018 : 0x000000AE ( CALL_INSTRUCTION )
IL offs 0x001D : 0x000000B3 ( STACK_EMPTY )
IL offs 0x001E : 0x000000B4 ( STACK_EMPTY )
IL offs 0x001F : 0x000000D1 ( CALL_INSTRUCTION )
IL offs 0x0024 : 0x000000D6
IL offs 0x0029 : 0x000000EA ( STACK_EMPTY )
IL offs 0x0034 : 0x0000011A ( CALL_INSTRUCTION )
IL offs 0x0039 : 0x0000011F
IL offs 0x003E : 0x00000136 ( STACK_EMPTY )
IL offs 0x0045 : 0x00000161 ( CALL_INSTRUCTION )
IL offs 0x004A : 0x00000166
IL offs 0x004A : 0x0000018A ( CALL_INSTRUCTION )
IL offs 0x004F : 0x0000018F
IL offs 0x0050 : 0x0000019A ( STACK_EMPTY )
IL offs 0x0051 : 0x000001A0 ( CALL_INSTRUCTION )
IL offs 0x0056 : 0x000001A5 ( STACK_EMPTY )
IL offs 0x0057 : 0x000001A6 ( STACK_EMPTY )
IL offs 0x0057 : 0x000001A6 ( STACK_EMPTY CALL_INSTRUCTION )
IL offs 0x005C : 0x000001B2
IL offs 0x005D : 0x000001BD ( STACK_EMPTY )
IL offs 0x005F : 0x000001C1 ( CALL_INSTRUCTION )
IL offs 0x0064 : 0x000001CD
IL offs 0x0069 : 0x000001E1 ( CALL_INSTRUCTION )
IL offs 0x006E : 0x000001ED
IL offs 0x006E : 0x000001F4 ( CALL_INSTRUCTION )
IL offs 0x0073 : 0x000001F9 ( STACK_EMPTY )
IL offs 0x0074 : 0x000001FA ( STACK_EMPTY )
IL offs 0x0076 : 0x000001FF ( STACK_EMPTY )
IL offs 0x0078 : 0x00000205 ( STACK_EMPTY )
IL offs 0x0079 : 0x00000206 ( STACK_EMPTY )
IL offs 0x0080 : 0x00000212 ( STACK_EMPTY )
IL offs 0x0083 : 0x00000217 ( STACK_EMPTY )
IL offs 0x0086 : 0x0000021F ( CALL_INSTRUCTION )
IL offs 0x008B : 0x00000224 ( STACK_EMPTY )
IL offs 0x008C : 0x00000225 ( STACK_EMPTY )
IL offs 0x008D : 0x00000226 ( STACK_EMPTY )
IL offs 0x0098 : 0x00000256 ( CALL_INSTRUCTION )
IL offs 0x009D : 0x0000025B
IL offs 0x00A2 : 0x00000272 ( STACK_EMPTY )
IL offs 0x00BD : 0x00000293 ( STACK_EMPTY )
IL offs 0x00C8 : 0x000002C3 ( CALL_INSTRUCTION )
IL offs 0x00CD : 0x000002C8
IL offs 0x00D2 : 0x000002DF ( STACK_EMPTY )
IL offs 0x00D3 : 0x000002E0 ( STACK_EMPTY )
IL offs NO_MAP : 0x000002E3 ( STACK_EMPTY )
IL offs 0x00E1 : 0x000002EC ( STACK_EMPTY )
IL offs 0x00E2 : 0x000002ED ( STACK_EMPTY )
IL offs 0x00E6 : 0x000002F5 ( STACK_EMPTY )
IL offs 0x00ED : 0x00000302 ( STACK_EMPTY )
IL offs 0x00F1 : 0x0000030C ( STACK_EMPTY )
IL offs 0x00F1 : 0x0000030C ( STACK_EMPTY CALL_INSTRUCTION )
IL offs 0x00F6 : 0x00000318
IL offs 0x00F7 : 0x00000323 ( STACK_EMPTY )
IL offs 0x00F9 : 0x00000327 ( CALL_INSTRUCTION )
IL offs 0x00FE : 0x00000333
IL offs 0x0103 : 0x00000347 ( CALL_INSTRUCTION )
IL offs 0x0108 : 0x00000353
IL offs 0x0108 : 0x0000035A ( CALL_INSTRUCTION )
IL offs 0x010D : 0x0000035F ( STACK_EMPTY )
IL offs 0x010E : 0x00000360 ( STACK_EMPTY )
IL offs 0x0110 : 0x00000363 ( STACK_EMPTY )
IL offs 0x0111 : 0x00000364 ( STACK_EMPTY )
IL offs 0x0119 : 0x00000370 ( STACK_EMPTY )
IL offs 0x011C : 0x00000375 ( STACK_EMPTY )
IL offs 0x0120 : 0x0000037D ( CALL_INSTRUCTION )
IL offs 0x0125 : 0x00000382 ( STACK_EMPTY )
IL offs 0x0126 : 0x00000383 ( STACK_EMPTY )
IL offs 0x0127 : 0x00000384 ( STACK_EMPTY )
IL offs 0x0141 : 0x000003A5 ( STACK_EMPTY )
IL offs 0x0145 : 0x000003AB ( STACK_EMPTY )
IL offs 0x0146 : 0x000003AC ( STACK_EMPTY )
IL offs 0x0148 : 0x000003AF ( STACK_EMPTY )
IL offs 0x0149 : 0x000003B0 ( STACK_EMPTY )
IL offs NO_MAP : 0x000003B3 ( STACK_EMPTY )
IL offs 0x0158 : 0x000003C6 ( STACK_EMPTY )
IL offs 0x015A : 0x000003CB ( CALL_INSTRUCTION )
IL offs 0x015F : 0x000003D0 ( STACK_EMPTY )
IL offs 0x0160 : 0x000003D1 ( STACK_EMPTY )
IL offs 0x0161 : 0x000003D2 ( STACK_EMPTY )
IL offs 0x0164 : 0x000003D9 ( STACK_EMPTY )
IL offs 0x0166 : 0x000003DC ( STACK_EMPTY )
IL offs 0x0166 : 0x000003DC ( STACK_EMPTY CALL_INSTRUCTION )
IL offs 0x016B : 0x000003E8
IL offs 0x016C : 0x000003F3 ( STACK_EMPTY )
IL offs 0x016E : 0x000003F7 ( CALL_INSTRUCTION )
IL offs 0x0173 : 0x00000403
IL offs 0x0178 : 0x00000417 ( CALL_INSTRUCTION )
IL offs 0x017D : 0x00000423
IL offs 0x017D : 0x0000042A ( CALL_INSTRUCTION )
IL offs 0x0182 : 0x0000042F ( STACK_EMPTY )
IL offs 0x0183 : 0x00000430 ( STACK_EMPTY )
IL offs 0x0188 : 0x0000043D ( CALL_INSTRUCTION )
IL offs 0x018D : 0x00000442 ( STACK_EMPTY )
IL offs 0x018E : 0x00000443 ( STACK_EMPTY )
IL offs 0x0193 : 0x00000450 ( CALL_INSTRUCTION )
IL offs 0x0198 : 0x00000455 ( STACK_EMPTY )
IL offs 0x0199 : 0x00000456 ( STACK_EMPTY )
IL offs 0x019E : 0x00000463 ( CALL_INSTRUCTION )
IL offs 0x01A3 : 0x00000468 ( STACK_EMPTY )
IL offs 0x01A4 : 0x00000469 ( STACK_EMPTY )
IL offs 0x01A9 : 0x00000476 ( CALL_INSTRUCTION )
IL offs 0x01AE : 0x0000047B ( STACK_EMPTY )
IL offs 0x01AF : 0x0000047C ( STACK_EMPTY )
IL offs 0x01B1 : 0x00000482 ( STACK_EMPTY )
IL offs 0x01B2 : 0x00000483 ( STACK_EMPTY )
IL offs 0x01B2 : 0x0000048A ( STACK_EMPTY CALL_INSTRUCTION )
IL offs 0x01B7 : 0x0000048F
IL offs 0x01B9 : 0x000004A3 ( STACK_EMPTY )
IL offs 0x01BB : 0x000004A7 ( CALL_INSTRUCTION )
IL offs 0x01C0 : 0x000004B2
IL offs 0x01C6 : 0x000004C2 ( STACK_EMPTY )
IL offs 0x01CA : 0x000004C8 ( STACK_EMPTY )
IL offs 0x01CB : 0x000004C9 ( STACK_EMPTY )
IL offs 0x01CB : 0x000004C9 ( STACK_EMPTY CALL_INSTRUCTION )
IL offs 0x01D0 : 0x000004D4
IL offs 0x01D0 : 0x000004DA ( CALL_INSTRUCTION )
IL offs 0x01D5 : 0x000004DF ( STACK_EMPTY )
IL offs 0x01D6 : 0x000004E0 ( STACK_EMPTY )
IL offs 0x01D7 : 0x000004E1 ( STACK_EMPTY )
IL offs 0x01D9 : 0x000004E7 ( STACK_EMPTY )
IL offs 0x01DB : 0x000004EB ( CALL_INSTRUCTION )
IL offs 0x01E0 : 0x000004F6
IL offs 0x01E6 : 0x00000506 ( STACK_EMPTY )
IL offs 0x01EA : 0x0000050C ( STACK_EMPTY )
IL offs 0x01EB : 0x0000050D ( STACK_EMPTY )
IL offs 0x01EB : 0x0000050D ( STACK_EMPTY CALL_INSTRUCTION )
IL offs 0x01F0 : 0x00000512 ( STACK_EMPTY )
IL offs 0x01F1 : 0x00000513 ( STACK_EMPTY )
IL offs 0x01F2 : 0x00000514 ( STACK_EMPTY )
IL offs 0x01F4 : 0x00000517 ( STACK_EMPTY )
IL offs 0x01F6 : 0x0000051B ( CALL_INSTRUCTION )
IL offs 0x01FB : 0x00000526
IL offs 0x0201 : 0x00000536 ( STACK_EMPTY )
IL offs 0x0205 : 0x0000053C ( STACK_EMPTY )
IL offs 0x0206 : 0x0000053D ( STACK_EMPTY )
IL offs 0x020D : 0x00000545 ( STACK_EMPTY )
IL offs 0x020E : 0x00000546 ( STACK_EMPTY )
IL offs 0x0210 : 0x00000549 ( STACK_EMPTY )
IL offs 0x0212 : 0x0000054D ( CALL_INSTRUCTION )
IL offs 0x0217 : 0x00000558
IL offs 0x021D : 0x00000568 ( STACK_EMPTY )
IL offs 0x0221 : 0x0000056E ( STACK_EMPTY )
IL offs 0x0222 : 0x0000056F ( STACK_EMPTY )
IL offs 0x0224 : 0x00000572 ( STACK_EMPTY )
IL offs 0x0225 : 0x00000573 ( STACK_EMPTY )
IL offs 0x0228 : 0x0000057A ( STACK_EMPTY )
IL offs 0x022A : 0x00000580 ( STACK_EMPTY )
IL offs 0x0231 : 0x00000588 ( STACK_EMPTY )
IL offs EPILOG : 0x00000589 ( STACK_EMPTY )
IL offs PROLOG : 0x00000592 ( STACK_EMPTY )
IL offs 0x00D5 : 0x000005A7 ( STACK_EMPTY )
IL offs 0x00D9 : 0x000005B1 ( STACK_EMPTY )
IL offs 0x00DA : 0x000005B5 ( CALL_INSTRUCTION )
IL offs 0x00DF : 0x000005BA ( STACK_EMPTY )
IL offs 0x00E0 : 0x000005BB ( STACK_EMPTY )
IL offs EPILOG : 0x000005BC ( STACK_EMPTY )
IL offs PROLOG : 0x000005C2 ( STACK_EMPTY )
IL offs 0x014B : 0x000005D7 ( STACK_EMPTY )
IL offs 0x014F : 0x000005E1 ( STACK_EMPTY )
IL offs 0x0151 : 0x000005E5 ( CALL_INSTRUCTION )
IL offs 0x0156 : 0x000005EA ( STACK_EMPTY )
IL offs 0x0157 : 0x000005EB ( STACK_EMPTY )
IL offs EPILOG : 0x000005EC ( STACK_EMPTY )

*************** In genSetScopeInfo()
VarLocInfo count is 20
; Variable debug info: 20 live ranges, 18 vars for method FalseLeakRepro.Program:Run(System.String[]):this
  0(   UNKNOWN) : From 00000000h to 0000005Dh, in rcx
  0(   UNKNOWN) : From 0000006Bh to 000005ECh, in rbp[16] (1 slot)
  1(   UNKNOWN) : From 00000000h to 0000005Dh, in rdx
  1(   UNKNOWN) : From 0000006Bh to 000005ECh, in rbp[24] (1 slot)
  2(   UNKNOWN) : From 0000006Bh to 000005ECh, in rbp[-8] (1 slot)
  3(   UNKNOWN) : From 0000006Bh to 000005ECh, in rbp[-16] (1 slot)
  4(   UNKNOWN) : From 0000006Bh to 000005ECh, in rbp[-20] (1 slot)
  5(   UNKNOWN) : From 0000006Bh to 000005ECh, in rbp[-32] (1 slot)
  6(   UNKNOWN) : From 0000006Bh to 000005ECh, in rbp[-40] (1 slot)
  7(   UNKNOWN) : From 0000006Bh to 000005ECh, in rbp[-44] (1 slot)
  8(   UNKNOWN) : From 0000006Bh to 000005ECh, in rbp[-56] (1 slot)
  9(   UNKNOWN) : From 0000006Bh to 000005ECh, in rbp[-64] (1 slot)
 10(   UNKNOWN) : From 0000006Bh to 000005ECh, in rbp[-68] (1 slot)
 11(   UNKNOWN) : From 0000006Bh to 000005ECh, in rbp[-72] (1 slot)
 12(   UNKNOWN) : From 0000006Bh to 000005ECh, in rbp[-88] (1 slot)
 13(   UNKNOWN) : From 0000006Bh to 000005ECh, in rbp[-92] (1 slot)
 14(   UNKNOWN) : From 0000006Bh to 000005ECh, in rbp[-96] (1 slot)
 15(   UNKNOWN) : From 0000006Bh to 000005ECh, in rbp[-100] (1 slot)
 16(   UNKNOWN) : From 0000006Bh to 000005ECh, in rbp[-104] (1 slot)
 17(   UNKNOWN) : From 0000006Bh to 000005ECh, in rbp[-108] (1 slot)
VARIABLE LIVE RANGES:
V00 this: rbp[16] (1 slot) [6B, 5EC)
V01 arg1: rbp[24] (1 slot) [6B, 5EC)
V02 loc0: rbp[-8] (1 slot) [6B, 5EC)
V03 loc1: rbp[-16] (1 slot) [6B, 5EC)
V04 loc2: rbp[-20] (1 slot) [6B, 5EC)
V05 loc3: rbp[-32] (1 slot) [6B, 5EC)
V06 loc4: rbp[-40] (1 slot) [6B, 5EC)
V07 loc5: rbp[-44] (1 slot) [6B, 5EC)
V08 loc6: rbp[-56] (1 slot) [6B, 5EC)
V09 loc7: rbp[-64] (1 slot) [6B, 5EC)
V10 loc8: rbp[-68] (1 slot) [6B, 5EC)
V11 loc9: rbp[-72] (1 slot) [6B, 5EC)
V12 loc10: rbp[-88] (1 slot) [6B, 5EC)
V13 loc11: rbp[-92] (1 slot) [6B, 5EC)
V14 loc12: rbp[-96] (1 slot) [6B, 5EC)
V15 loc13: rbp[-100] (1 slot) [6B, 5EC)
V16 loc14: rbp[-104] (1 slot) [6B, 5EC)
V17 loc15: rbp[-108] (1 slot) [6B, 5EC)
*************** EH table for FalseLeakRepro.Program:Run(System.String[]):this
2 EH table entries, 0 duplicate clauses, 3 cloned finallys, 5 total EH entries reported to VM
setEHcount(cEH=5)
EH#0: try [0217..02E3) handled by [0592..05C2) (finally)
EH#1: try [0375..03B3) handled by [05C2..05F2) (finally)
EH#2: try [02E3..02E3) handled by [02E3..02EC) (finally) cloned finally
EH#3: try [03B3..03B3) handled by [03B3..03BD) (finally) cloned finally
EH#4: try [03BD..03BD) handled by [03BD..03C6) (finally) cloned finally
*************** In gcInfoBlockHdrSave()
Set code length to 1522.
Set ReturnKind to Scalar.
Set stack base register to rbp.
Set PSPSym stack slot to 32.
Set WantsReportOnlyLeaf.
Set Outgoing stack arg area size to 32.
Stack slot id for offset 16 (0x10) (frame) (untracked) = 0.
Stack slot id for offset 24 (0x18) (frame) (untracked) = 1.
Stack slot id for offset -8 (-0x8) (frame) (untracked) = 2.
Stack slot id for offset -32 (-0x20) (frame) (untracked) = 3.
Stack slot id for offset -56 (-0x38) (frame) (untracked) = 4.
Stack slot id for offset -128 (-0x80) (frame) (untracked) = 5.
Stack slot id for offset -136 (-0x88) (frame) (untracked) = 6.
Stack slot id for offset -144 (-0x90) (frame) (untracked) = 7.
Stack slot id for offset -152 (-0x98) (frame) (untracked) = 8.
Stack slot id for offset -160 (-0xa0) (frame) (untracked) = 9.
Stack slot id for offset -168 (-0xa8) (frame) (untracked) = 10.
Stack slot id for offset -176 (-0xb0) (frame) (untracked) = 11.
Stack slot id for offset -192 (-0xc0) (frame) (untracked) = 12.
Stack slot id for offset -200 (-0xc8) (frame) (untracked) = 13.
Stack slot id for offset -208 (-0xd0) (frame) (untracked) = 14.
Stack slot id for offset -216 (-0xd8) (frame) (untracked) = 15.
Stack slot id for offset -224 (-0xe0) (frame) (untracked) = 16.
Stack slot id for offset -232 (-0xe8) (frame) (untracked) = 17.
Stack slot id for offset -248 (-0xf8) (frame) (untracked) = 18.
Stack slot id for offset -256 (-0x100) (frame) (untracked) = 19.
Stack slot id for offset -272 (-0x110) (frame) (untracked) = 20.
Stack slot id for offset -280 (-0x118) (frame) (untracked) = 21.
Register slot id for reg rcx (byref) = 22.
Register slot id for reg rax = 23.
Register slot id for reg rdx = 24.
Register slot id for reg rcx = 25.
Set state of slot 22 at instr offset 0x81 to Live.
Set state of slot 23 at instr offset 0x86 to Live.
Set state of slot 22 at instr offset 0x86 to Dead.
Set state of slot 24 at instr offset 0x97 to Live.
Set state of slot 25 at instr offset 0x9b to Live.
Set state of slot 25 at instr offset 0xa0 to Dead.
Set state of slot 24 at instr offset 0xa0 to Dead.
Set state of slot 25 at instr offset 0xae to Live.
Set state of slot 23 at instr offset 0xb3 to Dead.
Set state of slot 25 at instr offset 0xb3 to Dead.
Set state of slot 23 at instr offset 0xc3 to Live.
Set state of slot 25 at instr offset 0xd1 to Live.
Set state of slot 23 at instr offset 0xd6 to Dead.
Set state of slot 25 at instr offset 0xd6 to Dead.
Set state of slot 24 at instr offset 0xda to Live.
Set state of slot 22 at instr offset 0xde to Live.
Set state of slot 24 at instr offset 0xea to Dead.
Set state of slot 22 at instr offset 0xea to Dead.
Set state of slot 23 at instr offset 0xf9 to Live.
Set state of slot 25 at instr offset 0x104 to Live.
Set state of slot 23 at instr offset 0x11f to Dead.
Set state of slot 25 at instr offset 0x11f to Dead.
Set state of slot 24 at instr offset 0x126 to Live.
Set state of slot 22 at instr offset 0x12a to Live.
Set state of slot 24 at instr offset 0x136 to Dead.
Set state of slot 22 at instr offset 0x136 to Dead.
Set state of slot 23 at instr offset 0x145 to Live.
Set state of slot 25 at instr offset 0x153 to Live.
Set state of slot 24 at instr offset 0x157 to Live.
Set state of slot 23 at instr offset 0x166 to Dead.
Set state of slot 25 at instr offset 0x166 to Dead.
Set state of slot 24 at instr offset 0x166 to Dead.
Set state of slot 23 at instr offset 0x175 to Live.
Set state of slot 25 at instr offset 0x183 to Live.
Set state of slot 24 at instr offset 0x18a to Live.
Set state of slot 23 at instr offset 0x18f to Dead.
Set state of slot 25 at instr offset 0x18f to Dead.
Set state of slot 24 at instr offset 0x18f to Dead.
Set state of slot 25 at instr offset 0x196 to Live.
Set state of slot 25 at instr offset 0x1a5 to Dead.
Set state of slot 22 at instr offset 0x1c1 to Live.
Set state of slot 23 at instr offset 0x1c6 to Live.
Set state of slot 22 at instr offset 0x1c6 to Dead.
Set state of slot 24 at instr offset 0x1da to Live.
Set state of slot 25 at instr offset 0x1e1 to Live.
Set state of slot 25 at instr offset 0x1e6 to Dead.
Set state of slot 24 at instr offset 0x1e6 to Dead.
Set state of slot 25 at instr offset 0x1f4 to Live.
Set state of slot 23 at instr offset 0x1f9 to Dead.
Set state of slot 25 at instr offset 0x1f9 to Dead.
Set state of slot 24 at instr offset 0x20a to Live.
Set state of slot 24 at instr offset 0x214 to Dead.
Set state of slot 25 at instr offset 0x21f to Live.
Set state of slot 25 at instr offset 0x224 to Dead.
Set state of slot 23 at instr offset 0x235 to Live.
Set state of slot 25 at instr offset 0x240 to Live.
Set state of slot 23 at instr offset 0x25b to Dead.
Set state of slot 25 at instr offset 0x25b to Dead.
Set state of slot 24 at instr offset 0x262 to Live.
Set state of slot 22 at instr offset 0x266 to Live.
Set state of slot 24 at instr offset 0x272 to Dead.
Set state of slot 22 at instr offset 0x272 to Dead.
Set state of slot 24 at instr offset 0x276 to Live.
Set state of slot 22 at instr offset 0x27e to Live.
Set state of slot 24 at instr offset 0x293 to Dead.
Set state of slot 22 at instr offset 0x293 to Dead.
Set state of slot 23 at instr offset 0x2a2 to Live.
Set state of slot 25 at instr offset 0x2ad to Live.
Set state of slot 23 at instr offset 0x2c8 to Dead.
Set state of slot 25 at instr offset 0x2c8 to Dead.
Set state of slot 24 at instr offset 0x2cf to Live.
Set state of slot 22 at instr offset 0x2d3 to Live.
Set state of slot 24 at instr offset 0x2df to Dead.
Set state of slot 22 at instr offset 0x2df to Dead.
Set state of slot 22 at instr offset 0x327 to Live.
Set state of slot 23 at instr offset 0x32c to Live.
Set state of slot 22 at instr offset 0x32c to Dead.
Set state of slot 24 at instr offset 0x340 to Live.
Set state of slot 25 at instr offset 0x347 to Live.
Set state of slot 25 at instr offset 0x34c to Dead.
Set state of slot 24 at instr offset 0x34c to Dead.
Set state of slot 25 at instr offset 0x35a to Live.
Set state of slot 23 at instr offset 0x35f to Dead.
Set state of slot 25 at instr offset 0x35f to Dead.
Set state of slot 24 at instr offset 0x368 to Live.
Set state of slot 24 at instr offset 0x372 to Dead.
Set state of slot 25 at instr offset 0x37d to Live.
Set state of slot 25 at instr offset 0x382 to Dead.
Set state of slot 25 at instr offset 0x388 to Live.
Set state of slot 23 at instr offset 0x394 to Live.
Set state of slot 25 at instr offset 0x39f to Dead.
Set state of slot 23 at instr offset 0x3af to Dead.
Set state of slot 22 at instr offset 0x3f7 to Live.
Set state of slot 23 at instr offset 0x3fc to Live.
Set state of slot 22 at instr offset 0x3fc to Dead.
Set state of slot 24 at instr offset 0x410 to Live.
Set state of slot 25 at instr offset 0x417 to Live.
Set state of slot 25 at instr offset 0x41c to Dead.
Set state of slot 24 at instr offset 0x41c to Dead.
Set state of slot 25 at instr offset 0x42a to Live.
Set state of slot 23 at instr offset 0x42f to Dead.
Set state of slot 25 at instr offset 0x42f to Dead.
Set state of slot 25 at instr offset 0x43d to Live.
Set state of slot 25 at instr offset 0x442 to Dead.
Set state of slot 25 at instr offset 0x450 to Live.
Set state of slot 25 at instr offset 0x455 to Dead.
Set state of slot 25 at instr offset 0x463 to Live.
Set state of slot 25 at instr offset 0x468 to Dead.
Set state of slot 25 at instr offset 0x476 to Live.
Set state of slot 25 at instr offset 0x47b to Dead.
Set state of slot 22 at instr offset 0x4a7 to Live.
Set state of slot 22 at instr offset 0x4ac to Dead.
Set state of slot 22 at instr offset 0x4eb to Live.
Set state of slot 22 at instr offset 0x4f0 to Dead.
Set state of slot 22 at instr offset 0x51b to Live.
Set state of slot 22 at instr offset 0x520 to Dead.
Set state of slot 25 at instr offset 0x541 to Live.
Set state of slot 25 at instr offset 0x549 to Dead.
Set state of slot 22 at instr offset 0x54d to Live.
Set state of slot 22 at instr offset 0x552 to Dead.
Set state of slot 23 at instr offset 0x584 to Live.
Set state of slot 23 at instr offset 0x592 to Dead.
Set state of slot 25 at instr offset 0x5b5 to Live.
Set state of slot 25 at instr offset 0x5ba to Dead.
Set state of slot 25 at instr offset 0x5e5 to Live.
Set state of slot 25 at instr offset 0x5ea to Dead.
Defining interruptible range: [0x5d, 0x2eb).
Defining interruptible range: [0x2ec, 0x3bb).
Defining interruptible range: [0x3bd, 0x3c5).
Defining interruptible range: [0x3c6, 0x589).
Defining interruptible range: [0x5a7, 0x5bc).
Defining interruptible range: [0x5d7, 0x5ec).

*************** Finishing PHASE Emit GC+EH tables
Method code size: 1522

Allocations for FalseLeakRepro.Program:Run(System.String[]):this (MethodHash=6911424d)
count:       5750, size:     408240, max =       7040
allocateMemory:     458752, nraUsed:     411960

Alloc'd bytes by kind:
                  kind |       size |     pct
  ---------------------+------------+--------
         AssertionProp |          0 |   0.00%
               ASTNode |      91840 |  22.50%
              InstDesc |      32936 |   8.07%
              ImpStack |        384 |   0.09%
            BasicBlock |      13312 |   3.26%
             fgArgInfo |       3136 |   0.77%
       fgArgInfoPtrArr |        392 |   0.10%
              FlowList |       1600 |   0.39%
     TreeStatementList |          0 |   0.00%
               SiScope |          0 |   0.00%
       DominatorMemory |          0 |   0.00%
                  LSRA |       8896 |   2.18%
         LSRA_Interval |      15120 |   3.70%
      LSRA_RefPosition |      63488 |  15.55%
          Reachability |          0 |   0.00%
                   SSA |          0 |   0.00%
           ValueNumber |          0 |   0.00%
              LvaTable |      11648 |   2.85%
            UnwindInfo |         64 |   0.02%
                hashBv |       1480 |   0.36%
                bitset |        880 |   0.22%
          FixedBitVect |         76 |   0.02%
               Generic |       7066 |   1.73%
   LocalAddressVisitor |          0 |   0.00%
         FieldSeqStore |        416 |   0.10%
    ZeroOffsetFieldMap |         40 |   0.01%
          ArrayInfoMap |          0 |   0.00%
          MemoryPhiArg |          0 |   0.00%
                   CSE |          0 |   0.00%
                    GC |      11712 |   2.87%
       CorTailCallInfo |          0 |   0.00%
              Inlining |        120 |   0.03%
            ArrayStack |          0 |   0.00%
             DebugInfo |       6288 |   1.54%
             DebugOnly |     128416 |  31.46%
               Codegen |        848 |   0.21%
               LoopOpt |        936 |   0.23%
             LoopClone |          0 |   0.00%
             LoopHoist |          0 |   0.00%
               Unknown |       2978 |   0.73%
            RangeCheck |          0 |   0.00%
              CopyProp |          0 |   0.00%
           SideEffects |          0 |   0.00%
       ObjectAllocator |          0 |   0.00%
    VariableLiveRanges |       4072 |   1.00%
           ClassLayout |         96 |   0.02%
       TailMergeThrows |          0 |   0.00%
             EarlyProp |          0 |   0.00%
              ZeroInit |          0 |   0.00%
                   Pgo |          0 |   0.00%

****** DONE compiling FalseLeakRepro.Program:Run(System.String[]):this
8/13/2021 4:48:41 PM	 Created list
8/13/2021 4:48:42 PM	 Consumer thread started, adding items...
8/13/2021 4:48:42 PM	 Waiting for list processing to complete...
8/13/2021 4:48:42 PM	 Done.  Profiler is active, available options:
   Q = quit
   H = heap snapshot
   G = GC (max gen)
   R = clear the running flag to stop the consumer thread
q
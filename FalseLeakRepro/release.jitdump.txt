****** START compiling FalseLeakRepro.Program:Run(System.String[]):this (MethodHash=6911424d)
Generating code for Windows x64
OPTIONS: Tier-0 compilation (set COMPlus_TieredCompilation=0 to disable)
OPTIONS: compCodeOpt = BLENDED_CODE
OPTIONS: compDbgCode = false
OPTIONS: compDbgInfo = true
OPTIONS: compDbgEnC  = false
OPTIONS: compProcedureSplitting   = false
OPTIONS: compProcedureSplittingEH = false
IL to import:
IL_0000  28 0d 00 00 0a    call         0xA00000D
IL_0005  0a                stloc.0     
IL_0006  12 00             ldloca.s     0x0
IL_0008  28 0e 00 00 0a    call         0xA00000E
IL_000d  72 01 00 00 70    ldstr        0x70000001
IL_0012  28 0f 00 00 0a    call         0xA00000F
IL_0017  28 10 00 00 0a    call         0xA000010
IL_001c  02                ldarg.0     
IL_001d  73 03 00 00 06    newobj       0x6000003
IL_0022  7d 05 00 00 04    stfld        0x4000005
IL_0027  02                ldarg.0     
IL_0028  7b 05 00 00 04    ldfld        0x4000005
IL_002d  7b 03 00 00 04    ldfld        0x4000003
IL_0032  73 0c 00 00 0a    newobj       0xA00000C
IL_0037  7d 02 00 00 04    stfld        0x4000002
IL_003c  02                ldarg.0     
IL_003d  fe 06 07 00 00 06 ldftn        0x6000007
IL_0043  73 11 00 00 0a    newobj       0xA000011
IL_0048  73 12 00 00 0a    newobj       0xA000012
IL_004d  6f 13 00 00 0a    callvirt     0xA000013
IL_0052  28 0d 00 00 0a    call         0xA00000D
IL_0057  0a                stloc.0     
IL_0058  12 00             ldloca.s     0x0
IL_005a  28 0e 00 00 0a    call         0xA00000E
IL_005f  72 1f 00 00 70    ldstr        0x7000001F
IL_0064  28 0f 00 00 0a    call         0xA00000F
IL_0069  28 10 00 00 0a    call         0xA000010
IL_006e  16                ldc.i4.0    
IL_006f  0b                stloc.1     
IL_0070  2b 66             br.s         102 (IL_00d8)
IL_0072  02                ldarg.0     
IL_0073  7b 05 00 00 04    ldfld        0x4000005
IL_0078  0c                stloc.2     
IL_0079  16                ldc.i4.0    
IL_007a  0d                stloc.3     
IL_007b  08                ldloc.2     
IL_007c  12 03             ldloca.s     0x3
IL_007e  28 14 00 00 0a    call         0xA000014
IL_0083  02                ldarg.0     
IL_0084  7b 05 00 00 04    ldfld        0x4000005
IL_0089  7b 03 00 00 04    ldfld        0x4000003
IL_008e  73 01 00 00 06    newobj       0x6000001
IL_0093  7d 01 00 00 04    stfld        0x4000001
IL_0098  02                ldarg.0     
IL_0099  7b 05 00 00 04    ldfld        0x4000005
IL_009e  02                ldarg.0     
IL_009f  7b 05 00 00 04    ldfld        0x4000005
IL_00a4  7b 03 00 00 04    ldfld        0x4000003
IL_00a9  7b 01 00 00 04    ldfld        0x4000001
IL_00ae  7d 03 00 00 04    stfld        0x4000003
IL_00b3  02                ldarg.0     
IL_00b4  7b 05 00 00 04    ldfld        0x4000005
IL_00b9  7b 03 00 00 04    ldfld        0x4000003
IL_00be  73 0c 00 00 0a    newobj       0xA00000C
IL_00c3  7d 02 00 00 04    stfld        0x4000002
IL_00c8  de 0a             leave.s      10 (IL_00d4)
IL_00ca  09                ldloc.3     
IL_00cb  2c 06             brfalse.s    6 (IL_00d3)
IL_00cd  08                ldloc.2     
IL_00ce  28 15 00 00 0a    call         0xA000015
IL_00d3  dc                endfinally  
IL_00d4  07                ldloc.1     
IL_00d5  17                ldc.i4.1    
IL_00d6  58                add         
IL_00d7  0b                stloc.1     
IL_00d8  07                ldloc.1     
IL_00d9  1f 0a             ldc.i4.s     0xA
IL_00db  32 95             blt.s        -107 (IL_0072)
IL_00dd  28 0d 00 00 0a    call         0xA00000D
IL_00e2  0a                stloc.0     
IL_00e3  12 00             ldloca.s     0x0
IL_00e5  28 0e 00 00 0a    call         0xA00000E
IL_00ea  72 75 00 00 70    ldstr        0x70000075
IL_00ef  28 0f 00 00 0a    call         0xA00000F
IL_00f4  28 10 00 00 0a    call         0xA000010
IL_00f9  02                ldarg.0     
IL_00fa  7b 05 00 00 04    ldfld        0x4000005
IL_00ff  0c                stloc.2     
IL_0100  16                ldc.i4.0    
IL_0101  0d                stloc.3     
IL_0102  08                ldloc.2     
IL_0103  12 03             ldloca.s     0x3
IL_0105  28 14 00 00 0a    call         0xA000014
IL_010a  02                ldarg.0     
IL_010b  7b 05 00 00 04    ldfld        0x4000005
IL_0110  7b 03 00 00 04    ldfld        0x4000003
IL_0115  02                ldarg.0     
IL_0116  7b 05 00 00 04    ldfld        0x4000005
IL_011b  7b 04 00 00 04    ldfld        0x4000004
IL_0120  33 02             bne.un.s     2 (IL_0124)
IL_0122  de 15             leave.s      21 (IL_0139)
IL_0124  de 0a             leave.s      10 (IL_0130)
IL_0126  09                ldloc.3     
IL_0127  2c 06             brfalse.s    6 (IL_012f)
IL_0129  08                ldloc.2     
IL_012a  28 15 00 00 0a    call         0xA000015
IL_012f  dc                endfinally  
IL_0130  1f 64             ldc.i4.s     0x64
IL_0132  28 16 00 00 0a    call         0xA000016
IL_0137  2b c0             br.s         -64 (IL_00f9)
IL_0139  28 0d 00 00 0a    call         0xA00000D
IL_013e  0a                stloc.0     
IL_013f  12 00             ldloca.s     0x0
IL_0141  28 0e 00 00 0a    call         0xA00000E
IL_0146  72 cf 00 00 70    ldstr        0x700000CF
IL_014b  28 0f 00 00 0a    call         0xA00000F
IL_0150  28 10 00 00 0a    call         0xA000010
IL_0155  72 2f 01 00 70    ldstr        0x7000012F
IL_015a  28 10 00 00 0a    call         0xA000010
IL_015f  72 47 01 00 70    ldstr        0x70000147
IL_0164  28 10 00 00 0a    call         0xA000010
IL_0169  72 71 01 00 70    ldstr        0x70000171
IL_016e  28 10 00 00 0a    call         0xA000010
IL_0173  72 99 01 00 70    ldstr        0x70000199
IL_0178  28 10 00 00 0a    call         0xA000010
IL_017d  28 17 00 00 0a    call         0xA000017
IL_0182  13 04             stloc.s      0x4
IL_0184  12 04             ldloca.s     0x4
IL_0186  28 18 00 00 0a    call         0xA000018
IL_018b  1f 47             ldc.i4.s     0x47
IL_018d  33 0c             bne.un.s     12 (IL_019b)
IL_018f  28 19 00 00 0a    call         0xA000019
IL_0194  28 1a 00 00 0a    call         0xA00001A
IL_0199  2b e2             br.s         -30 (IL_017d)
IL_019b  12 04             ldloca.s     0x4
IL_019d  28 18 00 00 0a    call         0xA000018
IL_01a2  1f 48             ldc.i4.s     0x48
IL_01a4  33 07             bne.un.s     7 (IL_01ad)
IL_01a6  28 1b 00 00 0a    call         0xA00001B
IL_01ab  2b d0             br.s         -48 (IL_017d)
IL_01ad  12 04             ldloca.s     0x4
IL_01af  28 18 00 00 0a    call         0xA000018
IL_01b4  1f 52             ldc.i4.s     0x52
IL_01b6  33 09             bne.un.s     9 (IL_01c1)
IL_01b8  02                ldarg.0     
IL_01b9  16                ldc.i4.0    
IL_01ba  7d 06 00 00 04    stfld        0x4000006
IL_01bf  2b bc             br.s         -68 (IL_017d)
IL_01c1  12 04             ldloca.s     0x4
IL_01c3  28 18 00 00 0a    call         0xA000018
IL_01c8  1f 51             ldc.i4.s     0x51
IL_01ca  33 b1             bne.un.s     -79 (IL_017d)
IL_01cc  02                ldarg.0     
IL_01cd  16                ldc.i4.0    
IL_01ce  7d 06 00 00 04    stfld        0x4000006
IL_01d3  2a                ret         

lvaSetClass: setting class for V00 to (00007FFDB3DDF870) FalseLeakRepro.Program 
'this'    passed in register rcx

lvaSetClass: setting class for V01 to (00007FFDB3DDDA58) System.String[] 
Arg #1    passed in register(s) rdx

lvaSetClass: setting class for V04 to (00007FFDB3EE2350) FalseLeakRepro.List 

lvaGrabTemp returning 7 (V07 tmp0) (a long lifetime temp) called for OutgoingArgSpace.
; Initial local variable assignments
;
;  V00 this              ref  this class-hnd
;  V01 arg1              ref  class-hnd
;  V02 loc0           struct <System.DateTime, 8>
;  V03 loc1              int 
;  V04 loc2              ref  class-hnd
;  V05 loc3             bool 
;  V06 loc4           struct <System.ConsoleKeyInfo, 12>
;  V07 OutArgs        lclBlk <na>  "OutgoingArgSpace"
*************** In compInitDebuggingInfo() for FalseLeakRepro.Program:Run(System.String[]):this
getVars() returned cVars = 0, extendOthers = true
info.compVarScopesCount = 7
    	VarNum 	LVNum 	      Name 	Beg 	End
 0: 	00h 	00h 	  V00 this 	000h   	1D4h
 1: 	01h 	01h 	  V01 arg1 	000h   	1D4h
 2: 	02h 	02h 	  V02 loc0 	000h   	1D4h
 3: 	03h 	03h 	  V03 loc1 	000h   	1D4h
 4: 	04h 	04h 	  V04 loc2 	000h   	1D4h
 5: 	05h 	05h 	  V05 loc3 	000h   	1D4h
 6: 	06h 	06h 	  V06 loc4 	000h   	1D4h
info.compStmtOffsetsCount    = 0
info.compStmtOffsetsImplicit = 0005h ( STACK_EMPTY CALL_SITE )
*************** In fgFindBasicBlocks() for FalseLeakRepro.Program:Run(System.String[]):this
Jump targets:
  IL_0072
  IL_007b
  IL_00ca
  IL_00d3
  IL_00d4
  IL_00d8
  IL_00f9
  IL_0102
  IL_0124
  IL_0126
  IL_012f
  IL_0130
  IL_0139
  IL_017d
  IL_019b
  IL_01ad
  IL_01c1
New Basic Block BB01 [0000] created.
BB01 [000..072)
New Basic Block BB02 [0001] created.
BB02 [072..07B)
New Basic Block BB03 [0002] created.
BB03 [07B..0CA)
New Basic Block BB04 [0003] created.
BB04 [0CA..0CD)
New Basic Block BB05 [0004] created.
BB05 [0CD..0D3)
New Basic Block BB06 [0005] created.
BB06 [0D3..0D4)
New Basic Block BB07 [0006] created.
BB07 [0D4..0D8)
New Basic Block BB08 [0007] created.
BB08 [0D8..0DD)
New Basic Block BB09 [0008] created.
BB09 [0DD..0F9)
New Basic Block BB10 [0009] created.
BB10 [0F9..102)
New Basic Block BB11 [0010] created.
BB11 [102..122)
New Basic Block BB12 [0011] created.
BB12 [122..124)
New Basic Block BB13 [0012] created.
BB13 [124..126)
New Basic Block BB14 [0013] created.
BB14 [126..129)
New Basic Block BB15 [0014] created.
BB15 [129..12F)
New Basic Block BB16 [0015] created.
BB16 [12F..130)
New Basic Block BB17 [0016] created.
BB17 [130..139)
New Basic Block BB18 [0017] created.
BB18 [139..17D)
New Basic Block BB19 [0018] created.
BB19 [17D..18F)
New Basic Block BB20 [0019] created.
BB20 [18F..19B)
New Basic Block BB21 [0020] created.
BB21 [19B..1A6)
New Basic Block BB22 [0021] created.
BB22 [1A6..1AD)
New Basic Block BB23 [0022] created.
BB23 [1AD..1B8)
New Basic Block BB24 [0023] created.
BB24 [1B8..1C1)
New Basic Block BB25 [0024] created.
BB25 [1C1..1CC)
New Basic Block BB26 [0025] created.
BB26 [1CC..1D4)
EH clause #0:
  Flags:         0x2 (finally)
  TryOffset:     0x7b
  TryLength:     0x4f
  HandlerOffset: 0xca
  HandlerLength: 0xa
  ClassToken:    0x0
EH clause #1:
  Flags:         0x2 (finally)
  TryOffset:     0x102
  TryLength:     0x24
  HandlerOffset: 0x126
  HandlerLength: 0xa
  ClassToken:    0x0
*************** After fgFindBasicBlocks() has created the EH table

***************  Exception Handling table
index  eTry, eHnd
  0  ::            - Try at BB03..BB03 [07B..0CA), Finally at BB04..BB06 [0CA..0D4)
  1  ::            - Try at BB11..BB13 [102..126), Finally at BB14..BB16 [126..130)
*************** In fgNormalizeEH()

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd                 weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..072)-> BB08 (always)                     
BB02 [0001]  1                             1       [072..07B)                                     bwd bwd-target 
BB03 [0002]  1  0                          1       [07B..0CA)-> BB07 (leave ) T0      try { }     keep try bwd 
BB04 [0003]  1     0                       1       [0CA..0CD)-> BB06 ( cond )    H0   finally {   keep bwd 
BB05 [0004]  1     0                       1       [0CD..0D3)                    H0               bwd 
BB06 [0005]  2     0                       1       [0D3..0D4)        (finret)    H0   }           bwd 
BB07 [0006]  1                             1       [0D4..0D8)                                     bwd 
BB08 [0007]  2                             1       [0D8..0DD)-> BB02 ( cond )                     bwd 
BB09 [0008]  1                             1       [0DD..0F9)                                     
BB10 [0009]  2                             1       [0F9..102)                                     bwd bwd-target 
BB11 [0010]  1  1                          1       [102..122)-> BB13 ( cond ) T1      try {       keep try bwd 
BB12 [0011]  1  1                          1       [122..124)-> BB18 (leave ) T1                  bwd 
BB13 [0012]  1  1                          1       [124..126)-> BB17 (leave ) T1      }           bwd 
BB14 [0013]  1     1                       1       [126..129)-> BB16 ( cond )    H1   finally {   keep bwd 
BB15 [0014]  1     1                       1       [129..12F)                    H1               bwd 
BB16 [0015]  2     1                       1       [12F..130)        (finret)    H1   }           bwd 
BB17 [0016]  1                             1       [130..139)-> BB10 (always)                     bwd 
BB18 [0017]  1                             1       [139..17D)                                     
BB19 [0018]  5                             1       [17D..18F)-> BB21 ( cond )                     bwd bwd-target 
BB20 [0019]  1                             1       [18F..19B)-> BB19 (always)                     bwd 
BB21 [0020]  1                             1       [19B..1A6)-> BB23 ( cond )                     bwd 
BB22 [0021]  1                             1       [1A6..1AD)-> BB19 (always)                     bwd 
BB23 [0022]  1                             1       [1AD..1B8)-> BB25 ( cond )                     bwd 
BB24 [0023]  1                             1       [1B8..1C1)-> BB19 (always)                     bwd 
BB25 [0024]  1                             1       [1C1..1CC)-> BB19 ( cond )                     bwd 
BB26 [0025]  1                             1       [1CC..1D4)        (return)                     
-----------------------------------------------------------------------------------------------------------------------------------------

***************  Exception Handling table
index  eTry, eHnd
  0  ::            - Try at BB03..BB03 [07B..0CA), Finally at BB04..BB06 [0CA..0D4)
  1  ::            - Try at BB11..BB13 [102..126), Finally at BB14..BB16 [126..130)
No EH normalization performed.
****
**** JIT Tier0 jit request switching to Tier1 because of loop
****
Notify VM instruction set (AVX) must be supported.
****** START compiling FalseLeakRepro.Program:Run(System.String[]):this (MethodHash=6911424d)
Generating code for Windows x64
OPTIONS: Tier-0 compilation, switched to FullOpts
OPTIONS: compCodeOpt = BLENDED_CODE
OPTIONS: compDbgCode = false
OPTIONS: compDbgInfo = true
OPTIONS: compDbgEnC  = false
OPTIONS: compProcedureSplitting   = false
OPTIONS: compProcedureSplittingEH = false
IL Code Size,Instr  468,   0, Basic Block count  26, Local Variable Num,Ref count   8,  0 for method FalseLeakRepro.Program:Run(System.String[]):this
OPTIONS: opts.MinOpts() == false
Basic block list for 'FalseLeakRepro.Program:Run(System.String[]):this'

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd                 weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..072)-> BB08 (always)                     
BB02 [0001]  1                             1       [072..07B)                                     bwd bwd-target 
BB03 [0002]  1  0                          1       [07B..0CA)-> BB07 (leave ) T0      try { }     keep try bwd 
BB04 [0003]  1     0                       1       [0CA..0CD)-> BB06 ( cond )    H0   finally {   keep bwd 
BB05 [0004]  1     0                       1       [0CD..0D3)                    H0               bwd 
BB06 [0005]  2     0                       1       [0D3..0D4)        (finret)    H0   }           bwd 
BB07 [0006]  1                             1       [0D4..0D8)                                     bwd 
BB08 [0007]  2                             1       [0D8..0DD)-> BB02 ( cond )                     bwd 
BB09 [0008]  1                             1       [0DD..0F9)                                     
BB10 [0009]  2                             1       [0F9..102)                                     bwd bwd-target 
BB11 [0010]  1  1                          1       [102..122)-> BB13 ( cond ) T1      try {       keep try bwd 
BB12 [0011]  1  1                          1       [122..124)-> BB18 (leave ) T1                  bwd 
BB13 [0012]  1  1                          1       [124..126)-> BB17 (leave ) T1      }           bwd 
BB14 [0013]  1     1                       1       [126..129)-> BB16 ( cond )    H1   finally {   keep bwd 
BB15 [0014]  1     1                       1       [129..12F)                    H1               bwd 
BB16 [0015]  2     1                       1       [12F..130)        (finret)    H1   }           bwd 
BB17 [0016]  1                             1       [130..139)-> BB10 (always)                     bwd 
BB18 [0017]  1                             1       [139..17D)                                     
BB19 [0018]  5                             1       [17D..18F)-> BB21 ( cond )                     bwd bwd-target 
BB20 [0019]  1                             1       [18F..19B)-> BB19 (always)                     bwd 
BB21 [0020]  1                             1       [19B..1A6)-> BB23 ( cond )                     bwd 
BB22 [0021]  1                             1       [1A6..1AD)-> BB19 (always)                     bwd 
BB23 [0022]  1                             1       [1AD..1B8)-> BB25 ( cond )                     bwd 
BB24 [0023]  1                             1       [1B8..1C1)-> BB19 (always)                     bwd 
BB25 [0024]  1                             1       [1C1..1CC)-> BB19 ( cond )                     bwd 
BB26 [0025]  1                             1       [1CC..1D4)        (return)                     
-----------------------------------------------------------------------------------------------------------------------------------------

*************** Starting PHASE Pre-import

*************** Finishing PHASE Pre-import

*************** Starting PHASE Profile incorporation
BBOPT not set

*************** Finishing PHASE Profile incorporation [no changes]

*************** Starting PHASE Importation
*************** In impImport() for FalseLeakRepro.Program:Run(System.String[]):this

impImportBlockPending for BB01

Importing BB01 (PC=000) of 'FalseLeakRepro.Program:Run(System.String[]):this'
    [ 0]   0 (0x000) call 0A00000D
In Compiler::impImportCall: opcode is call, kind=0, callRetType is struct, structSize is 8
INLINER: during 'impMarkInlineCandidate' result 'failed this callee' reason 'too many il bytes' for 'FalseLeakRepro.Program:Run(System.String[]):this' calling 'System.DateTime:get_Now():System.DateTime'

INLINER: Marking System.DateTime:get_Now():System.DateTime as NOINLINE because of too many il bytes
INLINER: during 'impMarkInlineCandidate' result 'failed this callee' reason 'too many il bytes'

    [ 1]   5 (0x005) stloc.0

STMT00000 (IL 0x000...  ???)
               [000003] -AC-G-------              *  ASG       struct (copy)
               [000001] D------N----              +--*  LCL_VAR   struct<System.DateTime, 8> V02 loc0         
               [000000] --C-G-------              \--*  CALL      struct System.DateTime.get_Now

    [ 0]   6 (0x006) ldloca.s 0
    [ 1]   8 (0x008) call 0A00000E
In Compiler::impImportCall: opcode is call, kind=0, callRetType is ref, structSize is 0

    [ 1]  13 (0x00d) ldstr 70000001
    [ 2]  18 (0x012) call 0A00000F
In Compiler::impImportCall: opcode is call, kind=0, callRetType is ref, structSize is 0

    [ 1]  23 (0x017) call 0A000010
In Compiler::impImportCall: opcode is call, kind=0, callRetType is void, structSize is 0
INLINER: during 'impMarkInlineCandidate' result 'failed this callee' reason 'noinline per IL/cached result' for 'FalseLeakRepro.Program:Run(System.String[]):this' calling 'System.Console:WriteLine(System.String)'
INLINER: during 'impMarkInlineCandidate' result 'failed this callee' reason 'noinline per IL/cached result'


STMT00001 (IL 0x006...  ???)
               [000009] --C-G-------              *  CALL      void   System.Console.WriteLine
               [000008] --C-G------- arg0         \--*  CALL      ref    System.String.Concat
               [000006] --C-G------- arg0            +--*  CALL      ref    System.DateTime.ToString
               [000005] ------------ this in rcx     |  \--*  ADDR      byref 
               [000004] -------N----                 |     \--*  LCL_VAR   struct<System.DateTime, 8> V02 loc0         
               [000007] ------------ arg1            \--*  CNS_STR   ref   <string constant>

    [ 0]  28 (0x01c) ldarg.0
    [ 1]  29 (0x01d) newobj
lvaGrabTemp returning 8 (V08 tmp1) called for NewObj constructor temp.


STMT00002 (IL 0x01C...  ???)
               [000014] -A----------              *  ASG       ref   
               [000013] D------N----              +--*  LCL_VAR   ref    V08 tmp1         
               [000012] ------------              \--*  ALLOCOBJ  ref   
               [000011] H-----------                 \--*  CNS_INT(h) long   0x7ffdb3ee2350 method
Marked V08 as a single def local

lvaSetClass: setting class for V08 to (00007FFDB3EE2350) FalseLeakRepro.List  [exact]
 06000003
In Compiler::impImportCall: opcode is newobj, kind=0, callRetType is void, structSize is 0


STMT00003 (IL   ???...  ???)
               [000016] I-C-G-------              *  CALL      void   FalseLeakRepro.List..ctor (exactContextHnd=0x00007FFDB3EE2351)
               [000015] ------------ this in rcx  \--*  LCL_VAR   ref    V08 tmp1         

    [ 2]  34 (0x022) stfld 04000005

STMT00004 (IL 0x022...  ???)
               [000019] -A-XG-------              *  ASG       ref   
               [000018] ---XG--N----              +--*  FIELD     ref    _myList
               [000010] ------------              |  \--*  LCL_VAR   ref    V00 this         
               [000017] ------------              \--*  LCL_VAR   ref    V08 tmp1         

    [ 0]  39 (0x027) ldarg.0
    [ 1]  40 (0x028) ldfld 04000005
    [ 1]  45 (0x02d) ldfld 04000003
    [ 1]  50 (0x032) newobj
lvaGrabTemp returning 9 (V09 tmp2) called for NewObj constructor temp.


STMT00005 (IL 0x027...  ???)
               [000026] -A----------              *  ASG       ref   
               [000025] D------N----              +--*  LCL_VAR   ref    V09 tmp2         
               [000024] ------------              \--*  ALLOCOBJ  ref   
               [000023] H-----------                 \--*  CNS_INT(h) long   0x7ffdb3b058b8 token
Marked V09 as a single def local

lvaSetClass: setting class for V09 to (00007FFDB3B058B8) System.Object  [exact]
 0A00000C
In Compiler::impImportCall: opcode is newobj, kind=0, callRetType is void, structSize is 0

lvaGrabTemp returning 10 (V10 tmp3) called for impAppendStmt.


STMT00007 (IL   ???...  ???)
               [000030] -A-XG-------              *  ASG       ref   
               [000029] D------N----              +--*  LCL_VAR   ref    V10 tmp3         
               [000022] ---XG-------              \--*  FIELD     ref    Head
               [000021] ---XG-------                 \--*  FIELD     ref    _myList
               [000020] ------------                    \--*  LCL_VAR   ref    V00 this         
Marked V10 as a single def temp
Querying runtime about current class of field FalseLeakRepro.List.Head (declared as FalseLeakRepro.Node)
Field's current class not available

lvaSetClass: setting class for V10 to (00007FFDB3EE58A8) FalseLeakRepro.Node 


STMT00006 (IL   ???...  ???)
               [000028] --C-G-------              *  CALL      void   System.Object..ctor
               [000027] ------------ this in rcx  \--*  LCL_VAR   ref    V09 tmp2         

    [ 2]  55 (0x037) stfld 04000002

STMT00008 (IL 0x037...  ???)
               [000034] -A-XG-------              *  ASG       ref   
               [000033] ---XG--N----              +--*  FIELD     ref    Data
               [000031] ------------              |  \--*  LCL_VAR   ref    V10 tmp3         
               [000032] ------------              \--*  LCL_VAR   ref    V09 tmp2         

    [ 0]  60 (0x03c) ldarg.0
    [ 1]  61 (0x03d) ldftn 06000007
    [ 2]  67 (0x043) newobj
lvaGrabTemp returning 11 (V11 tmp4) called for NewObj constructor temp.


STMT00009 (IL 0x03C...  ???)
               [000040] -A----------              *  ASG       ref   
               [000039] D------N----              +--*  LCL_VAR   ref    V11 tmp4         
               [000038] ------------              \--*  ALLOCOBJ  ref   
               [000037] H-----------                 \--*  CNS_INT(h) long   0x7ffdb3ee6200 token
Marked V11 as a single def local

lvaSetClass: setting class for V11 to (00007FFDB3EE6200) System.Threading.ParameterizedThreadStart  [exact]
 0A000011
In Compiler::impImportCall: opcode is newobj, kind=0, callRetType is void, structSize is 0

fgOptimizeDelegateConstructor: optimized


STMT00010 (IL   ???...  ???)
               [000042] --C-G-------              *  CALL      void   System.MulticastDelegate.CtorClosed
               [000041] ------------ this in rcx  +--*  LCL_VAR   ref    V11 tmp4         
               [000035] ------------ arg1         +--*  LCL_VAR   ref    V00 this         
               [000036] ------------ arg2         \--*  FTN_ADDR  long   FalseLeakRepro.Program.<Run>b__3_0


    [ 1]  72 (0x048) newobj
lvaGrabTemp returning 12 (V12 tmp5) called for NewObj constructor temp.

Spilling stack for finalizable newobj


STMT00011 (IL 0x048...  ???)
               [000047] -A----------              *  ASG       ref   
               [000046] D------N----              +--*  LCL_VAR   ref    V12 tmp5         
               [000045] ------------              \--*  ALLOCOBJ  ref   
               [000044] H-----------                 \--*  CNS_INT(h) long   0x7ffdb3c84e80 token
Marked V12 as a single def local

lvaSetClass: setting class for V12 to (00007FFDB3C84E80) System.Threading.Thread  [exact]
 0A000012
In Compiler::impImportCall: opcode is newobj, kind=0, callRetType is void, structSize is 0


STMT00012 (IL   ???...  ???)
               [000049] --C-G-------              *  CALL      void   System.Threading.Thread..ctor
               [000048] ------------ this in rcx  +--*  LCL_VAR   ref    V12 tmp5         
               [000043] ------------ arg1         \--*  LCL_VAR   ref    V11 tmp4         

    [ 1]  77 (0x04d) callvirt 0A000013
In Compiler::impImportCall: opcode is callvirt, kind=0, callRetType is void, structSize is 0


STMT00013 (IL 0x04D...  ???)
               [000051] --C-G-------              *  CALL nullcheck void   System.Threading.Thread.Start
               [000050] ------------ this in rcx  \--*  LCL_VAR   ref    V12 tmp5         

    [ 0]  82 (0x052) call 0A00000D
In Compiler::impImportCall: opcode is call, kind=0, callRetType is struct, structSize is 8
INLINER: during 'impMarkInlineCandidate' result 'failed this callee' reason 'noinline per IL/cached result' for 'FalseLeakRepro.Program:Run(System.String[]):this' calling 'System.DateTime:get_Now():System.DateTime'
INLINER: during 'impMarkInlineCandidate' result 'failed this callee' reason 'noinline per IL/cached result'

    [ 1]  87 (0x057) stloc.0

STMT00014 (IL 0x052...  ???)
               [000055] -AC-G-------              *  ASG       struct (copy)
               [000053] D------N----              +--*  LCL_VAR   struct<System.DateTime, 8> V02 loc0         
               [000052] --C-G-------              \--*  CALL      struct System.DateTime.get_Now

    [ 0]  88 (0x058) ldloca.s 0
    [ 1]  90 (0x05a) call 0A00000E
In Compiler::impImportCall: opcode is call, kind=0, callRetType is ref, structSize is 0

    [ 1]  95 (0x05f) ldstr 7000001F
    [ 2] 100 (0x064) call 0A00000F
In Compiler::impImportCall: opcode is call, kind=0, callRetType is ref, structSize is 0

    [ 1] 105 (0x069) call 0A000010
In Compiler::impImportCall: opcode is call, kind=0, callRetType is void, structSize is 0
INLINER: during 'impMarkInlineCandidate' result 'failed this callee' reason 'noinline per IL/cached result' for 'FalseLeakRepro.Program:Run(System.String[]):this' calling 'System.Console:WriteLine(System.String)'
INLINER: during 'impMarkInlineCandidate' result 'failed this callee' reason 'noinline per IL/cached result'


STMT00015 (IL 0x058...  ???)
               [000061] --C-G-------              *  CALL      void   System.Console.WriteLine
               [000060] --C-G------- arg0         \--*  CALL      ref    System.String.Concat
               [000058] --C-G------- arg0            +--*  CALL      ref    System.DateTime.ToString
               [000057] ------------ this in rcx     |  \--*  ADDR      byref 
               [000056] -------N----                 |     \--*  LCL_VAR   struct<System.DateTime, 8> V02 loc0         
               [000059] ------------ arg1            \--*  CNS_STR   ref   <string constant>

    [ 0] 110 (0x06e) ldc.i4.0 0
    [ 1] 111 (0x06f) stloc.1

STMT00016 (IL 0x06E...  ???)
               [000064] -A----------              *  ASG       int   
               [000063] D------N----              +--*  LCL_VAR   int    V03 loc1         
               [000062] ------------              \--*  CNS_INT   int    0

    [ 0] 112 (0x070) br.s
impImportBlockPending for BB08

Importing BB08 (PC=216) of 'FalseLeakRepro.Program:Run(System.String[]):this'
    [ 0] 216 (0x0d8) ldloc.1
    [ 1] 217 (0x0d9) ldc.i4.s 10
    [ 2] 219 (0x0db) blt.s

STMT00017 (IL 0x0D8...  ???)
               [000068] ------------              *  JTRUE     void  
               [000067] ------------              \--*  LT        int   
               [000065] ------------                 +--*  LCL_VAR   int    V03 loc1         
               [000066] ------------                 \--*  CNS_INT   int    10

impImportBlockPending for BB09

impImportBlockPending for BB02

Importing BB02 (PC=114) of 'FalseLeakRepro.Program:Run(System.String[]):this'
    [ 0] 114 (0x072) ldarg.0
    [ 1] 115 (0x073) ldfld 04000005
    [ 1] 120 (0x078) stloc.2

STMT00018 (IL 0x072...  ???)
               [000072] -A-XG-------              *  ASG       ref   
               [000071] D------N----              +--*  LCL_VAR   ref    V04 loc2         
               [000070] ---XG-------              \--*  FIELD     ref    _myList
               [000069] ------------                 \--*  LCL_VAR   ref    V00 this         

    [ 0] 121 (0x079) ldc.i4.0 0
    [ 1] 122 (0x07a) stloc.3

STMT00019 (IL 0x079...  ???)
               [000075] -A----------              *  ASG       int   
               [000074] D------N----              +--*  LCL_VAR   int    V05 loc3         
               [000073] ------------              \--*  CNS_INT   int    0

impImportBlockPending for BB03

impImportBlockPending for BB04

Importing BB03 (PC=123) of 'FalseLeakRepro.Program:Run(System.String[]):this'
    [ 0] 123 (0x07b) ldloc.2
    [ 1] 124 (0x07c) ldloca.s 3
    [ 2] 126 (0x07e) call 0A000014
In Compiler::impImportCall: opcode is call, kind=0, callRetType is void, structSize is 0


STMT00020 (IL 0x07B...  ???)
               [000079] --C-G-------              *  CALL      void   System.Threading.Monitor.Enter
               [000076] ------------ arg0         +--*  LCL_VAR   ref    V04 loc2         
               [000078] ------------ arg1         \--*  ADDR      byref 
               [000077] -------N----                 \--*  LCL_VAR   int    V05 loc3         

    [ 0] 131 (0x083) ldarg.0
    [ 1] 132 (0x084) ldfld 04000005
    [ 1] 137 (0x089) ldfld 04000003
    [ 1] 142 (0x08e) newobj
lvaGrabTemp returning 13 (V13 tmp6) called for NewObj constructor temp.


STMT00021 (IL 0x083...  ???)
               [000086] -A----------              *  ASG       ref   
               [000085] D------N----              +--*  LCL_VAR   ref    V13 tmp6         
               [000084] ------------              \--*  ALLOCOBJ  ref   
               [000083] H-----------                 \--*  CNS_INT(h) long   0x7ffdb3ee58a8 method
Marked V13 as a single def local

lvaSetClass: setting class for V13 to (00007FFDB3EE58A8) FalseLeakRepro.Node  [exact]
 06000001
In Compiler::impImportCall: opcode is newobj, kind=0, callRetType is void, structSize is 0

lvaGrabTemp returning 14 (V14 tmp7) called for impAppendStmt.


STMT00023 (IL   ???...  ???)
               [000090] -A-XG-------              *  ASG       ref   
               [000089] D------N----              +--*  LCL_VAR   ref    V14 tmp7         
               [000082] ---XG-------              \--*  FIELD     ref    Head
               [000081] ---XG-------                 \--*  FIELD     ref    _myList
               [000080] ------------                    \--*  LCL_VAR   ref    V00 this         
Marked V14 as a single def temp
Querying runtime about current class of field FalseLeakRepro.List.Head (declared as FalseLeakRepro.Node)
Field's current class not available

lvaSetClass: setting class for V14 to (00007FFDB3EE58A8) FalseLeakRepro.Node 


STMT00022 (IL   ???...  ???)
               [000088] I-C-G-------              *  CALL      void   FalseLeakRepro.Node..ctor (exactContextHnd=0x00007FFDB3EE58A9)
               [000087] ------------ this in rcx  \--*  LCL_VAR   ref    V13 tmp6         

    [ 2] 147 (0x093) stfld 04000001

STMT00024 (IL 0x093...  ???)
               [000094] -A-XG-------              *  ASG       ref   
               [000093] ---XG--N----              +--*  FIELD     ref    Next
               [000091] ------------              |  \--*  LCL_VAR   ref    V14 tmp7         
               [000092] ------------              \--*  LCL_VAR   ref    V13 tmp6         

    [ 0] 152 (0x098) ldarg.0
    [ 1] 153 (0x099) ldfld 04000005
    [ 1] 158 (0x09e) ldarg.0
    [ 2] 159 (0x09f) ldfld 04000005
    [ 2] 164 (0x0a4) ldfld 04000003
    [ 2] 169 (0x0a9) ldfld 04000001
    [ 2] 174 (0x0ae) stfld 04000003

STMT00025 (IL 0x098...  ???)
               [000102] -A-XG-------              *  ASG       ref   
               [000101] ---XG--N----              +--*  FIELD     ref    Head
               [000096] ---XG-------              |  \--*  FIELD     ref    _myList
               [000095] ------------              |     \--*  LCL_VAR   ref    V00 this         
               [000100] ---XG-------              \--*  FIELD     ref    Next
               [000099] ---XG-------                 \--*  FIELD     ref    Head
               [000098] ---XG-------                    \--*  FIELD     ref    _myList
               [000097] ------------                       \--*  LCL_VAR   ref    V00 this         

    [ 0] 179 (0x0b3) ldarg.0
    [ 1] 180 (0x0b4) ldfld 04000005
    [ 1] 185 (0x0b9) ldfld 04000003
    [ 1] 190 (0x0be) newobj
lvaGrabTemp returning 15 (V15 tmp8) called for NewObj constructor temp.


STMT00026 (IL 0x0B3...  ???)
               [000109] -A----------              *  ASG       ref   
               [000108] D------N----              +--*  LCL_VAR   ref    V15 tmp8         
               [000107] ------------              \--*  ALLOCOBJ  ref   
               [000106] H-----------                 \--*  CNS_INT(h) long   0x7ffdb3b058b8 token
Marked V15 as a single def local

lvaSetClass: setting class for V15 to (00007FFDB3B058B8) System.Object  [exact]
 0A00000C
In Compiler::impImportCall: opcode is newobj, kind=0, callRetType is void, structSize is 0

lvaGrabTemp returning 16 (V16 tmp9) called for impAppendStmt.


STMT00028 (IL   ???...  ???)
               [000113] -A-XG-------              *  ASG       ref   
               [000112] D------N----              +--*  LCL_VAR   ref    V16 tmp9         
               [000105] ---XG-------              \--*  FIELD     ref    Head
               [000104] ---XG-------                 \--*  FIELD     ref    _myList
               [000103] ------------                    \--*  LCL_VAR   ref    V00 this         
Marked V16 as a single def temp
Querying runtime about current class of field FalseLeakRepro.List.Head (declared as FalseLeakRepro.Node)
Field's current class not available

lvaSetClass: setting class for V16 to (00007FFDB3EE58A8) FalseLeakRepro.Node 


STMT00027 (IL   ???...  ???)
               [000111] --C-G-------              *  CALL      void   System.Object..ctor
               [000110] ------------ this in rcx  \--*  LCL_VAR   ref    V15 tmp8         

    [ 2] 195 (0x0c3) stfld 04000002

STMT00029 (IL 0x0C3...  ???)
               [000117] -A-XG-------              *  ASG       ref   
               [000116] ---XG--N----              +--*  FIELD     ref    Data
               [000114] ------------              |  \--*  LCL_VAR   ref    V16 tmp9         
               [000115] ------------              \--*  LCL_VAR   ref    V15 tmp8         

    [ 0] 200 (0x0c8) leave.s 00D4
Before import CEE_LEAVE in BB03 (targetting BB07):

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd                 weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..072)-> BB08 (always)                     i newobj 
BB02 [0001]  1                             1       [072..07B)                                     i bwd bwd-target 
BB03 [0002]  1  0                          1       [07B..0CA)-> BB07 (leave ) T0      try { }     keep try newobj bwd 
BB04 [0003]  1     0                       1       [0CA..0CD)-> BB06 ( cond )    H0   finally {   keep bwd 
BB05 [0004]  1     0                       1       [0CD..0D3)                    H0               bwd 
BB06 [0005]  2     0                       1       [0D3..0D4)        (finret)    H0   }           bwd 
BB07 [0006]  1                             1       [0D4..0D8)                                     bwd 
BB08 [0007]  2                             1       [0D8..0DD)-> BB02 ( cond )                     i bwd 
BB09 [0008]  1                             1       [0DD..0F9)                                     
BB10 [0009]  2                             1       [0F9..102)                                     bwd bwd-target 
BB11 [0010]  1  1                          1       [102..122)-> BB13 ( cond ) T1      try {       keep try bwd 
BB12 [0011]  1  1                          1       [122..124)-> BB18 (leave ) T1                  bwd 
BB13 [0012]  1  1                          1       [124..126)-> BB17 (leave ) T1      }           bwd 
BB14 [0013]  1     1                       1       [126..129)-> BB16 ( cond )    H1   finally {   keep bwd 
BB15 [0014]  1     1                       1       [129..12F)                    H1               bwd 
BB16 [0015]  2     1                       1       [12F..130)        (finret)    H1   }           bwd 
BB17 [0016]  1                             1       [130..139)-> BB10 (always)                     bwd 
BB18 [0017]  1                             1       [139..17D)                                     
BB19 [0018]  5                             1       [17D..18F)-> BB21 ( cond )                     bwd bwd-target 
BB20 [0019]  1                             1       [18F..19B)-> BB19 (always)                     bwd 
BB21 [0020]  1                             1       [19B..1A6)-> BB23 ( cond )                     bwd 
BB22 [0021]  1                             1       [1A6..1AD)-> BB19 (always)                     bwd 
BB23 [0022]  1                             1       [1AD..1B8)-> BB25 ( cond )                     bwd 
BB24 [0023]  1                             1       [1B8..1C1)-> BB19 (always)                     bwd 
BB25 [0024]  1                             1       [1C1..1CC)-> BB19 ( cond )                     bwd 
BB26 [0025]  1                             1       [1CC..1D4)        (return)                     
-----------------------------------------------------------------------------------------------------------------------------------------

***************  Exception Handling table
index  eTry, eHnd
  0  ::            - Try at BB03..BB03 [07B..0CA), Finally at BB04..BB06 [0CA..0D4)
  1  ::            - Try at BB11..BB13 [102..126), Finally at BB14..BB16 [126..130)
fgFindInsertPoint(regionIndex=0, putInTryRegion=true, startBlk=BB01, endBlk=BB00, nearBlk=BB03, jumpBlk=BB00, runRarely=false)
fgNewBBinRegion(jumpKind=8, tryIndex=0, hndIndex=0, putInFilter=false, runRarely=false, insertAtEnd=false): inserting after BB03
New Basic Block BB27 [0026] created.
impImportLeave - jumping out of a finally-protected try (EH#0), convert block BB03 to BBJ_ALWAYS, add BBJ_CALLFINALLY block BB27
New Basic Block BB28 [0027] created.
impImportLeave - jumping out of a finally-protected try (EH#0), created step (BBJ_ALWAYS) block BB28
impImportLeave - final destination of step blocks set to BB07

impImportBlockPending for BB07

After import CEE_LEAVE:

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd                 weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..072)-> BB08 (always)                     i newobj 
BB02 [0001]  1                             1       [072..07B)                                     i bwd bwd-target 
BB03 [0002]  1  0                          1       [07B..0CA)-> BB27 (always) T0      try { }     keep try newobj bwd 
BB27 [0026]  1                             1       [???..???)-> BB04 (callf )                     i internal 
BB28 [0027]  0                             1       [???..???)-> BB07 (ALWAYS)                     i internal KEEP 
BB04 [0003]  1     0                       1       [0CA..0CD)-> BB06 ( cond )    H0   finally {   keep bwd 
BB05 [0004]  1     0                       1       [0CD..0D3)                    H0               bwd 
BB06 [0005]  2     0                       1       [0D3..0D4)        (finret)    H0   }           bwd 
BB07 [0006]  1                             1       [0D4..0D8)                                     bwd 
BB08 [0007]  2                             1       [0D8..0DD)-> BB02 ( cond )                     i bwd 
BB09 [0008]  1                             1       [0DD..0F9)                                     
BB10 [0009]  2                             1       [0F9..102)                                     bwd bwd-target 
BB11 [0010]  1  1                          1       [102..122)-> BB13 ( cond ) T1      try {       keep try bwd 
BB12 [0011]  1  1                          1       [122..124)-> BB18 (leave ) T1                  bwd 
BB13 [0012]  1  1                          1       [124..126)-> BB17 (leave ) T1      }           bwd 
BB14 [0013]  1     1                       1       [126..129)-> BB16 ( cond )    H1   finally {   keep bwd 
BB15 [0014]  1     1                       1       [129..12F)                    H1               bwd 
BB16 [0015]  2     1                       1       [12F..130)        (finret)    H1   }           bwd 
BB17 [0016]  1                             1       [130..139)-> BB10 (always)                     bwd 
BB18 [0017]  1                             1       [139..17D)                                     
BB19 [0018]  5                             1       [17D..18F)-> BB21 ( cond )                     bwd bwd-target 
BB20 [0019]  1                             1       [18F..19B)-> BB19 (always)                     bwd 
BB21 [0020]  1                             1       [19B..1A6)-> BB23 ( cond )                     bwd 
BB22 [0021]  1                             1       [1A6..1AD)-> BB19 (always)                     bwd 
BB23 [0022]  1                             1       [1AD..1B8)-> BB25 ( cond )                     bwd 
BB24 [0023]  1                             1       [1B8..1C1)-> BB19 (always)                     bwd 
BB25 [0024]  1                             1       [1C1..1CC)-> BB19 ( cond )                     bwd 
BB26 [0025]  1                             1       [1CC..1D4)        (return)                     
-----------------------------------------------------------------------------------------------------------------------------------------

***************  Exception Handling table
index  eTry, eHnd
  0  ::            - Try at BB03..BB03 [07B..0CA), Finally at BB04..BB06 [0CA..0D4)
  1  ::            - Try at BB11..BB13 [102..126), Finally at BB14..BB16 [126..130)

impImportBlockPending for BB27

Importing BB07 (PC=212) of 'FalseLeakRepro.Program:Run(System.String[]):this'
    [ 0] 212 (0x0d4) ldloc.1
    [ 1] 213 (0x0d5) ldc.i4.1 1
    [ 2] 214 (0x0d6) add
    [ 1] 215 (0x0d7) stloc.1

STMT00030 (IL 0x0D4...  ???)
               [000122] -A----------              *  ASG       int   
               [000121] D------N----              +--*  LCL_VAR   int    V03 loc1         
               [000120] ------------              \--*  ADD       int   
               [000118] ------------                 +--*  LCL_VAR   int    V03 loc1         
               [000119] ------------                 \--*  CNS_INT   int    1

impImportBlockPending for BB08

Importing BB04 (PC=202) of 'FalseLeakRepro.Program:Run(System.String[]):this'
    [ 0] 202 (0x0ca) ldloc.3
    [ 1] 203 (0x0cb) brfalse.s

STMT00031 (IL 0x0CA...  ???)
               [000126] ------------              *  JTRUE     void  
               [000125] ------------              \--*  EQ        int   
               [000123] ------------                 +--*  LCL_VAR   int    V05 loc3         
               [000124] ------------                 \--*  CNS_INT   int    0

impImportBlockPending for BB05

impImportBlockPending for BB06

Importing BB06 (PC=211) of 'FalseLeakRepro.Program:Run(System.String[]):this'
    [ 0] 211 (0x0d3) endfinally

STMT00032 (IL 0x0D3...  ???)
               [000127] ------------              *  RETFILT   void  

Importing BB05 (PC=205) of 'FalseLeakRepro.Program:Run(System.String[]):this'
    [ 0] 205 (0x0cd) ldloc.2
    [ 1] 206 (0x0ce) call 0A000015
In Compiler::impImportCall: opcode is call, kind=0, callRetType is void, structSize is 0
INLINER: during 'impMarkInlineCandidate' result 'failed this callee' reason 'cannot get method info' for 'FalseLeakRepro.Program:Run(System.String[]):this' calling 'System.Threading.Monitor:Exit(System.Object)'

INLINER: Marking System.Threading.Monitor:Exit(System.Object) as NOINLINE because of cannot get method info
INLINER: during 'impMarkInlineCandidate' result 'failed this callee' reason 'cannot get method info'


STMT00033 (IL 0x0CD...  ???)
               [000129] --C-G-------              *  CALL      void   System.Threading.Monitor.Exit
               [000128] ------------ arg0         \--*  LCL_VAR   ref    V04 loc2         

impImportBlockPending for BB06

Importing BB09 (PC=221) of 'FalseLeakRepro.Program:Run(System.String[]):this'
    [ 0] 221 (0x0dd) call 0A00000D
In Compiler::impImportCall: opcode is call, kind=0, callRetType is struct, structSize is 8
INLINER: during 'impMarkInlineCandidate' result 'failed this callee' reason 'noinline per IL/cached result' for 'FalseLeakRepro.Program:Run(System.String[]):this' calling 'System.DateTime:get_Now():System.DateTime'
INLINER: during 'impMarkInlineCandidate' result 'failed this callee' reason 'noinline per IL/cached result'

    [ 1] 226 (0x0e2) stloc.0

STMT00034 (IL 0x0DD...  ???)
               [000133] -AC-G-------              *  ASG       struct (copy)
               [000131] D------N----              +--*  LCL_VAR   struct<System.DateTime, 8> V02 loc0         
               [000130] --C-G-------              \--*  CALL      struct System.DateTime.get_Now

    [ 0] 227 (0x0e3) ldloca.s 0
    [ 1] 229 (0x0e5) call 0A00000E
In Compiler::impImportCall: opcode is call, kind=0, callRetType is ref, structSize is 0

    [ 1] 234 (0x0ea) ldstr 70000075
    [ 2] 239 (0x0ef) call 0A00000F
In Compiler::impImportCall: opcode is call, kind=0, callRetType is ref, structSize is 0

    [ 1] 244 (0x0f4) call 0A000010
In Compiler::impImportCall: opcode is call, kind=0, callRetType is void, structSize is 0
INLINER: during 'impMarkInlineCandidate' result 'failed this callee' reason 'noinline per IL/cached result' for 'FalseLeakRepro.Program:Run(System.String[]):this' calling 'System.Console:WriteLine(System.String)'
INLINER: during 'impMarkInlineCandidate' result 'failed this callee' reason 'noinline per IL/cached result'


STMT00035 (IL 0x0E3...  ???)
               [000139] --C-G-------              *  CALL      void   System.Console.WriteLine
               [000138] --C-G------- arg0         \--*  CALL      ref    System.String.Concat
               [000136] --C-G------- arg0            +--*  CALL      ref    System.DateTime.ToString
               [000135] ------------ this in rcx     |  \--*  ADDR      byref 
               [000134] -------N----                 |     \--*  LCL_VAR   struct<System.DateTime, 8> V02 loc0         
               [000137] ------------ arg1            \--*  CNS_STR   ref   <string constant>

impImportBlockPending for BB10

Importing BB10 (PC=249) of 'FalseLeakRepro.Program:Run(System.String[]):this'
    [ 0] 249 (0x0f9) ldarg.0
    [ 1] 250 (0x0fa) ldfld 04000005
    [ 1] 255 (0x0ff) stloc.2

STMT00036 (IL 0x0F9...  ???)
               [000143] -A-XG-------              *  ASG       ref   
               [000142] D------N----              +--*  LCL_VAR   ref    V04 loc2         
               [000141] ---XG-------              \--*  FIELD     ref    _myList
               [000140] ------------                 \--*  LCL_VAR   ref    V00 this         

    [ 0] 256 (0x100) ldc.i4.0 0
    [ 1] 257 (0x101) stloc.3

STMT00037 (IL 0x100...  ???)
               [000146] -A----------              *  ASG       int   
               [000145] D------N----              +--*  LCL_VAR   int    V05 loc3         
               [000144] ------------              \--*  CNS_INT   int    0

impImportBlockPending for BB11

impImportBlockPending for BB14

Importing BB11 (PC=258) of 'FalseLeakRepro.Program:Run(System.String[]):this'
    [ 0] 258 (0x102) ldloc.2
    [ 1] 259 (0x103) ldloca.s 3
    [ 2] 261 (0x105) call 0A000014
In Compiler::impImportCall: opcode is call, kind=0, callRetType is void, structSize is 0


STMT00038 (IL 0x102...  ???)
               [000150] --C-G-------              *  CALL      void   System.Threading.Monitor.Enter
               [000147] ------------ arg0         +--*  LCL_VAR   ref    V04 loc2         
               [000149] ------------ arg1         \--*  ADDR      byref 
               [000148] -------N----                 \--*  LCL_VAR   int    V05 loc3         

    [ 0] 266 (0x10a) ldarg.0
    [ 1] 267 (0x10b) ldfld 04000005
    [ 1] 272 (0x110) ldfld 04000003
    [ 1] 277 (0x115) ldarg.0
    [ 2] 278 (0x116) ldfld 04000005
    [ 2] 283 (0x11b) ldfld 04000004
    [ 2] 288 (0x120) bne.un.s

STMT00039 (IL 0x10A...  ???)
               [000158] ---XG-------              *  JTRUE     void  
               [000157] N--XG----U--              \--*  NE        int   
               [000153] ---XG-------                 +--*  FIELD     ref    Head
               [000152] ---XG-------                 |  \--*  FIELD     ref    _myList
               [000151] ------------                 |     \--*  LCL_VAR   ref    V00 this         
               [000156] ---XG-------                 \--*  FIELD     ref    Tail
               [000155] ---XG-------                    \--*  FIELD     ref    _myList
               [000154] ------------                       \--*  LCL_VAR   ref    V00 this         

impImportBlockPending for BB12

impImportBlockPending for BB13

Importing BB13 (PC=292) of 'FalseLeakRepro.Program:Run(System.String[]):this'
    [ 0] 292 (0x124) leave.s 0130
Before import CEE_LEAVE in BB13 (targetting BB17):

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd                 weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..072)-> BB08 (always)                     i newobj 
BB02 [0001]  1                             1       [072..07B)                                     i bwd bwd-target 
BB03 [0002]  1  0                          1       [07B..0CA)-> BB27 (always) T0      try { }     keep i try newobj bwd 
BB27 [0026]  1                             1       [???..???)-> BB04 (callf )                     i internal 
BB28 [0027]  0                             1       [???..???)-> BB07 (ALWAYS)                     i internal KEEP 
BB04 [0003]  1     0                       1       [0CA..0CD)-> BB06 ( cond )    H0   finally {   keep i bwd 
BB05 [0004]  1     0                       1       [0CD..0D3)                    H0               i bwd 
BB06 [0005]  2     0                       1       [0D3..0D4)        (finret)    H0   }           i bwd 
BB07 [0006]  1                             1       [0D4..0D8)                                     i bwd 
BB08 [0007]  2                             1       [0D8..0DD)-> BB02 ( cond )                     i bwd 
BB09 [0008]  1                             1       [0DD..0F9)                                     i 
BB10 [0009]  2                             1       [0F9..102)                                     i bwd bwd-target 
BB11 [0010]  1  1                          1       [102..122)-> BB13 ( cond ) T1      try {       keep i try bwd 
BB12 [0011]  1  1                          1       [122..124)-> BB18 (leave ) T1                  bwd 
BB13 [0012]  1  1                          1       [124..126)-> BB17 (leave ) T1      }           bwd 
BB14 [0013]  1     1                       1       [126..129)-> BB16 ( cond )    H1   finally {   keep bwd 
BB15 [0014]  1     1                       1       [129..12F)                    H1               bwd 
BB16 [0015]  2     1                       1       [12F..130)        (finret)    H1   }           bwd 
BB17 [0016]  1                             1       [130..139)-> BB10 (always)                     bwd 
BB18 [0017]  1                             1       [139..17D)                                     
BB19 [0018]  5                             1       [17D..18F)-> BB21 ( cond )                     bwd bwd-target 
BB20 [0019]  1                             1       [18F..19B)-> BB19 (always)                     bwd 
BB21 [0020]  1                             1       [19B..1A6)-> BB23 ( cond )                     bwd 
BB22 [0021]  1                             1       [1A6..1AD)-> BB19 (always)                     bwd 
BB23 [0022]  1                             1       [1AD..1B8)-> BB25 ( cond )                     bwd 
BB24 [0023]  1                             1       [1B8..1C1)-> BB19 (always)                     bwd 
BB25 [0024]  1                             1       [1C1..1CC)-> BB19 ( cond )                     bwd 
BB26 [0025]  1                             1       [1CC..1D4)        (return)                     
-----------------------------------------------------------------------------------------------------------------------------------------

***************  Exception Handling table
index  eTry, eHnd
  0  ::            - Try at BB03..BB03 [07B..0CA), Finally at BB04..BB06 [0CA..0D4)
  1  ::            - Try at BB11..BB13 [102..126), Finally at BB14..BB16 [126..130)
fgFindInsertPoint(regionIndex=0, putInTryRegion=true, startBlk=BB01, endBlk=BB00, nearBlk=BB13, jumpBlk=BB00, runRarely=false)
fgNewBBinRegion(jumpKind=8, tryIndex=0, hndIndex=0, putInFilter=false, runRarely=false, insertAtEnd=false): inserting after BB13
New Basic Block BB29 [0028] created.
impImportLeave - jumping out of a finally-protected try (EH#1), convert block BB13 to BBJ_ALWAYS, add BBJ_CALLFINALLY block BB29
New Basic Block BB30 [0029] created.
impImportLeave - jumping out of a finally-protected try (EH#1), created step (BBJ_ALWAYS) block BB30
impImportLeave - final destination of step blocks set to BB17

impImportBlockPending for BB17

After import CEE_LEAVE:

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd                 weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..072)-> BB08 (always)                     i newobj 
BB02 [0001]  1                             1       [072..07B)                                     i bwd bwd-target 
BB03 [0002]  1  0                          1       [07B..0CA)-> BB27 (always) T0      try { }     keep i try newobj bwd 
BB27 [0026]  1                             1       [???..???)-> BB04 (callf )                     i internal 
BB28 [0027]  0                             1       [???..???)-> BB07 (ALWAYS)                     i internal KEEP 
BB04 [0003]  1     0                       1       [0CA..0CD)-> BB06 ( cond )    H0   finally {   keep i bwd 
BB05 [0004]  1     0                       1       [0CD..0D3)                    H0               i bwd 
BB06 [0005]  2     0                       1       [0D3..0D4)        (finret)    H0   }           i bwd 
BB07 [0006]  1                             1       [0D4..0D8)                                     i bwd 
BB08 [0007]  2                             1       [0D8..0DD)-> BB02 ( cond )                     i bwd 
BB09 [0008]  1                             1       [0DD..0F9)                                     i 
BB10 [0009]  2                             1       [0F9..102)                                     i bwd bwd-target 
BB11 [0010]  1  1                          1       [102..122)-> BB13 ( cond ) T1      try {       keep i try bwd 
BB12 [0011]  1  1                          1       [122..124)-> BB18 (leave ) T1                  bwd 
BB13 [0012]  1  1                          1       [124..126)-> BB29 (always) T1      }           bwd 
BB29 [0028]  1                             1       [???..???)-> BB14 (callf )                     i internal 
BB30 [0029]  0                             1       [???..???)-> BB17 (ALWAYS)                     i internal KEEP 
BB14 [0013]  1     1                       1       [126..129)-> BB16 ( cond )    H1   finally {   keep bwd 
BB15 [0014]  1     1                       1       [129..12F)                    H1               bwd 
BB16 [0015]  2     1                       1       [12F..130)        (finret)    H1   }           bwd 
BB17 [0016]  1                             1       [130..139)-> BB10 (always)                     bwd 
BB18 [0017]  1                             1       [139..17D)                                     
BB19 [0018]  5                             1       [17D..18F)-> BB21 ( cond )                     bwd bwd-target 
BB20 [0019]  1                             1       [18F..19B)-> BB19 (always)                     bwd 
BB21 [0020]  1                             1       [19B..1A6)-> BB23 ( cond )                     bwd 
BB22 [0021]  1                             1       [1A6..1AD)-> BB19 (always)                     bwd 
BB23 [0022]  1                             1       [1AD..1B8)-> BB25 ( cond )                     bwd 
BB24 [0023]  1                             1       [1B8..1C1)-> BB19 (always)                     bwd 
BB25 [0024]  1                             1       [1C1..1CC)-> BB19 ( cond )                     bwd 
BB26 [0025]  1                             1       [1CC..1D4)        (return)                     
-----------------------------------------------------------------------------------------------------------------------------------------

***************  Exception Handling table
index  eTry, eHnd
  0  ::            - Try at BB03..BB03 [07B..0CA), Finally at BB04..BB06 [0CA..0D4)
  1  ::            - Try at BB11..BB13 [102..126), Finally at BB14..BB16 [126..130)

impImportBlockPending for BB29

Importing BB17 (PC=304) of 'FalseLeakRepro.Program:Run(System.String[]):this'
    [ 0] 304 (0x130) ldc.i4.s 100
    [ 1] 306 (0x132) call 0A000016
In Compiler::impImportCall: opcode is call, kind=0, callRetType is void, structSize is 0
INLINER: during 'impMarkInlineCandidate' result 'failed this callee' reason 'noinline per IL/cached result' for 'FalseLeakRepro.Program:Run(System.String[]):this' calling 'System.Threading.Thread:Sleep(int)'
INLINER: during 'impMarkInlineCandidate' result 'failed this callee' reason 'noinline per IL/cached result'


STMT00040 (IL 0x130...  ???)
               [000160] --C-G-------              *  CALL      void   System.Threading.Thread.Sleep
               [000159] ------------ arg0         \--*  CNS_INT   int    100

    [ 0] 311 (0x137) br.s
impImportBlockPending for BB10

Importing BB12 (PC=290) of 'FalseLeakRepro.Program:Run(System.String[]):this'
    [ 0] 290 (0x122) leave.s 0139
Before import CEE_LEAVE in BB12 (targetting BB18):

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd                 weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..072)-> BB08 (always)                     i newobj 
BB02 [0001]  1                             1       [072..07B)                                     i bwd bwd-target 
BB03 [0002]  1  0                          1       [07B..0CA)-> BB27 (always) T0      try { }     keep i try newobj bwd 
BB27 [0026]  1                             1       [???..???)-> BB04 (callf )                     i internal 
BB28 [0027]  0                             1       [???..???)-> BB07 (ALWAYS)                     i internal KEEP 
BB04 [0003]  1     0                       1       [0CA..0CD)-> BB06 ( cond )    H0   finally {   keep i bwd 
BB05 [0004]  1     0                       1       [0CD..0D3)                    H0               i bwd 
BB06 [0005]  2     0                       1       [0D3..0D4)        (finret)    H0   }           i bwd 
BB07 [0006]  1                             1       [0D4..0D8)                                     i bwd 
BB08 [0007]  2                             1       [0D8..0DD)-> BB02 ( cond )                     i bwd 
BB09 [0008]  1                             1       [0DD..0F9)                                     i 
BB10 [0009]  2                             1       [0F9..102)                                     i bwd bwd-target 
BB11 [0010]  1  1                          1       [102..122)-> BB13 ( cond ) T1      try {       keep i try bwd 
BB12 [0011]  1  1                          1       [122..124)-> BB18 (leave ) T1                  bwd 
BB13 [0012]  1  1                          1       [124..126)-> BB29 (always) T1      }           i bwd 
BB29 [0028]  1                             1       [???..???)-> BB14 (callf )                     i internal 
BB30 [0029]  0                             1       [???..???)-> BB17 (ALWAYS)                     i internal KEEP 
BB14 [0013]  1     1                       1       [126..129)-> BB16 ( cond )    H1   finally {   keep bwd 
BB15 [0014]  1     1                       1       [129..12F)                    H1               bwd 
BB16 [0015]  2     1                       1       [12F..130)        (finret)    H1   }           bwd 
BB17 [0016]  1                             1       [130..139)-> BB10 (always)                     i bwd 
BB18 [0017]  1                             1       [139..17D)                                     
BB19 [0018]  5                             1       [17D..18F)-> BB21 ( cond )                     bwd bwd-target 
BB20 [0019]  1                             1       [18F..19B)-> BB19 (always)                     bwd 
BB21 [0020]  1                             1       [19B..1A6)-> BB23 ( cond )                     bwd 
BB22 [0021]  1                             1       [1A6..1AD)-> BB19 (always)                     bwd 
BB23 [0022]  1                             1       [1AD..1B8)-> BB25 ( cond )                     bwd 
BB24 [0023]  1                             1       [1B8..1C1)-> BB19 (always)                     bwd 
BB25 [0024]  1                             1       [1C1..1CC)-> BB19 ( cond )                     bwd 
BB26 [0025]  1                             1       [1CC..1D4)        (return)                     
-----------------------------------------------------------------------------------------------------------------------------------------

***************  Exception Handling table
index  eTry, eHnd
  0  ::            - Try at BB03..BB03 [07B..0CA), Finally at BB04..BB06 [0CA..0D4)
  1  ::            - Try at BB11..BB13 [102..126), Finally at BB14..BB16 [126..130)
fgFindInsertPoint(regionIndex=0, putInTryRegion=true, startBlk=BB01, endBlk=BB00, nearBlk=BB12, jumpBlk=BB00, runRarely=false)
fgNewBBinRegion(jumpKind=8, tryIndex=0, hndIndex=0, putInFilter=false, runRarely=false, insertAtEnd=false): inserting after BB13
New Basic Block BB31 [0030] created.
impImportLeave - jumping out of a finally-protected try (EH#1), convert block BB12 to BBJ_ALWAYS, add BBJ_CALLFINALLY block BB31
New Basic Block BB32 [0031] created.
impImportLeave - jumping out of a finally-protected try (EH#1), created step (BBJ_ALWAYS) block BB32
impImportLeave - final destination of step blocks set to BB18

impImportBlockPending for BB18

After import CEE_LEAVE:

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd                 weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..072)-> BB08 (always)                     i newobj 
BB02 [0001]  1                             1       [072..07B)                                     i bwd bwd-target 
BB03 [0002]  1  0                          1       [07B..0CA)-> BB27 (always) T0      try { }     keep i try newobj bwd 
BB27 [0026]  1                             1       [???..???)-> BB04 (callf )                     i internal 
BB28 [0027]  0                             1       [???..???)-> BB07 (ALWAYS)                     i internal KEEP 
BB04 [0003]  1     0                       1       [0CA..0CD)-> BB06 ( cond )    H0   finally {   keep i bwd 
BB05 [0004]  1     0                       1       [0CD..0D3)                    H0               i bwd 
BB06 [0005]  2     0                       1       [0D3..0D4)        (finret)    H0   }           i bwd 
BB07 [0006]  1                             1       [0D4..0D8)                                     i bwd 
BB08 [0007]  2                             1       [0D8..0DD)-> BB02 ( cond )                     i bwd 
BB09 [0008]  1                             1       [0DD..0F9)                                     i 
BB10 [0009]  2                             1       [0F9..102)                                     i bwd bwd-target 
BB11 [0010]  1  1                          1       [102..122)-> BB13 ( cond ) T1      try {       keep i try bwd 
BB12 [0011]  1  1                          1       [122..124)-> BB31 (always) T1                  bwd 
BB13 [0012]  1  1                          1       [124..126)-> BB29 (always) T1      }           i bwd 
BB31 [0030]  1                             1       [???..???)-> BB14 (callf )                     i internal 
BB32 [0031]  0                             1       [???..???)-> BB18 (ALWAYS)                     i internal KEEP 
BB29 [0028]  1                             1       [???..???)-> BB14 (callf )                     i internal 
BB30 [0029]  0                             1       [???..???)-> BB17 (ALWAYS)                     i internal KEEP 
BB14 [0013]  1     1                       1       [126..129)-> BB16 ( cond )    H1   finally {   keep bwd 
BB15 [0014]  1     1                       1       [129..12F)                    H1               bwd 
BB16 [0015]  2     1                       1       [12F..130)        (finret)    H1   }           bwd 
BB17 [0016]  1                             1       [130..139)-> BB10 (always)                     i bwd 
BB18 [0017]  1                             1       [139..17D)                                     
BB19 [0018]  5                             1       [17D..18F)-> BB21 ( cond )                     bwd bwd-target 
BB20 [0019]  1                             1       [18F..19B)-> BB19 (always)                     bwd 
BB21 [0020]  1                             1       [19B..1A6)-> BB23 ( cond )                     bwd 
BB22 [0021]  1                             1       [1A6..1AD)-> BB19 (always)                     bwd 
BB23 [0022]  1                             1       [1AD..1B8)-> BB25 ( cond )                     bwd 
BB24 [0023]  1                             1       [1B8..1C1)-> BB19 (always)                     bwd 
BB25 [0024]  1                             1       [1C1..1CC)-> BB19 ( cond )                     bwd 
BB26 [0025]  1                             1       [1CC..1D4)        (return)                     
-----------------------------------------------------------------------------------------------------------------------------------------

***************  Exception Handling table
index  eTry, eHnd
  0  ::            - Try at BB03..BB03 [07B..0CA), Finally at BB04..BB06 [0CA..0D4)
  1  ::            - Try at BB11..BB13 [102..126), Finally at BB14..BB16 [126..130)

impImportBlockPending for BB31

Importing BB18 (PC=313) of 'FalseLeakRepro.Program:Run(System.String[]):this'
    [ 0] 313 (0x139) call 0A00000D
In Compiler::impImportCall: opcode is call, kind=0, callRetType is struct, structSize is 8
INLINER: during 'impMarkInlineCandidate' result 'failed this callee' reason 'noinline per IL/cached result' for 'FalseLeakRepro.Program:Run(System.String[]):this' calling 'System.DateTime:get_Now():System.DateTime'
INLINER: during 'impMarkInlineCandidate' result 'failed this callee' reason 'noinline per IL/cached result'

    [ 1] 318 (0x13e) stloc.0

STMT00041 (IL 0x139...  ???)
               [000164] -AC-G-------              *  ASG       struct (copy)
               [000162] D------N----              +--*  LCL_VAR   struct<System.DateTime, 8> V02 loc0         
               [000161] --C-G-------              \--*  CALL      struct System.DateTime.get_Now

    [ 0] 319 (0x13f) ldloca.s 0
    [ 1] 321 (0x141) call 0A00000E
In Compiler::impImportCall: opcode is call, kind=0, callRetType is ref, structSize is 0

    [ 1] 326 (0x146) ldstr 700000CF
    [ 2] 331 (0x14b) call 0A00000F
In Compiler::impImportCall: opcode is call, kind=0, callRetType is ref, structSize is 0

    [ 1] 336 (0x150) call 0A000010
In Compiler::impImportCall: opcode is call, kind=0, callRetType is void, structSize is 0
INLINER: during 'impMarkInlineCandidate' result 'failed this callee' reason 'noinline per IL/cached result' for 'FalseLeakRepro.Program:Run(System.String[]):this' calling 'System.Console:WriteLine(System.String)'
INLINER: during 'impMarkInlineCandidate' result 'failed this callee' reason 'noinline per IL/cached result'


STMT00042 (IL 0x13F...  ???)
               [000170] --C-G-------              *  CALL      void   System.Console.WriteLine
               [000169] --C-G------- arg0         \--*  CALL      ref    System.String.Concat
               [000167] --C-G------- arg0            +--*  CALL      ref    System.DateTime.ToString
               [000166] ------------ this in rcx     |  \--*  ADDR      byref 
               [000165] -------N----                 |     \--*  LCL_VAR   struct<System.DateTime, 8> V02 loc0         
               [000168] ------------ arg1            \--*  CNS_STR   ref   <string constant>

    [ 0] 341 (0x155) ldstr 7000012F
    [ 1] 346 (0x15a) call 0A000010
In Compiler::impImportCall: opcode is call, kind=0, callRetType is void, structSize is 0
INLINER: during 'impMarkInlineCandidate' result 'failed this callee' reason 'noinline per IL/cached result' for 'FalseLeakRepro.Program:Run(System.String[]):this' calling 'System.Console:WriteLine(System.String)'
INLINER: during 'impMarkInlineCandidate' result 'failed this callee' reason 'noinline per IL/cached result'


STMT00043 (IL 0x155...  ???)
               [000172] --C-G-------              *  CALL      void   System.Console.WriteLine
               [000171] ------------ arg0         \--*  CNS_STR   ref   <string constant>

    [ 0] 351 (0x15f) ldstr 70000147
    [ 1] 356 (0x164) call 0A000010
In Compiler::impImportCall: opcode is call, kind=0, callRetType is void, structSize is 0
INLINER: during 'impMarkInlineCandidate' result 'failed this callee' reason 'noinline per IL/cached result' for 'FalseLeakRepro.Program:Run(System.String[]):this' calling 'System.Console:WriteLine(System.String)'
INLINER: during 'impMarkInlineCandidate' result 'failed this callee' reason 'noinline per IL/cached result'


STMT00044 (IL 0x15F...  ???)
               [000174] --C-G-------              *  CALL      void   System.Console.WriteLine
               [000173] ------------ arg0         \--*  CNS_STR   ref   <string constant>

    [ 0] 361 (0x169) ldstr 70000171
    [ 1] 366 (0x16e) call 0A000010
In Compiler::impImportCall: opcode is call, kind=0, callRetType is void, structSize is 0
INLINER: during 'impMarkInlineCandidate' result 'failed this callee' reason 'noinline per IL/cached result' for 'FalseLeakRepro.Program:Run(System.String[]):this' calling 'System.Console:WriteLine(System.String)'
INLINER: during 'impMarkInlineCandidate' result 'failed this callee' reason 'noinline per IL/cached result'


STMT00045 (IL 0x169...  ???)
               [000176] --C-G-------              *  CALL      void   System.Console.WriteLine
               [000175] ------------ arg0         \--*  CNS_STR   ref   <string constant>

    [ 0] 371 (0x173) ldstr 70000199
    [ 1] 376 (0x178) call 0A000010
In Compiler::impImportCall: opcode is call, kind=0, callRetType is void, structSize is 0
INLINER: during 'impMarkInlineCandidate' result 'failed this callee' reason 'noinline per IL/cached result' for 'FalseLeakRepro.Program:Run(System.String[]):this' calling 'System.Console:WriteLine(System.String)'
INLINER: during 'impMarkInlineCandidate' result 'failed this callee' reason 'noinline per IL/cached result'


STMT00046 (IL 0x173...  ???)
               [000178] --C-G-------              *  CALL      void   System.Console.WriteLine
               [000177] ------------ arg0         \--*  CNS_STR   ref   <string constant>

impImportBlockPending for BB19

Importing BB19 (PC=381) of 'FalseLeakRepro.Program:Run(System.String[]):this'
    [ 0] 381 (0x17d) call 0A000017
In Compiler::impImportCall: opcode is call, kind=0, callRetType is struct, structSize is 12


STMT00047 (IL 0x17D...  ???)
               [000179] I-C-G-------              *  CALL      struct System.Console.ReadKey (exactContextHnd=0x00007FFDB3EE56C9)

    [ 1] 386 (0x182) stloc.s 4

STMT00048 (IL   ???...  ???)
               [000180] --C---------              *  RET_EXPR  void  (inl return expr [000179])

    [ 0] 388 (0x184) ldloca.s 4
    [ 1] 390 (0x186) call 0A000018
In Compiler::impImportCall: opcode is call, kind=0, callRetType is int, structSize is 0


STMT00049 (IL 0x184...  ???)
               [000185] I-C-G-------              *  CALL      int    System.ConsoleKeyInfo.get_Key (exactContextHnd=0x00007FFDB3EE36E9)
               [000184] ------------ this in rcx  \--*  ADDR      byref 
               [000183] -------N----                 \--*  LCL_VAR   struct<System.ConsoleKeyInfo, 12> V06 loc4         

    [ 1] 395 (0x18b) ldc.i4.s 71
    [ 2] 397 (0x18d) bne.un.s

STMT00050 (IL   ???...  ???)
               [000189] --C---------              *  JTRUE     void  
               [000188] N-C------U--              \--*  NE        int   
               [000186] --C---------                 +--*  RET_EXPR  int   (inl return expr [000185])
               [000187] ------------                 \--*  CNS_INT   int    71

impImportBlockPending for BB20

impImportBlockPending for BB21

Importing BB21 (PC=411) of 'FalseLeakRepro.Program:Run(System.String[]):this'
    [ 0] 411 (0x19b) ldloca.s 4
    [ 1] 413 (0x19d) call 0A000018
In Compiler::impImportCall: opcode is call, kind=0, callRetType is int, structSize is 0


STMT00051 (IL 0x19B...  ???)
               [000192] I-C-G-------              *  CALL      int    System.ConsoleKeyInfo.get_Key (exactContextHnd=0x00007FFDB3EE36E9)
               [000191] ------------ this in rcx  \--*  ADDR      byref 
               [000190] -------N----                 \--*  LCL_VAR   struct<System.ConsoleKeyInfo, 12> V06 loc4         

    [ 1] 418 (0x1a2) ldc.i4.s 72
    [ 2] 420 (0x1a4) bne.un.s

STMT00052 (IL   ???...  ???)
               [000196] --C---------              *  JTRUE     void  
               [000195] N-C------U--              \--*  NE        int   
               [000193] --C---------                 +--*  RET_EXPR  int   (inl return expr [000192])
               [000194] ------------                 \--*  CNS_INT   int    72

impImportBlockPending for BB22

impImportBlockPending for BB23

Importing BB23 (PC=429) of 'FalseLeakRepro.Program:Run(System.String[]):this'
    [ 0] 429 (0x1ad) ldloca.s 4
    [ 1] 431 (0x1af) call 0A000018
In Compiler::impImportCall: opcode is call, kind=0, callRetType is int, structSize is 0


STMT00053 (IL 0x1AD...  ???)
               [000199] I-C-G-------              *  CALL      int    System.ConsoleKeyInfo.get_Key (exactContextHnd=0x00007FFDB3EE36E9)
               [000198] ------------ this in rcx  \--*  ADDR      byref 
               [000197] -------N----                 \--*  LCL_VAR   struct<System.ConsoleKeyInfo, 12> V06 loc4         

    [ 1] 436 (0x1b4) ldc.i4.s 82
    [ 2] 438 (0x1b6) bne.un.s

STMT00054 (IL   ???...  ???)
               [000203] --C---------              *  JTRUE     void  
               [000202] N-C------U--              \--*  NE        int   
               [000200] --C---------                 +--*  RET_EXPR  int   (inl return expr [000199])
               [000201] ------------                 \--*  CNS_INT   int    82

impImportBlockPending for BB24

impImportBlockPending for BB25

Importing BB25 (PC=449) of 'FalseLeakRepro.Program:Run(System.String[]):this'
    [ 0] 449 (0x1c1) ldloca.s 4
    [ 1] 451 (0x1c3) call 0A000018
In Compiler::impImportCall: opcode is call, kind=0, callRetType is int, structSize is 0


STMT00055 (IL 0x1C1...  ???)
               [000206] I-C-G-------              *  CALL      int    System.ConsoleKeyInfo.get_Key (exactContextHnd=0x00007FFDB3EE36E9)
               [000205] ------------ this in rcx  \--*  ADDR      byref 
               [000204] -------N----                 \--*  LCL_VAR   struct<System.ConsoleKeyInfo, 12> V06 loc4         

    [ 1] 456 (0x1c8) ldc.i4.s 81
    [ 2] 458 (0x1ca) bne.un.s

STMT00056 (IL   ???...  ???)
               [000210] --C---------              *  JTRUE     void  
               [000209] N-C------U--              \--*  NE        int   
               [000207] --C---------                 +--*  RET_EXPR  int   (inl return expr [000206])
               [000208] ------------                 \--*  CNS_INT   int    81

impImportBlockPending for BB26

impImportBlockPending for BB19

Importing BB26 (PC=460) of 'FalseLeakRepro.Program:Run(System.String[]):this'
    [ 0] 460 (0x1cc) ldarg.0
    [ 1] 461 (0x1cd) ldc.i4.0 0
    [ 2] 462 (0x1ce) stfld 04000006

STMT00057 (IL 0x1CC...  ???)
               [000214] -A-XG-------              *  ASG       bool  
               [000213] ---XG--N----              +--*  FIELD     bool   _running
               [000211] ------------              |  \--*  LCL_VAR   ref    V00 this         
               [000212] ------------              \--*  CNS_INT   int    0

    [ 0] 467 (0x1d3) ret

STMT00058 (IL 0x1D3...  ???)
               [000215] ------------              *  RETURN    void  

Importing BB24 (PC=440) of 'FalseLeakRepro.Program:Run(System.String[]):this'
    [ 0] 440 (0x1b8) ldarg.0
    [ 1] 441 (0x1b9) ldc.i4.0 0
    [ 2] 442 (0x1ba) stfld 04000006

STMT00059 (IL 0x1B8...  ???)
               [000219] -A-XG-------              *  ASG       bool  
               [000218] ---XG--N----              +--*  FIELD     bool   _running
               [000216] ------------              |  \--*  LCL_VAR   ref    V00 this         
               [000217] ------------              \--*  CNS_INT   int    0

    [ 0] 447 (0x1bf) br.s
impImportBlockPending for BB19

Importing BB22 (PC=422) of 'FalseLeakRepro.Program:Run(System.String[]):this'
    [ 0] 422 (0x1a6) call 0A00001B
In Compiler::impImportCall: opcode is call, kind=0, callRetType is void, structSize is 0
INLINER: during 'impMarkInlineCandidate' result 'failed this callee' reason 'noinline per IL/cached result' for 'FalseLeakRepro.Program:Run(System.String[]):this' calling 'System.Diagnostics.Debugger:Break()'
INLINER: during 'impMarkInlineCandidate' result 'failed this callee' reason 'noinline per IL/cached result'


STMT00060 (IL 0x1A6...  ???)
               [000220] --C-G-------              *  CALL      void   System.Diagnostics.Debugger.Break

    [ 0] 427 (0x1ab) br.s
impImportBlockPending for BB19

Importing BB20 (PC=399) of 'FalseLeakRepro.Program:Run(System.String[]):this'
    [ 0] 399 (0x18f) call 0A000019
In Compiler::impImportCall: opcode is call, kind=0, callRetType is int, structSize is 0

    [ 1] 404 (0x194) call 0A00001A
In Compiler::impImportCall: opcode is call, kind=0, callRetType is void, structSize is 0


STMT00061 (IL 0x18F...  ???)
               [000222] --C-G-------              *  CALL      void   System.GC.Collect
               [000221] --C-G------- arg0         \--*  CALL      int    System.GC.get_MaxGeneration

    [ 0] 409 (0x199) br.s
impImportBlockPending for BB19

Importing BB14 (PC=294) of 'FalseLeakRepro.Program:Run(System.String[]):this'
    [ 0] 294 (0x126) ldloc.3
    [ 1] 295 (0x127) brfalse.s

STMT00062 (IL 0x126...  ???)
               [000226] ------------              *  JTRUE     void  
               [000225] ------------              \--*  EQ        int   
               [000223] ------------                 +--*  LCL_VAR   int    V05 loc3         
               [000224] ------------                 \--*  CNS_INT   int    0

impImportBlockPending for BB15

impImportBlockPending for BB16

Importing BB16 (PC=303) of 'FalseLeakRepro.Program:Run(System.String[]):this'
    [ 0] 303 (0x12f) endfinally

STMT00063 (IL 0x12F...  ???)
               [000227] ------------              *  RETFILT   void  

Importing BB15 (PC=297) of 'FalseLeakRepro.Program:Run(System.String[]):this'
    [ 0] 297 (0x129) ldloc.2
    [ 1] 298 (0x12a) call 0A000015
In Compiler::impImportCall: opcode is call, kind=0, callRetType is void, structSize is 0
INLINER: during 'impMarkInlineCandidate' result 'failed this callee' reason 'noinline per IL/cached result' for 'FalseLeakRepro.Program:Run(System.String[]):this' calling 'System.Threading.Monitor:Exit(System.Object)'
INLINER: during 'impMarkInlineCandidate' result 'failed this callee' reason 'noinline per IL/cached result'


STMT00064 (IL 0x129...  ???)
               [000229] --C-G-------              *  CALL      void   System.Threading.Monitor.Exit
               [000228] ------------ arg0         \--*  LCL_VAR   ref    V04 loc2         

impImportBlockPending for BB16

After impImport() added block for try,catch,finally
-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd                 weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..072)-> BB08 (always)                     i newobj 
BB02 [0001]  1                             1       [072..07B)                                     i bwd bwd-target 
BB03 [0002]  1  0                          1       [07B..0CA)-> BB27 (always) T0      try { }     keep i try newobj bwd 
BB27 [0026]  1                             1       [???..???)-> BB04 (callf )                     i internal 
BB28 [0027]  0                             1       [???..???)-> BB07 (ALWAYS)                     i internal KEEP 
BB04 [0003]  1     0                       1       [0CA..0CD)-> BB06 ( cond )    H0   finally {   keep i bwd 
BB05 [0004]  1     0                       1       [0CD..0D3)                    H0               i bwd 
BB06 [0005]  2     0                       1       [0D3..0D4)        (finret)    H0   }           i bwd 
BB07 [0006]  1                             1       [0D4..0D8)                                     i bwd 
BB08 [0007]  2                             1       [0D8..0DD)-> BB02 ( cond )                     i bwd 
BB09 [0008]  1                             1       [0DD..0F9)                                     i 
BB10 [0009]  2                             1       [0F9..102)                                     i bwd bwd-target 
BB11 [0010]  1  1                          1       [102..122)-> BB13 ( cond ) T1      try {       keep i try bwd 
BB12 [0011]  1  1                          1       [122..124)-> BB31 (always) T1                  i bwd 
BB13 [0012]  1  1                          1       [124..126)-> BB29 (always) T1      }           i bwd 
BB31 [0030]  1                             1       [???..???)-> BB14 (callf )                     i internal 
BB32 [0031]  0                             1       [???..???)-> BB18 (ALWAYS)                     i internal KEEP 
BB29 [0028]  1                             1       [???..???)-> BB14 (callf )                     i internal 
BB30 [0029]  0                             1       [???..???)-> BB17 (ALWAYS)                     i internal KEEP 
BB14 [0013]  1     1                       1       [126..129)-> BB16 ( cond )    H1   finally {   keep i bwd 
BB15 [0014]  1     1                       1       [129..12F)                    H1               i bwd 
BB16 [0015]  2     1                       1       [12F..130)        (finret)    H1   }           i bwd 
BB17 [0016]  1                             1       [130..139)-> BB10 (always)                     i bwd 
BB18 [0017]  1                             1       [139..17D)                                     i 
BB19 [0018]  5                             1       [17D..18F)-> BB21 ( cond )                     i bwd bwd-target 
BB20 [0019]  1                             1       [18F..19B)-> BB19 (always)                     i bwd 
BB21 [0020]  1                             1       [19B..1A6)-> BB23 ( cond )                     i bwd 
BB22 [0021]  1                             1       [1A6..1AD)-> BB19 (always)                     i bwd 
BB23 [0022]  1                             1       [1AD..1B8)-> BB25 ( cond )                     i bwd 
BB24 [0023]  1                             1       [1B8..1C1)-> BB19 (always)                     i bwd 
BB25 [0024]  1                             1       [1C1..1CC)-> BB19 ( cond )                     i bwd 
BB26 [0025]  1                             1       [1CC..1D4)        (return)                     i 
-----------------------------------------------------------------------------------------------------------------------------------------


** Note: root method IL was partially imported -- imported 464 of 468 bytes of method IL

*************** Finishing PHASE Importation
Trees after Importation

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd                 weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..072)-> BB08 (always)                     i newobj 
BB02 [0001]  1                             1       [072..07B)                                     i bwd bwd-target 
BB03 [0002]  1  0                          1       [07B..0CA)-> BB27 (always) T0      try { }     keep i try newobj bwd 
BB27 [0026]  1                             1       [???..???)-> BB04 (callf )                     i internal 
BB28 [0027]  0                             1       [???..???)-> BB07 (ALWAYS)                     i internal KEEP 
BB04 [0003]  1     0                       1       [0CA..0CD)-> BB06 ( cond )    H0   finally {   keep i bwd 
BB05 [0004]  1     0                       1       [0CD..0D3)                    H0               i bwd 
BB06 [0005]  2     0                       1       [0D3..0D4)        (finret)    H0   }           i bwd 
BB07 [0006]  1                             1       [0D4..0D8)                                     i bwd 
BB08 [0007]  2                             1       [0D8..0DD)-> BB02 ( cond )                     i bwd 
BB09 [0008]  1                             1       [0DD..0F9)                                     i 
BB10 [0009]  2                             1       [0F9..102)                                     i bwd bwd-target 
BB11 [0010]  1  1                          1       [102..122)-> BB13 ( cond ) T1      try {       keep i try bwd 
BB12 [0011]  1  1                          1       [122..124)-> BB31 (always) T1                  i bwd 
BB13 [0012]  1  1                          1       [124..126)-> BB29 (always) T1      }           i bwd 
BB31 [0030]  1                             1       [???..???)-> BB14 (callf )                     i internal 
BB32 [0031]  0                             1       [???..???)-> BB18 (ALWAYS)                     i internal KEEP 
BB29 [0028]  1                             1       [???..???)-> BB14 (callf )                     i internal 
BB30 [0029]  0                             1       [???..???)-> BB17 (ALWAYS)                     i internal KEEP 
BB14 [0013]  1     1                       1       [126..129)-> BB16 ( cond )    H1   finally {   keep i bwd 
BB15 [0014]  1     1                       1       [129..12F)                    H1               i bwd 
BB16 [0015]  2     1                       1       [12F..130)        (finret)    H1   }           i bwd 
BB17 [0016]  1                             1       [130..139)-> BB10 (always)                     i bwd 
BB18 [0017]  1                             1       [139..17D)                                     i 
BB19 [0018]  5                             1       [17D..18F)-> BB21 ( cond )                     i bwd bwd-target 
BB20 [0019]  1                             1       [18F..19B)-> BB19 (always)                     i bwd 
BB21 [0020]  1                             1       [19B..1A6)-> BB23 ( cond )                     i bwd 
BB22 [0021]  1                             1       [1A6..1AD)-> BB19 (always)                     i bwd 
BB23 [0022]  1                             1       [1AD..1B8)-> BB25 ( cond )                     i bwd 
BB24 [0023]  1                             1       [1B8..1C1)-> BB19 (always)                     i bwd 
BB25 [0024]  1                             1       [1C1..1CC)-> BB19 ( cond )                     i bwd 
BB26 [0025]  1                             1       [1CC..1D4)        (return)                     i 
-----------------------------------------------------------------------------------------------------------------------------------------

------------ BB01 [000..072) -> BB08 (always), preds={} succs={BB08}

***** BB01
STMT00000 (IL 0x000...0x005)
               [000003] -AC-G-------              *  ASG       struct (copy)
               [000001] D------N----              +--*  LCL_VAR   struct<System.DateTime, 8> V02 loc0         
               [000000] --C-G-------              \--*  CALL      struct System.DateTime.get_Now

***** BB01
STMT00001 (IL 0x006...0x022)
               [000009] --C-G-------              *  CALL      void   System.Console.WriteLine
               [000008] --C-G------- arg0         \--*  CALL      ref    System.String.Concat
               [000006] --C-G------- arg0            +--*  CALL      ref    System.DateTime.ToString
               [000005] ------------ this in rcx     |  \--*  ADDR      byref 
               [000004] -------N----                 |     \--*  LCL_VAR   struct<System.DateTime, 8> V02 loc0         
               [000007] ------------ arg1            \--*  CNS_STR   ref   <string constant>

***** BB01
STMT00002 (IL 0x01C...  ???)
               [000014] -A----------              *  ASG       ref   
               [000013] D------N----              +--*  LCL_VAR   ref    V08 tmp1         
               [000012] ------------              \--*  ALLOCOBJ  ref   
               [000011] H-----------                 \--*  CNS_INT(h) long   0x7ffdb3ee2350 method

***** BB01
STMT00003 (IL   ???...  ???)
               [000016] I-C-G-------              *  CALL      void   FalseLeakRepro.List..ctor (exactContextHnd=0x00007FFDB3EE2351)
               [000015] ------------ this in rcx  \--*  LCL_VAR   ref    V08 tmp1         

***** BB01
STMT00004 (IL 0x022...  ???)
               [000019] -A-XG-------              *  ASG       ref   
               [000018] ---XG--N----              +--*  FIELD     ref    _myList
               [000010] ------------              |  \--*  LCL_VAR   ref    V00 this         
               [000017] ------------              \--*  LCL_VAR   ref    V08 tmp1         

***** BB01
STMT00005 (IL 0x027...0x037)
               [000026] -A----------              *  ASG       ref   
               [000025] D------N----              +--*  LCL_VAR   ref    V09 tmp2         
               [000024] ------------              \--*  ALLOCOBJ  ref   
               [000023] H-----------                 \--*  CNS_INT(h) long   0x7ffdb3b058b8 token

***** BB01
STMT00007 (IL   ???...  ???)
               [000030] -A-XG-------              *  ASG       ref   
               [000029] D------N----              +--*  LCL_VAR   ref    V10 tmp3         
               [000022] ---XG-------              \--*  FIELD     ref    Head
               [000021] ---XG-------                 \--*  FIELD     ref    _myList
               [000020] ------------                    \--*  LCL_VAR   ref    V00 this         

***** BB01
STMT00006 (IL   ???...  ???)
               [000028] --C-G-------              *  CALL      void   System.Object..ctor
               [000027] ------------ this in rcx  \--*  LCL_VAR   ref    V09 tmp2         

***** BB01
STMT00008 (IL 0x037...  ???)
               [000034] -A-XG-------              *  ASG       ref   
               [000033] ---XG--N----              +--*  FIELD     ref    Data
               [000031] ------------              |  \--*  LCL_VAR   ref    V10 tmp3         
               [000032] ------------              \--*  LCL_VAR   ref    V09 tmp2         

***** BB01
STMT00009 (IL 0x03C...0x057)
               [000040] -A----------              *  ASG       ref   
               [000039] D------N----              +--*  LCL_VAR   ref    V11 tmp4         
               [000038] ------------              \--*  ALLOCOBJ  ref   
               [000037] H-----------                 \--*  CNS_INT(h) long   0x7ffdb3ee6200 token

***** BB01
STMT00010 (IL   ???...  ???)
               [000042] --C-G-------              *  CALL      void   System.MulticastDelegate.CtorClosed
               [000041] ------------ this in rcx  +--*  LCL_VAR   ref    V11 tmp4         
               [000035] ------------ arg1         +--*  LCL_VAR   ref    V00 this         
               [000036] ------------ arg2         \--*  FTN_ADDR  long   FalseLeakRepro.Program.<Run>b__3_0


***** BB01
STMT00011 (IL 0x048...  ???)
               [000047] -A----------              *  ASG       ref   
               [000046] D------N----              +--*  LCL_VAR   ref    V12 tmp5         
               [000045] ------------              \--*  ALLOCOBJ  ref   
               [000044] H-----------                 \--*  CNS_INT(h) long   0x7ffdb3c84e80 token

***** BB01
STMT00012 (IL   ???...  ???)
               [000049] --C-G-------              *  CALL      void   System.Threading.Thread..ctor
               [000048] ------------ this in rcx  +--*  LCL_VAR   ref    V12 tmp5         
               [000043] ------------ arg1         \--*  LCL_VAR   ref    V11 tmp4         

***** BB01
STMT00013 (IL 0x04D...  ???)
               [000051] --C-G-------              *  CALL nullcheck void   System.Threading.Thread.Start
               [000050] ------------ this in rcx  \--*  LCL_VAR   ref    V12 tmp5         

***** BB01
STMT00014 (IL 0x052...  ???)
               [000055] -AC-G-------              *  ASG       struct (copy)
               [000053] D------N----              +--*  LCL_VAR   struct<System.DateTime, 8> V02 loc0         
               [000052] --C-G-------              \--*  CALL      struct System.DateTime.get_Now

***** BB01
STMT00015 (IL 0x058...0x06F)
               [000061] --C-G-------              *  CALL      void   System.Console.WriteLine
               [000060] --C-G------- arg0         \--*  CALL      ref    System.String.Concat
               [000058] --C-G------- arg0            +--*  CALL      ref    System.DateTime.ToString
               [000057] ------------ this in rcx     |  \--*  ADDR      byref 
               [000056] -------N----                 |     \--*  LCL_VAR   struct<System.DateTime, 8> V02 loc0         
               [000059] ------------ arg1            \--*  CNS_STR   ref   <string constant>

***** BB01
STMT00016 (IL 0x06E...  ???)
               [000064] -A----------              *  ASG       int   
               [000063] D------N----              +--*  LCL_VAR   int    V03 loc1         
               [000062] ------------              \--*  CNS_INT   int    0

------------ BB02 [072..07B), preds={} succs={BB03}

***** BB02
STMT00018 (IL 0x072...0x078)
               [000072] -A-XG-------              *  ASG       ref   
               [000071] D------N----              +--*  LCL_VAR   ref    V04 loc2         
               [000070] ---XG-------              \--*  FIELD     ref    _myList
               [000069] ------------                 \--*  LCL_VAR   ref    V00 this         

***** BB02
STMT00019 (IL 0x079...0x07A)
               [000075] -A----------              *  ASG       int   
               [000074] D------N----              +--*  LCL_VAR   int    V05 loc3         
               [000073] ------------              \--*  CNS_INT   int    0

------------ BB03 [07B..0CA) -> BB27 (always), preds={} succs={BB27}

***** BB03
STMT00020 (IL 0x07B...0x093)
               [000079] --C-G-------              *  CALL      void   System.Threading.Monitor.Enter
               [000076] ------------ arg0         +--*  LCL_VAR   ref    V04 loc2         
               [000078] ------------ arg1         \--*  ADDR      byref 
               [000077] -------N----                 \--*  LCL_VAR   int    V05 loc3         

***** BB03
STMT00021 (IL 0x083...  ???)
               [000086] -A----------              *  ASG       ref   
               [000085] D------N----              +--*  LCL_VAR   ref    V13 tmp6         
               [000084] ------------              \--*  ALLOCOBJ  ref   
               [000083] H-----------                 \--*  CNS_INT(h) long   0x7ffdb3ee58a8 method

***** BB03
STMT00023 (IL   ???...  ???)
               [000090] -A-XG-------              *  ASG       ref   
               [000089] D------N----              +--*  LCL_VAR   ref    V14 tmp7         
               [000082] ---XG-------              \--*  FIELD     ref    Head
               [000081] ---XG-------                 \--*  FIELD     ref    _myList
               [000080] ------------                    \--*  LCL_VAR   ref    V00 this         

***** BB03
STMT00022 (IL   ???...  ???)
               [000088] I-C-G-------              *  CALL      void   FalseLeakRepro.Node..ctor (exactContextHnd=0x00007FFDB3EE58A9)
               [000087] ------------ this in rcx  \--*  LCL_VAR   ref    V13 tmp6         

***** BB03
STMT00024 (IL 0x093...  ???)
               [000094] -A-XG-------              *  ASG       ref   
               [000093] ---XG--N----              +--*  FIELD     ref    Next
               [000091] ------------              |  \--*  LCL_VAR   ref    V14 tmp7         
               [000092] ------------              \--*  LCL_VAR   ref    V13 tmp6         

***** BB03
STMT00025 (IL 0x098...0x0AE)
               [000102] -A-XG-------              *  ASG       ref   
               [000101] ---XG--N----              +--*  FIELD     ref    Head
               [000096] ---XG-------              |  \--*  FIELD     ref    _myList
               [000095] ------------              |     \--*  LCL_VAR   ref    V00 this         
               [000100] ---XG-------              \--*  FIELD     ref    Next
               [000099] ---XG-------                 \--*  FIELD     ref    Head
               [000098] ---XG-------                    \--*  FIELD     ref    _myList
               [000097] ------------                       \--*  LCL_VAR   ref    V00 this         

***** BB03
STMT00026 (IL 0x0B3...0x0C3)
               [000109] -A----------              *  ASG       ref   
               [000108] D------N----              +--*  LCL_VAR   ref    V15 tmp8         
               [000107] ------------              \--*  ALLOCOBJ  ref   
               [000106] H-----------                 \--*  CNS_INT(h) long   0x7ffdb3b058b8 token

***** BB03
STMT00028 (IL   ???...  ???)
               [000113] -A-XG-------              *  ASG       ref   
               [000112] D------N----              +--*  LCL_VAR   ref    V16 tmp9         
               [000105] ---XG-------              \--*  FIELD     ref    Head
               [000104] ---XG-------                 \--*  FIELD     ref    _myList
               [000103] ------------                    \--*  LCL_VAR   ref    V00 this         

***** BB03
STMT00027 (IL   ???...  ???)
               [000111] --C-G-------              *  CALL      void   System.Object..ctor
               [000110] ------------ this in rcx  \--*  LCL_VAR   ref    V15 tmp8         

***** BB03
STMT00029 (IL 0x0C3...  ???)
               [000117] -A-XG-------              *  ASG       ref   
               [000116] ---XG--N----              +--*  FIELD     ref    Data
               [000114] ------------              |  \--*  LCL_VAR   ref    V16 tmp9         
               [000115] ------------              \--*  LCL_VAR   ref    V15 tmp8         

------------ BB27 [???..???) -> BB04 (callf), preds={} succs={BB04}

------------ BB28 [???..???) -> BB07 (ALWAYS), preds={} succs={BB07}

------------ BB04 [0CA..0CD) -> BB06 (cond), preds={} succs={BB05,BB06}

***** BB04
STMT00031 (IL 0x0CA...0x0CB)
               [000126] ------------              *  JTRUE     void  
               [000125] ------------              \--*  EQ        int   
               [000123] ------------                 +--*  LCL_VAR   int    V05 loc3         
               [000124] ------------                 \--*  CNS_INT   int    0

------------ BB05 [0CD..0D3), preds={} succs={BB06}

***** BB05
STMT00033 (IL 0x0CD...0x0CE)
               [000129] --C-G-------              *  CALL      void   System.Threading.Monitor.Exit
               [000128] ------------ arg0         \--*  LCL_VAR   ref    V04 loc2         

------------ BB06 [0D3..0D4) (finret), preds={} succs={BB28}

***** BB06
STMT00032 (IL 0x0D3...0x0D3)
               [000127] ------------              *  RETFILT   void  

------------ BB07 [0D4..0D8), preds={} succs={BB08}

***** BB07
STMT00030 (IL 0x0D4...0x0D7)
               [000122] -A----------              *  ASG       int   
               [000121] D------N----              +--*  LCL_VAR   int    V03 loc1         
               [000120] ------------              \--*  ADD       int   
               [000118] ------------                 +--*  LCL_VAR   int    V03 loc1         
               [000119] ------------                 \--*  CNS_INT   int    1

------------ BB08 [0D8..0DD) -> BB02 (cond), preds={} succs={BB09,BB02}

***** BB08
STMT00017 (IL 0x0D8...0x0DB)
               [000068] ------------              *  JTRUE     void  
               [000067] ------------              \--*  LT        int   
               [000065] ------------                 +--*  LCL_VAR   int    V03 loc1         
               [000066] ------------                 \--*  CNS_INT   int    10

------------ BB09 [0DD..0F9), preds={} succs={BB10}

***** BB09
STMT00034 (IL 0x0DD...0x0E2)
               [000133] -AC-G-------              *  ASG       struct (copy)
               [000131] D------N----              +--*  LCL_VAR   struct<System.DateTime, 8> V02 loc0         
               [000130] --C-G-------              \--*  CALL      struct System.DateTime.get_Now

***** BB09
STMT00035 (IL 0x0E3...0x0F4)
               [000139] --C-G-------              *  CALL      void   System.Console.WriteLine
               [000138] --C-G------- arg0         \--*  CALL      ref    System.String.Concat
               [000136] --C-G------- arg0            +--*  CALL      ref    System.DateTime.ToString
               [000135] ------------ this in rcx     |  \--*  ADDR      byref 
               [000134] -------N----                 |     \--*  LCL_VAR   struct<System.DateTime, 8> V02 loc0         
               [000137] ------------ arg1            \--*  CNS_STR   ref   <string constant>

------------ BB10 [0F9..102), preds={} succs={BB11}

***** BB10
STMT00036 (IL 0x0F9...0x0FF)
               [000143] -A-XG-------              *  ASG       ref   
               [000142] D------N----              +--*  LCL_VAR   ref    V04 loc2         
               [000141] ---XG-------              \--*  FIELD     ref    _myList
               [000140] ------------                 \--*  LCL_VAR   ref    V00 this         

***** BB10
STMT00037 (IL 0x100...0x101)
               [000146] -A----------              *  ASG       int   
               [000145] D------N----              +--*  LCL_VAR   int    V05 loc3         
               [000144] ------------              \--*  CNS_INT   int    0

------------ BB11 [102..122) -> BB13 (cond), preds={} succs={BB12,BB13}

***** BB11
STMT00038 (IL 0x102...0x120)
               [000150] --C-G-------              *  CALL      void   System.Threading.Monitor.Enter
               [000147] ------------ arg0         +--*  LCL_VAR   ref    V04 loc2         
               [000149] ------------ arg1         \--*  ADDR      byref 
               [000148] -------N----                 \--*  LCL_VAR   int    V05 loc3         

***** BB11
STMT00039 (IL 0x10A...  ???)
               [000158] ---XG-------              *  JTRUE     void  
               [000157] N--XG----U--              \--*  NE        int   
               [000153] ---XG-------                 +--*  FIELD     ref    Head
               [000152] ---XG-------                 |  \--*  FIELD     ref    _myList
               [000151] ------------                 |     \--*  LCL_VAR   ref    V00 this         
               [000156] ---XG-------                 \--*  FIELD     ref    Tail
               [000155] ---XG-------                    \--*  FIELD     ref    _myList
               [000154] ------------                       \--*  LCL_VAR   ref    V00 this         

------------ BB12 [122..124) -> BB31 (always), preds={} succs={BB31}

------------ BB13 [124..126) -> BB29 (always), preds={} succs={BB29}

------------ BB31 [???..???) -> BB14 (callf), preds={} succs={BB14}

------------ BB32 [???..???) -> BB18 (ALWAYS), preds={} succs={BB18}

------------ BB29 [???..???) -> BB14 (callf), preds={} succs={BB14}

------------ BB30 [???..???) -> BB17 (ALWAYS), preds={} succs={BB17}

------------ BB14 [126..129) -> BB16 (cond), preds={} succs={BB15,BB16}

***** BB14
STMT00062 (IL 0x126...0x127)
               [000226] ------------              *  JTRUE     void  
               [000225] ------------              \--*  EQ        int   
               [000223] ------------                 +--*  LCL_VAR   int    V05 loc3         
               [000224] ------------                 \--*  CNS_INT   int    0

------------ BB15 [129..12F), preds={} succs={BB16}

***** BB15
STMT00064 (IL 0x129...0x12A)
               [000229] --C-G-------              *  CALL      void   System.Threading.Monitor.Exit
               [000228] ------------ arg0         \--*  LCL_VAR   ref    V04 loc2         

------------ BB16 [12F..130) (finret), preds={} succs={BB32,BB30}

***** BB16
STMT00063 (IL 0x12F...0x12F)
               [000227] ------------              *  RETFILT   void  

------------ BB17 [130..139) -> BB10 (always), preds={} succs={BB10}

***** BB17
STMT00040 (IL 0x130...0x137)
               [000160] --C-G-------              *  CALL      void   System.Threading.Thread.Sleep
               [000159] ------------ arg0         \--*  CNS_INT   int    100

------------ BB18 [139..17D), preds={} succs={BB19}

***** BB18
STMT00041 (IL 0x139...0x13E)
               [000164] -AC-G-------              *  ASG       struct (copy)
               [000162] D------N----              +--*  LCL_VAR   struct<System.DateTime, 8> V02 loc0         
               [000161] --C-G-------              \--*  CALL      struct System.DateTime.get_Now

***** BB18
STMT00042 (IL 0x13F...0x178)
               [000170] --C-G-------              *  CALL      void   System.Console.WriteLine
               [000169] --C-G------- arg0         \--*  CALL      ref    System.String.Concat
               [000167] --C-G------- arg0            +--*  CALL      ref    System.DateTime.ToString
               [000166] ------------ this in rcx     |  \--*  ADDR      byref 
               [000165] -------N----                 |     \--*  LCL_VAR   struct<System.DateTime, 8> V02 loc0         
               [000168] ------------ arg1            \--*  CNS_STR   ref   <string constant>

***** BB18
STMT00043 (IL 0x155...  ???)
               [000172] --C-G-------              *  CALL      void   System.Console.WriteLine
               [000171] ------------ arg0         \--*  CNS_STR   ref   <string constant>

***** BB18
STMT00044 (IL 0x15F...  ???)
               [000174] --C-G-------              *  CALL      void   System.Console.WriteLine
               [000173] ------------ arg0         \--*  CNS_STR   ref   <string constant>

***** BB18
STMT00045 (IL 0x169...  ???)
               [000176] --C-G-------              *  CALL      void   System.Console.WriteLine
               [000175] ------------ arg0         \--*  CNS_STR   ref   <string constant>

***** BB18
STMT00046 (IL 0x173...  ???)
               [000178] --C-G-------              *  CALL      void   System.Console.WriteLine
               [000177] ------------ arg0         \--*  CNS_STR   ref   <string constant>

------------ BB19 [17D..18F) -> BB21 (cond), preds={} succs={BB20,BB21}

***** BB19
STMT00047 (IL 0x17D...0x182)
               [000179] I-C-G-------              *  CALL      void   System.Console.ReadKey (exactContextHnd=0x00007FFDB3EE56C9)
               [000182] ------------ arg0         \--*  ADDR      byref 
               [000181] -------N----                 \--*  LCL_VAR   struct<System.ConsoleKeyInfo, 12> V06 loc4         

***** BB19
STMT00048 (IL   ???...  ???)
               [000180] --C---------              *  RET_EXPR  void  (inl return expr [000179])

***** BB19
STMT00049 (IL 0x184...0x18D)
               [000185] I-C-G-------              *  CALL      int    System.ConsoleKeyInfo.get_Key (exactContextHnd=0x00007FFDB3EE36E9)
               [000184] ------------ this in rcx  \--*  ADDR      byref 
               [000183] -------N----                 \--*  LCL_VAR   struct<System.ConsoleKeyInfo, 12> V06 loc4         

***** BB19
STMT00050 (IL   ???...  ???)
               [000189] --C---------              *  JTRUE     void  
               [000188] N-C------U--              \--*  NE        int   
               [000186] --C---------                 +--*  RET_EXPR  int   (inl return expr [000185])
               [000187] ------------                 \--*  CNS_INT   int    71

------------ BB20 [18F..19B) -> BB19 (always), preds={} succs={BB19}

***** BB20
STMT00061 (IL 0x18F...0x199)
               [000222] --C-G-------              *  CALL      void   System.GC.Collect
               [000221] --C-G------- arg0         \--*  CALL      int    System.GC.get_MaxGeneration

------------ BB21 [19B..1A6) -> BB23 (cond), preds={} succs={BB22,BB23}

***** BB21
STMT00051 (IL 0x19B...0x1A4)
               [000192] I-C-G-------              *  CALL      int    System.ConsoleKeyInfo.get_Key (exactContextHnd=0x00007FFDB3EE36E9)
               [000191] ------------ this in rcx  \--*  ADDR      byref 
               [000190] -------N----                 \--*  LCL_VAR   struct<System.ConsoleKeyInfo, 12> V06 loc4         

***** BB21
STMT00052 (IL   ???...  ???)
               [000196] --C---------              *  JTRUE     void  
               [000195] N-C------U--              \--*  NE        int   
               [000193] --C---------                 +--*  RET_EXPR  int   (inl return expr [000192])
               [000194] ------------                 \--*  CNS_INT   int    72

------------ BB22 [1A6..1AD) -> BB19 (always), preds={} succs={BB19}

***** BB22
STMT00060 (IL 0x1A6...0x1AB)
               [000220] --C-G-------              *  CALL      void   System.Diagnostics.Debugger.Break

------------ BB23 [1AD..1B8) -> BB25 (cond), preds={} succs={BB24,BB25}

***** BB23
STMT00053 (IL 0x1AD...0x1B6)
               [000199] I-C-G-------              *  CALL      int    System.ConsoleKeyInfo.get_Key (exactContextHnd=0x00007FFDB3EE36E9)
               [000198] ------------ this in rcx  \--*  ADDR      byref 
               [000197] -------N----                 \--*  LCL_VAR   struct<System.ConsoleKeyInfo, 12> V06 loc4         

***** BB23
STMT00054 (IL   ???...  ???)
               [000203] --C---------              *  JTRUE     void  
               [000202] N-C------U--              \--*  NE        int   
               [000200] --C---------                 +--*  RET_EXPR  int   (inl return expr [000199])
               [000201] ------------                 \--*  CNS_INT   int    82

------------ BB24 [1B8..1C1) -> BB19 (always), preds={} succs={BB19}

***** BB24
STMT00059 (IL 0x1B8...0x1BA)
               [000219] -A-XG-------              *  ASG       bool  
               [000218] ---XG--N----              +--*  FIELD     bool   _running
               [000216] ------------              |  \--*  LCL_VAR   ref    V00 this         
               [000217] ------------              \--*  CNS_INT   int    0

------------ BB25 [1C1..1CC) -> BB19 (cond), preds={} succs={BB26,BB19}

***** BB25
STMT00055 (IL 0x1C1...0x1CA)
               [000206] I-C-G-------              *  CALL      int    System.ConsoleKeyInfo.get_Key (exactContextHnd=0x00007FFDB3EE36E9)
               [000205] ------------ this in rcx  \--*  ADDR      byref 
               [000204] -------N----                 \--*  LCL_VAR   struct<System.ConsoleKeyInfo, 12> V06 loc4         

***** BB25
STMT00056 (IL   ???...  ???)
               [000210] --C---------              *  JTRUE     void  
               [000209] N-C------U--              \--*  NE        int   
               [000207] --C---------                 +--*  RET_EXPR  int   (inl return expr [000206])
               [000208] ------------                 \--*  CNS_INT   int    81

------------ BB26 [1CC..1D4) (return), preds={} succs={}

***** BB26
STMT00057 (IL 0x1CC...0x1CE)
               [000214] -A-XG-------              *  ASG       bool  
               [000213] ---XG--N----              +--*  FIELD     bool   _running
               [000211] ------------              |  \--*  LCL_VAR   ref    V00 this         
               [000212] ------------              \--*  CNS_INT   int    0

***** BB26
STMT00058 (IL 0x1D3...0x1D3)
               [000215] ------------              *  RETURN    void  

-------------------------------------------------------------------------------------------------------------------

*************** Starting PHASE Indirect call transform

 -- no candidates to transform

*************** Finishing PHASE Indirect call transform [no changes]

*************** Starting PHASE Expand patchpoints

 -- no patchpoints to transform

*************** Finishing PHASE Expand patchpoints [no changes]

*************** Starting PHASE Post-import

*************** Finishing PHASE Post-import

*************** Starting PHASE Morph - Init

New BlockSet epoch 1, # of blocks (including unused BB00): 33, bitset array size: 1 (short)

*************** In fgRemoveEmptyBlocks

*************** Finishing PHASE Morph - Init
*************** In fgDebugCheckBBlist

*************** Starting PHASE Morph - Inlining
Expanding INLINE_CANDIDATE in statement STMT00003 in BB01:
STMT00003 (IL   ???...  ???)
               [000016] I-C-G-------              *  CALL      void   FalseLeakRepro.List..ctor (exactContextHnd=0x00007FFDB3EE2351)
               [000015] ------------ this in rcx  \--*  LCL_VAR   ref    V08 tmp1         
thisArg: is a local var
               [000015] ------------              *  LCL_VAR   ref    V08 tmp1         

INLINER: inlineInfo.tokenLookupContextHandle for FalseLeakRepro.List:.ctor():this set to 0x00007FFDB3EE2351:

Invoking compiler for the inlinee method FalseLeakRepro.List:.ctor():this :
IL to import:
IL_0000  02                ldarg.0     
IL_0001  28 0c 00 00 0a    call         0xA00000C
IL_0006  02                ldarg.0     
IL_0007  02                ldarg.0     
IL_0008  73 02 00 00 06    newobj       0x6000002
IL_000d  25                dup         
IL_000e  0a                stloc.0     
IL_000f  7d 04 00 00 04    stfld        0x4000004
IL_0014  06                ldloc.0     
IL_0015  7d 03 00 00 04    stfld        0x4000003
IL_001a  2a                ret         

INLINER impTokenLookupContextHandle for FalseLeakRepro.List:.ctor():this is 0x00007FFDB3EE2351.
*************** In fgFindBasicBlocks() for FalseLeakRepro.List:.ctor():this
weight= 10 : state   3 [ ldarg.0 ]
weight= 79 : state  40 [ call ]
weight= 10 : state   3 [ ldarg.0 ]
weight= 10 : state   3 [ ldarg.0 ]
weight=227 : state 103 [ newobj ]
weight= 11 : state  38 [ dup ]
weight=  6 : state  11 [ stloc.0 ]
weight= 31 : state 111 [ stfld ]
weight= 12 : state   7 [ ldloc.0 ]
weight= 31 : state 111 [ stfld ]
weight= 19 : state  42 [ ret ]

multiplier in instance constructors increased to 1.5.
Inline candidate callsite is boring.  Multiplier increased to 2.8.
calleeNativeSizeEstimate=446
callsiteNativeSizeEstimate=85
benefit multiplier=2.8
threshold=237
Native estimate for function size exceeds threshold for inlining 44.6 > 23.7 (multiplier = 2.8)


Inline expansion aborted, inline not profitable
INLINER: during 'fgInline' result 'failed this call site' reason 'unprofitable inline' for 'FalseLeakRepro.Program:Run(System.String[]):this' calling 'FalseLeakRepro.List:.ctor():this'
INLINER: during 'fgInline' result 'failed this call site' reason 'unprofitable inline'
Querying runtime about current class of field FalseLeakRepro.List.Head (declared as FalseLeakRepro.Node)
Field's current class not available
Querying runtime about current class of field FalseLeakRepro.List.Head (declared as FalseLeakRepro.Node)
Field's current class not available
Expanding INLINE_CANDIDATE in statement STMT00022 in BB03:
STMT00022 (IL   ???...  ???)
               [000088] I-C-G-------              *  CALL      void   FalseLeakRepro.Node..ctor (exactContextHnd=0x00007FFDB3EE58A9)
               [000087] ------------ this in rcx  \--*  LCL_VAR   ref    V13 tmp6         
thisArg: is a local var
               [000087] ------------              *  LCL_VAR   ref    V13 tmp6         

INLINER: inlineInfo.tokenLookupContextHandle for FalseLeakRepro.Node:.ctor():this set to 0x00007FFDB3EE58A9:

Invoking compiler for the inlinee method FalseLeakRepro.Node:.ctor():this :
IL to import:
IL_0000  02                ldarg.0     
IL_0001  28 0c 00 00 0a    call         0xA00000C
IL_0006  2a                ret         

INLINER impTokenLookupContextHandle for FalseLeakRepro.Node:.ctor():this is 0x00007FFDB3EE58A9.
*************** In fgFindBasicBlocks() for FalseLeakRepro.Node:.ctor():this
Jump targets:
  none
New Basic Block BB33 [0032] created.
BB33 [000..007)
Basic block list for 'FalseLeakRepro.Node:.ctor():this'

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd                 weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB33 [0032]  1                             1       [000..007)        (return)                     
-----------------------------------------------------------------------------------------------------------------------------------------

*************** Inline @[000088] Starting PHASE Pre-import

*************** Inline @[000088] Finishing PHASE Pre-import

*************** Inline @[000088] Starting PHASE Profile incorporation
BBOPT not set
Computing inlinee profile scale:
   ... no callee profile data, will use non-pgo weight to scale
   ... call site not profiled, will use non-pgo weight to scale
   call site count 100 callee entry count 100 scale 1
Scaling inlinee blocks

*************** Inline @[000088] Finishing PHASE Profile incorporation
Trees after Profile incorporation

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd                 weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB33 [0032]  1                             1       [000..007)        (return)                     
-----------------------------------------------------------------------------------------------------------------------------------------

------------ BB33 [000..007) (return), preds={} succs={}

-------------------------------------------------------------------------------------------------------------------

*************** Inline @[000088] Starting PHASE Importation
*************** In impImport() for FalseLeakRepro.Node:.ctor():this

impImportBlockPending for BB33

Importing BB33 (PC=000) of 'FalseLeakRepro.Node:.ctor():this'
    [ 0]   0 (0x000) ldarg.0
    [ 1]   1 (0x001) call 0A00000C
In Compiler::impImportCall: opcode is call, kind=0, callRetType is void, structSize is 0


               [000230] --C-G-------              *  CALL      void   System.Object..ctor
               [000087] ------------ this in rcx  \--*  LCL_VAR   ref    V13 tmp6         

    [ 0]   6 (0x006) ret
After impImport() added block for try,catch,finally
-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd                 weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB33 [0032]  1                             1       [000..007)        (return)                     i 
-----------------------------------------------------------------------------------------------------------------------------------------


*************** Inline @[000088] Finishing PHASE Importation
Trees after Importation

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd                 weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB33 [0032]  1                             1       [000..007)        (return)                     i 
-----------------------------------------------------------------------------------------------------------------------------------------

------------ BB33 [000..007) (return), preds={} succs={}

***** BB33
               [000230] --C-G-------              *  CALL      void   System.Object..ctor
               [000087] ------------ this in rcx  \--*  LCL_VAR   ref    V13 tmp6         

-------------------------------------------------------------------------------------------------------------------

*************** Inline @[000088] Starting PHASE Indirect call transform

 -- no candidates to transform

*************** Inline @[000088] Finishing PHASE Indirect call transform [no changes]

*************** Inline @[000088] Starting PHASE Expand patchpoints

 -- no patchpoints to transform

*************** Inline @[000088] Finishing PHASE Expand patchpoints [no changes]

*************** Inline @[000088] Starting PHASE Post-import

*************** In fgRemoveEmptyBlocks

*************** Inline @[000088] Finishing PHASE Post-import


----------- Statements (and blocks) added due to the inlining of call [000088] -----------

Arguments setup:

Inlinee method body:
STMT00065 (IL   ???...  ???)
               [000230] --C-G-------              *  CALL      void   System.Object..ctor
               [000087] ------------ this in rcx  \--*  LCL_VAR   ref    V13 tmp6         

fgInlineAppendStatements: no gc ref inline locals.
Successfully inlined FalseLeakRepro.Node:.ctor():this (7 IL bytes) (depth 1) [below ALWAYS_INLINE size]
--------------------------------------------------------------------------------------------
INLINER: during 'fgInline' result 'success' reason 'below ALWAYS_INLINE size' for 'FalseLeakRepro.Program:Run(System.String[]):this' calling 'FalseLeakRepro.Node:.ctor():this'
INLINER: during 'fgInline' result 'success' reason 'below ALWAYS_INLINE size'
Querying runtime about current class of field FalseLeakRepro.List.Head (declared as FalseLeakRepro.Node)
Field's current class not available
Expanding INLINE_CANDIDATE in statement STMT00047 in BB19:
STMT00047 (IL 0x17D...0x182)
               [000179] I-C-G-------              *  CALL      void   System.Console.ReadKey (exactContextHnd=0x00007FFDB3EE56C9)
               [000182] ------------ arg0         \--*  ADDR      byref 
               [000181] -------N----                 \--*  LCL_VAR   struct<System.ConsoleKeyInfo, 12> V06 loc4         
INLINER: inlineInfo.tokenLookupContextHandle for System.Console:ReadKey():System.ConsoleKeyInfo set to 0x00007FFDB3EE56C9:

Invoking compiler for the inlinee method System.Console:ReadKey():System.ConsoleKeyInfo :
IL to import:
IL_0000  16                ldc.i4.0    
IL_0001  28 cc 00 00 06    call         0x60000CC
IL_0006  2a                ret         

INLINER impTokenLookupContextHandle for System.Console:ReadKey():System.ConsoleKeyInfo is 0x00007FFDB3EE56C9.
Notify VM instruction set (AVX) must be supported.
*************** In fgFindBasicBlocks() for System.Console:ReadKey():System.ConsoleKeyInfo
Jump targets:
  none
New Basic Block BB34 [0033] created.
BB34 [000..007)
Basic block list for 'System.Console:ReadKey():System.ConsoleKeyInfo'

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd                 weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB34 [0033]  1                             1       [000..007)        (return)                     
-----------------------------------------------------------------------------------------------------------------------------------------

*************** Inline @[000179] Starting PHASE Pre-import

*************** Inline @[000179] Finishing PHASE Pre-import

*************** Inline @[000179] Starting PHASE Profile incorporation
BBOPT not set
Computing inlinee profile scale:
   ... no callee profile data, will use non-pgo weight to scale
   ... call site not profiled, will use non-pgo weight to scale
   call site count 100 callee entry count 100 scale 1
Scaling inlinee blocks

*************** Inline @[000179] Finishing PHASE Profile incorporation
Trees after Profile incorporation

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd                 weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB34 [0033]  1                             1       [000..007)        (return)                     
-----------------------------------------------------------------------------------------------------------------------------------------

------------ BB34 [000..007) (return), preds={} succs={}

-------------------------------------------------------------------------------------------------------------------

*************** Inline @[000179] Starting PHASE Importation
*************** In impImport() for System.Console:ReadKey():System.ConsoleKeyInfo

impImportBlockPending for BB34

Importing BB34 (PC=000) of 'System.Console:ReadKey():System.ConsoleKeyInfo'
    [ 0]   0 (0x000) ldc.i4.0 0
    [ 1]   1 (0x001) call 060000CC
In Compiler::impImportCall: opcode is call, kind=0, callRetType is struct, structSize is 12
INLINER: during 'impMarkInlineCandidate' result 'failed this callee' reason 'has exception handling' for 'System.Console:ReadKey():System.ConsoleKeyInfo' calling 'System.ConsolePal:ReadKey(bool):System.ConsoleKeyInfo'

INLINER: Marking System.ConsolePal:ReadKey(bool):System.ConsoleKeyInfo as NOINLINE because of has exception handling
INLINER: during 'impMarkInlineCandidate' result 'failed this callee' reason 'has exception handling'

    [ 1]   6 (0x006) ret

    Inlinee Return expression (before normalization)  =>
               [000233] S-C-G-------              *  CALL      struct System.ConsolePal.ReadKey
               [000234] ------------ arg0         \--*  PUTARG_TYPE bool  
               [000232] ------------                 \--*  CNS_INT   int    0

After impImport() added block for try,catch,finally
-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd                 weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB34 [0033]  1                             1       [000..007)        (return)                     i 
-----------------------------------------------------------------------------------------------------------------------------------------


** Note: inlinee IL was partially imported -- imported 0 of 7 bytes of method IL

*************** Inline @[000179] Finishing PHASE Importation
Trees after Importation

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd                 weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB34 [0033]  1                             1       [000..007)        (return)                     i 
-----------------------------------------------------------------------------------------------------------------------------------------

------------ BB34 [000..007) (return), preds={} succs={}

-------------------------------------------------------------------------------------------------------------------

*************** Inline @[000179] Starting PHASE Indirect call transform

 -- no candidates to transform

*************** Inline @[000179] Finishing PHASE Indirect call transform [no changes]

*************** Inline @[000179] Starting PHASE Expand patchpoints

 -- no patchpoints to transform

*************** Inline @[000179] Finishing PHASE Expand patchpoints [no changes]

*************** Inline @[000179] Starting PHASE Post-import

*************** In fgRemoveEmptyBlocks

*************** Inline @[000179] Finishing PHASE Post-import


----------- Statements (and blocks) added due to the inlining of call [000179] -----------

Inlinee method body:fgInlineAppendStatements: no gc ref inline locals.

Return expression for call at [000179] is
               [000233] S-C-G-------              *  CALL      void   System.ConsolePal.ReadKey
               [000235] ------------ arg0         +--*  ADDR      byref 
               [000236] -------N----              |  \--*  LCL_VAR   struct<System.ConsoleKeyInfo, 12> V06 loc4         
               [000234] ------------ arg1         \--*  PUTARG_TYPE bool  
               [000232] ------------                 \--*  CNS_INT   int    0
Successfully inlined System.Console:ReadKey():System.ConsoleKeyInfo (7 IL bytes) (depth 1) [below ALWAYS_INLINE size]
--------------------------------------------------------------------------------------------
INLINER: during 'fgInline' result 'success' reason 'below ALWAYS_INLINE size' for 'FalseLeakRepro.Program:Run(System.String[]):this' calling 'System.Console:ReadKey():System.ConsoleKeyInfo'
INLINER: during 'fgInline' result 'success' reason 'below ALWAYS_INLINE size'

Replacing the return expression placeholder [000180] with [000233]
               [000180] --C---------              *  RET_EXPR  void  (inl return expr [000233])

Inserting the inline return expression
               [000233] S-C-G-------              *  CALL      void   System.ConsolePal.ReadKey
               [000235] ------------ arg0         +--*  ADDR      byref 
               [000236] -------N----              |  \--*  LCL_VAR   struct<System.ConsoleKeyInfo, 12> V06 loc4         
               [000234] ------------ arg1         \--*  PUTARG_TYPE bool  
               [000232] ------------                 \--*  CNS_INT   int    0

Expanding INLINE_CANDIDATE in statement STMT00049 in BB19:
STMT00049 (IL 0x184...0x18D)
               [000185] I-C-G-------              *  CALL      int    System.ConsoleKeyInfo.get_Key (exactContextHnd=0x00007FFDB3EE36E9)
               [000184] ------------ this in rcx  \--*  ADDR      byref 
               [000183] -------N----                 \--*  LCL_VAR   struct<System.ConsoleKeyInfo, 12> V06 loc4         
thisArg: is a constant is byref to a struct local
               [000184] ------------              *  ADDR      byref 
               [000183] -------N----              \--*  LCL_VAR   struct<System.ConsoleKeyInfo, 12> V06 loc4         

INLINER: inlineInfo.tokenLookupContextHandle for System.ConsoleKeyInfo:get_Key():int:this set to 0x00007FFDB3EE36E9:

Invoking compiler for the inlinee method System.ConsoleKeyInfo:get_Key():int:this :
IL to import:
IL_0000  02                ldarg.0     
IL_0001  7b eb 00 00 04    ldfld        0x40000EB
IL_0006  2a                ret         

INLINER impTokenLookupContextHandle for System.ConsoleKeyInfo:get_Key():int:this is 0x00007FFDB3EE36E9.
*************** In fgFindBasicBlocks() for System.ConsoleKeyInfo:get_Key():int:this
Jump targets:
  none
New Basic Block BB35 [0034] created.
BB35 [000..007)
Basic block list for 'System.ConsoleKeyInfo:get_Key():int:this'

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd                 weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB35 [0034]  1                             1       [000..007)        (return)                     
-----------------------------------------------------------------------------------------------------------------------------------------

*************** Inline @[000185] Starting PHASE Pre-import

*************** Inline @[000185] Finishing PHASE Pre-import

*************** Inline @[000185] Starting PHASE Profile incorporation
BBOPT not set
Computing inlinee profile scale:
   ... no callee profile data, will use non-pgo weight to scale
   ... call site not profiled, will use non-pgo weight to scale
   call site count 100 callee entry count 100 scale 1
Scaling inlinee blocks

*************** Inline @[000185] Finishing PHASE Profile incorporation
Trees after Profile incorporation

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd                 weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB35 [0034]  1                             1       [000..007)        (return)                     
-----------------------------------------------------------------------------------------------------------------------------------------

------------ BB35 [000..007) (return), preds={} succs={}

-------------------------------------------------------------------------------------------------------------------

*************** Inline @[000185] Starting PHASE Importation
*************** In impImport() for System.ConsoleKeyInfo:get_Key():int:this

impImportBlockPending for BB35

Importing BB35 (PC=000) of 'System.ConsoleKeyInfo:get_Key():int:this'
    [ 0]   0 (0x000) ldarg.0
    [ 1]   1 (0x001) ldfld 040000EB
    [ 1]   6 (0x006) ret

    Inlinee Return expression (before normalization)  =>
               [000240] ------------              *  FIELD     int    _key
               [000238] ------------              \--*  ADDR      byref 
               [000239] -------N----                 \--*  LCL_VAR   struct<System.ConsoleKeyInfo, 12> V06 loc4         


    Inlinee Return expression (after normalization) =>
               [000240] ------------              *  FIELD     int    _key
               [000238] ------------              \--*  ADDR      byref 
               [000239] -------N----                 \--*  LCL_VAR   struct<System.ConsoleKeyInfo, 12> V06 loc4         

After impImport() added block for try,catch,finally
-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd                 weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB35 [0034]  1                             1       [000..007)        (return)                     i 
-----------------------------------------------------------------------------------------------------------------------------------------


** Note: inlinee IL was partially imported -- imported 0 of 7 bytes of method IL

*************** Inline @[000185] Finishing PHASE Importation
Trees after Importation

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd                 weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB35 [0034]  1                             1       [000..007)        (return)                     i 
-----------------------------------------------------------------------------------------------------------------------------------------

------------ BB35 [000..007) (return), preds={} succs={}

-------------------------------------------------------------------------------------------------------------------

*************** Inline @[000185] Starting PHASE Indirect call transform

 -- no candidates to transform

*************** Inline @[000185] Finishing PHASE Indirect call transform [no changes]

*************** Inline @[000185] Starting PHASE Expand patchpoints

 -- no patchpoints to transform

*************** Inline @[000185] Finishing PHASE Expand patchpoints [no changes]

*************** Inline @[000185] Starting PHASE Post-import

*************** In fgRemoveEmptyBlocks

*************** Inline @[000185] Finishing PHASE Post-import


----------- Statements (and blocks) added due to the inlining of call [000185] -----------

Arguments setup:

Inlinee method body:fgInlineAppendStatements: no gc ref inline locals.

Return expression for call at [000185] is
               [000240] ------------              *  FIELD     int    _key
               [000238] ------------              \--*  ADDR      byref 
               [000239] -------N----                 \--*  LCL_VAR   struct<System.ConsoleKeyInfo, 12> V06 loc4         
Successfully inlined System.ConsoleKeyInfo:get_Key():int:this (7 IL bytes) (depth 1) [below ALWAYS_INLINE size]
--------------------------------------------------------------------------------------------
INLINER: during 'fgInline' result 'success' reason 'below ALWAYS_INLINE size' for 'FalseLeakRepro.Program:Run(System.String[]):this' calling 'System.ConsoleKeyInfo:get_Key():int:this'
INLINER: during 'fgInline' result 'success' reason 'below ALWAYS_INLINE size'

Replacing the return expression placeholder [000186] with [000240]
               [000186] --C---------              *  RET_EXPR  int   (inl return expr [000240])

Inserting the inline return expression
               [000240] ------------              *  FIELD     int    _key
               [000238] ------------              \--*  ADDR      byref 
               [000239] -------N----                 \--*  LCL_VAR   struct<System.ConsoleKeyInfo, 12> V06 loc4         

Expanding INLINE_CANDIDATE in statement STMT00051 in BB21:
STMT00051 (IL 0x19B...0x1A4)
               [000192] I-C-G-------              *  CALL      int    System.ConsoleKeyInfo.get_Key (exactContextHnd=0x00007FFDB3EE36E9)
               [000191] ------------ this in rcx  \--*  ADDR      byref 
               [000190] -------N----                 \--*  LCL_VAR   struct<System.ConsoleKeyInfo, 12> V06 loc4         
thisArg: is a constant is byref to a struct local
               [000191] ------------              *  ADDR      byref 
               [000190] -------N----              \--*  LCL_VAR   struct<System.ConsoleKeyInfo, 12> V06 loc4         

INLINER: inlineInfo.tokenLookupContextHandle for System.ConsoleKeyInfo:get_Key():int:this set to 0x00007FFDB3EE36E9:

Invoking compiler for the inlinee method System.ConsoleKeyInfo:get_Key():int:this :
IL to import:
IL_0000  02                ldarg.0     
IL_0001  7b eb 00 00 04    ldfld        0x40000EB
IL_0006  2a                ret         

INLINER impTokenLookupContextHandle for System.ConsoleKeyInfo:get_Key():int:this is 0x00007FFDB3EE36E9.
*************** In fgFindBasicBlocks() for System.ConsoleKeyInfo:get_Key():int:this
Jump targets:
  none
New Basic Block BB36 [0035] created.
BB36 [000..007)
Basic block list for 'System.ConsoleKeyInfo:get_Key():int:this'

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd                 weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB36 [0035]  1                             1       [000..007)        (return)                     
-----------------------------------------------------------------------------------------------------------------------------------------

*************** Inline @[000192] Starting PHASE Pre-import

*************** Inline @[000192] Finishing PHASE Pre-import

*************** Inline @[000192] Starting PHASE Profile incorporation
BBOPT not set
Computing inlinee profile scale:
   ... no callee profile data, will use non-pgo weight to scale
   ... call site not profiled, will use non-pgo weight to scale
   call site count 100 callee entry count 100 scale 1
Scaling inlinee blocks

*************** Inline @[000192] Finishing PHASE Profile incorporation
Trees after Profile incorporation

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd                 weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB36 [0035]  1                             1       [000..007)        (return)                     
-----------------------------------------------------------------------------------------------------------------------------------------

------------ BB36 [000..007) (return), preds={} succs={}

-------------------------------------------------------------------------------------------------------------------

*************** Inline @[000192] Starting PHASE Importation
*************** In impImport() for System.ConsoleKeyInfo:get_Key():int:this

impImportBlockPending for BB36

Importing BB36 (PC=000) of 'System.ConsoleKeyInfo:get_Key():int:this'
    [ 0]   0 (0x000) ldarg.0
    [ 1]   1 (0x001) ldfld 040000EB
    [ 1]   6 (0x006) ret

    Inlinee Return expression (before normalization)  =>
               [000244] ------------              *  FIELD     int    _key
               [000242] ------------              \--*  ADDR      byref 
               [000243] -------N----                 \--*  LCL_VAR   struct<System.ConsoleKeyInfo, 12> V06 loc4         


    Inlinee Return expression (after normalization) =>
               [000244] ------------              *  FIELD     int    _key
               [000242] ------------              \--*  ADDR      byref 
               [000243] -------N----                 \--*  LCL_VAR   struct<System.ConsoleKeyInfo, 12> V06 loc4         

After impImport() added block for try,catch,finally
-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd                 weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB36 [0035]  1                             1       [000..007)        (return)                     i 
-----------------------------------------------------------------------------------------------------------------------------------------


** Note: inlinee IL was partially imported -- imported 0 of 7 bytes of method IL

*************** Inline @[000192] Finishing PHASE Importation
Trees after Importation

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd                 weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB36 [0035]  1                             1       [000..007)        (return)                     i 
-----------------------------------------------------------------------------------------------------------------------------------------

------------ BB36 [000..007) (return), preds={} succs={}

-------------------------------------------------------------------------------------------------------------------

*************** Inline @[000192] Starting PHASE Indirect call transform

 -- no candidates to transform

*************** Inline @[000192] Finishing PHASE Indirect call transform [no changes]

*************** Inline @[000192] Starting PHASE Expand patchpoints

 -- no patchpoints to transform

*************** Inline @[000192] Finishing PHASE Expand patchpoints [no changes]

*************** Inline @[000192] Starting PHASE Post-import

*************** In fgRemoveEmptyBlocks

*************** Inline @[000192] Finishing PHASE Post-import


----------- Statements (and blocks) added due to the inlining of call [000192] -----------

Arguments setup:

Inlinee method body:fgInlineAppendStatements: no gc ref inline locals.

Return expression for call at [000192] is
               [000244] ------------              *  FIELD     int    _key
               [000242] ------------              \--*  ADDR      byref 
               [000243] -------N----                 \--*  LCL_VAR   struct<System.ConsoleKeyInfo, 12> V06 loc4         
Successfully inlined System.ConsoleKeyInfo:get_Key():int:this (7 IL bytes) (depth 1) [below ALWAYS_INLINE size]
--------------------------------------------------------------------------------------------
INLINER: during 'fgInline' result 'success' reason 'below ALWAYS_INLINE size' for 'FalseLeakRepro.Program:Run(System.String[]):this' calling 'System.ConsoleKeyInfo:get_Key():int:this'
INLINER: during 'fgInline' result 'success' reason 'below ALWAYS_INLINE size'

Replacing the return expression placeholder [000193] with [000244]
               [000193] --C---------              *  RET_EXPR  int   (inl return expr [000244])

Inserting the inline return expression
               [000244] ------------              *  FIELD     int    _key
               [000242] ------------              \--*  ADDR      byref 
               [000243] -------N----                 \--*  LCL_VAR   struct<System.ConsoleKeyInfo, 12> V06 loc4         

Expanding INLINE_CANDIDATE in statement STMT00053 in BB23:
STMT00053 (IL 0x1AD...0x1B6)
               [000199] I-C-G-------              *  CALL      int    System.ConsoleKeyInfo.get_Key (exactContextHnd=0x00007FFDB3EE36E9)
               [000198] ------------ this in rcx  \--*  ADDR      byref 
               [000197] -------N----                 \--*  LCL_VAR   struct<System.ConsoleKeyInfo, 12> V06 loc4         
thisArg: is a constant is byref to a struct local
               [000198] ------------              *  ADDR      byref 
               [000197] -------N----              \--*  LCL_VAR   struct<System.ConsoleKeyInfo, 12> V06 loc4         

INLINER: inlineInfo.tokenLookupContextHandle for System.ConsoleKeyInfo:get_Key():int:this set to 0x00007FFDB3EE36E9:

Invoking compiler for the inlinee method System.ConsoleKeyInfo:get_Key():int:this :
IL to import:
IL_0000  02                ldarg.0     
IL_0001  7b eb 00 00 04    ldfld        0x40000EB
IL_0006  2a                ret         

INLINER impTokenLookupContextHandle for System.ConsoleKeyInfo:get_Key():int:this is 0x00007FFDB3EE36E9.
*************** In fgFindBasicBlocks() for System.ConsoleKeyInfo:get_Key():int:this
Jump targets:
  none
New Basic Block BB37 [0036] created.
BB37 [000..007)
Basic block list for 'System.ConsoleKeyInfo:get_Key():int:this'

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd                 weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB37 [0036]  1                             1       [000..007)        (return)                     
-----------------------------------------------------------------------------------------------------------------------------------------

*************** Inline @[000199] Starting PHASE Pre-import

*************** Inline @[000199] Finishing PHASE Pre-import

*************** Inline @[000199] Starting PHASE Profile incorporation
BBOPT not set
Computing inlinee profile scale:
   ... no callee profile data, will use non-pgo weight to scale
   ... call site not profiled, will use non-pgo weight to scale
   call site count 100 callee entry count 100 scale 1
Scaling inlinee blocks

*************** Inline @[000199] Finishing PHASE Profile incorporation
Trees after Profile incorporation

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd                 weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB37 [0036]  1                             1       [000..007)        (return)                     
-----------------------------------------------------------------------------------------------------------------------------------------

------------ BB37 [000..007) (return), preds={} succs={}

-------------------------------------------------------------------------------------------------------------------

*************** Inline @[000199] Starting PHASE Importation
*************** In impImport() for System.ConsoleKeyInfo:get_Key():int:this

impImportBlockPending for BB37

Importing BB37 (PC=000) of 'System.ConsoleKeyInfo:get_Key():int:this'
    [ 0]   0 (0x000) ldarg.0
    [ 1]   1 (0x001) ldfld 040000EB
    [ 1]   6 (0x006) ret

    Inlinee Return expression (before normalization)  =>
               [000248] ------------              *  FIELD     int    _key
               [000246] ------------              \--*  ADDR      byref 
               [000247] -------N----                 \--*  LCL_VAR   struct<System.ConsoleKeyInfo, 12> V06 loc4         


    Inlinee Return expression (after normalization) =>
               [000248] ------------              *  FIELD     int    _key
               [000246] ------------              \--*  ADDR      byref 
               [000247] -------N----                 \--*  LCL_VAR   struct<System.ConsoleKeyInfo, 12> V06 loc4         

After impImport() added block for try,catch,finally
-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd                 weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB37 [0036]  1                             1       [000..007)        (return)                     i 
-----------------------------------------------------------------------------------------------------------------------------------------


** Note: inlinee IL was partially imported -- imported 0 of 7 bytes of method IL

*************** Inline @[000199] Finishing PHASE Importation
Trees after Importation

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd                 weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB37 [0036]  1                             1       [000..007)        (return)                     i 
-----------------------------------------------------------------------------------------------------------------------------------------

------------ BB37 [000..007) (return), preds={} succs={}

-------------------------------------------------------------------------------------------------------------------

*************** Inline @[000199] Starting PHASE Indirect call transform

 -- no candidates to transform

*************** Inline @[000199] Finishing PHASE Indirect call transform [no changes]

*************** Inline @[000199] Starting PHASE Expand patchpoints

 -- no patchpoints to transform

*************** Inline @[000199] Finishing PHASE Expand patchpoints [no changes]

*************** Inline @[000199] Starting PHASE Post-import

*************** In fgRemoveEmptyBlocks

*************** Inline @[000199] Finishing PHASE Post-import


----------- Statements (and blocks) added due to the inlining of call [000199] -----------

Arguments setup:

Inlinee method body:fgInlineAppendStatements: no gc ref inline locals.

Return expression for call at [000199] is
               [000248] ------------              *  FIELD     int    _key
               [000246] ------------              \--*  ADDR      byref 
               [000247] -------N----                 \--*  LCL_VAR   struct<System.ConsoleKeyInfo, 12> V06 loc4         
Successfully inlined System.ConsoleKeyInfo:get_Key():int:this (7 IL bytes) (depth 1) [below ALWAYS_INLINE size]
--------------------------------------------------------------------------------------------
INLINER: during 'fgInline' result 'success' reason 'below ALWAYS_INLINE size' for 'FalseLeakRepro.Program:Run(System.String[]):this' calling 'System.ConsoleKeyInfo:get_Key():int:this'
INLINER: during 'fgInline' result 'success' reason 'below ALWAYS_INLINE size'

Replacing the return expression placeholder [000200] with [000248]
               [000200] --C---------              *  RET_EXPR  int   (inl return expr [000248])

Inserting the inline return expression
               [000248] ------------              *  FIELD     int    _key
               [000246] ------------              \--*  ADDR      byref 
               [000247] -------N----                 \--*  LCL_VAR   struct<System.ConsoleKeyInfo, 12> V06 loc4         

Expanding INLINE_CANDIDATE in statement STMT00055 in BB25:
STMT00055 (IL 0x1C1...0x1CA)
               [000206] I-C-G-------              *  CALL      int    System.ConsoleKeyInfo.get_Key (exactContextHnd=0x00007FFDB3EE36E9)
               [000205] ------------ this in rcx  \--*  ADDR      byref 
               [000204] -------N----                 \--*  LCL_VAR   struct<System.ConsoleKeyInfo, 12> V06 loc4         
thisArg: is a constant is byref to a struct local
               [000205] ------------              *  ADDR      byref 
               [000204] -------N----              \--*  LCL_VAR   struct<System.ConsoleKeyInfo, 12> V06 loc4         

INLINER: inlineInfo.tokenLookupContextHandle for System.ConsoleKeyInfo:get_Key():int:this set to 0x00007FFDB3EE36E9:

Invoking compiler for the inlinee method System.ConsoleKeyInfo:get_Key():int:this :
IL to import:
IL_0000  02                ldarg.0     
IL_0001  7b eb 00 00 04    ldfld        0x40000EB
IL_0006  2a                ret         

INLINER impTokenLookupContextHandle for System.ConsoleKeyInfo:get_Key():int:this is 0x00007FFDB3EE36E9.
*************** In fgFindBasicBlocks() for System.ConsoleKeyInfo:get_Key():int:this
Jump targets:
  none
New Basic Block BB38 [0037] created.
BB38 [000..007)
Basic block list for 'System.ConsoleKeyInfo:get_Key():int:this'

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd                 weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB38 [0037]  1                             1       [000..007)        (return)                     
-----------------------------------------------------------------------------------------------------------------------------------------

*************** Inline @[000206] Starting PHASE Pre-import

*************** Inline @[000206] Finishing PHASE Pre-import

*************** Inline @[000206] Starting PHASE Profile incorporation
BBOPT not set
Computing inlinee profile scale:
   ... no callee profile data, will use non-pgo weight to scale
   ... call site not profiled, will use non-pgo weight to scale
   call site count 100 callee entry count 100 scale 1
Scaling inlinee blocks

*************** Inline @[000206] Finishing PHASE Profile incorporation
Trees after Profile incorporation

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd                 weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB38 [0037]  1                             1       [000..007)        (return)                     
-----------------------------------------------------------------------------------------------------------------------------------------

------------ BB38 [000..007) (return), preds={} succs={}

-------------------------------------------------------------------------------------------------------------------

*************** Inline @[000206] Starting PHASE Importation
*************** In impImport() for System.ConsoleKeyInfo:get_Key():int:this

impImportBlockPending for BB38

Importing BB38 (PC=000) of 'System.ConsoleKeyInfo:get_Key():int:this'
    [ 0]   0 (0x000) ldarg.0
    [ 1]   1 (0x001) ldfld 040000EB
    [ 1]   6 (0x006) ret

    Inlinee Return expression (before normalization)  =>
               [000252] ------------              *  FIELD     int    _key
               [000250] ------------              \--*  ADDR      byref 
               [000251] -------N----                 \--*  LCL_VAR   struct<System.ConsoleKeyInfo, 12> V06 loc4         


    Inlinee Return expression (after normalization) =>
               [000252] ------------              *  FIELD     int    _key
               [000250] ------------              \--*  ADDR      byref 
               [000251] -------N----                 \--*  LCL_VAR   struct<System.ConsoleKeyInfo, 12> V06 loc4         

After impImport() added block for try,catch,finally
-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd                 weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB38 [0037]  1                             1       [000..007)        (return)                     i 
-----------------------------------------------------------------------------------------------------------------------------------------


** Note: inlinee IL was partially imported -- imported 0 of 7 bytes of method IL

*************** Inline @[000206] Finishing PHASE Importation
Trees after Importation

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd                 weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB38 [0037]  1                             1       [000..007)        (return)                     i 
-----------------------------------------------------------------------------------------------------------------------------------------

------------ BB38 [000..007) (return), preds={} succs={}

-------------------------------------------------------------------------------------------------------------------

*************** Inline @[000206] Starting PHASE Indirect call transform

 -- no candidates to transform

*************** Inline @[000206] Finishing PHASE Indirect call transform [no changes]

*************** Inline @[000206] Starting PHASE Expand patchpoints

 -- no patchpoints to transform

*************** Inline @[000206] Finishing PHASE Expand patchpoints [no changes]

*************** Inline @[000206] Starting PHASE Post-import

*************** In fgRemoveEmptyBlocks

*************** Inline @[000206] Finishing PHASE Post-import


----------- Statements (and blocks) added due to the inlining of call [000206] -----------

Arguments setup:

Inlinee method body:fgInlineAppendStatements: no gc ref inline locals.

Return expression for call at [000206] is
               [000252] ------------              *  FIELD     int    _key
               [000250] ------------              \--*  ADDR      byref 
               [000251] -------N----                 \--*  LCL_VAR   struct<System.ConsoleKeyInfo, 12> V06 loc4         
Successfully inlined System.ConsoleKeyInfo:get_Key():int:this (7 IL bytes) (depth 1) [below ALWAYS_INLINE size]
--------------------------------------------------------------------------------------------
INLINER: during 'fgInline' result 'success' reason 'below ALWAYS_INLINE size' for 'FalseLeakRepro.Program:Run(System.String[]):this' calling 'System.ConsoleKeyInfo:get_Key():int:this'
INLINER: during 'fgInline' result 'success' reason 'below ALWAYS_INLINE size'

Replacing the return expression placeholder [000207] with [000252]
               [000207] --C---------              *  RET_EXPR  int   (inl return expr [000252])

Inserting the inline return expression
               [000252] ------------              *  FIELD     int    _key
               [000250] ------------              \--*  ADDR      byref 
               [000251] -------N----                 \--*  LCL_VAR   struct<System.ConsoleKeyInfo, 12> V06 loc4         

**************** Inline Tree
Inlines into 06000005 [via ExtendedDefaultPolicy] FalseLeakRepro.Program:Run(System.String[]):this
  [0 IL=0000 TR=000000 06000E35] [FAILED: too many il bytes] System.DateTime:get_Now():System.DateTime
  [0 IL=0023 TR=000009 06000083] [FAILED: noinline per IL/cached result] System.Console:WriteLine(System.String)
  [0 IL=0018 TR=000008 060007D6] [FAILED: noinline per VM] System.String:Concat(System.String,System.String):System.String
  [0 IL=0008 TR=000006 06000E50] [FAILED: noinline per VM] System.DateTime:ToString():System.String:this
  [0 IL=0029 TR=000016 06000003] [FAILED: unprofitable inline] FalseLeakRepro.List:.ctor():this
  [0 IL=0050 TR=000028 06000557] [FAILED: noinline per VM] System.Object:.ctor():this
  [0 IL=0067 TR=000042 0600054D] [FAILED: noinline per VM] System.MulticastDelegate:CtorClosed(System.Object,long):this
  [0 IL=0072 TR=000049 06002CD8] [FAILED: noinline per VM] System.Threading.Thread:.ctor(System.Threading.ParameterizedThreadStart):this
  [0 IL=0077 TR=000051 06002CDE] [FAILED: noinline per VM] System.Threading.Thread:Start():this
  [0 IL=0082 TR=000052 06000E35] [FAILED: noinline per IL/cached result] System.DateTime:get_Now():System.DateTime
  [0 IL=0105 TR=000061 06000083] [FAILED: noinline per IL/cached result] System.Console:WriteLine(System.String)
  [0 IL=0100 TR=000060 060007D6] [FAILED: noinline per VM] System.String:Concat(System.String,System.String):System.String
  [0 IL=0090 TR=000058 06000E50] [FAILED: noinline per VM] System.DateTime:ToString():System.String:this
  [0 IL=0126 TR=000079 06002C5D] [FAILED: noinline per VM] System.Threading.Monitor:Enter(System.Object,byref)
  [1 IL=0142 TR=000088 06000001] [below ALWAYS_INLINE size] FalseLeakRepro.Node:.ctor():this
    [0 IL=0001 TR=000230 06000557] [FAILED: noinline per VM] System.Object:.ctor():this
  [0 IL=0190 TR=000111 06000557] [FAILED: noinline per VM] System.Object:.ctor():this
  [0 IL=0206 TR=000129 06002C60] [FAILED: cannot get method info] System.Threading.Monitor:Exit(System.Object)
  [0 IL=0221 TR=000130 06000E35] [FAILED: noinline per IL/cached result] System.DateTime:get_Now():System.DateTime
  [0 IL=0244 TR=000139 06000083] [FAILED: noinline per IL/cached result] System.Console:WriteLine(System.String)
  [0 IL=0239 TR=000138 060007D6] [FAILED: noinline per VM] System.String:Concat(System.String,System.String):System.String
  [0 IL=0229 TR=000136 06000E50] [FAILED: noinline per VM] System.DateTime:ToString():System.String:this
  [0 IL=0261 TR=000150 06002C5D] [FAILED: noinline per VM] System.Threading.Monitor:Enter(System.Object,byref)
  [0 IL=0298 TR=000229 06002C60] [FAILED: noinline per IL/cached result] System.Threading.Monitor:Exit(System.Object)
  [0 IL=0306 TR=000160 06002CEB] [FAILED: noinline per IL/cached result] System.Threading.Thread:Sleep(int)
  [0 IL=0313 TR=000161 06000E35] [FAILED: noinline per IL/cached result] System.DateTime:get_Now():System.DateTime
  [0 IL=0336 TR=000170 06000083] [FAILED: noinline per IL/cached result] System.Console:WriteLine(System.String)
  [0 IL=0331 TR=000169 060007D6] [FAILED: noinline per VM] System.String:Concat(System.String,System.String):System.String
  [0 IL=0321 TR=000167 06000E50] [FAILED: noinline per VM] System.DateTime:ToString():System.String:this
  [0 IL=0346 TR=000172 06000083] [FAILED: noinline per IL/cached result] System.Console:WriteLine(System.String)
  [0 IL=0356 TR=000174 06000083] [FAILED: noinline per IL/cached result] System.Console:WriteLine(System.String)
  [0 IL=0366 TR=000176 06000083] [FAILED: noinline per IL/cached result] System.Console:WriteLine(System.String)
  [0 IL=0376 TR=000178 06000083] [FAILED: noinline per IL/cached result] System.Console:WriteLine(System.String)
  [2 IL=0381 TR=000179 06000035] [below ALWAYS_INLINE size] System.Console:ReadKey():System.ConsoleKeyInfo
  [3 IL=0390 TR=000185 060000AB] [below ALWAYS_INLINE size] System.ConsoleKeyInfo:get_Key():int:this
  [0 IL=0404 TR=000222 0600045C] [FAILED: noinline per VM] System.GC:Collect(int)
  [0 IL=0399 TR=000221 06000464] [FAILED: noinline per VM] System.GC:get_MaxGeneration():int
  [4 IL=0413 TR=000192 060000AB] [below ALWAYS_INLINE size] System.ConsoleKeyInfo:get_Key():int:this
  [0 IL=0422 TR=000220 060063DF] [FAILED: noinline per IL/cached result] System.Diagnostics.Debugger:Break()
  [5 IL=0431 TR=000199 060000AB] [below ALWAYS_INLINE size] System.ConsoleKeyInfo:get_Key():int:this
  [6 IL=0451 TR=000206 060000AB] [below ALWAYS_INLINE size] System.ConsoleKeyInfo:get_Key():int:this
Budget: initialTime=1464, finalTime=1394, initialBudget=14640, currentBudget=14640
Budget: initialSize=10801, finalSize=10801

*************** Finishing PHASE Morph - Inlining
Trees after Morph - Inlining

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd                 weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..072)-> BB08 (always)                     i newobj 
BB02 [0001]  1                             1       [072..07B)                                     i bwd bwd-target 
BB03 [0002]  1  0                          1       [07B..0CA)-> BB27 (always) T0      try { }     keep i try newobj bwd 
BB27 [0026]  1                             1       [???..???)-> BB04 (callf )                     i internal 
BB28 [0027]  0                             1       [???..???)-> BB07 (ALWAYS)                     i internal KEEP 
BB04 [0003]  1     0                       1       [0CA..0CD)-> BB06 ( cond )    H0   finally {   keep i bwd 
BB05 [0004]  1     0                       1       [0CD..0D3)                    H0               i bwd 
BB06 [0005]  2     0                       1       [0D3..0D4)        (finret)    H0   }           i bwd 
BB07 [0006]  1                             1       [0D4..0D8)                                     i bwd 
BB08 [0007]  2                             1       [0D8..0DD)-> BB02 ( cond )                     i bwd 
BB09 [0008]  1                             1       [0DD..0F9)                                     i 
BB10 [0009]  2                             1       [0F9..102)                                     i bwd bwd-target 
BB11 [0010]  1  1                          1       [102..122)-> BB13 ( cond ) T1      try {       keep i try bwd 
BB12 [0011]  1  1                          1       [122..124)-> BB31 (always) T1                  i bwd 
BB13 [0012]  1  1                          1       [124..126)-> BB29 (always) T1      }           i bwd 
BB31 [0030]  1                             1       [???..???)-> BB14 (callf )                     i internal 
BB32 [0031]  0                             1       [???..???)-> BB18 (ALWAYS)                     i internal KEEP 
BB29 [0028]  1                             1       [???..???)-> BB14 (callf )                     i internal 
BB30 [0029]  0                             1       [???..???)-> BB17 (ALWAYS)                     i internal KEEP 
BB14 [0013]  1     1                       1       [126..129)-> BB16 ( cond )    H1   finally {   keep i bwd 
BB15 [0014]  1     1                       1       [129..12F)                    H1               i bwd 
BB16 [0015]  2     1                       1       [12F..130)        (finret)    H1   }           i bwd 
BB17 [0016]  1                             1       [130..139)-> BB10 (always)                     i bwd 
BB18 [0017]  1                             1       [139..17D)                                     i 
BB19 [0018]  5                             1       [17D..18F)-> BB21 ( cond )                     i bwd bwd-target 
BB20 [0019]  1                             1       [18F..19B)-> BB19 (always)                     i bwd 
BB21 [0020]  1                             1       [19B..1A6)-> BB23 ( cond )                     i bwd 
BB22 [0021]  1                             1       [1A6..1AD)-> BB19 (always)                     i bwd 
BB23 [0022]  1                             1       [1AD..1B8)-> BB25 ( cond )                     i bwd 
BB24 [0023]  1                             1       [1B8..1C1)-> BB19 (always)                     i bwd 
BB25 [0024]  1                             1       [1C1..1CC)-> BB19 ( cond )                     i bwd 
BB26 [0025]  1                             1       [1CC..1D4)        (return)                     i 
-----------------------------------------------------------------------------------------------------------------------------------------

------------ BB01 [000..072) -> BB08 (always), preds={} succs={BB08}

***** BB01
STMT00000 (IL 0x000...0x005)
               [000003] -AC-G-------              *  ASG       struct (copy)
               [000001] D------N----              +--*  LCL_VAR   struct<System.DateTime, 8> V02 loc0         
               [000000] --C-G-------              \--*  CALL      struct System.DateTime.get_Now

***** BB01
STMT00001 (IL 0x006...0x022)
               [000009] --C-G-------              *  CALL      void   System.Console.WriteLine
               [000008] --C-G------- arg0         \--*  CALL      ref    System.String.Concat
               [000006] --C-G------- arg0            +--*  CALL      ref    System.DateTime.ToString
               [000005] ------------ this in rcx     |  \--*  ADDR      byref 
               [000004] -------N----                 |     \--*  LCL_VAR   struct<System.DateTime, 8> V02 loc0         
               [000007] ------------ arg1            \--*  CNS_STR   ref   <string constant>

***** BB01
STMT00002 (IL 0x01C...  ???)
               [000014] -A----------              *  ASG       ref   
               [000013] D------N----              +--*  LCL_VAR   ref    V08 tmp1         
               [000012] ------------              \--*  ALLOCOBJ  ref   
               [000011] H-----------                 \--*  CNS_INT(h) long   0x7ffdb3ee2350 method

***** BB01
STMT00003 (IL   ???...  ???)
               [000016] --C-G-------              *  CALL      void   FalseLeakRepro.List..ctor
               [000015] ------------ this in rcx  \--*  LCL_VAR   ref    V08 tmp1         

***** BB01
STMT00004 (IL 0x022...  ???)
               [000019] -A-XG-------              *  ASG       ref   
               [000018] ---XG--N----              +--*  FIELD     ref    _myList
               [000010] ------------              |  \--*  LCL_VAR   ref    V00 this         
               [000017] ------------              \--*  LCL_VAR   ref    V08 tmp1         

***** BB01
STMT00005 (IL 0x027...0x037)
               [000026] -A----------              *  ASG       ref   
               [000025] D------N----              +--*  LCL_VAR   ref    V09 tmp2         
               [000024] ------------              \--*  ALLOCOBJ  ref   
               [000023] H-----------                 \--*  CNS_INT(h) long   0x7ffdb3b058b8 token

***** BB01
STMT00007 (IL   ???...  ???)
               [000030] -A-XG-------              *  ASG       ref   
               [000029] D------N----              +--*  LCL_VAR   ref    V10 tmp3         
               [000022] ---XG-------              \--*  FIELD     ref    Head
               [000021] ---XG-------                 \--*  FIELD     ref    _myList
               [000020] ------------                    \--*  LCL_VAR   ref    V00 this         

***** BB01
STMT00006 (IL   ???...  ???)
               [000028] --C-G-------              *  CALL      void   System.Object..ctor
               [000027] ------------ this in rcx  \--*  LCL_VAR   ref    V09 tmp2         

***** BB01
STMT00008 (IL 0x037...  ???)
               [000034] -A-XG-------              *  ASG       ref   
               [000033] ---XG--N----              +--*  FIELD     ref    Data
               [000031] ------------              |  \--*  LCL_VAR   ref    V10 tmp3         
               [000032] ------------              \--*  LCL_VAR   ref    V09 tmp2         

***** BB01
STMT00009 (IL 0x03C...0x057)
               [000040] -A----------              *  ASG       ref   
               [000039] D------N----              +--*  LCL_VAR   ref    V11 tmp4         
               [000038] ------------              \--*  ALLOCOBJ  ref   
               [000037] H-----------                 \--*  CNS_INT(h) long   0x7ffdb3ee6200 token

***** BB01
STMT00010 (IL   ???...  ???)
               [000042] --C-G-------              *  CALL      void   System.MulticastDelegate.CtorClosed
               [000041] ------------ this in rcx  +--*  LCL_VAR   ref    V11 tmp4         
               [000035] ------------ arg1         +--*  LCL_VAR   ref    V00 this         
               [000036] ------------ arg2         \--*  FTN_ADDR  long   FalseLeakRepro.Program.<Run>b__3_0


***** BB01
STMT00011 (IL 0x048...  ???)
               [000047] -A----------              *  ASG       ref   
               [000046] D------N----              +--*  LCL_VAR   ref    V12 tmp5         
               [000045] ------------              \--*  ALLOCOBJ  ref   
               [000044] H-----------                 \--*  CNS_INT(h) long   0x7ffdb3c84e80 token

***** BB01
STMT00012 (IL   ???...  ???)
               [000049] --C-G-------              *  CALL      void   System.Threading.Thread..ctor
               [000048] ------------ this in rcx  +--*  LCL_VAR   ref    V12 tmp5         
               [000043] ------------ arg1         \--*  LCL_VAR   ref    V11 tmp4         

***** BB01
STMT00013 (IL 0x04D...  ???)
               [000051] --C-G-------              *  CALL nullcheck void   System.Threading.Thread.Start
               [000050] ------------ this in rcx  \--*  LCL_VAR   ref    V12 tmp5         

***** BB01
STMT00014 (IL 0x052...  ???)
               [000055] -AC-G-------              *  ASG       struct (copy)
               [000053] D------N----              +--*  LCL_VAR   struct<System.DateTime, 8> V02 loc0         
               [000052] --C-G-------              \--*  CALL      struct System.DateTime.get_Now

***** BB01
STMT00015 (IL 0x058...0x06F)
               [000061] --C-G-------              *  CALL      void   System.Console.WriteLine
               [000060] --C-G------- arg0         \--*  CALL      ref    System.String.Concat
               [000058] --C-G------- arg0            +--*  CALL      ref    System.DateTime.ToString
               [000057] ------------ this in rcx     |  \--*  ADDR      byref 
               [000056] -------N----                 |     \--*  LCL_VAR   struct<System.DateTime, 8> V02 loc0         
               [000059] ------------ arg1            \--*  CNS_STR   ref   <string constant>

***** BB01
STMT00016 (IL 0x06E...  ???)
               [000064] -A----------              *  ASG       int   
               [000063] D------N----              +--*  LCL_VAR   int    V03 loc1         
               [000062] ------------              \--*  CNS_INT   int    0

------------ BB02 [072..07B), preds={} succs={BB03}

***** BB02
STMT00018 (IL 0x072...0x078)
               [000072] -A-XG-------              *  ASG       ref   
               [000071] D------N----              +--*  LCL_VAR   ref    V04 loc2         
               [000070] ---XG-------              \--*  FIELD     ref    _myList
               [000069] ------------                 \--*  LCL_VAR   ref    V00 this         

***** BB02
STMT00019 (IL 0x079...0x07A)
               [000075] -A----------              *  ASG       int   
               [000074] D------N----              +--*  LCL_VAR   int    V05 loc3         
               [000073] ------------              \--*  CNS_INT   int    0

------------ BB03 [07B..0CA) -> BB27 (always), preds={} succs={BB27}

***** BB03
STMT00020 (IL 0x07B...0x093)
               [000079] --C-G-------              *  CALL      void   System.Threading.Monitor.Enter
               [000076] ------------ arg0         +--*  LCL_VAR   ref    V04 loc2         
               [000078] ------------ arg1         \--*  ADDR      byref 
               [000077] -------N----                 \--*  LCL_VAR   int    V05 loc3         

***** BB03
STMT00021 (IL 0x083...  ???)
               [000086] -A----------              *  ASG       ref   
               [000085] D------N----              +--*  LCL_VAR   ref    V13 tmp6         
               [000084] ------------              \--*  ALLOCOBJ  ref   
               [000083] H-----------                 \--*  CNS_INT(h) long   0x7ffdb3ee58a8 method

***** BB03
STMT00023 (IL   ???...  ???)
               [000090] -A-XG-------              *  ASG       ref   
               [000089] D------N----              +--*  LCL_VAR   ref    V14 tmp7         
               [000082] ---XG-------              \--*  FIELD     ref    Head
               [000081] ---XG-------                 \--*  FIELD     ref    _myList
               [000080] ------------                    \--*  LCL_VAR   ref    V00 this         

***** BB03
STMT00065 (IL   ???...  ???)
               [000230] --C-G-------              *  CALL      void   System.Object..ctor
               [000087] ------------ this in rcx  \--*  LCL_VAR   ref    V13 tmp6         

***** BB03
STMT00024 (IL 0x093...  ???)
               [000094] -A-XG-------              *  ASG       ref   
               [000093] ---XG--N----              +--*  FIELD     ref    Next
               [000091] ------------              |  \--*  LCL_VAR   ref    V14 tmp7         
               [000092] ------------              \--*  LCL_VAR   ref    V13 tmp6         

***** BB03
STMT00025 (IL 0x098...0x0AE)
               [000102] -A-XG-------              *  ASG       ref   
               [000101] ---XG--N----              +--*  FIELD     ref    Head
               [000096] ---XG-------              |  \--*  FIELD     ref    _myList
               [000095] ------------              |     \--*  LCL_VAR   ref    V00 this         
               [000100] ---XG-------              \--*  FIELD     ref    Next
               [000099] ---XG-------                 \--*  FIELD     ref    Head
               [000098] ---XG-------                    \--*  FIELD     ref    _myList
               [000097] ------------                       \--*  LCL_VAR   ref    V00 this         

***** BB03
STMT00026 (IL 0x0B3...0x0C3)
               [000109] -A----------              *  ASG       ref   
               [000108] D------N----              +--*  LCL_VAR   ref    V15 tmp8         
               [000107] ------------              \--*  ALLOCOBJ  ref   
               [000106] H-----------                 \--*  CNS_INT(h) long   0x7ffdb3b058b8 token

***** BB03
STMT00028 (IL   ???...  ???)
               [000113] -A-XG-------              *  ASG       ref   
               [000112] D------N----              +--*  LCL_VAR   ref    V16 tmp9         
               [000105] ---XG-------              \--*  FIELD     ref    Head
               [000104] ---XG-------                 \--*  FIELD     ref    _myList
               [000103] ------------                    \--*  LCL_VAR   ref    V00 this         

***** BB03
STMT00027 (IL   ???...  ???)
               [000111] --C-G-------              *  CALL      void   System.Object..ctor
               [000110] ------------ this in rcx  \--*  LCL_VAR   ref    V15 tmp8         

***** BB03
STMT00029 (IL 0x0C3...  ???)
               [000117] -A-XG-------              *  ASG       ref   
               [000116] ---XG--N----              +--*  FIELD     ref    Data
               [000114] ------------              |  \--*  LCL_VAR   ref    V16 tmp9         
               [000115] ------------              \--*  LCL_VAR   ref    V15 tmp8         

------------ BB27 [???..???) -> BB04 (callf), preds={} succs={BB04}

------------ BB28 [???..???) -> BB07 (ALWAYS), preds={} succs={BB07}

------------ BB04 [0CA..0CD) -> BB06 (cond), preds={} succs={BB05,BB06}

***** BB04
STMT00031 (IL 0x0CA...0x0CB)
               [000126] ------------              *  JTRUE     void  
               [000125] ------------              \--*  EQ        int   
               [000123] ------------                 +--*  LCL_VAR   int    V05 loc3         
               [000124] ------------                 \--*  CNS_INT   int    0

------------ BB05 [0CD..0D3), preds={} succs={BB06}

***** BB05
STMT00033 (IL 0x0CD...0x0CE)
               [000129] --C-G-------              *  CALL      void   System.Threading.Monitor.Exit
               [000128] ------------ arg0         \--*  LCL_VAR   ref    V04 loc2         

------------ BB06 [0D3..0D4) (finret), preds={} succs={BB28}

***** BB06
STMT00032 (IL 0x0D3...0x0D3)
               [000127] ------------              *  RETFILT   void  

------------ BB07 [0D4..0D8), preds={} succs={BB08}

***** BB07
STMT00030 (IL 0x0D4...0x0D7)
               [000122] -A----------              *  ASG       int   
               [000121] D------N----              +--*  LCL_VAR   int    V03 loc1         
               [000120] ------------              \--*  ADD       int   
               [000118] ------------                 +--*  LCL_VAR   int    V03 loc1         
               [000119] ------------                 \--*  CNS_INT   int    1

------------ BB08 [0D8..0DD) -> BB02 (cond), preds={} succs={BB09,BB02}

***** BB08
STMT00017 (IL 0x0D8...0x0DB)
               [000068] ------------              *  JTRUE     void  
               [000067] ------------              \--*  LT        int   
               [000065] ------------                 +--*  LCL_VAR   int    V03 loc1         
               [000066] ------------                 \--*  CNS_INT   int    10

------------ BB09 [0DD..0F9), preds={} succs={BB10}

***** BB09
STMT00034 (IL 0x0DD...0x0E2)
               [000133] -AC-G-------              *  ASG       struct (copy)
               [000131] D------N----              +--*  LCL_VAR   struct<System.DateTime, 8> V02 loc0         
               [000130] --C-G-------              \--*  CALL      struct System.DateTime.get_Now

***** BB09
STMT00035 (IL 0x0E3...0x0F4)
               [000139] --C-G-------              *  CALL      void   System.Console.WriteLine
               [000138] --C-G------- arg0         \--*  CALL      ref    System.String.Concat
               [000136] --C-G------- arg0            +--*  CALL      ref    System.DateTime.ToString
               [000135] ------------ this in rcx     |  \--*  ADDR      byref 
               [000134] -------N----                 |     \--*  LCL_VAR   struct<System.DateTime, 8> V02 loc0         
               [000137] ------------ arg1            \--*  CNS_STR   ref   <string constant>

------------ BB10 [0F9..102), preds={} succs={BB11}

***** BB10
STMT00036 (IL 0x0F9...0x0FF)
               [000143] -A-XG-------              *  ASG       ref   
               [000142] D------N----              +--*  LCL_VAR   ref    V04 loc2         
               [000141] ---XG-------              \--*  FIELD     ref    _myList
               [000140] ------------                 \--*  LCL_VAR   ref    V00 this         

***** BB10
STMT00037 (IL 0x100...0x101)
               [000146] -A----------              *  ASG       int   
               [000145] D------N----              +--*  LCL_VAR   int    V05 loc3         
               [000144] ------------              \--*  CNS_INT   int    0

------------ BB11 [102..122) -> BB13 (cond), preds={} succs={BB12,BB13}

***** BB11
STMT00038 (IL 0x102...0x120)
               [000150] --C-G-------              *  CALL      void   System.Threading.Monitor.Enter
               [000147] ------------ arg0         +--*  LCL_VAR   ref    V04 loc2         
               [000149] ------------ arg1         \--*  ADDR      byref 
               [000148] -------N----                 \--*  LCL_VAR   int    V05 loc3         

***** BB11
STMT00039 (IL 0x10A...  ???)
               [000158] ---XG-------              *  JTRUE     void  
               [000157] N--XG----U--              \--*  NE        int   
               [000153] ---XG-------                 +--*  FIELD     ref    Head
               [000152] ---XG-------                 |  \--*  FIELD     ref    _myList
               [000151] ------------                 |     \--*  LCL_VAR   ref    V00 this         
               [000156] ---XG-------                 \--*  FIELD     ref    Tail
               [000155] ---XG-------                    \--*  FIELD     ref    _myList
               [000154] ------------                       \--*  LCL_VAR   ref    V00 this         

------------ BB12 [122..124) -> BB31 (always), preds={} succs={BB31}

------------ BB13 [124..126) -> BB29 (always), preds={} succs={BB29}

------------ BB31 [???..???) -> BB14 (callf), preds={} succs={BB14}

------------ BB32 [???..???) -> BB18 (ALWAYS), preds={} succs={BB18}

------------ BB29 [???..???) -> BB14 (callf), preds={} succs={BB14}

------------ BB30 [???..???) -> BB17 (ALWAYS), preds={} succs={BB17}

------------ BB14 [126..129) -> BB16 (cond), preds={} succs={BB15,BB16}

***** BB14
STMT00062 (IL 0x126...0x127)
               [000226] ------------              *  JTRUE     void  
               [000225] ------------              \--*  EQ        int   
               [000223] ------------                 +--*  LCL_VAR   int    V05 loc3         
               [000224] ------------                 \--*  CNS_INT   int    0

------------ BB15 [129..12F), preds={} succs={BB16}

***** BB15
STMT00064 (IL 0x129...0x12A)
               [000229] --C-G-------              *  CALL      void   System.Threading.Monitor.Exit
               [000228] ------------ arg0         \--*  LCL_VAR   ref    V04 loc2         

------------ BB16 [12F..130) (finret), preds={} succs={BB32,BB30}

***** BB16
STMT00063 (IL 0x12F...0x12F)
               [000227] ------------              *  RETFILT   void  

------------ BB17 [130..139) -> BB10 (always), preds={} succs={BB10}

***** BB17
STMT00040 (IL 0x130...0x137)
               [000160] --C-G-------              *  CALL      void   System.Threading.Thread.Sleep
               [000159] ------------ arg0         \--*  CNS_INT   int    100

------------ BB18 [139..17D), preds={} succs={BB19}

***** BB18
STMT00041 (IL 0x139...0x13E)
               [000164] -AC-G-------              *  ASG       struct (copy)
               [000162] D------N----              +--*  LCL_VAR   struct<System.DateTime, 8> V02 loc0         
               [000161] --C-G-------              \--*  CALL      struct System.DateTime.get_Now

***** BB18
STMT00042 (IL 0x13F...0x178)
               [000170] --C-G-------              *  CALL      void   System.Console.WriteLine
               [000169] --C-G------- arg0         \--*  CALL      ref    System.String.Concat
               [000167] --C-G------- arg0            +--*  CALL      ref    System.DateTime.ToString
               [000166] ------------ this in rcx     |  \--*  ADDR      byref 
               [000165] -------N----                 |     \--*  LCL_VAR   struct<System.DateTime, 8> V02 loc0         
               [000168] ------------ arg1            \--*  CNS_STR   ref   <string constant>

***** BB18
STMT00043 (IL 0x155...  ???)
               [000172] --C-G-------              *  CALL      void   System.Console.WriteLine
               [000171] ------------ arg0         \--*  CNS_STR   ref   <string constant>

***** BB18
STMT00044 (IL 0x15F...  ???)
               [000174] --C-G-------              *  CALL      void   System.Console.WriteLine
               [000173] ------------ arg0         \--*  CNS_STR   ref   <string constant>

***** BB18
STMT00045 (IL 0x169...  ???)
               [000176] --C-G-------              *  CALL      void   System.Console.WriteLine
               [000175] ------------ arg0         \--*  CNS_STR   ref   <string constant>

***** BB18
STMT00046 (IL 0x173...  ???)
               [000178] --C-G-------              *  CALL      void   System.Console.WriteLine
               [000177] ------------ arg0         \--*  CNS_STR   ref   <string constant>

------------ BB19 [17D..18F) -> BB21 (cond), preds={} succs={BB20,BB21}

***** BB19
STMT00048 (IL   ???...  ???)
               [000233] S-C-G-------              *  CALL      void   System.ConsolePal.ReadKey
               [000235] ------------ arg0         +--*  ADDR      byref 
               [000236] -------N----              |  \--*  LCL_VAR   struct<System.ConsoleKeyInfo, 12> V06 loc4         
               [000234] ------------ arg1         \--*  PUTARG_TYPE bool  
               [000232] ------------                 \--*  CNS_INT   int    0

***** BB19
STMT00050 (IL   ???...  ???)
               [000189] --C---------              *  JTRUE     void  
               [000188] N-C------U--              \--*  NE        int   
               [000240] ------------                 +--*  FIELD     int    _key
               [000238] ------------                 |  \--*  ADDR      byref 
               [000239] -------N----                 |     \--*  LCL_VAR   struct<System.ConsoleKeyInfo, 12> V06 loc4         
               [000187] ------------                 \--*  CNS_INT   int    71

------------ BB20 [18F..19B) -> BB19 (always), preds={} succs={BB19}

***** BB20
STMT00061 (IL 0x18F...0x199)
               [000222] --C-G-------              *  CALL      void   System.GC.Collect
               [000221] --C-G------- arg0         \--*  CALL      int    System.GC.get_MaxGeneration

------------ BB21 [19B..1A6) -> BB23 (cond), preds={} succs={BB22,BB23}

***** BB21
STMT00052 (IL   ???...  ???)
               [000196] --C---------              *  JTRUE     void  
               [000195] N-C------U--              \--*  NE        int   
               [000244] ------------                 +--*  FIELD     int    _key
               [000242] ------------                 |  \--*  ADDR      byref 
               [000243] -------N----                 |     \--*  LCL_VAR   struct<System.ConsoleKeyInfo, 12> V06 loc4         
               [000194] ------------                 \--*  CNS_INT   int    72

------------ BB22 [1A6..1AD) -> BB19 (always), preds={} succs={BB19}

***** BB22
STMT00060 (IL 0x1A6...0x1AB)
               [000220] --C-G-------              *  CALL      void   System.Diagnostics.Debugger.Break

------------ BB23 [1AD..1B8) -> BB25 (cond), preds={} succs={BB24,BB25}

***** BB23
STMT00054 (IL   ???...  ???)
               [000203] --C---------              *  JTRUE     void  
               [000202] N-C------U--              \--*  NE        int   
               [000248] ------------                 +--*  FIELD     int    _key
               [000246] ------------                 |  \--*  ADDR      byref 
               [000247] -------N----                 |     \--*  LCL_VAR   struct<System.ConsoleKeyInfo, 12> V06 loc4         
               [000201] ------------                 \--*  CNS_INT   int    82

------------ BB24 [1B8..1C1) -> BB19 (always), preds={} succs={BB19}

***** BB24
STMT00059 (IL 0x1B8...0x1BA)
               [000219] -A-XG-------              *  ASG       bool  
               [000218] ---XG--N----              +--*  FIELD     bool   _running
               [000216] ------------              |  \--*  LCL_VAR   ref    V00 this         
               [000217] ------------              \--*  CNS_INT   int    0

------------ BB25 [1C1..1CC) -> BB19 (cond), preds={} succs={BB26,BB19}

***** BB25
STMT00056 (IL   ???...  ???)
               [000210] --C---------              *  JTRUE     void  
               [000209] N-C------U--              \--*  NE        int   
               [000252] ------------                 +--*  FIELD     int    _key
               [000250] ------------                 |  \--*  ADDR      byref 
               [000251] -------N----                 |     \--*  LCL_VAR   struct<System.ConsoleKeyInfo, 12> V06 loc4         
               [000208] ------------                 \--*  CNS_INT   int    81

------------ BB26 [1CC..1D4) (return), preds={} succs={}

***** BB26
STMT00057 (IL 0x1CC...0x1CE)
               [000214] -A-XG-------              *  ASG       bool  
               [000213] ---XG--N----              +--*  FIELD     bool   _running
               [000211] ------------              |  \--*  LCL_VAR   ref    V00 this         
               [000212] ------------              \--*  CNS_INT   int    0

***** BB26
STMT00058 (IL 0x1D3...0x1D3)
               [000215] ------------              *  RETURN    void  

-------------------------------------------------------------------------------------------------------------------

*************** Starting PHASE Allocate Objects
disabled, punting

*************** Finishing PHASE Allocate Objects [no changes]

*************** Starting PHASE Morph - Add internal blocks

*************** After fgAddInternal()

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd                 weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..072)-> BB08 (always)                     i newobj 
BB02 [0001]  1                             1       [072..07B)                                     i bwd bwd-target 
BB03 [0002]  1  0                          1       [07B..0CA)-> BB27 (always) T0      try { }     keep i try newobj bwd 
BB27 [0026]  1                             1       [???..???)-> BB04 (callf )                     i internal 
BB28 [0027]  0                             1       [???..???)-> BB07 (ALWAYS)                     i internal KEEP 
BB04 [0003]  1     0                       1       [0CA..0CD)-> BB06 ( cond )    H0   finally {   keep i bwd 
BB05 [0004]  1     0                       1       [0CD..0D3)                    H0               i bwd 
BB06 [0005]  2     0                       1       [0D3..0D4)        (finret)    H0   }           i bwd 
BB07 [0006]  1                             1       [0D4..0D8)                                     i bwd 
BB08 [0007]  2                             1       [0D8..0DD)-> BB02 ( cond )                     i bwd 
BB09 [0008]  1                             1       [0DD..0F9)                                     i 
BB10 [0009]  2                             1       [0F9..102)                                     i bwd bwd-target 
BB11 [0010]  1  1                          1       [102..122)-> BB13 ( cond ) T1      try {       keep i try bwd 
BB12 [0011]  1  1                          1       [122..124)-> BB31 (always) T1                  i bwd 
BB13 [0012]  1  1                          1       [124..126)-> BB29 (always) T1      }           i bwd 
BB31 [0030]  1                             1       [???..???)-> BB14 (callf )                     i internal 
BB32 [0031]  0                             1       [???..???)-> BB18 (ALWAYS)                     i internal KEEP 
BB29 [0028]  1                             1       [???..???)-> BB14 (callf )                     i internal 
BB30 [0029]  0                             1       [???..???)-> BB17 (ALWAYS)                     i internal KEEP 
BB14 [0013]  1     1                       1       [126..129)-> BB16 ( cond )    H1   finally {   keep i bwd 
BB15 [0014]  1     1                       1       [129..12F)                    H1               i bwd 
BB16 [0015]  2     1                       1       [12F..130)        (finret)    H1   }           i bwd 
BB17 [0016]  1                             1       [130..139)-> BB10 (always)                     i bwd 
BB18 [0017]  1                             1       [139..17D)                                     i 
BB19 [0018]  5                             1       [17D..18F)-> BB21 ( cond )                     i bwd bwd-target 
BB20 [0019]  1                             1       [18F..19B)-> BB19 (always)                     i bwd 
BB21 [0020]  1                             1       [19B..1A6)-> BB23 ( cond )                     i bwd 
BB22 [0021]  1                             1       [1A6..1AD)-> BB19 (always)                     i bwd 
BB23 [0022]  1                             1       [1AD..1B8)-> BB25 ( cond )                     i bwd 
BB24 [0023]  1                             1       [1B8..1C1)-> BB19 (always)                     i bwd 
BB25 [0024]  1                             1       [1C1..1CC)-> BB19 ( cond )                     i bwd 
BB26 [0025]  1                             1       [1CC..1D4)        (return)                     i 
-----------------------------------------------------------------------------------------------------------------------------------------

***************  Exception Handling table
index  eTry, eHnd
  0  ::            - Try at BB03..BB03 [07B..0CA), Finally at BB04..BB06 [0CA..0D4)
  1  ::            - Try at BB11..BB13 [102..126), Finally at BB14..BB16 [126..130)

*************** Finishing PHASE Morph - Add internal blocks

*************** Starting PHASE Remove empty try

*************** In fgRemoveEmptyTry()

*************** Before fgRemoveEmptyTry()

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd                 weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..072)-> BB08 (always)                     i newobj 
BB02 [0001]  1                             1       [072..07B)                                     i bwd bwd-target 
BB03 [0002]  1  0                          1       [07B..0CA)-> BB27 (always) T0      try { }     keep i try newobj bwd 
BB27 [0026]  1                             1       [???..???)-> BB04 (callf )                     i internal 
BB28 [0027]  0                             1       [???..???)-> BB07 (ALWAYS)                     i internal KEEP 
BB04 [0003]  1     0                       1       [0CA..0CD)-> BB06 ( cond )    H0   finally {   keep i bwd 
BB05 [0004]  1     0                       1       [0CD..0D3)                    H0               i bwd 
BB06 [0005]  2     0                       1       [0D3..0D4)        (finret)    H0   }           i bwd 
BB07 [0006]  1                             1       [0D4..0D8)                                     i bwd 
BB08 [0007]  2                             1       [0D8..0DD)-> BB02 ( cond )                     i bwd 
BB09 [0008]  1                             1       [0DD..0F9)                                     i 
BB10 [0009]  2                             1       [0F9..102)                                     i bwd bwd-target 
BB11 [0010]  1  1                          1       [102..122)-> BB13 ( cond ) T1      try {       keep i try bwd 
BB12 [0011]  1  1                          1       [122..124)-> BB31 (always) T1                  i bwd 
BB13 [0012]  1  1                          1       [124..126)-> BB29 (always) T1      }           i bwd 
BB31 [0030]  1                             1       [???..???)-> BB14 (callf )                     i internal 
BB32 [0031]  0                             1       [???..???)-> BB18 (ALWAYS)                     i internal KEEP 
BB29 [0028]  1                             1       [???..???)-> BB14 (callf )                     i internal 
BB30 [0029]  0                             1       [???..???)-> BB17 (ALWAYS)                     i internal KEEP 
BB14 [0013]  1     1                       1       [126..129)-> BB16 ( cond )    H1   finally {   keep i bwd 
BB15 [0014]  1     1                       1       [129..12F)                    H1               i bwd 
BB16 [0015]  2     1                       1       [12F..130)        (finret)    H1   }           i bwd 
BB17 [0016]  1                             1       [130..139)-> BB10 (always)                     i bwd 
BB18 [0017]  1                             1       [139..17D)                                     i 
BB19 [0018]  5                             1       [17D..18F)-> BB21 ( cond )                     i bwd bwd-target 
BB20 [0019]  1                             1       [18F..19B)-> BB19 (always)                     i bwd 
BB21 [0020]  1                             1       [19B..1A6)-> BB23 ( cond )                     i bwd 
BB22 [0021]  1                             1       [1A6..1AD)-> BB19 (always)                     i bwd 
BB23 [0022]  1                             1       [1AD..1B8)-> BB25 ( cond )                     i bwd 
BB24 [0023]  1                             1       [1B8..1C1)-> BB19 (always)                     i bwd 
BB25 [0024]  1                             1       [1C1..1CC)-> BB19 ( cond )                     i bwd 
BB26 [0025]  1                             1       [1CC..1D4)        (return)                     i 
-----------------------------------------------------------------------------------------------------------------------------------------

***************  Exception Handling table
index  eTry, eHnd
  0  ::            - Try at BB03..BB03 [07B..0CA), Finally at BB04..BB06 [0CA..0D4)
  1  ::            - Try at BB11..BB13 [102..126), Finally at BB14..BB16 [126..130)

EH#0 first try block BB03 not empty; skipping.
EH#1 first try block BB11 not empty; skipping.

*************** Finishing PHASE Remove empty try [no changes]

*************** Starting PHASE Remove empty finally

*************** Before fgRemoveEmptyFinally()

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd                 weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..072)-> BB08 (always)                     i newobj 
BB02 [0001]  1                             1       [072..07B)                                     i bwd bwd-target 
BB03 [0002]  1  0                          1       [07B..0CA)-> BB27 (always) T0      try { }     keep i try newobj bwd 
BB27 [0026]  1                             1       [???..???)-> BB04 (callf )                     i internal 
BB28 [0027]  0                             1       [???..???)-> BB07 (ALWAYS)                     i internal KEEP 
BB04 [0003]  1     0                       1       [0CA..0CD)-> BB06 ( cond )    H0   finally {   keep i bwd 
BB05 [0004]  1     0                       1       [0CD..0D3)                    H0               i bwd 
BB06 [0005]  2     0                       1       [0D3..0D4)        (finret)    H0   }           i bwd 
BB07 [0006]  1                             1       [0D4..0D8)                                     i bwd 
BB08 [0007]  2                             1       [0D8..0DD)-> BB02 ( cond )                     i bwd 
BB09 [0008]  1                             1       [0DD..0F9)                                     i 
BB10 [0009]  2                             1       [0F9..102)                                     i bwd bwd-target 
BB11 [0010]  1  1                          1       [102..122)-> BB13 ( cond ) T1      try {       keep i try bwd 
BB12 [0011]  1  1                          1       [122..124)-> BB31 (always) T1                  i bwd 
BB13 [0012]  1  1                          1       [124..126)-> BB29 (always) T1      }           i bwd 
BB31 [0030]  1                             1       [???..???)-> BB14 (callf )                     i internal 
BB32 [0031]  0                             1       [???..???)-> BB18 (ALWAYS)                     i internal KEEP 
BB29 [0028]  1                             1       [???..???)-> BB14 (callf )                     i internal 
BB30 [0029]  0                             1       [???..???)-> BB17 (ALWAYS)                     i internal KEEP 
BB14 [0013]  1     1                       1       [126..129)-> BB16 ( cond )    H1   finally {   keep i bwd 
BB15 [0014]  1     1                       1       [129..12F)                    H1               i bwd 
BB16 [0015]  2     1                       1       [12F..130)        (finret)    H1   }           i bwd 
BB17 [0016]  1                             1       [130..139)-> BB10 (always)                     i bwd 
BB18 [0017]  1                             1       [139..17D)                                     i 
BB19 [0018]  5                             1       [17D..18F)-> BB21 ( cond )                     i bwd bwd-target 
BB20 [0019]  1                             1       [18F..19B)-> BB19 (always)                     i bwd 
BB21 [0020]  1                             1       [19B..1A6)-> BB23 ( cond )                     i bwd 
BB22 [0021]  1                             1       [1A6..1AD)-> BB19 (always)                     i bwd 
BB23 [0022]  1                             1       [1AD..1B8)-> BB25 ( cond )                     i bwd 
BB24 [0023]  1                             1       [1B8..1C1)-> BB19 (always)                     i bwd 
BB25 [0024]  1                             1       [1C1..1CC)-> BB19 ( cond )                     i bwd 
BB26 [0025]  1                             1       [1CC..1D4)        (return)                     i 
-----------------------------------------------------------------------------------------------------------------------------------------

***************  Exception Handling table
index  eTry, eHnd
  0  ::            - Try at BB03..BB03 [07B..0CA), Finally at BB04..BB06 [0CA..0D4)
  1  ::            - Try at BB11..BB13 [102..126), Finally at BB14..BB16 [126..130)

EH#0 finally has multiple basic blocks; skipping.
EH#1 finally has multiple basic blocks; skipping.

*************** Finishing PHASE Remove empty finally [no changes]

*************** Starting PHASE Merge callfinally chains

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd                 weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..072)-> BB08 (always)                     i newobj 
BB02 [0001]  1                             1       [072..07B)                                     i bwd bwd-target 
BB03 [0002]  1  0                          1       [07B..0CA)-> BB27 (always) T0      try { }     keep i try newobj bwd 
BB27 [0026]  1                             1       [???..???)-> BB04 (callf )                     i internal 
BB28 [0027]  0                             1       [???..???)-> BB07 (ALWAYS)                     i internal KEEP 
BB04 [0003]  1     0                       1       [0CA..0CD)-> BB06 ( cond )    H0   finally {   keep i bwd 
BB05 [0004]  1     0                       1       [0CD..0D3)                    H0               i bwd 
BB06 [0005]  2     0                       1       [0D3..0D4)        (finret)    H0   }           i bwd 
BB07 [0006]  1                             1       [0D4..0D8)                                     i bwd 
BB08 [0007]  2                             1       [0D8..0DD)-> BB02 ( cond )                     i bwd 
BB09 [0008]  1                             1       [0DD..0F9)                                     i 
BB10 [0009]  2                             1       [0F9..102)                                     i bwd bwd-target 
BB11 [0010]  1  1                          1       [102..122)-> BB13 ( cond ) T1      try {       keep i try bwd 
BB12 [0011]  1  1                          1       [122..124)-> BB31 (always) T1                  i bwd 
BB13 [0012]  1  1                          1       [124..126)-> BB29 (always) T1      }           i bwd 
BB31 [0030]  1                             1       [???..???)-> BB14 (callf )                     i internal 
BB32 [0031]  0                             1       [???..???)-> BB18 (ALWAYS)                     i internal KEEP 
BB29 [0028]  1                             1       [???..???)-> BB14 (callf )                     i internal 
BB30 [0029]  0                             1       [???..???)-> BB17 (ALWAYS)                     i internal KEEP 
BB14 [0013]  1     1                       1       [126..129)-> BB16 ( cond )    H1   finally {   keep i bwd 
BB15 [0014]  1     1                       1       [129..12F)                    H1               i bwd 
BB16 [0015]  2     1                       1       [12F..130)        (finret)    H1   }           i bwd 
BB17 [0016]  1                             1       [130..139)-> BB10 (always)                     i bwd 
BB18 [0017]  1                             1       [139..17D)                                     i 
BB19 [0018]  5                             1       [17D..18F)-> BB21 ( cond )                     i bwd bwd-target 
BB20 [0019]  1                             1       [18F..19B)-> BB19 (always)                     i bwd 
BB21 [0020]  1                             1       [19B..1A6)-> BB23 ( cond )                     i bwd 
BB22 [0021]  1                             1       [1A6..1AD)-> BB19 (always)                     i bwd 
BB23 [0022]  1                             1       [1AD..1B8)-> BB25 ( cond )                     i bwd 
BB24 [0023]  1                             1       [1B8..1C1)-> BB19 (always)                     i bwd 
BB25 [0024]  1                             1       [1C1..1CC)-> BB19 ( cond )                     i bwd 
BB26 [0025]  1                             1       [1CC..1D4)        (return)                     i 
-----------------------------------------------------------------------------------------------------------------------------------------

***************  Exception Handling table
index  eTry, eHnd
  0  ::            - Try at BB03..BB03 [07B..0CA), Finally at BB04..BB06 [0CA..0D4)
  1  ::            - Try at BB11..BB13 [102..126), Finally at BB14..BB16 [126..130)

Examining callfinallys for EH#1.
EH#1 has 2 callfinallys, 2 continuations
EH#1 does not have any mergeable callfinallys
Examining callfinallys for EH#0.
EH#0 has 1 callfinallys, 1 continuations
EH#0 does not have any mergeable callfinallys
Method had try-finallys, but did not have any mergeable finally chains.

*************** Finishing PHASE Merge callfinally chains [no changes]

*************** Starting PHASE Clone finally

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd                 weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..072)-> BB08 (always)                     i newobj 
BB02 [0001]  1                             1       [072..07B)                                     i bwd bwd-target 
BB03 [0002]  1  0                          1       [07B..0CA)-> BB27 (always) T0      try { }     keep i try newobj bwd 
BB27 [0026]  1                             1       [???..???)-> BB04 (callf )                     i internal 
BB28 [0027]  0                             1       [???..???)-> BB07 (ALWAYS)                     i internal KEEP 
BB04 [0003]  1     0                       1       [0CA..0CD)-> BB06 ( cond )    H0   finally {   keep i bwd 
BB05 [0004]  1     0                       1       [0CD..0D3)                    H0               i bwd 
BB06 [0005]  2     0                       1       [0D3..0D4)        (finret)    H0   }           i bwd 
BB07 [0006]  1                             1       [0D4..0D8)                                     i bwd 
BB08 [0007]  2                             1       [0D8..0DD)-> BB02 ( cond )                     i bwd 
BB09 [0008]  1                             1       [0DD..0F9)                                     i 
BB10 [0009]  2                             1       [0F9..102)                                     i bwd bwd-target 
BB11 [0010]  1  1                          1       [102..122)-> BB13 ( cond ) T1      try {       keep i try bwd 
BB12 [0011]  1  1                          1       [122..124)-> BB31 (always) T1                  i bwd 
BB13 [0012]  1  1                          1       [124..126)-> BB29 (always) T1      }           i bwd 
BB31 [0030]  1                             1       [???..???)-> BB14 (callf )                     i internal 
BB32 [0031]  0                             1       [???..???)-> BB18 (ALWAYS)                     i internal KEEP 
BB29 [0028]  1                             1       [???..???)-> BB14 (callf )                     i internal 
BB30 [0029]  0                             1       [???..???)-> BB17 (ALWAYS)                     i internal KEEP 
BB14 [0013]  1     1                       1       [126..129)-> BB16 ( cond )    H1   finally {   keep i bwd 
BB15 [0014]  1     1                       1       [129..12F)                    H1               i bwd 
BB16 [0015]  2     1                       1       [12F..130)        (finret)    H1   }           i bwd 
BB17 [0016]  1                             1       [130..139)-> BB10 (always)                     i bwd 
BB18 [0017]  1                             1       [139..17D)                                     i 
BB19 [0018]  5                             1       [17D..18F)-> BB21 ( cond )                     i bwd bwd-target 
BB20 [0019]  1                             1       [18F..19B)-> BB19 (always)                     i bwd 
BB21 [0020]  1                             1       [19B..1A6)-> BB23 ( cond )                     i bwd 
BB22 [0021]  1                             1       [1A6..1AD)-> BB19 (always)                     i bwd 
BB23 [0022]  1                             1       [1AD..1B8)-> BB25 ( cond )                     i bwd 
BB24 [0023]  1                             1       [1B8..1C1)-> BB19 (always)                     i bwd 
BB25 [0024]  1                             1       [1C1..1CC)-> BB19 ( cond )                     i bwd 
BB26 [0025]  1                             1       [1CC..1D4)        (return)                     i 
-----------------------------------------------------------------------------------------------------------------------------------------

***************  Exception Handling table
index  eTry, eHnd
  0  ::            - Try at BB03..BB03 [07B..0CA), Finally at BB04..BB06 [0CA..0D4)
  1  ::            - Try at BB11..BB13 [102..126), Finally at BB14..BB16 [126..130)

EH#0 is a candidate for finally cloning: 3 blocks, 3 statements
Choosing path to clone: try block BB03 jumps to callfinally at BB27; the call returns to BB28 which jumps to BB07
Will update callfinally block BB27 to jump to the clone; clone will jump to BB07
fgFindInsertPoint(regionIndex=0, putInTryRegion=true, startBlk=BB01, endBlk=BB00, nearBlk=BB28, jumpBlk=BB00, runRarely=false)
fgNewBBinRegion(jumpKind=9, tryIndex=0, hndIndex=0, putInFilter=false, runRarely=false, insertAtEnd=false): inserting after BB28
New Basic Block BB39 [0038] created.
New Basic Block BB40 [0039] created.
New Basic Block BB41 [0040] created.
Cloned finally blocks are: BB39 ... BB41

removing useless STMT00068 (IL   ???...  ???)
               [000260] ------------              *  RETFILT   void  
 from BB41

BB41 becomes empty
Retargeting callfinally BB27 to clone entry BB39
fgRemoveBlock BB28

Removing unreachable BB28
All callfinallys retargeted; changing finally to fault.

Done with EH#0

EH#1 is a candidate for finally cloning: 3 blocks, 3 statements
Choosing path to clone: try block BB13 jumps to callfinally at BB29; the call returns to BB30 which jumps to BB17
Will update callfinally block BB29 to jump to the clone; clone will jump to BB17
Moving callfinally BB29 to be first in line, before BB31
Relocated blocks [BB29..BB30] inserted after BB13
*************** In fgDebugCheckBBlist
fgFindInsertPoint(regionIndex=0, putInTryRegion=true, startBlk=BB01, endBlk=BB00, nearBlk=BB30, jumpBlk=BB00, runRarely=false)
fgNewBBinRegion(jumpKind=9, tryIndex=0, hndIndex=0, putInFilter=false, runRarely=false, insertAtEnd=false): inserting after BB30
New Basic Block BB42 [0041] created.
New Basic Block BB43 [0042] created.
New Basic Block BB44 [0043] created.
Cloned finally blocks are: BB42 ... BB44

removing useless STMT00071 (IL   ???...  ???)
               [000267] ------------              *  RETFILT   void  
 from BB44

BB44 becomes empty
Retargeting callfinally BB29 to clone entry BB42
fgRemoveBlock BB30

Removing unreachable BB30
Can't retarget callfinally in BB31 as it jumps to BB18, not BB17
Some callfinallys *not* retargeted, so region must remain as a finally.

Done with EH#1

fgCloneFinally() cloned 2 finally handlers

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd                 weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..072)-> BB08 (always)                     i newobj 
BB02 [0001]  1                             1       [072..07B)                                     i bwd bwd-target 
BB03 [0002]  1  0                          1       [07B..0CA)-> BB27 (always) T0      try { }     keep i try newobj bwd 
BB27 [0026]  1                             1       [???..???)                                     i internal 
BB39 [0038]  2                             1       [0CA..0CD)-> BB41 ( cond )                     keep i bwd cfb 
BB40 [0039]  1                             1       [0CD..0D3)                                     i bwd 
BB41 [0040]  2                             1       [0D3..0D4)-> BB07 (always)                     i bwd cfe 
BB04 [0003]  1     0                       1       [0CA..0CD)-> BB06 ( cond )    H0   fault {     keep i bwd 
BB05 [0004]  1     0                       1       [0CD..0D3)                    H0               i bwd 
BB06 [0005]  2     0                       1       [0D3..0D4)        (finret)    H0   }           i bwd 
BB07 [0006]  1                             1       [0D4..0D8)                                     i bwd 
BB08 [0007]  2                             1       [0D8..0DD)-> BB02 ( cond )                     i bwd 
BB09 [0008]  1                             1       [0DD..0F9)                                     i 
BB10 [0009]  2                             1       [0F9..102)                                     i bwd bwd-target 
BB11 [0010]  1  1                          1       [102..122)-> BB13 ( cond ) T1      try {       keep i try bwd 
BB12 [0011]  1  1                          1       [122..124)-> BB31 (always) T1                  i bwd 
BB13 [0012]  1  1                          1       [124..126)-> BB29 (always) T1      }           i bwd 
BB29 [0028]  1                             1       [???..???)                                     i internal 
BB42 [0041]  2                             1       [126..129)-> BB44 ( cond )                     keep i bwd cfb 
BB43 [0042]  1                             1       [129..12F)                                     i bwd 
BB44 [0043]  2                             1       [12F..130)-> BB17 (always)                     i bwd cfe 
BB31 [0030]  1                             1       [???..???)-> BB14 (callf )                     i internal 
BB32 [0031]  0                             1       [???..???)-> BB18 (ALWAYS)                     i internal KEEP 
BB14 [0013]  1     1                       1       [126..129)-> BB16 ( cond )    H1   finally {   keep i bwd 
BB15 [0014]  1     1                       1       [129..12F)                    H1               i bwd 
BB16 [0015]  2     1                       1       [12F..130)        (finret)    H1   }           i bwd 
BB17 [0016]  1                             1       [130..139)-> BB10 (always)                     i bwd 
BB18 [0017]  1                             1       [139..17D)                                     i 
BB19 [0018]  5                             1       [17D..18F)-> BB21 ( cond )                     i bwd bwd-target 
BB20 [0019]  1                             1       [18F..19B)-> BB19 (always)                     i bwd 
BB21 [0020]  1                             1       [19B..1A6)-> BB23 ( cond )                     i bwd 
BB22 [0021]  1                             1       [1A6..1AD)-> BB19 (always)                     i bwd 
BB23 [0022]  1                             1       [1AD..1B8)-> BB25 ( cond )                     i bwd 
BB24 [0023]  1                             1       [1B8..1C1)-> BB19 (always)                     i bwd 
BB25 [0024]  1                             1       [1C1..1CC)-> BB19 ( cond )                     i bwd 
BB26 [0025]  1                             1       [1CC..1D4)        (return)                     i 
-----------------------------------------------------------------------------------------------------------------------------------------

***************  Exception Handling table
index  eTry, eHnd
  0  ::            - Try at BB03..BB03 [07B..0CA), Fault   at BB04..BB06 [0CA..0D4)
  1  ::            - Try at BB11..BB13 [102..126), Finally at BB14..BB16 [126..130)


*************** Finishing PHASE Clone finally
Trees after Clone finally

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd                 weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..072)-> BB08 (always)                     i newobj 
BB02 [0001]  1                             1       [072..07B)                                     i bwd bwd-target 
BB03 [0002]  1  0                          1       [07B..0CA)-> BB27 (always) T0      try { }     keep i try newobj bwd 
BB27 [0026]  1                             1       [???..???)                                     i internal 
BB39 [0038]  2                             1       [0CA..0CD)-> BB41 ( cond )                     keep i bwd cfb 
BB40 [0039]  1                             1       [0CD..0D3)                                     i bwd 
BB41 [0040]  2                             1       [0D3..0D4)-> BB07 (always)                     i bwd cfe 
BB04 [0003]  1     0                       1       [0CA..0CD)-> BB06 ( cond )    H0   fault {     keep i bwd 
BB05 [0004]  1     0                       1       [0CD..0D3)                    H0               i bwd 
BB06 [0005]  2     0                       1       [0D3..0D4)        (finret)    H0   }           i bwd 
BB07 [0006]  1                             1       [0D4..0D8)                                     i bwd 
BB08 [0007]  2                             1       [0D8..0DD)-> BB02 ( cond )                     i bwd 
BB09 [0008]  1                             1       [0DD..0F9)                                     i 
BB10 [0009]  2                             1       [0F9..102)                                     i bwd bwd-target 
BB11 [0010]  1  1                          1       [102..122)-> BB13 ( cond ) T1      try {       keep i try bwd 
BB12 [0011]  1  1                          1       [122..124)-> BB31 (always) T1                  i bwd 
BB13 [0012]  1  1                          1       [124..126)-> BB29 (always) T1      }           i bwd 
BB29 [0028]  1                             1       [???..???)                                     i internal 
BB42 [0041]  2                             1       [126..129)-> BB44 ( cond )                     keep i bwd cfb 
BB43 [0042]  1                             1       [129..12F)                                     i bwd 
BB44 [0043]  2                             1       [12F..130)-> BB17 (always)                     i bwd cfe 
BB31 [0030]  1                             1       [???..???)-> BB14 (callf )                     i internal 
BB32 [0031]  0                             1       [???..???)-> BB18 (ALWAYS)                     i internal KEEP 
BB14 [0013]  1     1                       1       [126..129)-> BB16 ( cond )    H1   finally {   keep i bwd 
BB15 [0014]  1     1                       1       [129..12F)                    H1               i bwd 
BB16 [0015]  2     1                       1       [12F..130)        (finret)    H1   }           i bwd 
BB17 [0016]  1                             1       [130..139)-> BB10 (always)                     i bwd 
BB18 [0017]  1                             1       [139..17D)                                     i 
BB19 [0018]  5                             1       [17D..18F)-> BB21 ( cond )                     i bwd bwd-target 
BB20 [0019]  1                             1       [18F..19B)-> BB19 (always)                     i bwd 
BB21 [0020]  1                             1       [19B..1A6)-> BB23 ( cond )                     i bwd 
BB22 [0021]  1                             1       [1A6..1AD)-> BB19 (always)                     i bwd 
BB23 [0022]  1                             1       [1AD..1B8)-> BB25 ( cond )                     i bwd 
BB24 [0023]  1                             1       [1B8..1C1)-> BB19 (always)                     i bwd 
BB25 [0024]  1                             1       [1C1..1CC)-> BB19 ( cond )                     i bwd 
BB26 [0025]  1                             1       [1CC..1D4)        (return)                     i 
-----------------------------------------------------------------------------------------------------------------------------------------

------------ BB01 [000..072) -> BB08 (always), preds={} succs={BB08}

***** BB01
STMT00000 (IL 0x000...0x005)
               [000003] -AC-G-------              *  ASG       struct (copy)
               [000001] D------N----              +--*  LCL_VAR   struct<System.DateTime, 8> V02 loc0         
               [000000] --C-G-------              \--*  CALL      struct System.DateTime.get_Now

***** BB01
STMT00001 (IL 0x006...0x022)
               [000009] --C-G-------              *  CALL      void   System.Console.WriteLine
               [000008] --C-G------- arg0         \--*  CALL      ref    System.String.Concat
               [000006] --C-G------- arg0            +--*  CALL      ref    System.DateTime.ToString
               [000005] ------------ this in rcx     |  \--*  ADDR      byref 
               [000004] -------N----                 |     \--*  LCL_VAR   struct<System.DateTime, 8> V02 loc0         
               [000007] ------------ arg1            \--*  CNS_STR   ref   <string constant>

***** BB01
STMT00002 (IL 0x01C...  ???)
               [000014] -AC---------              *  ASG       ref   
               [000013] D------N----              +--*  LCL_VAR   ref    V08 tmp1         
               [000012] --C---------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
               [000011] H----------- arg0            \--*  CNS_INT(h) long   0x7ffdb3ee2350 method

***** BB01
STMT00003 (IL   ???...  ???)
               [000016] --C-G-------              *  CALL      void   FalseLeakRepro.List..ctor
               [000015] ------------ this in rcx  \--*  LCL_VAR   ref    V08 tmp1         

***** BB01
STMT00004 (IL 0x022...  ???)
               [000019] -A-XG-------              *  ASG       ref   
               [000018] ---XG--N----              +--*  FIELD     ref    _myList
               [000010] ------------              |  \--*  LCL_VAR   ref    V00 this         
               [000017] ------------              \--*  LCL_VAR   ref    V08 tmp1         

***** BB01
STMT00005 (IL 0x027...0x037)
               [000026] -AC---------              *  ASG       ref   
               [000025] D------N----              +--*  LCL_VAR   ref    V09 tmp2         
               [000024] --C---------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
               [000023] H----------- arg0            \--*  CNS_INT(h) long   0x7ffdb3b058b8 token

***** BB01
STMT00007 (IL   ???...  ???)
               [000030] -A-XG-------              *  ASG       ref   
               [000029] D------N----              +--*  LCL_VAR   ref    V10 tmp3         
               [000022] ---XG-------              \--*  FIELD     ref    Head
               [000021] ---XG-------                 \--*  FIELD     ref    _myList
               [000020] ------------                    \--*  LCL_VAR   ref    V00 this         

***** BB01
STMT00006 (IL   ???...  ???)
               [000028] --C-G-------              *  CALL      void   System.Object..ctor
               [000027] ------------ this in rcx  \--*  LCL_VAR   ref    V09 tmp2         

***** BB01
STMT00008 (IL 0x037...  ???)
               [000034] -A-XG-------              *  ASG       ref   
               [000033] ---XG--N----              +--*  FIELD     ref    Data
               [000031] ------------              |  \--*  LCL_VAR   ref    V10 tmp3         
               [000032] ------------              \--*  LCL_VAR   ref    V09 tmp2         

***** BB01
STMT00009 (IL 0x03C...0x057)
               [000040] -AC---------              *  ASG       ref   
               [000039] D------N----              +--*  LCL_VAR   ref    V11 tmp4         
               [000038] --C---------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
               [000037] H----------- arg0            \--*  CNS_INT(h) long   0x7ffdb3ee6200 token

***** BB01
STMT00010 (IL   ???...  ???)
               [000042] --C-G-------              *  CALL      void   System.MulticastDelegate.CtorClosed
               [000041] ------------ this in rcx  +--*  LCL_VAR   ref    V11 tmp4         
               [000035] ------------ arg1         +--*  LCL_VAR   ref    V00 this         
               [000036] ------------ arg2         \--*  FTN_ADDR  long   FalseLeakRepro.Program.<Run>b__3_0


***** BB01
STMT00011 (IL 0x048...  ???)
               [000047] -AC---------              *  ASG       ref   
               [000046] D------N----              +--*  LCL_VAR   ref    V12 tmp5         
               [000045] --C---------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWFAST
               [000044] H----------- arg0            \--*  CNS_INT(h) long   0x7ffdb3c84e80 token

***** BB01
STMT00012 (IL   ???...  ???)
               [000049] --C-G-------              *  CALL      void   System.Threading.Thread..ctor
               [000048] ------------ this in rcx  +--*  LCL_VAR   ref    V12 tmp5         
               [000043] ------------ arg1         \--*  LCL_VAR   ref    V11 tmp4         

***** BB01
STMT00013 (IL 0x04D...  ???)
               [000051] --C-G-------              *  CALL nullcheck void   System.Threading.Thread.Start
               [000050] ------------ this in rcx  \--*  LCL_VAR   ref    V12 tmp5         

***** BB01
STMT00014 (IL 0x052...  ???)
               [000055] -AC-G-------              *  ASG       struct (copy)
               [000053] D------N----              +--*  LCL_VAR   struct<System.DateTime, 8> V02 loc0         
               [000052] --C-G-------              \--*  CALL      struct System.DateTime.get_Now

***** BB01
STMT00015 (IL 0x058...0x06F)
               [000061] --C-G-------              *  CALL      void   System.Console.WriteLine
               [000060] --C-G------- arg0         \--*  CALL      ref    System.String.Concat
               [000058] --C-G------- arg0            +--*  CALL      ref    System.DateTime.ToString
               [000057] ------------ this in rcx     |  \--*  ADDR      byref 
               [000056] -------N----                 |     \--*  LCL_VAR   struct<System.DateTime, 8> V02 loc0         
               [000059] ------------ arg1            \--*  CNS_STR   ref   <string constant>

***** BB01
STMT00016 (IL 0x06E...  ???)
               [000064] -A----------              *  ASG       int   
               [000063] D------N----              +--*  LCL_VAR   int    V03 loc1         
               [000062] ------------              \--*  CNS_INT   int    0

------------ BB02 [072..07B), preds={} succs={BB03}

***** BB02
STMT00018 (IL 0x072...0x078)
               [000072] -A-XG-------              *  ASG       ref   
               [000071] D------N----              +--*  LCL_VAR   ref    V04 loc2         
               [000070] ---XG-------              \--*  FIELD     ref    _myList
               [000069] ------------                 \--*  LCL_VAR   ref    V00 this         

***** BB02
STMT00019 (IL 0x079...0x07A)
               [000075] -A----------              *  ASG       int   
               [000074] D------N----              +--*  LCL_VAR   int    V05 loc3         
               [000073] ------------              \--*  CNS_INT   int    0

------------ BB03 [07B..0CA) -> BB27 (always), preds={} succs={BB27}

***** BB03
STMT00020 (IL 0x07B...0x093)
               [000079] --C-G-------              *  CALL      void   System.Threading.Monitor.Enter
               [000076] ------------ arg0         +--*  LCL_VAR   ref    V04 loc2         
               [000078] ------------ arg1         \--*  ADDR      byref 
               [000077] -------N----                 \--*  LCL_VAR   int    V05 loc3         

***** BB03
STMT00021 (IL 0x083...  ???)
               [000086] -AC---------              *  ASG       ref   
               [000085] D------N----              +--*  LCL_VAR   ref    V13 tmp6         
               [000084] --C---------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
               [000083] H----------- arg0            \--*  CNS_INT(h) long   0x7ffdb3ee58a8 method

***** BB03
STMT00023 (IL   ???...  ???)
               [000090] -A-XG-------              *  ASG       ref   
               [000089] D------N----              +--*  LCL_VAR   ref    V14 tmp7         
               [000082] ---XG-------              \--*  FIELD     ref    Head
               [000081] ---XG-------                 \--*  FIELD     ref    _myList
               [000080] ------------                    \--*  LCL_VAR   ref    V00 this         

***** BB03
STMT00065 (IL   ???...  ???)
               [000230] --C-G-------              *  CALL      void   System.Object..ctor
               [000087] ------------ this in rcx  \--*  LCL_VAR   ref    V13 tmp6         

***** BB03
STMT00024 (IL 0x093...  ???)
               [000094] -A-XG-------              *  ASG       ref   
               [000093] ---XG--N----              +--*  FIELD     ref    Next
               [000091] ------------              |  \--*  LCL_VAR   ref    V14 tmp7         
               [000092] ------------              \--*  LCL_VAR   ref    V13 tmp6         

***** BB03
STMT00025 (IL 0x098...0x0AE)
               [000102] -A-XG-------              *  ASG       ref   
               [000101] ---XG--N----              +--*  FIELD     ref    Head
               [000096] ---XG-------              |  \--*  FIELD     ref    _myList
               [000095] ------------              |     \--*  LCL_VAR   ref    V00 this         
               [000100] ---XG-------              \--*  FIELD     ref    Next
               [000099] ---XG-------                 \--*  FIELD     ref    Head
               [000098] ---XG-------                    \--*  FIELD     ref    _myList
               [000097] ------------                       \--*  LCL_VAR   ref    V00 this         

***** BB03
STMT00026 (IL 0x0B3...0x0C3)
               [000109] -AC---------              *  ASG       ref   
               [000108] D------N----              +--*  LCL_VAR   ref    V15 tmp8         
               [000107] --C---------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
               [000106] H----------- arg0            \--*  CNS_INT(h) long   0x7ffdb3b058b8 token

***** BB03
STMT00028 (IL   ???...  ???)
               [000113] -A-XG-------              *  ASG       ref   
               [000112] D------N----              +--*  LCL_VAR   ref    V16 tmp9         
               [000105] ---XG-------              \--*  FIELD     ref    Head
               [000104] ---XG-------                 \--*  FIELD     ref    _myList
               [000103] ------------                    \--*  LCL_VAR   ref    V00 this         

***** BB03
STMT00027 (IL   ???...  ???)
               [000111] --C-G-------              *  CALL      void   System.Object..ctor
               [000110] ------------ this in rcx  \--*  LCL_VAR   ref    V15 tmp8         

***** BB03
STMT00029 (IL 0x0C3...  ???)
               [000117] -A-XG-------              *  ASG       ref   
               [000116] ---XG--N----              +--*  FIELD     ref    Data
               [000114] ------------              |  \--*  LCL_VAR   ref    V16 tmp9         
               [000115] ------------              \--*  LCL_VAR   ref    V15 tmp8         

------------ BB27 [???..???), preds={} succs={BB39}

------------ BB39 [0CA..0CD) -> BB41 (cond), preds={} succs={BB40,BB41}

***** BB39
STMT00066 (IL   ???...  ???)
               [000254] ------------              *  JTRUE     void  
               [000255] ------------              \--*  EQ        int   
               [000256] ------------                 +--*  LCL_VAR   int    V05 loc3         
               [000257] ------------                 \--*  CNS_INT   int    0

------------ BB40 [0CD..0D3), preds={} succs={BB41}

***** BB40
STMT00067 (IL   ???...  ???)
               [000258] --CXG-------              *  CALL      void   System.Threading.Monitor.Exit
               [000259] ------------ arg0         \--*  LCL_VAR   ref    V04 loc2         

------------ BB41 [0D3..0D4) -> BB07 (always), preds={} succs={BB07}

------------ BB04 [0CA..0CD) -> BB06 (cond), preds={} succs={BB05,BB06}

***** BB04
STMT00031 (IL 0x0CA...0x0CB)
               [000126] ------------              *  JTRUE     void  
               [000125] ------------              \--*  EQ        int   
               [000123] ------------                 +--*  LCL_VAR   int    V05 loc3         
               [000124] ------------                 \--*  CNS_INT   int    0

------------ BB05 [0CD..0D3), preds={} succs={BB06}

***** BB05
STMT00033 (IL 0x0CD...0x0CE)
               [000129] --C-G-------              *  CALL      void   System.Threading.Monitor.Exit
               [000128] ------------ arg0         \--*  LCL_VAR   ref    V04 loc2         

------------ BB06 [0D3..0D4) (finret), preds={} succs={}

***** BB06
STMT00032 (IL 0x0D3...0x0D3)
               [000127] ------------              *  RETFILT   void  

------------ BB07 [0D4..0D8), preds={} succs={BB08}

***** BB07
STMT00030 (IL 0x0D4...0x0D7)
               [000122] -A----------              *  ASG       int   
               [000121] D------N----              +--*  LCL_VAR   int    V03 loc1         
               [000120] ------------              \--*  ADD       int   
               [000118] ------------                 +--*  LCL_VAR   int    V03 loc1         
               [000119] ------------                 \--*  CNS_INT   int    1

------------ BB08 [0D8..0DD) -> BB02 (cond), preds={} succs={BB09,BB02}

***** BB08
STMT00017 (IL 0x0D8...0x0DB)
               [000068] ------------              *  JTRUE     void  
               [000067] ------------              \--*  LT        int   
               [000065] ------------                 +--*  LCL_VAR   int    V03 loc1         
               [000066] ------------                 \--*  CNS_INT   int    10

------------ BB09 [0DD..0F9), preds={} succs={BB10}

***** BB09
STMT00034 (IL 0x0DD...0x0E2)
               [000133] -AC-G-------              *  ASG       struct (copy)
               [000131] D------N----              +--*  LCL_VAR   struct<System.DateTime, 8> V02 loc0         
               [000130] --C-G-------              \--*  CALL      struct System.DateTime.get_Now

***** BB09
STMT00035 (IL 0x0E3...0x0F4)
               [000139] --C-G-------              *  CALL      void   System.Console.WriteLine
               [000138] --C-G------- arg0         \--*  CALL      ref    System.String.Concat
               [000136] --C-G------- arg0            +--*  CALL      ref    System.DateTime.ToString
               [000135] ------------ this in rcx     |  \--*  ADDR      byref 
               [000134] -------N----                 |     \--*  LCL_VAR   struct<System.DateTime, 8> V02 loc0         
               [000137] ------------ arg1            \--*  CNS_STR   ref   <string constant>

------------ BB10 [0F9..102), preds={} succs={BB11}

***** BB10
STMT00036 (IL 0x0F9...0x0FF)
               [000143] -A-XG-------              *  ASG       ref   
               [000142] D------N----              +--*  LCL_VAR   ref    V04 loc2         
               [000141] ---XG-------              \--*  FIELD     ref    _myList
               [000140] ------------                 \--*  LCL_VAR   ref    V00 this         

***** BB10
STMT00037 (IL 0x100...0x101)
               [000146] -A----------              *  ASG       int   
               [000145] D------N----              +--*  LCL_VAR   int    V05 loc3         
               [000144] ------------              \--*  CNS_INT   int    0

------------ BB11 [102..122) -> BB13 (cond), preds={} succs={BB12,BB13}

***** BB11
STMT00038 (IL 0x102...0x120)
               [000150] --C-G-------              *  CALL      void   System.Threading.Monitor.Enter
               [000147] ------------ arg0         +--*  LCL_VAR   ref    V04 loc2         
               [000149] ------------ arg1         \--*  ADDR      byref 
               [000148] -------N----                 \--*  LCL_VAR   int    V05 loc3         

***** BB11
STMT00039 (IL 0x10A...  ???)
               [000158] ---XG-------              *  JTRUE     void  
               [000157] N--XG----U--              \--*  NE        int   
               [000153] ---XG-------                 +--*  FIELD     ref    Head
               [000152] ---XG-------                 |  \--*  FIELD     ref    _myList
               [000151] ------------                 |     \--*  LCL_VAR   ref    V00 this         
               [000156] ---XG-------                 \--*  FIELD     ref    Tail
               [000155] ---XG-------                    \--*  FIELD     ref    _myList
               [000154] ------------                       \--*  LCL_VAR   ref    V00 this         

------------ BB12 [122..124) -> BB31 (always), preds={} succs={BB31}

------------ BB13 [124..126) -> BB29 (always), preds={} succs={BB29}

------------ BB29 [???..???), preds={} succs={BB42}

------------ BB42 [126..129) -> BB44 (cond), preds={} succs={BB43,BB44}

***** BB42
STMT00069 (IL   ???...  ???)
               [000261] ------------              *  JTRUE     void  
               [000262] ------------              \--*  EQ        int   
               [000263] ------------                 +--*  LCL_VAR   int    V05 loc3         
               [000264] ------------                 \--*  CNS_INT   int    0

------------ BB43 [129..12F), preds={} succs={BB44}

***** BB43
STMT00070 (IL   ???...  ???)
               [000265] --CXG-------              *  CALL      void   System.Threading.Monitor.Exit
               [000266] ------------ arg0         \--*  LCL_VAR   ref    V04 loc2         

------------ BB44 [12F..130) -> BB17 (always), preds={} succs={BB17}

------------ BB31 [???..???) -> BB14 (callf), preds={} succs={BB14}

------------ BB32 [???..???) -> BB18 (ALWAYS), preds={} succs={BB18}

------------ BB14 [126..129) -> BB16 (cond), preds={} succs={BB15,BB16}

***** BB14
STMT00062 (IL 0x126...0x127)
               [000226] ------------              *  JTRUE     void  
               [000225] ------------              \--*  EQ        int   
               [000223] ------------                 +--*  LCL_VAR   int    V05 loc3         
               [000224] ------------                 \--*  CNS_INT   int    0

------------ BB15 [129..12F), preds={} succs={BB16}

***** BB15
STMT00064 (IL 0x129...0x12A)
               [000229] --C-G-------              *  CALL      void   System.Threading.Monitor.Exit
               [000228] ------------ arg0         \--*  LCL_VAR   ref    V04 loc2         

------------ BB16 [12F..130) (finret), preds={} succs={BB32}

***** BB16
STMT00063 (IL 0x12F...0x12F)
               [000227] ------------              *  RETFILT   void  

------------ BB17 [130..139) -> BB10 (always), preds={} succs={BB10}

***** BB17
STMT00040 (IL 0x130...0x137)
               [000160] --C-G-------              *  CALL      void   System.Threading.Thread.Sleep
               [000159] ------------ arg0         \--*  CNS_INT   int    100

------------ BB18 [139..17D), preds={} succs={BB19}

***** BB18
STMT00041 (IL 0x139...0x13E)
               [000164] -AC-G-------              *  ASG       struct (copy)
               [000162] D------N----              +--*  LCL_VAR   struct<System.DateTime, 8> V02 loc0         
               [000161] --C-G-------              \--*  CALL      struct System.DateTime.get_Now

***** BB18
STMT00042 (IL 0x13F...0x178)
               [000170] --C-G-------              *  CALL      void   System.Console.WriteLine
               [000169] --C-G------- arg0         \--*  CALL      ref    System.String.Concat
               [000167] --C-G------- arg0            +--*  CALL      ref    System.DateTime.ToString
               [000166] ------------ this in rcx     |  \--*  ADDR      byref 
               [000165] -------N----                 |     \--*  LCL_VAR   struct<System.DateTime, 8> V02 loc0         
               [000168] ------------ arg1            \--*  CNS_STR   ref   <string constant>

***** BB18
STMT00043 (IL 0x155...  ???)
               [000172] --C-G-------              *  CALL      void   System.Console.WriteLine
               [000171] ------------ arg0         \--*  CNS_STR   ref   <string constant>

***** BB18
STMT00044 (IL 0x15F...  ???)
               [000174] --C-G-------              *  CALL      void   System.Console.WriteLine
               [000173] ------------ arg0         \--*  CNS_STR   ref   <string constant>

***** BB18
STMT00045 (IL 0x169...  ???)
               [000176] --C-G-------              *  CALL      void   System.Console.WriteLine
               [000175] ------------ arg0         \--*  CNS_STR   ref   <string constant>

***** BB18
STMT00046 (IL 0x173...  ???)
               [000178] --C-G-------              *  CALL      void   System.Console.WriteLine
               [000177] ------------ arg0         \--*  CNS_STR   ref   <string constant>

------------ BB19 [17D..18F) -> BB21 (cond), preds={} succs={BB20,BB21}

***** BB19
STMT00048 (IL   ???...  ???)
               [000233] S-C-G-------              *  CALL      void   System.ConsolePal.ReadKey
               [000235] ------------ arg0         +--*  ADDR      byref 
               [000236] -------N----              |  \--*  LCL_VAR   struct<System.ConsoleKeyInfo, 12> V06 loc4         
               [000234] ------------ arg1         \--*  PUTARG_TYPE bool  
               [000232] ------------                 \--*  CNS_INT   int    0

***** BB19
STMT00050 (IL   ???...  ???)
               [000189] --C---------              *  JTRUE     void  
               [000188] N-C------U--              \--*  NE        int   
               [000240] ------------                 +--*  FIELD     int    _key
               [000238] ------------                 |  \--*  ADDR      byref 
               [000239] -------N----                 |     \--*  LCL_VAR   struct<System.ConsoleKeyInfo, 12> V06 loc4         
               [000187] ------------                 \--*  CNS_INT   int    71

------------ BB20 [18F..19B) -> BB19 (always), preds={} succs={BB19}

***** BB20
STMT00061 (IL 0x18F...0x199)
               [000222] --C-G-------              *  CALL      void   System.GC.Collect
               [000221] --C-G------- arg0         \--*  CALL      int    System.GC.get_MaxGeneration

------------ BB21 [19B..1A6) -> BB23 (cond), preds={} succs={BB22,BB23}

***** BB21
STMT00052 (IL   ???...  ???)
               [000196] --C---------              *  JTRUE     void  
               [000195] N-C------U--              \--*  NE        int   
               [000244] ------------                 +--*  FIELD     int    _key
               [000242] ------------                 |  \--*  ADDR      byref 
               [000243] -------N----                 |     \--*  LCL_VAR   struct<System.ConsoleKeyInfo, 12> V06 loc4         
               [000194] ------------                 \--*  CNS_INT   int    72

------------ BB22 [1A6..1AD) -> BB19 (always), preds={} succs={BB19}

***** BB22
STMT00060 (IL 0x1A6...0x1AB)
               [000220] --C-G-------              *  CALL      void   System.Diagnostics.Debugger.Break

------------ BB23 [1AD..1B8) -> BB25 (cond), preds={} succs={BB24,BB25}

***** BB23
STMT00054 (IL   ???...  ???)
               [000203] --C---------              *  JTRUE     void  
               [000202] N-C------U--              \--*  NE        int   
               [000248] ------------                 +--*  FIELD     int    _key
               [000246] ------------                 |  \--*  ADDR      byref 
               [000247] -------N----                 |     \--*  LCL_VAR   struct<System.ConsoleKeyInfo, 12> V06 loc4         
               [000201] ------------                 \--*  CNS_INT   int    82

------------ BB24 [1B8..1C1) -> BB19 (always), preds={} succs={BB19}

***** BB24
STMT00059 (IL 0x1B8...0x1BA)
               [000219] -A-XG-------              *  ASG       bool  
               [000218] ---XG--N----              +--*  FIELD     bool   _running
               [000216] ------------              |  \--*  LCL_VAR   ref    V00 this         
               [000217] ------------              \--*  CNS_INT   int    0

------------ BB25 [1C1..1CC) -> BB19 (cond), preds={} succs={BB26,BB19}

***** BB25
STMT00056 (IL   ???...  ???)
               [000210] --C---------              *  JTRUE     void  
               [000209] N-C------U--              \--*  NE        int   
               [000252] ------------                 +--*  FIELD     int    _key
               [000250] ------------                 |  \--*  ADDR      byref 
               [000251] -------N----                 |     \--*  LCL_VAR   struct<System.ConsoleKeyInfo, 12> V06 loc4         
               [000208] ------------                 \--*  CNS_INT   int    81

------------ BB26 [1CC..1D4) (return), preds={} succs={}

***** BB26
STMT00057 (IL 0x1CC...0x1CE)
               [000214] -A-XG-------              *  ASG       bool  
               [000213] ---XG--N----              +--*  FIELD     bool   _running
               [000211] ------------              |  \--*  LCL_VAR   ref    V00 this         
               [000212] ------------              \--*  CNS_INT   int    0

***** BB26
STMT00058 (IL 0x1D3...0x1D3)
               [000215] ------------              *  RETURN    void  

-------------------------------------------------------------------------------------------------------------------

*************** Starting PHASE Compute preds

Renumbering the basic blocks for fgComputePred

*************** Before renumbering the basic blocks

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd                 weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..072)-> BB08 (always)                     i newobj 
BB02 [0001]  1                             1       [072..07B)                                     i bwd bwd-target 
BB03 [0002]  1  0                          1       [07B..0CA)-> BB27 (always) T0      try { }     keep i try newobj bwd 
BB27 [0026]  1                             1       [???..???)                                     i internal 
BB39 [0038]  2                             1       [0CA..0CD)-> BB41 ( cond )                     keep i bwd cfb 
BB40 [0039]  1                             1       [0CD..0D3)                                     i bwd 
BB41 [0040]  2                             1       [0D3..0D4)-> BB07 (always)                     i bwd cfe 
BB04 [0003]  1     0                       1       [0CA..0CD)-> BB06 ( cond )    H0   fault {     keep i bwd 
BB05 [0004]  1     0                       1       [0CD..0D3)                    H0               i bwd 
BB06 [0005]  2     0                       1       [0D3..0D4)        (finret)    H0   }           i bwd 
BB07 [0006]  1                             1       [0D4..0D8)                                     i bwd 
BB08 [0007]  2                             1       [0D8..0DD)-> BB02 ( cond )                     i bwd 
BB09 [0008]  1                             1       [0DD..0F9)                                     i 
BB10 [0009]  2                             1       [0F9..102)                                     i bwd bwd-target 
BB11 [0010]  1  1                          1       [102..122)-> BB13 ( cond ) T1      try {       keep i try bwd 
BB12 [0011]  1  1                          1       [122..124)-> BB31 (always) T1                  i bwd 
BB13 [0012]  1  1                          1       [124..126)-> BB29 (always) T1      }           i bwd 
BB29 [0028]  1                             1       [???..???)                                     i internal 
BB42 [0041]  2                             1       [126..129)-> BB44 ( cond )                     keep i bwd cfb 
BB43 [0042]  1                             1       [129..12F)                                     i bwd 
BB44 [0043]  2                             1       [12F..130)-> BB17 (always)                     i bwd cfe 
BB31 [0030]  1                             1       [???..???)-> BB14 (callf )                     i internal 
BB32 [0031]  0                             1       [???..???)-> BB18 (ALWAYS)                     i internal KEEP 
BB14 [0013]  1     1                       1       [126..129)-> BB16 ( cond )    H1   finally {   keep i bwd 
BB15 [0014]  1     1                       1       [129..12F)                    H1               i bwd 
BB16 [0015]  2     1                       1       [12F..130)        (finret)    H1   }           i bwd 
BB17 [0016]  1                             1       [130..139)-> BB10 (always)                     i bwd 
BB18 [0017]  1                             1       [139..17D)                                     i 
BB19 [0018]  5                             1       [17D..18F)-> BB21 ( cond )                     i bwd bwd-target 
BB20 [0019]  1                             1       [18F..19B)-> BB19 (always)                     i bwd 
BB21 [0020]  1                             1       [19B..1A6)-> BB23 ( cond )                     i bwd 
BB22 [0021]  1                             1       [1A6..1AD)-> BB19 (always)                     i bwd 
BB23 [0022]  1                             1       [1AD..1B8)-> BB25 ( cond )                     i bwd 
BB24 [0023]  1                             1       [1B8..1C1)-> BB19 (always)                     i bwd 
BB25 [0024]  1                             1       [1C1..1CC)-> BB19 ( cond )                     i bwd 
BB26 [0025]  1                             1       [1CC..1D4)        (return)                     i 
-----------------------------------------------------------------------------------------------------------------------------------------

***************  Exception Handling table
index  eTry, eHnd
  0  ::            - Try at BB03..BB03 [07B..0CA), Fault   at BB04..BB06 [0CA..0D4)
  1  ::            - Try at BB11..BB13 [102..126), Finally at BB14..BB16 [126..130)
Renumber BB27 to BB04
Renumber BB39 to BB05
Renumber BB40 to BB06
Renumber BB41 to BB07
Renumber BB04 to BB08
Renumber BB05 to BB09
Renumber BB06 to BB10
Renumber BB07 to BB11
Renumber BB08 to BB12
Renumber BB09 to BB13
Renumber BB10 to BB14
Renumber BB11 to BB15
Renumber BB12 to BB16
Renumber BB13 to BB17
Renumber BB29 to BB18
Renumber BB42 to BB19
Renumber BB43 to BB20
Renumber BB44 to BB21
Renumber BB31 to BB22
Renumber BB32 to BB23
Renumber BB14 to BB24
Renumber BB15 to BB25
Renumber BB16 to BB26
Renumber BB17 to BB27
Renumber BB18 to BB28
Renumber BB19 to BB29
Renumber BB20 to BB30
Renumber BB21 to BB31
Renumber BB22 to BB32
Renumber BB23 to BB33
Renumber BB24 to BB34
Renumber BB25 to BB35
Renumber BB26 to BB36

*************** After renumbering the basic blocks

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd                 weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..072)-> BB12 (always)                     i newobj 
BB02 [0001]  1                             1       [072..07B)                                     i bwd bwd-target 
BB03 [0002]  1  0                          1       [07B..0CA)-> BB04 (always) T0      try { }     keep i try newobj bwd 
BB04 [0026]  1                             1       [???..???)                                     i internal 
BB05 [0038]  2                             1       [0CA..0CD)-> BB07 ( cond )                     keep i bwd cfb 
BB06 [0039]  1                             1       [0CD..0D3)                                     i bwd 
BB07 [0040]  2                             1       [0D3..0D4)-> BB11 (always)                     i bwd cfe 
BB08 [0003]  1     0                       1       [0CA..0CD)-> BB10 ( cond )    H0   fault {     keep i bwd 
BB09 [0004]  1     0                       1       [0CD..0D3)                    H0               i bwd 
BB10 [0005]  2     0                       1       [0D3..0D4)        (finret)    H0   }           i bwd 
BB11 [0006]  1                             1       [0D4..0D8)                                     i bwd 
BB12 [0007]  2                             1       [0D8..0DD)-> BB02 ( cond )                     i bwd 
BB13 [0008]  1                             1       [0DD..0F9)                                     i 
BB14 [0009]  2                             1       [0F9..102)                                     i bwd bwd-target 
BB15 [0010]  1  1                          1       [102..122)-> BB17 ( cond ) T1      try {       keep i try bwd 
BB16 [0011]  1  1                          1       [122..124)-> BB22 (always) T1                  i bwd 
BB17 [0012]  1  1                          1       [124..126)-> BB18 (always) T1      }           i bwd 
BB18 [0028]  1                             1       [???..???)                                     i internal 
BB19 [0041]  2                             1       [126..129)-> BB21 ( cond )                     keep i bwd cfb 
BB20 [0042]  1                             1       [129..12F)                                     i bwd 
BB21 [0043]  2                             1       [12F..130)-> BB27 (always)                     i bwd cfe 
BB22 [0030]  1                             1       [???..???)-> BB24 (callf )                     i internal 
BB23 [0031]  0                             1       [???..???)-> BB28 (ALWAYS)                     i internal KEEP 
BB24 [0013]  1     1                       1       [126..129)-> BB26 ( cond )    H1   finally {   keep i bwd 
BB25 [0014]  1     1                       1       [129..12F)                    H1               i bwd 
BB26 [0015]  2     1                       1       [12F..130)        (finret)    H1   }           i bwd 
BB27 [0016]  1                             1       [130..139)-> BB14 (always)                     i bwd 
BB28 [0017]  1                             1       [139..17D)                                     i 
BB29 [0018]  5                             1       [17D..18F)-> BB31 ( cond )                     i bwd bwd-target 
BB30 [0019]  1                             1       [18F..19B)-> BB29 (always)                     i bwd 
BB31 [0020]  1                             1       [19B..1A6)-> BB33 ( cond )                     i bwd 
BB32 [0021]  1                             1       [1A6..1AD)-> BB29 (always)                     i bwd 
BB33 [0022]  1                             1       [1AD..1B8)-> BB35 ( cond )                     i bwd 
BB34 [0023]  1                             1       [1B8..1C1)-> BB29 (always)                     i bwd 
BB35 [0024]  1                             1       [1C1..1CC)-> BB29 ( cond )                     i bwd 
BB36 [0025]  1                             1       [1CC..1D4)        (return)                     i 
-----------------------------------------------------------------------------------------------------------------------------------------

***************  Exception Handling table
index  eTry, eHnd
  0  ::            - Try at BB03..BB03 [07B..0CA), Fault   at BB08..BB10 [0CA..0D4)
  1  ::            - Try at BB15..BB17 [102..126), Finally at BB24..BB26 [126..130)

New BlockSet epoch 2, # of blocks (including unused BB00): 37, bitset array size: 1 (short)

*************** In fgComputePreds()

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd                 weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..072)-> BB12 (always)                     i newobj 
BB02 [0001]  1                             1       [072..07B)                                     i bwd bwd-target 
BB03 [0002]  1  0                          1       [07B..0CA)-> BB04 (always) T0      try { }     keep i try newobj bwd 
BB04 [0026]  1                             1       [???..???)                                     i internal 
BB05 [0038]  2                             1       [0CA..0CD)-> BB07 ( cond )                     keep i bwd cfb 
BB06 [0039]  1                             1       [0CD..0D3)                                     i bwd 
BB07 [0040]  2                             1       [0D3..0D4)-> BB11 (always)                     i bwd cfe 
BB08 [0003]  1     0                       1       [0CA..0CD)-> BB10 ( cond )    H0   fault {     keep i bwd 
BB09 [0004]  1     0                       1       [0CD..0D3)                    H0               i bwd 
BB10 [0005]  2     0                       1       [0D3..0D4)        (finret)    H0   }           i bwd 
BB11 [0006]  1                             1       [0D4..0D8)                                     i bwd 
BB12 [0007]  2                             1       [0D8..0DD)-> BB02 ( cond )                     i bwd 
BB13 [0008]  1                             1       [0DD..0F9)                                     i 
BB14 [0009]  2                             1       [0F9..102)                                     i bwd bwd-target 
BB15 [0010]  1  1                          1       [102..122)-> BB17 ( cond ) T1      try {       keep i try bwd 
BB16 [0011]  1  1                          1       [122..124)-> BB22 (always) T1                  i bwd 
BB17 [0012]  1  1                          1       [124..126)-> BB18 (always) T1      }           i bwd 
BB18 [0028]  1                             1       [???..???)                                     i internal 
BB19 [0041]  2                             1       [126..129)-> BB21 ( cond )                     keep i bwd cfb 
BB20 [0042]  1                             1       [129..12F)                                     i bwd 
BB21 [0043]  2                             1       [12F..130)-> BB27 (always)                     i bwd cfe 
BB22 [0030]  1                             1       [???..???)-> BB24 (callf )                     i internal 
BB23 [0031]  0                             1       [???..???)-> BB28 (ALWAYS)                     i internal KEEP 
BB24 [0013]  1     1                       1       [126..129)-> BB26 ( cond )    H1   finally {   keep i bwd 
BB25 [0014]  1     1                       1       [129..12F)                    H1               i bwd 
BB26 [0015]  2     1                       1       [12F..130)        (finret)    H1   }           i bwd 
BB27 [0016]  1                             1       [130..139)-> BB14 (always)                     i bwd 
BB28 [0017]  1                             1       [139..17D)                                     i 
BB29 [0018]  5                             1       [17D..18F)-> BB31 ( cond )                     i bwd bwd-target 
BB30 [0019]  1                             1       [18F..19B)-> BB29 (always)                     i bwd 
BB31 [0020]  1                             1       [19B..1A6)-> BB33 ( cond )                     i bwd 
BB32 [0021]  1                             1       [1A6..1AD)-> BB29 (always)                     i bwd 
BB33 [0022]  1                             1       [1AD..1B8)-> BB35 ( cond )                     i bwd 
BB34 [0023]  1                             1       [1B8..1C1)-> BB29 (always)                     i bwd 
BB35 [0024]  1                             1       [1C1..1CC)-> BB29 ( cond )                     i bwd 
BB36 [0025]  1                             1       [1CC..1D4)        (return)                     i 
-----------------------------------------------------------------------------------------------------------------------------------------

Setting edge weights for BB01 -> BB12 to [0 .. 3.402823e+38]
Setting edge weights for BB02 -> BB03 to [0 .. 3.402823e+38]
Setting edge weights for BB03 -> BB04 to [0 .. 3.402823e+38]
Setting edge weights for BB04 -> BB05 to [0 .. 3.402823e+38]
Setting edge weights for BB05 -> BB07 to [0 .. 3.402823e+38]
Setting edge weights for BB05 -> BB06 to [0 .. 3.402823e+38]
Setting edge weights for BB06 -> BB07 to [0 .. 3.402823e+38]
Setting edge weights for BB07 -> BB11 to [0 .. 3.402823e+38]
Setting edge weights for BB08 -> BB10 to [0 .. 3.402823e+38]
Setting edge weights for BB08 -> BB09 to [0 .. 3.402823e+38]
Setting edge weights for BB09 -> BB10 to [0 .. 3.402823e+38]
Setting edge weights for BB11 -> BB12 to [0 .. 3.402823e+38]
Setting edge weights for BB12 -> BB02 to [0 .. 3.402823e+38]
Setting edge weights for BB12 -> BB13 to [0 .. 3.402823e+38]
Setting edge weights for BB13 -> BB14 to [0 .. 3.402823e+38]
Setting edge weights for BB14 -> BB15 to [0 .. 3.402823e+38]
Setting edge weights for BB15 -> BB17 to [0 .. 3.402823e+38]
Setting edge weights for BB15 -> BB16 to [0 .. 3.402823e+38]
Setting edge weights for BB16 -> BB22 to [0 .. 3.402823e+38]
Setting edge weights for BB17 -> BB18 to [0 .. 3.402823e+38]
Setting edge weights for BB18 -> BB19 to [0 .. 3.402823e+38]
Setting edge weights for BB19 -> BB21 to [0 .. 3.402823e+38]
Setting edge weights for BB19 -> BB20 to [0 .. 3.402823e+38]
Setting edge weights for BB20 -> BB21 to [0 .. 3.402823e+38]
Setting edge weights for BB21 -> BB27 to [0 .. 3.402823e+38]
Setting edge weights for BB22 -> BB24 to [0 .. 3.402823e+38]
Setting edge weights for BB23 -> BB28 to [0 .. 3.402823e+38]
Setting edge weights for BB24 -> BB26 to [0 .. 3.402823e+38]
Setting edge weights for BB24 -> BB25 to [0 .. 3.402823e+38]
Setting edge weights for BB25 -> BB26 to [0 .. 3.402823e+38]
Setting edge weights for BB26 -> BB23 to [0 .. 3.402823e+38]
Setting edge weights for BB27 -> BB14 to [0 .. 3.402823e+38]
Setting edge weights for BB28 -> BB29 to [0 .. 3.402823e+38]
Setting edge weights for BB29 -> BB31 to [0 .. 3.402823e+38]
Setting edge weights for BB29 -> BB30 to [0 .. 3.402823e+38]
Setting edge weights for BB30 -> BB29 to [0 .. 3.402823e+38]
Setting edge weights for BB31 -> BB33 to [0 .. 3.402823e+38]
Setting edge weights for BB31 -> BB32 to [0 .. 3.402823e+38]
Setting edge weights for BB32 -> BB29 to [0 .. 3.402823e+38]
Setting edge weights for BB33 -> BB35 to [0 .. 3.402823e+38]
Setting edge weights for BB33 -> BB34 to [0 .. 3.402823e+38]
Setting edge weights for BB34 -> BB29 to [0 .. 3.402823e+38]
Setting edge weights for BB35 -> BB29 to [0 .. 3.402823e+38]
Setting edge weights for BB35 -> BB36 to [0 .. 3.402823e+38]

*************** After fgComputePreds()

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..072)-> BB12 (always)                     i newobj 
BB02 [0001]  1       BB12                  1       [072..07B)                                     i bwd bwd-target 
BB03 [0002]  1  0    BB02                  1       [07B..0CA)-> BB04 (always) T0      try { }     keep i try newobj bwd 
BB04 [0026]  1       BB03                  1       [???..???)                                     i internal 
BB05 [0038]  1       BB04                  1       [0CA..0CD)-> BB07 ( cond )                     keep i bwd cfb 
BB06 [0039]  1       BB05                  1       [0CD..0D3)                                     i bwd 
BB07 [0040]  2       BB05,BB06             1       [0D3..0D4)-> BB11 (always)                     i bwd cfe 
BB08 [0003]  1     0                       1       [0CA..0CD)-> BB10 ( cond )    H0   fault {     keep i bwd 
BB09 [0004]  1     0 BB08                  1       [0CD..0D3)                    H0               i bwd 
BB10 [0005]  2     0 BB08,BB09             1       [0D3..0D4)        (finret)    H0   }           i bwd 
BB11 [0006]  1       BB07                  1       [0D4..0D8)                                     i bwd 
BB12 [0007]  2       BB01,BB11             1       [0D8..0DD)-> BB02 ( cond )                     i bwd 
BB13 [0008]  1       BB12                  1       [0DD..0F9)                                     i 
BB14 [0009]  2       BB13,BB27             1       [0F9..102)                                     i bwd bwd-target 
BB15 [0010]  1  1    BB14                  1       [102..122)-> BB17 ( cond ) T1      try {       keep i try bwd 
BB16 [0011]  1  1    BB15                  1       [122..124)-> BB22 (always) T1                  i bwd 
BB17 [0012]  1  1    BB15                  1       [124..126)-> BB18 (always) T1      }           i bwd 
BB18 [0028]  1       BB17                  1       [???..???)                                     i internal 
BB19 [0041]  1       BB18                  1       [126..129)-> BB21 ( cond )                     keep i bwd cfb 
BB20 [0042]  1       BB19                  1       [129..12F)                                     i bwd 
BB21 [0043]  2       BB19,BB20             1       [12F..130)-> BB27 (always)                     i bwd cfe 
BB22 [0030]  1       BB16                  1       [???..???)-> BB24 (callf )                     i internal 
BB23 [0031]  1       BB26                  1       [???..???)-> BB28 (ALWAYS)                     i internal KEEP 
BB24 [0013]  2     1 BB22                  1       [126..129)-> BB26 ( cond )    H1   finally {   keep i bwd 
BB25 [0014]  1     1 BB24                  1       [129..12F)                    H1               i bwd 
BB26 [0015]  2     1 BB24,BB25             1       [12F..130)        (finret)    H1   }           i bwd 
BB27 [0016]  1       BB21                  1       [130..139)-> BB14 (always)                     i bwd 
BB28 [0017]  1       BB23                  1       [139..17D)                                     i 
BB29 [0018]  5       BB28,BB30,BB32,BB34,BB35   1       [17D..18F)-> BB31 ( cond )                     i bwd bwd-target 
BB30 [0019]  1       BB29                  1       [18F..19B)-> BB29 (always)                     i bwd 
BB31 [0020]  1       BB29                  1       [19B..1A6)-> BB33 ( cond )                     i bwd 
BB32 [0021]  1       BB31                  1       [1A6..1AD)-> BB29 (always)                     i bwd 
BB33 [0022]  1       BB31                  1       [1AD..1B8)-> BB35 ( cond )                     i bwd 
BB34 [0023]  1       BB33                  1       [1B8..1C1)-> BB29 (always)                     i bwd 
BB35 [0024]  1       BB33                  1       [1C1..1CC)-> BB29 ( cond )                     i bwd 
BB36 [0025]  1       BB35                  1       [1CC..1D4)        (return)                     i 
-----------------------------------------------------------------------------------------------------------------------------------------


*************** Finishing PHASE Compute preds

*************** Starting PHASE Merge throw blocks

*************** In fgTailMergeThrows
Method does not have multiple noreturn calls.

*************** Finishing PHASE Merge throw blocks [no changes]

*************** Starting PHASE Update flow graph early pass

*************** In fgUpdateFlowGraph()
Before updating the flow graph:

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..072)-> BB12 (always)                     i newobj 
BB02 [0001]  1       BB12                  1       [072..07B)                                     i bwd bwd-target 
BB03 [0002]  1  0    BB02                  1       [07B..0CA)-> BB04 (always) T0      try { }     keep i try newobj bwd 
BB04 [0026]  1       BB03                  1       [???..???)                                     i internal 
BB05 [0038]  1       BB04                  1       [0CA..0CD)-> BB07 ( cond )                     keep i bwd cfb 
BB06 [0039]  1       BB05                  1       [0CD..0D3)                                     i bwd 
BB07 [0040]  2       BB05,BB06             1       [0D3..0D4)-> BB11 (always)                     i bwd cfe 
BB08 [0003]  1     0                       1       [0CA..0CD)-> BB10 ( cond )    H0   fault {     keep i bwd 
BB09 [0004]  1     0 BB08                  1       [0CD..0D3)                    H0               i bwd 
BB10 [0005]  2     0 BB08,BB09             1       [0D3..0D4)        (finret)    H0   }           i bwd 
BB11 [0006]  1       BB07                  1       [0D4..0D8)                                     i bwd 
BB12 [0007]  2       BB01,BB11             1       [0D8..0DD)-> BB02 ( cond )                     i bwd 
BB13 [0008]  1       BB12                  1       [0DD..0F9)                                     i 
BB14 [0009]  2       BB13,BB27             1       [0F9..102)                                     i bwd bwd-target 
BB15 [0010]  1  1    BB14                  1       [102..122)-> BB17 ( cond ) T1      try {       keep i try bwd 
BB16 [0011]  1  1    BB15                  1       [122..124)-> BB22 (always) T1                  i bwd 
BB17 [0012]  1  1    BB15                  1       [124..126)-> BB18 (always) T1      }           i bwd 
BB18 [0028]  1       BB17                  1       [???..???)                                     i internal 
BB19 [0041]  1       BB18                  1       [126..129)-> BB21 ( cond )                     keep i bwd cfb 
BB20 [0042]  1       BB19                  1       [129..12F)                                     i bwd 
BB21 [0043]  2       BB19,BB20             1       [12F..130)-> BB27 (always)                     i bwd cfe 
BB22 [0030]  1       BB16                  1       [???..???)-> BB24 (callf )                     i internal 
BB23 [0031]  1       BB26                  1       [???..???)-> BB28 (ALWAYS)                     i internal KEEP 
BB24 [0013]  2     1 BB22                  1       [126..129)-> BB26 ( cond )    H1   finally {   keep i bwd 
BB25 [0014]  1     1 BB24                  1       [129..12F)                    H1               i bwd 
BB26 [0015]  2     1 BB24,BB25             1       [12F..130)        (finret)    H1   }           i bwd 
BB27 [0016]  1       BB21                  1       [130..139)-> BB14 (always)                     i bwd 
BB28 [0017]  1       BB23                  1       [139..17D)                                     i 
BB29 [0018]  5       BB28,BB30,BB32,BB34,BB35   1       [17D..18F)-> BB31 ( cond )                     i bwd bwd-target 
BB30 [0019]  1       BB29                  1       [18F..19B)-> BB29 (always)                     i bwd 
BB31 [0020]  1       BB29                  1       [19B..1A6)-> BB33 ( cond )                     i bwd 
BB32 [0021]  1       BB31                  1       [1A6..1AD)-> BB29 (always)                     i bwd 
BB33 [0022]  1       BB31                  1       [1AD..1B8)-> BB35 ( cond )                     i bwd 
BB34 [0023]  1       BB33                  1       [1B8..1C1)-> BB29 (always)                     i bwd 
BB35 [0024]  1       BB33                  1       [1C1..1CC)-> BB29 ( cond )                     i bwd 
BB36 [0025]  1       BB35                  1       [1CC..1D4)        (return)                     i 
-----------------------------------------------------------------------------------------------------------------------------------------


Removing unconditional jump to next block (BB03 -> BB04) (converted BB03 to fall-through)
fgRemoveBlock BB04
Removing empty BB04
Setting edge weights for BB03 -> BB05 to [0 .. 3.402823e+38]

Optimizing a jump to an unconditional jump (BB05 -> BB07 -> BB11)
Setting edge weights for BB05 -> BB11 to [0 .. 3.402823e+38]

Compacting blocks BB06 and BB07:
*************** In fgDebugCheckBBlist

Optimizing a jump to an unconditional jump (BB15 -> BB17 -> BB18)
Setting edge weights for BB15 -> BB18 to [0 .. 3.402823e+38]

Removing unconditional jump to next block (BB17 -> BB18) (converted BB17 to fall-through)
fgRemoveBlock BB17

Removing unreachable BB17
EH#1: New last block of try: BB16
fgRemoveBlock BB18
Removing empty BB18
Setting edge weights for BB15 -> BB19 to [0 .. 3.402823e+38]

Optimizing a jump to an unconditional jump (BB19 -> BB21 -> BB27)
Setting edge weights for BB19 -> BB27 to [0 .. 3.402823e+38]

Compacting blocks BB20 and BB21:
*************** In fgDebugCheckBBlist

Reversing a conditional jump around an unconditional jump (BB15 -> BB19, BB16 -> BB22)
Setting edge weights for BB15 -> BB22 to [0 .. 3.402823e+38]
EH#1: New last block of try: BB15

After reversing the jump:

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..072)-> BB12 (always)                     i newobj 
BB02 [0001]  1       BB12                  1       [072..07B)                                     i bwd bwd-target 
BB03 [0002]  1  0    BB02                  1       [07B..0CA)                 T0      try { }     keep i try newobj bwd 
BB05 [0038]  1       BB03                  1       [0CA..0CD)-> BB11 ( cond )                     keep i bwd cfb 
BB06 [0039]  1       BB05                  1       [0CD..0D4)-> BB11 (always)                     i bwd 
BB08 [0003]  1     0                       1       [0CA..0CD)-> BB10 ( cond )    H0   fault {     keep i bwd 
BB09 [0004]  1     0 BB08                  1       [0CD..0D3)                    H0               i bwd 
BB10 [0005]  2     0 BB08,BB09             1       [0D3..0D4)        (finret)    H0   }           i bwd 
BB11 [0006]  2       BB05,BB06             1       [0D4..0D8)                                     i bwd 
BB12 [0007]  2       BB01,BB11             1       [0D8..0DD)-> BB02 ( cond )                     i bwd 
BB13 [0008]  1       BB12                  1       [0DD..0F9)                                     i 
BB14 [0009]  2       BB13,BB27             1       [0F9..102)                                     i bwd bwd-target 
BB15 [0010]  1  1    BB14                  1       [102..122)-> BB22 ( cond ) T1      try { }     keep i try bwd 
BB19 [0041]  1       BB15                  1       [126..129)-> BB27 ( cond )                     keep i bwd cfb 
BB20 [0042]  1       BB19                  1       [129..130)-> BB27 (always)                     i bwd 
BB22 [0030]  1       BB15                  1       [???..???)-> BB24 (callf )                     i internal 
BB23 [0031]  1       BB26                  1       [???..???)-> BB28 (ALWAYS)                     i internal KEEP 
BB24 [0013]  2     1 BB22                  1       [126..129)-> BB26 ( cond )    H1   finally {   keep i bwd 
BB25 [0014]  1     1 BB24                  1       [129..12F)                    H1               i bwd 
BB26 [0015]  2     1 BB24,BB25             1       [12F..130)        (finret)    H1   }           i bwd 
BB27 [0016]  2       BB19,BB20             1       [130..139)-> BB14 (always)                     i bwd 
BB28 [0017]  1       BB23                  1       [139..17D)                                     i 
BB29 [0018]  5       BB28,BB30,BB32,BB34,BB35   1       [17D..18F)-> BB31 ( cond )                     i bwd bwd-target 
BB30 [0019]  1       BB29                  1       [18F..19B)-> BB29 (always)                     i bwd 
BB31 [0020]  1       BB29                  1       [19B..1A6)-> BB33 ( cond )                     i bwd 
BB32 [0021]  1       BB31                  1       [1A6..1AD)-> BB29 (always)                     i bwd 
BB33 [0022]  1       BB31                  1       [1AD..1B8)-> BB35 ( cond )                     i bwd 
BB34 [0023]  1       BB33                  1       [1B8..1C1)-> BB29 (always)                     i bwd 
BB35 [0024]  1       BB33                  1       [1C1..1CC)-> BB29 ( cond )                     i bwd 
BB36 [0025]  1       BB35                  1       [1CC..1D4)        (return)                     i 
-----------------------------------------------------------------------------------------------------------------------------------------

After updating the flow graph:

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..072)-> BB12 (always)                     i newobj 
BB02 [0001]  1       BB12                  1       [072..07B)                                     i bwd bwd-target 
BB03 [0002]  1  0    BB02                  1       [07B..0CA)                 T0      try { }     keep i try newobj bwd 
BB05 [0038]  1       BB03                  1       [0CA..0CD)-> BB11 ( cond )                     keep i bwd cfb 
BB06 [0039]  1       BB05                  1       [0CD..0D4)-> BB11 (always)                     i bwd 
BB08 [0003]  1     0                       1       [0CA..0CD)-> BB10 ( cond )    H0   fault {     keep i bwd 
BB09 [0004]  1     0 BB08                  1       [0CD..0D3)                    H0               i bwd 
BB10 [0005]  2     0 BB08,BB09             1       [0D3..0D4)        (finret)    H0   }           i bwd 
BB11 [0006]  2       BB05,BB06             1       [0D4..0D8)                                     i bwd 
BB12 [0007]  2       BB01,BB11             1       [0D8..0DD)-> BB02 ( cond )                     i bwd 
BB13 [0008]  1       BB12                  1       [0DD..0F9)                                     i 
BB14 [0009]  2       BB13,BB27             1       [0F9..102)                                     i bwd bwd-target 
BB15 [0010]  1  1    BB14                  1       [102..122)-> BB22 ( cond ) T1      try { }     keep i try bwd 
BB19 [0041]  1       BB15                  1       [126..129)-> BB27 ( cond )                     keep i bwd cfb 
BB20 [0042]  1       BB19                  1       [129..130)-> BB27 (always)                     i bwd 
BB22 [0030]  1       BB15                  1       [???..???)-> BB24 (callf )                     i internal 
BB23 [0031]  1       BB26                  1       [???..???)-> BB28 (ALWAYS)                     i internal KEEP 
BB24 [0013]  2     1 BB22                  1       [126..129)-> BB26 ( cond )    H1   finally {   keep i bwd 
BB25 [0014]  1     1 BB24                  1       [129..12F)                    H1               i bwd 
BB26 [0015]  2     1 BB24,BB25             1       [12F..130)        (finret)    H1   }           i bwd 
BB27 [0016]  2       BB19,BB20             1       [130..139)-> BB14 (always)                     i bwd 
BB28 [0017]  1       BB23                  1       [139..17D)                                     i 
BB29 [0018]  5       BB28,BB30,BB32,BB34,BB35   1       [17D..18F)-> BB31 ( cond )                     i bwd bwd-target 
BB30 [0019]  1       BB29                  1       [18F..19B)-> BB29 (always)                     i bwd 
BB31 [0020]  1       BB29                  1       [19B..1A6)-> BB33 ( cond )                     i bwd 
BB32 [0021]  1       BB31                  1       [1A6..1AD)-> BB29 (always)                     i bwd 
BB33 [0022]  1       BB31                  1       [1AD..1B8)-> BB35 ( cond )                     i bwd 
BB34 [0023]  1       BB33                  1       [1B8..1C1)-> BB29 (always)                     i bwd 
BB35 [0024]  1       BB33                  1       [1C1..1CC)-> BB29 ( cond )                     i bwd 
BB36 [0025]  1       BB35                  1       [1CC..1D4)        (return)                     i 
-----------------------------------------------------------------------------------------------------------------------------------------

***************  Exception Handling table
index  eTry, eHnd
  0  ::            - Try at BB03..BB03 [07B..0CA), Fault   at BB08..BB10 [0CA..0D4)
  1  ::            - Try at BB15..BB15 [102..126), Finally at BB24..BB26 [126..130)
*************** In fgDebugCheckBBlist

*************** Finishing PHASE Update flow graph early pass

*************** Starting PHASE Morph - Promote Structs

*************** In fgResetImplicitByRefRefCount()
*************** In fgPromoteStructs()

lvaTable before fgPromoteStructs
; Initial local variable assignments
;
;  V00 this              ref  this class-hnd
;  V01 arg1              ref  class-hnd
;  V02 loc0           struct <System.DateTime, 8> ld-addr-op
;  V03 loc1              int 
;  V04 loc2              ref  class-hnd
;  V05 loc3             bool  ld-addr-op
;  V06 loc4           struct <System.ConsoleKeyInfo, 12> ld-addr-op
;  V07 OutArgs        lclBlk <na>  "OutgoingArgSpace"
;  V08 tmp1              ref  class-hnd exact "NewObj constructor temp"
;  V09 tmp2              ref  class-hnd exact "NewObj constructor temp"
;  V10 tmp3              ref  class-hnd "impAppendStmt"
;  V11 tmp4              ref  class-hnd exact "NewObj constructor temp"
;  V12 tmp5              ref  class-hnd exact "NewObj constructor temp"
;  V13 tmp6              ref  class-hnd exact "NewObj constructor temp"
;  V14 tmp7              ref  class-hnd "impAppendStmt"
;  V15 tmp8              ref  class-hnd exact "NewObj constructor temp"
;  V16 tmp9              ref  class-hnd "impAppendStmt"

Promoting struct local V02 (System.DateTime):
lvaGrabTemp returning 17 (V17 tmp10) (a long lifetime temp) called for field V02._dateData (fldOffset=0x0).

Promoting struct local V06 (System.ConsoleKeyInfo):
lvaGrabTemp returning 18 (V18 tmp11) (a long lifetime temp) called for field V06._keyChar (fldOffset=0x0).

lvaGrabTemp returning 19 (V19 tmp12) (a long lifetime temp) called for field V06._key (fldOffset=0x4).

lvaGrabTemp returning 20 (V20 tmp13) (a long lifetime temp) called for field V06._mods (fldOffset=0x8).

lvaTable after fgPromoteStructs
; Initial local variable assignments
;
;  V00 this              ref  this class-hnd
;  V01 arg1              ref  class-hnd
;  V02 loc0           struct <System.DateTime, 8> ld-addr-op
;  V03 loc1              int 
;  V04 loc2              ref  class-hnd
;  V05 loc3             bool  ld-addr-op
;  V06 loc4           struct <System.ConsoleKeyInfo, 12> ld-addr-op
;  V07 OutArgs        lclBlk <na>  "OutgoingArgSpace"
;  V08 tmp1              ref  class-hnd exact "NewObj constructor temp"
;  V09 tmp2              ref  class-hnd exact "NewObj constructor temp"
;  V10 tmp3              ref  class-hnd "impAppendStmt"
;  V11 tmp4              ref  class-hnd exact "NewObj constructor temp"
;  V12 tmp5              ref  class-hnd exact "NewObj constructor temp"
;  V13 tmp6              ref  class-hnd exact "NewObj constructor temp"
;  V14 tmp7              ref  class-hnd "impAppendStmt"
;  V15 tmp8              ref  class-hnd exact "NewObj constructor temp"
;  V16 tmp9              ref  class-hnd "impAppendStmt"
;  V17 tmp10            long  V02._dateData(offs=0x00) P-INDEP "field V02._dateData (fldOffset=0x0)"
;  V18 tmp11          ushort  V06._keyChar(offs=0x00) P-INDEP "field V06._keyChar (fldOffset=0x0)"
;  V19 tmp12             int  V06._key(offs=0x04) P-INDEP "field V06._key (fldOffset=0x4)"
;  V20 tmp13             int  V06._mods(offs=0x08) P-INDEP "field V06._mods (fldOffset=0x8)"

*************** Finishing PHASE Morph - Promote Structs

*************** Starting PHASE Morph - Structs/AddrExp

*************** In fgMarkAddressExposedLocals()
LocalAddressVisitor visiting statement:
STMT00000 (IL 0x000...0x005)
               [000003] -AC-G-------              *  ASG       struct (copy)
               [000001] D------N----              +--*  LCL_VAR   struct<System.DateTime, 8>(P) V02 loc0         
                                                  +--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
               [000000] --C-G-------              \--*  CALL      struct System.DateTime.get_Now

LocalAddressVisitor visiting statement:
STMT00001 (IL 0x006...0x022)
               [000009] --C-G-------              *  CALL      void   System.Console.WriteLine
               [000008] --C-G------- arg0         \--*  CALL      ref    System.String.Concat
               [000006] --C-G------- arg0            +--*  CALL      ref    System.DateTime.ToString
               [000005] ------------ this in rcx     |  \--*  ADDR      byref 
               [000004] -------N----                 |     \--*  LCL_VAR   struct<System.DateTime, 8>(P) V02 loc0         
                                                     |     \--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
               [000007] ------------ arg1            \--*  CNS_STR   ref   <string constant>

Local V17 should not be enregistered because: it is address exposed

Local V02 should not be enregistered because: it is address exposed

LocalAddressVisitor visiting statement:
STMT00002 (IL 0x01C...  ???)
               [000014] -AC---------              *  ASG       ref   
               [000013] D------N----              +--*  LCL_VAR   ref    V08 tmp1         
               [000012] --C---------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
               [000011] H----------- arg0            \--*  CNS_INT(h) long   0x7ffdb3ee2350 method

LocalAddressVisitor visiting statement:
STMT00003 (IL   ???...  ???)
               [000016] --C-G-------              *  CALL      void   FalseLeakRepro.List..ctor
               [000015] ------------ this in rcx  \--*  LCL_VAR   ref    V08 tmp1         

LocalAddressVisitor visiting statement:
STMT00004 (IL 0x022...  ???)
               [000019] -A-XG-------              *  ASG       ref   
               [000018] ---XG--N----              +--*  FIELD     ref    _myList
               [000010] ------------              |  \--*  LCL_VAR   ref    V00 this         
               [000017] ------------              \--*  LCL_VAR   ref    V08 tmp1         

LocalAddressVisitor visiting statement:
STMT00005 (IL 0x027...0x037)
               [000026] -AC---------              *  ASG       ref   
               [000025] D------N----              +--*  LCL_VAR   ref    V09 tmp2         
               [000024] --C---------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
               [000023] H----------- arg0            \--*  CNS_INT(h) long   0x7ffdb3b058b8 token

LocalAddressVisitor visiting statement:
STMT00007 (IL   ???...  ???)
               [000030] -A-XG-------              *  ASG       ref   
               [000029] D------N----              +--*  LCL_VAR   ref    V10 tmp3         
               [000022] ---XG-------              \--*  FIELD     ref    Head
               [000021] ---XG-------                 \--*  FIELD     ref    _myList
               [000020] ------------                    \--*  LCL_VAR   ref    V00 this         

LocalAddressVisitor visiting statement:
STMT00006 (IL   ???...  ???)
               [000028] --C-G-------              *  CALL      void   System.Object..ctor
               [000027] ------------ this in rcx  \--*  LCL_VAR   ref    V09 tmp2         

LocalAddressVisitor visiting statement:
STMT00008 (IL 0x037...  ???)
               [000034] -A-XG-------              *  ASG       ref   
               [000033] ---XG--N----              +--*  FIELD     ref    Data
               [000031] ------------              |  \--*  LCL_VAR   ref    V10 tmp3         
               [000032] ------------              \--*  LCL_VAR   ref    V09 tmp2         

LocalAddressVisitor visiting statement:
STMT00009 (IL 0x03C...0x057)
               [000040] -AC---------              *  ASG       ref   
               [000039] D------N----              +--*  LCL_VAR   ref    V11 tmp4         
               [000038] --C---------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
               [000037] H----------- arg0            \--*  CNS_INT(h) long   0x7ffdb3ee6200 token

LocalAddressVisitor visiting statement:
STMT00010 (IL   ???...  ???)
               [000042] --C-G-------              *  CALL      void   System.MulticastDelegate.CtorClosed
               [000041] ------------ this in rcx  +--*  LCL_VAR   ref    V11 tmp4         
               [000035] ------------ arg1         +--*  LCL_VAR   ref    V00 this         
               [000036] ------------ arg2         \--*  FTN_ADDR  long   FalseLeakRepro.Program.<Run>b__3_0


LocalAddressVisitor visiting statement:
STMT00011 (IL 0x048...  ???)
               [000047] -AC---------              *  ASG       ref   
               [000046] D------N----              +--*  LCL_VAR   ref    V12 tmp5         
               [000045] --C---------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWFAST
               [000044] H----------- arg0            \--*  CNS_INT(h) long   0x7ffdb3c84e80 token

LocalAddressVisitor visiting statement:
STMT00012 (IL   ???...  ???)
               [000049] --C-G-------              *  CALL      void   System.Threading.Thread..ctor
               [000048] ------------ this in rcx  +--*  LCL_VAR   ref    V12 tmp5         
               [000043] ------------ arg1         \--*  LCL_VAR   ref    V11 tmp4         

LocalAddressVisitor visiting statement:
STMT00013 (IL 0x04D...  ???)
               [000051] --C-G-------              *  CALL nullcheck void   System.Threading.Thread.Start
               [000050] ------------ this in rcx  \--*  LCL_VAR   ref    V12 tmp5         

LocalAddressVisitor visiting statement:
STMT00014 (IL 0x052...  ???)
               [000055] -AC-G-------              *  ASG       struct (copy)
               [000053] D------N----              +--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  +--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
               [000052] --C-G-------              \--*  CALL      struct System.DateTime.get_Now

LocalAddressVisitor visiting statement:
STMT00015 (IL 0x058...0x06F)
               [000061] --C-G-------              *  CALL      void   System.Console.WriteLine
               [000060] --C-G------- arg0         \--*  CALL      ref    System.String.Concat
               [000058] --C-G------- arg0            +--*  CALL      ref    System.DateTime.ToString
               [000057] ------------ this in rcx     |  \--*  ADDR      byref 
               [000056] -------N----                 |     \--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                     |     \--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
               [000059] ------------ arg1            \--*  CNS_STR   ref   <string constant>

Local V17 should not be enregistered because: it is address exposed

Local V02 should not be enregistered because: it is address exposed

LocalAddressVisitor visiting statement:
STMT00016 (IL 0x06E...  ???)
               [000064] -A----------              *  ASG       int   
               [000063] D------N----              +--*  LCL_VAR   int    V03 loc1         
               [000062] ------------              \--*  CNS_INT   int    0

LocalAddressVisitor visiting statement:
STMT00018 (IL 0x072...0x078)
               [000072] -A-XG-------              *  ASG       ref   
               [000071] D------N----              +--*  LCL_VAR   ref    V04 loc2         
               [000070] ---XG-------              \--*  FIELD     ref    _myList
               [000069] ------------                 \--*  LCL_VAR   ref    V00 this         

LocalAddressVisitor visiting statement:
STMT00019 (IL 0x079...0x07A)
               [000075] -A----------              *  ASG       int   
               [000074] D------N----              +--*  LCL_VAR   int    V05 loc3         
               [000073] ------------              \--*  CNS_INT   int    0

LocalAddressVisitor visiting statement:
STMT00020 (IL 0x07B...0x093)
               [000079] --C-G-------              *  CALL      void   System.Threading.Monitor.Enter
               [000076] ------------ arg0         +--*  LCL_VAR   ref    V04 loc2         
               [000078] ------------ arg1         \--*  ADDR      byref 
               [000077] -------N----                 \--*  LCL_VAR   int    V05 loc3         

Local V05 should not be enregistered because: it is address exposed
Adding a quirk for the storage size of V05 of type bool
LocalAddressVisitor modified statement:
STMT00020 (IL 0x07B...0x093)
               [000079] --C-G-------              *  CALL      void   System.Threading.Monitor.Enter
               [000076] ------------ arg0         +--*  LCL_VAR   ref    V04 loc2         
               [000078] ------------ arg1         \--*  LCL_VAR_ADDR byref  V05 loc3         

LocalAddressVisitor visiting statement:
STMT00021 (IL 0x083...  ???)
               [000086] -AC---------              *  ASG       ref   
               [000085] D------N----              +--*  LCL_VAR   ref    V13 tmp6         
               [000084] --C---------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
               [000083] H----------- arg0            \--*  CNS_INT(h) long   0x7ffdb3ee58a8 method

LocalAddressVisitor visiting statement:
STMT00023 (IL   ???...  ???)
               [000090] -A-XG-------              *  ASG       ref   
               [000089] D------N----              +--*  LCL_VAR   ref    V14 tmp7         
               [000082] ---XG-------              \--*  FIELD     ref    Head
               [000081] ---XG-------                 \--*  FIELD     ref    _myList
               [000080] ------------                    \--*  LCL_VAR   ref    V00 this         

LocalAddressVisitor visiting statement:
STMT00065 (IL   ???...  ???)
               [000230] --C-G-------              *  CALL      void   System.Object..ctor
               [000087] ------------ this in rcx  \--*  LCL_VAR   ref    V13 tmp6         

LocalAddressVisitor visiting statement:
STMT00024 (IL 0x093...  ???)
               [000094] -A-XG-------              *  ASG       ref   
               [000093] ---XG--N----              +--*  FIELD     ref    Next
               [000091] ------------              |  \--*  LCL_VAR   ref    V14 tmp7         
               [000092] ------------              \--*  LCL_VAR   ref    V13 tmp6         

LocalAddressVisitor visiting statement:
STMT00025 (IL 0x098...0x0AE)
               [000102] -A-XG-------              *  ASG       ref   
               [000101] ---XG--N----              +--*  FIELD     ref    Head
               [000096] ---XG-------              |  \--*  FIELD     ref    _myList
               [000095] ------------              |     \--*  LCL_VAR   ref    V00 this         
               [000100] ---XG-------              \--*  FIELD     ref    Next
               [000099] ---XG-------                 \--*  FIELD     ref    Head
               [000098] ---XG-------                    \--*  FIELD     ref    _myList
               [000097] ------------                       \--*  LCL_VAR   ref    V00 this         

LocalAddressVisitor visiting statement:
STMT00026 (IL 0x0B3...0x0C3)
               [000109] -AC---------              *  ASG       ref   
               [000108] D------N----              +--*  LCL_VAR   ref    V15 tmp8         
               [000107] --C---------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
               [000106] H----------- arg0            \--*  CNS_INT(h) long   0x7ffdb3b058b8 token

LocalAddressVisitor visiting statement:
STMT00028 (IL   ???...  ???)
               [000113] -A-XG-------              *  ASG       ref   
               [000112] D------N----              +--*  LCL_VAR   ref    V16 tmp9         
               [000105] ---XG-------              \--*  FIELD     ref    Head
               [000104] ---XG-------                 \--*  FIELD     ref    _myList
               [000103] ------------                    \--*  LCL_VAR   ref    V00 this         

LocalAddressVisitor visiting statement:
STMT00027 (IL   ???...  ???)
               [000111] --C-G-------              *  CALL      void   System.Object..ctor
               [000110] ------------ this in rcx  \--*  LCL_VAR   ref    V15 tmp8         

LocalAddressVisitor visiting statement:
STMT00029 (IL 0x0C3...  ???)
               [000117] -A-XG-------              *  ASG       ref   
               [000116] ---XG--N----              +--*  FIELD     ref    Data
               [000114] ------------              |  \--*  LCL_VAR   ref    V16 tmp9         
               [000115] ------------              \--*  LCL_VAR   ref    V15 tmp8         

LocalAddressVisitor visiting statement:
STMT00066 (IL   ???...  ???)
               [000254] ------------              *  JTRUE     void  
               [000255] ------------              \--*  EQ        int   
               [000256] ------------                 +--*  LCL_VAR   int   (AX) V05 loc3         
               [000257] ------------                 \--*  CNS_INT   int    0

LocalAddressVisitor visiting statement:
STMT00067 (IL   ???...  ???)
               [000258] --CXG-------              *  CALL      void   System.Threading.Monitor.Exit
               [000259] ------------ arg0         \--*  LCL_VAR   ref    V04 loc2         

LocalAddressVisitor visiting statement:
STMT00031 (IL 0x0CA...0x0CB)
               [000126] ------------              *  JTRUE     void  
               [000125] ------------              \--*  EQ        int   
               [000123] ------------                 +--*  LCL_VAR   int   (AX) V05 loc3         
               [000124] ------------                 \--*  CNS_INT   int    0

LocalAddressVisitor visiting statement:
STMT00033 (IL 0x0CD...0x0CE)
               [000129] --C-G-------              *  CALL      void   System.Threading.Monitor.Exit
               [000128] ------------ arg0         \--*  LCL_VAR   ref    V04 loc2         

LocalAddressVisitor visiting statement:
STMT00032 (IL 0x0D3...0x0D3)
               [000127] ------------              *  RETFILT   void  

LocalAddressVisitor visiting statement:
STMT00030 (IL 0x0D4...0x0D7)
               [000122] -A----------              *  ASG       int   
               [000121] D------N----              +--*  LCL_VAR   int    V03 loc1         
               [000120] ------------              \--*  ADD       int   
               [000118] ------------                 +--*  LCL_VAR   int    V03 loc1         
               [000119] ------------                 \--*  CNS_INT   int    1

LocalAddressVisitor visiting statement:
STMT00017 (IL 0x0D8...0x0DB)
               [000068] ------------              *  JTRUE     void  
               [000067] ------------              \--*  LT        int   
               [000065] ------------                 +--*  LCL_VAR   int    V03 loc1         
               [000066] ------------                 \--*  CNS_INT   int    10

LocalAddressVisitor visiting statement:
STMT00034 (IL 0x0DD...0x0E2)
               [000133] -AC-G-------              *  ASG       struct (copy)
               [000131] D------N----              +--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  +--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
               [000130] --C-G-------              \--*  CALL      struct System.DateTime.get_Now

LocalAddressVisitor visiting statement:
STMT00035 (IL 0x0E3...0x0F4)
               [000139] --C-G-------              *  CALL      void   System.Console.WriteLine
               [000138] --C-G------- arg0         \--*  CALL      ref    System.String.Concat
               [000136] --C-G------- arg0            +--*  CALL      ref    System.DateTime.ToString
               [000135] ------------ this in rcx     |  \--*  ADDR      byref 
               [000134] -------N----                 |     \--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                     |     \--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
               [000137] ------------ arg1            \--*  CNS_STR   ref   <string constant>

Local V17 should not be enregistered because: it is address exposed

Local V02 should not be enregistered because: it is address exposed

LocalAddressVisitor visiting statement:
STMT00036 (IL 0x0F9...0x0FF)
               [000143] -A-XG-------              *  ASG       ref   
               [000142] D------N----              +--*  LCL_VAR   ref    V04 loc2         
               [000141] ---XG-------              \--*  FIELD     ref    _myList
               [000140] ------------                 \--*  LCL_VAR   ref    V00 this         

LocalAddressVisitor visiting statement:
STMT00037 (IL 0x100...0x101)
               [000146] -A----------              *  ASG       int   
               [000145] D------N----              +--*  LCL_VAR   int   (AX) V05 loc3         
               [000144] ------------              \--*  CNS_INT   int    0

LocalAddressVisitor visiting statement:
STMT00038 (IL 0x102...0x120)
               [000150] --C-G-------              *  CALL      void   System.Threading.Monitor.Enter
               [000147] ------------ arg0         +--*  LCL_VAR   ref    V04 loc2         
               [000149] ------------ arg1         \--*  ADDR      byref 
               [000148] -------N----                 \--*  LCL_VAR   int   (AX) V05 loc3         

Local V05 should not be enregistered because: it is address exposed
Adding a quirk for the storage size of V05 of type bool
LocalAddressVisitor modified statement:
STMT00038 (IL 0x102...0x120)
               [000150] --C-G-------              *  CALL      void   System.Threading.Monitor.Enter
               [000147] ------------ arg0         +--*  LCL_VAR   ref    V04 loc2         
               [000149] ------------ arg1         \--*  LCL_VAR_ADDR byref  V05 loc3         

LocalAddressVisitor visiting statement:
STMT00039 (IL 0x10A...  ???)
               [000158] ---XG-------              *  JTRUE     void  
               [000157] N--XG----U--              \--*  EQ        int   
               [000153] ---XG-------                 +--*  FIELD     ref    Head
               [000152] ---XG-------                 |  \--*  FIELD     ref    _myList
               [000151] ------------                 |     \--*  LCL_VAR   ref    V00 this         
               [000156] ---XG-------                 \--*  FIELD     ref    Tail
               [000155] ---XG-------                    \--*  FIELD     ref    _myList
               [000154] ------------                       \--*  LCL_VAR   ref    V00 this         

LocalAddressVisitor visiting statement:
STMT00069 (IL   ???...  ???)
               [000261] ------------              *  JTRUE     void  
               [000262] ------------              \--*  EQ        int   
               [000263] ------------                 +--*  LCL_VAR   int   (AX) V05 loc3         
               [000264] ------------                 \--*  CNS_INT   int    0

LocalAddressVisitor visiting statement:
STMT00070 (IL   ???...  ???)
               [000265] --CXG-------              *  CALL      void   System.Threading.Monitor.Exit
               [000266] ------------ arg0         \--*  LCL_VAR   ref    V04 loc2         

LocalAddressVisitor visiting statement:
STMT00062 (IL 0x126...0x127)
               [000226] ------------              *  JTRUE     void  
               [000225] ------------              \--*  EQ        int   
               [000223] ------------                 +--*  LCL_VAR   int   (AX) V05 loc3         
               [000224] ------------                 \--*  CNS_INT   int    0

LocalAddressVisitor visiting statement:
STMT00064 (IL 0x129...0x12A)
               [000229] --C-G-------              *  CALL      void   System.Threading.Monitor.Exit
               [000228] ------------ arg0         \--*  LCL_VAR   ref    V04 loc2         

LocalAddressVisitor visiting statement:
STMT00063 (IL 0x12F...0x12F)
               [000227] ------------              *  RETFILT   void  

LocalAddressVisitor visiting statement:
STMT00040 (IL 0x130...0x137)
               [000160] --C-G-------              *  CALL      void   System.Threading.Thread.Sleep
               [000159] ------------ arg0         \--*  CNS_INT   int    100

LocalAddressVisitor visiting statement:
STMT00041 (IL 0x139...0x13E)
               [000164] -AC-G-------              *  ASG       struct (copy)
               [000162] D------N----              +--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  +--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
               [000161] --C-G-------              \--*  CALL      struct System.DateTime.get_Now

LocalAddressVisitor visiting statement:
STMT00042 (IL 0x13F...0x178)
               [000170] --C-G-------              *  CALL      void   System.Console.WriteLine
               [000169] --C-G------- arg0         \--*  CALL      ref    System.String.Concat
               [000167] --C-G------- arg0            +--*  CALL      ref    System.DateTime.ToString
               [000166] ------------ this in rcx     |  \--*  ADDR      byref 
               [000165] -------N----                 |     \--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                     |     \--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
               [000168] ------------ arg1            \--*  CNS_STR   ref   <string constant>

Local V17 should not be enregistered because: it is address exposed

Local V02 should not be enregistered because: it is address exposed

LocalAddressVisitor visiting statement:
STMT00043 (IL 0x155...  ???)
               [000172] --C-G-------              *  CALL      void   System.Console.WriteLine
               [000171] ------------ arg0         \--*  CNS_STR   ref   <string constant>

LocalAddressVisitor visiting statement:
STMT00044 (IL 0x15F...  ???)
               [000174] --C-G-------              *  CALL      void   System.Console.WriteLine
               [000173] ------------ arg0         \--*  CNS_STR   ref   <string constant>

LocalAddressVisitor visiting statement:
STMT00045 (IL 0x169...  ???)
               [000176] --C-G-------              *  CALL      void   System.Console.WriteLine
               [000175] ------------ arg0         \--*  CNS_STR   ref   <string constant>

LocalAddressVisitor visiting statement:
STMT00046 (IL 0x173...  ???)
               [000178] --C-G-------              *  CALL      void   System.Console.WriteLine
               [000177] ------------ arg0         \--*  CNS_STR   ref   <string constant>

LocalAddressVisitor visiting statement:
STMT00048 (IL   ???...  ???)
               [000233] S-C-G-------              *  CALL      void   System.ConsolePal.ReadKey
               [000235] ------------ arg0         +--*  ADDR      byref 
               [000236] -------N----              |  \--*  LCL_VAR   struct<System.ConsoleKeyInfo, 12>(P) V06 loc4         
                                                  |  \--*    ushort V06._keyChar (offs=0x00) -> V18 tmp11        
                                                  |  \--*    int    V06._key (offs=0x04) -> V19 tmp12        
                                                  |  \--*    int    V06._mods (offs=0x08) -> V20 tmp13        
               [000234] ------------ arg1         \--*  PUTARG_TYPE bool  
               [000232] ------------                 \--*  CNS_INT   int    0

Local V18 should not be enregistered because: it is address exposed

Local V19 should not be enregistered because: it is address exposed

Local V20 should not be enregistered because: it is address exposed

Local V06 should not be enregistered because: it is address exposed

LocalAddressVisitor visiting statement:
STMT00050 (IL   ???...  ???)
               [000189] --C---------              *  JTRUE     void  
               [000188] N-C------U--              \--*  NE        int   
               [000240] ------------                 +--*  FIELD     int    _key
               [000238] ------------                 |  \--*  ADDR      byref 
               [000239] -------N----                 |     \--*  LCL_VAR   struct<System.ConsoleKeyInfo, 12>(AX)(P) V06 loc4         
                                                     |     \--*    ushort V06._keyChar (offs=0x00) -> V18 tmp11        
                                                     |     \--*    int    V06._key (offs=0x04) -> V19 tmp12        
                                                     |     \--*    int    V06._mods (offs=0x08) -> V20 tmp13        
               [000187] ------------                 \--*  CNS_INT   int    71
Replacing the field in promoted struct with local var V19
LocalAddressVisitor modified statement:
STMT00050 (IL   ???...  ???)
               [000189] --C---------              *  JTRUE     void  
               [000188] N-C------U--              \--*  NE        int   
               [000240] ------------                 +--*  LCL_VAR   int   (AX) V19 tmp12        
               [000187] ------------                 \--*  CNS_INT   int    71

LocalAddressVisitor visiting statement:
STMT00061 (IL 0x18F...0x199)
               [000222] --C-G-------              *  CALL      void   System.GC.Collect
               [000221] --C-G------- arg0         \--*  CALL      int    System.GC.get_MaxGeneration

LocalAddressVisitor visiting statement:
STMT00052 (IL   ???...  ???)
               [000196] --C---------              *  JTRUE     void  
               [000195] N-C------U--              \--*  NE        int   
               [000244] ------------                 +--*  FIELD     int    _key
               [000242] ------------                 |  \--*  ADDR      byref 
               [000243] -------N----                 |     \--*  LCL_VAR   struct<System.ConsoleKeyInfo, 12>(AX)(P) V06 loc4         
                                                     |     \--*    ushort V06._keyChar (offs=0x00) -> V18 tmp11        
                                                     |     \--*    int    V06._key (offs=0x04) -> V19 tmp12        
                                                     |     \--*    int    V06._mods (offs=0x08) -> V20 tmp13        
               [000194] ------------                 \--*  CNS_INT   int    72
Replacing the field in promoted struct with local var V19
LocalAddressVisitor modified statement:
STMT00052 (IL   ???...  ???)
               [000196] --C---------              *  JTRUE     void  
               [000195] N-C------U--              \--*  NE        int   
               [000244] ------------                 +--*  LCL_VAR   int   (AX) V19 tmp12        
               [000194] ------------                 \--*  CNS_INT   int    72

LocalAddressVisitor visiting statement:
STMT00060 (IL 0x1A6...0x1AB)
               [000220] --C-G-------              *  CALL      void   System.Diagnostics.Debugger.Break

LocalAddressVisitor visiting statement:
STMT00054 (IL   ???...  ???)
               [000203] --C---------              *  JTRUE     void  
               [000202] N-C------U--              \--*  NE        int   
               [000248] ------------                 +--*  FIELD     int    _key
               [000246] ------------                 |  \--*  ADDR      byref 
               [000247] -------N----                 |     \--*  LCL_VAR   struct<System.ConsoleKeyInfo, 12>(AX)(P) V06 loc4         
                                                     |     \--*    ushort V06._keyChar (offs=0x00) -> V18 tmp11        
                                                     |     \--*    int    V06._key (offs=0x04) -> V19 tmp12        
                                                     |     \--*    int    V06._mods (offs=0x08) -> V20 tmp13        
               [000201] ------------                 \--*  CNS_INT   int    82
Replacing the field in promoted struct with local var V19
LocalAddressVisitor modified statement:
STMT00054 (IL   ???...  ???)
               [000203] --C---------              *  JTRUE     void  
               [000202] N-C------U--              \--*  NE        int   
               [000248] ------------                 +--*  LCL_VAR   int   (AX) V19 tmp12        
               [000201] ------------                 \--*  CNS_INT   int    82

LocalAddressVisitor visiting statement:
STMT00059 (IL 0x1B8...0x1BA)
               [000219] -A-XG-------              *  ASG       bool  
               [000218] ---XG--N----              +--*  FIELD     bool   _running
               [000216] ------------              |  \--*  LCL_VAR   ref    V00 this         
               [000217] ------------              \--*  CNS_INT   int    0

LocalAddressVisitor visiting statement:
STMT00056 (IL   ???...  ???)
               [000210] --C---------              *  JTRUE     void  
               [000209] N-C------U--              \--*  NE        int   
               [000252] ------------                 +--*  FIELD     int    _key
               [000250] ------------                 |  \--*  ADDR      byref 
               [000251] -------N----                 |     \--*  LCL_VAR   struct<System.ConsoleKeyInfo, 12>(AX)(P) V06 loc4         
                                                     |     \--*    ushort V06._keyChar (offs=0x00) -> V18 tmp11        
                                                     |     \--*    int    V06._key (offs=0x04) -> V19 tmp12        
                                                     |     \--*    int    V06._mods (offs=0x08) -> V20 tmp13        
               [000208] ------------                 \--*  CNS_INT   int    81
Replacing the field in promoted struct with local var V19
LocalAddressVisitor modified statement:
STMT00056 (IL   ???...  ???)
               [000210] --C---------              *  JTRUE     void  
               [000209] N-C------U--              \--*  NE        int   
               [000252] ------------                 +--*  LCL_VAR   int   (AX) V19 tmp12        
               [000208] ------------                 \--*  CNS_INT   int    81

LocalAddressVisitor visiting statement:
STMT00057 (IL 0x1CC...0x1CE)
               [000214] -A-XG-------              *  ASG       bool  
               [000213] ---XG--N----              +--*  FIELD     bool   _running
               [000211] ------------              |  \--*  LCL_VAR   ref    V00 this         
               [000212] ------------              \--*  CNS_INT   int    0

LocalAddressVisitor visiting statement:
STMT00058 (IL 0x1D3...0x1D3)
               [000215] ------------              *  RETURN    void  


*************** Finishing PHASE Morph - Structs/AddrExp

*************** Starting PHASE Morph - ByRefs

*************** In fgRetypeImplicitByRefArgs()

*************** Finishing PHASE Morph - ByRefs

*************** Starting PHASE Morph - Global

*************** In fgMorphBlocks()

Morphing BB01 of 'FalseLeakRepro.Program:Run(System.String[]):this'

fgMorphTree BB01, STMT00000 (before)
               [000003] -AC-G-------              *  ASG       struct (copy)
               [000001] D------N----              +--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  +--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
               [000000] --C-G-------              \--*  CALL      struct System.DateTime.get_Now
Notify VM instruction set (SSE2) must be supported.
Initializing arg info for 0.CALL:
ArgTable for 0.CALL after fgInitArgInfo:

Morphing args for 0.CALL:
argSlots=0, preallocatedArgCount=4, nextSlotNum=4, nextSlotByteOffset=32, outgoingArgSpaceSize=32
ArgTable for 0.CALL after fgMorphArgs:

MorphCopyBlock:
MorphBlock for dst tree, before:
               [000001] D---G+-N----              *  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  *    long   V02._dateData (offs=0x00) -> V17 tmp10        
MorphBlock after:
               [000001] D---G+-N----              *  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  *    long   V02._dateData (offs=0x00) -> V17 tmp10        
PrepareDst for [000001] have found a local var V02.
MorphBlock for src tree, before:
               [000000] --CXG+------              *  CALL      struct System.DateTime.get_Now
MorphBlock after:
               [000000] --CXG+------              *  CALL      struct System.DateTime.get_Now
block assignment to morph:
               [000003] -ACXG-------              *  ASG       struct (copy)
               [000001] D---G+-N----              +--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  +--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
               [000000] --CXG+------              \--*  CALL      struct System.DateTime.get_Now
 (m_dstDoFldAsg=true) src is a call this requires a CopyBlock.

Local V02 should not be enregistered because: written in a block op
MorphCopyBlock (after):
               [000003] -ACXG-------              *  ASG       struct (copy)
               [000001] D---G+-N----              +--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  +--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
               [000000] --CXG+------              \--*  CALL      struct System.DateTime.get_Now

fgMorphTree BB01, STMT00001 (before)
               [000009] --C-G-------              *  CALL      void   System.Console.WriteLine
               [000008] --C-G------- arg0         \--*  CALL      ref    System.String.Concat
               [000006] --C-G------- arg0            +--*  CALL      ref    System.DateTime.ToString
               [000005] ------------ this in rcx     |  \--*  ADDR      byref 
               [000004] -------N----                 |     \--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                     |     \--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
               [000007] ------------ arg1            \--*  CNS_STR   ref   <string constant>
Initializing arg info for 9.CALL:
ArgTable for 9.CALL after fgInitArgInfo:
fgArgTabEntry[arg 0 8.CALL ref (By ref), 1 reg: rcx, byteAlignment=8]

Morphing args for 9.CALL:
Initializing arg info for 8.CALL:
ArgTable for 8.CALL after fgInitArgInfo:
fgArgTabEntry[arg 0 6.CALL ref (By ref), 1 reg: rcx, byteAlignment=8]
fgArgTabEntry[arg 1 7.CNS_STR ref (By ref), 1 reg: rdx, byteAlignment=8]

Morphing args for 8.CALL:
Initializing arg info for 6.CALL:
ArgTable for 6.CALL after fgInitArgInfo:
fgArgTabEntry[arg 0 5.ADDR byref (By ref), 1 reg: rcx, byteAlignment=8]

Morphing args for 6.CALL:
argSlots=1, preallocatedArgCount=4, nextSlotNum=4, nextSlotByteOffset=32, outgoingArgSpaceSize=32

Sorting the arguments:
Deferred argument ('rcx'):
               [000005] -----+------              *  ADDR      byref 
               [000004] ----G+-N----              \--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  \--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
Replaced with placeholder node:
               [000268] ----------L-              *  ARGPLACE  byref 

Shuffled argument table:    rcx 
ArgTable for 6.CALL after fgMorphArgs:
fgArgTabEntry[arg 0 5.ADDR byref (By ref), 1 reg: rcx, byteAlignment=8, lateArgInx=0, processed]

argSlots=2, preallocatedArgCount=4, nextSlotNum=4, nextSlotByteOffset=32, outgoingArgSpaceSize=32

Sorting the arguments:
Argument with 'side effect'...
               [000006] --CXG+------              *  CALL      ref    System.DateTime.ToString
               [000005] -----+------ this in rcx  \--*  ADDR      byref 
               [000004] ----G+-N----                 \--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                     \--*    long   V02._dateData (offs=0x00) -> V17 tmp10        

lvaGrabTemp returning 21 (V21 tmp14) called for argument with side effect.

  Evaluate to a temp:
               [000272] -ACXG-----L-              *  ASG       ref   
               [000271] D------N----              +--*  LCL_VAR   ref    V21 tmp14        
               [000006] --CXG+------              \--*  CALL      ref    System.DateTime.ToString
               [000005] -----+------ this in rcx     \--*  ADDR      byref 
               [000004] ----G+-N----                    \--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                        \--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
Deferred argument ('rdx'):
               [000270] #---G+------              *  IND       ref   
               [000269] H----+------              \--*  CNS_INT(h) long   0x750031F0 "	 Created list"
Replaced with placeholder node:
               [000274] ----------L-              *  ARGPLACE  ref   

Shuffled argument table:    rcx rdx 
ArgTable for 8.CALL after fgMorphArgs:
fgArgTabEntry[arg 0 273.LCL_VAR ref (By ref), 1 reg: rcx, byteAlignment=8, lateArgInx=0, tmpNum=V21, isTmp, processed]
fgArgTabEntry[arg 1 270.IND ref (By ref), 1 reg: rdx, byteAlignment=8, lateArgInx=1, processed]

argSlots=1, preallocatedArgCount=4, nextSlotNum=4, nextSlotByteOffset=32, outgoingArgSpaceSize=32

Sorting the arguments:
Deferred argument ('rcx'):
               [000008] --CXG+------              *  CALL      ref    System.String.Concat
               [000272] -ACXG-----L- arg0 SETUP   +--*  ASG       ref   
               [000271] D------N----              |  +--*  LCL_VAR   ref    V21 tmp14        
               [000006] --CXG+------              |  \--*  CALL      ref    System.DateTime.ToString
               [000005] -----+------ this in rcx  |     \--*  ADDR      byref 
               [000004] ----G+-N----              |        \--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  |        \--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
               [000273] ------------ arg0 in rcx  +--*  LCL_VAR   ref    V21 tmp14        
               [000270] #---G+------ arg1 in rdx  \--*  IND       ref   
               [000269] H----+------                 \--*  CNS_INT(h) long   0x750031F0 "	 Created list"
Replaced with placeholder node:
               [000275] ----------L-              *  ARGPLACE  ref   

Shuffled argument table:    rcx 
ArgTable for 9.CALL after fgMorphArgs:
fgArgTabEntry[arg 0 8.CALL ref (By ref), 1 reg: rcx, byteAlignment=8, lateArgInx=0, processed]


fgMorphTree BB01, STMT00001 (after)
               [000009] --CXG+------              *  CALL      void   System.Console.WriteLine
               [000008] --CXG+------ arg0 in rcx  \--*  CALL      ref    System.String.Concat
               [000272] -ACXG-----L- arg0 SETUP      +--*  ASG       ref   
               [000271] D------N----                 |  +--*  LCL_VAR   ref    V21 tmp14        
               [000006] --CXG+------                 |  \--*  CALL      ref    System.DateTime.ToString
               [000005] -----+------ this in rcx     |     \--*  ADDR      byref 
               [000004] ----G+-N----                 |        \--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                     |        \--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
               [000273] ------------ arg0 in rcx     +--*  LCL_VAR   ref    V21 tmp14        
               [000270] #---G+------ arg1 in rdx     \--*  IND       ref   
               [000269] H----+------                    \--*  CNS_INT(h) long   0x750031F0 "	 Created list"

fgMorphTree BB01, STMT00002 (before)
               [000014] -AC---------              *  ASG       ref   
               [000013] D------N----              +--*  LCL_VAR   ref    V08 tmp1         
               [000012] --C---------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
               [000011] H----------- arg0            \--*  CNS_INT(h) long   0x7ffdb3ee2350 method
Initializing arg info for 12.CALL:
ArgTable for 12.CALL after fgInitArgInfo:
fgArgTabEntry[arg 0 11.CNS_INT long (By ref), 1 reg: rcx, byteAlignment=8]

Morphing args for 12.CALL:
argSlots=1, preallocatedArgCount=4, nextSlotNum=4, nextSlotByteOffset=32, outgoingArgSpaceSize=32

Sorting the arguments:
Deferred argument ('rcx'):
               [000011] H----+------              *  CNS_INT(h) long   0x7ffdb3ee2350 method
Replaced with placeholder node:
               [000276] ----------L-              *  ARGPLACE  long  

Shuffled argument table:    rcx 
ArgTable for 12.CALL after fgMorphArgs:
fgArgTabEntry[arg 0 11.CNS_INT long (By ref), 1 reg: rcx, byteAlignment=8, lateArgInx=0, processed]


fgMorphTree BB01, STMT00002 (after)
               [000014] -AC--+------              *  ASG       ref   
               [000013] D----+-N----              +--*  LCL_VAR   ref    V08 tmp1         
               [000012] --C--+------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
               [000011] H----+------ arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb3ee2350 method

fgMorphTree BB01, STMT00003 (before)
               [000016] --C-G-------              *  CALL      void   FalseLeakRepro.List..ctor
               [000015] ------------ this in rcx  \--*  LCL_VAR   ref    V08 tmp1         
Initializing arg info for 16.CALL:
ArgTable for 16.CALL after fgInitArgInfo:
fgArgTabEntry[arg 0 15.LCL_VAR ref (By ref), 1 reg: rcx, byteAlignment=8]

Morphing args for 16.CALL:
argSlots=1, preallocatedArgCount=4, nextSlotNum=4, nextSlotByteOffset=32, outgoingArgSpaceSize=32

Sorting the arguments:
Deferred argument ('rcx'):
               [000015] -----+------              *  LCL_VAR   ref    V08 tmp1         
Replaced with placeholder node:
               [000277] ----------L-              *  ARGPLACE  ref   

Shuffled argument table:    rcx 
ArgTable for 16.CALL after fgMorphArgs:
fgArgTabEntry[arg 0 15.LCL_VAR ref (By ref), 1 reg: rcx, byteAlignment=8, lateArgInx=0, processed]


fgMorphTree BB01, STMT00003 (after)
               [000016] --CXG+------              *  CALL      void   FalseLeakRepro.List..ctor
               [000015] -----+------ this in rcx  \--*  LCL_VAR   ref    V08 tmp1         

fgMorphTree BB01, STMT00004 (before)
               [000019] -A-XG-------              *  ASG       ref   
               [000018] ---XG--N----              +--*  FIELD     ref    _myList
               [000010] ------------              |  \--*  LCL_VAR   ref    V00 this         
               [000017] ------------              \--*  LCL_VAR   ref    V08 tmp1         

Final value of Compiler::fgMorphField after calling fgMorphSmpOp:
               [000018] ---XG--N----              *  IND       ref   
               [000279] -----+------              \--*  ADD       byref 
               [000010] -----+------                 +--*  LCL_VAR   ref    V00 this         
               [000278] -----+------                 \--*  CNS_INT   long   8 field offset Fseq[_myList]
GenTreeNode creates assertion:
               [000018] ---XG--N----              *  IND       ref   
In BB01 New Local Constant Assertion: V00 != null, index = #01

fgMorphTree BB01, STMT00004 (after)
               [000019] -A-XG+------              *  ASG       ref   
               [000018] ---XG+-N----              +--*  IND       ref   
               [000279] -----+------              |  \--*  ADD       byref 
               [000010] -----+------              |     +--*  LCL_VAR   ref    V00 this         
               [000278] -----+------              |     \--*  CNS_INT   long   8 field offset Fseq[_myList]
               [000017] -----+------              \--*  LCL_VAR   ref    V08 tmp1         

fgMorphTree BB01, STMT00005 (before)
               [000026] -AC---------              *  ASG       ref   
               [000025] D------N----              +--*  LCL_VAR   ref    V09 tmp2         
               [000024] --C---------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
               [000023] H----------- arg0            \--*  CNS_INT(h) long   0x7ffdb3b058b8 token
Initializing arg info for 24.CALL:
ArgTable for 24.CALL after fgInitArgInfo:
fgArgTabEntry[arg 0 23.CNS_INT long (By ref), 1 reg: rcx, byteAlignment=8]

Morphing args for 24.CALL:
argSlots=1, preallocatedArgCount=4, nextSlotNum=4, nextSlotByteOffset=32, outgoingArgSpaceSize=32

Sorting the arguments:
Deferred argument ('rcx'):
               [000023] H----+------              *  CNS_INT(h) long   0x7ffdb3b058b8 token
Replaced with placeholder node:
               [000280] ----------L-              *  ARGPLACE  long  

Shuffled argument table:    rcx 
ArgTable for 24.CALL after fgMorphArgs:
fgArgTabEntry[arg 0 23.CNS_INT long (By ref), 1 reg: rcx, byteAlignment=8, lateArgInx=0, processed]


fgMorphTree BB01, STMT00005 (after)
               [000026] -AC--+------              *  ASG       ref   
               [000025] D----+-N----              +--*  LCL_VAR   ref    V09 tmp2         
               [000024] --C--+------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
               [000023] H----+------ arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb3b058b8 token

fgMorphTree BB01, STMT00007 (before)
               [000030] -A-XG-------              *  ASG       ref   
               [000029] D------N----              +--*  LCL_VAR   ref    V10 tmp3         
               [000022] ---XG-------              \--*  FIELD     ref    Head
               [000021] ---XG-------                 \--*  FIELD     ref    _myList
               [000020] ------------                    \--*  LCL_VAR   ref    V00 this         

Final value of Compiler::fgMorphField after calling fgMorphSmpOp:
               [000021] ---XG-------              *  IND       ref   
               [000284] -----+------              \--*  ADD       byref 
               [000020] -----+------                 +--*  LCL_VAR   ref    V00 this         
               [000283] -----+------                 \--*  CNS_INT   long   8 field offset Fseq[_myList]

Final value of Compiler::fgMorphField after calling fgMorphSmpOp:
               [000022] ---XG-------              *  IND       ref   
               [000282] ---XG+------              \--*  ADD       byref 
               [000021] ---XG+------                 +--*  IND       ref   
               [000284] -----+------                 |  \--*  ADD       byref 
               [000020] -----+------                 |     +--*  LCL_VAR   ref    V00 this         
               [000283] -----+------                 |     \--*  CNS_INT   long   8 field offset Fseq[_myList]
               [000281] -----+------                 \--*  CNS_INT   long   8 field offset Fseq[Head]

fgMorphTree BB01, STMT00007 (after)
               [000030] -A-XG+------              *  ASG       ref   
               [000029] D----+-N----              +--*  LCL_VAR   ref    V10 tmp3         
               [000022] ---XG+------              \--*  IND       ref   
               [000282] ---XG+------                 \--*  ADD       byref 
               [000021] ---XG+------                    +--*  IND       ref   
               [000284] -----+------                    |  \--*  ADD       byref 
               [000020] -----+------                    |     +--*  LCL_VAR   ref    V00 this         
               [000283] -----+------                    |     \--*  CNS_INT   long   8 field offset Fseq[_myList]
               [000281] -----+------                    \--*  CNS_INT   long   8 field offset Fseq[Head]

fgMorphTree BB01, STMT00006 (before)
               [000028] --C-G-------              *  CALL      void   System.Object..ctor
               [000027] ------------ this in rcx  \--*  LCL_VAR   ref    V09 tmp2         
Initializing arg info for 28.CALL:
ArgTable for 28.CALL after fgInitArgInfo:
fgArgTabEntry[arg 0 27.LCL_VAR ref (By ref), 1 reg: rcx, byteAlignment=8]

Morphing args for 28.CALL:
argSlots=1, preallocatedArgCount=4, nextSlotNum=4, nextSlotByteOffset=32, outgoingArgSpaceSize=32

Sorting the arguments:
Deferred argument ('rcx'):
               [000027] -----+------              *  LCL_VAR   ref    V09 tmp2         
Replaced with placeholder node:
               [000285] ----------L-              *  ARGPLACE  ref   

Shuffled argument table:    rcx 
ArgTable for 28.CALL after fgMorphArgs:
fgArgTabEntry[arg 0 27.LCL_VAR ref (By ref), 1 reg: rcx, byteAlignment=8, lateArgInx=0, processed]


fgMorphTree BB01, STMT00006 (after)
               [000028] --CXG+------              *  CALL      void   System.Object..ctor
               [000027] -----+------ this in rcx  \--*  LCL_VAR   ref    V09 tmp2         

fgMorphTree BB01, STMT00008 (before)
               [000034] -A-XG-------              *  ASG       ref   
               [000033] ---XG--N----              +--*  FIELD     ref    Data
               [000031] ------------              |  \--*  LCL_VAR   ref    V10 tmp3         
               [000032] ------------              \--*  LCL_VAR   ref    V09 tmp2         

Final value of Compiler::fgMorphField after calling fgMorphSmpOp:
               [000033] ---XG--N----              *  IND       ref   
               [000287] -----+------              \--*  ADD       byref 
               [000031] -----+------                 +--*  LCL_VAR   ref    V10 tmp3         
               [000286] -----+------                 \--*  CNS_INT   long   16 field offset Fseq[Data]
GenTreeNode creates assertion:
               [000033] ---XG--N----              *  IND       ref   
In BB01 New Local Constant Assertion: V10 != null, index = #02

fgMorphTree BB01, STMT00008 (after)
               [000034] -A-XG+------              *  ASG       ref   
               [000033] ---XG+-N----              +--*  IND       ref   
               [000287] -----+------              |  \--*  ADD       byref 
               [000031] -----+------              |     +--*  LCL_VAR   ref    V10 tmp3         
               [000286] -----+------              |     \--*  CNS_INT   long   16 field offset Fseq[Data]
               [000032] -----+------              \--*  LCL_VAR   ref    V09 tmp2         

fgMorphTree BB01, STMT00009 (before)
               [000040] -AC---------              *  ASG       ref   
               [000039] D------N----              +--*  LCL_VAR   ref    V11 tmp4         
               [000038] --C---------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
               [000037] H----------- arg0            \--*  CNS_INT(h) long   0x7ffdb3ee6200 token
Initializing arg info for 38.CALL:
ArgTable for 38.CALL after fgInitArgInfo:
fgArgTabEntry[arg 0 37.CNS_INT long (By ref), 1 reg: rcx, byteAlignment=8]

Morphing args for 38.CALL:
argSlots=1, preallocatedArgCount=4, nextSlotNum=4, nextSlotByteOffset=32, outgoingArgSpaceSize=32

Sorting the arguments:
Deferred argument ('rcx'):
               [000037] H----+------              *  CNS_INT(h) long   0x7ffdb3ee6200 token
Replaced with placeholder node:
               [000288] ----------L-              *  ARGPLACE  long  

Shuffled argument table:    rcx 
ArgTable for 38.CALL after fgMorphArgs:
fgArgTabEntry[arg 0 37.CNS_INT long (By ref), 1 reg: rcx, byteAlignment=8, lateArgInx=0, processed]


fgMorphTree BB01, STMT00009 (after)
               [000040] -AC--+------              *  ASG       ref   
               [000039] D----+-N----              +--*  LCL_VAR   ref    V11 tmp4         
               [000038] --C--+------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
               [000037] H----+------ arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb3ee6200 token

fgMorphTree BB01, STMT00010 (before)
               [000042] --C-G-------              *  CALL      void   System.MulticastDelegate.CtorClosed
               [000041] ------------ this in rcx  +--*  LCL_VAR   ref    V11 tmp4         
               [000035] ------------ arg1         +--*  LCL_VAR   ref    V00 this         
               [000036] ------------ arg2         \--*  FTN_ADDR  long   FalseLeakRepro.Program.<Run>b__3_0

Initializing arg info for 42.CALL:
ArgTable for 42.CALL after fgInitArgInfo:
fgArgTabEntry[arg 0 41.LCL_VAR ref (By ref), 1 reg: rcx, byteAlignment=8]
fgArgTabEntry[arg 1 35.LCL_VAR ref (By ref), 1 reg: rdx, byteAlignment=8]
fgArgTabEntry[arg 2 36.FTN_ADDR long (By ref), 1 reg: r8, byteAlignment=8]

Morphing args for 42.CALL:
argSlots=3, preallocatedArgCount=4, nextSlotNum=4, nextSlotByteOffset=32, outgoingArgSpaceSize=32

Sorting the arguments:
Deferred argument ('rcx'):
               [000041] -----+------              *  LCL_VAR   ref    V11 tmp4         
Replaced with placeholder node:
               [000289] ----------L-              *  ARGPLACE  ref   
Deferred argument ('rdx'):
               [000035] -----+------              *  LCL_VAR   ref    V00 this         
Replaced with placeholder node:
               [000290] ----------L-              *  ARGPLACE  ref   
Deferred argument ('r8'):
               [000036] H----+------              *  CNS_INT(h) long   0x7ffdb3b213f8 ftn
Replaced with placeholder node:
               [000291] ----------L-              *  ARGPLACE  long  

Shuffled argument table:    rcx rdx r8 
ArgTable for 42.CALL after fgMorphArgs:
fgArgTabEntry[arg 0 41.LCL_VAR ref (By ref), 1 reg: rcx, byteAlignment=8, lateArgInx=0, processed]
fgArgTabEntry[arg 1 35.LCL_VAR ref (By ref), 1 reg: rdx, byteAlignment=8, lateArgInx=1, processed]
fgArgTabEntry[arg 2 36.CNS_INT long (By ref), 1 reg: r8, byteAlignment=8, lateArgInx=2, processed]


fgMorphTree BB01, STMT00010 (after)
               [000042] --CXG+------              *  CALL      void   System.MulticastDelegate.CtorClosed
               [000041] -----+------ this in rcx  +--*  LCL_VAR   ref    V11 tmp4         
               [000035] -----+------ arg1 in rdx  +--*  LCL_VAR   ref    V00 this         
               [000036] H----+------ arg2 in r8   \--*  CNS_INT(h) long   0x7ffdb3b213f8 ftn

fgMorphTree BB01, STMT00011 (before)
               [000047] -AC---------              *  ASG       ref   
               [000046] D------N----              +--*  LCL_VAR   ref    V12 tmp5         
               [000045] --C---------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWFAST
               [000044] H----------- arg0            \--*  CNS_INT(h) long   0x7ffdb3c84e80 token
Initializing arg info for 45.CALL:
ArgTable for 45.CALL after fgInitArgInfo:
fgArgTabEntry[arg 0 44.CNS_INT long (By ref), 1 reg: rcx, byteAlignment=8]

Morphing args for 45.CALL:
argSlots=1, preallocatedArgCount=4, nextSlotNum=4, nextSlotByteOffset=32, outgoingArgSpaceSize=32

Sorting the arguments:
Deferred argument ('rcx'):
               [000044] H----+------              *  CNS_INT(h) long   0x7ffdb3c84e80 token
Replaced with placeholder node:
               [000292] ----------L-              *  ARGPLACE  long  

Shuffled argument table:    rcx 
ArgTable for 45.CALL after fgMorphArgs:
fgArgTabEntry[arg 0 44.CNS_INT long (By ref), 1 reg: rcx, byteAlignment=8, lateArgInx=0, processed]


fgMorphTree BB01, STMT00011 (after)
               [000047] -AC--+------              *  ASG       ref   
               [000046] D----+-N----              +--*  LCL_VAR   ref    V12 tmp5         
               [000045] --C--+------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWFAST
               [000044] H----+------ arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb3c84e80 token

fgMorphTree BB01, STMT00012 (before)
               [000049] --C-G-------              *  CALL      void   System.Threading.Thread..ctor
               [000048] ------------ this in rcx  +--*  LCL_VAR   ref    V12 tmp5         
               [000043] ------------ arg1         \--*  LCL_VAR   ref    V11 tmp4         
Initializing arg info for 49.CALL:
ArgTable for 49.CALL after fgInitArgInfo:
fgArgTabEntry[arg 0 48.LCL_VAR ref (By ref), 1 reg: rcx, byteAlignment=8]
fgArgTabEntry[arg 1 43.LCL_VAR ref (By ref), 1 reg: rdx, byteAlignment=8]

Morphing args for 49.CALL:
argSlots=2, preallocatedArgCount=4, nextSlotNum=4, nextSlotByteOffset=32, outgoingArgSpaceSize=32

Sorting the arguments:
Deferred argument ('rcx'):
               [000048] -----+------              *  LCL_VAR   ref    V12 tmp5         
Replaced with placeholder node:
               [000293] ----------L-              *  ARGPLACE  ref   
Deferred argument ('rdx'):
               [000043] -----+------              *  LCL_VAR   ref    V11 tmp4         
Replaced with placeholder node:
               [000294] ----------L-              *  ARGPLACE  ref   

Shuffled argument table:    rcx rdx 
ArgTable for 49.CALL after fgMorphArgs:
fgArgTabEntry[arg 0 48.LCL_VAR ref (By ref), 1 reg: rcx, byteAlignment=8, lateArgInx=0, processed]
fgArgTabEntry[arg 1 43.LCL_VAR ref (By ref), 1 reg: rdx, byteAlignment=8, lateArgInx=1, processed]


fgMorphTree BB01, STMT00012 (after)
               [000049] --CXG+------              *  CALL      void   System.Threading.Thread..ctor
               [000048] -----+------ this in rcx  +--*  LCL_VAR   ref    V12 tmp5         
               [000043] -----+------ arg1 in rdx  \--*  LCL_VAR   ref    V11 tmp4         

fgMorphTree BB01, STMT00013 (before)
               [000051] --C-G-------              *  CALL nullcheck void   System.Threading.Thread.Start
               [000050] ------------ this in rcx  \--*  LCL_VAR   ref    V12 tmp5         
Initializing arg info for 51.CALL:
ArgTable for 51.CALL after fgInitArgInfo:
fgArgTabEntry[arg 0 50.LCL_VAR ref (By ref), 1 reg: rcx, byteAlignment=8]

Morphing args for 51.CALL:
argSlots=1, preallocatedArgCount=4, nextSlotNum=4, nextSlotByteOffset=32, outgoingArgSpaceSize=32

Sorting the arguments:
Deferred argument ('rcx'):
               [000050] -----+------              *  LCL_VAR   ref    V12 tmp5         
Replaced with placeholder node:
               [000295] ----------L-              *  ARGPLACE  ref   

Shuffled argument table:    rcx 
ArgTable for 51.CALL after fgMorphArgs:
fgArgTabEntry[arg 0 50.LCL_VAR ref (By ref), 1 reg: rcx, byteAlignment=8, lateArgInx=0, processed]

GenTreeNode creates assertion:
               [000051] --CXG-------              *  CALL nullcheck void   System.Threading.Thread.Start
In BB01 New Local Constant Assertion: V12 != null, index = #03

fgMorphTree BB01, STMT00013 (after)
               [000051] --CXG+------              *  CALL nullcheck void   System.Threading.Thread.Start
               [000050] -----+------ this in rcx  \--*  LCL_VAR   ref    V12 tmp5         

fgMorphTree BB01, STMT00014 (before)
               [000055] -AC-G-------              *  ASG       struct (copy)
               [000053] D------N----              +--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  +--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
               [000052] --C-G-------              \--*  CALL      struct System.DateTime.get_Now
Initializing arg info for 52.CALL:
ArgTable for 52.CALL after fgInitArgInfo:

Morphing args for 52.CALL:
argSlots=0, preallocatedArgCount=4, nextSlotNum=4, nextSlotByteOffset=32, outgoingArgSpaceSize=32
ArgTable for 52.CALL after fgMorphArgs:

MorphCopyBlock:
MorphBlock for dst tree, before:
               [000053] D---G+-N----              *  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  *    long   V02._dateData (offs=0x00) -> V17 tmp10        
MorphBlock after:
               [000053] D---G+-N----              *  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  *    long   V02._dateData (offs=0x00) -> V17 tmp10        
PrepareDst for [000053] have found a local var V02.
MorphBlock for src tree, before:
               [000052] --CXG+------              *  CALL      struct System.DateTime.get_Now
MorphBlock after:
               [000052] --CXG+------              *  CALL      struct System.DateTime.get_Now
block assignment to morph:
               [000055] -ACXG-------              *  ASG       struct (copy)
               [000053] D---G+-N----              +--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  +--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
               [000052] --CXG+------              \--*  CALL      struct System.DateTime.get_Now
 (m_dstDoFldAsg=true) src is a call this requires a CopyBlock.

Local V02 should not be enregistered because: written in a block op
MorphCopyBlock (after):
               [000055] -ACXG-------              *  ASG       struct (copy)
               [000053] D---G+-N----              +--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  +--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
               [000052] --CXG+------              \--*  CALL      struct System.DateTime.get_Now

fgMorphTree BB01, STMT00015 (before)
               [000061] --C-G-------              *  CALL      void   System.Console.WriteLine
               [000060] --C-G------- arg0         \--*  CALL      ref    System.String.Concat
               [000058] --C-G------- arg0            +--*  CALL      ref    System.DateTime.ToString
               [000057] ------------ this in rcx     |  \--*  ADDR      byref 
               [000056] -------N----                 |     \--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                     |     \--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
               [000059] ------------ arg1            \--*  CNS_STR   ref   <string constant>
Initializing arg info for 61.CALL:
ArgTable for 61.CALL after fgInitArgInfo:
fgArgTabEntry[arg 0 60.CALL ref (By ref), 1 reg: rcx, byteAlignment=8]

Morphing args for 61.CALL:
Initializing arg info for 60.CALL:
ArgTable for 60.CALL after fgInitArgInfo:
fgArgTabEntry[arg 0 58.CALL ref (By ref), 1 reg: rcx, byteAlignment=8]
fgArgTabEntry[arg 1 59.CNS_STR ref (By ref), 1 reg: rdx, byteAlignment=8]

Morphing args for 60.CALL:
Initializing arg info for 58.CALL:
ArgTable for 58.CALL after fgInitArgInfo:
fgArgTabEntry[arg 0 57.ADDR byref (By ref), 1 reg: rcx, byteAlignment=8]

Morphing args for 58.CALL:
argSlots=1, preallocatedArgCount=4, nextSlotNum=4, nextSlotByteOffset=32, outgoingArgSpaceSize=32

Sorting the arguments:
Deferred argument ('rcx'):
               [000057] -----+------              *  ADDR      byref 
               [000056] ----G+-N----              \--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  \--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
Replaced with placeholder node:
               [000296] ----------L-              *  ARGPLACE  byref 

Shuffled argument table:    rcx 
ArgTable for 58.CALL after fgMorphArgs:
fgArgTabEntry[arg 0 57.ADDR byref (By ref), 1 reg: rcx, byteAlignment=8, lateArgInx=0, processed]

argSlots=2, preallocatedArgCount=4, nextSlotNum=4, nextSlotByteOffset=32, outgoingArgSpaceSize=32

Sorting the arguments:
Argument with 'side effect'...
               [000058] --CXG+------              *  CALL      ref    System.DateTime.ToString
               [000057] -----+------ this in rcx  \--*  ADDR      byref 
               [000056] ----G+-N----                 \--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                     \--*    long   V02._dateData (offs=0x00) -> V17 tmp10        

lvaGrabTemp returning 22 (V22 tmp15) called for argument with side effect.

  Evaluate to a temp:
               [000300] -ACXG-----L-              *  ASG       ref   
               [000299] D------N----              +--*  LCL_VAR   ref    V22 tmp15        
               [000058] --CXG+------              \--*  CALL      ref    System.DateTime.ToString
               [000057] -----+------ this in rcx     \--*  ADDR      byref 
               [000056] ----G+-N----                    \--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                        \--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
Deferred argument ('rdx'):
               [000298] #---G+------              *  IND       ref   
               [000297] H----+------              \--*  CNS_INT(h) long   0x750031F8 "	 Consumer thread started, adding items..."
Replaced with placeholder node:
               [000302] ----------L-              *  ARGPLACE  ref   

Shuffled argument table:    rcx rdx 
ArgTable for 60.CALL after fgMorphArgs:
fgArgTabEntry[arg 0 301.LCL_VAR ref (By ref), 1 reg: rcx, byteAlignment=8, lateArgInx=0, tmpNum=V22, isTmp, processed]
fgArgTabEntry[arg 1 298.IND ref (By ref), 1 reg: rdx, byteAlignment=8, lateArgInx=1, processed]

argSlots=1, preallocatedArgCount=4, nextSlotNum=4, nextSlotByteOffset=32, outgoingArgSpaceSize=32

Sorting the arguments:
Deferred argument ('rcx'):
               [000060] --CXG+------              *  CALL      ref    System.String.Concat
               [000300] -ACXG-----L- arg0 SETUP   +--*  ASG       ref   
               [000299] D------N----              |  +--*  LCL_VAR   ref    V22 tmp15        
               [000058] --CXG+------              |  \--*  CALL      ref    System.DateTime.ToString
               [000057] -----+------ this in rcx  |     \--*  ADDR      byref 
               [000056] ----G+-N----              |        \--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  |        \--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
               [000301] ------------ arg0 in rcx  +--*  LCL_VAR   ref    V22 tmp15        
               [000298] #---G+------ arg1 in rdx  \--*  IND       ref   
               [000297] H----+------                 \--*  CNS_INT(h) long   0x750031F8 "	 Consumer thread started, adding items..."
Replaced with placeholder node:
               [000303] ----------L-              *  ARGPLACE  ref   

Shuffled argument table:    rcx 
ArgTable for 61.CALL after fgMorphArgs:
fgArgTabEntry[arg 0 60.CALL ref (By ref), 1 reg: rcx, byteAlignment=8, lateArgInx=0, processed]


fgMorphTree BB01, STMT00015 (after)
               [000061] --CXG+------              *  CALL      void   System.Console.WriteLine
               [000060] --CXG+------ arg0 in rcx  \--*  CALL      ref    System.String.Concat
               [000300] -ACXG-----L- arg0 SETUP      +--*  ASG       ref   
               [000299] D------N----                 |  +--*  LCL_VAR   ref    V22 tmp15        
               [000058] --CXG+------                 |  \--*  CALL      ref    System.DateTime.ToString
               [000057] -----+------ this in rcx     |     \--*  ADDR      byref 
               [000056] ----G+-N----                 |        \--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                     |        \--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
               [000301] ------------ arg0 in rcx     +--*  LCL_VAR   ref    V22 tmp15        
               [000298] #---G+------ arg1 in rdx     \--*  IND       ref   
               [000297] H----+------                    \--*  CNS_INT(h) long   0x750031F8 "	 Consumer thread started, adding items..."

fgMorphTree BB01, STMT00016 (before)
               [000064] -A----------              *  ASG       int   
               [000063] D------N----              +--*  LCL_VAR   int    V03 loc1         
               [000062] ------------              \--*  CNS_INT   int    0
GenTreeNode creates assertion:
               [000064] -A----------              *  ASG       int   
In BB01 New Local Constant Assertion: V03 == 0, index = #04

Morphing BB02 of 'FalseLeakRepro.Program:Run(System.String[]):this'

fgMorphTree BB02, STMT00018 (before)
               [000072] -A-XG-------              *  ASG       ref   
               [000071] D------N----              +--*  LCL_VAR   ref    V04 loc2         
               [000070] ---XG-------              \--*  FIELD     ref    _myList
               [000069] ------------                 \--*  LCL_VAR   ref    V00 this         

Final value of Compiler::fgMorphField after calling fgMorphSmpOp:
               [000070] ---XG-------              *  IND       ref   
               [000305] -----+------              \--*  ADD       byref 
               [000069] -----+------                 +--*  LCL_VAR   ref    V00 this         
               [000304] -----+------                 \--*  CNS_INT   long   8 field offset Fseq[_myList]
GenTreeNode creates assertion:
               [000070] ---XG-------              *  IND       ref   
In BB02 New Local Constant Assertion: V00 != null, index = #01

fgMorphTree BB02, STMT00018 (after)
               [000072] -A-XG+------              *  ASG       ref   
               [000071] D----+-N----              +--*  LCL_VAR   ref    V04 loc2         
               [000070] ---XG+------              \--*  IND       ref   
               [000305] -----+------                 \--*  ADD       byref 
               [000069] -----+------                    +--*  LCL_VAR   ref    V00 this         
               [000304] -----+------                    \--*  CNS_INT   long   8 field offset Fseq[_myList]

fgMorphTree BB02, STMT00019 (before)
               [000075] -A----------              *  ASG       int   
               [000074] D------N----              +--*  LCL_VAR   int   (AX) V05 loc3         
               [000073] ------------              \--*  CNS_INT   int    0

Morphing BB03 of 'FalseLeakRepro.Program:Run(System.String[]):this'

fgMorphTree BB03, STMT00020 (before)
               [000079] --C-G-------              *  CALL      void   System.Threading.Monitor.Enter
               [000076] ------------ arg0         +--*  LCL_VAR   ref    V04 loc2         
               [000078] ------------ arg1         \--*  LCL_VAR_ADDR byref  V05 loc3         
Initializing arg info for 79.CALL:
ArgTable for 79.CALL after fgInitArgInfo:
fgArgTabEntry[arg 0 76.LCL_VAR ref (By ref), 1 reg: rcx, byteAlignment=8]
fgArgTabEntry[arg 1 78.LCL_VAR_ADDR long (By ref), 1 reg: rdx, byteAlignment=8]

Morphing args for 79.CALL:
argSlots=2, preallocatedArgCount=4, nextSlotNum=4, nextSlotByteOffset=32, outgoingArgSpaceSize=32

Sorting the arguments:
Deferred argument ('rdx'):
               [000078] -----+------              *  LCL_VAR_ADDR long   V05 loc3         
Replaced with placeholder node:
               [000306] ----------L-              *  ARGPLACE  long  
Deferred argument ('rcx'):
               [000076] -----+------              *  LCL_VAR   ref    V04 loc2         
Replaced with placeholder node:
               [000307] ----------L-              *  ARGPLACE  ref   

Shuffled argument table:    rdx rcx 
ArgTable for 79.CALL after fgMorphArgs:
fgArgTabEntry[arg 1 78.LCL_VAR_ADDR long (By ref), 1 reg: rdx, byteAlignment=8, lateArgInx=0, processed]
fgArgTabEntry[arg 0 76.LCL_VAR ref (By ref), 1 reg: rcx, byteAlignment=8, lateArgInx=1, processed]


fgMorphTree BB03, STMT00020 (after)
               [000079] --CXG+------              *  CALL      void   System.Threading.Monitor.Enter
               [000078] -----+------ arg1 in rdx  +--*  LCL_VAR_ADDR long   V05 loc3         
               [000076] -----+------ arg0 in rcx  \--*  LCL_VAR   ref    V04 loc2         

fgMorphTree BB03, STMT00021 (before)
               [000086] -AC---------              *  ASG       ref   
               [000085] D------N----              +--*  LCL_VAR   ref    V13 tmp6         
               [000084] --C---------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
               [000083] H----------- arg0            \--*  CNS_INT(h) long   0x7ffdb3ee58a8 method
Initializing arg info for 84.CALL:
ArgTable for 84.CALL after fgInitArgInfo:
fgArgTabEntry[arg 0 83.CNS_INT long (By ref), 1 reg: rcx, byteAlignment=8]

Morphing args for 84.CALL:
argSlots=1, preallocatedArgCount=4, nextSlotNum=4, nextSlotByteOffset=32, outgoingArgSpaceSize=32

Sorting the arguments:
Deferred argument ('rcx'):
               [000083] H----+------              *  CNS_INT(h) long   0x7ffdb3ee58a8 method
Replaced with placeholder node:
               [000308] ----------L-              *  ARGPLACE  long  

Shuffled argument table:    rcx 
ArgTable for 84.CALL after fgMorphArgs:
fgArgTabEntry[arg 0 83.CNS_INT long (By ref), 1 reg: rcx, byteAlignment=8, lateArgInx=0, processed]


fgMorphTree BB03, STMT00021 (after)
               [000086] -AC--+------              *  ASG       ref   
               [000085] D----+-N----              +--*  LCL_VAR   ref    V13 tmp6         
               [000084] --C--+------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
               [000083] H----+------ arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb3ee58a8 method

fgMorphTree BB03, STMT00023 (before)
               [000090] -A-XG-------              *  ASG       ref   
               [000089] D------N----              +--*  LCL_VAR   ref    V14 tmp7         
               [000082] ---XG-------              \--*  FIELD     ref    Head
               [000081] ---XG-------                 \--*  FIELD     ref    _myList
               [000080] ------------                    \--*  LCL_VAR   ref    V00 this         

Final value of Compiler::fgMorphField after calling fgMorphSmpOp:
               [000081] ---XG-------              *  IND       ref   
               [000312] -----+------              \--*  ADD       byref 
               [000080] -----+------                 +--*  LCL_VAR   ref    V00 this         
               [000311] -----+------                 \--*  CNS_INT   long   8 field offset Fseq[_myList]
GenTreeNode creates assertion:
               [000081] ---XG-------              *  IND       ref   
In BB03 New Local Constant Assertion: V00 != null, index = #01

Final value of Compiler::fgMorphField after calling fgMorphSmpOp:
               [000082] ---XG-------              *  IND       ref   
               [000310] ---XG+------              \--*  ADD       byref 
               [000081] ---XG+------                 +--*  IND       ref   
               [000312] -----+------                 |  \--*  ADD       byref 
               [000080] -----+------                 |     +--*  LCL_VAR   ref    V00 this         
               [000311] -----+------                 |     \--*  CNS_INT   long   8 field offset Fseq[_myList]
               [000309] -----+------                 \--*  CNS_INT   long   8 field offset Fseq[Head]

fgMorphTree BB03, STMT00023 (after)
               [000090] -A-XG+------              *  ASG       ref   
               [000089] D----+-N----              +--*  LCL_VAR   ref    V14 tmp7         
               [000082] ---XG+------              \--*  IND       ref   
               [000310] ---XG+------                 \--*  ADD       byref 
               [000081] ---XG+------                    +--*  IND       ref   
               [000312] -----+------                    |  \--*  ADD       byref 
               [000080] -----+------                    |     +--*  LCL_VAR   ref    V00 this         
               [000311] -----+------                    |     \--*  CNS_INT   long   8 field offset Fseq[_myList]
               [000309] -----+------                    \--*  CNS_INT   long   8 field offset Fseq[Head]

fgMorphTree BB03, STMT00065 (before)
               [000230] --C-G-------              *  CALL      void   System.Object..ctor
               [000087] ------------ this in rcx  \--*  LCL_VAR   ref    V13 tmp6         
Initializing arg info for 230.CALL:
ArgTable for 230.CALL after fgInitArgInfo:
fgArgTabEntry[arg 0 87.LCL_VAR ref (By ref), 1 reg: rcx, byteAlignment=8]

Morphing args for 230.CALL:
argSlots=1, preallocatedArgCount=4, nextSlotNum=4, nextSlotByteOffset=32, outgoingArgSpaceSize=32

Sorting the arguments:
Deferred argument ('rcx'):
               [000087] -----+------              *  LCL_VAR   ref    V13 tmp6         
Replaced with placeholder node:
               [000313] ----------L-              *  ARGPLACE  ref   

Shuffled argument table:    rcx 
ArgTable for 230.CALL after fgMorphArgs:
fgArgTabEntry[arg 0 87.LCL_VAR ref (By ref), 1 reg: rcx, byteAlignment=8, lateArgInx=0, processed]


fgMorphTree BB03, STMT00065 (after)
               [000230] --CXG+------              *  CALL      void   System.Object..ctor
               [000087] -----+------ this in rcx  \--*  LCL_VAR   ref    V13 tmp6         

fgMorphTree BB03, STMT00024 (before)
               [000094] -A-XG-------              *  ASG       ref   
               [000093] ---XG--N----              +--*  FIELD     ref    Next
               [000091] ------------              |  \--*  LCL_VAR   ref    V14 tmp7         
               [000092] ------------              \--*  LCL_VAR   ref    V13 tmp6         

Final value of Compiler::fgMorphField after calling fgMorphSmpOp:
               [000093] ---XG--N----              *  IND       ref   
               [000315] -----+------              \--*  ADD       byref 
               [000091] -----+------                 +--*  LCL_VAR   ref    V14 tmp7         
               [000314] -----+------                 \--*  CNS_INT   long   8 field offset Fseq[Next]
GenTreeNode creates assertion:
               [000093] ---XG--N----              *  IND       ref   
In BB03 New Local Constant Assertion: V14 != null, index = #02

fgMorphTree BB03, STMT00024 (after)
               [000094] -A-XG+------              *  ASG       ref   
               [000093] ---XG+-N----              +--*  IND       ref   
               [000315] -----+------              |  \--*  ADD       byref 
               [000091] -----+------              |     +--*  LCL_VAR   ref    V14 tmp7         
               [000314] -----+------              |     \--*  CNS_INT   long   8 field offset Fseq[Next]
               [000092] -----+------              \--*  LCL_VAR   ref    V13 tmp6         

fgMorphTree BB03, STMT00025 (before)
               [000102] -A-XG-------              *  ASG       ref   
               [000101] ---XG--N----              +--*  FIELD     ref    Head
               [000096] ---XG-------              |  \--*  FIELD     ref    _myList
               [000095] ------------              |     \--*  LCL_VAR   ref    V00 this         
               [000100] ---XG-------              \--*  FIELD     ref    Next
               [000099] ---XG-------                 \--*  FIELD     ref    Head
               [000098] ---XG-------                    \--*  FIELD     ref    _myList
               [000097] ------------                       \--*  LCL_VAR   ref    V00 this         

Final value of Compiler::fgMorphField after calling fgMorphSmpOp:
               [000096] ---XG-------              *  IND       ref   
               [000319] -----+------              \--*  ADD       byref 
               [000095] -----+------                 +--*  LCL_VAR   ref    V00 this         
               [000318] -----+------                 \--*  CNS_INT   long   8 field offset Fseq[_myList]

Final value of Compiler::fgMorphField after calling fgMorphSmpOp:
               [000101] ---XG--N----              *  IND       ref   
               [000317] ---XG+------              \--*  ADD       byref 
               [000096] ---XG+------                 +--*  IND       ref   
               [000319] -----+------                 |  \--*  ADD       byref 
               [000095] -----+------                 |     +--*  LCL_VAR   ref    V00 this         
               [000318] -----+------                 |     \--*  CNS_INT   long   8 field offset Fseq[_myList]
               [000316] -----+------                 \--*  CNS_INT   long   8 field offset Fseq[Head]

Final value of Compiler::fgMorphField after calling fgMorphSmpOp:
               [000098] ---XG-------              *  IND       ref   
               [000325] -----+------              \--*  ADD       byref 
               [000097] -----+------                 +--*  LCL_VAR   ref    V00 this         
               [000324] -----+------                 \--*  CNS_INT   long   8 field offset Fseq[_myList]

Final value of Compiler::fgMorphField after calling fgMorphSmpOp:
               [000099] ---XG-------              *  IND       ref   
               [000323] ---XG+------              \--*  ADD       byref 
               [000098] ---XG+------                 +--*  IND       ref   
               [000325] -----+------                 |  \--*  ADD       byref 
               [000097] -----+------                 |     +--*  LCL_VAR   ref    V00 this         
               [000324] -----+------                 |     \--*  CNS_INT   long   8 field offset Fseq[_myList]
               [000322] -----+------                 \--*  CNS_INT   long   8 field offset Fseq[Head]

Final value of Compiler::fgMorphField after calling fgMorphSmpOp:
               [000100] ---XG-------              *  IND       ref   
               [000321] ---XG+------              \--*  ADD       byref 
               [000099] ---XG+------                 +--*  IND       ref   
               [000323] ---XG+------                 |  \--*  ADD       byref 
               [000098] ---XG+------                 |     +--*  IND       ref   
               [000325] -----+------                 |     |  \--*  ADD       byref 
               [000097] -----+------                 |     |     +--*  LCL_VAR   ref    V00 this         
               [000324] -----+------                 |     |     \--*  CNS_INT   long   8 field offset Fseq[_myList]
               [000322] -----+------                 |     \--*  CNS_INT   long   8 field offset Fseq[Head]
               [000320] -----+------                 \--*  CNS_INT   long   8 field offset Fseq[Next]

fgMorphTree BB03, STMT00025 (after)
               [000102] -A-XG+------              *  ASG       ref   
               [000101] ---XG+-N----              +--*  IND       ref   
               [000317] ---XG+------              |  \--*  ADD       byref 
               [000096] ---XG+------              |     +--*  IND       ref   
               [000319] -----+------              |     |  \--*  ADD       byref 
               [000095] -----+------              |     |     +--*  LCL_VAR   ref    V00 this         
               [000318] -----+------              |     |     \--*  CNS_INT   long   8 field offset Fseq[_myList]
               [000316] -----+------              |     \--*  CNS_INT   long   8 field offset Fseq[Head]
               [000100] ---XG+------              \--*  IND       ref   
               [000321] ---XG+------                 \--*  ADD       byref 
               [000099] ---XG+------                    +--*  IND       ref   
               [000323] ---XG+------                    |  \--*  ADD       byref 
               [000098] ---XG+------                    |     +--*  IND       ref   
               [000325] -----+------                    |     |  \--*  ADD       byref 
               [000097] -----+------                    |     |     +--*  LCL_VAR   ref    V00 this         
               [000324] -----+------                    |     |     \--*  CNS_INT   long   8 field offset Fseq[_myList]
               [000322] -----+------                    |     \--*  CNS_INT   long   8 field offset Fseq[Head]
               [000320] -----+------                    \--*  CNS_INT   long   8 field offset Fseq[Next]

fgMorphTree BB03, STMT00026 (before)
               [000109] -AC---------              *  ASG       ref   
               [000108] D------N----              +--*  LCL_VAR   ref    V15 tmp8         
               [000107] --C---------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
               [000106] H----------- arg0            \--*  CNS_INT(h) long   0x7ffdb3b058b8 token
Initializing arg info for 107.CALL:
ArgTable for 107.CALL after fgInitArgInfo:
fgArgTabEntry[arg 0 106.CNS_INT long (By ref), 1 reg: rcx, byteAlignment=8]

Morphing args for 107.CALL:
argSlots=1, preallocatedArgCount=4, nextSlotNum=4, nextSlotByteOffset=32, outgoingArgSpaceSize=32

Sorting the arguments:
Deferred argument ('rcx'):
               [000106] H----+------              *  CNS_INT(h) long   0x7ffdb3b058b8 token
Replaced with placeholder node:
               [000326] ----------L-              *  ARGPLACE  long  

Shuffled argument table:    rcx 
ArgTable for 107.CALL after fgMorphArgs:
fgArgTabEntry[arg 0 106.CNS_INT long (By ref), 1 reg: rcx, byteAlignment=8, lateArgInx=0, processed]


fgMorphTree BB03, STMT00026 (after)
               [000109] -AC--+------              *  ASG       ref   
               [000108] D----+-N----              +--*  LCL_VAR   ref    V15 tmp8         
               [000107] --C--+------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
               [000106] H----+------ arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb3b058b8 token

fgMorphTree BB03, STMT00028 (before)
               [000113] -A-XG-------              *  ASG       ref   
               [000112] D------N----              +--*  LCL_VAR   ref    V16 tmp9         
               [000105] ---XG-------              \--*  FIELD     ref    Head
               [000104] ---XG-------                 \--*  FIELD     ref    _myList
               [000103] ------------                    \--*  LCL_VAR   ref    V00 this         

Final value of Compiler::fgMorphField after calling fgMorphSmpOp:
               [000104] ---XG-------              *  IND       ref   
               [000330] -----+------              \--*  ADD       byref 
               [000103] -----+------                 +--*  LCL_VAR   ref    V00 this         
               [000329] -----+------                 \--*  CNS_INT   long   8 field offset Fseq[_myList]

Final value of Compiler::fgMorphField after calling fgMorphSmpOp:
               [000105] ---XG-------              *  IND       ref   
               [000328] ---XG+------              \--*  ADD       byref 
               [000104] ---XG+------                 +--*  IND       ref   
               [000330] -----+------                 |  \--*  ADD       byref 
               [000103] -----+------                 |     +--*  LCL_VAR   ref    V00 this         
               [000329] -----+------                 |     \--*  CNS_INT   long   8 field offset Fseq[_myList]
               [000327] -----+------                 \--*  CNS_INT   long   8 field offset Fseq[Head]

fgMorphTree BB03, STMT00028 (after)
               [000113] -A-XG+------              *  ASG       ref   
               [000112] D----+-N----              +--*  LCL_VAR   ref    V16 tmp9         
               [000105] ---XG+------              \--*  IND       ref   
               [000328] ---XG+------                 \--*  ADD       byref 
               [000104] ---XG+------                    +--*  IND       ref   
               [000330] -----+------                    |  \--*  ADD       byref 
               [000103] -----+------                    |     +--*  LCL_VAR   ref    V00 this         
               [000329] -----+------                    |     \--*  CNS_INT   long   8 field offset Fseq[_myList]
               [000327] -----+------                    \--*  CNS_INT   long   8 field offset Fseq[Head]

fgMorphTree BB03, STMT00027 (before)
               [000111] --C-G-------              *  CALL      void   System.Object..ctor
               [000110] ------------ this in rcx  \--*  LCL_VAR   ref    V15 tmp8         
Initializing arg info for 111.CALL:
ArgTable for 111.CALL after fgInitArgInfo:
fgArgTabEntry[arg 0 110.LCL_VAR ref (By ref), 1 reg: rcx, byteAlignment=8]

Morphing args for 111.CALL:
argSlots=1, preallocatedArgCount=4, nextSlotNum=4, nextSlotByteOffset=32, outgoingArgSpaceSize=32

Sorting the arguments:
Deferred argument ('rcx'):
               [000110] -----+------              *  LCL_VAR   ref    V15 tmp8         
Replaced with placeholder node:
               [000331] ----------L-              *  ARGPLACE  ref   

Shuffled argument table:    rcx 
ArgTable for 111.CALL after fgMorphArgs:
fgArgTabEntry[arg 0 110.LCL_VAR ref (By ref), 1 reg: rcx, byteAlignment=8, lateArgInx=0, processed]


fgMorphTree BB03, STMT00027 (after)
               [000111] --CXG+------              *  CALL      void   System.Object..ctor
               [000110] -----+------ this in rcx  \--*  LCL_VAR   ref    V15 tmp8         

fgMorphTree BB03, STMT00029 (before)
               [000117] -A-XG-------              *  ASG       ref   
               [000116] ---XG--N----              +--*  FIELD     ref    Data
               [000114] ------------              |  \--*  LCL_VAR   ref    V16 tmp9         
               [000115] ------------              \--*  LCL_VAR   ref    V15 tmp8         

Final value of Compiler::fgMorphField after calling fgMorphSmpOp:
               [000116] ---XG--N----              *  IND       ref   
               [000333] -----+------              \--*  ADD       byref 
               [000114] -----+------                 +--*  LCL_VAR   ref    V16 tmp9         
               [000332] -----+------                 \--*  CNS_INT   long   16 field offset Fseq[Data]
GenTreeNode creates assertion:
               [000116] ---XG--N----              *  IND       ref   
In BB03 New Local Constant Assertion: V16 != null, index = #03

fgMorphTree BB03, STMT00029 (after)
               [000117] -A-XG+------              *  ASG       ref   
               [000116] ---XG+-N----              +--*  IND       ref   
               [000333] -----+------              |  \--*  ADD       byref 
               [000114] -----+------              |     +--*  LCL_VAR   ref    V16 tmp9         
               [000332] -----+------              |     \--*  CNS_INT   long   16 field offset Fseq[Data]
               [000115] -----+------              \--*  LCL_VAR   ref    V15 tmp8         

Morphing BB05 of 'FalseLeakRepro.Program:Run(System.String[]):this'

fgMorphTree BB05, STMT00066 (before)
               [000254] ------------              *  JTRUE     void  
               [000255] ------------              \--*  EQ        int   
               [000256] ------------                 +--*  LCL_VAR   int   (AX) V05 loc3         
               [000257] ------------                 \--*  CNS_INT   int    0

fgMorphTree BB05, STMT00066 (after)
               [000254] ----G+------              *  JTRUE     void  
               [000255] J---G+-N----              \--*  EQ        int   
               [000334] ----G+------                 +--*  CAST      int <- bool <- int
               [000256] ----G+------                 |  \--*  LCL_VAR   int   (AX) V05 loc3         
               [000257] -----+------                 \--*  CNS_INT   int    0

Morphing BB06 of 'FalseLeakRepro.Program:Run(System.String[]):this'

fgMorphTree BB06, STMT00067 (before)
               [000258] --CXG-------              *  CALL      void   System.Threading.Monitor.Exit
               [000259] ------------ arg0         \--*  LCL_VAR   ref    V04 loc2         
Initializing arg info for 258.CALL:
ArgTable for 258.CALL after fgInitArgInfo:
fgArgTabEntry[arg 0 259.LCL_VAR ref (By ref), 1 reg: rcx, byteAlignment=8]

Morphing args for 258.CALL:
argSlots=1, preallocatedArgCount=4, nextSlotNum=4, nextSlotByteOffset=32, outgoingArgSpaceSize=32

Sorting the arguments:
Deferred argument ('rcx'):
               [000259] -----+------              *  LCL_VAR   ref    V04 loc2         
Replaced with placeholder node:
               [000335] ----------L-              *  ARGPLACE  ref   

Shuffled argument table:    rcx 
ArgTable for 258.CALL after fgMorphArgs:
fgArgTabEntry[arg 0 259.LCL_VAR ref (By ref), 1 reg: rcx, byteAlignment=8, lateArgInx=0, processed]


fgMorphTree BB06, STMT00067 (after)
               [000258] --CXG+------              *  CALL      void   System.Threading.Monitor.Exit
               [000259] -----+------ arg0 in rcx  \--*  LCL_VAR   ref    V04 loc2         

Morphing BB08 of 'FalseLeakRepro.Program:Run(System.String[]):this'

fgMorphTree BB08, STMT00031 (before)
               [000126] ------------              *  JTRUE     void  
               [000125] ------------              \--*  EQ        int   
               [000123] ------------                 +--*  LCL_VAR   int   (AX) V05 loc3         
               [000124] ------------                 \--*  CNS_INT   int    0

fgMorphTree BB08, STMT00031 (after)
               [000126] ----G+------              *  JTRUE     void  
               [000125] J---G+-N----              \--*  EQ        int   
               [000336] ----G+------                 +--*  CAST      int <- bool <- int
               [000123] ----G+------                 |  \--*  LCL_VAR   int   (AX) V05 loc3         
               [000124] -----+------                 \--*  CNS_INT   int    0

Morphing BB09 of 'FalseLeakRepro.Program:Run(System.String[]):this'

fgMorphTree BB09, STMT00033 (before)
               [000129] --C-G-------              *  CALL      void   System.Threading.Monitor.Exit
               [000128] ------------ arg0         \--*  LCL_VAR   ref    V04 loc2         
Initializing arg info for 129.CALL:
ArgTable for 129.CALL after fgInitArgInfo:
fgArgTabEntry[arg 0 128.LCL_VAR ref (By ref), 1 reg: rcx, byteAlignment=8]

Morphing args for 129.CALL:
argSlots=1, preallocatedArgCount=4, nextSlotNum=4, nextSlotByteOffset=32, outgoingArgSpaceSize=32

Sorting the arguments:
Deferred argument ('rcx'):
               [000128] -----+------              *  LCL_VAR   ref    V04 loc2         
Replaced with placeholder node:
               [000337] ----------L-              *  ARGPLACE  ref   

Shuffled argument table:    rcx 
ArgTable for 129.CALL after fgMorphArgs:
fgArgTabEntry[arg 0 128.LCL_VAR ref (By ref), 1 reg: rcx, byteAlignment=8, lateArgInx=0, processed]


fgMorphTree BB09, STMT00033 (after)
               [000129] --CXG+------              *  CALL      void   System.Threading.Monitor.Exit
               [000128] -----+------ arg0 in rcx  \--*  LCL_VAR   ref    V04 loc2         

Morphing BB10 of 'FalseLeakRepro.Program:Run(System.String[]):this'

fgMorphTree BB10, STMT00032 (before)
               [000127] ------------              *  RETFILT   void  

Morphing BB11 of 'FalseLeakRepro.Program:Run(System.String[]):this'

fgMorphTree BB11, STMT00030 (before)
               [000122] -A----------              *  ASG       int   
               [000121] D------N----              +--*  LCL_VAR   int    V03 loc1         
               [000120] ------------              \--*  ADD       int   
               [000118] ------------                 +--*  LCL_VAR   int    V03 loc1         
               [000119] ------------                 \--*  CNS_INT   int    1

Morphing BB12 of 'FalseLeakRepro.Program:Run(System.String[]):this'

fgMorphTree BB12, STMT00017 (before)
               [000068] ------------              *  JTRUE     void  
               [000067] ------------              \--*  LT        int   
               [000065] ------------                 +--*  LCL_VAR   int    V03 loc1         
               [000066] ------------                 \--*  CNS_INT   int    10

Morphing BB13 of 'FalseLeakRepro.Program:Run(System.String[]):this'

fgMorphTree BB13, STMT00034 (before)
               [000133] -AC-G-------              *  ASG       struct (copy)
               [000131] D------N----              +--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  +--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
               [000130] --C-G-------              \--*  CALL      struct System.DateTime.get_Now
Initializing arg info for 130.CALL:
ArgTable for 130.CALL after fgInitArgInfo:

Morphing args for 130.CALL:
argSlots=0, preallocatedArgCount=4, nextSlotNum=4, nextSlotByteOffset=32, outgoingArgSpaceSize=32
ArgTable for 130.CALL after fgMorphArgs:

MorphCopyBlock:
MorphBlock for dst tree, before:
               [000131] D---G+-N----              *  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  *    long   V02._dateData (offs=0x00) -> V17 tmp10        
MorphBlock after:
               [000131] D---G+-N----              *  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  *    long   V02._dateData (offs=0x00) -> V17 tmp10        
PrepareDst for [000131] have found a local var V02.
MorphBlock for src tree, before:
               [000130] --CXG+------              *  CALL      struct System.DateTime.get_Now
MorphBlock after:
               [000130] --CXG+------              *  CALL      struct System.DateTime.get_Now
block assignment to morph:
               [000133] -ACXG-------              *  ASG       struct (copy)
               [000131] D---G+-N----              +--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  +--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
               [000130] --CXG+------              \--*  CALL      struct System.DateTime.get_Now
 (m_dstDoFldAsg=true) src is a call this requires a CopyBlock.

Local V02 should not be enregistered because: written in a block op
MorphCopyBlock (after):
               [000133] -ACXG-------              *  ASG       struct (copy)
               [000131] D---G+-N----              +--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  +--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
               [000130] --CXG+------              \--*  CALL      struct System.DateTime.get_Now

fgMorphTree BB13, STMT00035 (before)
               [000139] --C-G-------              *  CALL      void   System.Console.WriteLine
               [000138] --C-G------- arg0         \--*  CALL      ref    System.String.Concat
               [000136] --C-G------- arg0            +--*  CALL      ref    System.DateTime.ToString
               [000135] ------------ this in rcx     |  \--*  ADDR      byref 
               [000134] -------N----                 |     \--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                     |     \--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
               [000137] ------------ arg1            \--*  CNS_STR   ref   <string constant>
Initializing arg info for 139.CALL:
ArgTable for 139.CALL after fgInitArgInfo:
fgArgTabEntry[arg 0 138.CALL ref (By ref), 1 reg: rcx, byteAlignment=8]

Morphing args for 139.CALL:
Initializing arg info for 138.CALL:
ArgTable for 138.CALL after fgInitArgInfo:
fgArgTabEntry[arg 0 136.CALL ref (By ref), 1 reg: rcx, byteAlignment=8]
fgArgTabEntry[arg 1 137.CNS_STR ref (By ref), 1 reg: rdx, byteAlignment=8]

Morphing args for 138.CALL:
Initializing arg info for 136.CALL:
ArgTable for 136.CALL after fgInitArgInfo:
fgArgTabEntry[arg 0 135.ADDR byref (By ref), 1 reg: rcx, byteAlignment=8]

Morphing args for 136.CALL:
argSlots=1, preallocatedArgCount=4, nextSlotNum=4, nextSlotByteOffset=32, outgoingArgSpaceSize=32

Sorting the arguments:
Deferred argument ('rcx'):
               [000135] -----+------              *  ADDR      byref 
               [000134] ----G+-N----              \--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  \--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
Replaced with placeholder node:
               [000338] ----------L-              *  ARGPLACE  byref 

Shuffled argument table:    rcx 
ArgTable for 136.CALL after fgMorphArgs:
fgArgTabEntry[arg 0 135.ADDR byref (By ref), 1 reg: rcx, byteAlignment=8, lateArgInx=0, processed]

argSlots=2, preallocatedArgCount=4, nextSlotNum=4, nextSlotByteOffset=32, outgoingArgSpaceSize=32

Sorting the arguments:
Argument with 'side effect'...
               [000136] --CXG+------              *  CALL      ref    System.DateTime.ToString
               [000135] -----+------ this in rcx  \--*  ADDR      byref 
               [000134] ----G+-N----                 \--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                     \--*    long   V02._dateData (offs=0x00) -> V17 tmp10        

lvaGrabTemp returning 23 (V23 tmp16) called for argument with side effect.

  Evaluate to a temp:
               [000342] -ACXG-----L-              *  ASG       ref   
               [000341] D------N----              +--*  LCL_VAR   ref    V23 tmp16        
               [000136] --CXG+------              \--*  CALL      ref    System.DateTime.ToString
               [000135] -----+------ this in rcx     \--*  ADDR      byref 
               [000134] ----G+-N----                    \--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                        \--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
Deferred argument ('rdx'):
               [000340] #---G+------              *  IND       ref   
               [000339] H----+------              \--*  CNS_INT(h) long   0x75003200 "	 Waiting for list processing to complete..."
Replaced with placeholder node:
               [000344] ----------L-              *  ARGPLACE  ref   

Shuffled argument table:    rcx rdx 
ArgTable for 138.CALL after fgMorphArgs:
fgArgTabEntry[arg 0 343.LCL_VAR ref (By ref), 1 reg: rcx, byteAlignment=8, lateArgInx=0, tmpNum=V23, isTmp, processed]
fgArgTabEntry[arg 1 340.IND ref (By ref), 1 reg: rdx, byteAlignment=8, lateArgInx=1, processed]

argSlots=1, preallocatedArgCount=4, nextSlotNum=4, nextSlotByteOffset=32, outgoingArgSpaceSize=32

Sorting the arguments:
Deferred argument ('rcx'):
               [000138] --CXG+------              *  CALL      ref    System.String.Concat
               [000342] -ACXG-----L- arg0 SETUP   +--*  ASG       ref   
               [000341] D------N----              |  +--*  LCL_VAR   ref    V23 tmp16        
               [000136] --CXG+------              |  \--*  CALL      ref    System.DateTime.ToString
               [000135] -----+------ this in rcx  |     \--*  ADDR      byref 
               [000134] ----G+-N----              |        \--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  |        \--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
               [000343] ------------ arg0 in rcx  +--*  LCL_VAR   ref    V23 tmp16        
               [000340] #---G+------ arg1 in rdx  \--*  IND       ref   
               [000339] H----+------                 \--*  CNS_INT(h) long   0x75003200 "	 Waiting for list processing to complete..."
Replaced with placeholder node:
               [000345] ----------L-              *  ARGPLACE  ref   

Shuffled argument table:    rcx 
ArgTable for 139.CALL after fgMorphArgs:
fgArgTabEntry[arg 0 138.CALL ref (By ref), 1 reg: rcx, byteAlignment=8, lateArgInx=0, processed]


fgMorphTree BB13, STMT00035 (after)
               [000139] --CXG+------              *  CALL      void   System.Console.WriteLine
               [000138] --CXG+------ arg0 in rcx  \--*  CALL      ref    System.String.Concat
               [000342] -ACXG-----L- arg0 SETUP      +--*  ASG       ref   
               [000341] D------N----                 |  +--*  LCL_VAR   ref    V23 tmp16        
               [000136] --CXG+------                 |  \--*  CALL      ref    System.DateTime.ToString
               [000135] -----+------ this in rcx     |     \--*  ADDR      byref 
               [000134] ----G+-N----                 |        \--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                     |        \--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
               [000343] ------------ arg0 in rcx     +--*  LCL_VAR   ref    V23 tmp16        
               [000340] #---G+------ arg1 in rdx     \--*  IND       ref   
               [000339] H----+------                    \--*  CNS_INT(h) long   0x75003200 "	 Waiting for list processing to complete..."

Morphing BB14 of 'FalseLeakRepro.Program:Run(System.String[]):this'

fgMorphTree BB14, STMT00036 (before)
               [000143] -A-XG-------              *  ASG       ref   
               [000142] D------N----              +--*  LCL_VAR   ref    V04 loc2         
               [000141] ---XG-------              \--*  FIELD     ref    _myList
               [000140] ------------                 \--*  LCL_VAR   ref    V00 this         

Final value of Compiler::fgMorphField after calling fgMorphSmpOp:
               [000141] ---XG-------              *  IND       ref   
               [000347] -----+------              \--*  ADD       byref 
               [000140] -----+------                 +--*  LCL_VAR   ref    V00 this         
               [000346] -----+------                 \--*  CNS_INT   long   8 field offset Fseq[_myList]
GenTreeNode creates assertion:
               [000141] ---XG-------              *  IND       ref   
In BB14 New Local Constant Assertion: V00 != null, index = #01

fgMorphTree BB14, STMT00036 (after)
               [000143] -A-XG+------              *  ASG       ref   
               [000142] D----+-N----              +--*  LCL_VAR   ref    V04 loc2         
               [000141] ---XG+------              \--*  IND       ref   
               [000347] -----+------                 \--*  ADD       byref 
               [000140] -----+------                    +--*  LCL_VAR   ref    V00 this         
               [000346] -----+------                    \--*  CNS_INT   long   8 field offset Fseq[_myList]

fgMorphTree BB14, STMT00037 (before)
               [000146] -A----------              *  ASG       int   
               [000145] D------N----              +--*  LCL_VAR   int   (AX) V05 loc3         
               [000144] ------------              \--*  CNS_INT   int    0

Morphing BB15 of 'FalseLeakRepro.Program:Run(System.String[]):this'

fgMorphTree BB15, STMT00038 (before)
               [000150] --C-G-------              *  CALL      void   System.Threading.Monitor.Enter
               [000147] ------------ arg0         +--*  LCL_VAR   ref    V04 loc2         
               [000149] ------------ arg1         \--*  LCL_VAR_ADDR byref  V05 loc3         
Initializing arg info for 150.CALL:
ArgTable for 150.CALL after fgInitArgInfo:
fgArgTabEntry[arg 0 147.LCL_VAR ref (By ref), 1 reg: rcx, byteAlignment=8]
fgArgTabEntry[arg 1 149.LCL_VAR_ADDR long (By ref), 1 reg: rdx, byteAlignment=8]

Morphing args for 150.CALL:
argSlots=2, preallocatedArgCount=4, nextSlotNum=4, nextSlotByteOffset=32, outgoingArgSpaceSize=32

Sorting the arguments:
Deferred argument ('rdx'):
               [000149] -----+------              *  LCL_VAR_ADDR long   V05 loc3         
Replaced with placeholder node:
               [000348] ----------L-              *  ARGPLACE  long  
Deferred argument ('rcx'):
               [000147] -----+------              *  LCL_VAR   ref    V04 loc2         
Replaced with placeholder node:
               [000349] ----------L-              *  ARGPLACE  ref   

Shuffled argument table:    rdx rcx 
ArgTable for 150.CALL after fgMorphArgs:
fgArgTabEntry[arg 1 149.LCL_VAR_ADDR long (By ref), 1 reg: rdx, byteAlignment=8, lateArgInx=0, processed]
fgArgTabEntry[arg 0 147.LCL_VAR ref (By ref), 1 reg: rcx, byteAlignment=8, lateArgInx=1, processed]


fgMorphTree BB15, STMT00038 (after)
               [000150] --CXG+------              *  CALL      void   System.Threading.Monitor.Enter
               [000149] -----+------ arg1 in rdx  +--*  LCL_VAR_ADDR long   V05 loc3         
               [000147] -----+------ arg0 in rcx  \--*  LCL_VAR   ref    V04 loc2         

fgMorphTree BB15, STMT00039 (before)
               [000158] ---XG-------              *  JTRUE     void  
               [000157] N--XG----U--              \--*  EQ        int   
               [000153] ---XG-------                 +--*  FIELD     ref    Head
               [000152] ---XG-------                 |  \--*  FIELD     ref    _myList
               [000151] ------------                 |     \--*  LCL_VAR   ref    V00 this         
               [000156] ---XG-------                 \--*  FIELD     ref    Tail
               [000155] ---XG-------                    \--*  FIELD     ref    _myList
               [000154] ------------                       \--*  LCL_VAR   ref    V00 this         
Querying runtime about current class of field FalseLeakRepro.List.Head (declared as FalseLeakRepro.Node)
Field's current class not available

Final value of Compiler::fgMorphField after calling fgMorphSmpOp:
               [000152] ---XG-------              *  IND       ref   
               [000353] -----+------              \--*  ADD       byref 
               [000151] -----+------                 +--*  LCL_VAR   ref    V00 this         
               [000352] -----+------                 \--*  CNS_INT   long   8 field offset Fseq[_myList]
GenTreeNode creates assertion:
               [000152] ---XG-------              *  IND       ref   
In BB15 New Local Constant Assertion: V00 != null, index = #01

Final value of Compiler::fgMorphField after calling fgMorphSmpOp:
               [000153] ---XG-------              *  IND       ref   
               [000351] ---XG+------              \--*  ADD       byref 
               [000152] ---XG+------                 +--*  IND       ref   
               [000353] -----+------                 |  \--*  ADD       byref 
               [000151] -----+------                 |     +--*  LCL_VAR   ref    V00 this         
               [000352] -----+------                 |     \--*  CNS_INT   long   8 field offset Fseq[_myList]
               [000350] -----+------                 \--*  CNS_INT   long   8 field offset Fseq[Head]

Final value of Compiler::fgMorphField after calling fgMorphSmpOp:
               [000155] ---XG-------              *  IND       ref   
               [000357] -----+------              \--*  ADD       byref 
               [000154] -----+------                 +--*  LCL_VAR   ref    V00 this         
               [000356] -----+------                 \--*  CNS_INT   long   8 field offset Fseq[_myList]

Final value of Compiler::fgMorphField after calling fgMorphSmpOp:
               [000156] ---XG-------              *  IND       ref   
               [000355] ---XG+------              \--*  ADD       byref 
               [000155] ---XG+------                 +--*  IND       ref   
               [000357] -----+------                 |  \--*  ADD       byref 
               [000154] -----+------                 |     +--*  LCL_VAR   ref    V00 this         
               [000356] -----+------                 |     \--*  CNS_INT   long   8 field offset Fseq[_myList]
               [000354] -----+------                 \--*  CNS_INT   long   16 field offset Fseq[Tail]

fgMorphTree BB15, STMT00039 (after)
               [000158] ---XG+------              *  JTRUE     void  
               [000157] N--XG+-N-U--              \--*  EQ        int   
               [000153] ---XG+------                 +--*  IND       ref   
               [000351] ---XG+------                 |  \--*  ADD       byref 
               [000152] ---XG+------                 |     +--*  IND       ref   
               [000353] -----+------                 |     |  \--*  ADD       byref 
               [000151] -----+------                 |     |     +--*  LCL_VAR   ref    V00 this         
               [000352] -----+------                 |     |     \--*  CNS_INT   long   8 field offset Fseq[_myList]
               [000350] -----+------                 |     \--*  CNS_INT   long   8 field offset Fseq[Head]
               [000156] ---XG+------                 \--*  IND       ref   
               [000355] ---XG+------                    \--*  ADD       byref 
               [000155] ---XG+------                       +--*  IND       ref   
               [000357] -----+------                       |  \--*  ADD       byref 
               [000154] -----+------                       |     +--*  LCL_VAR   ref    V00 this         
               [000356] -----+------                       |     \--*  CNS_INT   long   8 field offset Fseq[_myList]
               [000354] -----+------                       \--*  CNS_INT   long   16 field offset Fseq[Tail]

Morphing BB19 of 'FalseLeakRepro.Program:Run(System.String[]):this'

fgMorphTree BB19, STMT00069 (before)
               [000261] ------------              *  JTRUE     void  
               [000262] ------------              \--*  EQ        int   
               [000263] ------------                 +--*  LCL_VAR   int   (AX) V05 loc3         
               [000264] ------------                 \--*  CNS_INT   int    0

fgMorphTree BB19, STMT00069 (after)
               [000261] ----G+------              *  JTRUE     void  
               [000262] J---G+-N----              \--*  EQ        int   
               [000358] ----G+------                 +--*  CAST      int <- bool <- int
               [000263] ----G+------                 |  \--*  LCL_VAR   int   (AX) V05 loc3         
               [000264] -----+------                 \--*  CNS_INT   int    0

Morphing BB20 of 'FalseLeakRepro.Program:Run(System.String[]):this'

fgMorphTree BB20, STMT00070 (before)
               [000265] --CXG-------              *  CALL      void   System.Threading.Monitor.Exit
               [000266] ------------ arg0         \--*  LCL_VAR   ref    V04 loc2         
Initializing arg info for 265.CALL:
ArgTable for 265.CALL after fgInitArgInfo:
fgArgTabEntry[arg 0 266.LCL_VAR ref (By ref), 1 reg: rcx, byteAlignment=8]

Morphing args for 265.CALL:
argSlots=1, preallocatedArgCount=4, nextSlotNum=4, nextSlotByteOffset=32, outgoingArgSpaceSize=32

Sorting the arguments:
Deferred argument ('rcx'):
               [000266] -----+------              *  LCL_VAR   ref    V04 loc2         
Replaced with placeholder node:
               [000359] ----------L-              *  ARGPLACE  ref   

Shuffled argument table:    rcx 
ArgTable for 265.CALL after fgMorphArgs:
fgArgTabEntry[arg 0 266.LCL_VAR ref (By ref), 1 reg: rcx, byteAlignment=8, lateArgInx=0, processed]


fgMorphTree BB20, STMT00070 (after)
               [000265] --CXG+------              *  CALL      void   System.Threading.Monitor.Exit
               [000266] -----+------ arg0 in rcx  \--*  LCL_VAR   ref    V04 loc2         

Morphing BB22 of 'FalseLeakRepro.Program:Run(System.String[]):this'

Morphing BB23 of 'FalseLeakRepro.Program:Run(System.String[]):this'

Morphing BB24 of 'FalseLeakRepro.Program:Run(System.String[]):this'

fgMorphTree BB24, STMT00062 (before)
               [000226] ------------              *  JTRUE     void  
               [000225] ------------              \--*  EQ        int   
               [000223] ------------                 +--*  LCL_VAR   int   (AX) V05 loc3         
               [000224] ------------                 \--*  CNS_INT   int    0

fgMorphTree BB24, STMT00062 (after)
               [000226] ----G+------              *  JTRUE     void  
               [000225] J---G+-N----              \--*  EQ        int   
               [000360] ----G+------                 +--*  CAST      int <- bool <- int
               [000223] ----G+------                 |  \--*  LCL_VAR   int   (AX) V05 loc3         
               [000224] -----+------                 \--*  CNS_INT   int    0

Morphing BB25 of 'FalseLeakRepro.Program:Run(System.String[]):this'

fgMorphTree BB25, STMT00064 (before)
               [000229] --C-G-------              *  CALL      void   System.Threading.Monitor.Exit
               [000228] ------------ arg0         \--*  LCL_VAR   ref    V04 loc2         
Initializing arg info for 229.CALL:
ArgTable for 229.CALL after fgInitArgInfo:
fgArgTabEntry[arg 0 228.LCL_VAR ref (By ref), 1 reg: rcx, byteAlignment=8]

Morphing args for 229.CALL:
argSlots=1, preallocatedArgCount=4, nextSlotNum=4, nextSlotByteOffset=32, outgoingArgSpaceSize=32

Sorting the arguments:
Deferred argument ('rcx'):
               [000228] -----+------              *  LCL_VAR   ref    V04 loc2         
Replaced with placeholder node:
               [000361] ----------L-              *  ARGPLACE  ref   

Shuffled argument table:    rcx 
ArgTable for 229.CALL after fgMorphArgs:
fgArgTabEntry[arg 0 228.LCL_VAR ref (By ref), 1 reg: rcx, byteAlignment=8, lateArgInx=0, processed]


fgMorphTree BB25, STMT00064 (after)
               [000229] --CXG+------              *  CALL      void   System.Threading.Monitor.Exit
               [000228] -----+------ arg0 in rcx  \--*  LCL_VAR   ref    V04 loc2         

Morphing BB26 of 'FalseLeakRepro.Program:Run(System.String[]):this'

fgMorphTree BB26, STMT00063 (before)
               [000227] ------------              *  RETFILT   void  

Morphing BB27 of 'FalseLeakRepro.Program:Run(System.String[]):this'

fgMorphTree BB27, STMT00040 (before)
               [000160] --C-G-------              *  CALL      void   System.Threading.Thread.Sleep
               [000159] ------------ arg0         \--*  CNS_INT   int    100
Initializing arg info for 160.CALL:
ArgTable for 160.CALL after fgInitArgInfo:
fgArgTabEntry[arg 0 159.CNS_INT int (By ref), 1 reg: rcx, byteAlignment=8]

Morphing args for 160.CALL:
argSlots=1, preallocatedArgCount=4, nextSlotNum=4, nextSlotByteOffset=32, outgoingArgSpaceSize=32

Sorting the arguments:
Deferred argument ('rcx'):
               [000159] -----+------              *  CNS_INT   int    100
Replaced with placeholder node:
               [000362] ----------L-              *  ARGPLACE  int   

Shuffled argument table:    rcx 
ArgTable for 160.CALL after fgMorphArgs:
fgArgTabEntry[arg 0 159.CNS_INT int (By ref), 1 reg: rcx, byteAlignment=8, lateArgInx=0, processed]


fgMorphTree BB27, STMT00040 (after)
               [000160] --CXG+------              *  CALL      void   System.Threading.Thread.Sleep
               [000159] -----+------ arg0 in rcx  \--*  CNS_INT   int    100

Morphing BB28 of 'FalseLeakRepro.Program:Run(System.String[]):this'

fgMorphTree BB28, STMT00041 (before)
               [000164] -AC-G-------              *  ASG       struct (copy)
               [000162] D------N----              +--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  +--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
               [000161] --C-G-------              \--*  CALL      struct System.DateTime.get_Now
Initializing arg info for 161.CALL:
ArgTable for 161.CALL after fgInitArgInfo:

Morphing args for 161.CALL:
argSlots=0, preallocatedArgCount=4, nextSlotNum=4, nextSlotByteOffset=32, outgoingArgSpaceSize=32
ArgTable for 161.CALL after fgMorphArgs:

MorphCopyBlock:
MorphBlock for dst tree, before:
               [000162] D---G+-N----              *  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  *    long   V02._dateData (offs=0x00) -> V17 tmp10        
MorphBlock after:
               [000162] D---G+-N----              *  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  *    long   V02._dateData (offs=0x00) -> V17 tmp10        
PrepareDst for [000162] have found a local var V02.
MorphBlock for src tree, before:
               [000161] --CXG+------              *  CALL      struct System.DateTime.get_Now
MorphBlock after:
               [000161] --CXG+------              *  CALL      struct System.DateTime.get_Now
block assignment to morph:
               [000164] -ACXG-------              *  ASG       struct (copy)
               [000162] D---G+-N----              +--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  +--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
               [000161] --CXG+------              \--*  CALL      struct System.DateTime.get_Now
 (m_dstDoFldAsg=true) src is a call this requires a CopyBlock.

Local V02 should not be enregistered because: written in a block op
MorphCopyBlock (after):
               [000164] -ACXG-------              *  ASG       struct (copy)
               [000162] D---G+-N----              +--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  +--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
               [000161] --CXG+------              \--*  CALL      struct System.DateTime.get_Now

fgMorphTree BB28, STMT00042 (before)
               [000170] --C-G-------              *  CALL      void   System.Console.WriteLine
               [000169] --C-G------- arg0         \--*  CALL      ref    System.String.Concat
               [000167] --C-G------- arg0            +--*  CALL      ref    System.DateTime.ToString
               [000166] ------------ this in rcx     |  \--*  ADDR      byref 
               [000165] -------N----                 |     \--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                     |     \--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
               [000168] ------------ arg1            \--*  CNS_STR   ref   <string constant>
Initializing arg info for 170.CALL:
ArgTable for 170.CALL after fgInitArgInfo:
fgArgTabEntry[arg 0 169.CALL ref (By ref), 1 reg: rcx, byteAlignment=8]

Morphing args for 170.CALL:
Initializing arg info for 169.CALL:
ArgTable for 169.CALL after fgInitArgInfo:
fgArgTabEntry[arg 0 167.CALL ref (By ref), 1 reg: rcx, byteAlignment=8]
fgArgTabEntry[arg 1 168.CNS_STR ref (By ref), 1 reg: rdx, byteAlignment=8]

Morphing args for 169.CALL:
Initializing arg info for 167.CALL:
ArgTable for 167.CALL after fgInitArgInfo:
fgArgTabEntry[arg 0 166.ADDR byref (By ref), 1 reg: rcx, byteAlignment=8]

Morphing args for 167.CALL:
argSlots=1, preallocatedArgCount=4, nextSlotNum=4, nextSlotByteOffset=32, outgoingArgSpaceSize=32

Sorting the arguments:
Deferred argument ('rcx'):
               [000166] -----+------              *  ADDR      byref 
               [000165] ----G+-N----              \--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  \--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
Replaced with placeholder node:
               [000363] ----------L-              *  ARGPLACE  byref 

Shuffled argument table:    rcx 
ArgTable for 167.CALL after fgMorphArgs:
fgArgTabEntry[arg 0 166.ADDR byref (By ref), 1 reg: rcx, byteAlignment=8, lateArgInx=0, processed]

argSlots=2, preallocatedArgCount=4, nextSlotNum=4, nextSlotByteOffset=32, outgoingArgSpaceSize=32

Sorting the arguments:
Argument with 'side effect'...
               [000167] --CXG+------              *  CALL      ref    System.DateTime.ToString
               [000166] -----+------ this in rcx  \--*  ADDR      byref 
               [000165] ----G+-N----                 \--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                     \--*    long   V02._dateData (offs=0x00) -> V17 tmp10        

lvaGrabTemp returning 24 (V24 tmp17) called for argument with side effect.

  Evaluate to a temp:
               [000367] -ACXG-----L-              *  ASG       ref   
               [000366] D------N----              +--*  LCL_VAR   ref    V24 tmp17        
               [000167] --CXG+------              \--*  CALL      ref    System.DateTime.ToString
               [000166] -----+------ this in rcx     \--*  ADDR      byref 
               [000165] ----G+-N----                    \--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                        \--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
Deferred argument ('rdx'):
               [000365] #---G+------              *  IND       ref   
               [000364] H----+------              \--*  CNS_INT(h) long   0x75003208 "	 Done.  Profiler is active, available options:"
Replaced with placeholder node:
               [000369] ----------L-              *  ARGPLACE  ref   

Shuffled argument table:    rcx rdx 
ArgTable for 169.CALL after fgMorphArgs:
fgArgTabEntry[arg 0 368.LCL_VAR ref (By ref), 1 reg: rcx, byteAlignment=8, lateArgInx=0, tmpNum=V24, isTmp, processed]
fgArgTabEntry[arg 1 365.IND ref (By ref), 1 reg: rdx, byteAlignment=8, lateArgInx=1, processed]

argSlots=1, preallocatedArgCount=4, nextSlotNum=4, nextSlotByteOffset=32, outgoingArgSpaceSize=32

Sorting the arguments:
Deferred argument ('rcx'):
               [000169] --CXG+------              *  CALL      ref    System.String.Concat
               [000367] -ACXG-----L- arg0 SETUP   +--*  ASG       ref   
               [000366] D------N----              |  +--*  LCL_VAR   ref    V24 tmp17        
               [000167] --CXG+------              |  \--*  CALL      ref    System.DateTime.ToString
               [000166] -----+------ this in rcx  |     \--*  ADDR      byref 
               [000165] ----G+-N----              |        \--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  |        \--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
               [000368] ------------ arg0 in rcx  +--*  LCL_VAR   ref    V24 tmp17        
               [000365] #---G+------ arg1 in rdx  \--*  IND       ref   
               [000364] H----+------                 \--*  CNS_INT(h) long   0x75003208 "	 Done.  Profiler is active, available options:"
Replaced with placeholder node:
               [000370] ----------L-              *  ARGPLACE  ref   

Shuffled argument table:    rcx 
ArgTable for 170.CALL after fgMorphArgs:
fgArgTabEntry[arg 0 169.CALL ref (By ref), 1 reg: rcx, byteAlignment=8, lateArgInx=0, processed]


fgMorphTree BB28, STMT00042 (after)
               [000170] --CXG+------              *  CALL      void   System.Console.WriteLine
               [000169] --CXG+------ arg0 in rcx  \--*  CALL      ref    System.String.Concat
               [000367] -ACXG-----L- arg0 SETUP      +--*  ASG       ref   
               [000366] D------N----                 |  +--*  LCL_VAR   ref    V24 tmp17        
               [000167] --CXG+------                 |  \--*  CALL      ref    System.DateTime.ToString
               [000166] -----+------ this in rcx     |     \--*  ADDR      byref 
               [000165] ----G+-N----                 |        \--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                     |        \--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
               [000368] ------------ arg0 in rcx     +--*  LCL_VAR   ref    V24 tmp17        
               [000365] #---G+------ arg1 in rdx     \--*  IND       ref   
               [000364] H----+------                    \--*  CNS_INT(h) long   0x75003208 "	 Done.  Profiler is active, available options:"

fgMorphTree BB28, STMT00043 (before)
               [000172] --C-G-------              *  CALL      void   System.Console.WriteLine
               [000171] ------------ arg0         \--*  CNS_STR   ref   <string constant>
Initializing arg info for 172.CALL:
ArgTable for 172.CALL after fgInitArgInfo:
fgArgTabEntry[arg 0 171.CNS_STR ref (By ref), 1 reg: rcx, byteAlignment=8]

Morphing args for 172.CALL:
argSlots=1, preallocatedArgCount=4, nextSlotNum=4, nextSlotByteOffset=32, outgoingArgSpaceSize=32

Sorting the arguments:
Deferred argument ('rcx'):
               [000372] #---G+------              *  IND       ref   
               [000371] H----+------              \--*  CNS_INT(h) long   0x75003210 "   Q = quit"
Replaced with placeholder node:
               [000373] ----------L-              *  ARGPLACE  ref   

Shuffled argument table:    rcx 
ArgTable for 172.CALL after fgMorphArgs:
fgArgTabEntry[arg 0 372.IND ref (By ref), 1 reg: rcx, byteAlignment=8, lateArgInx=0, processed]


fgMorphTree BB28, STMT00043 (after)
               [000172] --CXG+------              *  CALL      void   System.Console.WriteLine
               [000372] #---G+------ arg0 in rcx  \--*  IND       ref   
               [000371] H----+------                 \--*  CNS_INT(h) long   0x75003210 "   Q = quit"

fgMorphTree BB28, STMT00044 (before)
               [000174] --C-G-------              *  CALL      void   System.Console.WriteLine
               [000173] ------------ arg0         \--*  CNS_STR   ref   <string constant>
Initializing arg info for 174.CALL:
ArgTable for 174.CALL after fgInitArgInfo:
fgArgTabEntry[arg 0 173.CNS_STR ref (By ref), 1 reg: rcx, byteAlignment=8]

Morphing args for 174.CALL:
argSlots=1, preallocatedArgCount=4, nextSlotNum=4, nextSlotByteOffset=32, outgoingArgSpaceSize=32

Sorting the arguments:
Deferred argument ('rcx'):
               [000375] #---G+------              *  IND       ref   
               [000374] H----+------              \--*  CNS_INT(h) long   0x75003218 "   H = heap snapshot"
Replaced with placeholder node:
               [000376] ----------L-              *  ARGPLACE  ref   

Shuffled argument table:    rcx 
ArgTable for 174.CALL after fgMorphArgs:
fgArgTabEntry[arg 0 375.IND ref (By ref), 1 reg: rcx, byteAlignment=8, lateArgInx=0, processed]


fgMorphTree BB28, STMT00044 (after)
               [000174] --CXG+------              *  CALL      void   System.Console.WriteLine
               [000375] #---G+------ arg0 in rcx  \--*  IND       ref   
               [000374] H----+------                 \--*  CNS_INT(h) long   0x75003218 "   H = heap snapshot"

fgMorphTree BB28, STMT00045 (before)
               [000176] --C-G-------              *  CALL      void   System.Console.WriteLine
               [000175] ------------ arg0         \--*  CNS_STR   ref   <string constant>
Initializing arg info for 176.CALL:
ArgTable for 176.CALL after fgInitArgInfo:
fgArgTabEntry[arg 0 175.CNS_STR ref (By ref), 1 reg: rcx, byteAlignment=8]

Morphing args for 176.CALL:
argSlots=1, preallocatedArgCount=4, nextSlotNum=4, nextSlotByteOffset=32, outgoingArgSpaceSize=32

Sorting the arguments:
Deferred argument ('rcx'):
               [000378] #---G+------              *  IND       ref   
               [000377] H----+------              \--*  CNS_INT(h) long   0x75003220 "   G = GC (max gen)"
Replaced with placeholder node:
               [000379] ----------L-              *  ARGPLACE  ref   

Shuffled argument table:    rcx 
ArgTable for 176.CALL after fgMorphArgs:
fgArgTabEntry[arg 0 378.IND ref (By ref), 1 reg: rcx, byteAlignment=8, lateArgInx=0, processed]


fgMorphTree BB28, STMT00045 (after)
               [000176] --CXG+------              *  CALL      void   System.Console.WriteLine
               [000378] #---G+------ arg0 in rcx  \--*  IND       ref   
               [000377] H----+------                 \--*  CNS_INT(h) long   0x75003220 "   G = GC (max gen)"

fgMorphTree BB28, STMT00046 (before)
               [000178] --C-G-------              *  CALL      void   System.Console.WriteLine
               [000177] ------------ arg0         \--*  CNS_STR   ref   <string constant>
Initializing arg info for 178.CALL:
ArgTable for 178.CALL after fgInitArgInfo:
fgArgTabEntry[arg 0 177.CNS_STR ref (By ref), 1 reg: rcx, byteAlignment=8]

Morphing args for 178.CALL:
argSlots=1, preallocatedArgCount=4, nextSlotNum=4, nextSlotByteOffset=32, outgoingArgSpaceSize=32

Sorting the arguments:
Deferred argument ('rcx'):
               [000381] #---G+------              *  IND       ref   
               [000380] H----+------              \--*  CNS_INT(h) long   0x75003228 "   R = clear the running flag to stop the consumer thread"
Replaced with placeholder node:
               [000382] ----------L-              *  ARGPLACE  ref   

Shuffled argument table:    rcx 
ArgTable for 178.CALL after fgMorphArgs:
fgArgTabEntry[arg 0 381.IND ref (By ref), 1 reg: rcx, byteAlignment=8, lateArgInx=0, processed]


fgMorphTree BB28, STMT00046 (after)
               [000178] --CXG+------              *  CALL      void   System.Console.WriteLine
               [000381] #---G+------ arg0 in rcx  \--*  IND       ref   
               [000380] H----+------                 \--*  CNS_INT(h) long   0x75003228 "   R = clear the running flag to stop the consumer thread"

Morphing BB29 of 'FalseLeakRepro.Program:Run(System.String[]):this'

fgMorphTree BB29, STMT00048 (before)
               [000233] S-C-G-------              *  CALL      void   System.ConsolePal.ReadKey
               [000235] ------------ arg0         +--*  ADDR      byref 
               [000236] -------N----              |  \--*  LCL_VAR   struct<System.ConsoleKeyInfo, 12>(AX)(P) V06 loc4         
                                                  |  \--*    ushort V06._keyChar (offs=0x00) -> V18 tmp11        
                                                  |  \--*    int    V06._key (offs=0x04) -> V19 tmp12        
                                                  |  \--*    int    V06._mods (offs=0x08) -> V20 tmp13        
               [000234] ------------ arg1         \--*  PUTARG_TYPE bool  
               [000232] ------------                 \--*  CNS_INT   int    0
Initializing arg info for 233.CALL:
ArgTable for 233.CALL after fgInitArgInfo:
fgArgTabEntry[arg 0 235.ADDR long (By ref), 1 reg: rcx, byteAlignment=8]
fgArgTabEntry[arg 1 234.PUTARG_TYPE int (By ref), 1 reg: rdx, byteAlignment=8]

Morphing args for 233.CALL:
argSlots=2, preallocatedArgCount=4, nextSlotNum=4, nextSlotByteOffset=32, outgoingArgSpaceSize=32

Sorting the arguments:
Deferred argument ('rcx'):
               [000235] -----+------              *  ADDR      long  
               [000236] ----G+-N----              \--*  LCL_VAR   struct<System.ConsoleKeyInfo, 12>(AX)(P) V06 loc4         
                                                  \--*    ushort V06._keyChar (offs=0x00) -> V18 tmp11        
                                                  \--*    int    V06._key (offs=0x04) -> V19 tmp12        
                                                  \--*    int    V06._mods (offs=0x08) -> V20 tmp13        
Replaced with placeholder node:
               [000383] ----------L-              *  ARGPLACE  long  
Deferred argument ('rdx'):
               [000232] -----+------              *  CNS_INT   int    0
Replaced with placeholder node:
               [000384] ----------L-              *  ARGPLACE  int   

Shuffled argument table:    rcx rdx 
ArgTable for 233.CALL after fgMorphArgs:
fgArgTabEntry[arg 0 235.ADDR long (By ref), 1 reg: rcx, byteAlignment=8, lateArgInx=0, processed]
fgArgTabEntry[arg 1 232.CNS_INT int (By ref), 1 reg: rdx, byteAlignment=8, lateArgInx=1, processed]


fgMorphTree BB29, STMT00048 (after)
               [000233] S-CXG+------              *  CALL      void   System.ConsolePal.ReadKey
               [000235] -----+------ arg0 in rcx  +--*  ADDR      long  
               [000236] ----G+-N----              |  \--*  LCL_VAR   struct<System.ConsoleKeyInfo, 12>(AX)(P) V06 loc4         
                                                  |  \--*    ushort V06._keyChar (offs=0x00) -> V18 tmp11        
                                                  |  \--*    int    V06._key (offs=0x04) -> V19 tmp12        
                                                  |  \--*    int    V06._mods (offs=0x08) -> V20 tmp13        
               [000232] -----+------ arg1 in rdx  \--*  CNS_INT   int    0

fgMorphTree BB29, STMT00050 (before)
               [000189] --C---------              *  JTRUE     void  
               [000188] N-C------U--              \--*  NE        int   
               [000240] ------------                 +--*  LCL_VAR   int   (AX) V19 tmp12        
               [000187] ------------                 \--*  CNS_INT   int    71

Morphing BB30 of 'FalseLeakRepro.Program:Run(System.String[]):this'

fgMorphTree BB30, STMT00061 (before)
               [000222] --C-G-------              *  CALL      void   System.GC.Collect
               [000221] --C-G------- arg0         \--*  CALL      int    System.GC.get_MaxGeneration
Initializing arg info for 222.CALL:
ArgTable for 222.CALL after fgInitArgInfo:
fgArgTabEntry[arg 0 221.CALL int (By ref), 1 reg: rcx, byteAlignment=8]

Morphing args for 222.CALL:
Initializing arg info for 221.CALL:
ArgTable for 221.CALL after fgInitArgInfo:

Morphing args for 221.CALL:
argSlots=0, preallocatedArgCount=4, nextSlotNum=4, nextSlotByteOffset=32, outgoingArgSpaceSize=32
ArgTable for 221.CALL after fgMorphArgs:

argSlots=1, preallocatedArgCount=4, nextSlotNum=4, nextSlotByteOffset=32, outgoingArgSpaceSize=32

Sorting the arguments:
Deferred argument ('rcx'):
               [000221] --CXG+------              *  CALL      int    System.GC.get_MaxGeneration
Replaced with placeholder node:
               [000385] ----------L-              *  ARGPLACE  int   

Shuffled argument table:    rcx 
ArgTable for 222.CALL after fgMorphArgs:
fgArgTabEntry[arg 0 221.CALL int (By ref), 1 reg: rcx, byteAlignment=8, lateArgInx=0, processed]


fgMorphTree BB30, STMT00061 (after)
               [000222] --CXG+------              *  CALL      void   System.GC.Collect
               [000221] --CXG+------ arg0 in rcx  \--*  CALL      int    System.GC.get_MaxGeneration

Morphing BB31 of 'FalseLeakRepro.Program:Run(System.String[]):this'

fgMorphTree BB31, STMT00052 (before)
               [000196] --C---------              *  JTRUE     void  
               [000195] N-C------U--              \--*  NE        int   
               [000244] ------------                 +--*  LCL_VAR   int   (AX) V19 tmp12        
               [000194] ------------                 \--*  CNS_INT   int    72

Morphing BB32 of 'FalseLeakRepro.Program:Run(System.String[]):this'

fgMorphTree BB32, STMT00060 (before)
               [000220] --C-G-------              *  CALL      void   System.Diagnostics.Debugger.Break
Initializing arg info for 220.CALL:
ArgTable for 220.CALL after fgInitArgInfo:

Morphing args for 220.CALL:
argSlots=0, preallocatedArgCount=4, nextSlotNum=4, nextSlotByteOffset=32, outgoingArgSpaceSize=32
ArgTable for 220.CALL after fgMorphArgs:


Morphing BB33 of 'FalseLeakRepro.Program:Run(System.String[]):this'

fgMorphTree BB33, STMT00054 (before)
               [000203] --C---------              *  JTRUE     void  
               [000202] N-C------U--              \--*  NE        int   
               [000248] ------------                 +--*  LCL_VAR   int   (AX) V19 tmp12        
               [000201] ------------                 \--*  CNS_INT   int    82

Morphing BB34 of 'FalseLeakRepro.Program:Run(System.String[]):this'

fgMorphTree BB34, STMT00059 (before)
               [000219] -A-XG-------              *  ASG       bool  
               [000218] ---XG--N----              +--*  FIELD     bool   _running
               [000216] ------------              |  \--*  LCL_VAR   ref    V00 this         
               [000217] ------------              \--*  CNS_INT   int    0

Final value of Compiler::fgMorphField after calling fgMorphSmpOp:
               [000218] ---XG--N----              *  IND       bool  
               [000387] -----+------              \--*  ADD       byref 
               [000216] -----+------                 +--*  LCL_VAR   ref    V00 this         
               [000386] -----+------                 \--*  CNS_INT   long   16 field offset Fseq[_running]
GenTreeNode creates assertion:
               [000218] ---XG--N----              *  IND       bool  
In BB34 New Local Constant Assertion: V00 != null, index = #01

fgMorphTree BB34, STMT00059 (after)
               [000219] -A-XG+------              *  ASG       bool  
               [000218] ---XG+-N----              +--*  IND       bool  
               [000387] -----+------              |  \--*  ADD       byref 
               [000216] -----+------              |     +--*  LCL_VAR   ref    V00 this         
               [000386] -----+------              |     \--*  CNS_INT   long   16 field offset Fseq[_running]
               [000217] -----+------              \--*  CNS_INT   int    0

Morphing BB35 of 'FalseLeakRepro.Program:Run(System.String[]):this'

fgMorphTree BB35, STMT00056 (before)
               [000210] --C---------              *  JTRUE     void  
               [000209] N-C------U--              \--*  NE        int   
               [000252] ------------                 +--*  LCL_VAR   int   (AX) V19 tmp12        
               [000208] ------------                 \--*  CNS_INT   int    81

Morphing BB36 of 'FalseLeakRepro.Program:Run(System.String[]):this'

fgMorphTree BB36, STMT00057 (before)
               [000214] -A-XG-------              *  ASG       bool  
               [000213] ---XG--N----              +--*  FIELD     bool   _running
               [000211] ------------              |  \--*  LCL_VAR   ref    V00 this         
               [000212] ------------              \--*  CNS_INT   int    0

Final value of Compiler::fgMorphField after calling fgMorphSmpOp:
               [000213] ---XG--N----              *  IND       bool  
               [000389] -----+------              \--*  ADD       byref 
               [000211] -----+------                 +--*  LCL_VAR   ref    V00 this         
               [000388] -----+------                 \--*  CNS_INT   long   16 field offset Fseq[_running]
GenTreeNode creates assertion:
               [000213] ---XG--N----              *  IND       bool  
In BB36 New Local Constant Assertion: V00 != null, index = #01

fgMorphTree BB36, STMT00057 (after)
               [000214] -A-XG+------              *  ASG       bool  
               [000213] ---XG+-N----              +--*  IND       bool  
               [000389] -----+------              |  \--*  ADD       byref 
               [000211] -----+------              |     +--*  LCL_VAR   ref    V00 this         
               [000388] -----+------              |     \--*  CNS_INT   long   16 field offset Fseq[_running]
               [000212] -----+------              \--*  CNS_INT   int    0

fgMorphTree BB36, STMT00058 (before)
               [000215] ------------              *  RETURN    void  
Method has EH, marking method as fully interruptible

*************** Finishing PHASE Morph - Global
Trees after Morph - Global

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..072)-> BB12 (always)                     i hascall gcsafe newobj 
BB02 [0001]  1       BB12                  1       [072..07B)                                     i bwd bwd-target 
BB03 [0002]  1  0    BB02                  1       [07B..0CA)                 T0      try { }     keep i try hascall gcsafe newobj bwd 
BB05 [0038]  1       BB03                  1       [0CA..0CD)-> BB11 ( cond )                     keep i bwd cfb 
BB06 [0039]  1       BB05                  1       [0CD..0D4)-> BB11 (always)                     i hascall bwd 
BB08 [0003]  1     0                       1       [0CA..0CD)-> BB10 ( cond )    H0   fault {     keep i bwd 
BB09 [0004]  1     0 BB08                  1       [0CD..0D3)                    H0               i hascall bwd 
BB10 [0005]  2     0 BB08,BB09             1       [0D3..0D4)        (finret)    H0   }           i bwd 
BB11 [0006]  2       BB05,BB06             1       [0D4..0D8)                                     i bwd 
BB12 [0007]  2       BB01,BB11             1       [0D8..0DD)-> BB02 ( cond )                     i bwd 
BB13 [0008]  1       BB12                  1       [0DD..0F9)                                     i hascall gcsafe 
BB14 [0009]  2       BB13,BB27             1       [0F9..102)                                     i bwd bwd-target 
BB15 [0010]  1  1    BB14                  1       [102..122)-> BB22 ( cond ) T1      try { }     keep i try hascall gcsafe bwd 
BB19 [0041]  1       BB15                  1       [126..129)-> BB27 ( cond )                     keep i bwd cfb 
BB20 [0042]  1       BB19                  1       [129..130)-> BB27 (always)                     i hascall bwd 
BB22 [0030]  1       BB15                  1       [???..???)-> BB24 (callf )                     i internal 
BB23 [0031]  1       BB26                  1       [???..???)-> BB28 (ALWAYS)                     i internal KEEP 
BB24 [0013]  2     1 BB22                  1       [126..129)-> BB26 ( cond )    H1   finally {   keep i bwd 
BB25 [0014]  1     1 BB24                  1       [129..12F)                    H1               i hascall bwd 
BB26 [0015]  2     1 BB24,BB25             1       [12F..130)        (finret)    H1   }           i bwd 
BB27 [0016]  2       BB19,BB20             1       [130..139)-> BB14 (always)                     i hascall gcsafe bwd 
BB28 [0017]  1       BB23                  1       [139..17D)                                     i hascall gcsafe 
BB29 [0018]  5       BB28,BB30,BB32,BB34,BB35   1       [17D..18F)-> BB31 ( cond )                     i hascall gcsafe bwd bwd-target 
BB30 [0019]  1       BB29                  1       [18F..19B)-> BB29 (always)                     i hascall gcsafe bwd 
BB31 [0020]  1       BB29                  1       [19B..1A6)-> BB33 ( cond )                     i bwd 
BB32 [0021]  1       BB31                  1       [1A6..1AD)-> BB29 (always)                     i hascall gcsafe bwd 
BB33 [0022]  1       BB31                  1       [1AD..1B8)-> BB35 ( cond )                     i bwd 
BB34 [0023]  1       BB33                  1       [1B8..1C1)-> BB29 (always)                     i bwd 
BB35 [0024]  1       BB33                  1       [1C1..1CC)-> BB29 ( cond )                     i bwd 
BB36 [0025]  1       BB35                  1       [1CC..1D4)        (return)                     i 
-----------------------------------------------------------------------------------------------------------------------------------------

------------ BB01 [000..072) -> BB12 (always), preds={} succs={BB12}

***** BB01
STMT00000 (IL 0x000...0x005)
               [000003] -ACXG+------              *  ASG       struct (copy)
               [000001] D---G+-N----              +--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  +--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
               [000000] --CXG+------              \--*  CALL      struct System.DateTime.get_Now

***** BB01
STMT00001 (IL 0x006...0x022)
               [000009] --CXG+------              *  CALL      void   System.Console.WriteLine
               [000008] --CXG+------ arg0 in rcx  \--*  CALL      ref    System.String.Concat
               [000272] -ACXG-----L- arg0 SETUP      +--*  ASG       ref   
               [000271] D------N----                 |  +--*  LCL_VAR   ref    V21 tmp14        
               [000006] --CXG+------                 |  \--*  CALL      ref    System.DateTime.ToString
               [000005] -----+------ this in rcx     |     \--*  ADDR      byref 
               [000004] ----G+-N----                 |        \--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                     |        \--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
               [000273] ------------ arg0 in rcx     +--*  LCL_VAR   ref    V21 tmp14        
               [000270] #---G+------ arg1 in rdx     \--*  IND       ref   
               [000269] H----+------                    \--*  CNS_INT(h) long   0x750031F0 "	 Created list"

***** BB01
STMT00002 (IL 0x01C...  ???)
               [000014] -AC--+------              *  ASG       ref   
               [000013] D----+-N----              +--*  LCL_VAR   ref    V08 tmp1         
               [000012] --C--+------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
               [000011] H----+------ arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb3ee2350 method

***** BB01
STMT00003 (IL   ???...  ???)
               [000016] --CXG+------              *  CALL      void   FalseLeakRepro.List..ctor
               [000015] -----+------ this in rcx  \--*  LCL_VAR   ref    V08 tmp1         

***** BB01
STMT00004 (IL 0x022...  ???)
               [000019] -A-XG+------              *  ASG       ref   
               [000018] ---XG+-N----              +--*  IND       ref   
               [000279] -----+------              |  \--*  ADD       byref 
               [000010] -----+------              |     +--*  LCL_VAR   ref    V00 this         
               [000278] -----+------              |     \--*  CNS_INT   long   8 field offset Fseq[_myList]
               [000017] -----+------              \--*  LCL_VAR   ref    V08 tmp1         

***** BB01
STMT00005 (IL 0x027...0x037)
               [000026] -AC--+------              *  ASG       ref   
               [000025] D----+-N----              +--*  LCL_VAR   ref    V09 tmp2         
               [000024] --C--+------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
               [000023] H----+------ arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb3b058b8 token

***** BB01
STMT00007 (IL   ???...  ???)
               [000030] -A-XG+------              *  ASG       ref   
               [000029] D----+-N----              +--*  LCL_VAR   ref    V10 tmp3         
               [000022] ---XG+------              \--*  IND       ref   
               [000282] ---XG+------                 \--*  ADD       byref 
               [000021] ---XG+------                    +--*  IND       ref   
               [000284] -----+------                    |  \--*  ADD       byref 
               [000020] -----+------                    |     +--*  LCL_VAR   ref    V00 this         
               [000283] -----+------                    |     \--*  CNS_INT   long   8 field offset Fseq[_myList]
               [000281] -----+------                    \--*  CNS_INT   long   8 field offset Fseq[Head]

***** BB01
STMT00006 (IL   ???...  ???)
               [000028] --CXG+------              *  CALL      void   System.Object..ctor
               [000027] -----+------ this in rcx  \--*  LCL_VAR   ref    V09 tmp2         

***** BB01
STMT00008 (IL 0x037...  ???)
               [000034] -A-XG+------              *  ASG       ref   
               [000033] ---XG+-N----              +--*  IND       ref   
               [000287] -----+------              |  \--*  ADD       byref 
               [000031] -----+------              |     +--*  LCL_VAR   ref    V10 tmp3         
               [000286] -----+------              |     \--*  CNS_INT   long   16 field offset Fseq[Data]
               [000032] -----+------              \--*  LCL_VAR   ref    V09 tmp2         

***** BB01
STMT00009 (IL 0x03C...0x057)
               [000040] -AC--+------              *  ASG       ref   
               [000039] D----+-N----              +--*  LCL_VAR   ref    V11 tmp4         
               [000038] --C--+------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
               [000037] H----+------ arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb3ee6200 token

***** BB01
STMT00010 (IL   ???...  ???)
               [000042] --CXG+------              *  CALL      void   System.MulticastDelegate.CtorClosed
               [000041] -----+------ this in rcx  +--*  LCL_VAR   ref    V11 tmp4         
               [000035] -----+------ arg1 in rdx  +--*  LCL_VAR   ref    V00 this         
               [000036] H----+------ arg2 in r8   \--*  CNS_INT(h) long   0x7ffdb3b213f8 ftn

***** BB01
STMT00011 (IL 0x048...  ???)
               [000047] -AC--+------              *  ASG       ref   
               [000046] D----+-N----              +--*  LCL_VAR   ref    V12 tmp5         
               [000045] --C--+------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWFAST
               [000044] H----+------ arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb3c84e80 token

***** BB01
STMT00012 (IL   ???...  ???)
               [000049] --CXG+------              *  CALL      void   System.Threading.Thread..ctor
               [000048] -----+------ this in rcx  +--*  LCL_VAR   ref    V12 tmp5         
               [000043] -----+------ arg1 in rdx  \--*  LCL_VAR   ref    V11 tmp4         

***** BB01
STMT00013 (IL 0x04D...  ???)
               [000051] --CXG+------              *  CALL nullcheck void   System.Threading.Thread.Start
               [000050] -----+------ this in rcx  \--*  LCL_VAR   ref    V12 tmp5         

***** BB01
STMT00014 (IL 0x052...  ???)
               [000055] -ACXG+------              *  ASG       struct (copy)
               [000053] D---G+-N----              +--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  +--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
               [000052] --CXG+------              \--*  CALL      struct System.DateTime.get_Now

***** BB01
STMT00015 (IL 0x058...0x06F)
               [000061] --CXG+------              *  CALL      void   System.Console.WriteLine
               [000060] --CXG+------ arg0 in rcx  \--*  CALL      ref    System.String.Concat
               [000300] -ACXG-----L- arg0 SETUP      +--*  ASG       ref   
               [000299] D------N----                 |  +--*  LCL_VAR   ref    V22 tmp15        
               [000058] --CXG+------                 |  \--*  CALL      ref    System.DateTime.ToString
               [000057] -----+------ this in rcx     |     \--*  ADDR      byref 
               [000056] ----G+-N----                 |        \--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                     |        \--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
               [000301] ------------ arg0 in rcx     +--*  LCL_VAR   ref    V22 tmp15        
               [000298] #---G+------ arg1 in rdx     \--*  IND       ref   
               [000297] H----+------                    \--*  CNS_INT(h) long   0x750031F8 "	 Consumer thread started, adding items..."

***** BB01
STMT00016 (IL 0x06E...  ???)
               [000064] -A---+------              *  ASG       int   
               [000063] D----+-N----              +--*  LCL_VAR   int    V03 loc1         
               [000062] -----+------              \--*  CNS_INT   int    0

------------ BB02 [072..07B), preds={BB12} succs={BB03}

***** BB02
STMT00018 (IL 0x072...0x078)
               [000072] -A-XG+------              *  ASG       ref   
               [000071] D----+-N----              +--*  LCL_VAR   ref    V04 loc2         
               [000070] ---XG+------              \--*  IND       ref   
               [000305] -----+------                 \--*  ADD       byref 
               [000069] -----+------                    +--*  LCL_VAR   ref    V00 this         
               [000304] -----+------                    \--*  CNS_INT   long   8 field offset Fseq[_myList]

***** BB02
STMT00019 (IL 0x079...0x07A)
               [000075] -A--G+------              *  ASG       int   
               [000074] D---G+-N----              +--*  LCL_VAR   int   (AX) V05 loc3         
               [000073] -----+------              \--*  CNS_INT   int    0

------------ BB03 [07B..0CA), preds={BB02} succs={BB05}

***** BB03
STMT00020 (IL 0x07B...0x093)
               [000079] --CXG+------              *  CALL      void   System.Threading.Monitor.Enter
               [000078] -----+------ arg1 in rdx  +--*  LCL_VAR_ADDR long   V05 loc3         
               [000076] -----+------ arg0 in rcx  \--*  LCL_VAR   ref    V04 loc2         

***** BB03
STMT00021 (IL 0x083...  ???)
               [000086] -AC--+------              *  ASG       ref   
               [000085] D----+-N----              +--*  LCL_VAR   ref    V13 tmp6         
               [000084] --C--+------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
               [000083] H----+------ arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb3ee58a8 method

***** BB03
STMT00023 (IL   ???...  ???)
               [000090] -A-XG+------              *  ASG       ref   
               [000089] D----+-N----              +--*  LCL_VAR   ref    V14 tmp7         
               [000082] ---XG+------              \--*  IND       ref   
               [000310] ---XG+------                 \--*  ADD       byref 
               [000081] ---XG+------                    +--*  IND       ref   
               [000312] -----+------                    |  \--*  ADD       byref 
               [000080] -----+------                    |     +--*  LCL_VAR   ref    V00 this         
               [000311] -----+------                    |     \--*  CNS_INT   long   8 field offset Fseq[_myList]
               [000309] -----+------                    \--*  CNS_INT   long   8 field offset Fseq[Head]

***** BB03
STMT00065 (IL   ???...  ???)
               [000230] --CXG+------              *  CALL      void   System.Object..ctor
               [000087] -----+------ this in rcx  \--*  LCL_VAR   ref    V13 tmp6         

***** BB03
STMT00024 (IL 0x093...  ???)
               [000094] -A-XG+------              *  ASG       ref   
               [000093] ---XG+-N----              +--*  IND       ref   
               [000315] -----+------              |  \--*  ADD       byref 
               [000091] -----+------              |     +--*  LCL_VAR   ref    V14 tmp7         
               [000314] -----+------              |     \--*  CNS_INT   long   8 field offset Fseq[Next]
               [000092] -----+------              \--*  LCL_VAR   ref    V13 tmp6         

***** BB03
STMT00025 (IL 0x098...0x0AE)
               [000102] -A-XG+------              *  ASG       ref   
               [000101] ---XG+-N----              +--*  IND       ref   
               [000317] ---XG+------              |  \--*  ADD       byref 
               [000096] ---XG+------              |     +--*  IND       ref   
               [000319] -----+------              |     |  \--*  ADD       byref 
               [000095] -----+------              |     |     +--*  LCL_VAR   ref    V00 this         
               [000318] -----+------              |     |     \--*  CNS_INT   long   8 field offset Fseq[_myList]
               [000316] -----+------              |     \--*  CNS_INT   long   8 field offset Fseq[Head]
               [000100] ---XG+------              \--*  IND       ref   
               [000321] ---XG+------                 \--*  ADD       byref 
               [000099] ---XG+------                    +--*  IND       ref   
               [000323] ---XG+------                    |  \--*  ADD       byref 
               [000098] ---XG+------                    |     +--*  IND       ref   
               [000325] -----+------                    |     |  \--*  ADD       byref 
               [000097] -----+------                    |     |     +--*  LCL_VAR   ref    V00 this         
               [000324] -----+------                    |     |     \--*  CNS_INT   long   8 field offset Fseq[_myList]
               [000322] -----+------                    |     \--*  CNS_INT   long   8 field offset Fseq[Head]
               [000320] -----+------                    \--*  CNS_INT   long   8 field offset Fseq[Next]

***** BB03
STMT00026 (IL 0x0B3...0x0C3)
               [000109] -AC--+------              *  ASG       ref   
               [000108] D----+-N----              +--*  LCL_VAR   ref    V15 tmp8         
               [000107] --C--+------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
               [000106] H----+------ arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb3b058b8 token

***** BB03
STMT00028 (IL   ???...  ???)
               [000113] -A-XG+------              *  ASG       ref   
               [000112] D----+-N----              +--*  LCL_VAR   ref    V16 tmp9         
               [000105] ---XG+------              \--*  IND       ref   
               [000328] ---XG+------                 \--*  ADD       byref 
               [000104] ---XG+------                    +--*  IND       ref   
               [000330] -----+------                    |  \--*  ADD       byref 
               [000103] -----+------                    |     +--*  LCL_VAR   ref    V00 this         
               [000329] -----+------                    |     \--*  CNS_INT   long   8 field offset Fseq[_myList]
               [000327] -----+------                    \--*  CNS_INT   long   8 field offset Fseq[Head]

***** BB03
STMT00027 (IL   ???...  ???)
               [000111] --CXG+------              *  CALL      void   System.Object..ctor
               [000110] -----+------ this in rcx  \--*  LCL_VAR   ref    V15 tmp8         

***** BB03
STMT00029 (IL 0x0C3...  ???)
               [000117] -A-XG+------              *  ASG       ref   
               [000116] ---XG+-N----              +--*  IND       ref   
               [000333] -----+------              |  \--*  ADD       byref 
               [000114] -----+------              |     +--*  LCL_VAR   ref    V16 tmp9         
               [000332] -----+------              |     \--*  CNS_INT   long   16 field offset Fseq[Data]
               [000115] -----+------              \--*  LCL_VAR   ref    V15 tmp8         

------------ BB05 [0CA..0CD) -> BB11 (cond), preds={BB03} succs={BB06,BB11}

***** BB05
STMT00066 (IL   ???...  ???)
               [000254] ----G+------              *  JTRUE     void  
               [000255] J---G+-N----              \--*  EQ        int   
               [000334] ----G+------                 +--*  CAST      int <- bool <- int
               [000256] ----G+------                 |  \--*  LCL_VAR   int   (AX) V05 loc3         
               [000257] -----+------                 \--*  CNS_INT   int    0

------------ BB06 [0CD..0D4) -> BB11 (always), preds={BB05} succs={BB11}

***** BB06
STMT00067 (IL   ???...  ???)
               [000258] --CXG+------              *  CALL      void   System.Threading.Monitor.Exit
               [000259] -----+------ arg0 in rcx  \--*  LCL_VAR   ref    V04 loc2         

------------ BB08 [0CA..0CD) -> BB10 (cond), preds={} succs={BB09,BB10}

***** BB08
STMT00031 (IL 0x0CA...0x0CB)
               [000126] ----G+------              *  JTRUE     void  
               [000125] J---G+-N----              \--*  EQ        int   
               [000336] ----G+------                 +--*  CAST      int <- bool <- int
               [000123] ----G+------                 |  \--*  LCL_VAR   int   (AX) V05 loc3         
               [000124] -----+------                 \--*  CNS_INT   int    0

------------ BB09 [0CD..0D3), preds={BB08} succs={BB10}

***** BB09
STMT00033 (IL 0x0CD...0x0CE)
               [000129] --CXG+------              *  CALL      void   System.Threading.Monitor.Exit
               [000128] -----+------ arg0 in rcx  \--*  LCL_VAR   ref    V04 loc2         

------------ BB10 [0D3..0D4) (finret), preds={BB08,BB09} succs={}

***** BB10
STMT00032 (IL 0x0D3...0x0D3)
               [000127] -----+------              *  RETFILT   void  

------------ BB11 [0D4..0D8), preds={BB05,BB06} succs={BB12}

***** BB11
STMT00030 (IL 0x0D4...0x0D7)
               [000122] -A---+------              *  ASG       int   
               [000121] D----+-N----              +--*  LCL_VAR   int    V03 loc1         
               [000120] -----+------              \--*  ADD       int   
               [000118] -----+------                 +--*  LCL_VAR   int    V03 loc1         
               [000119] -----+------                 \--*  CNS_INT   int    1

------------ BB12 [0D8..0DD) -> BB02 (cond), preds={BB01,BB11} succs={BB13,BB02}

***** BB12
STMT00017 (IL 0x0D8...0x0DB)
               [000068] -----+------              *  JTRUE     void  
               [000067] J----+-N----              \--*  LT        int   
               [000065] -----+------                 +--*  LCL_VAR   int    V03 loc1         
               [000066] -----+------                 \--*  CNS_INT   int    10

------------ BB13 [0DD..0F9), preds={BB12} succs={BB14}

***** BB13
STMT00034 (IL 0x0DD...0x0E2)
               [000133] -ACXG+------              *  ASG       struct (copy)
               [000131] D---G+-N----              +--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  +--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
               [000130] --CXG+------              \--*  CALL      struct System.DateTime.get_Now

***** BB13
STMT00035 (IL 0x0E3...0x0F4)
               [000139] --CXG+------              *  CALL      void   System.Console.WriteLine
               [000138] --CXG+------ arg0 in rcx  \--*  CALL      ref    System.String.Concat
               [000342] -ACXG-----L- arg0 SETUP      +--*  ASG       ref   
               [000341] D------N----                 |  +--*  LCL_VAR   ref    V23 tmp16        
               [000136] --CXG+------                 |  \--*  CALL      ref    System.DateTime.ToString
               [000135] -----+------ this in rcx     |     \--*  ADDR      byref 
               [000134] ----G+-N----                 |        \--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                     |        \--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
               [000343] ------------ arg0 in rcx     +--*  LCL_VAR   ref    V23 tmp16        
               [000340] #---G+------ arg1 in rdx     \--*  IND       ref   
               [000339] H----+------                    \--*  CNS_INT(h) long   0x75003200 "	 Waiting for list processing to complete..."

------------ BB14 [0F9..102), preds={BB13,BB27} succs={BB15}

***** BB14
STMT00036 (IL 0x0F9...0x0FF)
               [000143] -A-XG+------              *  ASG       ref   
               [000142] D----+-N----              +--*  LCL_VAR   ref    V04 loc2         
               [000141] ---XG+------              \--*  IND       ref   
               [000347] -----+------                 \--*  ADD       byref 
               [000140] -----+------                    +--*  LCL_VAR   ref    V00 this         
               [000346] -----+------                    \--*  CNS_INT   long   8 field offset Fseq[_myList]

***** BB14
STMT00037 (IL 0x100...0x101)
               [000146] -A--G+------              *  ASG       int   
               [000145] D---G+-N----              +--*  LCL_VAR   int   (AX) V05 loc3         
               [000144] -----+------              \--*  CNS_INT   int    0

------------ BB15 [102..122) -> BB22 (cond), preds={BB14} succs={BB19,BB22}

***** BB15
STMT00038 (IL 0x102...0x120)
               [000150] --CXG+------              *  CALL      void   System.Threading.Monitor.Enter
               [000149] -----+------ arg1 in rdx  +--*  LCL_VAR_ADDR long   V05 loc3         
               [000147] -----+------ arg0 in rcx  \--*  LCL_VAR   ref    V04 loc2         

***** BB15
STMT00039 (IL 0x10A...  ???)
               [000158] ---XG+------              *  JTRUE     void  
               [000157] N--XG+-N-U--              \--*  EQ        int   
               [000153] ---XG+------                 +--*  IND       ref   
               [000351] ---XG+------                 |  \--*  ADD       byref 
               [000152] ---XG+------                 |     +--*  IND       ref   
               [000353] -----+------                 |     |  \--*  ADD       byref 
               [000151] -----+------                 |     |     +--*  LCL_VAR   ref    V00 this         
               [000352] -----+------                 |     |     \--*  CNS_INT   long   8 field offset Fseq[_myList]
               [000350] -----+------                 |     \--*  CNS_INT   long   8 field offset Fseq[Head]
               [000156] ---XG+------                 \--*  IND       ref   
               [000355] ---XG+------                    \--*  ADD       byref 
               [000155] ---XG+------                       +--*  IND       ref   
               [000357] -----+------                       |  \--*  ADD       byref 
               [000154] -----+------                       |     +--*  LCL_VAR   ref    V00 this         
               [000356] -----+------                       |     \--*  CNS_INT   long   8 field offset Fseq[_myList]
               [000354] -----+------                       \--*  CNS_INT   long   16 field offset Fseq[Tail]

------------ BB19 [126..129) -> BB27 (cond), preds={BB15} succs={BB20,BB27}

***** BB19
STMT00069 (IL   ???...  ???)
               [000261] ----G+------              *  JTRUE     void  
               [000262] J---G+-N----              \--*  EQ        int   
               [000358] ----G+------                 +--*  CAST      int <- bool <- int
               [000263] ----G+------                 |  \--*  LCL_VAR   int   (AX) V05 loc3         
               [000264] -----+------                 \--*  CNS_INT   int    0

------------ BB20 [129..130) -> BB27 (always), preds={BB19} succs={BB27}

***** BB20
STMT00070 (IL   ???...  ???)
               [000265] --CXG+------              *  CALL      void   System.Threading.Monitor.Exit
               [000266] -----+------ arg0 in rcx  \--*  LCL_VAR   ref    V04 loc2         

------------ BB22 [???..???) -> BB24 (callf), preds={BB15} succs={BB24}

------------ BB23 [???..???) -> BB28 (ALWAYS), preds={BB26} succs={BB28}

------------ BB24 [126..129) -> BB26 (cond), preds={BB22} succs={BB25,BB26}

***** BB24
STMT00062 (IL 0x126...0x127)
               [000226] ----G+------              *  JTRUE     void  
               [000225] J---G+-N----              \--*  EQ        int   
               [000360] ----G+------                 +--*  CAST      int <- bool <- int
               [000223] ----G+------                 |  \--*  LCL_VAR   int   (AX) V05 loc3         
               [000224] -----+------                 \--*  CNS_INT   int    0

------------ BB25 [129..12F), preds={BB24} succs={BB26}

***** BB25
STMT00064 (IL 0x129...0x12A)
               [000229] --CXG+------              *  CALL      void   System.Threading.Monitor.Exit
               [000228] -----+------ arg0 in rcx  \--*  LCL_VAR   ref    V04 loc2         

------------ BB26 [12F..130) (finret), preds={BB24,BB25} succs={BB23}

***** BB26
STMT00063 (IL 0x12F...0x12F)
               [000227] -----+------              *  RETFILT   void  

------------ BB27 [130..139) -> BB14 (always), preds={BB19,BB20} succs={BB14}

***** BB27
STMT00040 (IL 0x130...0x137)
               [000160] --CXG+------              *  CALL      void   System.Threading.Thread.Sleep
               [000159] -----+------ arg0 in rcx  \--*  CNS_INT   int    100

------------ BB28 [139..17D), preds={BB23} succs={BB29}

***** BB28
STMT00041 (IL 0x139...0x13E)
               [000164] -ACXG+------              *  ASG       struct (copy)
               [000162] D---G+-N----              +--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  +--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
               [000161] --CXG+------              \--*  CALL      struct System.DateTime.get_Now

***** BB28
STMT00042 (IL 0x13F...0x178)
               [000170] --CXG+------              *  CALL      void   System.Console.WriteLine
               [000169] --CXG+------ arg0 in rcx  \--*  CALL      ref    System.String.Concat
               [000367] -ACXG-----L- arg0 SETUP      +--*  ASG       ref   
               [000366] D------N----                 |  +--*  LCL_VAR   ref    V24 tmp17        
               [000167] --CXG+------                 |  \--*  CALL      ref    System.DateTime.ToString
               [000166] -----+------ this in rcx     |     \--*  ADDR      byref 
               [000165] ----G+-N----                 |        \--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                     |        \--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
               [000368] ------------ arg0 in rcx     +--*  LCL_VAR   ref    V24 tmp17        
               [000365] #---G+------ arg1 in rdx     \--*  IND       ref   
               [000364] H----+------                    \--*  CNS_INT(h) long   0x75003208 "	 Done.  Profiler is active, available options:"

***** BB28
STMT00043 (IL 0x155...  ???)
               [000172] --CXG+------              *  CALL      void   System.Console.WriteLine
               [000372] #---G+------ arg0 in rcx  \--*  IND       ref   
               [000371] H----+------                 \--*  CNS_INT(h) long   0x75003210 "   Q = quit"

***** BB28
STMT00044 (IL 0x15F...  ???)
               [000174] --CXG+------              *  CALL      void   System.Console.WriteLine
               [000375] #---G+------ arg0 in rcx  \--*  IND       ref   
               [000374] H----+------                 \--*  CNS_INT(h) long   0x75003218 "   H = heap snapshot"

***** BB28
STMT00045 (IL 0x169...  ???)
               [000176] --CXG+------              *  CALL      void   System.Console.WriteLine
               [000378] #---G+------ arg0 in rcx  \--*  IND       ref   
               [000377] H----+------                 \--*  CNS_INT(h) long   0x75003220 "   G = GC (max gen)"

***** BB28
STMT00046 (IL 0x173...  ???)
               [000178] --CXG+------              *  CALL      void   System.Console.WriteLine
               [000381] #---G+------ arg0 in rcx  \--*  IND       ref   
               [000380] H----+------                 \--*  CNS_INT(h) long   0x75003228 "   R = clear the running flag to stop the consumer thread"

------------ BB29 [17D..18F) -> BB31 (cond), preds={BB28,BB30,BB32,BB34,BB35} succs={BB30,BB31}

***** BB29
STMT00048 (IL   ???...  ???)
               [000233] S-CXG+------              *  CALL      void   System.ConsolePal.ReadKey
               [000235] -----+------ arg0 in rcx  +--*  ADDR      long  
               [000236] ----G+-N----              |  \--*  LCL_VAR   struct<System.ConsoleKeyInfo, 12>(AX)(P) V06 loc4         
                                                  |  \--*    ushort V06._keyChar (offs=0x00) -> V18 tmp11        
                                                  |  \--*    int    V06._key (offs=0x04) -> V19 tmp12        
                                                  |  \--*    int    V06._mods (offs=0x08) -> V20 tmp13        
               [000232] -----+------ arg1 in rdx  \--*  CNS_INT   int    0

***** BB29
STMT00050 (IL   ???...  ???)
               [000189] ----G+------              *  JTRUE     void  
               [000188] N---G+-N-U--              \--*  NE        int   
               [000240] ----G+------                 +--*  LCL_VAR   int   (AX) V19 tmp12        
               [000187] -----+------                 \--*  CNS_INT   int    71

------------ BB30 [18F..19B) -> BB29 (always), preds={BB29} succs={BB29}

***** BB30
STMT00061 (IL 0x18F...0x199)
               [000222] --CXG+------              *  CALL      void   System.GC.Collect
               [000221] --CXG+------ arg0 in rcx  \--*  CALL      int    System.GC.get_MaxGeneration

------------ BB31 [19B..1A6) -> BB33 (cond), preds={BB29} succs={BB32,BB33}

***** BB31
STMT00052 (IL   ???...  ???)
               [000196] ----G+------              *  JTRUE     void  
               [000195] N---G+-N-U--              \--*  NE        int   
               [000244] ----G+------                 +--*  LCL_VAR   int   (AX) V19 tmp12        
               [000194] -----+------                 \--*  CNS_INT   int    72

------------ BB32 [1A6..1AD) -> BB29 (always), preds={BB31} succs={BB29}

***** BB32
STMT00060 (IL 0x1A6...0x1AB)
               [000220] --CXG+------              *  CALL      void   System.Diagnostics.Debugger.Break

------------ BB33 [1AD..1B8) -> BB35 (cond), preds={BB31} succs={BB34,BB35}

***** BB33
STMT00054 (IL   ???...  ???)
               [000203] ----G+------              *  JTRUE     void  
               [000202] N---G+-N-U--              \--*  NE        int   
               [000248] ----G+------                 +--*  LCL_VAR   int   (AX) V19 tmp12        
               [000201] -----+------                 \--*  CNS_INT   int    82

------------ BB34 [1B8..1C1) -> BB29 (always), preds={BB33} succs={BB29}

***** BB34
STMT00059 (IL 0x1B8...0x1BA)
               [000219] -A-XG+------              *  ASG       bool  
               [000218] ---XG+-N----              +--*  IND       bool  
               [000387] -----+------              |  \--*  ADD       byref 
               [000216] -----+------              |     +--*  LCL_VAR   ref    V00 this         
               [000386] -----+------              |     \--*  CNS_INT   long   16 field offset Fseq[_running]
               [000217] -----+------              \--*  CNS_INT   int    0

------------ BB35 [1C1..1CC) -> BB29 (cond), preds={BB33} succs={BB36,BB29}

***** BB35
STMT00056 (IL   ???...  ???)
               [000210] ----G+------              *  JTRUE     void  
               [000209] N---G+-N-U--              \--*  NE        int   
               [000252] ----G+------                 +--*  LCL_VAR   int   (AX) V19 tmp12        
               [000208] -----+------                 \--*  CNS_INT   int    81

------------ BB36 [1CC..1D4) (return), preds={BB35} succs={}

***** BB36
STMT00057 (IL 0x1CC...0x1CE)
               [000214] -A-XG+------              *  ASG       bool  
               [000213] ---XG+-N----              +--*  IND       bool  
               [000389] -----+------              |  \--*  ADD       byref 
               [000211] -----+------              |     +--*  LCL_VAR   ref    V00 this         
               [000388] -----+------              |     \--*  CNS_INT   long   16 field offset Fseq[_running]
               [000212] -----+------              \--*  CNS_INT   int    0

***** BB36
STMT00058 (IL 0x1D3...0x1D3)
               [000215] -----+------              *  RETURN    void  

-------------------------------------------------------------------------------------------------------------------
*************** In fgDebugCheckBBlist

*************** Starting PHASE GS Cookie
No GS security needed

*************** Finishing PHASE GS Cookie

*************** Starting PHASE Compute edge weights (1, false)
*************** In fgComputeBlockAndEdgeWeights()

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..072)-> BB12 (always)                     i hascall gcsafe newobj 
BB02 [0001]  1       BB12                  1       [072..07B)                                     i bwd bwd-target 
BB03 [0002]  1  0    BB02                  1       [07B..0CA)                 T0      try { }     keep i try hascall gcsafe newobj bwd 
BB05 [0038]  1       BB03                  1       [0CA..0CD)-> BB11 ( cond )                     keep i bwd cfb 
BB06 [0039]  1       BB05                  1       [0CD..0D4)-> BB11 (always)                     i hascall bwd 
BB08 [0003]  1     0                       1       [0CA..0CD)-> BB10 ( cond )    H0   fault {     keep i bwd 
BB09 [0004]  1     0 BB08                  1       [0CD..0D3)                    H0               i hascall bwd 
BB10 [0005]  2     0 BB08,BB09             1       [0D3..0D4)        (finret)    H0   }           i bwd 
BB11 [0006]  2       BB05,BB06             1       [0D4..0D8)                                     i bwd 
BB12 [0007]  2       BB01,BB11             1       [0D8..0DD)-> BB02 ( cond )                     i bwd 
BB13 [0008]  1       BB12                  1       [0DD..0F9)                                     i hascall gcsafe 
BB14 [0009]  2       BB13,BB27             1       [0F9..102)                                     i bwd bwd-target 
BB15 [0010]  1  1    BB14                  1       [102..122)-> BB22 ( cond ) T1      try { }     keep i try hascall gcsafe bwd 
BB19 [0041]  1       BB15                  1       [126..129)-> BB27 ( cond )                     keep i bwd cfb 
BB20 [0042]  1       BB19                  1       [129..130)-> BB27 (always)                     i hascall bwd 
BB22 [0030]  1       BB15                  1       [???..???)-> BB24 (callf )                     i internal 
BB23 [0031]  1       BB26                  1       [???..???)-> BB28 (ALWAYS)                     i internal KEEP 
BB24 [0013]  2     1 BB22                  1       [126..129)-> BB26 ( cond )    H1   finally {   keep i bwd 
BB25 [0014]  1     1 BB24                  1       [129..12F)                    H1               i hascall bwd 
BB26 [0015]  2     1 BB24,BB25             1       [12F..130)        (finret)    H1   }           i bwd 
BB27 [0016]  2       BB19,BB20             1       [130..139)-> BB14 (always)                     i hascall gcsafe bwd 
BB28 [0017]  1       BB23                  1       [139..17D)                                     i hascall gcsafe 
BB29 [0018]  5       BB28,BB30,BB32,BB34,BB35   1       [17D..18F)-> BB31 ( cond )                     i hascall gcsafe bwd bwd-target 
BB30 [0019]  1       BB29                  1       [18F..19B)-> BB29 (always)                     i hascall gcsafe bwd 
BB31 [0020]  1       BB29                  1       [19B..1A6)-> BB33 ( cond )                     i bwd 
BB32 [0021]  1       BB31                  1       [1A6..1AD)-> BB29 (always)                     i hascall gcsafe bwd 
BB33 [0022]  1       BB31                  1       [1AD..1B8)-> BB35 ( cond )                     i bwd 
BB34 [0023]  1       BB33                  1       [1B8..1C1)-> BB29 (always)                     i bwd 
BB35 [0024]  1       BB33                  1       [1C1..1CC)-> BB29 ( cond )                     i bwd 
BB36 [0025]  1       BB35                  1       [1CC..1D4)        (return)                     i 
-----------------------------------------------------------------------------------------------------------------------------------------

 -- no profile data, so using default called count
 -- not optimizing or no profile data, so not computing edge weights

*************** Finishing PHASE Compute edge weights (1, false)

*************** Starting PHASE Create EH funclets
*************** In fgCreateFunclets()
Relocating handler range BB08..BB10 (EH#0) to end of BBlist

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..072)-> BB12 (always)                     i hascall gcsafe newobj 
BB02 [0001]  1       BB12                  1       [072..07B)                                     i bwd bwd-target 
BB03 [0002]  1  0    BB02                  1       [07B..0CA)                 T0      try { }     keep i try hascall gcsafe newobj bwd 
BB05 [0038]  1       BB03                  1       [0CA..0CD)-> BB11 ( cond )                     keep i bwd cfb 
BB06 [0039]  1       BB05                  1       [0CD..0D4)-> BB11 (always)                     i hascall bwd 
BB08 [0003]  1     0                       1       [0CA..0CD)-> BB10 ( cond )    H0   fault {     keep i bwd 
BB09 [0004]  1     0 BB08                  1       [0CD..0D3)                    H0               i hascall bwd 
BB10 [0005]  2     0 BB08,BB09             1       [0D3..0D4)        (finret)    H0   }           i bwd 
BB11 [0006]  2       BB05,BB06             1       [0D4..0D8)                                     i bwd 
BB12 [0007]  2       BB01,BB11             1       [0D8..0DD)-> BB02 ( cond )                     i bwd 
BB13 [0008]  1       BB12                  1       [0DD..0F9)                                     i hascall gcsafe 
BB14 [0009]  2       BB13,BB27             1       [0F9..102)                                     i bwd bwd-target 
BB15 [0010]  1  1    BB14                  1       [102..122)-> BB22 ( cond ) T1      try { }     keep i try hascall gcsafe bwd 
BB19 [0041]  1       BB15                  1       [126..129)-> BB27 ( cond )                     keep i bwd cfb 
BB20 [0042]  1       BB19                  1       [129..130)-> BB27 (always)                     i hascall bwd 
BB22 [0030]  1       BB15                  1       [???..???)-> BB24 (callf )                     i internal 
BB23 [0031]  1       BB26                  1       [???..???)-> BB28 (ALWAYS)                     i internal KEEP 
BB24 [0013]  2     1 BB22                  1       [126..129)-> BB26 ( cond )    H1   finally {   keep i bwd 
BB25 [0014]  1     1 BB24                  1       [129..12F)                    H1               i hascall bwd 
BB26 [0015]  2     1 BB24,BB25             1       [12F..130)        (finret)    H1   }           i bwd 
BB27 [0016]  2       BB19,BB20             1       [130..139)-> BB14 (always)                     i hascall gcsafe bwd 
BB28 [0017]  1       BB23                  1       [139..17D)                                     i hascall gcsafe 
BB29 [0018]  5       BB28,BB30,BB32,BB34,BB35   1       [17D..18F)-> BB31 ( cond )                     i hascall gcsafe bwd bwd-target 
BB30 [0019]  1       BB29                  1       [18F..19B)-> BB29 (always)                     i hascall gcsafe bwd 
BB31 [0020]  1       BB29                  1       [19B..1A6)-> BB33 ( cond )                     i bwd 
BB32 [0021]  1       BB31                  1       [1A6..1AD)-> BB29 (always)                     i hascall gcsafe bwd 
BB33 [0022]  1       BB31                  1       [1AD..1B8)-> BB35 ( cond )                     i bwd 
BB34 [0023]  1       BB33                  1       [1B8..1C1)-> BB29 (always)                     i bwd 
BB35 [0024]  1       BB33                  1       [1C1..1CC)-> BB29 ( cond )                     i bwd 
BB36 [0025]  1       BB35                  1       [1CC..1D4)        (return)                     i 
-----------------------------------------------------------------------------------------------------------------------------------------

***************  Exception Handling table
index  eTry, eHnd
  0  ::            - Try at BB03..BB03 [07B..0CA), Fault   at BB08..BB10 [0CA..0D4)
  1  ::            - Try at BB15..BB15 [102..126), Finally at BB24..BB26 [126..130)
Relocated blocks [BB08..BB10] inserted after BB36 at the end of method
Create funclets: moved region

***************  Exception Handling table
index  eTry, eHnd
  0  ::            - Try at BB03..BB03 [07B..0CA), Fault   at BB08..BB10 [0CA..0D4)
  1  ::            - Try at BB15..BB15 [102..126), Finally at BB24..BB26 [126..130)
Relocating handler range BB24..BB26 (EH#1) to end of BBlist

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..072)-> BB12 (always)                     i hascall gcsafe newobj 
BB02 [0001]  1       BB12                  1       [072..07B)                                     i bwd bwd-target 
BB03 [0002]  1  0    BB02                  1       [07B..0CA)                 T0      try { }     keep i try hascall gcsafe newobj bwd 
BB05 [0038]  1       BB03                  1       [0CA..0CD)-> BB11 ( cond )                     keep i bwd cfb 
BB06 [0039]  1       BB05                  1       [0CD..0D4)-> BB11 (always)                     i hascall bwd 
BB11 [0006]  2       BB05,BB06             1       [0D4..0D8)                                     i bwd 
BB12 [0007]  2       BB01,BB11             1       [0D8..0DD)-> BB02 ( cond )                     i bwd 
BB13 [0008]  1       BB12                  1       [0DD..0F9)                                     i hascall gcsafe 
BB14 [0009]  2       BB13,BB27             1       [0F9..102)                                     i bwd bwd-target 
BB15 [0010]  1  1    BB14                  1       [102..122)-> BB22 ( cond ) T1      try { }     keep i try hascall gcsafe bwd 
BB19 [0041]  1       BB15                  1       [126..129)-> BB27 ( cond )                     keep i bwd cfb 
BB20 [0042]  1       BB19                  1       [129..130)-> BB27 (always)                     i hascall bwd 
BB22 [0030]  1       BB15                  1       [???..???)-> BB24 (callf )                     i internal 
BB23 [0031]  1       BB26                  1       [???..???)-> BB28 (ALWAYS)                     i internal KEEP 
BB24 [0013]  2     1 BB22                  1       [126..129)-> BB26 ( cond )    H1   finally {   keep i bwd 
BB25 [0014]  1     1 BB24                  1       [129..12F)                    H1               i hascall bwd 
BB26 [0015]  2     1 BB24,BB25             1       [12F..130)        (finret)    H1   }           i bwd 
BB27 [0016]  2       BB19,BB20             1       [130..139)-> BB14 (always)                     i hascall gcsafe bwd 
BB28 [0017]  1       BB23                  1       [139..17D)                                     i hascall gcsafe 
BB29 [0018]  5       BB28,BB30,BB32,BB34,BB35   1       [17D..18F)-> BB31 ( cond )                     i hascall gcsafe bwd bwd-target 
BB30 [0019]  1       BB29                  1       [18F..19B)-> BB29 (always)                     i hascall gcsafe bwd 
BB31 [0020]  1       BB29                  1       [19B..1A6)-> BB33 ( cond )                     i bwd 
BB32 [0021]  1       BB31                  1       [1A6..1AD)-> BB29 (always)                     i hascall gcsafe bwd 
BB33 [0022]  1       BB31                  1       [1AD..1B8)-> BB35 ( cond )                     i bwd 
BB34 [0023]  1       BB33                  1       [1B8..1C1)-> BB29 (always)                     i bwd 
BB35 [0024]  1       BB33                  1       [1C1..1CC)-> BB29 ( cond )                     i bwd 
BB36 [0025]  1       BB35                  1       [1CC..1D4)        (return)                     i 
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ funclets follow
BB08 [0003]  1     0                       1       [0CA..0CD)-> BB10 ( cond )    H0 F fault {     keep i flet bwd 
BB09 [0004]  1     0 BB08                  1       [0CD..0D3)                    H0               i hascall bwd 
BB10 [0005]  2     0 BB08,BB09             1       [0D3..0D4)        (finret)    H0   }           i bwd 
-----------------------------------------------------------------------------------------------------------------------------------------

***************  Exception Handling table
index  eTry, eHnd
  0  ::            - Try at BB03..BB03 [07B..0CA), Fault   at BB08..BB10 [0CA..0D4)
  1  ::            - Try at BB15..BB15 [102..126), Finally at BB24..BB26 [126..130)
Relocated blocks [BB24..BB26] inserted after BB10 at the end of method
Create funclets: moved region

***************  Exception Handling table
index  eTry, eHnd
  0  ::            - Try at BB03..BB03 [07B..0CA), Fault   at BB08..BB10 [0CA..0D4)
  1  ::            - Try at BB15..BB15 [102..126), Finally at BB24..BB26 [126..130)

After fgCreateFunclets()
-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..072)-> BB12 (always)                     i hascall gcsafe newobj 
BB02 [0001]  1       BB12                  1       [072..07B)                                     i bwd bwd-target 
BB03 [0002]  1  0    BB02                  1       [07B..0CA)                 T0      try { }     keep i try hascall gcsafe newobj bwd 
BB05 [0038]  1       BB03                  1       [0CA..0CD)-> BB11 ( cond )                     keep i bwd cfb 
BB06 [0039]  1       BB05                  1       [0CD..0D4)-> BB11 (always)                     i hascall bwd 
BB11 [0006]  2       BB05,BB06             1       [0D4..0D8)                                     i bwd 
BB12 [0007]  2       BB01,BB11             1       [0D8..0DD)-> BB02 ( cond )                     i bwd 
BB13 [0008]  1       BB12                  1       [0DD..0F9)                                     i hascall gcsafe 
BB14 [0009]  2       BB13,BB27             1       [0F9..102)                                     i bwd bwd-target 
BB15 [0010]  1  1    BB14                  1       [102..122)-> BB22 ( cond ) T1      try { }     keep i try hascall gcsafe bwd 
BB19 [0041]  1       BB15                  1       [126..129)-> BB27 ( cond )                     keep i bwd cfb 
BB20 [0042]  1       BB19                  1       [129..130)-> BB27 (always)                     i hascall bwd 
BB22 [0030]  1       BB15                  1       [???..???)-> BB24 (callf )                     i internal 
BB23 [0031]  1       BB26                  1       [???..???)-> BB28 (ALWAYS)                     i internal KEEP 
BB27 [0016]  2       BB19,BB20             1       [130..139)-> BB14 (always)                     i hascall gcsafe bwd 
BB28 [0017]  1       BB23                  1       [139..17D)                                     i hascall gcsafe 
BB29 [0018]  5       BB28,BB30,BB32,BB34,BB35   1       [17D..18F)-> BB31 ( cond )                     i hascall gcsafe bwd bwd-target 
BB30 [0019]  1       BB29                  1       [18F..19B)-> BB29 (always)                     i hascall gcsafe bwd 
BB31 [0020]  1       BB29                  1       [19B..1A6)-> BB33 ( cond )                     i bwd 
BB32 [0021]  1       BB31                  1       [1A6..1AD)-> BB29 (always)                     i hascall gcsafe bwd 
BB33 [0022]  1       BB31                  1       [1AD..1B8)-> BB35 ( cond )                     i bwd 
BB34 [0023]  1       BB33                  1       [1B8..1C1)-> BB29 (always)                     i bwd 
BB35 [0024]  1       BB33                  1       [1C1..1CC)-> BB29 ( cond )                     i bwd 
BB36 [0025]  1       BB35                  1       [1CC..1D4)        (return)                     i 
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ funclets follow
BB08 [0003]  1     0                       1       [0CA..0CD)-> BB10 ( cond )    H0 F fault {     keep i flet bwd 
BB09 [0004]  1     0 BB08                  1       [0CD..0D3)                    H0               i hascall bwd 
BB10 [0005]  2     0 BB08,BB09             1       [0D3..0D4)        (finret)    H0   }           i bwd 
BB24 [0013]  2     1 BB22                  1       [126..129)-> BB26 ( cond )    H1 F finally {   keep i flet bwd 
BB25 [0014]  1     1 BB24                  1       [129..12F)                    H1               i hascall bwd 
BB26 [0015]  2     1 BB24,BB25             1       [12F..130)        (finret)    H1   }           i bwd 
-----------------------------------------------------------------------------------------------------------------------------------------

***************  Exception Handling table
index  eTry, eHnd
  0  ::            - Try at BB03..BB03 [07B..0CA), Fault   at BB08..BB10 [0CA..0D4)
  1  ::            - Try at BB15..BB15 [102..126), Finally at BB24..BB26 [126..130)
*************** In fgDebugCheckBBlist

*************** Finishing PHASE Create EH funclets

*************** Starting PHASE Invert loops

Duplication of loop condition [000068] is performed, because the cost of duplication (6) is less or equal than 34,
   loopIterations =   8.000, optInvertTotalInfo.sharedStaticHelperCount >= 0, validProfileWeights = false
New Basic Block BB37 [0044] created.
Setting edge weights for BB01 -> BB37 to [0 .. 3.402823e+38]
Setting edge weights for BB37 -> BB02 to [0 .. 3.402823e+38]
Setting edge weights for BB37 -> BB13 to [0 .. 3.402823e+38]

Duplicated loop exit block at BB37 for loop (BB02 - BB12)
Estimated code size expansion is 6

------------ BB37 [???..???) -> BB13 (cond), preds={BB01} succs={BB02,BB13}

***** BB37
STMT00072 (IL 0x0D8...  ???)
     (  7,  6) [000390] ------------              *  JTRUE     void  
     (  5,  4) [000391] J------N----              \--*  GE        int   
     (  3,  2) [000392] ------------                 +--*  LCL_VAR   int    V03 loc1         
     (  1,  1) [000393] ------------                 \--*  CNS_INT   int    10

------------ BB12 [0D8..0DD) -> BB02 (cond), preds={BB11} succs={BB13,BB02}

***** BB12
STMT00017 (IL 0x0D8...0x0DB)
     (  7,  6) [000068] ------------              *  JTRUE     void  
     (  5,  4) [000067] J------N----              \--*  LT        int   
     (  3,  2) [000065] ------------                 +--*  LCL_VAR   int    V03 loc1         
     (  1,  1) [000066] ------------                 \--*  CNS_INT   int    10

*************** Finishing PHASE Invert loops
Trees after Invert loops

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..072)                                     i hascall gcsafe newobj 
BB37 [0044]  1       BB01                  1       [???..???)-> BB13 ( cond )                     internal 
BB02 [0001]  2       BB12,BB37             1       [072..07B)                                     i bwd bwd-target 
BB03 [0002]  1  0    BB02                  1       [07B..0CA)                 T0      try { }     keep i try hascall gcsafe newobj bwd 
BB05 [0038]  1       BB03                  1       [0CA..0CD)-> BB11 ( cond )                     keep i bwd cfb 
BB06 [0039]  1       BB05                  1       [0CD..0D4)-> BB11 (always)                     i hascall bwd 
BB11 [0006]  2       BB05,BB06             1       [0D4..0D8)                                     i bwd 
BB12 [0007]  1       BB11                  1       [0D8..0DD)-> BB02 ( cond )                     i bwd 
BB13 [0008]  2       BB12,BB37             1       [0DD..0F9)                                     i hascall gcsafe 
BB14 [0009]  2       BB13,BB27             1       [0F9..102)                                     i bwd bwd-target 
BB15 [0010]  1  1    BB14                  1       [102..122)-> BB22 ( cond ) T1      try { }     keep i try hascall gcsafe bwd 
BB19 [0041]  1       BB15                  1       [126..129)-> BB27 ( cond )                     keep i bwd cfb 
BB20 [0042]  1       BB19                  1       [129..130)-> BB27 (always)                     i hascall bwd 
BB22 [0030]  1       BB15                  1       [???..???)-> BB24 (callf )                     i internal 
BB23 [0031]  1       BB26                  1       [???..???)-> BB28 (ALWAYS)                     i internal KEEP 
BB27 [0016]  2       BB19,BB20             1       [130..139)-> BB14 (always)                     i hascall gcsafe bwd 
BB28 [0017]  1       BB23                  1       [139..17D)                                     i hascall gcsafe 
BB29 [0018]  5       BB28,BB30,BB32,BB34,BB35   1       [17D..18F)-> BB31 ( cond )                     i hascall gcsafe bwd bwd-target 
BB30 [0019]  1       BB29                  1       [18F..19B)-> BB29 (always)                     i hascall gcsafe bwd 
BB31 [0020]  1       BB29                  1       [19B..1A6)-> BB33 ( cond )                     i bwd 
BB32 [0021]  1       BB31                  1       [1A6..1AD)-> BB29 (always)                     i hascall gcsafe bwd 
BB33 [0022]  1       BB31                  1       [1AD..1B8)-> BB35 ( cond )                     i bwd 
BB34 [0023]  1       BB33                  1       [1B8..1C1)-> BB29 (always)                     i bwd 
BB35 [0024]  1       BB33                  1       [1C1..1CC)-> BB29 ( cond )                     i bwd 
BB36 [0025]  1       BB35                  1       [1CC..1D4)        (return)                     i 
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ funclets follow
BB08 [0003]  1     0                       1       [0CA..0CD)-> BB10 ( cond )    H0 F fault {     keep i flet bwd 
BB09 [0004]  1     0 BB08                  1       [0CD..0D3)                    H0               i hascall bwd 
BB10 [0005]  2     0 BB08,BB09             1       [0D3..0D4)        (finret)    H0   }           i bwd 
BB24 [0013]  2     1 BB22                  1       [126..129)-> BB26 ( cond )    H1 F finally {   keep i flet bwd 
BB25 [0014]  1     1 BB24                  1       [129..12F)                    H1               i hascall bwd 
BB26 [0015]  2     1 BB24,BB25             1       [12F..130)        (finret)    H1   }           i bwd 
-----------------------------------------------------------------------------------------------------------------------------------------

------------ BB01 [000..072), preds={} succs={BB37}

***** BB01
STMT00000 (IL 0x000...0x005)
               [000003] -ACXG+------              *  ASG       struct (copy)
               [000001] D---G+-N----              +--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  +--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
               [000000] --CXG+------              \--*  CALL      struct System.DateTime.get_Now

***** BB01
STMT00001 (IL 0x006...0x022)
               [000009] --CXG+------              *  CALL      void   System.Console.WriteLine
               [000008] --CXG+------ arg0 in rcx  \--*  CALL      ref    System.String.Concat
               [000272] -ACXG-----L- arg0 SETUP      +--*  ASG       ref   
               [000271] D------N----                 |  +--*  LCL_VAR   ref    V21 tmp14        
               [000006] --CXG+------                 |  \--*  CALL      ref    System.DateTime.ToString
               [000005] -----+------ this in rcx     |     \--*  ADDR      byref 
               [000004] ----G+-N----                 |        \--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                     |        \--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
               [000273] ------------ arg0 in rcx     +--*  LCL_VAR   ref    V21 tmp14        
               [000270] #---G+------ arg1 in rdx     \--*  IND       ref   
               [000269] H----+------                    \--*  CNS_INT(h) long   0x750031F0 "	 Created list"

***** BB01
STMT00002 (IL 0x01C...  ???)
               [000014] -AC--+------              *  ASG       ref   
               [000013] D----+-N----              +--*  LCL_VAR   ref    V08 tmp1         
               [000012] --C--+------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
               [000011] H----+------ arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb3ee2350 method

***** BB01
STMT00003 (IL   ???...  ???)
               [000016] --CXG+------              *  CALL      void   FalseLeakRepro.List..ctor
               [000015] -----+------ this in rcx  \--*  LCL_VAR   ref    V08 tmp1         

***** BB01
STMT00004 (IL 0x022...  ???)
               [000019] -A-XG+------              *  ASG       ref   
               [000018] ---XG+-N----              +--*  IND       ref   
               [000279] -----+------              |  \--*  ADD       byref 
               [000010] -----+------              |     +--*  LCL_VAR   ref    V00 this         
               [000278] -----+------              |     \--*  CNS_INT   long   8 field offset Fseq[_myList]
               [000017] -----+------              \--*  LCL_VAR   ref    V08 tmp1         

***** BB01
STMT00005 (IL 0x027...0x037)
               [000026] -AC--+------              *  ASG       ref   
               [000025] D----+-N----              +--*  LCL_VAR   ref    V09 tmp2         
               [000024] --C--+------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
               [000023] H----+------ arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb3b058b8 token

***** BB01
STMT00007 (IL   ???...  ???)
               [000030] -A-XG+------              *  ASG       ref   
               [000029] D----+-N----              +--*  LCL_VAR   ref    V10 tmp3         
               [000022] ---XG+------              \--*  IND       ref   
               [000282] ---XG+------                 \--*  ADD       byref 
               [000021] ---XG+------                    +--*  IND       ref   
               [000284] -----+------                    |  \--*  ADD       byref 
               [000020] -----+------                    |     +--*  LCL_VAR   ref    V00 this         
               [000283] -----+------                    |     \--*  CNS_INT   long   8 field offset Fseq[_myList]
               [000281] -----+------                    \--*  CNS_INT   long   8 field offset Fseq[Head]

***** BB01
STMT00006 (IL   ???...  ???)
               [000028] --CXG+------              *  CALL      void   System.Object..ctor
               [000027] -----+------ this in rcx  \--*  LCL_VAR   ref    V09 tmp2         

***** BB01
STMT00008 (IL 0x037...  ???)
               [000034] -A-XG+------              *  ASG       ref   
               [000033] ---XG+-N----              +--*  IND       ref   
               [000287] -----+------              |  \--*  ADD       byref 
               [000031] -----+------              |     +--*  LCL_VAR   ref    V10 tmp3         
               [000286] -----+------              |     \--*  CNS_INT   long   16 field offset Fseq[Data]
               [000032] -----+------              \--*  LCL_VAR   ref    V09 tmp2         

***** BB01
STMT00009 (IL 0x03C...0x057)
               [000040] -AC--+------              *  ASG       ref   
               [000039] D----+-N----              +--*  LCL_VAR   ref    V11 tmp4         
               [000038] --C--+------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
               [000037] H----+------ arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb3ee6200 token

***** BB01
STMT00010 (IL   ???...  ???)
               [000042] --CXG+------              *  CALL      void   System.MulticastDelegate.CtorClosed
               [000041] -----+------ this in rcx  +--*  LCL_VAR   ref    V11 tmp4         
               [000035] -----+------ arg1 in rdx  +--*  LCL_VAR   ref    V00 this         
               [000036] H----+------ arg2 in r8   \--*  CNS_INT(h) long   0x7ffdb3b213f8 ftn

***** BB01
STMT00011 (IL 0x048...  ???)
               [000047] -AC--+------              *  ASG       ref   
               [000046] D----+-N----              +--*  LCL_VAR   ref    V12 tmp5         
               [000045] --C--+------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWFAST
               [000044] H----+------ arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb3c84e80 token

***** BB01
STMT00012 (IL   ???...  ???)
               [000049] --CXG+------              *  CALL      void   System.Threading.Thread..ctor
               [000048] -----+------ this in rcx  +--*  LCL_VAR   ref    V12 tmp5         
               [000043] -----+------ arg1 in rdx  \--*  LCL_VAR   ref    V11 tmp4         

***** BB01
STMT00013 (IL 0x04D...  ???)
               [000051] --CXG+------              *  CALL nullcheck void   System.Threading.Thread.Start
               [000050] -----+------ this in rcx  \--*  LCL_VAR   ref    V12 tmp5         

***** BB01
STMT00014 (IL 0x052...  ???)
               [000055] -ACXG+------              *  ASG       struct (copy)
               [000053] D---G+-N----              +--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  +--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
               [000052] --CXG+------              \--*  CALL      struct System.DateTime.get_Now

***** BB01
STMT00015 (IL 0x058...0x06F)
               [000061] --CXG+------              *  CALL      void   System.Console.WriteLine
               [000060] --CXG+------ arg0 in rcx  \--*  CALL      ref    System.String.Concat
               [000300] -ACXG-----L- arg0 SETUP      +--*  ASG       ref   
               [000299] D------N----                 |  +--*  LCL_VAR   ref    V22 tmp15        
               [000058] --CXG+------                 |  \--*  CALL      ref    System.DateTime.ToString
               [000057] -----+------ this in rcx     |     \--*  ADDR      byref 
               [000056] ----G+-N----                 |        \--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                     |        \--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
               [000301] ------------ arg0 in rcx     +--*  LCL_VAR   ref    V22 tmp15        
               [000298] #---G+------ arg1 in rdx     \--*  IND       ref   
               [000297] H----+------                    \--*  CNS_INT(h) long   0x750031F8 "	 Consumer thread started, adding items..."

***** BB01
STMT00016 (IL 0x06E...  ???)
               [000064] -A---+------              *  ASG       int   
               [000063] D----+-N----              +--*  LCL_VAR   int    V03 loc1         
               [000062] -----+------              \--*  CNS_INT   int    0

------------ BB37 [???..???) -> BB13 (cond), preds={BB01} succs={BB02,BB13}

***** BB37
STMT00072 (IL 0x0D8...  ???)
     (  7,  6) [000390] ------------              *  JTRUE     void  
     (  5,  4) [000391] J------N----              \--*  GE        int   
     (  3,  2) [000392] ------------                 +--*  LCL_VAR   int    V03 loc1         
     (  1,  1) [000393] ------------                 \--*  CNS_INT   int    10

------------ BB02 [072..07B), preds={BB12,BB37} succs={BB03}

***** BB02
STMT00018 (IL 0x072...0x078)
               [000072] -A-XG+------              *  ASG       ref   
               [000071] D----+-N----              +--*  LCL_VAR   ref    V04 loc2         
               [000070] ---XG+------              \--*  IND       ref   
               [000305] -----+------                 \--*  ADD       byref 
               [000069] -----+------                    +--*  LCL_VAR   ref    V00 this         
               [000304] -----+------                    \--*  CNS_INT   long   8 field offset Fseq[_myList]

***** BB02
STMT00019 (IL 0x079...0x07A)
               [000075] -A--G+------              *  ASG       int   
               [000074] D---G+-N----              +--*  LCL_VAR   int   (AX) V05 loc3         
               [000073] -----+------              \--*  CNS_INT   int    0

------------ BB03 [07B..0CA), preds={BB02} succs={BB05}

***** BB03
STMT00020 (IL 0x07B...0x093)
               [000079] --CXG+------              *  CALL      void   System.Threading.Monitor.Enter
               [000078] -----+------ arg1 in rdx  +--*  LCL_VAR_ADDR long   V05 loc3         
               [000076] -----+------ arg0 in rcx  \--*  LCL_VAR   ref    V04 loc2         

***** BB03
STMT00021 (IL 0x083...  ???)
               [000086] -AC--+------              *  ASG       ref   
               [000085] D----+-N----              +--*  LCL_VAR   ref    V13 tmp6         
               [000084] --C--+------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
               [000083] H----+------ arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb3ee58a8 method

***** BB03
STMT00023 (IL   ???...  ???)
               [000090] -A-XG+------              *  ASG       ref   
               [000089] D----+-N----              +--*  LCL_VAR   ref    V14 tmp7         
               [000082] ---XG+------              \--*  IND       ref   
               [000310] ---XG+------                 \--*  ADD       byref 
               [000081] ---XG+------                    +--*  IND       ref   
               [000312] -----+------                    |  \--*  ADD       byref 
               [000080] -----+------                    |     +--*  LCL_VAR   ref    V00 this         
               [000311] -----+------                    |     \--*  CNS_INT   long   8 field offset Fseq[_myList]
               [000309] -----+------                    \--*  CNS_INT   long   8 field offset Fseq[Head]

***** BB03
STMT00065 (IL   ???...  ???)
               [000230] --CXG+------              *  CALL      void   System.Object..ctor
               [000087] -----+------ this in rcx  \--*  LCL_VAR   ref    V13 tmp6         

***** BB03
STMT00024 (IL 0x093...  ???)
               [000094] -A-XG+------              *  ASG       ref   
               [000093] ---XG+-N----              +--*  IND       ref   
               [000315] -----+------              |  \--*  ADD       byref 
               [000091] -----+------              |     +--*  LCL_VAR   ref    V14 tmp7         
               [000314] -----+------              |     \--*  CNS_INT   long   8 field offset Fseq[Next]
               [000092] -----+------              \--*  LCL_VAR   ref    V13 tmp6         

***** BB03
STMT00025 (IL 0x098...0x0AE)
               [000102] -A-XG+------              *  ASG       ref   
               [000101] ---XG+-N----              +--*  IND       ref   
               [000317] ---XG+------              |  \--*  ADD       byref 
               [000096] ---XG+------              |     +--*  IND       ref   
               [000319] -----+------              |     |  \--*  ADD       byref 
               [000095] -----+------              |     |     +--*  LCL_VAR   ref    V00 this         
               [000318] -----+------              |     |     \--*  CNS_INT   long   8 field offset Fseq[_myList]
               [000316] -----+------              |     \--*  CNS_INT   long   8 field offset Fseq[Head]
               [000100] ---XG+------              \--*  IND       ref   
               [000321] ---XG+------                 \--*  ADD       byref 
               [000099] ---XG+------                    +--*  IND       ref   
               [000323] ---XG+------                    |  \--*  ADD       byref 
               [000098] ---XG+------                    |     +--*  IND       ref   
               [000325] -----+------                    |     |  \--*  ADD       byref 
               [000097] -----+------                    |     |     +--*  LCL_VAR   ref    V00 this         
               [000324] -----+------                    |     |     \--*  CNS_INT   long   8 field offset Fseq[_myList]
               [000322] -----+------                    |     \--*  CNS_INT   long   8 field offset Fseq[Head]
               [000320] -----+------                    \--*  CNS_INT   long   8 field offset Fseq[Next]

***** BB03
STMT00026 (IL 0x0B3...0x0C3)
               [000109] -AC--+------              *  ASG       ref   
               [000108] D----+-N----              +--*  LCL_VAR   ref    V15 tmp8         
               [000107] --C--+------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
               [000106] H----+------ arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb3b058b8 token

***** BB03
STMT00028 (IL   ???...  ???)
               [000113] -A-XG+------              *  ASG       ref   
               [000112] D----+-N----              +--*  LCL_VAR   ref    V16 tmp9         
               [000105] ---XG+------              \--*  IND       ref   
               [000328] ---XG+------                 \--*  ADD       byref 
               [000104] ---XG+------                    +--*  IND       ref   
               [000330] -----+------                    |  \--*  ADD       byref 
               [000103] -----+------                    |     +--*  LCL_VAR   ref    V00 this         
               [000329] -----+------                    |     \--*  CNS_INT   long   8 field offset Fseq[_myList]
               [000327] -----+------                    \--*  CNS_INT   long   8 field offset Fseq[Head]

***** BB03
STMT00027 (IL   ???...  ???)
               [000111] --CXG+------              *  CALL      void   System.Object..ctor
               [000110] -----+------ this in rcx  \--*  LCL_VAR   ref    V15 tmp8         

***** BB03
STMT00029 (IL 0x0C3...  ???)
               [000117] -A-XG+------              *  ASG       ref   
               [000116] ---XG+-N----              +--*  IND       ref   
               [000333] -----+------              |  \--*  ADD       byref 
               [000114] -----+------              |     +--*  LCL_VAR   ref    V16 tmp9         
               [000332] -----+------              |     \--*  CNS_INT   long   16 field offset Fseq[Data]
               [000115] -----+------              \--*  LCL_VAR   ref    V15 tmp8         

------------ BB05 [0CA..0CD) -> BB11 (cond), preds={BB03} succs={BB06,BB11}

***** BB05
STMT00066 (IL   ???...  ???)
               [000254] ----G+------              *  JTRUE     void  
               [000255] J---G+-N----              \--*  EQ        int   
               [000334] ----G+------                 +--*  CAST      int <- bool <- int
               [000256] ----G+------                 |  \--*  LCL_VAR   int   (AX) V05 loc3         
               [000257] -----+------                 \--*  CNS_INT   int    0

------------ BB06 [0CD..0D4) -> BB11 (always), preds={BB05} succs={BB11}

***** BB06
STMT00067 (IL   ???...  ???)
               [000258] --CXG+------              *  CALL      void   System.Threading.Monitor.Exit
               [000259] -----+------ arg0 in rcx  \--*  LCL_VAR   ref    V04 loc2         

------------ BB11 [0D4..0D8), preds={BB05,BB06} succs={BB12}

***** BB11
STMT00030 (IL 0x0D4...0x0D7)
               [000122] -A---+------              *  ASG       int   
               [000121] D----+-N----              +--*  LCL_VAR   int    V03 loc1         
               [000120] -----+------              \--*  ADD       int   
               [000118] -----+------                 +--*  LCL_VAR   int    V03 loc1         
               [000119] -----+------                 \--*  CNS_INT   int    1

------------ BB12 [0D8..0DD) -> BB02 (cond), preds={BB11} succs={BB13,BB02}

***** BB12
STMT00017 (IL 0x0D8...0x0DB)
     (  7,  6) [000068] ------------              *  JTRUE     void  
     (  5,  4) [000067] J------N----              \--*  LT        int   
     (  3,  2) [000065] ------------                 +--*  LCL_VAR   int    V03 loc1         
     (  1,  1) [000066] ------------                 \--*  CNS_INT   int    10

------------ BB13 [0DD..0F9), preds={BB12,BB37} succs={BB14}

***** BB13
STMT00034 (IL 0x0DD...0x0E2)
               [000133] -ACXG+------              *  ASG       struct (copy)
               [000131] D---G+-N----              +--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  +--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
               [000130] --CXG+------              \--*  CALL      struct System.DateTime.get_Now

***** BB13
STMT00035 (IL 0x0E3...0x0F4)
               [000139] --CXG+------              *  CALL      void   System.Console.WriteLine
               [000138] --CXG+------ arg0 in rcx  \--*  CALL      ref    System.String.Concat
               [000342] -ACXG-----L- arg0 SETUP      +--*  ASG       ref   
               [000341] D------N----                 |  +--*  LCL_VAR   ref    V23 tmp16        
               [000136] --CXG+------                 |  \--*  CALL      ref    System.DateTime.ToString
               [000135] -----+------ this in rcx     |     \--*  ADDR      byref 
               [000134] ----G+-N----                 |        \--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                     |        \--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
               [000343] ------------ arg0 in rcx     +--*  LCL_VAR   ref    V23 tmp16        
               [000340] #---G+------ arg1 in rdx     \--*  IND       ref   
               [000339] H----+------                    \--*  CNS_INT(h) long   0x75003200 "	 Waiting for list processing to complete..."

------------ BB14 [0F9..102), preds={BB13,BB27} succs={BB15}

***** BB14
STMT00036 (IL 0x0F9...0x0FF)
               [000143] -A-XG+------              *  ASG       ref   
               [000142] D----+-N----              +--*  LCL_VAR   ref    V04 loc2         
               [000141] ---XG+------              \--*  IND       ref   
               [000347] -----+------                 \--*  ADD       byref 
               [000140] -----+------                    +--*  LCL_VAR   ref    V00 this         
               [000346] -----+------                    \--*  CNS_INT   long   8 field offset Fseq[_myList]

***** BB14
STMT00037 (IL 0x100...0x101)
               [000146] -A--G+------              *  ASG       int   
               [000145] D---G+-N----              +--*  LCL_VAR   int   (AX) V05 loc3         
               [000144] -----+------              \--*  CNS_INT   int    0

------------ BB15 [102..122) -> BB22 (cond), preds={BB14} succs={BB19,BB22}

***** BB15
STMT00038 (IL 0x102...0x120)
               [000150] --CXG+------              *  CALL      void   System.Threading.Monitor.Enter
               [000149] -----+------ arg1 in rdx  +--*  LCL_VAR_ADDR long   V05 loc3         
               [000147] -----+------ arg0 in rcx  \--*  LCL_VAR   ref    V04 loc2         

***** BB15
STMT00039 (IL 0x10A...  ???)
               [000158] ---XG+------              *  JTRUE     void  
               [000157] N--XG+-N-U--              \--*  EQ        int   
               [000153] ---XG+------                 +--*  IND       ref   
               [000351] ---XG+------                 |  \--*  ADD       byref 
               [000152] ---XG+------                 |     +--*  IND       ref   
               [000353] -----+------                 |     |  \--*  ADD       byref 
               [000151] -----+------                 |     |     +--*  LCL_VAR   ref    V00 this         
               [000352] -----+------                 |     |     \--*  CNS_INT   long   8 field offset Fseq[_myList]
               [000350] -----+------                 |     \--*  CNS_INT   long   8 field offset Fseq[Head]
               [000156] ---XG+------                 \--*  IND       ref   
               [000355] ---XG+------                    \--*  ADD       byref 
               [000155] ---XG+------                       +--*  IND       ref   
               [000357] -----+------                       |  \--*  ADD       byref 
               [000154] -----+------                       |     +--*  LCL_VAR   ref    V00 this         
               [000356] -----+------                       |     \--*  CNS_INT   long   8 field offset Fseq[_myList]
               [000354] -----+------                       \--*  CNS_INT   long   16 field offset Fseq[Tail]

------------ BB19 [126..129) -> BB27 (cond), preds={BB15} succs={BB20,BB27}

***** BB19
STMT00069 (IL   ???...  ???)
               [000261] ----G+------              *  JTRUE     void  
               [000262] J---G+-N----              \--*  EQ        int   
               [000358] ----G+------                 +--*  CAST      int <- bool <- int
               [000263] ----G+------                 |  \--*  LCL_VAR   int   (AX) V05 loc3         
               [000264] -----+------                 \--*  CNS_INT   int    0

------------ BB20 [129..130) -> BB27 (always), preds={BB19} succs={BB27}

***** BB20
STMT00070 (IL   ???...  ???)
               [000265] --CXG+------              *  CALL      void   System.Threading.Monitor.Exit
               [000266] -----+------ arg0 in rcx  \--*  LCL_VAR   ref    V04 loc2         

------------ BB22 [???..???) -> BB24 (callf), preds={BB15} succs={BB24}

------------ BB23 [???..???) -> BB28 (ALWAYS), preds={BB26} succs={BB28}

------------ BB27 [130..139) -> BB14 (always), preds={BB19,BB20} succs={BB14}

***** BB27
STMT00040 (IL 0x130...0x137)
               [000160] --CXG+------              *  CALL      void   System.Threading.Thread.Sleep
               [000159] -----+------ arg0 in rcx  \--*  CNS_INT   int    100

------------ BB28 [139..17D), preds={BB23} succs={BB29}

***** BB28
STMT00041 (IL 0x139...0x13E)
               [000164] -ACXG+------              *  ASG       struct (copy)
               [000162] D---G+-N----              +--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  +--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
               [000161] --CXG+------              \--*  CALL      struct System.DateTime.get_Now

***** BB28
STMT00042 (IL 0x13F...0x178)
               [000170] --CXG+------              *  CALL      void   System.Console.WriteLine
               [000169] --CXG+------ arg0 in rcx  \--*  CALL      ref    System.String.Concat
               [000367] -ACXG-----L- arg0 SETUP      +--*  ASG       ref   
               [000366] D------N----                 |  +--*  LCL_VAR   ref    V24 tmp17        
               [000167] --CXG+------                 |  \--*  CALL      ref    System.DateTime.ToString
               [000166] -----+------ this in rcx     |     \--*  ADDR      byref 
               [000165] ----G+-N----                 |        \--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                     |        \--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
               [000368] ------------ arg0 in rcx     +--*  LCL_VAR   ref    V24 tmp17        
               [000365] #---G+------ arg1 in rdx     \--*  IND       ref   
               [000364] H----+------                    \--*  CNS_INT(h) long   0x75003208 "	 Done.  Profiler is active, available options:"

***** BB28
STMT00043 (IL 0x155...  ???)
               [000172] --CXG+------              *  CALL      void   System.Console.WriteLine
               [000372] #---G+------ arg0 in rcx  \--*  IND       ref   
               [000371] H----+------                 \--*  CNS_INT(h) long   0x75003210 "   Q = quit"

***** BB28
STMT00044 (IL 0x15F...  ???)
               [000174] --CXG+------              *  CALL      void   System.Console.WriteLine
               [000375] #---G+------ arg0 in rcx  \--*  IND       ref   
               [000374] H----+------                 \--*  CNS_INT(h) long   0x75003218 "   H = heap snapshot"

***** BB28
STMT00045 (IL 0x169...  ???)
               [000176] --CXG+------              *  CALL      void   System.Console.WriteLine
               [000378] #---G+------ arg0 in rcx  \--*  IND       ref   
               [000377] H----+------                 \--*  CNS_INT(h) long   0x75003220 "   G = GC (max gen)"

***** BB28
STMT00046 (IL 0x173...  ???)
               [000178] --CXG+------              *  CALL      void   System.Console.WriteLine
               [000381] #---G+------ arg0 in rcx  \--*  IND       ref   
               [000380] H----+------                 \--*  CNS_INT(h) long   0x75003228 "   R = clear the running flag to stop the consumer thread"

------------ BB29 [17D..18F) -> BB31 (cond), preds={BB28,BB30,BB32,BB34,BB35} succs={BB30,BB31}

***** BB29
STMT00048 (IL   ???...  ???)
               [000233] S-CXG+------              *  CALL      void   System.ConsolePal.ReadKey
               [000235] -----+------ arg0 in rcx  +--*  ADDR      long  
               [000236] ----G+-N----              |  \--*  LCL_VAR   struct<System.ConsoleKeyInfo, 12>(AX)(P) V06 loc4         
                                                  |  \--*    ushort V06._keyChar (offs=0x00) -> V18 tmp11        
                                                  |  \--*    int    V06._key (offs=0x04) -> V19 tmp12        
                                                  |  \--*    int    V06._mods (offs=0x08) -> V20 tmp13        
               [000232] -----+------ arg1 in rdx  \--*  CNS_INT   int    0

***** BB29
STMT00050 (IL   ???...  ???)
               [000189] ----G+------              *  JTRUE     void  
               [000188] N---G+-N-U--              \--*  NE        int   
               [000240] ----G+------                 +--*  LCL_VAR   int   (AX) V19 tmp12        
               [000187] -----+------                 \--*  CNS_INT   int    71

------------ BB30 [18F..19B) -> BB29 (always), preds={BB29} succs={BB29}

***** BB30
STMT00061 (IL 0x18F...0x199)
               [000222] --CXG+------              *  CALL      void   System.GC.Collect
               [000221] --CXG+------ arg0 in rcx  \--*  CALL      int    System.GC.get_MaxGeneration

------------ BB31 [19B..1A6) -> BB33 (cond), preds={BB29} succs={BB32,BB33}

***** BB31
STMT00052 (IL   ???...  ???)
               [000196] ----G+------              *  JTRUE     void  
               [000195] N---G+-N-U--              \--*  NE        int   
               [000244] ----G+------                 +--*  LCL_VAR   int   (AX) V19 tmp12        
               [000194] -----+------                 \--*  CNS_INT   int    72

------------ BB32 [1A6..1AD) -> BB29 (always), preds={BB31} succs={BB29}

***** BB32
STMT00060 (IL 0x1A6...0x1AB)
               [000220] --CXG+------              *  CALL      void   System.Diagnostics.Debugger.Break

------------ BB33 [1AD..1B8) -> BB35 (cond), preds={BB31} succs={BB34,BB35}

***** BB33
STMT00054 (IL   ???...  ???)
               [000203] ----G+------              *  JTRUE     void  
               [000202] N---G+-N-U--              \--*  NE        int   
               [000248] ----G+------                 +--*  LCL_VAR   int   (AX) V19 tmp12        
               [000201] -----+------                 \--*  CNS_INT   int    82

------------ BB34 [1B8..1C1) -> BB29 (always), preds={BB33} succs={BB29}

***** BB34
STMT00059 (IL 0x1B8...0x1BA)
               [000219] -A-XG+------              *  ASG       bool  
               [000218] ---XG+-N----              +--*  IND       bool  
               [000387] -----+------              |  \--*  ADD       byref 
               [000216] -----+------              |     +--*  LCL_VAR   ref    V00 this         
               [000386] -----+------              |     \--*  CNS_INT   long   16 field offset Fseq[_running]
               [000217] -----+------              \--*  CNS_INT   int    0

------------ BB35 [1C1..1CC) -> BB29 (cond), preds={BB33} succs={BB36,BB29}

***** BB35
STMT00056 (IL   ???...  ???)
               [000210] ----G+------              *  JTRUE     void  
               [000209] N---G+-N-U--              \--*  NE        int   
               [000252] ----G+------                 +--*  LCL_VAR   int   (AX) V19 tmp12        
               [000208] -----+------                 \--*  CNS_INT   int    81

------------ BB36 [1CC..1D4) (return), preds={BB35} succs={}

***** BB36
STMT00057 (IL 0x1CC...0x1CE)
               [000214] -A-XG+------              *  ASG       bool  
               [000213] ---XG+-N----              +--*  IND       bool  
               [000389] -----+------              |  \--*  ADD       byref 
               [000211] -----+------              |     +--*  LCL_VAR   ref    V00 this         
               [000388] -----+------              |     \--*  CNS_INT   long   16 field offset Fseq[_running]
               [000212] -----+------              \--*  CNS_INT   int    0

***** BB36
STMT00058 (IL 0x1D3...0x1D3)
               [000215] -----+------              *  RETURN    void  

------------ BB08 [0CA..0CD) -> BB10 (cond), preds={} succs={BB09,BB10}

***** BB08
STMT00031 (IL 0x0CA...0x0CB)
               [000126] ----G+------              *  JTRUE     void  
               [000125] J---G+-N----              \--*  EQ        int   
               [000336] ----G+------                 +--*  CAST      int <- bool <- int
               [000123] ----G+------                 |  \--*  LCL_VAR   int   (AX) V05 loc3         
               [000124] -----+------                 \--*  CNS_INT   int    0

------------ BB09 [0CD..0D3), preds={BB08} succs={BB10}

***** BB09
STMT00033 (IL 0x0CD...0x0CE)
               [000129] --CXG+------              *  CALL      void   System.Threading.Monitor.Exit
               [000128] -----+------ arg0 in rcx  \--*  LCL_VAR   ref    V04 loc2         

------------ BB10 [0D3..0D4) (finret), preds={BB08,BB09} succs={}

***** BB10
STMT00032 (IL 0x0D3...0x0D3)
               [000127] -----+------              *  RETFILT   void  

------------ BB24 [126..129) -> BB26 (cond), preds={BB22} succs={BB25,BB26}

***** BB24
STMT00062 (IL 0x126...0x127)
               [000226] ----G+------              *  JTRUE     void  
               [000225] J---G+-N----              \--*  EQ        int   
               [000360] ----G+------                 +--*  CAST      int <- bool <- int
               [000223] ----G+------                 |  \--*  LCL_VAR   int   (AX) V05 loc3         
               [000224] -----+------                 \--*  CNS_INT   int    0

------------ BB25 [129..12F), preds={BB24} succs={BB26}

***** BB25
STMT00064 (IL 0x129...0x12A)
               [000229] --CXG+------              *  CALL      void   System.Threading.Monitor.Exit
               [000228] -----+------ arg0 in rcx  \--*  LCL_VAR   ref    V04 loc2         

------------ BB26 [12F..130) (finret), preds={BB24,BB25} succs={BB23}

***** BB26
STMT00063 (IL 0x12F...0x12F)
               [000227] -----+------              *  RETFILT   void  

-------------------------------------------------------------------------------------------------------------------
*************** In fgDebugCheckBBlist

*************** Starting PHASE Optimize layout

*************** In fgUpdateFlowGraph()
Before updating the flow graph:

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..072)                                     i hascall gcsafe newobj 
BB37 [0044]  1       BB01                  1       [???..???)-> BB13 ( cond )                     internal 
BB02 [0001]  2       BB12,BB37             1       [072..07B)                                     i bwd bwd-target 
BB03 [0002]  1  0    BB02                  1       [07B..0CA)                 T0      try { }     keep i try hascall gcsafe newobj bwd 
BB05 [0038]  1       BB03                  1       [0CA..0CD)-> BB11 ( cond )                     keep i bwd cfb 
BB06 [0039]  1       BB05                  1       [0CD..0D4)-> BB11 (always)                     i hascall bwd 
BB11 [0006]  2       BB05,BB06             1       [0D4..0D8)                                     i bwd 
BB12 [0007]  1       BB11                  1       [0D8..0DD)-> BB02 ( cond )                     i bwd 
BB13 [0008]  2       BB12,BB37             1       [0DD..0F9)                                     i hascall gcsafe 
BB14 [0009]  2       BB13,BB27             1       [0F9..102)                                     i bwd bwd-target 
BB15 [0010]  1  1    BB14                  1       [102..122)-> BB22 ( cond ) T1      try { }     keep i try hascall gcsafe bwd 
BB19 [0041]  1       BB15                  1       [126..129)-> BB27 ( cond )                     keep i bwd cfb 
BB20 [0042]  1       BB19                  1       [129..130)-> BB27 (always)                     i hascall bwd 
BB22 [0030]  1       BB15                  1       [???..???)-> BB24 (callf )                     i internal 
BB23 [0031]  1       BB26                  1       [???..???)-> BB28 (ALWAYS)                     i internal KEEP 
BB27 [0016]  2       BB19,BB20             1       [130..139)-> BB14 (always)                     i hascall gcsafe bwd 
BB28 [0017]  1       BB23                  1       [139..17D)                                     i hascall gcsafe 
BB29 [0018]  5       BB28,BB30,BB32,BB34,BB35   1       [17D..18F)-> BB31 ( cond )                     i hascall gcsafe bwd bwd-target 
BB30 [0019]  1       BB29                  1       [18F..19B)-> BB29 (always)                     i hascall gcsafe bwd 
BB31 [0020]  1       BB29                  1       [19B..1A6)-> BB33 ( cond )                     i bwd 
BB32 [0021]  1       BB31                  1       [1A6..1AD)-> BB29 (always)                     i hascall gcsafe bwd 
BB33 [0022]  1       BB31                  1       [1AD..1B8)-> BB35 ( cond )                     i bwd 
BB34 [0023]  1       BB33                  1       [1B8..1C1)-> BB29 (always)                     i bwd 
BB35 [0024]  1       BB33                  1       [1C1..1CC)-> BB29 ( cond )                     i bwd 
BB36 [0025]  1       BB35                  1       [1CC..1D4)        (return)                     i 
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ funclets follow
BB08 [0003]  1     0                       1       [0CA..0CD)-> BB10 ( cond )    H0 F fault {     keep i flet bwd 
BB09 [0004]  1     0 BB08                  1       [0CD..0D3)                    H0               i hascall bwd 
BB10 [0005]  2     0 BB08,BB09             1       [0D3..0D4)        (finret)    H0   }           i bwd 
BB24 [0013]  2     1 BB22                  1       [126..129)-> BB26 ( cond )    H1 F finally {   keep i flet bwd 
BB25 [0014]  1     1 BB24                  1       [129..12F)                    H1               i hascall bwd 
BB26 [0015]  2     1 BB24,BB25             1       [12F..130)        (finret)    H1   }           i bwd 
-----------------------------------------------------------------------------------------------------------------------------------------


Compacting blocks BB01 and BB37:
*************** In fgDebugCheckBBlist

Removing unconditional jump to next block (BB06 -> BB11) (converted BB06 to fall-through)

Compacting blocks BB11 and BB12:
*************** In fgDebugCheckBBlist

After updating the flow graph:

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..072)-> BB13 ( cond )                     i hascall gcsafe newobj 
BB02 [0001]  2       BB01,BB11             1       [072..07B)                                     i bwd bwd-target 
BB03 [0002]  1  0    BB02                  1       [07B..0CA)                 T0      try { }     keep i try hascall gcsafe newobj bwd 
BB05 [0038]  1       BB03                  1       [0CA..0CD)-> BB11 ( cond )                     keep i bwd cfb 
BB06 [0039]  1       BB05                  1       [0CD..0D4)                                     i hascall bwd 
BB11 [0006]  2       BB05,BB06             1       [0D4..0DD)-> BB02 ( cond )                     i bwd 
BB13 [0008]  2       BB01,BB11             1       [0DD..0F9)                                     i hascall gcsafe 
BB14 [0009]  2       BB13,BB27             1       [0F9..102)                                     i bwd bwd-target 
BB15 [0010]  1  1    BB14                  1       [102..122)-> BB22 ( cond ) T1      try { }     keep i try hascall gcsafe bwd 
BB19 [0041]  1       BB15                  1       [126..129)-> BB27 ( cond )                     keep i bwd cfb 
BB20 [0042]  1       BB19                  1       [129..130)-> BB27 (always)                     i hascall bwd 
BB22 [0030]  1       BB15                  1       [???..???)-> BB24 (callf )                     i internal 
BB23 [0031]  1       BB26                  1       [???..???)-> BB28 (ALWAYS)                     i internal KEEP 
BB27 [0016]  2       BB19,BB20             1       [130..139)-> BB14 (always)                     i hascall gcsafe bwd 
BB28 [0017]  1       BB23                  1       [139..17D)                                     i hascall gcsafe 
BB29 [0018]  5       BB28,BB30,BB32,BB34,BB35   1       [17D..18F)-> BB31 ( cond )                     i hascall gcsafe bwd bwd-target 
BB30 [0019]  1       BB29                  1       [18F..19B)-> BB29 (always)                     i hascall gcsafe bwd 
BB31 [0020]  1       BB29                  1       [19B..1A6)-> BB33 ( cond )                     i bwd 
BB32 [0021]  1       BB31                  1       [1A6..1AD)-> BB29 (always)                     i hascall gcsafe bwd 
BB33 [0022]  1       BB31                  1       [1AD..1B8)-> BB35 ( cond )                     i bwd 
BB34 [0023]  1       BB33                  1       [1B8..1C1)-> BB29 (always)                     i bwd 
BB35 [0024]  1       BB33                  1       [1C1..1CC)-> BB29 ( cond )                     i bwd 
BB36 [0025]  1       BB35                  1       [1CC..1D4)        (return)                     i 
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ funclets follow
BB08 [0003]  1     0                       1       [0CA..0CD)-> BB10 ( cond )    H0 F fault {     keep i flet bwd 
BB09 [0004]  1     0 BB08                  1       [0CD..0D3)                    H0               i hascall bwd 
BB10 [0005]  2     0 BB08,BB09             1       [0D3..0D4)        (finret)    H0   }           i bwd 
BB24 [0013]  2     1 BB22                  1       [126..129)-> BB26 ( cond )    H1 F finally {   keep i flet bwd 
BB25 [0014]  1     1 BB24                  1       [129..12F)                    H1               i hascall bwd 
BB26 [0015]  2     1 BB24,BB25             1       [12F..130)        (finret)    H1   }           i bwd 
-----------------------------------------------------------------------------------------------------------------------------------------

***************  Exception Handling table
index  eTry, eHnd
  0  ::            - Try at BB03..BB03 [07B..0CA), Fault   at BB08..BB10 [0CA..0D4)
  1  ::            - Try at BB15..BB15 [102..126), Finally at BB24..BB26 [126..130)
*************** In fgDebugCheckBBlist

*************** In fgExpandRarelyRunBlocks()
*************** In fgReorderBlocks()

Initial BasicBlocks
-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..072)-> BB13 ( cond )                     i hascall gcsafe newobj 
BB02 [0001]  2       BB01,BB11             1       [072..07B)                                     i bwd bwd-target 
BB03 [0002]  1  0    BB02                  1       [07B..0CA)                 T0      try { }     keep i try hascall gcsafe newobj bwd 
BB05 [0038]  1       BB03                  1       [0CA..0CD)-> BB11 ( cond )                     keep i bwd cfb 
BB06 [0039]  1       BB05                  1       [0CD..0D4)                                     i hascall bwd 
BB11 [0006]  2       BB05,BB06             1       [0D4..0DD)-> BB02 ( cond )                     i bwd 
BB13 [0008]  2       BB01,BB11             1       [0DD..0F9)                                     i hascall gcsafe 
BB14 [0009]  2       BB13,BB27             1       [0F9..102)                                     i bwd bwd-target 
BB15 [0010]  1  1    BB14                  1       [102..122)-> BB22 ( cond ) T1      try { }     keep i try hascall gcsafe bwd 
BB19 [0041]  1       BB15                  1       [126..129)-> BB27 ( cond )                     keep i bwd cfb 
BB20 [0042]  1       BB19                  1       [129..130)-> BB27 (always)                     i hascall bwd 
BB22 [0030]  1       BB15                  1       [???..???)-> BB24 (callf )                     i internal 
BB23 [0031]  1       BB26                  1       [???..???)-> BB28 (ALWAYS)                     i internal KEEP 
BB27 [0016]  2       BB19,BB20             1       [130..139)-> BB14 (always)                     i hascall gcsafe bwd 
BB28 [0017]  1       BB23                  1       [139..17D)                                     i hascall gcsafe 
BB29 [0018]  5       BB28,BB30,BB32,BB34,BB35   1       [17D..18F)-> BB31 ( cond )                     i hascall gcsafe bwd bwd-target 
BB30 [0019]  1       BB29                  1       [18F..19B)-> BB29 (always)                     i hascall gcsafe bwd 
BB31 [0020]  1       BB29                  1       [19B..1A6)-> BB33 ( cond )                     i bwd 
BB32 [0021]  1       BB31                  1       [1A6..1AD)-> BB29 (always)                     i hascall gcsafe bwd 
BB33 [0022]  1       BB31                  1       [1AD..1B8)-> BB35 ( cond )                     i bwd 
BB34 [0023]  1       BB33                  1       [1B8..1C1)-> BB29 (always)                     i bwd 
BB35 [0024]  1       BB33                  1       [1C1..1CC)-> BB29 ( cond )                     i bwd 
BB36 [0025]  1       BB35                  1       [1CC..1D4)        (return)                     i 
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ funclets follow
BB08 [0003]  1     0                       1       [0CA..0CD)-> BB10 ( cond )    H0 F fault {     keep i flet bwd 
BB09 [0004]  1     0 BB08                  1       [0CD..0D3)                    H0               i hascall bwd 
BB10 [0005]  2     0 BB08,BB09             1       [0D3..0D4)        (finret)    H0   }           i bwd 
BB24 [0013]  2     1 BB22                  1       [126..129)-> BB26 ( cond )    H1 F finally {   keep i flet bwd 
BB25 [0014]  1     1 BB24                  1       [129..12F)                    H1               i hascall bwd 
BB26 [0015]  2     1 BB24,BB25             1       [12F..130)        (finret)    H1   }           i bwd 
-----------------------------------------------------------------------------------------------------------------------------------------


Duplication of the conditional block BB29 (always branch from BB30) not done, because the cost of duplication (17) is greater than 6, validProfileWeights = false

*************** In fgUpdateFlowGraph()
Before updating the flow graph:

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..072)-> BB13 ( cond )                     i hascall gcsafe newobj 
BB02 [0001]  2       BB01,BB11             1       [072..07B)                                     i bwd bwd-target 
BB03 [0002]  1  0    BB02                  1       [07B..0CA)                 T0      try { }     keep i try hascall gcsafe newobj bwd 
BB05 [0038]  1       BB03                  1       [0CA..0CD)-> BB11 ( cond )                     keep i bwd cfb 
BB06 [0039]  1       BB05                  1       [0CD..0D4)                                     i hascall bwd 
BB11 [0006]  2       BB05,BB06             1       [0D4..0DD)-> BB02 ( cond )                     i bwd 
BB13 [0008]  2       BB01,BB11             1       [0DD..0F9)                                     i hascall gcsafe 
BB14 [0009]  2       BB13,BB27             1       [0F9..102)                                     i bwd bwd-target 
BB15 [0010]  1  1    BB14                  1       [102..122)-> BB22 ( cond ) T1      try { }     keep i try hascall gcsafe bwd 
BB19 [0041]  1       BB15                  1       [126..129)-> BB27 ( cond )                     keep i bwd cfb 
BB20 [0042]  1       BB19                  1       [129..130)-> BB27 (always)                     i hascall bwd 
BB22 [0030]  1       BB15                  1       [???..???)-> BB24 (callf )                     i internal 
BB23 [0031]  1       BB26                  1       [???..???)-> BB28 (ALWAYS)                     i internal KEEP 
BB27 [0016]  2       BB19,BB20             1       [130..139)-> BB14 (always)                     i hascall gcsafe bwd 
BB28 [0017]  1       BB23                  1       [139..17D)                                     i hascall gcsafe 
BB29 [0018]  5       BB28,BB30,BB32,BB34,BB35   1       [17D..18F)-> BB31 ( cond )                     i hascall gcsafe bwd bwd-target 
BB30 [0019]  1       BB29                  1       [18F..19B)-> BB29 (always)                     i hascall gcsafe bwd 
BB31 [0020]  1       BB29                  1       [19B..1A6)-> BB33 ( cond )                     i bwd 
BB32 [0021]  1       BB31                  1       [1A6..1AD)-> BB29 (always)                     i hascall gcsafe bwd 
BB33 [0022]  1       BB31                  1       [1AD..1B8)-> BB35 ( cond )                     i bwd 
BB34 [0023]  1       BB33                  1       [1B8..1C1)-> BB29 (always)                     i bwd 
BB35 [0024]  1       BB33                  1       [1C1..1CC)-> BB29 ( cond )                     i bwd 
BB36 [0025]  1       BB35                  1       [1CC..1D4)        (return)                     i 
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ funclets follow
BB08 [0003]  1     0                       1       [0CA..0CD)-> BB10 ( cond )    H0 F fault {     keep i flet bwd 
BB09 [0004]  1     0 BB08                  1       [0CD..0D3)                    H0               i hascall bwd 
BB10 [0005]  2     0 BB08,BB09             1       [0D3..0D4)        (finret)    H0   }           i bwd 
BB24 [0013]  2     1 BB22                  1       [126..129)-> BB26 ( cond )    H1 F finally {   keep i flet bwd 
BB25 [0014]  1     1 BB24                  1       [129..12F)                    H1               i hascall bwd 
BB26 [0015]  2     1 BB24,BB25             1       [12F..130)        (finret)    H1   }           i bwd 
-----------------------------------------------------------------------------------------------------------------------------------------

*************** In fgDebugCheckBBlist

*************** Finishing PHASE Optimize layout
Trees after Optimize layout

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..072)-> BB13 ( cond )                     i hascall gcsafe newobj 
BB02 [0001]  2       BB01,BB11             1       [072..07B)                                     i bwd bwd-target 
BB03 [0002]  1  0    BB02                  1       [07B..0CA)                 T0      try { }     keep i try hascall gcsafe newobj bwd 
BB05 [0038]  1       BB03                  1       [0CA..0CD)-> BB11 ( cond )                     keep i bwd cfb 
BB06 [0039]  1       BB05                  1       [0CD..0D4)                                     i hascall bwd 
BB11 [0006]  2       BB05,BB06             1       [0D4..0DD)-> BB02 ( cond )                     i bwd 
BB13 [0008]  2       BB01,BB11             1       [0DD..0F9)                                     i hascall gcsafe 
BB14 [0009]  2       BB13,BB27             1       [0F9..102)                                     i bwd bwd-target 
BB15 [0010]  1  1    BB14                  1       [102..122)-> BB22 ( cond ) T1      try { }     keep i try hascall gcsafe bwd 
BB19 [0041]  1       BB15                  1       [126..129)-> BB27 ( cond )                     keep i bwd cfb 
BB20 [0042]  1       BB19                  1       [129..130)-> BB27 (always)                     i hascall bwd 
BB22 [0030]  1       BB15                  1       [???..???)-> BB24 (callf )                     i internal 
BB23 [0031]  1       BB26                  1       [???..???)-> BB28 (ALWAYS)                     i internal KEEP 
BB27 [0016]  2       BB19,BB20             1       [130..139)-> BB14 (always)                     i hascall gcsafe bwd 
BB28 [0017]  1       BB23                  1       [139..17D)                                     i hascall gcsafe 
BB29 [0018]  5       BB28,BB30,BB32,BB34,BB35   1       [17D..18F)-> BB31 ( cond )                     i hascall gcsafe bwd bwd-target 
BB30 [0019]  1       BB29                  1       [18F..19B)-> BB29 (always)                     i hascall gcsafe bwd 
BB31 [0020]  1       BB29                  1       [19B..1A6)-> BB33 ( cond )                     i bwd 
BB32 [0021]  1       BB31                  1       [1A6..1AD)-> BB29 (always)                     i hascall gcsafe bwd 
BB33 [0022]  1       BB31                  1       [1AD..1B8)-> BB35 ( cond )                     i bwd 
BB34 [0023]  1       BB33                  1       [1B8..1C1)-> BB29 (always)                     i bwd 
BB35 [0024]  1       BB33                  1       [1C1..1CC)-> BB29 ( cond )                     i bwd 
BB36 [0025]  1       BB35                  1       [1CC..1D4)        (return)                     i 
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ funclets follow
BB08 [0003]  1     0                       1       [0CA..0CD)-> BB10 ( cond )    H0 F fault {     keep i flet bwd 
BB09 [0004]  1     0 BB08                  1       [0CD..0D3)                    H0               i hascall bwd 
BB10 [0005]  2     0 BB08,BB09             1       [0D3..0D4)        (finret)    H0   }           i bwd 
BB24 [0013]  2     1 BB22                  1       [126..129)-> BB26 ( cond )    H1 F finally {   keep i flet bwd 
BB25 [0014]  1     1 BB24                  1       [129..12F)                    H1               i hascall bwd 
BB26 [0015]  2     1 BB24,BB25             1       [12F..130)        (finret)    H1   }           i bwd 
-----------------------------------------------------------------------------------------------------------------------------------------

------------ BB01 [000..072) -> BB13 (cond), preds={} succs={BB02,BB13}

***** BB01
STMT00000 (IL 0x000...0x005)
               [000003] -ACXG+------              *  ASG       struct (copy)
               [000001] D---G+-N----              +--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  +--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
               [000000] --CXG+------              \--*  CALL      struct System.DateTime.get_Now

***** BB01
STMT00001 (IL 0x006...0x022)
               [000009] --CXG+------              *  CALL      void   System.Console.WriteLine
               [000008] --CXG+------ arg0 in rcx  \--*  CALL      ref    System.String.Concat
               [000272] -ACXG-----L- arg0 SETUP      +--*  ASG       ref   
               [000271] D------N----                 |  +--*  LCL_VAR   ref    V21 tmp14        
               [000006] --CXG+------                 |  \--*  CALL      ref    System.DateTime.ToString
               [000005] -----+------ this in rcx     |     \--*  ADDR      byref 
               [000004] ----G+-N----                 |        \--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                     |        \--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
               [000273] ------------ arg0 in rcx     +--*  LCL_VAR   ref    V21 tmp14        
               [000270] #---G+------ arg1 in rdx     \--*  IND       ref   
               [000269] H----+------                    \--*  CNS_INT(h) long   0x750031F0 "	 Created list"

***** BB01
STMT00002 (IL 0x01C...  ???)
               [000014] -AC--+------              *  ASG       ref   
               [000013] D----+-N----              +--*  LCL_VAR   ref    V08 tmp1         
               [000012] --C--+------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
               [000011] H----+------ arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb3ee2350 method

***** BB01
STMT00003 (IL   ???...  ???)
               [000016] --CXG+------              *  CALL      void   FalseLeakRepro.List..ctor
               [000015] -----+------ this in rcx  \--*  LCL_VAR   ref    V08 tmp1         

***** BB01
STMT00004 (IL 0x022...  ???)
               [000019] -A-XG+------              *  ASG       ref   
               [000018] ---XG+-N----              +--*  IND       ref   
               [000279] -----+------              |  \--*  ADD       byref 
               [000010] -----+------              |     +--*  LCL_VAR   ref    V00 this         
               [000278] -----+------              |     \--*  CNS_INT   long   8 field offset Fseq[_myList]
               [000017] -----+------              \--*  LCL_VAR   ref    V08 tmp1         

***** BB01
STMT00005 (IL 0x027...0x037)
               [000026] -AC--+------              *  ASG       ref   
               [000025] D----+-N----              +--*  LCL_VAR   ref    V09 tmp2         
               [000024] --C--+------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
               [000023] H----+------ arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb3b058b8 token

***** BB01
STMT00007 (IL   ???...  ???)
               [000030] -A-XG+------              *  ASG       ref   
               [000029] D----+-N----              +--*  LCL_VAR   ref    V10 tmp3         
               [000022] ---XG+------              \--*  IND       ref   
               [000282] ---XG+------                 \--*  ADD       byref 
               [000021] ---XG+------                    +--*  IND       ref   
               [000284] -----+------                    |  \--*  ADD       byref 
               [000020] -----+------                    |     +--*  LCL_VAR   ref    V00 this         
               [000283] -----+------                    |     \--*  CNS_INT   long   8 field offset Fseq[_myList]
               [000281] -----+------                    \--*  CNS_INT   long   8 field offset Fseq[Head]

***** BB01
STMT00006 (IL   ???...  ???)
               [000028] --CXG+------              *  CALL      void   System.Object..ctor
               [000027] -----+------ this in rcx  \--*  LCL_VAR   ref    V09 tmp2         

***** BB01
STMT00008 (IL 0x037...  ???)
               [000034] -A-XG+------              *  ASG       ref   
               [000033] ---XG+-N----              +--*  IND       ref   
               [000287] -----+------              |  \--*  ADD       byref 
               [000031] -----+------              |     +--*  LCL_VAR   ref    V10 tmp3         
               [000286] -----+------              |     \--*  CNS_INT   long   16 field offset Fseq[Data]
               [000032] -----+------              \--*  LCL_VAR   ref    V09 tmp2         

***** BB01
STMT00009 (IL 0x03C...0x057)
               [000040] -AC--+------              *  ASG       ref   
               [000039] D----+-N----              +--*  LCL_VAR   ref    V11 tmp4         
               [000038] --C--+------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
               [000037] H----+------ arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb3ee6200 token

***** BB01
STMT00010 (IL   ???...  ???)
               [000042] --CXG+------              *  CALL      void   System.MulticastDelegate.CtorClosed
               [000041] -----+------ this in rcx  +--*  LCL_VAR   ref    V11 tmp4         
               [000035] -----+------ arg1 in rdx  +--*  LCL_VAR   ref    V00 this         
               [000036] H----+------ arg2 in r8   \--*  CNS_INT(h) long   0x7ffdb3b213f8 ftn

***** BB01
STMT00011 (IL 0x048...  ???)
               [000047] -AC--+------              *  ASG       ref   
               [000046] D----+-N----              +--*  LCL_VAR   ref    V12 tmp5         
               [000045] --C--+------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWFAST
               [000044] H----+------ arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb3c84e80 token

***** BB01
STMT00012 (IL   ???...  ???)
               [000049] --CXG+------              *  CALL      void   System.Threading.Thread..ctor
               [000048] -----+------ this in rcx  +--*  LCL_VAR   ref    V12 tmp5         
               [000043] -----+------ arg1 in rdx  \--*  LCL_VAR   ref    V11 tmp4         

***** BB01
STMT00013 (IL 0x04D...  ???)
               [000051] --CXG+------              *  CALL nullcheck void   System.Threading.Thread.Start
               [000050] -----+------ this in rcx  \--*  LCL_VAR   ref    V12 tmp5         

***** BB01
STMT00014 (IL 0x052...  ???)
               [000055] -ACXG+------              *  ASG       struct (copy)
               [000053] D---G+-N----              +--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  +--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
               [000052] --CXG+------              \--*  CALL      struct System.DateTime.get_Now

***** BB01
STMT00015 (IL 0x058...0x06F)
               [000061] --CXG+------              *  CALL      void   System.Console.WriteLine
               [000060] --CXG+------ arg0 in rcx  \--*  CALL      ref    System.String.Concat
               [000300] -ACXG-----L- arg0 SETUP      +--*  ASG       ref   
               [000299] D------N----                 |  +--*  LCL_VAR   ref    V22 tmp15        
               [000058] --CXG+------                 |  \--*  CALL      ref    System.DateTime.ToString
               [000057] -----+------ this in rcx     |     \--*  ADDR      byref 
               [000056] ----G+-N----                 |        \--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                     |        \--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
               [000301] ------------ arg0 in rcx     +--*  LCL_VAR   ref    V22 tmp15        
               [000298] #---G+------ arg1 in rdx     \--*  IND       ref   
               [000297] H----+------                    \--*  CNS_INT(h) long   0x750031F8 "	 Consumer thread started, adding items..."

***** BB01
STMT00016 (IL 0x06E...  ???)
               [000064] -A---+------              *  ASG       int   
               [000063] D----+-N----              +--*  LCL_VAR   int    V03 loc1         
               [000062] -----+------              \--*  CNS_INT   int    0

***** BB01
STMT00072 (IL 0x0D8...  ???)
     (  7,  6) [000390] ------------              *  JTRUE     void  
     (  5,  4) [000391] J------N----              \--*  GE        int   
     (  3,  2) [000392] ------------                 +--*  LCL_VAR   int    V03 loc1         
     (  1,  1) [000393] ------------                 \--*  CNS_INT   int    10

------------ BB02 [072..07B), preds={BB01,BB11} succs={BB03}

***** BB02
STMT00018 (IL 0x072...0x078)
               [000072] -A-XG+------              *  ASG       ref   
               [000071] D----+-N----              +--*  LCL_VAR   ref    V04 loc2         
               [000070] ---XG+------              \--*  IND       ref   
               [000305] -----+------                 \--*  ADD       byref 
               [000069] -----+------                    +--*  LCL_VAR   ref    V00 this         
               [000304] -----+------                    \--*  CNS_INT   long   8 field offset Fseq[_myList]

***** BB02
STMT00019 (IL 0x079...0x07A)
               [000075] -A--G+------              *  ASG       int   
               [000074] D---G+-N----              +--*  LCL_VAR   int   (AX) V05 loc3         
               [000073] -----+------              \--*  CNS_INT   int    0

------------ BB03 [07B..0CA), preds={BB02} succs={BB05}

***** BB03
STMT00020 (IL 0x07B...0x093)
               [000079] --CXG+------              *  CALL      void   System.Threading.Monitor.Enter
               [000078] -----+------ arg1 in rdx  +--*  LCL_VAR_ADDR long   V05 loc3         
               [000076] -----+------ arg0 in rcx  \--*  LCL_VAR   ref    V04 loc2         

***** BB03
STMT00021 (IL 0x083...  ???)
               [000086] -AC--+------              *  ASG       ref   
               [000085] D----+-N----              +--*  LCL_VAR   ref    V13 tmp6         
               [000084] --C--+------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
               [000083] H----+------ arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb3ee58a8 method

***** BB03
STMT00023 (IL   ???...  ???)
               [000090] -A-XG+------              *  ASG       ref   
               [000089] D----+-N----              +--*  LCL_VAR   ref    V14 tmp7         
               [000082] ---XG+------              \--*  IND       ref   
               [000310] ---XG+------                 \--*  ADD       byref 
               [000081] ---XG+------                    +--*  IND       ref   
               [000312] -----+------                    |  \--*  ADD       byref 
               [000080] -----+------                    |     +--*  LCL_VAR   ref    V00 this         
               [000311] -----+------                    |     \--*  CNS_INT   long   8 field offset Fseq[_myList]
               [000309] -----+------                    \--*  CNS_INT   long   8 field offset Fseq[Head]

***** BB03
STMT00065 (IL   ???...  ???)
               [000230] --CXG+------              *  CALL      void   System.Object..ctor
               [000087] -----+------ this in rcx  \--*  LCL_VAR   ref    V13 tmp6         

***** BB03
STMT00024 (IL 0x093...  ???)
               [000094] -A-XG+------              *  ASG       ref   
               [000093] ---XG+-N----              +--*  IND       ref   
               [000315] -----+------              |  \--*  ADD       byref 
               [000091] -----+------              |     +--*  LCL_VAR   ref    V14 tmp7         
               [000314] -----+------              |     \--*  CNS_INT   long   8 field offset Fseq[Next]
               [000092] -----+------              \--*  LCL_VAR   ref    V13 tmp6         

***** BB03
STMT00025 (IL 0x098...0x0AE)
               [000102] -A-XG+------              *  ASG       ref   
               [000101] ---XG+-N----              +--*  IND       ref   
               [000317] ---XG+------              |  \--*  ADD       byref 
               [000096] ---XG+------              |     +--*  IND       ref   
               [000319] -----+------              |     |  \--*  ADD       byref 
               [000095] -----+------              |     |     +--*  LCL_VAR   ref    V00 this         
               [000318] -----+------              |     |     \--*  CNS_INT   long   8 field offset Fseq[_myList]
               [000316] -----+------              |     \--*  CNS_INT   long   8 field offset Fseq[Head]
               [000100] ---XG+------              \--*  IND       ref   
               [000321] ---XG+------                 \--*  ADD       byref 
               [000099] ---XG+------                    +--*  IND       ref   
               [000323] ---XG+------                    |  \--*  ADD       byref 
               [000098] ---XG+------                    |     +--*  IND       ref   
               [000325] -----+------                    |     |  \--*  ADD       byref 
               [000097] -----+------                    |     |     +--*  LCL_VAR   ref    V00 this         
               [000324] -----+------                    |     |     \--*  CNS_INT   long   8 field offset Fseq[_myList]
               [000322] -----+------                    |     \--*  CNS_INT   long   8 field offset Fseq[Head]
               [000320] -----+------                    \--*  CNS_INT   long   8 field offset Fseq[Next]

***** BB03
STMT00026 (IL 0x0B3...0x0C3)
               [000109] -AC--+------              *  ASG       ref   
               [000108] D----+-N----              +--*  LCL_VAR   ref    V15 tmp8         
               [000107] --C--+------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
               [000106] H----+------ arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb3b058b8 token

***** BB03
STMT00028 (IL   ???...  ???)
               [000113] -A-XG+------              *  ASG       ref   
               [000112] D----+-N----              +--*  LCL_VAR   ref    V16 tmp9         
               [000105] ---XG+------              \--*  IND       ref   
               [000328] ---XG+------                 \--*  ADD       byref 
               [000104] ---XG+------                    +--*  IND       ref   
               [000330] -----+------                    |  \--*  ADD       byref 
               [000103] -----+------                    |     +--*  LCL_VAR   ref    V00 this         
               [000329] -----+------                    |     \--*  CNS_INT   long   8 field offset Fseq[_myList]
               [000327] -----+------                    \--*  CNS_INT   long   8 field offset Fseq[Head]

***** BB03
STMT00027 (IL   ???...  ???)
               [000111] --CXG+------              *  CALL      void   System.Object..ctor
               [000110] -----+------ this in rcx  \--*  LCL_VAR   ref    V15 tmp8         

***** BB03
STMT00029 (IL 0x0C3...  ???)
               [000117] -A-XG+------              *  ASG       ref   
               [000116] ---XG+-N----              +--*  IND       ref   
               [000333] -----+------              |  \--*  ADD       byref 
               [000114] -----+------              |     +--*  LCL_VAR   ref    V16 tmp9         
               [000332] -----+------              |     \--*  CNS_INT   long   16 field offset Fseq[Data]
               [000115] -----+------              \--*  LCL_VAR   ref    V15 tmp8         

------------ BB05 [0CA..0CD) -> BB11 (cond), preds={BB03} succs={BB06,BB11}

***** BB05
STMT00066 (IL   ???...  ???)
               [000254] ----G+------              *  JTRUE     void  
               [000255] J---G+-N----              \--*  EQ        int   
               [000334] ----G+------                 +--*  CAST      int <- bool <- int
               [000256] ----G+------                 |  \--*  LCL_VAR   int   (AX) V05 loc3         
               [000257] -----+------                 \--*  CNS_INT   int    0

------------ BB06 [0CD..0D4), preds={BB05} succs={BB11}

***** BB06
STMT00067 (IL   ???...  ???)
               [000258] --CXG+------              *  CALL      void   System.Threading.Monitor.Exit
               [000259] -----+------ arg0 in rcx  \--*  LCL_VAR   ref    V04 loc2         

------------ BB11 [0D4..0DD) -> BB02 (cond), preds={BB05,BB06} succs={BB13,BB02}

***** BB11
STMT00030 (IL 0x0D4...0x0D7)
               [000122] -A---+------              *  ASG       int   
               [000121] D----+-N----              +--*  LCL_VAR   int    V03 loc1         
               [000120] -----+------              \--*  ADD       int   
               [000118] -----+------                 +--*  LCL_VAR   int    V03 loc1         
               [000119] -----+------                 \--*  CNS_INT   int    1

***** BB11
STMT00017 (IL 0x0D8...0x0DB)
     (  7,  6) [000068] ------------              *  JTRUE     void  
     (  5,  4) [000067] J------N----              \--*  LT        int   
     (  3,  2) [000065] ------------                 +--*  LCL_VAR   int    V03 loc1         
     (  1,  1) [000066] ------------                 \--*  CNS_INT   int    10

------------ BB13 [0DD..0F9), preds={BB01,BB11} succs={BB14}

***** BB13
STMT00034 (IL 0x0DD...0x0E2)
               [000133] -ACXG+------              *  ASG       struct (copy)
               [000131] D---G+-N----              +--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  +--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
               [000130] --CXG+------              \--*  CALL      struct System.DateTime.get_Now

***** BB13
STMT00035 (IL 0x0E3...0x0F4)
               [000139] --CXG+------              *  CALL      void   System.Console.WriteLine
               [000138] --CXG+------ arg0 in rcx  \--*  CALL      ref    System.String.Concat
               [000342] -ACXG-----L- arg0 SETUP      +--*  ASG       ref   
               [000341] D------N----                 |  +--*  LCL_VAR   ref    V23 tmp16        
               [000136] --CXG+------                 |  \--*  CALL      ref    System.DateTime.ToString
               [000135] -----+------ this in rcx     |     \--*  ADDR      byref 
               [000134] ----G+-N----                 |        \--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                     |        \--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
               [000343] ------------ arg0 in rcx     +--*  LCL_VAR   ref    V23 tmp16        
               [000340] #---G+------ arg1 in rdx     \--*  IND       ref   
               [000339] H----+------                    \--*  CNS_INT(h) long   0x75003200 "	 Waiting for list processing to complete..."

------------ BB14 [0F9..102), preds={BB13,BB27} succs={BB15}

***** BB14
STMT00036 (IL 0x0F9...0x0FF)
               [000143] -A-XG+------              *  ASG       ref   
               [000142] D----+-N----              +--*  LCL_VAR   ref    V04 loc2         
               [000141] ---XG+------              \--*  IND       ref   
               [000347] -----+------                 \--*  ADD       byref 
               [000140] -----+------                    +--*  LCL_VAR   ref    V00 this         
               [000346] -----+------                    \--*  CNS_INT   long   8 field offset Fseq[_myList]

***** BB14
STMT00037 (IL 0x100...0x101)
               [000146] -A--G+------              *  ASG       int   
               [000145] D---G+-N----              +--*  LCL_VAR   int   (AX) V05 loc3         
               [000144] -----+------              \--*  CNS_INT   int    0

------------ BB15 [102..122) -> BB22 (cond), preds={BB14} succs={BB19,BB22}

***** BB15
STMT00038 (IL 0x102...0x120)
               [000150] --CXG+------              *  CALL      void   System.Threading.Monitor.Enter
               [000149] -----+------ arg1 in rdx  +--*  LCL_VAR_ADDR long   V05 loc3         
               [000147] -----+------ arg0 in rcx  \--*  LCL_VAR   ref    V04 loc2         

***** BB15
STMT00039 (IL 0x10A...  ???)
               [000158] ---XG+------              *  JTRUE     void  
               [000157] N--XG+-N-U--              \--*  EQ        int   
               [000153] ---XG+------                 +--*  IND       ref   
               [000351] ---XG+------                 |  \--*  ADD       byref 
               [000152] ---XG+------                 |     +--*  IND       ref   
               [000353] -----+------                 |     |  \--*  ADD       byref 
               [000151] -----+------                 |     |     +--*  LCL_VAR   ref    V00 this         
               [000352] -----+------                 |     |     \--*  CNS_INT   long   8 field offset Fseq[_myList]
               [000350] -----+------                 |     \--*  CNS_INT   long   8 field offset Fseq[Head]
               [000156] ---XG+------                 \--*  IND       ref   
               [000355] ---XG+------                    \--*  ADD       byref 
               [000155] ---XG+------                       +--*  IND       ref   
               [000357] -----+------                       |  \--*  ADD       byref 
               [000154] -----+------                       |     +--*  LCL_VAR   ref    V00 this         
               [000356] -----+------                       |     \--*  CNS_INT   long   8 field offset Fseq[_myList]
               [000354] -----+------                       \--*  CNS_INT   long   16 field offset Fseq[Tail]

------------ BB19 [126..129) -> BB27 (cond), preds={BB15} succs={BB20,BB27}

***** BB19
STMT00069 (IL   ???...  ???)
               [000261] ----G+------              *  JTRUE     void  
               [000262] J---G+-N----              \--*  EQ        int   
               [000358] ----G+------                 +--*  CAST      int <- bool <- int
               [000263] ----G+------                 |  \--*  LCL_VAR   int   (AX) V05 loc3         
               [000264] -----+------                 \--*  CNS_INT   int    0

------------ BB20 [129..130) -> BB27 (always), preds={BB19} succs={BB27}

***** BB20
STMT00070 (IL   ???...  ???)
               [000265] --CXG+------              *  CALL      void   System.Threading.Monitor.Exit
               [000266] -----+------ arg0 in rcx  \--*  LCL_VAR   ref    V04 loc2         

------------ BB22 [???..???) -> BB24 (callf), preds={BB15} succs={BB24}

------------ BB23 [???..???) -> BB28 (ALWAYS), preds={BB26} succs={BB28}

------------ BB27 [130..139) -> BB14 (always), preds={BB19,BB20} succs={BB14}

***** BB27
STMT00040 (IL 0x130...0x137)
               [000160] --CXG+------              *  CALL      void   System.Threading.Thread.Sleep
               [000159] -----+------ arg0 in rcx  \--*  CNS_INT   int    100

------------ BB28 [139..17D), preds={BB23} succs={BB29}

***** BB28
STMT00041 (IL 0x139...0x13E)
               [000164] -ACXG+------              *  ASG       struct (copy)
               [000162] D---G+-N----              +--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  +--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
               [000161] --CXG+------              \--*  CALL      struct System.DateTime.get_Now

***** BB28
STMT00042 (IL 0x13F...0x178)
               [000170] --CXG+------              *  CALL      void   System.Console.WriteLine
               [000169] --CXG+------ arg0 in rcx  \--*  CALL      ref    System.String.Concat
               [000367] -ACXG-----L- arg0 SETUP      +--*  ASG       ref   
               [000366] D------N----                 |  +--*  LCL_VAR   ref    V24 tmp17        
               [000167] --CXG+------                 |  \--*  CALL      ref    System.DateTime.ToString
               [000166] -----+------ this in rcx     |     \--*  ADDR      byref 
               [000165] ----G+-N----                 |        \--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                     |        \--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
               [000368] ------------ arg0 in rcx     +--*  LCL_VAR   ref    V24 tmp17        
               [000365] #---G+------ arg1 in rdx     \--*  IND       ref   
               [000364] H----+------                    \--*  CNS_INT(h) long   0x75003208 "	 Done.  Profiler is active, available options:"

***** BB28
STMT00043 (IL 0x155...  ???)
               [000172] --CXG+------              *  CALL      void   System.Console.WriteLine
               [000372] #---G+------ arg0 in rcx  \--*  IND       ref   
               [000371] H----+------                 \--*  CNS_INT(h) long   0x75003210 "   Q = quit"

***** BB28
STMT00044 (IL 0x15F...  ???)
               [000174] --CXG+------              *  CALL      void   System.Console.WriteLine
               [000375] #---G+------ arg0 in rcx  \--*  IND       ref   
               [000374] H----+------                 \--*  CNS_INT(h) long   0x75003218 "   H = heap snapshot"

***** BB28
STMT00045 (IL 0x169...  ???)
               [000176] --CXG+------              *  CALL      void   System.Console.WriteLine
               [000378] #---G+------ arg0 in rcx  \--*  IND       ref   
               [000377] H----+------                 \--*  CNS_INT(h) long   0x75003220 "   G = GC (max gen)"

***** BB28
STMT00046 (IL 0x173...  ???)
               [000178] --CXG+------              *  CALL      void   System.Console.WriteLine
               [000381] #---G+------ arg0 in rcx  \--*  IND       ref   
               [000380] H----+------                 \--*  CNS_INT(h) long   0x75003228 "   R = clear the running flag to stop the consumer thread"

------------ BB29 [17D..18F) -> BB31 (cond), preds={BB28,BB30,BB32,BB34,BB35} succs={BB30,BB31}

***** BB29
STMT00048 (IL   ???...  ???)
     ( 18, 11) [000233] S-CXG-------              *  CALL      void   System.ConsolePal.ReadKey
     (  3,  3) [000235] ------------ arg0 in rcx  +--*  ADDR      long  
     (  3,  2) [000236] ----G--N----              |  \--*  LCL_VAR   struct<System.ConsoleKeyInfo, 12>(AX)(P) V06 loc4         
                                                  |  \--*    ushort V06._keyChar (offs=0x00) -> V18 tmp11        
                                                  |  \--*    int    V06._key (offs=0x04) -> V19 tmp12        
                                                  |  \--*    int    V06._mods (offs=0x08) -> V20 tmp13        
     (  1,  1) [000232] ------------ arg1 in rdx  \--*  CNS_INT   int    0

***** BB29
STMT00050 (IL   ???...  ???)
     (  7,  6) [000189] ----G-------              *  JTRUE     void  
     (  5,  4) [000188] N---G--N-U--              \--*  NE        int   
     (  3,  2) [000240] ----G-------                 +--*  LCL_VAR   int   (AX) V19 tmp12        
     (  1,  1) [000187] ------------                 \--*  CNS_INT   int    71

------------ BB30 [18F..19B) -> BB29 (always), preds={BB29} succs={BB29}

***** BB30
STMT00061 (IL 0x18F...0x199)
               [000222] --CXG+------              *  CALL      void   System.GC.Collect
               [000221] --CXG+------ arg0 in rcx  \--*  CALL      int    System.GC.get_MaxGeneration

------------ BB31 [19B..1A6) -> BB33 (cond), preds={BB29} succs={BB32,BB33}

***** BB31
STMT00052 (IL   ???...  ???)
               [000196] ----G+------              *  JTRUE     void  
               [000195] N---G+-N-U--              \--*  NE        int   
               [000244] ----G+------                 +--*  LCL_VAR   int   (AX) V19 tmp12        
               [000194] -----+------                 \--*  CNS_INT   int    72

------------ BB32 [1A6..1AD) -> BB29 (always), preds={BB31} succs={BB29}

***** BB32
STMT00060 (IL 0x1A6...0x1AB)
               [000220] --CXG+------              *  CALL      void   System.Diagnostics.Debugger.Break

------------ BB33 [1AD..1B8) -> BB35 (cond), preds={BB31} succs={BB34,BB35}

***** BB33
STMT00054 (IL   ???...  ???)
               [000203] ----G+------              *  JTRUE     void  
               [000202] N---G+-N-U--              \--*  NE        int   
               [000248] ----G+------                 +--*  LCL_VAR   int   (AX) V19 tmp12        
               [000201] -----+------                 \--*  CNS_INT   int    82

------------ BB34 [1B8..1C1) -> BB29 (always), preds={BB33} succs={BB29}

***** BB34
STMT00059 (IL 0x1B8...0x1BA)
               [000219] -A-XG+------              *  ASG       bool  
               [000218] ---XG+-N----              +--*  IND       bool  
               [000387] -----+------              |  \--*  ADD       byref 
               [000216] -----+------              |     +--*  LCL_VAR   ref    V00 this         
               [000386] -----+------              |     \--*  CNS_INT   long   16 field offset Fseq[_running]
               [000217] -----+------              \--*  CNS_INT   int    0

------------ BB35 [1C1..1CC) -> BB29 (cond), preds={BB33} succs={BB36,BB29}

***** BB35
STMT00056 (IL   ???...  ???)
               [000210] ----G+------              *  JTRUE     void  
               [000209] N---G+-N-U--              \--*  NE        int   
               [000252] ----G+------                 +--*  LCL_VAR   int   (AX) V19 tmp12        
               [000208] -----+------                 \--*  CNS_INT   int    81

------------ BB36 [1CC..1D4) (return), preds={BB35} succs={}

***** BB36
STMT00057 (IL 0x1CC...0x1CE)
               [000214] -A-XG+------              *  ASG       bool  
               [000213] ---XG+-N----              +--*  IND       bool  
               [000389] -----+------              |  \--*  ADD       byref 
               [000211] -----+------              |     +--*  LCL_VAR   ref    V00 this         
               [000388] -----+------              |     \--*  CNS_INT   long   16 field offset Fseq[_running]
               [000212] -----+------              \--*  CNS_INT   int    0

***** BB36
STMT00058 (IL 0x1D3...0x1D3)
               [000215] -----+------              *  RETURN    void  

------------ BB08 [0CA..0CD) -> BB10 (cond), preds={} succs={BB09,BB10}

***** BB08
STMT00031 (IL 0x0CA...0x0CB)
               [000126] ----G+------              *  JTRUE     void  
               [000125] J---G+-N----              \--*  EQ        int   
               [000336] ----G+------                 +--*  CAST      int <- bool <- int
               [000123] ----G+------                 |  \--*  LCL_VAR   int   (AX) V05 loc3         
               [000124] -----+------                 \--*  CNS_INT   int    0

------------ BB09 [0CD..0D3), preds={BB08} succs={BB10}

***** BB09
STMT00033 (IL 0x0CD...0x0CE)
               [000129] --CXG+------              *  CALL      void   System.Threading.Monitor.Exit
               [000128] -----+------ arg0 in rcx  \--*  LCL_VAR   ref    V04 loc2         

------------ BB10 [0D3..0D4) (finret), preds={BB08,BB09} succs={}

***** BB10
STMT00032 (IL 0x0D3...0x0D3)
               [000127] -----+------              *  RETFILT   void  

------------ BB24 [126..129) -> BB26 (cond), preds={BB22} succs={BB25,BB26}

***** BB24
STMT00062 (IL 0x126...0x127)
               [000226] ----G+------              *  JTRUE     void  
               [000225] J---G+-N----              \--*  EQ        int   
               [000360] ----G+------                 +--*  CAST      int <- bool <- int
               [000223] ----G+------                 |  \--*  LCL_VAR   int   (AX) V05 loc3         
               [000224] -----+------                 \--*  CNS_INT   int    0

------------ BB25 [129..12F), preds={BB24} succs={BB26}

***** BB25
STMT00064 (IL 0x129...0x12A)
               [000229] --CXG+------              *  CALL      void   System.Threading.Monitor.Exit
               [000228] -----+------ arg0 in rcx  \--*  LCL_VAR   ref    V04 loc2         

------------ BB26 [12F..130) (finret), preds={BB24,BB25} succs={BB23}

***** BB26
STMT00063 (IL 0x12F...0x12F)
               [000227] -----+------              *  RETFILT   void  

-------------------------------------------------------------------------------------------------------------------
*************** In fgDebugCheckBBlist

*************** Starting PHASE Compute blocks reachability
*************** In fgComputeReachability
*************** In fgDebugCheckBBlist

Renumbering the basic blocks for fgComputeReachability pass #1

*************** Before renumbering the basic blocks

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..072)-> BB13 ( cond )                     i hascall gcsafe newobj 
BB02 [0001]  2       BB01,BB11             1       [072..07B)                                     i bwd bwd-target 
BB03 [0002]  1  0    BB02                  1       [07B..0CA)                 T0      try { }     keep i try hascall gcsafe newobj bwd 
BB05 [0038]  1       BB03                  1       [0CA..0CD)-> BB11 ( cond )                     keep i bwd cfb 
BB06 [0039]  1       BB05                  1       [0CD..0D4)                                     i hascall bwd 
BB11 [0006]  2       BB05,BB06             1       [0D4..0DD)-> BB02 ( cond )                     i bwd 
BB13 [0008]  2       BB01,BB11             1       [0DD..0F9)                                     i hascall gcsafe 
BB14 [0009]  2       BB13,BB27             1       [0F9..102)                                     i bwd bwd-target 
BB15 [0010]  1  1    BB14                  1       [102..122)-> BB22 ( cond ) T1      try { }     keep i try hascall gcsafe bwd 
BB19 [0041]  1       BB15                  1       [126..129)-> BB27 ( cond )                     keep i bwd cfb 
BB20 [0042]  1       BB19                  1       [129..130)-> BB27 (always)                     i hascall bwd 
BB22 [0030]  1       BB15                  1       [???..???)-> BB24 (callf )                     i internal 
BB23 [0031]  1       BB26                  1       [???..???)-> BB28 (ALWAYS)                     i internal KEEP 
BB27 [0016]  2       BB19,BB20             1       [130..139)-> BB14 (always)                     i hascall gcsafe bwd 
BB28 [0017]  1       BB23                  1       [139..17D)                                     i hascall gcsafe 
BB29 [0018]  5       BB28,BB30,BB32,BB34,BB35   1       [17D..18F)-> BB31 ( cond )                     i hascall gcsafe bwd bwd-target 
BB30 [0019]  1       BB29                  1       [18F..19B)-> BB29 (always)                     i hascall gcsafe bwd 
BB31 [0020]  1       BB29                  1       [19B..1A6)-> BB33 ( cond )                     i bwd 
BB32 [0021]  1       BB31                  1       [1A6..1AD)-> BB29 (always)                     i hascall gcsafe bwd 
BB33 [0022]  1       BB31                  1       [1AD..1B8)-> BB35 ( cond )                     i bwd 
BB34 [0023]  1       BB33                  1       [1B8..1C1)-> BB29 (always)                     i bwd 
BB35 [0024]  1       BB33                  1       [1C1..1CC)-> BB29 ( cond )                     i bwd 
BB36 [0025]  1       BB35                  1       [1CC..1D4)        (return)                     i 
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ funclets follow
BB08 [0003]  1     0                       1       [0CA..0CD)-> BB10 ( cond )    H0 F fault {     keep i flet bwd 
BB09 [0004]  1     0 BB08                  1       [0CD..0D3)                    H0               i hascall bwd 
BB10 [0005]  2     0 BB08,BB09             1       [0D3..0D4)        (finret)    H0   }           i bwd 
BB24 [0013]  2     1 BB22                  1       [126..129)-> BB26 ( cond )    H1 F finally {   keep i flet bwd 
BB25 [0014]  1     1 BB24                  1       [129..12F)                    H1               i hascall bwd 
BB26 [0015]  2     1 BB24,BB25             1       [12F..130)        (finret)    H1   }           i bwd 
-----------------------------------------------------------------------------------------------------------------------------------------

***************  Exception Handling table
index  eTry, eHnd
  0  ::            - Try at BB03..BB03 [07B..0CA), Fault   at BB08..BB10 [0CA..0D4)
  1  ::            - Try at BB15..BB15 [102..126), Finally at BB24..BB26 [126..130)
Renumber BB05 to BB04
Renumber BB06 to BB05
Renumber BB11 to BB06
Renumber BB13 to BB07
Renumber BB14 to BB08
Renumber BB15 to BB09
Renumber BB19 to BB10
Renumber BB20 to BB11
Renumber BB22 to BB12
Renumber BB23 to BB13
Renumber BB27 to BB14
Renumber BB28 to BB15
Renumber BB29 to BB16
Renumber BB30 to BB17
Renumber BB31 to BB18
Renumber BB32 to BB19
Renumber BB33 to BB20
Renumber BB34 to BB21
Renumber BB35 to BB22
Renumber BB36 to BB23
Renumber BB08 to BB24
Renumber BB09 to BB25
Renumber BB10 to BB26
Renumber BB24 to BB27
Renumber BB25 to BB28
Renumber BB26 to BB29

*************** After renumbering the basic blocks

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..072)-> BB07 ( cond )                     i hascall gcsafe newobj 
BB02 [0001]  2       BB01,BB06             1       [072..07B)                                     i bwd bwd-target 
BB03 [0002]  1  0    BB02                  1       [07B..0CA)                 T0      try { }     keep i try hascall gcsafe newobj bwd 
BB04 [0038]  1       BB03                  1       [0CA..0CD)-> BB06 ( cond )                     keep i bwd cfb 
BB05 [0039]  1       BB04                  1       [0CD..0D4)                                     i hascall bwd 
BB06 [0006]  2       BB04,BB05             1       [0D4..0DD)-> BB02 ( cond )                     i bwd 
BB07 [0008]  2       BB01,BB06             1       [0DD..0F9)                                     i hascall gcsafe 
BB08 [0009]  2       BB07,BB14             1       [0F9..102)                                     i bwd bwd-target 
BB09 [0010]  1  1    BB08                  1       [102..122)-> BB12 ( cond ) T1      try { }     keep i try hascall gcsafe bwd 
BB10 [0041]  1       BB09                  1       [126..129)-> BB14 ( cond )                     keep i bwd cfb 
BB11 [0042]  1       BB10                  1       [129..130)-> BB14 (always)                     i hascall bwd 
BB12 [0030]  1       BB09                  1       [???..???)-> BB27 (callf )                     i internal 
BB13 [0031]  1       BB29                  1       [???..???)-> BB15 (ALWAYS)                     i internal KEEP 
BB14 [0016]  2       BB10,BB11             1       [130..139)-> BB08 (always)                     i hascall gcsafe bwd 
BB15 [0017]  1       BB13                  1       [139..17D)                                     i hascall gcsafe 
BB16 [0018]  5       BB15,BB17,BB19,BB21,BB22   1       [17D..18F)-> BB18 ( cond )                     i hascall gcsafe bwd bwd-target 
BB17 [0019]  1       BB16                  1       [18F..19B)-> BB16 (always)                     i hascall gcsafe bwd 
BB18 [0020]  1       BB16                  1       [19B..1A6)-> BB20 ( cond )                     i bwd 
BB19 [0021]  1       BB18                  1       [1A6..1AD)-> BB16 (always)                     i hascall gcsafe bwd 
BB20 [0022]  1       BB18                  1       [1AD..1B8)-> BB22 ( cond )                     i bwd 
BB21 [0023]  1       BB20                  1       [1B8..1C1)-> BB16 (always)                     i bwd 
BB22 [0024]  1       BB20                  1       [1C1..1CC)-> BB16 ( cond )                     i bwd 
BB23 [0025]  1       BB22                  1       [1CC..1D4)        (return)                     i 
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ funclets follow
BB24 [0003]  1     0                       1       [0CA..0CD)-> BB26 ( cond )    H0 F fault {     keep i flet bwd 
BB25 [0004]  1     0 BB24                  1       [0CD..0D3)                    H0               i hascall bwd 
BB26 [0005]  2     0 BB24,BB25             1       [0D3..0D4)        (finret)    H0   }           i bwd 
BB27 [0013]  2     1 BB12                  1       [126..129)-> BB29 ( cond )    H1 F finally {   keep i flet bwd 
BB28 [0014]  1     1 BB27                  1       [129..12F)                    H1               i hascall bwd 
BB29 [0015]  2     1 BB27,BB28             1       [12F..130)        (finret)    H1   }           i bwd 
-----------------------------------------------------------------------------------------------------------------------------------------

***************  Exception Handling table
index  eTry, eHnd
  0  ::            - Try at BB03..BB03 [07B..0CA), Fault   at BB24..BB26 [0CA..0D4)
  1  ::            - Try at BB09..BB09 [102..126), Finally at BB27..BB29 [126..130)

New BlockSet epoch 3, # of blocks (including unused BB00): 30, bitset array size: 1 (short)
Enter blocks: BB01 BB24 BB27 

After computing reachability sets:
------------------------------------------------
BBnum  Reachable by 
------------------------------------------------
BB01 : BB01 
BB02 : BB01 BB02 BB03 BB04 BB05 BB06 
BB03 : BB01 BB02 BB03 BB04 BB05 BB06 
BB04 : BB01 BB02 BB03 BB04 BB05 BB06 
BB05 : BB01 BB02 BB03 BB04 BB05 BB06 
BB06 : BB01 BB02 BB03 BB04 BB05 BB06 
BB07 : BB01 BB02 BB03 BB04 BB05 BB06 BB07 
BB08 : BB01 BB02 BB03 BB04 BB05 BB06 BB07 BB08 BB09 BB10 BB11 BB14 
BB09 : BB01 BB02 BB03 BB04 BB05 BB06 BB07 BB08 BB09 BB10 BB11 BB14 
BB10 : BB01 BB02 BB03 BB04 BB05 BB06 BB07 BB08 BB09 BB10 BB11 BB14 
BB11 : BB01 BB02 BB03 BB04 BB05 BB06 BB07 BB08 BB09 BB10 BB11 BB14 
BB12 : BB01 BB02 BB03 BB04 BB05 BB06 BB07 BB08 BB09 BB10 BB11 BB12 BB14 
BB13 : BB01 BB02 BB03 BB04 BB05 BB06 BB07 BB08 BB09 BB10 BB11 BB12 BB13 BB14 BB27 BB28 BB29 
BB14 : BB01 BB02 BB03 BB04 BB05 BB06 BB07 BB08 BB09 BB10 BB11 BB14 
BB15 : BB01 BB02 BB03 BB04 BB05 BB06 BB07 BB08 BB09 BB10 BB11 BB12 BB13 BB14 BB15 BB27 BB28 BB29 
BB16 : BB01 BB02 BB03 BB04 BB05 BB06 BB07 BB08 BB09 BB10 BB11 BB12 BB13 BB14 BB15 BB16 BB17 BB18 BB19 BB20 BB21 BB22 BB27 BB28 BB29 
BB17 : BB01 BB02 BB03 BB04 BB05 BB06 BB07 BB08 BB09 BB10 BB11 BB12 BB13 BB14 BB15 BB16 BB17 BB18 BB19 BB20 BB21 BB22 BB27 BB28 BB29 
BB18 : BB01 BB02 BB03 BB04 BB05 BB06 BB07 BB08 BB09 BB10 BB11 BB12 BB13 BB14 BB15 BB16 BB17 BB18 BB19 BB20 BB21 BB22 BB27 BB28 BB29 
BB19 : BB01 BB02 BB03 BB04 BB05 BB06 BB07 BB08 BB09 BB10 BB11 BB12 BB13 BB14 BB15 BB16 BB17 BB18 BB19 BB20 BB21 BB22 BB27 BB28 BB29 
BB20 : BB01 BB02 BB03 BB04 BB05 BB06 BB07 BB08 BB09 BB10 BB11 BB12 BB13 BB14 BB15 BB16 BB17 BB18 BB19 BB20 BB21 BB22 BB27 BB28 BB29 
BB21 : BB01 BB02 BB03 BB04 BB05 BB06 BB07 BB08 BB09 BB10 BB11 BB12 BB13 BB14 BB15 BB16 BB17 BB18 BB19 BB20 BB21 BB22 BB27 BB28 BB29 
BB22 : BB01 BB02 BB03 BB04 BB05 BB06 BB07 BB08 BB09 BB10 BB11 BB12 BB13 BB14 BB15 BB16 BB17 BB18 BB19 BB20 BB21 BB22 BB27 BB28 BB29 
BB23 : BB01 BB02 BB03 BB04 BB05 BB06 BB07 BB08 BB09 BB10 BB11 BB12 BB13 BB14 BB15 BB16 BB17 BB18 BB19 BB20 BB21 BB22 BB23 BB27 BB28 BB29 
BB24 : BB24 
BB25 : BB24 BB25 
BB26 : BB24 BB25 BB26 
BB27 : BB01 BB02 BB03 BB04 BB05 BB06 BB07 BB08 BB09 BB10 BB11 BB12 BB14 BB27 
BB28 : BB01 BB02 BB03 BB04 BB05 BB06 BB07 BB08 BB09 BB10 BB11 BB12 BB14 BB27 BB28 
BB29 : BB01 BB02 BB03 BB04 BB05 BB06 BB07 BB08 BB09 BB10 BB11 BB12 BB14 BB27 BB28 BB29 

After computing reachability:

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..072)-> BB07 ( cond )                     i hascall gcsafe newobj 
BB02 [0001]  2       BB01,BB06             1       [072..07B)                                     i Loop gcsafe bwd bwd-target 
BB03 [0002]  1  0    BB02                  1       [07B..0CA)                 T0      try { }     keep i try hascall gcsafe newobj bwd 
BB04 [0038]  1       BB03                  1       [0CA..0CD)-> BB06 ( cond )                     keep i gcsafe bwd cfb 
BB05 [0039]  1       BB04                  1       [0CD..0D4)                                     i hascall gcsafe bwd 
BB06 [0006]  2       BB04,BB05             1       [0D4..0DD)-> BB02 ( cond )                     i gcsafe bwd 
BB07 [0008]  2       BB01,BB06             1       [0DD..0F9)                                     i hascall gcsafe 
BB08 [0009]  2       BB07,BB14             1       [0F9..102)                                     i Loop gcsafe bwd bwd-target 
BB09 [0010]  1  1    BB08                  1       [102..122)-> BB12 ( cond ) T1      try { }     keep i try hascall gcsafe bwd 
BB10 [0041]  1       BB09                  1       [126..129)-> BB14 ( cond )                     keep i gcsafe bwd cfb 
BB11 [0042]  1       BB10                  1       [129..130)-> BB14 (always)                     i hascall gcsafe bwd 
BB12 [0030]  1       BB09                  1       [???..???)-> BB27 (callf )                     i internal gcsafe 
BB13 [0031]  1       BB29                  1       [???..???)-> BB15 (ALWAYS)                     i internal gcsafe KEEP 
BB14 [0016]  2       BB10,BB11             1       [130..139)-> BB08 (always)                     i hascall gcsafe bwd 
BB15 [0017]  1       BB13                  1       [139..17D)                                     i hascall gcsafe 
BB16 [0018]  5       BB15,BB17,BB19,BB21,BB22   1       [17D..18F)-> BB18 ( cond )                     i Loop hascall gcsafe bwd bwd-target 
BB17 [0019]  1       BB16                  1       [18F..19B)-> BB16 (always)                     i hascall gcsafe bwd 
BB18 [0020]  1       BB16                  1       [19B..1A6)-> BB20 ( cond )                     i gcsafe bwd 
BB19 [0021]  1       BB18                  1       [1A6..1AD)-> BB16 (always)                     i hascall gcsafe bwd 
BB20 [0022]  1       BB18                  1       [1AD..1B8)-> BB22 ( cond )                     i gcsafe bwd 
BB21 [0023]  1       BB20                  1       [1B8..1C1)-> BB16 (always)                     i gcsafe bwd 
BB22 [0024]  1       BB20                  1       [1C1..1CC)-> BB16 ( cond )                     i gcsafe bwd 
BB23 [0025]  1       BB22                  1       [1CC..1D4)        (return)                     i gcsafe 
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ funclets follow
BB24 [0003]  1     0                       1       [0CA..0CD)-> BB26 ( cond )    H0 F fault {     keep i flet bwd 
BB25 [0004]  1     0 BB24                  1       [0CD..0D3)                    H0               i hascall bwd 
BB26 [0005]  2     0 BB24,BB25             1       [0D3..0D4)        (finret)    H0   }           i bwd 
BB27 [0013]  2     1 BB12                  1       [126..129)-> BB29 ( cond )    H1 F finally {   keep i gcsafe flet bwd 
BB28 [0014]  1     1 BB27                  1       [129..12F)                    H1               i hascall gcsafe bwd 
BB29 [0015]  2     1 BB27,BB28             1       [12F..130)        (finret)    H1   }           i gcsafe bwd 
-----------------------------------------------------------------------------------------------------------------------------------------

*************** In fgDebugCheckBBlist
*************** In fgComputeDoms
*************** In fgDebugCheckBBlist

Dominator computation start blocks (those blocks with no incoming edges):
BB01 BB24 
------------------------------------------------
BBnum  Dominated by
------------------------------------------------
BB24:  BB24 
BB25:  BB25 BB24 
BB26:  BB26 BB24 
BB01:  BB01 
BB02:  BB02 BB01 
BB03:  BB03 BB02 BB01 
BB04:  BB04 BB03 BB02 BB01 
BB05:  BB05 BB04 BB03 BB02 BB01 
BB06:  BB06 BB04 BB03 BB02 BB01 
BB07:  BB07 BB01 
BB08:  BB08 BB07 BB01 
BB09:  BB09 BB08 BB07 BB01 
BB10:  BB10 BB09 BB08 BB07 BB01 
BB11:  BB11 BB10 BB09 BB08 BB07 BB01 
BB14:  BB14 BB10 BB09 BB08 BB07 BB01 
BB12:  BB12 BB09 BB08 BB07 BB01 
BB27:  BB27 
BB28:  BB28 BB27 
BB29:  BB29 BB27 
BB13:  BB13 BB29 BB27 
BB15:  BB15 BB13 BB29 BB27 
BB16:  BB16 BB15 BB13 BB29 BB27 
BB17:  BB17 BB16 BB15 BB13 BB29 BB27 
BB18:  BB18 BB16 BB15 BB13 BB29 BB27 
BB19:  BB19 BB18 BB16 BB15 BB13 BB29 BB27 
BB20:  BB20 BB18 BB16 BB15 BB13 BB29 BB27 
BB21:  BB21 BB20 BB18 BB16 BB15 BB13 BB29 BB27 
BB22:  BB22 BB20 BB18 BB16 BB15 BB13 BB29 BB27 
BB23:  BB23 BB22 BB20 BB18 BB16 BB15 BB13 BB29 BB27 

Inside fgBuildDomTree

After computing the Dominance Tree:
BB01 : BB07 BB02 
BB02 : BB03 
BB03 : BB04 
BB04 : BB06 BB05 
BB07 : BB08 
BB08 : BB09 
BB09 : BB12 BB10 
BB10 : BB14 BB11 
BB13 : BB15 
BB15 : BB16 
BB16 : BB18 BB17 
BB18 : BB20 BB19 
BB20 : BB22 BB21 
BB22 : BB23 
BB24 : BB26 BB25 
BB27 : BB29 BB28 
BB29 : BB13 


After numbering the dominator tree:
BB01: pre=01, post=13
BB02: pre=09, post=12
BB03: pre=10, post=11
BB04: pre=11, post=10
BB05: pre=13, post=09
BB06: pre=12, post=08
BB07: pre=02, post=07
BB08: pre=03, post=06
BB09: pre=04, post=05
BB10: pre=06, post=04
BB11: pre=08, post=03
BB12: pre=05, post=01
BB13: pre=19, post=26
BB14: pre=07, post=02
BB15: pre=20, post=25
BB16: pre=21, post=24
BB17: pre=28, post=23
BB18: pre=22, post=22
BB19: pre=27, post=21
BB20: pre=23, post=20
BB21: pre=26, post=19
BB22: pre=24, post=18
BB23: pre=25, post=17
BB24: pre=14, post=16
BB25: pre=16, post=15
BB26: pre=15, post=14
BB27: pre=17, post=29
BB28: pre=29, post=28
BB29: pre=18, post=27

*************** Finishing PHASE Compute blocks reachability

*************** Starting PHASE Find loops
*************** In optFindLoops()
*************** In fgDebugCheckBBlist
*************** In optFindNaturalLoops()
Recorded loop L00, from BB02 to BB06 (Head=BB01, Entry=BB02, ExitCnt=1 at BB06) [over V03 (ADD 1 ) from 0LT10 ]
Relocated blocks [BB12..BB13] inserted after BB14

Removing unconditional jump to next block (BB11 -> BB14) (converted BB11 to fall-through)
Recorded loop L01, from BB08 to BB14 (Head=BB07, Entry=BB08, ExitCnt=1 at BB09)
Recorded loop L02, from BB16 to BB17 (Head=BB15, Entry=BB16, ExitCnt=1 at BB16)
Recorded loop (extended) L03, from BB16 to BB19 (Head=BB15, Entry=BB16, ExitCnt=1 at BB18)
Recorded loop (extended) L04, from BB16 to BB21 (Head=BB15, Entry=BB16, ExitCnt=1 at BB20)
Recorded loop (extended) L05, from BB16 to BB22 (Head=BB15, Entry=BB16, ExitCnt=1 at BB22)

*************** Before renumbering the basic blocks

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..072)-> BB07 ( cond )                     i hascall gcsafe newobj 
BB02 [0001]  2       BB01,BB06             1       [072..07B)                                     i Loop gcsafe bwd bwd-target 
BB03 [0002]  1  0    BB02                  1       [07B..0CA)                 T0      try { }     keep i try hascall gcsafe newobj bwd 
BB04 [0038]  1       BB03                  1       [0CA..0CD)-> BB06 ( cond )                     keep i gcsafe bwd cfb 
BB05 [0039]  1       BB04                  1       [0CD..0D4)                                     i hascall gcsafe bwd 
BB06 [0006]  2       BB04,BB05             1       [0D4..0DD)-> BB02 ( cond )                     i gcsafe bwd 
BB07 [0008]  2       BB01,BB06             1       [0DD..0F9)                                     i hascall gcsafe 
BB08 [0009]  2       BB07,BB14             1       [0F9..102)                                     i Loop gcsafe bwd bwd-target 
BB09 [0010]  1  1    BB08                  1       [102..122)-> BB12 ( cond ) T1      try { }     keep i try hascall gcsafe bwd 
BB10 [0041]  1       BB09                  1       [126..129)-> BB14 ( cond )                     keep i gcsafe bwd cfb 
BB11 [0042]  1       BB10                  1       [129..130)                                     i hascall gcsafe bwd 
BB14 [0016]  2       BB10,BB11             1       [130..139)-> BB08 (always)                     i hascall gcsafe bwd 
BB12 [0030]  1       BB09                  1       [???..???)-> BB27 (callf )                     i internal gcsafe 
BB13 [0031]  1       BB29                  1       [???..???)-> BB15 (ALWAYS)                     i internal gcsafe KEEP 
BB15 [0017]  1       BB13                  1       [139..17D)                                     i hascall gcsafe 
BB16 [0018]  5       BB15,BB17,BB19,BB21,BB22   1       [17D..18F)-> BB18 ( cond )                     i Loop hascall gcsafe bwd bwd-target 
BB17 [0019]  1       BB16                  1       [18F..19B)-> BB16 (always)                     i hascall gcsafe bwd 
BB18 [0020]  1       BB16                  1       [19B..1A6)-> BB20 ( cond )                     i gcsafe bwd 
BB19 [0021]  1       BB18                  1       [1A6..1AD)-> BB16 (always)                     i hascall gcsafe bwd 
BB20 [0022]  1       BB18                  1       [1AD..1B8)-> BB22 ( cond )                     i gcsafe bwd 
BB21 [0023]  1       BB20                  1       [1B8..1C1)-> BB16 (always)                     i gcsafe bwd 
BB22 [0024]  1       BB20                  1       [1C1..1CC)-> BB16 ( cond )                     i gcsafe bwd 
BB23 [0025]  1       BB22                  1       [1CC..1D4)        (return)                     i gcsafe 
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ funclets follow
BB24 [0003]  1     0                       0       [0CA..0CD)-> BB26 ( cond )    H0 F fault {     keep i rare flet bwd 
BB25 [0004]  1     0 BB24                  0       [0CD..0D3)                    H0               i rare hascall bwd 
BB26 [0005]  2     0 BB24,BB25             0       [0D3..0D4)        (finret)    H0   }           i rare bwd 
BB27 [0013]  2     1 BB12                  1       [126..129)-> BB29 ( cond )    H1 F finally {   keep i gcsafe flet bwd 
BB28 [0014]  1     1 BB27                  1       [129..12F)                    H1               i hascall gcsafe bwd 
BB29 [0015]  2     1 BB27,BB28             1       [12F..130)        (finret)    H1   }           i gcsafe bwd 
-----------------------------------------------------------------------------------------------------------------------------------------

***************  Exception Handling table
index  eTry, eHnd
  0  ::            - Try at BB03..BB03 [07B..0CA), Fault   at BB24..BB26 [0CA..0D4)
  1  ::            - Try at BB09..BB09 [102..126), Finally at BB27..BB29 [126..130)
Renumber BB14 to BB12
Renumber BB12 to BB13
Renumber BB13 to BB14

*************** After renumbering the basic blocks

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..072)-> BB07 ( cond )                     i hascall gcsafe newobj 
BB02 [0001]  2       BB01,BB06             1       [072..07B)                                     i Loop gcsafe bwd bwd-target 
BB03 [0002]  1  0    BB02                  1       [07B..0CA)                 T0      try { }     keep i try hascall gcsafe newobj bwd 
BB04 [0038]  1       BB03                  1       [0CA..0CD)-> BB06 ( cond )                     keep i gcsafe bwd cfb 
BB05 [0039]  1       BB04                  1       [0CD..0D4)                                     i hascall gcsafe bwd 
BB06 [0006]  2       BB04,BB05             1       [0D4..0DD)-> BB02 ( cond )                     i gcsafe bwd 
BB07 [0008]  2       BB01,BB06             1       [0DD..0F9)                                     i hascall gcsafe 
BB08 [0009]  2       BB07,BB12             1       [0F9..102)                                     i Loop gcsafe bwd bwd-target 
BB09 [0010]  1  1    BB08                  1       [102..122)-> BB13 ( cond ) T1      try { }     keep i try hascall gcsafe bwd 
BB10 [0041]  1       BB09                  1       [126..129)-> BB12 ( cond )                     keep i gcsafe bwd cfb 
BB11 [0042]  1       BB10                  1       [129..130)                                     i hascall gcsafe bwd 
BB12 [0016]  2       BB10,BB11             1       [130..139)-> BB08 (always)                     i hascall gcsafe bwd 
BB13 [0030]  1       BB09                  1       [???..???)-> BB27 (callf )                     i internal gcsafe 
BB14 [0031]  1       BB29                  1       [???..???)-> BB15 (ALWAYS)                     i internal gcsafe KEEP 
BB15 [0017]  1       BB14                  1       [139..17D)                                     i hascall gcsafe 
BB16 [0018]  5       BB15,BB17,BB19,BB21,BB22   1       [17D..18F)-> BB18 ( cond )                     i Loop hascall gcsafe bwd bwd-target 
BB17 [0019]  1       BB16                  1       [18F..19B)-> BB16 (always)                     i hascall gcsafe bwd 
BB18 [0020]  1       BB16                  1       [19B..1A6)-> BB20 ( cond )                     i gcsafe bwd 
BB19 [0021]  1       BB18                  1       [1A6..1AD)-> BB16 (always)                     i hascall gcsafe bwd 
BB20 [0022]  1       BB18                  1       [1AD..1B8)-> BB22 ( cond )                     i gcsafe bwd 
BB21 [0023]  1       BB20                  1       [1B8..1C1)-> BB16 (always)                     i gcsafe bwd 
BB22 [0024]  1       BB20                  1       [1C1..1CC)-> BB16 ( cond )                     i gcsafe bwd 
BB23 [0025]  1       BB22                  1       [1CC..1D4)        (return)                     i gcsafe 
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ funclets follow
BB24 [0003]  1     0                       0       [0CA..0CD)-> BB26 ( cond )    H0 F fault {     keep i rare flet bwd 
BB25 [0004]  1     0 BB24                  0       [0CD..0D3)                    H0               i rare hascall bwd 
BB26 [0005]  2     0 BB24,BB25             0       [0D3..0D4)        (finret)    H0   }           i rare bwd 
BB27 [0013]  2     1 BB13                  1       [126..129)-> BB29 ( cond )    H1 F finally {   keep i gcsafe flet bwd 
BB28 [0014]  1     1 BB27                  1       [129..12F)                    H1               i hascall gcsafe bwd 
BB29 [0015]  2     1 BB27,BB28             1       [12F..130)        (finret)    H1   }           i gcsafe bwd 
-----------------------------------------------------------------------------------------------------------------------------------------

***************  Exception Handling table
index  eTry, eHnd
  0  ::            - Try at BB03..BB03 [07B..0CA), Fault   at BB24..BB26 [0CA..0D4)
  1  ::            - Try at BB09..BB09 [102..126), Finally at BB27..BB29 [126..130)

New BlockSet epoch 4, # of blocks (including unused BB00): 30, bitset array size: 1 (short)
in optCanonicalizeLoop: L02 has top BB16 (bottom BB22) with natural loop number L05: need to canonicalize
New Basic Block BB30 [0045] created.
in optCanonicalizeLoop: redirect top predecessor BB15 to BB30
in optCanonicalizeLoop: 'top' predecessor BB17 is in the range of L02 (BB16..BB22); not redirecting its bottom edge
in optCanonicalizeLoop: 'top' predecessor BB19 is in the range of L02 (BB16..BB22); not redirecting its bottom edge
in optCanonicalizeLoop: 'top' predecessor BB21 is in the range of L02 (BB16..BB22); not redirecting its bottom edge
in optCanonicalizeLoop: 'top' predecessor BB22 is in the range of L02 (BB16..BB22); not redirecting its bottom edge
in optCanonicalizeLoop: made new block BB30 [0000016D5CF325C8] the new unique top of loop 2.
in optCanonicalizeLoop: L03 has top BB16 (bottom BB21) with natural loop number L05: need to canonicalize
New Basic Block BB31 [0046] created.
in optCanonicalizeLoop: redirect top predecessor BB15 to BB31
in optCanonicalizeLoop: 'top' predecessor BB17 is in the range of L03 (BB16..BB21); not redirecting its bottom edge
in optCanonicalizeLoop: 'top' predecessor BB19 is in the range of L03 (BB16..BB21); not redirecting its bottom edge
in optCanonicalizeLoop: 'top' predecessor BB21 is in the range of L03 (BB16..BB21); not redirecting its bottom edge
in optCanonicalizeLoop: redirect top predecessor BB22 to BB31
in optCanonicalizeLoop: made new block BB31 [0000016D5CF32760] the new unique top of loop 3.
in optCanonicalizeLoop: L04 has top BB16 (bottom BB19) with natural loop number L05: need to canonicalize
New Basic Block BB32 [0047] created.
in optCanonicalizeLoop: redirect top predecessor BB15 to BB32
in optCanonicalizeLoop: 'top' predecessor BB17 is in the range of L04 (BB16..BB19); not redirecting its bottom edge
in optCanonicalizeLoop: 'top' predecessor BB19 is in the range of L04 (BB16..BB19); not redirecting its bottom edge
in optCanonicalizeLoop: redirect top predecessor BB21 to BB32
in optCanonicalizeLoop: redirect top predecessor BB22 to BB32
in optCanonicalizeLoop: made new block BB32 [0000016D5CF328F8] the new unique top of loop 4.

Renumbering the basic blocks for fgUpdateChangeFlowGraph

*************** Before renumbering the basic blocks

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..072)-> BB07 ( cond )                     i hascall gcsafe newobj 
BB02 [0001]  2       BB01,BB06             1     0 [072..07B)                                     i Loop gcsafe bwd bwd-target 
BB03 [0002]  1  0    BB02                  1     0 [07B..0CA)                 T0      try { }     keep i try hascall gcsafe newobj bwd 
BB04 [0038]  1       BB03                  1     0 [0CA..0CD)-> BB06 ( cond )                     keep i gcsafe bwd cfb 
BB05 [0039]  1       BB04                  1     0 [0CD..0D4)                                     i hascall gcsafe bwd 
BB06 [0006]  2       BB04,BB05             1     0 [0D4..0DD)-> BB02 ( cond )                     i gcsafe bwd 
BB07 [0008]  2       BB01,BB06             1       [0DD..0F9)                                     i hascall gcsafe 
BB08 [0009]  2       BB07,BB12             1     1 [0F9..102)                                     i Loop gcsafe bwd bwd-target 
BB09 [0010]  1  1    BB08                  1     1 [102..122)-> BB13 ( cond ) T1      try { }     keep i try hascall gcsafe bwd 
BB10 [0041]  1       BB09                  1     1 [126..129)-> BB12 ( cond )                     keep i gcsafe bwd cfb 
BB11 [0042]  1       BB10                  1     1 [129..130)                                     i hascall gcsafe bwd 
BB12 [0016]  2       BB10,BB11             1     1 [130..139)-> BB08 (always)                     i hascall gcsafe bwd 
BB13 [0030]  1       BB09                  1       [???..???)-> BB27 (callf )                     i internal gcsafe 
BB14 [0031]  1       BB29                  1       [???..???)-> BB15 (ALWAYS)                     i internal gcsafe KEEP 
BB15 [0017]  1       BB14                  1       [139..17D)                                     i hascall gcsafe 
BB30 [0045]  0                             1     2 [???..???)                                     internal 
BB31 [0046]  0                             1     3 [???..???)                                     internal 
BB32 [0047]  0                             1     4 [???..???)                                     internal 
BB16 [0018]  5       BB15,BB17,BB19,BB21,BB22   1     5 [17D..18F)-> BB18 ( cond )                     i Loop hascall gcsafe bwd bwd-target 
BB17 [0019]  1       BB16                  1     5 [18F..19B)-> BB16 (always)                     i hascall gcsafe bwd 
BB18 [0020]  1       BB16                  1     4 [19B..1A6)-> BB20 ( cond )                     i gcsafe bwd 
BB19 [0021]  1       BB18                  1     4 [1A6..1AD)-> BB32 (always)                     i hascall gcsafe bwd 
BB20 [0022]  1       BB18                  1     3 [1AD..1B8)-> BB22 ( cond )                     i gcsafe bwd 
BB21 [0023]  1       BB20                  1     3 [1B8..1C1)-> BB31 (always)                     i gcsafe bwd 
BB22 [0024]  1       BB20                  1     2 [1C1..1CC)-> BB30 ( cond )                     i gcsafe bwd 
BB23 [0025]  1       BB22                  1       [1CC..1D4)        (return)                     i gcsafe 
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ funclets follow
BB24 [0003]  1     0                       0       [0CA..0CD)-> BB26 ( cond )    H0 F fault {     keep i rare flet bwd 
BB25 [0004]  1     0 BB24                  0       [0CD..0D3)                    H0               i rare hascall bwd 
BB26 [0005]  2     0 BB24,BB25             0       [0D3..0D4)        (finret)    H0   }           i rare bwd 
BB27 [0013]  2     1 BB13                  1       [126..129)-> BB29 ( cond )    H1 F finally {   keep i gcsafe flet bwd 
BB28 [0014]  1     1 BB27                  1       [129..12F)                    H1               i hascall gcsafe bwd 
BB29 [0015]  2     1 BB27,BB28             1       [12F..130)        (finret)    H1   }           i gcsafe bwd 
-----------------------------------------------------------------------------------------------------------------------------------------

***************  Exception Handling table
index  eTry, eHnd
  0  ::            - Try at BB03..BB03 [07B..0CA), Fault   at BB24..BB26 [0CA..0D4)
  1  ::            - Try at BB09..BB09 [102..126), Finally at BB27..BB29 [126..130)
Renumber BB30 to BB16
Renumber BB31 to BB17
Renumber BB32 to BB18
Renumber BB16 to BB19
Renumber BB17 to BB20
Renumber BB18 to BB21
Renumber BB19 to BB22
Renumber BB20 to BB23
Renumber BB21 to BB24
Renumber BB22 to BB25
Renumber BB23 to BB26
Renumber BB24 to BB27
Renumber BB25 to BB28
Renumber BB26 to BB29
Renumber BB27 to BB30
Renumber BB28 to BB31
Renumber BB29 to BB32

*************** After renumbering the basic blocks

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..072)-> BB07 ( cond )                     i hascall gcsafe newobj 
BB02 [0001]  2       BB01,BB06             1     0 [072..07B)                                     i Loop gcsafe bwd bwd-target 
BB03 [0002]  1  0    BB02                  1     0 [07B..0CA)                 T0      try { }     keep i try hascall gcsafe newobj bwd 
BB04 [0038]  1       BB03                  1     0 [0CA..0CD)-> BB06 ( cond )                     keep i gcsafe bwd cfb 
BB05 [0039]  1       BB04                  1     0 [0CD..0D4)                                     i hascall gcsafe bwd 
BB06 [0006]  2       BB04,BB05             1     0 [0D4..0DD)-> BB02 ( cond )                     i gcsafe bwd 
BB07 [0008]  2       BB01,BB06             1       [0DD..0F9)                                     i hascall gcsafe 
BB08 [0009]  2       BB07,BB12             1     1 [0F9..102)                                     i Loop gcsafe bwd bwd-target 
BB09 [0010]  1  1    BB08                  1     1 [102..122)-> BB13 ( cond ) T1      try { }     keep i try hascall gcsafe bwd 
BB10 [0041]  1       BB09                  1     1 [126..129)-> BB12 ( cond )                     keep i gcsafe bwd cfb 
BB11 [0042]  1       BB10                  1     1 [129..130)                                     i hascall gcsafe bwd 
BB12 [0016]  2       BB10,BB11             1     1 [130..139)-> BB08 (always)                     i hascall gcsafe bwd 
BB13 [0030]  1       BB09                  1       [???..???)-> BB30 (callf )                     i internal gcsafe 
BB14 [0031]  1       BB32                  1       [???..???)-> BB15 (ALWAYS)                     i internal gcsafe KEEP 
BB15 [0017]  1       BB14                  1       [139..17D)                                     i hascall gcsafe 
BB16 [0045]  0                             1     2 [???..???)                                     internal 
BB17 [0046]  0                             1     3 [???..???)                                     internal 
BB18 [0047]  0                             1     4 [???..???)                                     internal 
BB19 [0018]  5       BB15,BB20,BB22,BB24,BB25   1     5 [17D..18F)-> BB21 ( cond )                     i Loop hascall gcsafe bwd bwd-target 
BB20 [0019]  1       BB19                  1     5 [18F..19B)-> BB19 (always)                     i hascall gcsafe bwd 
BB21 [0020]  1       BB19                  1     4 [19B..1A6)-> BB23 ( cond )                     i gcsafe bwd 
BB22 [0021]  1       BB21                  1     4 [1A6..1AD)-> BB18 (always)                     i hascall gcsafe bwd 
BB23 [0022]  1       BB21                  1     3 [1AD..1B8)-> BB25 ( cond )                     i gcsafe bwd 
BB24 [0023]  1       BB23                  1     3 [1B8..1C1)-> BB17 (always)                     i gcsafe bwd 
BB25 [0024]  1       BB23                  1     2 [1C1..1CC)-> BB16 ( cond )                     i gcsafe bwd 
BB26 [0025]  1       BB25                  1       [1CC..1D4)        (return)                     i gcsafe 
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ funclets follow
BB27 [0003]  1     0                       0       [0CA..0CD)-> BB29 ( cond )    H0 F fault {     keep i rare flet bwd 
BB28 [0004]  1     0 BB27                  0       [0CD..0D3)                    H0               i rare hascall bwd 
BB29 [0005]  2     0 BB27,BB28             0       [0D3..0D4)        (finret)    H0   }           i rare bwd 
BB30 [0013]  2     1 BB13                  1       [126..129)-> BB32 ( cond )    H1 F finally {   keep i gcsafe flet bwd 
BB31 [0014]  1     1 BB30                  1       [129..12F)                    H1               i hascall gcsafe bwd 
BB32 [0015]  2     1 BB30,BB31             1       [12F..130)        (finret)    H1   }           i gcsafe bwd 
-----------------------------------------------------------------------------------------------------------------------------------------

***************  Exception Handling table
index  eTry, eHnd
  0  ::            - Try at BB03..BB03 [07B..0CA), Fault   at BB27..BB29 [0CA..0D4)
  1  ::            - Try at BB09..BB09 [102..126), Finally at BB30..BB32 [126..130)

New BlockSet epoch 5, # of blocks (including unused BB00): 33, bitset array size: 1 (short)

*************** In fgComputePreds()

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..072)-> BB07 ( cond )                     i hascall gcsafe newobj 
BB02 [0001]  2       BB01,BB06             1     0 [072..07B)                                     i Loop gcsafe bwd bwd-target 
BB03 [0002]  1  0    BB02                  1     0 [07B..0CA)                 T0      try { }     keep i try hascall gcsafe newobj bwd 
BB04 [0038]  1       BB03                  1     0 [0CA..0CD)-> BB06 ( cond )                     keep i gcsafe bwd cfb 
BB05 [0039]  1       BB04                  1     0 [0CD..0D4)                                     i hascall gcsafe bwd 
BB06 [0006]  2       BB04,BB05             1     0 [0D4..0DD)-> BB02 ( cond )                     i gcsafe bwd 
BB07 [0008]  2       BB01,BB06             1       [0DD..0F9)                                     i hascall gcsafe 
BB08 [0009]  2       BB07,BB12             1     1 [0F9..102)                                     i Loop gcsafe bwd bwd-target 
BB09 [0010]  1  1    BB08                  1     1 [102..122)-> BB13 ( cond ) T1      try { }     keep i try hascall gcsafe bwd 
BB10 [0041]  1       BB09                  1     1 [126..129)-> BB12 ( cond )                     keep i gcsafe bwd cfb 
BB11 [0042]  1       BB10                  1     1 [129..130)                                     i hascall gcsafe bwd 
BB12 [0016]  2       BB10,BB11             1     1 [130..139)-> BB08 (always)                     i hascall gcsafe bwd 
BB13 [0030]  1       BB09                  1       [???..???)-> BB30 (callf )                     i internal gcsafe 
BB14 [0031]  1       BB32                  1       [???..???)-> BB15 (ALWAYS)                     i internal gcsafe KEEP 
BB15 [0017]  1       BB14                  1       [139..17D)                                     i hascall gcsafe 
BB16 [0045]  0                             1     2 [???..???)                                     internal 
BB17 [0046]  0                             1     3 [???..???)                                     internal 
BB18 [0047]  0                             1     4 [???..???)                                     internal 
BB19 [0018]  5       BB15,BB20,BB22,BB24,BB25   1     5 [17D..18F)-> BB21 ( cond )                     i Loop hascall gcsafe bwd bwd-target 
BB20 [0019]  1       BB19                  1     5 [18F..19B)-> BB19 (always)                     i hascall gcsafe bwd 
BB21 [0020]  1       BB19                  1     4 [19B..1A6)-> BB23 ( cond )                     i gcsafe bwd 
BB22 [0021]  1       BB21                  1     4 [1A6..1AD)-> BB18 (always)                     i hascall gcsafe bwd 
BB23 [0022]  1       BB21                  1     3 [1AD..1B8)-> BB25 ( cond )                     i gcsafe bwd 
BB24 [0023]  1       BB23                  1     3 [1B8..1C1)-> BB17 (always)                     i gcsafe bwd 
BB25 [0024]  1       BB23                  1     2 [1C1..1CC)-> BB16 ( cond )                     i gcsafe bwd 
BB26 [0025]  1       BB25                  1       [1CC..1D4)        (return)                     i gcsafe 
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ funclets follow
BB27 [0003]  1     0                       0       [0CA..0CD)-> BB29 ( cond )    H0 F fault {     keep i rare flet bwd 
BB28 [0004]  1     0 BB27                  0       [0CD..0D3)                    H0               i rare hascall bwd 
BB29 [0005]  2     0 BB27,BB28             0       [0D3..0D4)        (finret)    H0   }           i rare bwd 
BB30 [0013]  2     1 BB13                  1       [126..129)-> BB32 ( cond )    H1 F finally {   keep i gcsafe flet bwd 
BB31 [0014]  1     1 BB30                  1       [129..12F)                    H1               i hascall gcsafe bwd 
BB32 [0015]  2     1 BB30,BB31             1       [12F..130)        (finret)    H1   }           i gcsafe bwd 
-----------------------------------------------------------------------------------------------------------------------------------------

Setting edge weights for BB01 -> BB07 to [0 .. 3.402823e+38]
Setting edge weights for BB01 -> BB02 to [0 .. 3.402823e+38]
Setting edge weights for BB02 -> BB03 to [0 .. 3.402823e+38]
Setting edge weights for BB03 -> BB04 to [0 .. 3.402823e+38]
Setting edge weights for BB04 -> BB06 to [0 .. 3.402823e+38]
Setting edge weights for BB04 -> BB05 to [0 .. 3.402823e+38]
Setting edge weights for BB05 -> BB06 to [0 .. 3.402823e+38]
Setting edge weights for BB06 -> BB02 to [0 .. 3.402823e+38]
Setting edge weights for BB06 -> BB07 to [0 .. 3.402823e+38]
Setting edge weights for BB07 -> BB08 to [0 .. 3.402823e+38]
Setting edge weights for BB08 -> BB09 to [0 .. 3.402823e+38]
Setting edge weights for BB09 -> BB13 to [0 .. 3.402823e+38]
Setting edge weights for BB09 -> BB10 to [0 .. 3.402823e+38]
Setting edge weights for BB10 -> BB12 to [0 .. 3.402823e+38]
Setting edge weights for BB10 -> BB11 to [0 .. 3.402823e+38]
Setting edge weights for BB11 -> BB12 to [0 .. 3.402823e+38]
Setting edge weights for BB12 -> BB08 to [0 .. 3.402823e+38]
Setting edge weights for BB13 -> BB30 to [0 .. 3.402823e+38]
Setting edge weights for BB14 -> BB15 to [0 .. 3.402823e+38]
Setting edge weights for BB15 -> BB16 to [0 .. 3.402823e+38]
Setting edge weights for BB16 -> BB17 to [0 .. 3.402823e+38]
Setting edge weights for BB17 -> BB18 to [0 .. 3.402823e+38]
Setting edge weights for BB18 -> BB19 to [0 .. 3.402823e+38]
Setting edge weights for BB19 -> BB21 to [0 .. 3.402823e+38]
Setting edge weights for BB19 -> BB20 to [0 .. 3.402823e+38]
Setting edge weights for BB20 -> BB19 to [0 .. 3.402823e+38]
Setting edge weights for BB21 -> BB23 to [0 .. 3.402823e+38]
Setting edge weights for BB21 -> BB22 to [0 .. 3.402823e+38]
Setting edge weights for BB22 -> BB18 to [0 .. 3.402823e+38]
Setting edge weights for BB23 -> BB25 to [0 .. 3.402823e+38]
Setting edge weights for BB23 -> BB24 to [0 .. 3.402823e+38]
Setting edge weights for BB24 -> BB17 to [0 .. 3.402823e+38]
Setting edge weights for BB25 -> BB16 to [0 .. 3.402823e+38]
Setting edge weights for BB25 -> BB26 to [0 .. 3.402823e+38]
Setting edge weights for BB27 -> BB29 to [0 .. 3.402823e+38]
Setting edge weights for BB27 -> BB28 to [0 .. 3.402823e+38]
Setting edge weights for BB28 -> BB29 to [0 .. 3.402823e+38]
Setting edge weights for BB30 -> BB32 to [0 .. 3.402823e+38]
Setting edge weights for BB30 -> BB31 to [0 .. 3.402823e+38]
Setting edge weights for BB31 -> BB32 to [0 .. 3.402823e+38]
Setting edge weights for BB32 -> BB14 to [0 .. 3.402823e+38]

*************** After fgComputePreds()

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..072)-> BB07 ( cond )                     i hascall gcsafe newobj 
BB02 [0001]  2       BB01,BB06             1     0 [072..07B)                                     i Loop gcsafe bwd bwd-target 
BB03 [0002]  1  0    BB02                  1     0 [07B..0CA)                 T0      try { }     keep i try hascall gcsafe newobj bwd 
BB04 [0038]  1       BB03                  1     0 [0CA..0CD)-> BB06 ( cond )                     keep i gcsafe bwd cfb 
BB05 [0039]  1       BB04                  1     0 [0CD..0D4)                                     i hascall gcsafe bwd 
BB06 [0006]  2       BB04,BB05             1     0 [0D4..0DD)-> BB02 ( cond )                     i gcsafe bwd 
BB07 [0008]  2       BB01,BB06             1       [0DD..0F9)                                     i hascall gcsafe 
BB08 [0009]  2       BB07,BB12             1     1 [0F9..102)                                     i Loop gcsafe bwd bwd-target 
BB09 [0010]  1  1    BB08                  1     1 [102..122)-> BB13 ( cond ) T1      try { }     keep i try hascall gcsafe bwd 
BB10 [0041]  1       BB09                  1     1 [126..129)-> BB12 ( cond )                     keep i gcsafe bwd cfb 
BB11 [0042]  1       BB10                  1     1 [129..130)                                     i hascall gcsafe bwd 
BB12 [0016]  2       BB10,BB11             1     1 [130..139)-> BB08 (always)                     i hascall gcsafe bwd 
BB13 [0030]  1       BB09                  1       [???..???)-> BB30 (callf )                     i internal gcsafe 
BB14 [0031]  1       BB32                  1       [???..???)-> BB15 (ALWAYS)                     i internal gcsafe KEEP 
BB15 [0017]  1       BB14                  1       [139..17D)                                     i hascall gcsafe 
BB16 [0045]  2       BB15,BB25             1     2 [???..???)                                     internal 
BB17 [0046]  2       BB16,BB24             1     3 [???..???)                                     internal 
BB18 [0047]  2       BB17,BB22             1     4 [???..???)                                     internal 
BB19 [0018]  2       BB18,BB20             1     5 [17D..18F)-> BB21 ( cond )                     i Loop hascall gcsafe bwd bwd-target 
BB20 [0019]  1       BB19                  1     5 [18F..19B)-> BB19 (always)                     i hascall gcsafe bwd 
BB21 [0020]  1       BB19                  1     4 [19B..1A6)-> BB23 ( cond )                     i gcsafe bwd 
BB22 [0021]  1       BB21                  1     4 [1A6..1AD)-> BB18 (always)                     i hascall gcsafe bwd 
BB23 [0022]  1       BB21                  1     3 [1AD..1B8)-> BB25 ( cond )                     i gcsafe bwd 
BB24 [0023]  1       BB23                  1     3 [1B8..1C1)-> BB17 (always)                     i gcsafe bwd 
BB25 [0024]  1       BB23                  1     2 [1C1..1CC)-> BB16 ( cond )                     i gcsafe bwd 
BB26 [0025]  1       BB25                  1       [1CC..1D4)        (return)                     i gcsafe 
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ funclets follow
BB27 [0003]  1     0                       0       [0CA..0CD)-> BB29 ( cond )    H0 F fault {     keep i rare flet bwd 
BB28 [0004]  1     0 BB27                  0       [0CD..0D3)                    H0               i rare hascall bwd 
BB29 [0005]  2     0 BB27,BB28             0       [0D3..0D4)        (finret)    H0   }           i rare bwd 
BB30 [0013]  2     1 BB13                  1       [126..129)-> BB32 ( cond )    H1 F finally {   keep i gcsafe flet bwd 
BB31 [0014]  1     1 BB30                  1       [129..12F)                    H1               i hascall gcsafe bwd 
BB32 [0015]  2     1 BB30,BB31             1       [12F..130)        (finret)    H1   }           i gcsafe bwd 
-----------------------------------------------------------------------------------------------------------------------------------------

Enter blocks: BB01 BB27 BB30 

After computing reachability sets:
------------------------------------------------
BBnum  Reachable by 
------------------------------------------------
BB01 : BB01 
BB02 : BB01 BB02 BB03 BB04 BB05 BB06 
BB03 : BB01 BB02 BB03 BB04 BB05 BB06 
BB04 : BB01 BB02 BB03 BB04 BB05 BB06 
BB05 : BB01 BB02 BB03 BB04 BB05 BB06 
BB06 : BB01 BB02 BB03 BB04 BB05 BB06 
BB07 : BB01 BB02 BB03 BB04 BB05 BB06 BB07 
BB08 : BB01 BB02 BB03 BB04 BB05 BB06 BB07 BB08 BB09 BB10 BB11 BB12 
BB09 : BB01 BB02 BB03 BB04 BB05 BB06 BB07 BB08 BB09 BB10 BB11 BB12 
BB10 : BB01 BB02 BB03 BB04 BB05 BB06 BB07 BB08 BB09 BB10 BB11 BB12 
BB11 : BB01 BB02 BB03 BB04 BB05 BB06 BB07 BB08 BB09 BB10 BB11 BB12 
BB12 : BB01 BB02 BB03 BB04 BB05 BB06 BB07 BB08 BB09 BB10 BB11 BB12 
BB13 : BB01 BB02 BB03 BB04 BB05 BB06 BB07 BB08 BB09 BB10 BB11 BB12 BB13 
BB14 : BB01 BB02 BB03 BB04 BB05 BB06 BB07 BB08 BB09 BB10 BB11 BB12 BB13 BB14 BB30 BB31 BB32 
BB15 : BB01 BB02 BB03 BB04 BB05 BB06 BB07 BB08 BB09 BB10 BB11 BB12 BB13 BB14 BB15 BB30 BB31 BB32 
BB16 : BB01 BB02 BB03 BB04 BB05 BB06 BB07 BB08 BB09 BB10 BB11 BB12 BB13 BB14 BB15 BB16 BB17 BB18 BB19 BB20 BB21 BB22 BB23 BB24 BB25 BB30 BB31 BB32 
BB17 : BB01 BB02 BB03 BB04 BB05 BB06 BB07 BB08 BB09 BB10 BB11 BB12 BB13 BB14 BB15 BB16 BB17 BB18 BB19 BB20 BB21 BB22 BB23 BB24 BB25 BB30 BB31 BB32 
BB18 : BB01 BB02 BB03 BB04 BB05 BB06 BB07 BB08 BB09 BB10 BB11 BB12 BB13 BB14 BB15 BB16 BB17 BB18 BB19 BB20 BB21 BB22 BB23 BB24 BB25 BB30 BB31 BB32 
BB19 : BB01 BB02 BB03 BB04 BB05 BB06 BB07 BB08 BB09 BB10 BB11 BB12 BB13 BB14 BB15 BB16 BB17 BB18 BB19 BB20 BB21 BB22 BB23 BB24 BB25 BB30 BB31 BB32 
BB20 : BB01 BB02 BB03 BB04 BB05 BB06 BB07 BB08 BB09 BB10 BB11 BB12 BB13 BB14 BB15 BB16 BB17 BB18 BB19 BB20 BB21 BB22 BB23 BB24 BB25 BB30 BB31 BB32 
BB21 : BB01 BB02 BB03 BB04 BB05 BB06 BB07 BB08 BB09 BB10 BB11 BB12 BB13 BB14 BB15 BB16 BB17 BB18 BB19 BB20 BB21 BB22 BB23 BB24 BB25 BB30 BB31 BB32 
BB22 : BB01 BB02 BB03 BB04 BB05 BB06 BB07 BB08 BB09 BB10 BB11 BB12 BB13 BB14 BB15 BB16 BB17 BB18 BB19 BB20 BB21 BB22 BB23 BB24 BB25 BB30 BB31 BB32 
BB23 : BB01 BB02 BB03 BB04 BB05 BB06 BB07 BB08 BB09 BB10 BB11 BB12 BB13 BB14 BB15 BB16 BB17 BB18 BB19 BB20 BB21 BB22 BB23 BB24 BB25 BB30 BB31 BB32 
BB24 : BB01 BB02 BB03 BB04 BB05 BB06 BB07 BB08 BB09 BB10 BB11 BB12 BB13 BB14 BB15 BB16 BB17 BB18 BB19 BB20 BB21 BB22 BB23 BB24 BB25 BB30 BB31 BB32 
BB25 : BB01 BB02 BB03 BB04 BB05 BB06 BB07 BB08 BB09 BB10 BB11 BB12 BB13 BB14 BB15 BB16 BB17 BB18 BB19 BB20 BB21 BB22 BB23 BB24 BB25 BB30 BB31 BB32 
BB26 : BB01 BB02 BB03 BB04 BB05 BB06 BB07 BB08 BB09 BB10 BB11 BB12 BB13 BB14 BB15 BB16 BB17 BB18 BB19 BB20 BB21 BB22 BB23 BB24 BB25 BB26 BB30 BB31 BB32 
BB27 : BB27 
BB28 : BB27 BB28 
BB29 : BB27 BB28 BB29 
BB30 : BB01 BB02 BB03 BB04 BB05 BB06 BB07 BB08 BB09 BB10 BB11 BB12 BB13 BB30 
BB31 : BB01 BB02 BB03 BB04 BB05 BB06 BB07 BB08 BB09 BB10 BB11 BB12 BB13 BB30 BB31 
BB32 : BB01 BB02 BB03 BB04 BB05 BB06 BB07 BB08 BB09 BB10 BB11 BB12 BB13 BB30 BB31 BB32 
*************** In fgComputeDoms
*************** In fgDebugCheckBBlist

Dominator computation start blocks (those blocks with no incoming edges):
BB01 BB27 
------------------------------------------------
BBnum  Dominated by
------------------------------------------------
BB27:  BB27 
BB28:  BB28 BB27 
BB29:  BB29 BB27 
BB01:  BB01 
BB02:  BB02 BB01 
BB03:  BB03 BB02 BB01 
BB04:  BB04 BB03 BB02 BB01 
BB05:  BB05 BB04 BB03 BB02 BB01 
BB06:  BB06 BB04 BB03 BB02 BB01 
BB07:  BB07 BB01 
BB08:  BB08 BB07 BB01 
BB09:  BB09 BB08 BB07 BB01 
BB10:  BB10 BB09 BB08 BB07 BB01 
BB11:  BB11 BB10 BB09 BB08 BB07 BB01 
BB12:  BB12 BB10 BB09 BB08 BB07 BB01 
BB13:  BB13 BB09 BB08 BB07 BB01 
BB30:  BB30 
BB31:  BB31 BB30 
BB32:  BB32 BB30 
BB14:  BB14 BB32 BB30 
BB15:  BB15 BB14 BB32 BB30 
BB16:  BB16 BB15 BB14 BB32 BB30 
BB17:  BB17 BB16 BB15 BB14 BB32 BB30 
BB18:  BB18 BB17 BB16 BB15 BB14 BB32 BB30 
BB19:  BB19 BB18 BB17 BB16 BB15 BB14 BB32 BB30 
BB20:  BB20 BB19 BB18 BB17 BB16 BB15 BB14 BB32 BB30 
BB21:  BB21 BB19 BB18 BB17 BB16 BB15 BB14 BB32 BB30 
BB22:  BB22 BB21 BB19 BB18 BB17 BB16 BB15 BB14 BB32 BB30 
BB23:  BB23 BB21 BB19 BB18 BB17 BB16 BB15 BB14 BB32 BB30 
BB24:  BB24 BB23 BB21 BB19 BB18 BB17 BB16 BB15 BB14 BB32 BB30 
BB25:  BB25 BB23 BB21 BB19 BB18 BB17 BB16 BB15 BB14 BB32 BB30 
BB26:  BB26 BB25 BB23 BB21 BB19 BB18 BB17 BB16 BB15 BB14 BB32 BB30 

Inside fgBuildDomTree

After computing the Dominance Tree:
BB01 : BB07 BB02 
BB02 : BB03 
BB03 : BB04 
BB04 : BB06 BB05 
BB07 : BB08 
BB08 : BB09 
BB09 : BB13 BB10 
BB10 : BB12 BB11 
BB14 : BB15 
BB15 : BB16 
BB16 : BB17 
BB17 : BB18 
BB18 : BB19 
BB19 : BB21 BB20 
BB21 : BB23 BB22 
BB23 : BB25 BB24 
BB25 : BB26 
BB27 : BB29 BB28 
BB30 : BB32 BB31 
BB32 : BB14 


After numbering the dominator tree:
BB01: pre=01, post=13
BB02: pre=09, post=12
BB03: pre=10, post=11
BB04: pre=11, post=10
BB05: pre=13, post=09
BB06: pre=12, post=08
BB07: pre=02, post=07
BB08: pre=03, post=06
BB09: pre=04, post=05
BB10: pre=06, post=04
BB11: pre=08, post=03
BB12: pre=07, post=02
BB13: pre=05, post=01
BB14: pre=19, post=29
BB15: pre=20, post=28
BB16: pre=21, post=27
BB17: pre=22, post=26
BB18: pre=23, post=25
BB19: pre=24, post=24
BB20: pre=31, post=23
BB21: pre=25, post=22
BB22: pre=30, post=21
BB23: pre=26, post=20
BB24: pre=29, post=19
BB25: pre=27, post=18
BB26: pre=28, post=17
BB27: pre=14, post=16
BB28: pre=16, post=15
BB29: pre=15, post=14
BB30: pre=17, post=32
BB31: pre=32, post=31
BB32: pre=18, post=30

Final natural loop table:
L00, from BB02 to BB06 (Head=BB01, Entry=BB02, ExitCnt=1 at BB06)
L01, from BB08 to BB12 (Head=BB07, Entry=BB08, ExitCnt=1 at BB09)
L02, from BB16 to BB25 (Head=BB15, Entry=BB16, ExitCnt=1 at BB25)
L03, from BB17 to BB24 (Head=BB16, Entry=BB17, ExitCnt=1 at BB23, parent loop = L02)
L04, from BB18 to BB22 (Head=BB17, Entry=BB18, ExitCnt=1 at BB21, parent loop = L03)
L05, from BB19 to BB20 (Head=BB18, Entry=BB19, ExitCnt=1 at BB19, parent loop = L04)

Marking a loop from BB02 to BB06
    BB02(wt=800)
    BB03(wt=800)
    BB04(wt=800)
    BB05(wt=400)
    BB06(wt=800)
Marking a loop from BB08 to BB12
    BB08(wt=800)
    BB09(wt=800)
    BB10(wt=800)
    BB11(wt=400)
    BB12(wt=800)
Marking a loop from BB19 to BB20
    BB19(wt=800)
    BB20(wt=800)
L00 that starts at BB02 needs alignment, weight=800.
L01 that starts at BB08 needs alignment, weight=800.
L05 that starts at BB19 needs alignment, weight=800.

Found a total of 3 loops.
After loop weight marking:

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..072)-> BB07 ( cond )                     i hascall gcsafe newobj 
BB02 [0001]  2       BB01,BB06             8     0 [072..07B)                                     i Loop gcsafe bwd bwd-target align 
BB03 [0002]  1  0    BB02                  8     0 [07B..0CA)                 T0      try { }     keep i try hascall gcsafe newobj bwd 
BB04 [0038]  1       BB03                  8     0 [0CA..0CD)-> BB06 ( cond )                     keep i gcsafe bwd cfb 
BB05 [0039]  1       BB04                  4     0 [0CD..0D4)                                     i hascall gcsafe bwd 
BB06 [0006]  2       BB04,BB05             8     0 [0D4..0DD)-> BB02 ( cond )                     i gcsafe bwd 
BB07 [0008]  2       BB01,BB06             1       [0DD..0F9)                                     i hascall gcsafe 
BB08 [0009]  2       BB07,BB12             8     1 [0F9..102)                                     i Loop gcsafe bwd bwd-target align 
BB09 [0010]  1  1    BB08                  8     1 [102..122)-> BB13 ( cond ) T1      try { }     keep i try hascall gcsafe bwd 
BB10 [0041]  1       BB09                  8     1 [126..129)-> BB12 ( cond )                     keep i gcsafe bwd cfb 
BB11 [0042]  1       BB10                  4     1 [129..130)                                     i hascall gcsafe bwd 
BB12 [0016]  2       BB10,BB11             8     1 [130..139)-> BB08 (always)                     i hascall gcsafe bwd 
BB13 [0030]  1       BB09                  1       [???..???)-> BB30 (callf )                     i internal gcsafe 
BB14 [0031]  1       BB32                  1       [???..???)-> BB15 (ALWAYS)                     i internal gcsafe KEEP 
BB15 [0017]  1       BB14                  1       [139..17D)                                     i hascall gcsafe 
BB16 [0045]  2       BB15,BB25             1     2 [???..???)                                     internal gcsafe 
BB17 [0046]  2       BB16,BB24             1     3 [???..???)                                     internal gcsafe 
BB18 [0047]  2       BB17,BB22             1     4 [???..???)                                     internal gcsafe 
BB19 [0018]  2       BB18,BB20             8     5 [17D..18F)-> BB21 ( cond )                     i Loop hascall gcsafe bwd bwd-target align 
BB20 [0019]  1       BB19                  8     5 [18F..19B)-> BB19 (always)                     i hascall gcsafe bwd 
BB21 [0020]  1       BB19                  1     4 [19B..1A6)-> BB23 ( cond )                     i gcsafe bwd 
BB22 [0021]  1       BB21                  1     4 [1A6..1AD)-> BB18 (always)                     i hascall gcsafe bwd 
BB23 [0022]  1       BB21                  1     3 [1AD..1B8)-> BB25 ( cond )                     i gcsafe bwd 
BB24 [0023]  1       BB23                  1     3 [1B8..1C1)-> BB17 (always)                     i gcsafe bwd 
BB25 [0024]  1       BB23                  1     2 [1C1..1CC)-> BB16 ( cond )                     i gcsafe bwd 
BB26 [0025]  1       BB25                  1       [1CC..1D4)        (return)                     i gcsafe 
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ funclets follow
BB27 [0003]  1     0                       0       [0CA..0CD)-> BB29 ( cond )    H0 F fault {     keep i rare flet bwd 
BB28 [0004]  1     0 BB27                  0       [0CD..0D3)                    H0               i rare hascall bwd 
BB29 [0005]  2     0 BB27,BB28             0       [0D3..0D4)        (finret)    H0   }           i rare bwd 
BB30 [0013]  2     1 BB13                  1       [126..129)-> BB32 ( cond )    H1 F finally {   keep i gcsafe flet bwd 
BB31 [0014]  1     1 BB30                  1       [129..12F)                    H1               i hascall gcsafe bwd 
BB32 [0015]  2     1 BB30,BB31             1       [12F..130)        (finret)    H1   }           i gcsafe bwd 
-----------------------------------------------------------------------------------------------------------------------------------------


*************** Finishing PHASE Find loops
Trees after Find loops

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..072)-> BB07 ( cond )                     i hascall gcsafe newobj 
BB02 [0001]  2       BB01,BB06             8     0 [072..07B)                                     i Loop gcsafe bwd bwd-target align 
BB03 [0002]  1  0    BB02                  8     0 [07B..0CA)                 T0      try { }     keep i try hascall gcsafe newobj bwd 
BB04 [0038]  1       BB03                  8     0 [0CA..0CD)-> BB06 ( cond )                     keep i gcsafe bwd cfb 
BB05 [0039]  1       BB04                  4     0 [0CD..0D4)                                     i hascall gcsafe bwd 
BB06 [0006]  2       BB04,BB05             8     0 [0D4..0DD)-> BB02 ( cond )                     i gcsafe bwd 
BB07 [0008]  2       BB01,BB06             1       [0DD..0F9)                                     i hascall gcsafe 
BB08 [0009]  2       BB07,BB12             8     1 [0F9..102)                                     i Loop gcsafe bwd bwd-target align 
BB09 [0010]  1  1    BB08                  8     1 [102..122)-> BB13 ( cond ) T1      try { }     keep i try hascall gcsafe bwd 
BB10 [0041]  1       BB09                  8     1 [126..129)-> BB12 ( cond )                     keep i gcsafe bwd cfb 
BB11 [0042]  1       BB10                  4     1 [129..130)                                     i hascall gcsafe bwd 
BB12 [0016]  2       BB10,BB11             8     1 [130..139)-> BB08 (always)                     i hascall gcsafe bwd 
BB13 [0030]  1       BB09                  1       [???..???)-> BB30 (callf )                     i internal gcsafe 
BB14 [0031]  1       BB32                  1       [???..???)-> BB15 (ALWAYS)                     i internal gcsafe KEEP 
BB15 [0017]  1       BB14                  1       [139..17D)                                     i hascall gcsafe 
BB16 [0045]  2       BB15,BB25             1     2 [???..???)                                     internal gcsafe 
BB17 [0046]  2       BB16,BB24             1     3 [???..???)                                     internal gcsafe 
BB18 [0047]  2       BB17,BB22             1     4 [???..???)                                     internal gcsafe 
BB19 [0018]  2       BB18,BB20             8     5 [17D..18F)-> BB21 ( cond )                     i Loop hascall gcsafe bwd bwd-target align 
BB20 [0019]  1       BB19                  8     5 [18F..19B)-> BB19 (always)                     i hascall gcsafe bwd 
BB21 [0020]  1       BB19                  1     4 [19B..1A6)-> BB23 ( cond )                     i gcsafe bwd 
BB22 [0021]  1       BB21                  1     4 [1A6..1AD)-> BB18 (always)                     i hascall gcsafe bwd 
BB23 [0022]  1       BB21                  1     3 [1AD..1B8)-> BB25 ( cond )                     i gcsafe bwd 
BB24 [0023]  1       BB23                  1     3 [1B8..1C1)-> BB17 (always)                     i gcsafe bwd 
BB25 [0024]  1       BB23                  1     2 [1C1..1CC)-> BB16 ( cond )                     i gcsafe bwd 
BB26 [0025]  1       BB25                  1       [1CC..1D4)        (return)                     i gcsafe 
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ funclets follow
BB27 [0003]  1     0                       0       [0CA..0CD)-> BB29 ( cond )    H0 F fault {     keep i rare flet bwd 
BB28 [0004]  1     0 BB27                  0       [0CD..0D3)                    H0               i rare hascall bwd 
BB29 [0005]  2     0 BB27,BB28             0       [0D3..0D4)        (finret)    H0   }           i rare bwd 
BB30 [0013]  2     1 BB13                  1       [126..129)-> BB32 ( cond )    H1 F finally {   keep i gcsafe flet bwd 
BB31 [0014]  1     1 BB30                  1       [129..12F)                    H1               i hascall gcsafe bwd 
BB32 [0015]  2     1 BB30,BB31             1       [12F..130)        (finret)    H1   }           i gcsafe bwd 
-----------------------------------------------------------------------------------------------------------------------------------------

------------ BB01 [000..072) -> BB07 (cond), preds={} succs={BB02,BB07}

***** BB01
STMT00000 (IL 0x000...0x005)
               [000003] -ACXG+------              *  ASG       struct (copy)
               [000001] D---G+-N----              +--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  +--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
               [000000] --CXG+------              \--*  CALL      struct System.DateTime.get_Now

***** BB01
STMT00001 (IL 0x006...0x022)
               [000009] --CXG+------              *  CALL      void   System.Console.WriteLine
               [000008] --CXG+------ arg0 in rcx  \--*  CALL      ref    System.String.Concat
               [000272] -ACXG-----L- arg0 SETUP      +--*  ASG       ref   
               [000271] D------N----                 |  +--*  LCL_VAR   ref    V21 tmp14        
               [000006] --CXG+------                 |  \--*  CALL      ref    System.DateTime.ToString
               [000005] -----+------ this in rcx     |     \--*  ADDR      byref 
               [000004] ----G+-N----                 |        \--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                     |        \--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
               [000273] ------------ arg0 in rcx     +--*  LCL_VAR   ref    V21 tmp14        
               [000270] #---G+------ arg1 in rdx     \--*  IND       ref   
               [000269] H----+------                    \--*  CNS_INT(h) long   0x750031F0 "	 Created list"

***** BB01
STMT00002 (IL 0x01C...  ???)
               [000014] -AC--+------              *  ASG       ref   
               [000013] D----+-N----              +--*  LCL_VAR   ref    V08 tmp1         
               [000012] --C--+------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
               [000011] H----+------ arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb3ee2350 method

***** BB01
STMT00003 (IL   ???...  ???)
               [000016] --CXG+------              *  CALL      void   FalseLeakRepro.List..ctor
               [000015] -----+------ this in rcx  \--*  LCL_VAR   ref    V08 tmp1         

***** BB01
STMT00004 (IL 0x022...  ???)
               [000019] -A-XG+------              *  ASG       ref   
               [000018] ---XG+-N----              +--*  IND       ref   
               [000279] -----+------              |  \--*  ADD       byref 
               [000010] -----+------              |     +--*  LCL_VAR   ref    V00 this         
               [000278] -----+------              |     \--*  CNS_INT   long   8 field offset Fseq[_myList]
               [000017] -----+------              \--*  LCL_VAR   ref    V08 tmp1         

***** BB01
STMT00005 (IL 0x027...0x037)
               [000026] -AC--+------              *  ASG       ref   
               [000025] D----+-N----              +--*  LCL_VAR   ref    V09 tmp2         
               [000024] --C--+------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
               [000023] H----+------ arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb3b058b8 token

***** BB01
STMT00007 (IL   ???...  ???)
               [000030] -A-XG+------              *  ASG       ref   
               [000029] D----+-N----              +--*  LCL_VAR   ref    V10 tmp3         
               [000022] ---XG+------              \--*  IND       ref   
               [000282] ---XG+------                 \--*  ADD       byref 
               [000021] ---XG+------                    +--*  IND       ref   
               [000284] -----+------                    |  \--*  ADD       byref 
               [000020] -----+------                    |     +--*  LCL_VAR   ref    V00 this         
               [000283] -----+------                    |     \--*  CNS_INT   long   8 field offset Fseq[_myList]
               [000281] -----+------                    \--*  CNS_INT   long   8 field offset Fseq[Head]

***** BB01
STMT00006 (IL   ???...  ???)
               [000028] --CXG+------              *  CALL      void   System.Object..ctor
               [000027] -----+------ this in rcx  \--*  LCL_VAR   ref    V09 tmp2         

***** BB01
STMT00008 (IL 0x037...  ???)
               [000034] -A-XG+------              *  ASG       ref   
               [000033] ---XG+-N----              +--*  IND       ref   
               [000287] -----+------              |  \--*  ADD       byref 
               [000031] -----+------              |     +--*  LCL_VAR   ref    V10 tmp3         
               [000286] -----+------              |     \--*  CNS_INT   long   16 field offset Fseq[Data]
               [000032] -----+------              \--*  LCL_VAR   ref    V09 tmp2         

***** BB01
STMT00009 (IL 0x03C...0x057)
               [000040] -AC--+------              *  ASG       ref   
               [000039] D----+-N----              +--*  LCL_VAR   ref    V11 tmp4         
               [000038] --C--+------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
               [000037] H----+------ arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb3ee6200 token

***** BB01
STMT00010 (IL   ???...  ???)
               [000042] --CXG+------              *  CALL      void   System.MulticastDelegate.CtorClosed
               [000041] -----+------ this in rcx  +--*  LCL_VAR   ref    V11 tmp4         
               [000035] -----+------ arg1 in rdx  +--*  LCL_VAR   ref    V00 this         
               [000036] H----+------ arg2 in r8   \--*  CNS_INT(h) long   0x7ffdb3b213f8 ftn

***** BB01
STMT00011 (IL 0x048...  ???)
               [000047] -AC--+------              *  ASG       ref   
               [000046] D----+-N----              +--*  LCL_VAR   ref    V12 tmp5         
               [000045] --C--+------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWFAST
               [000044] H----+------ arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb3c84e80 token

***** BB01
STMT00012 (IL   ???...  ???)
               [000049] --CXG+------              *  CALL      void   System.Threading.Thread..ctor
               [000048] -----+------ this in rcx  +--*  LCL_VAR   ref    V12 tmp5         
               [000043] -----+------ arg1 in rdx  \--*  LCL_VAR   ref    V11 tmp4         

***** BB01
STMT00013 (IL 0x04D...  ???)
               [000051] --CXG+------              *  CALL nullcheck void   System.Threading.Thread.Start
               [000050] -----+------ this in rcx  \--*  LCL_VAR   ref    V12 tmp5         

***** BB01
STMT00014 (IL 0x052...  ???)
               [000055] -ACXG+------              *  ASG       struct (copy)
               [000053] D---G+-N----              +--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  +--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
               [000052] --CXG+------              \--*  CALL      struct System.DateTime.get_Now

***** BB01
STMT00015 (IL 0x058...0x06F)
               [000061] --CXG+------              *  CALL      void   System.Console.WriteLine
               [000060] --CXG+------ arg0 in rcx  \--*  CALL      ref    System.String.Concat
               [000300] -ACXG-----L- arg0 SETUP      +--*  ASG       ref   
               [000299] D------N----                 |  +--*  LCL_VAR   ref    V22 tmp15        
               [000058] --CXG+------                 |  \--*  CALL      ref    System.DateTime.ToString
               [000057] -----+------ this in rcx     |     \--*  ADDR      byref 
               [000056] ----G+-N----                 |        \--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                     |        \--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
               [000301] ------------ arg0 in rcx     +--*  LCL_VAR   ref    V22 tmp15        
               [000298] #---G+------ arg1 in rdx     \--*  IND       ref   
               [000297] H----+------                    \--*  CNS_INT(h) long   0x750031F8 "	 Consumer thread started, adding items..."

***** BB01
STMT00016 (IL 0x06E...  ???)
               [000064] -A---+------              *  ASG       int   
               [000063] D----+-N----              +--*  LCL_VAR   int    V03 loc1         
               [000062] -----+------              \--*  CNS_INT   int    0

***** BB01
STMT00072 (IL 0x0D8...  ???)
     (  7,  6) [000390] ------------              *  JTRUE     void  
     (  5,  4) [000391] J------N----              \--*  GE        int   
     (  3,  2) [000392] ------------                 +--*  LCL_VAR   int    V03 loc1         
     (  1,  1) [000393] ------------                 \--*  CNS_INT   int    10

------------ BB02 [072..07B), preds={BB01,BB06} succs={BB03}

***** BB02
STMT00018 (IL 0x072...0x078)
               [000072] -A-XG+------              *  ASG       ref   
               [000071] D----+-N----              +--*  LCL_VAR   ref    V04 loc2         
               [000070] ---XG+------              \--*  IND       ref   
               [000305] -----+------                 \--*  ADD       byref 
               [000069] -----+------                    +--*  LCL_VAR   ref    V00 this         
               [000304] -----+------                    \--*  CNS_INT   long   8 field offset Fseq[_myList]

***** BB02
STMT00019 (IL 0x079...0x07A)
               [000075] -A--G+------              *  ASG       int   
               [000074] D---G+-N----              +--*  LCL_VAR   int   (AX) V05 loc3         
               [000073] -----+------              \--*  CNS_INT   int    0

------------ BB03 [07B..0CA), preds={BB02} succs={BB04}

***** BB03
STMT00020 (IL 0x07B...0x093)
               [000079] --CXG+------              *  CALL      void   System.Threading.Monitor.Enter
               [000078] -----+------ arg1 in rdx  +--*  LCL_VAR_ADDR long   V05 loc3         
               [000076] -----+------ arg0 in rcx  \--*  LCL_VAR   ref    V04 loc2         

***** BB03
STMT00021 (IL 0x083...  ???)
               [000086] -AC--+------              *  ASG       ref   
               [000085] D----+-N----              +--*  LCL_VAR   ref    V13 tmp6         
               [000084] --C--+------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
               [000083] H----+------ arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb3ee58a8 method

***** BB03
STMT00023 (IL   ???...  ???)
               [000090] -A-XG+------              *  ASG       ref   
               [000089] D----+-N----              +--*  LCL_VAR   ref    V14 tmp7         
               [000082] ---XG+------              \--*  IND       ref   
               [000310] ---XG+------                 \--*  ADD       byref 
               [000081] ---XG+------                    +--*  IND       ref   
               [000312] -----+------                    |  \--*  ADD       byref 
               [000080] -----+------                    |     +--*  LCL_VAR   ref    V00 this         
               [000311] -----+------                    |     \--*  CNS_INT   long   8 field offset Fseq[_myList]
               [000309] -----+------                    \--*  CNS_INT   long   8 field offset Fseq[Head]

***** BB03
STMT00065 (IL   ???...  ???)
               [000230] --CXG+------              *  CALL      void   System.Object..ctor
               [000087] -----+------ this in rcx  \--*  LCL_VAR   ref    V13 tmp6         

***** BB03
STMT00024 (IL 0x093...  ???)
               [000094] -A-XG+------              *  ASG       ref   
               [000093] ---XG+-N----              +--*  IND       ref   
               [000315] -----+------              |  \--*  ADD       byref 
               [000091] -----+------              |     +--*  LCL_VAR   ref    V14 tmp7         
               [000314] -----+------              |     \--*  CNS_INT   long   8 field offset Fseq[Next]
               [000092] -----+------              \--*  LCL_VAR   ref    V13 tmp6         

***** BB03
STMT00025 (IL 0x098...0x0AE)
               [000102] -A-XG+------              *  ASG       ref   
               [000101] ---XG+-N----              +--*  IND       ref   
               [000317] ---XG+------              |  \--*  ADD       byref 
               [000096] ---XG+------              |     +--*  IND       ref   
               [000319] -----+------              |     |  \--*  ADD       byref 
               [000095] -----+------              |     |     +--*  LCL_VAR   ref    V00 this         
               [000318] -----+------              |     |     \--*  CNS_INT   long   8 field offset Fseq[_myList]
               [000316] -----+------              |     \--*  CNS_INT   long   8 field offset Fseq[Head]
               [000100] ---XG+------              \--*  IND       ref   
               [000321] ---XG+------                 \--*  ADD       byref 
               [000099] ---XG+------                    +--*  IND       ref   
               [000323] ---XG+------                    |  \--*  ADD       byref 
               [000098] ---XG+------                    |     +--*  IND       ref   
               [000325] -----+------                    |     |  \--*  ADD       byref 
               [000097] -----+------                    |     |     +--*  LCL_VAR   ref    V00 this         
               [000324] -----+------                    |     |     \--*  CNS_INT   long   8 field offset Fseq[_myList]
               [000322] -----+------                    |     \--*  CNS_INT   long   8 field offset Fseq[Head]
               [000320] -----+------                    \--*  CNS_INT   long   8 field offset Fseq[Next]

***** BB03
STMT00026 (IL 0x0B3...0x0C3)
               [000109] -AC--+------              *  ASG       ref   
               [000108] D----+-N----              +--*  LCL_VAR   ref    V15 tmp8         
               [000107] --C--+------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
               [000106] H----+------ arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb3b058b8 token

***** BB03
STMT00028 (IL   ???...  ???)
               [000113] -A-XG+------              *  ASG       ref   
               [000112] D----+-N----              +--*  LCL_VAR   ref    V16 tmp9         
               [000105] ---XG+------              \--*  IND       ref   
               [000328] ---XG+------                 \--*  ADD       byref 
               [000104] ---XG+------                    +--*  IND       ref   
               [000330] -----+------                    |  \--*  ADD       byref 
               [000103] -----+------                    |     +--*  LCL_VAR   ref    V00 this         
               [000329] -----+------                    |     \--*  CNS_INT   long   8 field offset Fseq[_myList]
               [000327] -----+------                    \--*  CNS_INT   long   8 field offset Fseq[Head]

***** BB03
STMT00027 (IL   ???...  ???)
               [000111] --CXG+------              *  CALL      void   System.Object..ctor
               [000110] -----+------ this in rcx  \--*  LCL_VAR   ref    V15 tmp8         

***** BB03
STMT00029 (IL 0x0C3...  ???)
               [000117] -A-XG+------              *  ASG       ref   
               [000116] ---XG+-N----              +--*  IND       ref   
               [000333] -----+------              |  \--*  ADD       byref 
               [000114] -----+------              |     +--*  LCL_VAR   ref    V16 tmp9         
               [000332] -----+------              |     \--*  CNS_INT   long   16 field offset Fseq[Data]
               [000115] -----+------              \--*  LCL_VAR   ref    V15 tmp8         

------------ BB04 [0CA..0CD) -> BB06 (cond), preds={BB03} succs={BB05,BB06}

***** BB04
STMT00066 (IL   ???...  ???)
               [000254] ----G+------              *  JTRUE     void  
               [000255] J---G+-N----              \--*  EQ        int   
               [000334] ----G+------                 +--*  CAST      int <- bool <- int
               [000256] ----G+------                 |  \--*  LCL_VAR   int   (AX) V05 loc3         
               [000257] -----+------                 \--*  CNS_INT   int    0

------------ BB05 [0CD..0D4), preds={BB04} succs={BB06}

***** BB05
STMT00067 (IL   ???...  ???)
               [000258] --CXG+------              *  CALL      void   System.Threading.Monitor.Exit
               [000259] -----+------ arg0 in rcx  \--*  LCL_VAR   ref    V04 loc2         

------------ BB06 [0D4..0DD) -> BB02 (cond), preds={BB04,BB05} succs={BB07,BB02}

***** BB06
STMT00030 (IL 0x0D4...0x0D7)
               [000122] -A---+------              *  ASG       int   
               [000121] D----+-N----              +--*  LCL_VAR   int    V03 loc1         
               [000120] -----+------              \--*  ADD       int   
               [000118] -----+------                 +--*  LCL_VAR   int    V03 loc1         
               [000119] -----+------                 \--*  CNS_INT   int    1

***** BB06
STMT00017 (IL 0x0D8...0x0DB)
     (  7,  6) [000068] ------------              *  JTRUE     void  
     (  5,  4) [000067] J------N----              \--*  LT        int   
     (  3,  2) [000065] ------------                 +--*  LCL_VAR   int    V03 loc1         
     (  1,  1) [000066] ------------                 \--*  CNS_INT   int    10

------------ BB07 [0DD..0F9), preds={BB01,BB06} succs={BB08}

***** BB07
STMT00034 (IL 0x0DD...0x0E2)
               [000133] -ACXG+------              *  ASG       struct (copy)
               [000131] D---G+-N----              +--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  +--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
               [000130] --CXG+------              \--*  CALL      struct System.DateTime.get_Now

***** BB07
STMT00035 (IL 0x0E3...0x0F4)
               [000139] --CXG+------              *  CALL      void   System.Console.WriteLine
               [000138] --CXG+------ arg0 in rcx  \--*  CALL      ref    System.String.Concat
               [000342] -ACXG-----L- arg0 SETUP      +--*  ASG       ref   
               [000341] D------N----                 |  +--*  LCL_VAR   ref    V23 tmp16        
               [000136] --CXG+------                 |  \--*  CALL      ref    System.DateTime.ToString
               [000135] -----+------ this in rcx     |     \--*  ADDR      byref 
               [000134] ----G+-N----                 |        \--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                     |        \--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
               [000343] ------------ arg0 in rcx     +--*  LCL_VAR   ref    V23 tmp16        
               [000340] #---G+------ arg1 in rdx     \--*  IND       ref   
               [000339] H----+------                    \--*  CNS_INT(h) long   0x75003200 "	 Waiting for list processing to complete..."

------------ BB08 [0F9..102), preds={BB07,BB12} succs={BB09}

***** BB08
STMT00036 (IL 0x0F9...0x0FF)
               [000143] -A-XG+------              *  ASG       ref   
               [000142] D----+-N----              +--*  LCL_VAR   ref    V04 loc2         
               [000141] ---XG+------              \--*  IND       ref   
               [000347] -----+------                 \--*  ADD       byref 
               [000140] -----+------                    +--*  LCL_VAR   ref    V00 this         
               [000346] -----+------                    \--*  CNS_INT   long   8 field offset Fseq[_myList]

***** BB08
STMT00037 (IL 0x100...0x101)
               [000146] -A--G+------              *  ASG       int   
               [000145] D---G+-N----              +--*  LCL_VAR   int   (AX) V05 loc3         
               [000144] -----+------              \--*  CNS_INT   int    0

------------ BB09 [102..122) -> BB13 (cond), preds={BB08} succs={BB10,BB13}

***** BB09
STMT00038 (IL 0x102...0x120)
               [000150] --CXG+------              *  CALL      void   System.Threading.Monitor.Enter
               [000149] -----+------ arg1 in rdx  +--*  LCL_VAR_ADDR long   V05 loc3         
               [000147] -----+------ arg0 in rcx  \--*  LCL_VAR   ref    V04 loc2         

***** BB09
STMT00039 (IL 0x10A...  ???)
               [000158] ---XG+------              *  JTRUE     void  
               [000157] N--XG+-N-U--              \--*  EQ        int   
               [000153] ---XG+------                 +--*  IND       ref   
               [000351] ---XG+------                 |  \--*  ADD       byref 
               [000152] ---XG+------                 |     +--*  IND       ref   
               [000353] -----+------                 |     |  \--*  ADD       byref 
               [000151] -----+------                 |     |     +--*  LCL_VAR   ref    V00 this         
               [000352] -----+------                 |     |     \--*  CNS_INT   long   8 field offset Fseq[_myList]
               [000350] -----+------                 |     \--*  CNS_INT   long   8 field offset Fseq[Head]
               [000156] ---XG+------                 \--*  IND       ref   
               [000355] ---XG+------                    \--*  ADD       byref 
               [000155] ---XG+------                       +--*  IND       ref   
               [000357] -----+------                       |  \--*  ADD       byref 
               [000154] -----+------                       |     +--*  LCL_VAR   ref    V00 this         
               [000356] -----+------                       |     \--*  CNS_INT   long   8 field offset Fseq[_myList]
               [000354] -----+------                       \--*  CNS_INT   long   16 field offset Fseq[Tail]

------------ BB10 [126..129) -> BB12 (cond), preds={BB09} succs={BB11,BB12}

***** BB10
STMT00069 (IL   ???...  ???)
               [000261] ----G+------              *  JTRUE     void  
               [000262] J---G+-N----              \--*  EQ        int   
               [000358] ----G+------                 +--*  CAST      int <- bool <- int
               [000263] ----G+------                 |  \--*  LCL_VAR   int   (AX) V05 loc3         
               [000264] -----+------                 \--*  CNS_INT   int    0

------------ BB11 [129..130), preds={BB10} succs={BB12}

***** BB11
STMT00070 (IL   ???...  ???)
               [000265] --CXG+------              *  CALL      void   System.Threading.Monitor.Exit
               [000266] -----+------ arg0 in rcx  \--*  LCL_VAR   ref    V04 loc2         

------------ BB12 [130..139) -> BB08 (always), preds={BB10,BB11} succs={BB08}

***** BB12
STMT00040 (IL 0x130...0x137)
               [000160] --CXG+------              *  CALL      void   System.Threading.Thread.Sleep
               [000159] -----+------ arg0 in rcx  \--*  CNS_INT   int    100

------------ BB13 [???..???) -> BB30 (callf), preds={BB09} succs={BB30}

------------ BB14 [???..???) -> BB15 (ALWAYS), preds={BB32} succs={BB15}

------------ BB15 [139..17D), preds={BB14} succs={BB16}

***** BB15
STMT00041 (IL 0x139...0x13E)
               [000164] -ACXG+------              *  ASG       struct (copy)
               [000162] D---G+-N----              +--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  +--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
               [000161] --CXG+------              \--*  CALL      struct System.DateTime.get_Now

***** BB15
STMT00042 (IL 0x13F...0x178)
               [000170] --CXG+------              *  CALL      void   System.Console.WriteLine
               [000169] --CXG+------ arg0 in rcx  \--*  CALL      ref    System.String.Concat
               [000367] -ACXG-----L- arg0 SETUP      +--*  ASG       ref   
               [000366] D------N----                 |  +--*  LCL_VAR   ref    V24 tmp17        
               [000167] --CXG+------                 |  \--*  CALL      ref    System.DateTime.ToString
               [000166] -----+------ this in rcx     |     \--*  ADDR      byref 
               [000165] ----G+-N----                 |        \--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                     |        \--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
               [000368] ------------ arg0 in rcx     +--*  LCL_VAR   ref    V24 tmp17        
               [000365] #---G+------ arg1 in rdx     \--*  IND       ref   
               [000364] H----+------                    \--*  CNS_INT(h) long   0x75003208 "	 Done.  Profiler is active, available options:"

***** BB15
STMT00043 (IL 0x155...  ???)
               [000172] --CXG+------              *  CALL      void   System.Console.WriteLine
               [000372] #---G+------ arg0 in rcx  \--*  IND       ref   
               [000371] H----+------                 \--*  CNS_INT(h) long   0x75003210 "   Q = quit"

***** BB15
STMT00044 (IL 0x15F...  ???)
               [000174] --CXG+------              *  CALL      void   System.Console.WriteLine
               [000375] #---G+------ arg0 in rcx  \--*  IND       ref   
               [000374] H----+------                 \--*  CNS_INT(h) long   0x75003218 "   H = heap snapshot"

***** BB15
STMT00045 (IL 0x169...  ???)
               [000176] --CXG+------              *  CALL      void   System.Console.WriteLine
               [000378] #---G+------ arg0 in rcx  \--*  IND       ref   
               [000377] H----+------                 \--*  CNS_INT(h) long   0x75003220 "   G = GC (max gen)"

***** BB15
STMT00046 (IL 0x173...  ???)
               [000178] --CXG+------              *  CALL      void   System.Console.WriteLine
               [000381] #---G+------ arg0 in rcx  \--*  IND       ref   
               [000380] H----+------                 \--*  CNS_INT(h) long   0x75003228 "   R = clear the running flag to stop the consumer thread"

------------ BB16 [???..???), preds={BB15,BB25} succs={BB17}

------------ BB17 [???..???), preds={BB16,BB24} succs={BB18}

------------ BB18 [???..???), preds={BB17,BB22} succs={BB19}

------------ BB19 [17D..18F) -> BB21 (cond), preds={BB18,BB20} succs={BB20,BB21}

***** BB19
STMT00048 (IL   ???...  ???)
     ( 18, 11) [000233] S-CXG-------              *  CALL      void   System.ConsolePal.ReadKey
     (  3,  3) [000235] ------------ arg0 in rcx  +--*  ADDR      long  
     (  3,  2) [000236] ----G--N----              |  \--*  LCL_VAR   struct<System.ConsoleKeyInfo, 12>(AX)(P) V06 loc4         
                                                  |  \--*    ushort V06._keyChar (offs=0x00) -> V18 tmp11        
                                                  |  \--*    int    V06._key (offs=0x04) -> V19 tmp12        
                                                  |  \--*    int    V06._mods (offs=0x08) -> V20 tmp13        
     (  1,  1) [000232] ------------ arg1 in rdx  \--*  CNS_INT   int    0

***** BB19
STMT00050 (IL   ???...  ???)
     (  7,  6) [000189] ----G-------              *  JTRUE     void  
     (  5,  4) [000188] N---G--N-U--              \--*  NE        int   
     (  3,  2) [000240] ----G-------                 +--*  LCL_VAR   int   (AX) V19 tmp12        
     (  1,  1) [000187] ------------                 \--*  CNS_INT   int    71

------------ BB20 [18F..19B) -> BB19 (always), preds={BB19} succs={BB19}

***** BB20
STMT00061 (IL 0x18F...0x199)
               [000222] --CXG+------              *  CALL      void   System.GC.Collect
               [000221] --CXG+------ arg0 in rcx  \--*  CALL      int    System.GC.get_MaxGeneration

------------ BB21 [19B..1A6) -> BB23 (cond), preds={BB19} succs={BB22,BB23}

***** BB21
STMT00052 (IL   ???...  ???)
               [000196] ----G+------              *  JTRUE     void  
               [000195] N---G+-N-U--              \--*  NE        int   
               [000244] ----G+------                 +--*  LCL_VAR   int   (AX) V19 tmp12        
               [000194] -----+------                 \--*  CNS_INT   int    72

------------ BB22 [1A6..1AD) -> BB18 (always), preds={BB21} succs={BB18}

***** BB22
STMT00060 (IL 0x1A6...0x1AB)
               [000220] --CXG+------              *  CALL      void   System.Diagnostics.Debugger.Break

------------ BB23 [1AD..1B8) -> BB25 (cond), preds={BB21} succs={BB24,BB25}

***** BB23
STMT00054 (IL   ???...  ???)
               [000203] ----G+------              *  JTRUE     void  
               [000202] N---G+-N-U--              \--*  NE        int   
               [000248] ----G+------                 +--*  LCL_VAR   int   (AX) V19 tmp12        
               [000201] -----+------                 \--*  CNS_INT   int    82

------------ BB24 [1B8..1C1) -> BB17 (always), preds={BB23} succs={BB17}

***** BB24
STMT00059 (IL 0x1B8...0x1BA)
               [000219] -A-XG+------              *  ASG       bool  
               [000218] ---XG+-N----              +--*  IND       bool  
               [000387] -----+------              |  \--*  ADD       byref 
               [000216] -----+------              |     +--*  LCL_VAR   ref    V00 this         
               [000386] -----+------              |     \--*  CNS_INT   long   16 field offset Fseq[_running]
               [000217] -----+------              \--*  CNS_INT   int    0

------------ BB25 [1C1..1CC) -> BB16 (cond), preds={BB23} succs={BB26,BB16}

***** BB25
STMT00056 (IL   ???...  ???)
               [000210] ----G+------              *  JTRUE     void  
               [000209] N---G+-N-U--              \--*  NE        int   
               [000252] ----G+------                 +--*  LCL_VAR   int   (AX) V19 tmp12        
               [000208] -----+------                 \--*  CNS_INT   int    81

------------ BB26 [1CC..1D4) (return), preds={BB25} succs={}

***** BB26
STMT00057 (IL 0x1CC...0x1CE)
               [000214] -A-XG+------              *  ASG       bool  
               [000213] ---XG+-N----              +--*  IND       bool  
               [000389] -----+------              |  \--*  ADD       byref 
               [000211] -----+------              |     +--*  LCL_VAR   ref    V00 this         
               [000388] -----+------              |     \--*  CNS_INT   long   16 field offset Fseq[_running]
               [000212] -----+------              \--*  CNS_INT   int    0

***** BB26
STMT00058 (IL 0x1D3...0x1D3)
               [000215] -----+------              *  RETURN    void  

------------ BB27 [0CA..0CD) -> BB29 (cond), preds={} succs={BB28,BB29}

***** BB27
STMT00031 (IL 0x0CA...0x0CB)
               [000126] ----G+------              *  JTRUE     void  
               [000125] J---G+-N----              \--*  EQ        int   
               [000336] ----G+------                 +--*  CAST      int <- bool <- int
               [000123] ----G+------                 |  \--*  LCL_VAR   int   (AX) V05 loc3         
               [000124] -----+------                 \--*  CNS_INT   int    0

------------ BB28 [0CD..0D3), preds={BB27} succs={BB29}

***** BB28
STMT00033 (IL 0x0CD...0x0CE)
               [000129] --CXG+------              *  CALL      void   System.Threading.Monitor.Exit
               [000128] -----+------ arg0 in rcx  \--*  LCL_VAR   ref    V04 loc2         

------------ BB29 [0D3..0D4) (finret), preds={BB27,BB28} succs={}

***** BB29
STMT00032 (IL 0x0D3...0x0D3)
               [000127] -----+------              *  RETFILT   void  

------------ BB30 [126..129) -> BB32 (cond), preds={BB13} succs={BB31,BB32}

***** BB30
STMT00062 (IL 0x126...0x127)
               [000226] ----G+------              *  JTRUE     void  
               [000225] J---G+-N----              \--*  EQ        int   
               [000360] ----G+------                 +--*  CAST      int <- bool <- int
               [000223] ----G+------                 |  \--*  LCL_VAR   int   (AX) V05 loc3         
               [000224] -----+------                 \--*  CNS_INT   int    0

------------ BB31 [129..12F), preds={BB30} succs={BB32}

***** BB31
STMT00064 (IL 0x129...0x12A)
               [000229] --CXG+------              *  CALL      void   System.Threading.Monitor.Exit
               [000228] -----+------ arg0 in rcx  \--*  LCL_VAR   ref    V04 loc2         

------------ BB32 [12F..130) (finret), preds={BB30,BB31} succs={BB14}

***** BB32
STMT00063 (IL 0x12F...0x12F)
               [000227] -----+------              *  RETFILT   void  

-------------------------------------------------------------------------------------------------------------------
*************** In fgDebugCheckBBlist

*************** Starting PHASE Clone loops

*************** In optCloneLoops()

Before loop cloning:

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..072)-> BB07 ( cond )                     i hascall gcsafe newobj 
BB02 [0001]  2       BB01,BB06             8     0 [072..07B)                                     i Loop gcsafe bwd bwd-target align 
BB03 [0002]  1  0    BB02                  8     0 [07B..0CA)                 T0      try { }     keep i try hascall gcsafe newobj bwd 
BB04 [0038]  1       BB03                  8     0 [0CA..0CD)-> BB06 ( cond )                     keep i gcsafe bwd cfb 
BB05 [0039]  1       BB04                  4     0 [0CD..0D4)                                     i hascall gcsafe bwd 
BB06 [0006]  2       BB04,BB05             8     0 [0D4..0DD)-> BB02 ( cond )                     i gcsafe bwd 
BB07 [0008]  2       BB01,BB06             1       [0DD..0F9)                                     i hascall gcsafe 
BB08 [0009]  2       BB07,BB12             8     1 [0F9..102)                                     i Loop gcsafe bwd bwd-target align 
BB09 [0010]  1  1    BB08                  8     1 [102..122)-> BB13 ( cond ) T1      try { }     keep i try hascall gcsafe bwd 
BB10 [0041]  1       BB09                  8     1 [126..129)-> BB12 ( cond )                     keep i gcsafe bwd cfb 
BB11 [0042]  1       BB10                  4     1 [129..130)                                     i hascall gcsafe bwd 
BB12 [0016]  2       BB10,BB11             8     1 [130..139)-> BB08 (always)                     i hascall gcsafe bwd 
BB13 [0030]  1       BB09                  1       [???..???)-> BB30 (callf )                     i internal gcsafe 
BB14 [0031]  1       BB32                  1       [???..???)-> BB15 (ALWAYS)                     i internal gcsafe KEEP 
BB15 [0017]  1       BB14                  1       [139..17D)                                     i hascall gcsafe 
BB16 [0045]  2       BB15,BB25             1     2 [???..???)                                     internal gcsafe 
BB17 [0046]  2       BB16,BB24             1     3 [???..???)                                     internal gcsafe 
BB18 [0047]  2       BB17,BB22             1     4 [???..???)                                     internal gcsafe 
BB19 [0018]  2       BB18,BB20             8     5 [17D..18F)-> BB21 ( cond )                     i Loop hascall gcsafe bwd bwd-target align 
BB20 [0019]  1       BB19                  8     5 [18F..19B)-> BB19 (always)                     i hascall gcsafe bwd 
BB21 [0020]  1       BB19                  1     4 [19B..1A6)-> BB23 ( cond )                     i gcsafe bwd 
BB22 [0021]  1       BB21                  1     4 [1A6..1AD)-> BB18 (always)                     i hascall gcsafe bwd 
BB23 [0022]  1       BB21                  1     3 [1AD..1B8)-> BB25 ( cond )                     i gcsafe bwd 
BB24 [0023]  1       BB23                  1     3 [1B8..1C1)-> BB17 (always)                     i gcsafe bwd 
BB25 [0024]  1       BB23                  1     2 [1C1..1CC)-> BB16 ( cond )                     i gcsafe bwd 
BB26 [0025]  1       BB25                  1       [1CC..1D4)        (return)                     i gcsafe 
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ funclets follow
BB27 [0003]  1     0                       0       [0CA..0CD)-> BB29 ( cond )    H0 F fault {     keep i rare flet bwd 
BB28 [0004]  1     0 BB27                  0       [0CD..0D3)                    H0               i rare hascall bwd 
BB29 [0005]  2     0 BB27,BB28             0       [0D3..0D4)        (finret)    H0   }           i rare bwd 
BB30 [0013]  2     1 BB13                  1       [126..129)-> BB32 ( cond )    H1 F finally {   keep i gcsafe flet bwd 
BB31 [0014]  1     1 BB30                  1       [129..12F)                    H1               i hascall gcsafe bwd 
BB32 [0015]  2     1 BB30,BB31             1       [12F..130)        (finret)    H1   }           i gcsafe bwd 
-----------------------------------------------------------------------------------------------------------------------------------------

------------ BB01 [000..072) -> BB07 (cond), preds={} succs={BB02,BB07}

***** BB01
STMT00000 (IL 0x000...0x005)
               [000003] -ACXG+------              *  ASG       struct (copy)
               [000001] D---G+-N----              +--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  +--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
               [000000] --CXG+------              \--*  CALL      struct System.DateTime.get_Now

***** BB01
STMT00001 (IL 0x006...0x022)
               [000009] --CXG+------              *  CALL      void   System.Console.WriteLine
               [000008] --CXG+------ arg0 in rcx  \--*  CALL      ref    System.String.Concat
               [000272] -ACXG-----L- arg0 SETUP      +--*  ASG       ref   
               [000271] D------N----                 |  +--*  LCL_VAR   ref    V21 tmp14        
               [000006] --CXG+------                 |  \--*  CALL      ref    System.DateTime.ToString
               [000005] -----+------ this in rcx     |     \--*  ADDR      byref 
               [000004] ----G+-N----                 |        \--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                     |        \--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
               [000273] ------------ arg0 in rcx     +--*  LCL_VAR   ref    V21 tmp14        
               [000270] #---G+------ arg1 in rdx     \--*  IND       ref   
               [000269] H----+------                    \--*  CNS_INT(h) long   0x750031F0 "	 Created list"

***** BB01
STMT00002 (IL 0x01C...  ???)
               [000014] -AC--+------              *  ASG       ref   
               [000013] D----+-N----              +--*  LCL_VAR   ref    V08 tmp1         
               [000012] --C--+------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
               [000011] H----+------ arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb3ee2350 method

***** BB01
STMT00003 (IL   ???...  ???)
               [000016] --CXG+------              *  CALL      void   FalseLeakRepro.List..ctor
               [000015] -----+------ this in rcx  \--*  LCL_VAR   ref    V08 tmp1         

***** BB01
STMT00004 (IL 0x022...  ???)
               [000019] -A-XG+------              *  ASG       ref   
               [000018] ---XG+-N----              +--*  IND       ref   
               [000279] -----+------              |  \--*  ADD       byref 
               [000010] -----+------              |     +--*  LCL_VAR   ref    V00 this         
               [000278] -----+------              |     \--*  CNS_INT   long   8 field offset Fseq[_myList]
               [000017] -----+------              \--*  LCL_VAR   ref    V08 tmp1         

***** BB01
STMT00005 (IL 0x027...0x037)
               [000026] -AC--+------              *  ASG       ref   
               [000025] D----+-N----              +--*  LCL_VAR   ref    V09 tmp2         
               [000024] --C--+------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
               [000023] H----+------ arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb3b058b8 token

***** BB01
STMT00007 (IL   ???...  ???)
               [000030] -A-XG+------              *  ASG       ref   
               [000029] D----+-N----              +--*  LCL_VAR   ref    V10 tmp3         
               [000022] ---XG+------              \--*  IND       ref   
               [000282] ---XG+------                 \--*  ADD       byref 
               [000021] ---XG+------                    +--*  IND       ref   
               [000284] -----+------                    |  \--*  ADD       byref 
               [000020] -----+------                    |     +--*  LCL_VAR   ref    V00 this         
               [000283] -----+------                    |     \--*  CNS_INT   long   8 field offset Fseq[_myList]
               [000281] -----+------                    \--*  CNS_INT   long   8 field offset Fseq[Head]

***** BB01
STMT00006 (IL   ???...  ???)
               [000028] --CXG+------              *  CALL      void   System.Object..ctor
               [000027] -----+------ this in rcx  \--*  LCL_VAR   ref    V09 tmp2         

***** BB01
STMT00008 (IL 0x037...  ???)
               [000034] -A-XG+------              *  ASG       ref   
               [000033] ---XG+-N----              +--*  IND       ref   
               [000287] -----+------              |  \--*  ADD       byref 
               [000031] -----+------              |     +--*  LCL_VAR   ref    V10 tmp3         
               [000286] -----+------              |     \--*  CNS_INT   long   16 field offset Fseq[Data]
               [000032] -----+------              \--*  LCL_VAR   ref    V09 tmp2         

***** BB01
STMT00009 (IL 0x03C...0x057)
               [000040] -AC--+------              *  ASG       ref   
               [000039] D----+-N----              +--*  LCL_VAR   ref    V11 tmp4         
               [000038] --C--+------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
               [000037] H----+------ arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb3ee6200 token

***** BB01
STMT00010 (IL   ???...  ???)
               [000042] --CXG+------              *  CALL      void   System.MulticastDelegate.CtorClosed
               [000041] -----+------ this in rcx  +--*  LCL_VAR   ref    V11 tmp4         
               [000035] -----+------ arg1 in rdx  +--*  LCL_VAR   ref    V00 this         
               [000036] H----+------ arg2 in r8   \--*  CNS_INT(h) long   0x7ffdb3b213f8 ftn

***** BB01
STMT00011 (IL 0x048...  ???)
               [000047] -AC--+------              *  ASG       ref   
               [000046] D----+-N----              +--*  LCL_VAR   ref    V12 tmp5         
               [000045] --C--+------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWFAST
               [000044] H----+------ arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb3c84e80 token

***** BB01
STMT00012 (IL   ???...  ???)
               [000049] --CXG+------              *  CALL      void   System.Threading.Thread..ctor
               [000048] -----+------ this in rcx  +--*  LCL_VAR   ref    V12 tmp5         
               [000043] -----+------ arg1 in rdx  \--*  LCL_VAR   ref    V11 tmp4         

***** BB01
STMT00013 (IL 0x04D...  ???)
               [000051] --CXG+------              *  CALL nullcheck void   System.Threading.Thread.Start
               [000050] -----+------ this in rcx  \--*  LCL_VAR   ref    V12 tmp5         

***** BB01
STMT00014 (IL 0x052...  ???)
               [000055] -ACXG+------              *  ASG       struct (copy)
               [000053] D---G+-N----              +--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  +--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
               [000052] --CXG+------              \--*  CALL      struct System.DateTime.get_Now

***** BB01
STMT00015 (IL 0x058...0x06F)
               [000061] --CXG+------              *  CALL      void   System.Console.WriteLine
               [000060] --CXG+------ arg0 in rcx  \--*  CALL      ref    System.String.Concat
               [000300] -ACXG-----L- arg0 SETUP      +--*  ASG       ref   
               [000299] D------N----                 |  +--*  LCL_VAR   ref    V22 tmp15        
               [000058] --CXG+------                 |  \--*  CALL      ref    System.DateTime.ToString
               [000057] -----+------ this in rcx     |     \--*  ADDR      byref 
               [000056] ----G+-N----                 |        \--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                     |        \--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
               [000301] ------------ arg0 in rcx     +--*  LCL_VAR   ref    V22 tmp15        
               [000298] #---G+------ arg1 in rdx     \--*  IND       ref   
               [000297] H----+------                    \--*  CNS_INT(h) long   0x750031F8 "	 Consumer thread started, adding items..."

***** BB01
STMT00016 (IL 0x06E...  ???)
               [000064] -A---+------              *  ASG       int   
               [000063] D----+-N----              +--*  LCL_VAR   int    V03 loc1         
               [000062] -----+------              \--*  CNS_INT   int    0

***** BB01
STMT00072 (IL 0x0D8...  ???)
     (  7,  6) [000390] ------------              *  JTRUE     void  
     (  5,  4) [000391] J------N----              \--*  GE        int   
     (  3,  2) [000392] ------------                 +--*  LCL_VAR   int    V03 loc1         
     (  1,  1) [000393] ------------                 \--*  CNS_INT   int    10

------------ BB02 [072..07B), preds={BB01,BB06} succs={BB03}

***** BB02
STMT00018 (IL 0x072...0x078)
               [000072] -A-XG+------              *  ASG       ref   
               [000071] D----+-N----              +--*  LCL_VAR   ref    V04 loc2         
               [000070] ---XG+------              \--*  IND       ref   
               [000305] -----+------                 \--*  ADD       byref 
               [000069] -----+------                    +--*  LCL_VAR   ref    V00 this         
               [000304] -----+------                    \--*  CNS_INT   long   8 field offset Fseq[_myList]

***** BB02
STMT00019 (IL 0x079...0x07A)
               [000075] -A--G+------              *  ASG       int   
               [000074] D---G+-N----              +--*  LCL_VAR   int   (AX) V05 loc3         
               [000073] -----+------              \--*  CNS_INT   int    0

------------ BB03 [07B..0CA), preds={BB02} succs={BB04}

***** BB03
STMT00020 (IL 0x07B...0x093)
               [000079] --CXG+------              *  CALL      void   System.Threading.Monitor.Enter
               [000078] -----+------ arg1 in rdx  +--*  LCL_VAR_ADDR long   V05 loc3         
               [000076] -----+------ arg0 in rcx  \--*  LCL_VAR   ref    V04 loc2         

***** BB03
STMT00021 (IL 0x083...  ???)
               [000086] -AC--+------              *  ASG       ref   
               [000085] D----+-N----              +--*  LCL_VAR   ref    V13 tmp6         
               [000084] --C--+------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
               [000083] H----+------ arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb3ee58a8 method

***** BB03
STMT00023 (IL   ???...  ???)
               [000090] -A-XG+------              *  ASG       ref   
               [000089] D----+-N----              +--*  LCL_VAR   ref    V14 tmp7         
               [000082] ---XG+------              \--*  IND       ref   
               [000310] ---XG+------                 \--*  ADD       byref 
               [000081] ---XG+------                    +--*  IND       ref   
               [000312] -----+------                    |  \--*  ADD       byref 
               [000080] -----+------                    |     +--*  LCL_VAR   ref    V00 this         
               [000311] -----+------                    |     \--*  CNS_INT   long   8 field offset Fseq[_myList]
               [000309] -----+------                    \--*  CNS_INT   long   8 field offset Fseq[Head]

***** BB03
STMT00065 (IL   ???...  ???)
               [000230] --CXG+------              *  CALL      void   System.Object..ctor
               [000087] -----+------ this in rcx  \--*  LCL_VAR   ref    V13 tmp6         

***** BB03
STMT00024 (IL 0x093...  ???)
               [000094] -A-XG+------              *  ASG       ref   
               [000093] ---XG+-N----              +--*  IND       ref   
               [000315] -----+------              |  \--*  ADD       byref 
               [000091] -----+------              |     +--*  LCL_VAR   ref    V14 tmp7         
               [000314] -----+------              |     \--*  CNS_INT   long   8 field offset Fseq[Next]
               [000092] -----+------              \--*  LCL_VAR   ref    V13 tmp6         

***** BB03
STMT00025 (IL 0x098...0x0AE)
               [000102] -A-XG+------              *  ASG       ref   
               [000101] ---XG+-N----              +--*  IND       ref   
               [000317] ---XG+------              |  \--*  ADD       byref 
               [000096] ---XG+------              |     +--*  IND       ref   
               [000319] -----+------              |     |  \--*  ADD       byref 
               [000095] -----+------              |     |     +--*  LCL_VAR   ref    V00 this         
               [000318] -----+------              |     |     \--*  CNS_INT   long   8 field offset Fseq[_myList]
               [000316] -----+------              |     \--*  CNS_INT   long   8 field offset Fseq[Head]
               [000100] ---XG+------              \--*  IND       ref   
               [000321] ---XG+------                 \--*  ADD       byref 
               [000099] ---XG+------                    +--*  IND       ref   
               [000323] ---XG+------                    |  \--*  ADD       byref 
               [000098] ---XG+------                    |     +--*  IND       ref   
               [000325] -----+------                    |     |  \--*  ADD       byref 
               [000097] -----+------                    |     |     +--*  LCL_VAR   ref    V00 this         
               [000324] -----+------                    |     |     \--*  CNS_INT   long   8 field offset Fseq[_myList]
               [000322] -----+------                    |     \--*  CNS_INT   long   8 field offset Fseq[Head]
               [000320] -----+------                    \--*  CNS_INT   long   8 field offset Fseq[Next]

***** BB03
STMT00026 (IL 0x0B3...0x0C3)
               [000109] -AC--+------              *  ASG       ref   
               [000108] D----+-N----              +--*  LCL_VAR   ref    V15 tmp8         
               [000107] --C--+------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
               [000106] H----+------ arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb3b058b8 token

***** BB03
STMT00028 (IL   ???...  ???)
               [000113] -A-XG+------              *  ASG       ref   
               [000112] D----+-N----              +--*  LCL_VAR   ref    V16 tmp9         
               [000105] ---XG+------              \--*  IND       ref   
               [000328] ---XG+------                 \--*  ADD       byref 
               [000104] ---XG+------                    +--*  IND       ref   
               [000330] -----+------                    |  \--*  ADD       byref 
               [000103] -----+------                    |     +--*  LCL_VAR   ref    V00 this         
               [000329] -----+------                    |     \--*  CNS_INT   long   8 field offset Fseq[_myList]
               [000327] -----+------                    \--*  CNS_INT   long   8 field offset Fseq[Head]

***** BB03
STMT00027 (IL   ???...  ???)
               [000111] --CXG+------              *  CALL      void   System.Object..ctor
               [000110] -----+------ this in rcx  \--*  LCL_VAR   ref    V15 tmp8         

***** BB03
STMT00029 (IL 0x0C3...  ???)
               [000117] -A-XG+------              *  ASG       ref   
               [000116] ---XG+-N----              +--*  IND       ref   
               [000333] -----+------              |  \--*  ADD       byref 
               [000114] -----+------              |     +--*  LCL_VAR   ref    V16 tmp9         
               [000332] -----+------              |     \--*  CNS_INT   long   16 field offset Fseq[Data]
               [000115] -----+------              \--*  LCL_VAR   ref    V15 tmp8         

------------ BB04 [0CA..0CD) -> BB06 (cond), preds={BB03} succs={BB05,BB06}

***** BB04
STMT00066 (IL   ???...  ???)
               [000254] ----G+------              *  JTRUE     void  
               [000255] J---G+-N----              \--*  EQ        int   
               [000334] ----G+------                 +--*  CAST      int <- bool <- int
               [000256] ----G+------                 |  \--*  LCL_VAR   int   (AX) V05 loc3         
               [000257] -----+------                 \--*  CNS_INT   int    0

------------ BB05 [0CD..0D4), preds={BB04} succs={BB06}

***** BB05
STMT00067 (IL   ???...  ???)
               [000258] --CXG+------              *  CALL      void   System.Threading.Monitor.Exit
               [000259] -----+------ arg0 in rcx  \--*  LCL_VAR   ref    V04 loc2         

------------ BB06 [0D4..0DD) -> BB02 (cond), preds={BB04,BB05} succs={BB07,BB02}

***** BB06
STMT00030 (IL 0x0D4...0x0D7)
               [000122] -A---+------              *  ASG       int   
               [000121] D----+-N----              +--*  LCL_VAR   int    V03 loc1         
               [000120] -----+------              \--*  ADD       int   
               [000118] -----+------                 +--*  LCL_VAR   int    V03 loc1         
               [000119] -----+------                 \--*  CNS_INT   int    1

***** BB06
STMT00017 (IL 0x0D8...0x0DB)
     (  7,  6) [000068] ------------              *  JTRUE     void  
     (  5,  4) [000067] J------N----              \--*  LT        int   
     (  3,  2) [000065] ------------                 +--*  LCL_VAR   int    V03 loc1         
     (  1,  1) [000066] ------------                 \--*  CNS_INT   int    10

------------ BB07 [0DD..0F9), preds={BB01,BB06} succs={BB08}

***** BB07
STMT00034 (IL 0x0DD...0x0E2)
               [000133] -ACXG+------              *  ASG       struct (copy)
               [000131] D---G+-N----              +--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  +--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
               [000130] --CXG+------              \--*  CALL      struct System.DateTime.get_Now

***** BB07
STMT00035 (IL 0x0E3...0x0F4)
               [000139] --CXG+------              *  CALL      void   System.Console.WriteLine
               [000138] --CXG+------ arg0 in rcx  \--*  CALL      ref    System.String.Concat
               [000342] -ACXG-----L- arg0 SETUP      +--*  ASG       ref   
               [000341] D------N----                 |  +--*  LCL_VAR   ref    V23 tmp16        
               [000136] --CXG+------                 |  \--*  CALL      ref    System.DateTime.ToString
               [000135] -----+------ this in rcx     |     \--*  ADDR      byref 
               [000134] ----G+-N----                 |        \--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                     |        \--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
               [000343] ------------ arg0 in rcx     +--*  LCL_VAR   ref    V23 tmp16        
               [000340] #---G+------ arg1 in rdx     \--*  IND       ref   
               [000339] H----+------                    \--*  CNS_INT(h) long   0x75003200 "	 Waiting for list processing to complete..."

------------ BB08 [0F9..102), preds={BB07,BB12} succs={BB09}

***** BB08
STMT00036 (IL 0x0F9...0x0FF)
               [000143] -A-XG+------              *  ASG       ref   
               [000142] D----+-N----              +--*  LCL_VAR   ref    V04 loc2         
               [000141] ---XG+------              \--*  IND       ref   
               [000347] -----+------                 \--*  ADD       byref 
               [000140] -----+------                    +--*  LCL_VAR   ref    V00 this         
               [000346] -----+------                    \--*  CNS_INT   long   8 field offset Fseq[_myList]

***** BB08
STMT00037 (IL 0x100...0x101)
               [000146] -A--G+------              *  ASG       int   
               [000145] D---G+-N----              +--*  LCL_VAR   int   (AX) V05 loc3         
               [000144] -----+------              \--*  CNS_INT   int    0

------------ BB09 [102..122) -> BB13 (cond), preds={BB08} succs={BB10,BB13}

***** BB09
STMT00038 (IL 0x102...0x120)
               [000150] --CXG+------              *  CALL      void   System.Threading.Monitor.Enter
               [000149] -----+------ arg1 in rdx  +--*  LCL_VAR_ADDR long   V05 loc3         
               [000147] -----+------ arg0 in rcx  \--*  LCL_VAR   ref    V04 loc2         

***** BB09
STMT00039 (IL 0x10A...  ???)
               [000158] ---XG+------              *  JTRUE     void  
               [000157] N--XG+-N-U--              \--*  EQ        int   
               [000153] ---XG+------                 +--*  IND       ref   
               [000351] ---XG+------                 |  \--*  ADD       byref 
               [000152] ---XG+------                 |     +--*  IND       ref   
               [000353] -----+------                 |     |  \--*  ADD       byref 
               [000151] -----+------                 |     |     +--*  LCL_VAR   ref    V00 this         
               [000352] -----+------                 |     |     \--*  CNS_INT   long   8 field offset Fseq[_myList]
               [000350] -----+------                 |     \--*  CNS_INT   long   8 field offset Fseq[Head]
               [000156] ---XG+------                 \--*  IND       ref   
               [000355] ---XG+------                    \--*  ADD       byref 
               [000155] ---XG+------                       +--*  IND       ref   
               [000357] -----+------                       |  \--*  ADD       byref 
               [000154] -----+------                       |     +--*  LCL_VAR   ref    V00 this         
               [000356] -----+------                       |     \--*  CNS_INT   long   8 field offset Fseq[_myList]
               [000354] -----+------                       \--*  CNS_INT   long   16 field offset Fseq[Tail]

------------ BB10 [126..129) -> BB12 (cond), preds={BB09} succs={BB11,BB12}

***** BB10
STMT00069 (IL   ???...  ???)
               [000261] ----G+------              *  JTRUE     void  
               [000262] J---G+-N----              \--*  EQ        int   
               [000358] ----G+------                 +--*  CAST      int <- bool <- int
               [000263] ----G+------                 |  \--*  LCL_VAR   int   (AX) V05 loc3         
               [000264] -----+------                 \--*  CNS_INT   int    0

------------ BB11 [129..130), preds={BB10} succs={BB12}

***** BB11
STMT00070 (IL   ???...  ???)
               [000265] --CXG+------              *  CALL      void   System.Threading.Monitor.Exit
               [000266] -----+------ arg0 in rcx  \--*  LCL_VAR   ref    V04 loc2         

------------ BB12 [130..139) -> BB08 (always), preds={BB10,BB11} succs={BB08}

***** BB12
STMT00040 (IL 0x130...0x137)
               [000160] --CXG+------              *  CALL      void   System.Threading.Thread.Sleep
               [000159] -----+------ arg0 in rcx  \--*  CNS_INT   int    100

------------ BB13 [???..???) -> BB30 (callf), preds={BB09} succs={BB30}

------------ BB14 [???..???) -> BB15 (ALWAYS), preds={BB32} succs={BB15}

------------ BB15 [139..17D), preds={BB14} succs={BB16}

***** BB15
STMT00041 (IL 0x139...0x13E)
               [000164] -ACXG+------              *  ASG       struct (copy)
               [000162] D---G+-N----              +--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  +--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
               [000161] --CXG+------              \--*  CALL      struct System.DateTime.get_Now

***** BB15
STMT00042 (IL 0x13F...0x178)
               [000170] --CXG+------              *  CALL      void   System.Console.WriteLine
               [000169] --CXG+------ arg0 in rcx  \--*  CALL      ref    System.String.Concat
               [000367] -ACXG-----L- arg0 SETUP      +--*  ASG       ref   
               [000366] D------N----                 |  +--*  LCL_VAR   ref    V24 tmp17        
               [000167] --CXG+------                 |  \--*  CALL      ref    System.DateTime.ToString
               [000166] -----+------ this in rcx     |     \--*  ADDR      byref 
               [000165] ----G+-N----                 |        \--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                     |        \--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
               [000368] ------------ arg0 in rcx     +--*  LCL_VAR   ref    V24 tmp17        
               [000365] #---G+------ arg1 in rdx     \--*  IND       ref   
               [000364] H----+------                    \--*  CNS_INT(h) long   0x75003208 "	 Done.  Profiler is active, available options:"

***** BB15
STMT00043 (IL 0x155...  ???)
               [000172] --CXG+------              *  CALL      void   System.Console.WriteLine
               [000372] #---G+------ arg0 in rcx  \--*  IND       ref   
               [000371] H----+------                 \--*  CNS_INT(h) long   0x75003210 "   Q = quit"

***** BB15
STMT00044 (IL 0x15F...  ???)
               [000174] --CXG+------              *  CALL      void   System.Console.WriteLine
               [000375] #---G+------ arg0 in rcx  \--*  IND       ref   
               [000374] H----+------                 \--*  CNS_INT(h) long   0x75003218 "   H = heap snapshot"

***** BB15
STMT00045 (IL 0x169...  ???)
               [000176] --CXG+------              *  CALL      void   System.Console.WriteLine
               [000378] #---G+------ arg0 in rcx  \--*  IND       ref   
               [000377] H----+------                 \--*  CNS_INT(h) long   0x75003220 "   G = GC (max gen)"

***** BB15
STMT00046 (IL 0x173...  ???)
               [000178] --CXG+------              *  CALL      void   System.Console.WriteLine
               [000381] #---G+------ arg0 in rcx  \--*  IND       ref   
               [000380] H----+------                 \--*  CNS_INT(h) long   0x75003228 "   R = clear the running flag to stop the consumer thread"

------------ BB16 [???..???), preds={BB15,BB25} succs={BB17}

------------ BB17 [???..???), preds={BB16,BB24} succs={BB18}

------------ BB18 [???..???), preds={BB17,BB22} succs={BB19}

------------ BB19 [17D..18F) -> BB21 (cond), preds={BB18,BB20} succs={BB20,BB21}

***** BB19
STMT00048 (IL   ???...  ???)
     ( 18, 11) [000233] S-CXG-------              *  CALL      void   System.ConsolePal.ReadKey
     (  3,  3) [000235] ------------ arg0 in rcx  +--*  ADDR      long  
     (  3,  2) [000236] ----G--N----              |  \--*  LCL_VAR   struct<System.ConsoleKeyInfo, 12>(AX)(P) V06 loc4         
                                                  |  \--*    ushort V06._keyChar (offs=0x00) -> V18 tmp11        
                                                  |  \--*    int    V06._key (offs=0x04) -> V19 tmp12        
                                                  |  \--*    int    V06._mods (offs=0x08) -> V20 tmp13        
     (  1,  1) [000232] ------------ arg1 in rdx  \--*  CNS_INT   int    0

***** BB19
STMT00050 (IL   ???...  ???)
     (  7,  6) [000189] ----G-------              *  JTRUE     void  
     (  5,  4) [000188] N---G--N-U--              \--*  NE        int   
     (  3,  2) [000240] ----G-------                 +--*  LCL_VAR   int   (AX) V19 tmp12        
     (  1,  1) [000187] ------------                 \--*  CNS_INT   int    71

------------ BB20 [18F..19B) -> BB19 (always), preds={BB19} succs={BB19}

***** BB20
STMT00061 (IL 0x18F...0x199)
               [000222] --CXG+------              *  CALL      void   System.GC.Collect
               [000221] --CXG+------ arg0 in rcx  \--*  CALL      int    System.GC.get_MaxGeneration

------------ BB21 [19B..1A6) -> BB23 (cond), preds={BB19} succs={BB22,BB23}

***** BB21
STMT00052 (IL   ???...  ???)
               [000196] ----G+------              *  JTRUE     void  
               [000195] N---G+-N-U--              \--*  NE        int   
               [000244] ----G+------                 +--*  LCL_VAR   int   (AX) V19 tmp12        
               [000194] -----+------                 \--*  CNS_INT   int    72

------------ BB22 [1A6..1AD) -> BB18 (always), preds={BB21} succs={BB18}

***** BB22
STMT00060 (IL 0x1A6...0x1AB)
               [000220] --CXG+------              *  CALL      void   System.Diagnostics.Debugger.Break

------------ BB23 [1AD..1B8) -> BB25 (cond), preds={BB21} succs={BB24,BB25}

***** BB23
STMT00054 (IL   ???...  ???)
               [000203] ----G+------              *  JTRUE     void  
               [000202] N---G+-N-U--              \--*  NE        int   
               [000248] ----G+------                 +--*  LCL_VAR   int   (AX) V19 tmp12        
               [000201] -----+------                 \--*  CNS_INT   int    82

------------ BB24 [1B8..1C1) -> BB17 (always), preds={BB23} succs={BB17}

***** BB24
STMT00059 (IL 0x1B8...0x1BA)
               [000219] -A-XG+------              *  ASG       bool  
               [000218] ---XG+-N----              +--*  IND       bool  
               [000387] -----+------              |  \--*  ADD       byref 
               [000216] -----+------              |     +--*  LCL_VAR   ref    V00 this         
               [000386] -----+------              |     \--*  CNS_INT   long   16 field offset Fseq[_running]
               [000217] -----+------              \--*  CNS_INT   int    0

------------ BB25 [1C1..1CC) -> BB16 (cond), preds={BB23} succs={BB26,BB16}

***** BB25
STMT00056 (IL   ???...  ???)
               [000210] ----G+------              *  JTRUE     void  
               [000209] N---G+-N-U--              \--*  NE        int   
               [000252] ----G+------                 +--*  LCL_VAR   int   (AX) V19 tmp12        
               [000208] -----+------                 \--*  CNS_INT   int    81

------------ BB26 [1CC..1D4) (return), preds={BB25} succs={}

***** BB26
STMT00057 (IL 0x1CC...0x1CE)
               [000214] -A-XG+------              *  ASG       bool  
               [000213] ---XG+-N----              +--*  IND       bool  
               [000389] -----+------              |  \--*  ADD       byref 
               [000211] -----+------              |     +--*  LCL_VAR   ref    V00 this         
               [000388] -----+------              |     \--*  CNS_INT   long   16 field offset Fseq[_running]
               [000212] -----+------              \--*  CNS_INT   int    0

***** BB26
STMT00058 (IL 0x1D3...0x1D3)
               [000215] -----+------              *  RETURN    void  

------------ BB27 [0CA..0CD) -> BB29 (cond), preds={} succs={BB28,BB29}

***** BB27
STMT00031 (IL 0x0CA...0x0CB)
               [000126] ----G+------              *  JTRUE     void  
               [000125] J---G+-N----              \--*  EQ        int   
               [000336] ----G+------                 +--*  CAST      int <- bool <- int
               [000123] ----G+------                 |  \--*  LCL_VAR   int   (AX) V05 loc3         
               [000124] -----+------                 \--*  CNS_INT   int    0

------------ BB28 [0CD..0D3), preds={BB27} succs={BB29}

***** BB28
STMT00033 (IL 0x0CD...0x0CE)
               [000129] --CXG+------              *  CALL      void   System.Threading.Monitor.Exit
               [000128] -----+------ arg0 in rcx  \--*  LCL_VAR   ref    V04 loc2         

------------ BB29 [0D3..0D4) (finret), preds={BB27,BB28} succs={}

***** BB29
STMT00032 (IL 0x0D3...0x0D3)
               [000127] -----+------              *  RETFILT   void  

------------ BB30 [126..129) -> BB32 (cond), preds={BB13} succs={BB31,BB32}

***** BB30
STMT00062 (IL 0x126...0x127)
               [000226] ----G+------              *  JTRUE     void  
               [000225] J---G+-N----              \--*  EQ        int   
               [000360] ----G+------                 +--*  CAST      int <- bool <- int
               [000223] ----G+------                 |  \--*  LCL_VAR   int   (AX) V05 loc3         
               [000224] -----+------                 \--*  CNS_INT   int    0

------------ BB31 [129..12F), preds={BB30} succs={BB32}

***** BB31
STMT00064 (IL 0x129...0x12A)
               [000229] --CXG+------              *  CALL      void   System.Threading.Monitor.Exit
               [000228] -----+------ arg0 in rcx  \--*  LCL_VAR   ref    V04 loc2         

------------ BB32 [12F..130) (finret), preds={BB30,BB31} succs={BB14}

***** BB32
STMT00063 (IL 0x12F...0x12F)
               [000227] -----+------              *  RETFILT   void  

-------------------------------------------------------------------------------------------------------------------
Considering loop L00 to clone for optimizations.
Loop cloning: rejecting loop L00. It has a `try` begin.
------------------------------------------------------------
Considering loop L01 to clone for optimizations.
Loop cloning: rejecting loop L01. No LPFLG_ITER flag.
------------------------------------------------------------
Considering loop L02 to clone for optimizations.
Loop cloning: rejecting loop L02. No LPFLG_ITER flag.
------------------------------------------------------------
Considering loop L03 to clone for optimizations.
Loop cloning: rejecting loop L03. No LPFLG_ITER flag.
------------------------------------------------------------
Considering loop L04 to clone for optimizations.
Loop cloning: rejecting loop L04. No LPFLG_ITER flag.
------------------------------------------------------------
Considering loop L05 to clone for optimizations.
Loop cloning: rejecting loop L05. No LPFLG_ITER flag.
------------------------------------------------------------

  No clonable loops

*************** Finishing PHASE Clone loops

*************** Starting PHASE Unroll loops
*************** In optUnrollLoops()
*************** In fgDebugCheckBBlist

*************** Finishing PHASE Unroll loops

*************** Starting PHASE Mark local vars

*************** In lvaMarkLocalVars()
lvaGrabTemp returning 25 (V25 tmp18) (a long lifetime temp) called for PSPSym.

Local V25 should not be enregistered because: it is address exposed

*** lvaComputeRefCounts ***

*** lvaComputeRefCounts -- explicit counts ***

*** marking local variables in block BB01 (weight=1   )
STMT00000 (IL 0x000...0x005)
               [000003] -ACXG+------              *  ASG       struct (copy)
               [000001] D---G+-N----              +--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  +--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
               [000000] --CXG+------              \--*  CALL      struct System.DateTime.get_Now
New refCnts for V17: refCnt =  1, refCntWtd = 1   
New refCnts for V02: refCnt =  1, refCntWtd = 1   
Marking EH Var V02 as a register candidate.
STMT00001 (IL 0x006...0x022)
               [000009] --CXG+------              *  CALL      void   System.Console.WriteLine
               [000008] --CXG+------ arg0 in rcx  \--*  CALL      ref    System.String.Concat
               [000272] -ACXG-----L- arg0 SETUP      +--*  ASG       ref   
               [000271] D------N----                 |  +--*  LCL_VAR   ref    V21 tmp14        
               [000006] --CXG+------                 |  \--*  CALL      ref    System.DateTime.ToString
               [000005] -----+------ this in rcx     |     \--*  ADDR      byref 
               [000004] ----G+-N----                 |        \--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                     |        \--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
               [000273] ------------ arg0 in rcx     +--*  LCL_VAR   ref    V21 tmp14        
               [000270] #---G+------ arg1 in rdx     \--*  IND       ref   
               [000269] H----+------                    \--*  CNS_INT(h) long   0x750031F0 "	 Created list"
New refCnts for V21: refCnt =  1, refCntWtd = 2   
Marking EH Var V21 as a register candidate.
New refCnts for V17: refCnt =  2, refCntWtd = 2   
New refCnts for V02: refCnt =  2, refCntWtd = 2   
New refCnts for V21: refCnt =  2, refCntWtd = 4   
STMT00002 (IL 0x01C...  ???)
               [000014] -AC--+------              *  ASG       ref   
               [000013] D----+-N----              +--*  LCL_VAR   ref    V08 tmp1         
               [000012] --C--+------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
               [000011] H----+------ arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb3ee2350 method
New refCnts for V08: refCnt =  1, refCntWtd = 2   
Marking EH Var V08 as a register candidate.
STMT00003 (IL   ???...  ???)
               [000016] --CXG+------              *  CALL      void   FalseLeakRepro.List..ctor
               [000015] -----+------ this in rcx  \--*  LCL_VAR   ref    V08 tmp1         
New refCnts for V08: refCnt =  2, refCntWtd = 4   
STMT00004 (IL 0x022...  ???)
               [000019] -A-XG+------              *  ASG       ref   
               [000018] ---XG+-N----              +--*  IND       ref   
               [000279] -----+------              |  \--*  ADD       byref 
               [000010] -----+------              |     +--*  LCL_VAR   ref    V00 this         
               [000278] -----+------              |     \--*  CNS_INT   long   8 field offset Fseq[_myList]
               [000017] -----+------              \--*  LCL_VAR   ref    V08 tmp1         
New refCnts for V00: refCnt =  1, refCntWtd = 1   
New refCnts for V08: refCnt =  3, refCntWtd = 6   
STMT00005 (IL 0x027...0x037)
               [000026] -AC--+------              *  ASG       ref   
               [000025] D----+-N----              +--*  LCL_VAR   ref    V09 tmp2         
               [000024] --C--+------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
               [000023] H----+------ arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb3b058b8 token
New refCnts for V09: refCnt =  1, refCntWtd = 2   
Marking EH Var V09 as a register candidate.
STMT00007 (IL   ???...  ???)
               [000030] -A-XG+------              *  ASG       ref   
               [000029] D----+-N----              +--*  LCL_VAR   ref    V10 tmp3         
               [000022] ---XG+------              \--*  IND       ref   
               [000282] ---XG+------                 \--*  ADD       byref 
               [000021] ---XG+------                    +--*  IND       ref   
               [000284] -----+------                    |  \--*  ADD       byref 
               [000020] -----+------                    |     +--*  LCL_VAR   ref    V00 this         
               [000283] -----+------                    |     \--*  CNS_INT   long   8 field offset Fseq[_myList]
               [000281] -----+------                    \--*  CNS_INT   long   8 field offset Fseq[Head]
New refCnts for V10: refCnt =  1, refCntWtd = 2   
Marking EH Var V10 as a register candidate.
New refCnts for V00: refCnt =  2, refCntWtd = 2   
STMT00006 (IL   ???...  ???)
               [000028] --CXG+------              *  CALL      void   System.Object..ctor
               [000027] -----+------ this in rcx  \--*  LCL_VAR   ref    V09 tmp2         
New refCnts for V09: refCnt =  2, refCntWtd = 4   
STMT00008 (IL 0x037...  ???)
               [000034] -A-XG+------              *  ASG       ref   
               [000033] ---XG+-N----              +--*  IND       ref   
               [000287] -----+------              |  \--*  ADD       byref 
               [000031] -----+------              |     +--*  LCL_VAR   ref    V10 tmp3         
               [000286] -----+------              |     \--*  CNS_INT   long   16 field offset Fseq[Data]
               [000032] -----+------              \--*  LCL_VAR   ref    V09 tmp2         
New refCnts for V10: refCnt =  2, refCntWtd = 4   
New refCnts for V09: refCnt =  3, refCntWtd = 6   
STMT00009 (IL 0x03C...0x057)
               [000040] -AC--+------              *  ASG       ref   
               [000039] D----+-N----              +--*  LCL_VAR   ref    V11 tmp4         
               [000038] --C--+------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
               [000037] H----+------ arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb3ee6200 token
New refCnts for V11: refCnt =  1, refCntWtd = 2   
Marking EH Var V11 as a register candidate.
STMT00010 (IL   ???...  ???)
               [000042] --CXG+------              *  CALL      void   System.MulticastDelegate.CtorClosed
               [000041] -----+------ this in rcx  +--*  LCL_VAR   ref    V11 tmp4         
               [000035] -----+------ arg1 in rdx  +--*  LCL_VAR   ref    V00 this         
               [000036] H----+------ arg2 in r8   \--*  CNS_INT(h) long   0x7ffdb3b213f8 ftn
New refCnts for V11: refCnt =  2, refCntWtd = 4   
New refCnts for V00: refCnt =  3, refCntWtd = 3   
STMT00011 (IL 0x048...  ???)
               [000047] -AC--+------              *  ASG       ref   
               [000046] D----+-N----              +--*  LCL_VAR   ref    V12 tmp5         
               [000045] --C--+------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWFAST
               [000044] H----+------ arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb3c84e80 token
New refCnts for V12: refCnt =  1, refCntWtd = 2   
Marking EH Var V12 as a register candidate.
STMT00012 (IL   ???...  ???)
               [000049] --CXG+------              *  CALL      void   System.Threading.Thread..ctor
               [000048] -----+------ this in rcx  +--*  LCL_VAR   ref    V12 tmp5         
               [000043] -----+------ arg1 in rdx  \--*  LCL_VAR   ref    V11 tmp4         
New refCnts for V12: refCnt =  2, refCntWtd = 4   
New refCnts for V11: refCnt =  3, refCntWtd = 6   
STMT00013 (IL 0x04D...  ???)
               [000051] --CXG+------              *  CALL nullcheck void   System.Threading.Thread.Start
               [000050] -----+------ this in rcx  \--*  LCL_VAR   ref    V12 tmp5         
New refCnts for V12: refCnt =  3, refCntWtd = 6   
STMT00014 (IL 0x052...  ???)
               [000055] -ACXG+------              *  ASG       struct (copy)
               [000053] D---G+-N----              +--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  +--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
               [000052] --CXG+------              \--*  CALL      struct System.DateTime.get_Now
New refCnts for V17: refCnt =  3, refCntWtd = 3   
New refCnts for V02: refCnt =  3, refCntWtd = 3   
V02 has multiple definitions. Disqualified as a single-def register candidate.
STMT00015 (IL 0x058...0x06F)
               [000061] --CXG+------              *  CALL      void   System.Console.WriteLine
               [000060] --CXG+------ arg0 in rcx  \--*  CALL      ref    System.String.Concat
               [000300] -ACXG-----L- arg0 SETUP      +--*  ASG       ref   
               [000299] D------N----                 |  +--*  LCL_VAR   ref    V22 tmp15        
               [000058] --CXG+------                 |  \--*  CALL      ref    System.DateTime.ToString
               [000057] -----+------ this in rcx     |     \--*  ADDR      byref 
               [000056] ----G+-N----                 |        \--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                     |        \--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
               [000301] ------------ arg0 in rcx     +--*  LCL_VAR   ref    V22 tmp15        
               [000298] #---G+------ arg1 in rdx     \--*  IND       ref   
               [000297] H----+------                    \--*  CNS_INT(h) long   0x750031F8 "	 Consumer thread started, adding items..."
New refCnts for V22: refCnt =  1, refCntWtd = 2   
Marking EH Var V22 as a register candidate.
New refCnts for V17: refCnt =  4, refCntWtd = 4   
New refCnts for V02: refCnt =  4, refCntWtd = 4   
New refCnts for V22: refCnt =  2, refCntWtd = 4   
STMT00016 (IL 0x06E...  ???)
               [000064] -A---+------              *  ASG       int   
               [000063] D----+-N----              +--*  LCL_VAR   int    V03 loc1         
               [000062] -----+------              \--*  CNS_INT   int    0
New refCnts for V03: refCnt =  1, refCntWtd = 1   
Marking EH Var V03 as a register candidate.
STMT00072 (IL 0x0D8...  ???)
     (  7,  6) [000390] ------------              *  JTRUE     void  
     (  5,  4) [000391] J------N----              \--*  GE        int   
     (  3,  2) [000392] ------------                 +--*  LCL_VAR   int    V03 loc1         
     (  1,  1) [000393] ------------                 \--*  CNS_INT   int    10
New refCnts for V03: refCnt =  2, refCntWtd = 2   

*** marking local variables in block BB02 (weight=8   )
STMT00018 (IL 0x072...0x078)
               [000072] -A-XG+------              *  ASG       ref   
               [000071] D----+-N----              +--*  LCL_VAR   ref    V04 loc2         
               [000070] ---XG+------              \--*  IND       ref   
               [000305] -----+------                 \--*  ADD       byref 
               [000069] -----+------                    +--*  LCL_VAR   ref    V00 this         
               [000304] -----+------                    \--*  CNS_INT   long   8 field offset Fseq[_myList]
New refCnts for V04: refCnt =  1, refCntWtd = 8   
V04 needs explicit zero init. Disqualified as a single-def register candidate.
New refCnts for V00: refCnt =  4, refCntWtd = 11   
STMT00019 (IL 0x079...0x07A)
               [000075] -A--G+------              *  ASG       int   
               [000074] D---G+-N----              +--*  LCL_VAR   int   (AX) V05 loc3         
               [000073] -----+------              \--*  CNS_INT   int    0
New refCnts for V05: refCnt =  1, refCntWtd = 8   
V05 needs explicit zero init. Disqualified as a single-def register candidate.

*** marking local variables in block BB03 (weight=8   )
STMT00020 (IL 0x07B...0x093)
               [000079] --CXG+------              *  CALL      void   System.Threading.Monitor.Enter
               [000078] -----+------ arg1 in rdx  +--*  LCL_VAR_ADDR long   V05 loc3         
               [000076] -----+------ arg0 in rcx  \--*  LCL_VAR   ref    V04 loc2         
New refCnts for V05: refCnt =  2, refCntWtd = 16   
New refCnts for V04: refCnt =  2, refCntWtd = 16   
STMT00021 (IL 0x083...  ???)
               [000086] -AC--+------              *  ASG       ref   
               [000085] D----+-N----              +--*  LCL_VAR   ref    V13 tmp6         
               [000084] --C--+------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
               [000083] H----+------ arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb3ee58a8 method
New refCnts for V13: refCnt =  1, refCntWtd = 16   
V13 needs explicit zero init. Disqualified as a single-def register candidate.
STMT00023 (IL   ???...  ???)
               [000090] -A-XG+------              *  ASG       ref   
               [000089] D----+-N----              +--*  LCL_VAR   ref    V14 tmp7         
               [000082] ---XG+------              \--*  IND       ref   
               [000310] ---XG+------                 \--*  ADD       byref 
               [000081] ---XG+------                    +--*  IND       ref   
               [000312] -----+------                    |  \--*  ADD       byref 
               [000080] -----+------                    |     +--*  LCL_VAR   ref    V00 this         
               [000311] -----+------                    |     \--*  CNS_INT   long   8 field offset Fseq[_myList]
               [000309] -----+------                    \--*  CNS_INT   long   8 field offset Fseq[Head]
New refCnts for V14: refCnt =  1, refCntWtd = 16   
V14 needs explicit zero init. Disqualified as a single-def register candidate.
New refCnts for V00: refCnt =  5, refCntWtd = 19   
STMT00065 (IL   ???...  ???)
               [000230] --CXG+------              *  CALL      void   System.Object..ctor
               [000087] -----+------ this in rcx  \--*  LCL_VAR   ref    V13 tmp6         
New refCnts for V13: refCnt =  2, refCntWtd = 32   
STMT00024 (IL 0x093...  ???)
               [000094] -A-XG+------              *  ASG       ref   
               [000093] ---XG+-N----              +--*  IND       ref   
               [000315] -----+------              |  \--*  ADD       byref 
               [000091] -----+------              |     +--*  LCL_VAR   ref    V14 tmp7         
               [000314] -----+------              |     \--*  CNS_INT   long   8 field offset Fseq[Next]
               [000092] -----+------              \--*  LCL_VAR   ref    V13 tmp6         
New refCnts for V14: refCnt =  2, refCntWtd = 32   
New refCnts for V13: refCnt =  3, refCntWtd = 48   
STMT00025 (IL 0x098...0x0AE)
               [000102] -A-XG+------              *  ASG       ref   
               [000101] ---XG+-N----              +--*  IND       ref   
               [000317] ---XG+------              |  \--*  ADD       byref 
               [000096] ---XG+------              |     +--*  IND       ref   
               [000319] -----+------              |     |  \--*  ADD       byref 
               [000095] -----+------              |     |     +--*  LCL_VAR   ref    V00 this         
               [000318] -----+------              |     |     \--*  CNS_INT   long   8 field offset Fseq[_myList]
               [000316] -----+------              |     \--*  CNS_INT   long   8 field offset Fseq[Head]
               [000100] ---XG+------              \--*  IND       ref   
               [000321] ---XG+------                 \--*  ADD       byref 
               [000099] ---XG+------                    +--*  IND       ref   
               [000323] ---XG+------                    |  \--*  ADD       byref 
               [000098] ---XG+------                    |     +--*  IND       ref   
               [000325] -----+------                    |     |  \--*  ADD       byref 
               [000097] -----+------                    |     |     +--*  LCL_VAR   ref    V00 this         
               [000324] -----+------                    |     |     \--*  CNS_INT   long   8 field offset Fseq[_myList]
               [000322] -----+------                    |     \--*  CNS_INT   long   8 field offset Fseq[Head]
               [000320] -----+------                    \--*  CNS_INT   long   8 field offset Fseq[Next]
New refCnts for V00: refCnt =  6, refCntWtd = 27   
New refCnts for V00: refCnt =  7, refCntWtd = 35   
STMT00026 (IL 0x0B3...0x0C3)
               [000109] -AC--+------              *  ASG       ref   
               [000108] D----+-N----              +--*  LCL_VAR   ref    V15 tmp8         
               [000107] --C--+------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
               [000106] H----+------ arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb3b058b8 token
New refCnts for V15: refCnt =  1, refCntWtd = 16   
V15 needs explicit zero init. Disqualified as a single-def register candidate.
STMT00028 (IL   ???...  ???)
               [000113] -A-XG+------              *  ASG       ref   
               [000112] D----+-N----              +--*  LCL_VAR   ref    V16 tmp9         
               [000105] ---XG+------              \--*  IND       ref   
               [000328] ---XG+------                 \--*  ADD       byref 
               [000104] ---XG+------                    +--*  IND       ref   
               [000330] -----+------                    |  \--*  ADD       byref 
               [000103] -----+------                    |     +--*  LCL_VAR   ref    V00 this         
               [000329] -----+------                    |     \--*  CNS_INT   long   8 field offset Fseq[_myList]
               [000327] -----+------                    \--*  CNS_INT   long   8 field offset Fseq[Head]
New refCnts for V16: refCnt =  1, refCntWtd = 16   
V16 needs explicit zero init. Disqualified as a single-def register candidate.
New refCnts for V00: refCnt =  8, refCntWtd = 43   
STMT00027 (IL   ???...  ???)
               [000111] --CXG+------              *  CALL      void   System.Object..ctor
               [000110] -----+------ this in rcx  \--*  LCL_VAR   ref    V15 tmp8         
New refCnts for V15: refCnt =  2, refCntWtd = 32   
STMT00029 (IL 0x0C3...  ???)
               [000117] -A-XG+------              *  ASG       ref   
               [000116] ---XG+-N----              +--*  IND       ref   
               [000333] -----+------              |  \--*  ADD       byref 
               [000114] -----+------              |     +--*  LCL_VAR   ref    V16 tmp9         
               [000332] -----+------              |     \--*  CNS_INT   long   16 field offset Fseq[Data]
               [000115] -----+------              \--*  LCL_VAR   ref    V15 tmp8         
New refCnts for V16: refCnt =  2, refCntWtd = 32   
New refCnts for V15: refCnt =  3, refCntWtd = 48   

*** marking local variables in block BB04 (weight=8   )
STMT00066 (IL   ???...  ???)
               [000254] ----G+------              *  JTRUE     void  
               [000255] J---G+-N----              \--*  EQ        int   
               [000334] ----G+------                 +--*  CAST      int <- bool <- int
               [000256] ----G+------                 |  \--*  LCL_VAR   int   (AX) V05 loc3         
               [000257] -----+------                 \--*  CNS_INT   int    0
New refCnts for V05: refCnt =  3, refCntWtd = 24   

*** marking local variables in block BB05 (weight=4   )
STMT00067 (IL   ???...  ???)
               [000258] --CXG+------              *  CALL      void   System.Threading.Monitor.Exit
               [000259] -----+------ arg0 in rcx  \--*  LCL_VAR   ref    V04 loc2         
New refCnts for V04: refCnt =  3, refCntWtd = 20   

*** marking local variables in block BB06 (weight=8   )
STMT00030 (IL 0x0D4...0x0D7)
               [000122] -A---+------              *  ASG       int   
               [000121] D----+-N----              +--*  LCL_VAR   int    V03 loc1         
               [000120] -----+------              \--*  ADD       int   
               [000118] -----+------                 +--*  LCL_VAR   int    V03 loc1         
               [000119] -----+------                 \--*  CNS_INT   int    1
New refCnts for V03: refCnt =  3, refCntWtd = 10   
V03 needs explicit zero init. Disqualified as a single-def register candidate.
New refCnts for V03: refCnt =  4, refCntWtd = 18   
STMT00017 (IL 0x0D8...0x0DB)
     (  7,  6) [000068] ------------              *  JTRUE     void  
     (  5,  4) [000067] J------N----              \--*  LT        int   
     (  3,  2) [000065] ------------                 +--*  LCL_VAR   int    V03 loc1         
     (  1,  1) [000066] ------------                 \--*  CNS_INT   int    10
New refCnts for V03: refCnt =  5, refCntWtd = 26   

*** marking local variables in block BB07 (weight=1   )
STMT00034 (IL 0x0DD...0x0E2)
               [000133] -ACXG+------              *  ASG       struct (copy)
               [000131] D---G+-N----              +--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  +--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
               [000130] --CXG+------              \--*  CALL      struct System.DateTime.get_Now
New refCnts for V17: refCnt =  5, refCntWtd = 5   
New refCnts for V02: refCnt =  5, refCntWtd = 5   
STMT00035 (IL 0x0E3...0x0F4)
               [000139] --CXG+------              *  CALL      void   System.Console.WriteLine
               [000138] --CXG+------ arg0 in rcx  \--*  CALL      ref    System.String.Concat
               [000342] -ACXG-----L- arg0 SETUP      +--*  ASG       ref   
               [000341] D------N----                 |  +--*  LCL_VAR   ref    V23 tmp16        
               [000136] --CXG+------                 |  \--*  CALL      ref    System.DateTime.ToString
               [000135] -----+------ this in rcx     |     \--*  ADDR      byref 
               [000134] ----G+-N----                 |        \--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                     |        \--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
               [000343] ------------ arg0 in rcx     +--*  LCL_VAR   ref    V23 tmp16        
               [000340] #---G+------ arg1 in rdx     \--*  IND       ref   
               [000339] H----+------                    \--*  CNS_INT(h) long   0x75003200 "	 Waiting for list processing to complete..."
New refCnts for V23: refCnt =  1, refCntWtd = 2   
Marking EH Var V23 as a register candidate.
New refCnts for V17: refCnt =  6, refCntWtd = 6   
New refCnts for V02: refCnt =  6, refCntWtd = 6   
New refCnts for V23: refCnt =  2, refCntWtd = 4   

*** marking local variables in block BB08 (weight=8   )
STMT00036 (IL 0x0F9...0x0FF)
               [000143] -A-XG+------              *  ASG       ref   
               [000142] D----+-N----              +--*  LCL_VAR   ref    V04 loc2         
               [000141] ---XG+------              \--*  IND       ref   
               [000347] -----+------                 \--*  ADD       byref 
               [000140] -----+------                    +--*  LCL_VAR   ref    V00 this         
               [000346] -----+------                    \--*  CNS_INT   long   8 field offset Fseq[_myList]
New refCnts for V04: refCnt =  4, refCntWtd = 28   
New refCnts for V00: refCnt =  9, refCntWtd = 51   
STMT00037 (IL 0x100...0x101)
               [000146] -A--G+------              *  ASG       int   
               [000145] D---G+-N----              +--*  LCL_VAR   int   (AX) V05 loc3         
               [000144] -----+------              \--*  CNS_INT   int    0
New refCnts for V05: refCnt =  4, refCntWtd = 32   

*** marking local variables in block BB09 (weight=8   )
STMT00038 (IL 0x102...0x120)
               [000150] --CXG+------              *  CALL      void   System.Threading.Monitor.Enter
               [000149] -----+------ arg1 in rdx  +--*  LCL_VAR_ADDR long   V05 loc3         
               [000147] -----+------ arg0 in rcx  \--*  LCL_VAR   ref    V04 loc2         
New refCnts for V05: refCnt =  5, refCntWtd = 40   
New refCnts for V04: refCnt =  5, refCntWtd = 36   
STMT00039 (IL 0x10A...  ???)
               [000158] ---XG+------              *  JTRUE     void  
               [000157] N--XG+-N-U--              \--*  EQ        int   
               [000153] ---XG+------                 +--*  IND       ref   
               [000351] ---XG+------                 |  \--*  ADD       byref 
               [000152] ---XG+------                 |     +--*  IND       ref   
               [000353] -----+------                 |     |  \--*  ADD       byref 
               [000151] -----+------                 |     |     +--*  LCL_VAR   ref    V00 this         
               [000352] -----+------                 |     |     \--*  CNS_INT   long   8 field offset Fseq[_myList]
               [000350] -----+------                 |     \--*  CNS_INT   long   8 field offset Fseq[Head]
               [000156] ---XG+------                 \--*  IND       ref   
               [000355] ---XG+------                    \--*  ADD       byref 
               [000155] ---XG+------                       +--*  IND       ref   
               [000357] -----+------                       |  \--*  ADD       byref 
               [000154] -----+------                       |     +--*  LCL_VAR   ref    V00 this         
               [000356] -----+------                       |     \--*  CNS_INT   long   8 field offset Fseq[_myList]
               [000354] -----+------                       \--*  CNS_INT   long   16 field offset Fseq[Tail]
New refCnts for V00: refCnt = 10, refCntWtd = 59   
New refCnts for V00: refCnt = 11, refCntWtd = 67   

*** marking local variables in block BB10 (weight=8   )
STMT00069 (IL   ???...  ???)
               [000261] ----G+------              *  JTRUE     void  
               [000262] J---G+-N----              \--*  EQ        int   
               [000358] ----G+------                 +--*  CAST      int <- bool <- int
               [000263] ----G+------                 |  \--*  LCL_VAR   int   (AX) V05 loc3         
               [000264] -----+------                 \--*  CNS_INT   int    0
New refCnts for V05: refCnt =  6, refCntWtd = 48   

*** marking local variables in block BB11 (weight=4   )
STMT00070 (IL   ???...  ???)
               [000265] --CXG+------              *  CALL      void   System.Threading.Monitor.Exit
               [000266] -----+------ arg0 in rcx  \--*  LCL_VAR   ref    V04 loc2         
New refCnts for V04: refCnt =  6, refCntWtd = 40   

*** marking local variables in block BB12 (weight=8   )
STMT00040 (IL 0x130...0x137)
               [000160] --CXG+------              *  CALL      void   System.Threading.Thread.Sleep
               [000159] -----+------ arg0 in rcx  \--*  CNS_INT   int    100

*** marking local variables in block BB13 (weight=1   )

*** marking local variables in block BB14 (weight=1   )

*** marking local variables in block BB15 (weight=1   )
STMT00041 (IL 0x139...0x13E)
               [000164] -ACXG+------              *  ASG       struct (copy)
               [000162] D---G+-N----              +--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  +--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
               [000161] --CXG+------              \--*  CALL      struct System.DateTime.get_Now
New refCnts for V17: refCnt =  7, refCntWtd = 7   
New refCnts for V02: refCnt =  7, refCntWtd = 7   
STMT00042 (IL 0x13F...0x178)
               [000170] --CXG+------              *  CALL      void   System.Console.WriteLine
               [000169] --CXG+------ arg0 in rcx  \--*  CALL      ref    System.String.Concat
               [000367] -ACXG-----L- arg0 SETUP      +--*  ASG       ref   
               [000366] D------N----                 |  +--*  LCL_VAR   ref    V24 tmp17        
               [000167] --CXG+------                 |  \--*  CALL      ref    System.DateTime.ToString
               [000166] -----+------ this in rcx     |     \--*  ADDR      byref 
               [000165] ----G+-N----                 |        \--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                     |        \--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
               [000368] ------------ arg0 in rcx     +--*  LCL_VAR   ref    V24 tmp17        
               [000365] #---G+------ arg1 in rdx     \--*  IND       ref   
               [000364] H----+------                    \--*  CNS_INT(h) long   0x75003208 "	 Done.  Profiler is active, available options:"
New refCnts for V24: refCnt =  1, refCntWtd = 2   
Marking EH Var V24 as a register candidate.
New refCnts for V17: refCnt =  8, refCntWtd = 8   
New refCnts for V02: refCnt =  8, refCntWtd = 8   
New refCnts for V24: refCnt =  2, refCntWtd = 4   
STMT00043 (IL 0x155...  ???)
               [000172] --CXG+------              *  CALL      void   System.Console.WriteLine
               [000372] #---G+------ arg0 in rcx  \--*  IND       ref   
               [000371] H----+------                 \--*  CNS_INT(h) long   0x75003210 "   Q = quit"
STMT00044 (IL 0x15F...  ???)
               [000174] --CXG+------              *  CALL      void   System.Console.WriteLine
               [000375] #---G+------ arg0 in rcx  \--*  IND       ref   
               [000374] H----+------                 \--*  CNS_INT(h) long   0x75003218 "   H = heap snapshot"
STMT00045 (IL 0x169...  ???)
               [000176] --CXG+------              *  CALL      void   System.Console.WriteLine
               [000378] #---G+------ arg0 in rcx  \--*  IND       ref   
               [000377] H----+------                 \--*  CNS_INT(h) long   0x75003220 "   G = GC (max gen)"
STMT00046 (IL 0x173...  ???)
               [000178] --CXG+------              *  CALL      void   System.Console.WriteLine
               [000381] #---G+------ arg0 in rcx  \--*  IND       ref   
               [000380] H----+------                 \--*  CNS_INT(h) long   0x75003228 "   R = clear the running flag to stop the consumer thread"

*** marking local variables in block BB16 (weight=1   )

*** marking local variables in block BB17 (weight=1   )

*** marking local variables in block BB18 (weight=1   )

*** marking local variables in block BB19 (weight=8   )
STMT00048 (IL   ???...  ???)
     ( 18, 11) [000233] S-CXG-------              *  CALL      void   System.ConsolePal.ReadKey
     (  3,  3) [000235] ------------ arg0 in rcx  +--*  ADDR      long  
     (  3,  2) [000236] ----G--N----              |  \--*  LCL_VAR   struct<System.ConsoleKeyInfo, 12>(AX)(P) V06 loc4         
                                                  |  \--*    ushort V06._keyChar (offs=0x00) -> V18 tmp11        
                                                  |  \--*    int    V06._key (offs=0x04) -> V19 tmp12        
                                                  |  \--*    int    V06._mods (offs=0x08) -> V20 tmp13        
     (  1,  1) [000232] ------------ arg1 in rdx  \--*  CNS_INT   int    0
New refCnts for V18: refCnt =  1, refCntWtd = 8   
New refCnts for V19: refCnt =  1, refCntWtd = 8   
New refCnts for V20: refCnt =  1, refCntWtd = 8   
New refCnts for V06: refCnt =  1, refCntWtd = 8   
STMT00050 (IL   ???...  ???)
     (  7,  6) [000189] ----G-------              *  JTRUE     void  
     (  5,  4) [000188] N---G--N-U--              \--*  NE        int   
     (  3,  2) [000240] ----G-------                 +--*  LCL_VAR   int   (AX) V19 tmp12        
     (  1,  1) [000187] ------------                 \--*  CNS_INT   int    71
New refCnts for V06: refCnt =  2, refCntWtd = 16   
New refCnts for V19: refCnt =  2, refCntWtd = 16   

*** marking local variables in block BB20 (weight=8   )
STMT00061 (IL 0x18F...0x199)
               [000222] --CXG+------              *  CALL      void   System.GC.Collect
               [000221] --CXG+------ arg0 in rcx  \--*  CALL      int    System.GC.get_MaxGeneration

*** marking local variables in block BB21 (weight=1   )
STMT00052 (IL   ???...  ???)
               [000196] ----G+------              *  JTRUE     void  
               [000195] N---G+-N-U--              \--*  NE        int   
               [000244] ----G+------                 +--*  LCL_VAR   int   (AX) V19 tmp12        
               [000194] -----+------                 \--*  CNS_INT   int    72
New refCnts for V06: refCnt =  3, refCntWtd = 17   
New refCnts for V19: refCnt =  3, refCntWtd = 17   

*** marking local variables in block BB22 (weight=1   )
STMT00060 (IL 0x1A6...0x1AB)
               [000220] --CXG+------              *  CALL      void   System.Diagnostics.Debugger.Break

*** marking local variables in block BB23 (weight=1   )
STMT00054 (IL   ???...  ???)
               [000203] ----G+------              *  JTRUE     void  
               [000202] N---G+-N-U--              \--*  NE        int   
               [000248] ----G+------                 +--*  LCL_VAR   int   (AX) V19 tmp12        
               [000201] -----+------                 \--*  CNS_INT   int    82
New refCnts for V06: refCnt =  4, refCntWtd = 18   
New refCnts for V19: refCnt =  4, refCntWtd = 18   

*** marking local variables in block BB24 (weight=1   )
STMT00059 (IL 0x1B8...0x1BA)
               [000219] -A-XG+------              *  ASG       bool  
               [000218] ---XG+-N----              +--*  IND       bool  
               [000387] -----+------              |  \--*  ADD       byref 
               [000216] -----+------              |     +--*  LCL_VAR   ref    V00 this         
               [000386] -----+------              |     \--*  CNS_INT   long   16 field offset Fseq[_running]
               [000217] -----+------              \--*  CNS_INT   int    0
New refCnts for V00: refCnt = 12, refCntWtd = 68   

*** marking local variables in block BB25 (weight=1   )
STMT00056 (IL   ???...  ???)
               [000210] ----G+------              *  JTRUE     void  
               [000209] N---G+-N-U--              \--*  NE        int   
               [000252] ----G+------                 +--*  LCL_VAR   int   (AX) V19 tmp12        
               [000208] -----+------                 \--*  CNS_INT   int    81
New refCnts for V06: refCnt =  5, refCntWtd = 19   
New refCnts for V19: refCnt =  5, refCntWtd = 19   

*** marking local variables in block BB26 (weight=1   )
STMT00057 (IL 0x1CC...0x1CE)
               [000214] -A-XG+------              *  ASG       bool  
               [000213] ---XG+-N----              +--*  IND       bool  
               [000389] -----+------              |  \--*  ADD       byref 
               [000211] -----+------              |     +--*  LCL_VAR   ref    V00 this         
               [000388] -----+------              |     \--*  CNS_INT   long   16 field offset Fseq[_running]
               [000212] -----+------              \--*  CNS_INT   int    0
New refCnts for V00: refCnt = 13, refCntWtd = 69   
STMT00058 (IL 0x1D3...0x1D3)
               [000215] -----+------              *  RETURN    void  

*** marking local variables in block BB27 (weight=0   )
STMT00031 (IL 0x0CA...0x0CB)
               [000126] ----G+------              *  JTRUE     void  
               [000125] J---G+-N----              \--*  EQ        int   
               [000336] ----G+------                 +--*  CAST      int <- bool <- int
               [000123] ----G+------                 |  \--*  LCL_VAR   int   (AX) V05 loc3         
               [000124] -----+------                 \--*  CNS_INT   int    0
New refCnts for V05: refCnt =  7, refCntWtd = 48   

*** marking local variables in block BB28 (weight=0   )
STMT00033 (IL 0x0CD...0x0CE)
               [000129] --CXG+------              *  CALL      void   System.Threading.Monitor.Exit
               [000128] -----+------ arg0 in rcx  \--*  LCL_VAR   ref    V04 loc2         
New refCnts for V04: refCnt =  7, refCntWtd = 40   

*** marking local variables in block BB29 (weight=0   )
STMT00032 (IL 0x0D3...0x0D3)
               [000127] -----+------              *  RETFILT   void  

*** marking local variables in block BB30 (weight=1   )
STMT00062 (IL 0x126...0x127)
               [000226] ----G+------              *  JTRUE     void  
               [000225] J---G+-N----              \--*  EQ        int   
               [000360] ----G+------                 +--*  CAST      int <- bool <- int
               [000223] ----G+------                 |  \--*  LCL_VAR   int   (AX) V05 loc3         
               [000224] -----+------                 \--*  CNS_INT   int    0
New refCnts for V05: refCnt =  8, refCntWtd = 49   

*** marking local variables in block BB31 (weight=1   )
STMT00064 (IL 0x129...0x12A)
               [000229] --CXG+------              *  CALL      void   System.Threading.Monitor.Exit
               [000228] -----+------ arg0 in rcx  \--*  LCL_VAR   ref    V04 loc2         
New refCnts for V04: refCnt =  8, refCntWtd = 41   

*** marking local variables in block BB32 (weight=1   )
STMT00063 (IL 0x12F...0x12F)
               [000227] -----+------              *  RETFILT   void  

*** lvaComputeRefCounts -- implicit counts ***
New refCnts for V00: refCnt = 14, refCntWtd = 70   
New refCnts for V00: refCnt = 15, refCntWtd = 71   

*************** In optAddCopies()

Trying to add a copy for V00 an arg, avg_wtd = 2.37
        Referenced in BB01, bbWeight is 1   , which is dominated by BB01
        Referenced in BB02, bbWeight is 8   , which is dominated by BB01, ImportantUse
        Referenced in BB03, bbWeight is 8   , which is dominated by BB01, ImportantUse
        Referenced in BB08, bbWeight is 8   , which is dominated by BB01, ImportantUse
        Referenced in BB09, bbWeight is 8   , which is dominated by BB01, ImportantUse
        Referenced in BB24, bbWeight is 1   , which is dominated by BB01
        Referenced in BB26, bbWeight is 1   , which is dominated by BB01

lvaGrabTemp returning 26 (V26 tmp19) (a long lifetime temp) called for optAddCopies.

    Finding the best place to insert the assignment V26=V00
        Starting at BB01, bbWeight is 1   , bestWeight is 1   
        Considering BB01, bbWeight is 1   , bestWeight is 1   
new bestBlock
        Insert copy at the start of BB01

Introducing a new copy for V00
               [000396] -A----------              *  ASG       ref   
               [000395] D------N----              +--*  LCL_VAR   ref    V26 tmp19        
               [000394] ------------              \--*  LCL_VAR   ref    V00 this         


*************** Finishing PHASE Mark local vars

*************** Starting PHASE Optimize bools
*************** In optOptimizeBools()
*************** In fgDebugCheckBBlist

*************** Finishing PHASE Optimize bools

*************** Starting PHASE Find oper order
*************** In fgFindOperOrder()

*************** Finishing PHASE Find oper order

*************** Starting PHASE Set block order
*************** In fgSetBlockOrder()
fgMarkLoopHead: Checking loop head block BB02: method is already fully interruptible
fgMarkLoopHead: Checking loop head block BB08: method is already fully interruptible
fgMarkLoopHead: Checking loop head block BB19: method is already fully interruptible
The biggest BB has   18 tree nodes

*************** Finishing PHASE Set block order
Trees before Build SSA representation

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..072)-> BB07 ( cond )                     i hascall gcsafe newobj 
BB02 [0001]  2       BB01,BB06             8     0 [072..07B)                                     i Loop gcsafe bwd bwd-target align 
BB03 [0002]  1  0    BB02                  8     0 [07B..0CA)                 T0      try { }     keep i try hascall gcsafe newobj bwd 
BB04 [0038]  1       BB03                  8     0 [0CA..0CD)-> BB06 ( cond )                     keep i gcsafe bwd cfb 
BB05 [0039]  1       BB04                  4     0 [0CD..0D4)                                     i hascall gcsafe bwd 
BB06 [0006]  2       BB04,BB05             8     0 [0D4..0DD)-> BB02 ( cond )                     i gcsafe bwd 
BB07 [0008]  2       BB01,BB06             1       [0DD..0F9)                                     i hascall gcsafe 
BB08 [0009]  2       BB07,BB12             8     1 [0F9..102)                                     i Loop gcsafe bwd bwd-target align 
BB09 [0010]  1  1    BB08                  8     1 [102..122)-> BB13 ( cond ) T1      try { }     keep i try hascall gcsafe bwd 
BB10 [0041]  1       BB09                  8     1 [126..129)-> BB12 ( cond )                     keep i gcsafe bwd cfb 
BB11 [0042]  1       BB10                  4     1 [129..130)                                     i hascall gcsafe bwd 
BB12 [0016]  2       BB10,BB11             8     1 [130..139)-> BB08 (always)                     i hascall gcsafe bwd 
BB13 [0030]  1       BB09                  1       [???..???)-> BB30 (callf )                     i internal gcsafe 
BB14 [0031]  1       BB32                  1       [???..???)-> BB15 (ALWAYS)                     i internal gcsafe KEEP 
BB15 [0017]  1       BB14                  1       [139..17D)                                     i hascall gcsafe 
BB16 [0045]  2       BB15,BB25             1     2 [???..???)                                     internal gcsafe 
BB17 [0046]  2       BB16,BB24             1     3 [???..???)                                     internal gcsafe 
BB18 [0047]  2       BB17,BB22             1     4 [???..???)                                     internal gcsafe 
BB19 [0018]  2       BB18,BB20             8     5 [17D..18F)-> BB21 ( cond )                     i Loop hascall gcsafe bwd bwd-target align 
BB20 [0019]  1       BB19                  8     5 [18F..19B)-> BB19 (always)                     i hascall gcsafe bwd 
BB21 [0020]  1       BB19                  1     4 [19B..1A6)-> BB23 ( cond )                     i gcsafe bwd 
BB22 [0021]  1       BB21                  1     4 [1A6..1AD)-> BB18 (always)                     i hascall gcsafe bwd 
BB23 [0022]  1       BB21                  1     3 [1AD..1B8)-> BB25 ( cond )                     i gcsafe bwd 
BB24 [0023]  1       BB23                  1     3 [1B8..1C1)-> BB17 (always)                     i gcsafe bwd 
BB25 [0024]  1       BB23                  1     2 [1C1..1CC)-> BB16 ( cond )                     i gcsafe bwd 
BB26 [0025]  1       BB25                  1       [1CC..1D4)        (return)                     i gcsafe 
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ funclets follow
BB27 [0003]  1     0                       0       [0CA..0CD)-> BB29 ( cond )    H0 F fault {     keep i rare flet bwd 
BB28 [0004]  1     0 BB27                  0       [0CD..0D3)                    H0               i rare hascall bwd 
BB29 [0005]  2     0 BB27,BB28             0       [0D3..0D4)        (finret)    H0   }           i rare bwd 
BB30 [0013]  2     1 BB13                  1       [126..129)-> BB32 ( cond )    H1 F finally {   keep i gcsafe flet bwd 
BB31 [0014]  1     1 BB30                  1       [129..12F)                    H1               i hascall gcsafe bwd 
BB32 [0015]  2     1 BB30,BB31             1       [12F..130)        (finret)    H1   }           i gcsafe bwd 
-----------------------------------------------------------------------------------------------------------------------------------------

------------ BB01 [000..072) -> BB07 (cond), preds={} succs={BB02,BB07}

***** BB01
STMT00073 (IL   ???...  ???)
N003 (  5,  4) [000396] -A------R---              *  ASG       ref   
N002 (  3,  2) [000395] D------N----              +--*  LCL_VAR   ref    V26 tmp19        
N001 (  1,  1) [000394] ------------              \--*  LCL_VAR   ref    V00 this         

***** BB01
STMT00000 (IL 0x000...0x005)
N003 ( 18,  8) [000003] -ACXG---R---              *  ASG       struct (copy)
N002 (  3,  2) [000001] D---G--N----              +--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  +--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
N001 ( 14,  5) [000000] --CXG-------              \--*  CALL      struct System.DateTime.get_Now

***** BB01
STMT00001 (IL 0x006...0x022)
N013 ( 53, 36) [000009] --CXG-------              *  CALL      void   System.Console.WriteLine
N012 ( 39, 30) [000008] --CXG------- arg0 in rcx  \--*  CALL      ref    System.String.Concat
N007 ( 17, 10) [000272] -ACXG---R-L- arg0 SETUP      +--*  ASG       ref   
N006 (  1,  1) [000271] D------N----                 |  +--*  LCL_VAR   ref    V21 tmp14        
N005 ( 17, 10) [000006] --CXG-------                 |  \--*  CALL      ref    System.DateTime.ToString
N004 (  3,  3) [000005] ------------ this in rcx     |     \--*  ADDR      byref 
N003 (  3,  2) [000004] ----G--N----                 |        \--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                     |        \--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
N009 (  1,  1) [000273] ------------ arg0 in rcx     +--*  LCL_VAR   ref    V21 tmp14        
N011 (  4, 12) [000270] #---G------- arg1 in rdx     \--*  IND       ref   
N010 (  2, 10) [000269] H-----------                    \--*  CNS_INT(h) long   0x750031F0 "	 Created list"

***** BB01
STMT00002 (IL 0x01C...  ???)
N005 ( 16, 16) [000014] -AC-----R---              *  ASG       ref   
N004 (  1,  1) [000013] D------N----              +--*  LCL_VAR   ref    V08 tmp1         
N003 ( 16, 16) [000012] --C---------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
N002 (  2, 10) [000011] H----------- arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb3ee2350 method

***** BB01
STMT00003 (IL   ???...  ???)
N003 ( 15,  8) [000016] --CXG-------              *  CALL      void   FalseLeakRepro.List..ctor
N002 (  1,  1) [000015] ------------ this in rcx  \--*  LCL_VAR   ref    V08 tmp1         

***** BB01
STMT00004 (IL 0x022...  ???)
N006 (  6,  6) [000019] -A-XG-------              *  ASG       ref   
N004 (  4,  4) [000018] ---XG--N----              +--*  IND       ref   
N003 (  2,  2) [000279] -------N----              |  \--*  ADD       byref 
N001 (  1,  1) [000010] ------------              |     +--*  LCL_VAR   ref    V00 this         
N002 (  1,  1) [000278] ------------              |     \--*  CNS_INT   long   8 field offset Fseq[_myList]
N005 (  1,  1) [000017] ------------              \--*  LCL_VAR   ref    V08 tmp1         

***** BB01
STMT00005 (IL 0x027...0x037)
N005 ( 16, 16) [000026] -AC-----R---              *  ASG       ref   
N004 (  1,  1) [000025] D------N----              +--*  LCL_VAR   ref    V09 tmp2         
N003 ( 16, 16) [000024] --C---------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
N002 (  2, 10) [000023] H----------- arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb3b058b8 token

***** BB01
STMT00007 (IL   ???...  ???)
N009 (  7,  7) [000030] -A-XG---R---              *  ASG       ref   
N008 (  1,  1) [000029] D------N----              +--*  LCL_VAR   ref    V10 tmp3         
N007 (  7,  7) [000022] ---XG-------              \--*  IND       ref   
N006 (  5,  5) [000282] ---XG--N----                 \--*  ADD       byref 
N004 (  4,  4) [000021] ---XG-------                    +--*  IND       ref   
N003 (  2,  2) [000284] -------N----                    |  \--*  ADD       byref 
N001 (  1,  1) [000020] ------------                    |     +--*  LCL_VAR   ref    V00 this         
N002 (  1,  1) [000283] ------------                    |     \--*  CNS_INT   long   8 field offset Fseq[_myList]
N005 (  1,  1) [000281] ------------                    \--*  CNS_INT   long   8 field offset Fseq[Head]

***** BB01
STMT00006 (IL   ???...  ???)
N003 ( 15,  8) [000028] --CXG-------              *  CALL      void   System.Object..ctor
N002 (  1,  1) [000027] ------------ this in rcx  \--*  LCL_VAR   ref    V09 tmp2         

***** BB01
STMT00008 (IL 0x037...  ???)
N006 (  6,  6) [000034] -A-XG-------              *  ASG       ref   
N004 (  4,  4) [000033] ---XG--N----              +--*  IND       ref   
N003 (  2,  2) [000287] -------N----              |  \--*  ADD       byref 
N001 (  1,  1) [000031] ------------              |     +--*  LCL_VAR   ref    V10 tmp3         
N002 (  1,  1) [000286] ------------              |     \--*  CNS_INT   long   16 field offset Fseq[Data]
N005 (  1,  1) [000032] ------------              \--*  LCL_VAR   ref    V09 tmp2         

***** BB01
STMT00009 (IL 0x03C...0x057)
N005 ( 16, 16) [000040] -AC-----R---              *  ASG       ref   
N004 (  1,  1) [000039] D------N----              +--*  LCL_VAR   ref    V11 tmp4         
N003 ( 16, 16) [000038] --C---------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
N002 (  2, 10) [000037] H----------- arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb3ee6200 token

***** BB01
STMT00010 (IL   ???...  ???)
N007 ( 18, 21) [000042] --CXG-------              *  CALL      void   System.MulticastDelegate.CtorClosed
N004 (  1,  1) [000041] ------------ this in rcx  +--*  LCL_VAR   ref    V11 tmp4         
N005 (  1,  1) [000035] ------------ arg1 in rdx  +--*  LCL_VAR   ref    V00 this         
N006 (  2, 10) [000036] H----------- arg2 in r8   \--*  CNS_INT(h) long   0x7ffdb3b213f8 ftn

***** BB01
STMT00011 (IL 0x048...  ???)
N005 ( 16, 16) [000047] -AC-----R---              *  ASG       ref   
N004 (  1,  1) [000046] D------N----              +--*  LCL_VAR   ref    V12 tmp5         
N003 ( 16, 16) [000045] --C---------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWFAST
N002 (  2, 10) [000044] H----------- arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb3c84e80 token

***** BB01
STMT00012 (IL   ???...  ???)
N005 ( 16, 10) [000049] --CXG-------              *  CALL      void   System.Threading.Thread..ctor
N003 (  1,  1) [000048] ------------ this in rcx  +--*  LCL_VAR   ref    V12 tmp5         
N004 (  1,  1) [000043] ------------ arg1 in rdx  \--*  LCL_VAR   ref    V11 tmp4         

***** BB01
STMT00013 (IL 0x04D...  ???)
N003 ( 15,  8) [000051] --CXG-------              *  CALL nullcheck void   System.Threading.Thread.Start
N002 (  1,  1) [000050] ------------ this in rcx  \--*  LCL_VAR   ref    V12 tmp5         

***** BB01
STMT00014 (IL 0x052...  ???)
N003 ( 18,  8) [000055] -ACXG---R---              *  ASG       struct (copy)
N002 (  3,  2) [000053] D---G--N----              +--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  +--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
N001 ( 14,  5) [000052] --CXG-------              \--*  CALL      struct System.DateTime.get_Now

***** BB01
STMT00015 (IL 0x058...0x06F)
N013 ( 53, 36) [000061] --CXG-------              *  CALL      void   System.Console.WriteLine
N012 ( 39, 30) [000060] --CXG------- arg0 in rcx  \--*  CALL      ref    System.String.Concat
N007 ( 17, 10) [000300] -ACXG---R-L- arg0 SETUP      +--*  ASG       ref   
N006 (  1,  1) [000299] D------N----                 |  +--*  LCL_VAR   ref    V22 tmp15        
N005 ( 17, 10) [000058] --CXG-------                 |  \--*  CALL      ref    System.DateTime.ToString
N004 (  3,  3) [000057] ------------ this in rcx     |     \--*  ADDR      byref 
N003 (  3,  2) [000056] ----G--N----                 |        \--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                     |        \--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
N009 (  1,  1) [000301] ------------ arg0 in rcx     +--*  LCL_VAR   ref    V22 tmp15        
N011 (  4, 12) [000298] #---G------- arg1 in rdx     \--*  IND       ref   
N010 (  2, 10) [000297] H-----------                    \--*  CNS_INT(h) long   0x750031F8 "	 Consumer thread started, adding items..."

***** BB01
STMT00016 (IL 0x06E...  ???)
N003 (  1,  3) [000064] -A------R---              *  ASG       int   
N002 (  1,  1) [000063] D------N----              +--*  LCL_VAR   int    V03 loc1         
N001 (  1,  1) [000062] ------------              \--*  CNS_INT   int    0

***** BB01
STMT00072 (IL 0x0D8...  ???)
N004 (  5,  5) [000390] ------------              *  JTRUE     void  
N003 (  3,  3) [000391] J------N----              \--*  GE        int   
N001 (  1,  1) [000392] ------------                 +--*  LCL_VAR   int    V03 loc1         
N002 (  1,  1) [000393] ------------                 \--*  CNS_INT   int    10

------------ BB02 [072..07B), preds={BB01,BB06} succs={BB03}

***** BB02
STMT00018 (IL 0x072...0x078)
N006 (  4,  4) [000072] -A-XG---R---              *  ASG       ref   
N005 (  1,  1) [000071] D------N----              +--*  LCL_VAR   ref    V04 loc2         
N004 (  4,  4) [000070] ---XG-------              \--*  IND       ref   
N003 (  2,  2) [000305] -------N----                 \--*  ADD       byref 
N001 (  1,  1) [000069] ------------                    +--*  LCL_VAR   ref    V00 this         
N002 (  1,  1) [000304] ------------                    \--*  CNS_INT   long   8 field offset Fseq[_myList]

***** BB02
STMT00019 (IL 0x079...0x07A)
N003 (  5,  4) [000075] -A--G---R---              *  ASG       int   
N002 (  3,  2) [000074] D---G--N----              +--*  LCL_VAR   int   (AX) V05 loc3         
N001 (  1,  1) [000073] ------------              \--*  CNS_INT   int    0

------------ BB03 [07B..0CA), preds={BB02} succs={BB04}

***** BB03
STMT00020 (IL 0x07B...0x093)
N005 ( 18, 11) [000079] --CXG-------              *  CALL      void   System.Threading.Monitor.Enter
N003 (  3,  3) [000078] ------------ arg1 in rdx  +--*  LCL_VAR_ADDR long   V05 loc3         
N004 (  1,  1) [000076] ------------ arg0 in rcx  \--*  LCL_VAR   ref    V04 loc2         

***** BB03
STMT00021 (IL 0x083...  ???)
N005 ( 16, 16) [000086] -AC-----R---              *  ASG       ref   
N004 (  1,  1) [000085] D------N----              +--*  LCL_VAR   ref    V13 tmp6         
N003 ( 16, 16) [000084] --C---------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
N002 (  2, 10) [000083] H----------- arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb3ee58a8 method

***** BB03
STMT00023 (IL   ???...  ???)
N009 (  7,  7) [000090] -A-XG---R---              *  ASG       ref   
N008 (  1,  1) [000089] D------N----              +--*  LCL_VAR   ref    V14 tmp7         
N007 (  7,  7) [000082] ---XG-------              \--*  IND       ref   
N006 (  5,  5) [000310] ---XG--N----                 \--*  ADD       byref 
N004 (  4,  4) [000081] ---XG-------                    +--*  IND       ref   
N003 (  2,  2) [000312] -------N----                    |  \--*  ADD       byref 
N001 (  1,  1) [000080] ------------                    |     +--*  LCL_VAR   ref    V00 this         
N002 (  1,  1) [000311] ------------                    |     \--*  CNS_INT   long   8 field offset Fseq[_myList]
N005 (  1,  1) [000309] ------------                    \--*  CNS_INT   long   8 field offset Fseq[Head]

***** BB03
STMT00065 (IL   ???...  ???)
N003 ( 15,  8) [000230] --CXG-------              *  CALL      void   System.Object..ctor
N002 (  1,  1) [000087] ------------ this in rcx  \--*  LCL_VAR   ref    V13 tmp6         

***** BB03
STMT00024 (IL 0x093...  ???)
N006 (  6,  6) [000094] -A-XG-------              *  ASG       ref   
N004 (  4,  4) [000093] ---XG--N----              +--*  IND       ref   
N003 (  2,  2) [000315] -------N----              |  \--*  ADD       byref 
N001 (  1,  1) [000091] ------------              |     +--*  LCL_VAR   ref    V14 tmp7         
N002 (  1,  1) [000314] ------------              |     \--*  CNS_INT   long   8 field offset Fseq[Next]
N005 (  1,  1) [000092] ------------              \--*  LCL_VAR   ref    V13 tmp6         

***** BB03
STMT00025 (IL 0x098...0x0AE)
N018 ( 18, 18) [000102] -A-XG-------              *  ASG       ref   
N007 (  7,  7) [000101] ---XG--N----              +--*  IND       ref   
N006 (  5,  5) [000317] ---XG--N----              |  \--*  ADD       byref 
N004 (  4,  4) [000096] ---XG-------              |     +--*  IND       ref   
N003 (  2,  2) [000319] -------N----              |     |  \--*  ADD       byref 
N001 (  1,  1) [000095] ------------              |     |     +--*  LCL_VAR   ref    V00 this         
N002 (  1,  1) [000318] ------------              |     |     \--*  CNS_INT   long   8 field offset Fseq[_myList]
N005 (  1,  1) [000316] ------------              |     \--*  CNS_INT   long   8 field offset Fseq[Head]
N017 ( 10, 10) [000100] ---XG-------              \--*  IND       ref   
N016 (  8,  8) [000321] ---XG--N----                 \--*  ADD       byref 
N014 (  7,  7) [000099] ---XG-------                    +--*  IND       ref   
N013 (  5,  5) [000323] ---XG--N----                    |  \--*  ADD       byref 
N011 (  4,  4) [000098] ---XG-------                    |     +--*  IND       ref   
N010 (  2,  2) [000325] -------N----                    |     |  \--*  ADD       byref 
N008 (  1,  1) [000097] ------------                    |     |     +--*  LCL_VAR   ref    V00 this         
N009 (  1,  1) [000324] ------------                    |     |     \--*  CNS_INT   long   8 field offset Fseq[_myList]
N012 (  1,  1) [000322] ------------                    |     \--*  CNS_INT   long   8 field offset Fseq[Head]
N015 (  1,  1) [000320] ------------                    \--*  CNS_INT   long   8 field offset Fseq[Next]

***** BB03
STMT00026 (IL 0x0B3...0x0C3)
N005 ( 16, 16) [000109] -AC-----R---              *  ASG       ref   
N004 (  1,  1) [000108] D------N----              +--*  LCL_VAR   ref    V15 tmp8         
N003 ( 16, 16) [000107] --C---------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
N002 (  2, 10) [000106] H----------- arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb3b058b8 token

***** BB03
STMT00028 (IL   ???...  ???)
N009 (  7,  7) [000113] -A-XG---R---              *  ASG       ref   
N008 (  1,  1) [000112] D------N----              +--*  LCL_VAR   ref    V16 tmp9         
N007 (  7,  7) [000105] ---XG-------              \--*  IND       ref   
N006 (  5,  5) [000328] ---XG--N----                 \--*  ADD       byref 
N004 (  4,  4) [000104] ---XG-------                    +--*  IND       ref   
N003 (  2,  2) [000330] -------N----                    |  \--*  ADD       byref 
N001 (  1,  1) [000103] ------------                    |     +--*  LCL_VAR   ref    V00 this         
N002 (  1,  1) [000329] ------------                    |     \--*  CNS_INT   long   8 field offset Fseq[_myList]
N005 (  1,  1) [000327] ------------                    \--*  CNS_INT   long   8 field offset Fseq[Head]

***** BB03
STMT00027 (IL   ???...  ???)
N003 ( 15,  8) [000111] --CXG-------              *  CALL      void   System.Object..ctor
N002 (  1,  1) [000110] ------------ this in rcx  \--*  LCL_VAR   ref    V15 tmp8         

***** BB03
STMT00029 (IL 0x0C3...  ???)
N006 (  6,  6) [000117] -A-XG-------              *  ASG       ref   
N004 (  4,  4) [000116] ---XG--N----              +--*  IND       ref   
N003 (  2,  2) [000333] -------N----              |  \--*  ADD       byref 
N001 (  1,  1) [000114] ------------              |     +--*  LCL_VAR   ref    V16 tmp9         
N002 (  1,  1) [000332] ------------              |     \--*  CNS_INT   long   16 field offset Fseq[Data]
N005 (  1,  1) [000115] ------------              \--*  LCL_VAR   ref    V15 tmp8         

------------ BB04 [0CA..0CD) -> BB06 (cond), preds={BB03} succs={BB05,BB06}

***** BB04
STMT00066 (IL   ???...  ???)
N005 (  8,  8) [000254] ----G-------              *  JTRUE     void  
N004 (  6,  6) [000255] J---G--N----              \--*  EQ        int   
N002 (  4,  4) [000334] ----G-------                 +--*  CAST      int <- bool <- int
N001 (  3,  2) [000256] ----G-------                 |  \--*  LCL_VAR   int   (AX) V05 loc3         
N003 (  1,  1) [000257] ------------                 \--*  CNS_INT   int    0

------------ BB05 [0CD..0D4), preds={BB04} succs={BB06}

***** BB05
STMT00067 (IL   ???...  ???)
N003 ( 15,  7) [000258] --CXG-------              *  CALL      void   System.Threading.Monitor.Exit
N002 (  1,  1) [000259] ------------ arg0 in rcx  \--*  LCL_VAR   ref    V04 loc2         

------------ BB06 [0D4..0DD) -> BB02 (cond), preds={BB04,BB05} succs={BB07,BB02}

***** BB06
STMT00030 (IL 0x0D4...0x0D7)
N005 (  3,  3) [000122] -A------R---              *  ASG       int   
N004 (  1,  1) [000121] D------N----              +--*  LCL_VAR   int    V03 loc1         
N003 (  3,  3) [000120] ------------              \--*  ADD       int   
N001 (  1,  1) [000118] ------------                 +--*  LCL_VAR   int    V03 loc1         
N002 (  1,  1) [000119] ------------                 \--*  CNS_INT   int    1

***** BB06
STMT00017 (IL 0x0D8...0x0DB)
N004 (  5,  5) [000068] ------------              *  JTRUE     void  
N003 (  3,  3) [000067] J------N----              \--*  LT        int   
N001 (  1,  1) [000065] ------------                 +--*  LCL_VAR   int    V03 loc1         
N002 (  1,  1) [000066] ------------                 \--*  CNS_INT   int    10

------------ BB07 [0DD..0F9), preds={BB01,BB06} succs={BB08}

***** BB07
STMT00034 (IL 0x0DD...0x0E2)
N003 ( 18,  8) [000133] -ACXG---R---              *  ASG       struct (copy)
N002 (  3,  2) [000131] D---G--N----              +--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  +--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
N001 ( 14,  5) [000130] --CXG-------              \--*  CALL      struct System.DateTime.get_Now

***** BB07
STMT00035 (IL 0x0E3...0x0F4)
N013 ( 53, 36) [000139] --CXG-------              *  CALL      void   System.Console.WriteLine
N012 ( 39, 30) [000138] --CXG------- arg0 in rcx  \--*  CALL      ref    System.String.Concat
N007 ( 17, 10) [000342] -ACXG---R-L- arg0 SETUP      +--*  ASG       ref   
N006 (  1,  1) [000341] D------N----                 |  +--*  LCL_VAR   ref    V23 tmp16        
N005 ( 17, 10) [000136] --CXG-------                 |  \--*  CALL      ref    System.DateTime.ToString
N004 (  3,  3) [000135] ------------ this in rcx     |     \--*  ADDR      byref 
N003 (  3,  2) [000134] ----G--N----                 |        \--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                     |        \--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
N009 (  1,  1) [000343] ------------ arg0 in rcx     +--*  LCL_VAR   ref    V23 tmp16        
N011 (  4, 12) [000340] #---G------- arg1 in rdx     \--*  IND       ref   
N010 (  2, 10) [000339] H-----------                    \--*  CNS_INT(h) long   0x75003200 "	 Waiting for list processing to complete..."

------------ BB08 [0F9..102), preds={BB07,BB12} succs={BB09}

***** BB08
STMT00036 (IL 0x0F9...0x0FF)
N006 (  4,  4) [000143] -A-XG---R---              *  ASG       ref   
N005 (  1,  1) [000142] D------N----              +--*  LCL_VAR   ref    V04 loc2         
N004 (  4,  4) [000141] ---XG-------              \--*  IND       ref   
N003 (  2,  2) [000347] -------N----                 \--*  ADD       byref 
N001 (  1,  1) [000140] ------------                    +--*  LCL_VAR   ref    V00 this         
N002 (  1,  1) [000346] ------------                    \--*  CNS_INT   long   8 field offset Fseq[_myList]

***** BB08
STMT00037 (IL 0x100...0x101)
N003 (  5,  4) [000146] -A--G---R---              *  ASG       int   
N002 (  3,  2) [000145] D---G--N----              +--*  LCL_VAR   int   (AX) V05 loc3         
N001 (  1,  1) [000144] ------------              \--*  CNS_INT   int    0

------------ BB09 [102..122) -> BB13 (cond), preds={BB08} succs={BB10,BB13}

***** BB09
STMT00038 (IL 0x102...0x120)
N005 ( 18, 11) [000150] --CXG-------              *  CALL      void   System.Threading.Monitor.Enter
N003 (  3,  3) [000149] ------------ arg1 in rdx  +--*  LCL_VAR_ADDR long   V05 loc3         
N004 (  1,  1) [000147] ------------ arg0 in rcx  \--*  LCL_VAR   ref    V04 loc2         

***** BB09
STMT00039 (IL 0x10A...  ???)
N016 ( 17, 17) [000158] ---XG-------              *  JTRUE     void  
N015 ( 15, 15) [000157] N--XG--N-U--              \--*  EQ        int   
N007 (  7,  7) [000153] ---XG-------                 +--*  IND       ref   
N006 (  5,  5) [000351] ---XG--N----                 |  \--*  ADD       byref 
N004 (  4,  4) [000152] ---XG-------                 |     +--*  IND       ref   
N003 (  2,  2) [000353] -------N----                 |     |  \--*  ADD       byref 
N001 (  1,  1) [000151] ------------                 |     |     +--*  LCL_VAR   ref    V00 this         
N002 (  1,  1) [000352] ------------                 |     |     \--*  CNS_INT   long   8 field offset Fseq[_myList]
N005 (  1,  1) [000350] ------------                 |     \--*  CNS_INT   long   8 field offset Fseq[Head]
N014 (  7,  7) [000156] ---XG-------                 \--*  IND       ref   
N013 (  5,  5) [000355] ---XG--N----                    \--*  ADD       byref 
N011 (  4,  4) [000155] ---XG-------                       +--*  IND       ref   
N010 (  2,  2) [000357] -------N----                       |  \--*  ADD       byref 
N008 (  1,  1) [000154] ------------                       |     +--*  LCL_VAR   ref    V00 this         
N009 (  1,  1) [000356] ------------                       |     \--*  CNS_INT   long   8 field offset Fseq[_myList]
N012 (  1,  1) [000354] ------------                       \--*  CNS_INT   long   16 field offset Fseq[Tail]

------------ BB10 [126..129) -> BB12 (cond), preds={BB09} succs={BB11,BB12}

***** BB10
STMT00069 (IL   ???...  ???)
N005 (  8,  8) [000261] ----G-------              *  JTRUE     void  
N004 (  6,  6) [000262] J---G--N----              \--*  EQ        int   
N002 (  4,  4) [000358] ----G-------                 +--*  CAST      int <- bool <- int
N001 (  3,  2) [000263] ----G-------                 |  \--*  LCL_VAR   int   (AX) V05 loc3         
N003 (  1,  1) [000264] ------------                 \--*  CNS_INT   int    0

------------ BB11 [129..130), preds={BB10} succs={BB12}

***** BB11
STMT00070 (IL   ???...  ???)
N003 ( 15,  7) [000265] --CXG-------              *  CALL      void   System.Threading.Monitor.Exit
N002 (  1,  1) [000266] ------------ arg0 in rcx  \--*  LCL_VAR   ref    V04 loc2         

------------ BB12 [130..139) -> BB08 (always), preds={BB10,BB11} succs={BB08}

***** BB12
STMT00040 (IL 0x130...0x137)
N003 ( 15,  7) [000160] --CXG-------              *  CALL      void   System.Threading.Thread.Sleep
N002 (  1,  1) [000159] ------------ arg0 in rcx  \--*  CNS_INT   int    100

------------ BB13 [???..???) -> BB30 (callf), preds={BB09} succs={BB30}

------------ BB14 [???..???) -> BB15 (ALWAYS), preds={BB32} succs={BB15}

------------ BB15 [139..17D), preds={BB14} succs={BB16}

***** BB15
STMT00041 (IL 0x139...0x13E)
N003 ( 18,  8) [000164] -ACXG---R---              *  ASG       struct (copy)
N002 (  3,  2) [000162] D---G--N----              +--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  +--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
N001 ( 14,  5) [000161] --CXG-------              \--*  CALL      struct System.DateTime.get_Now

***** BB15
STMT00042 (IL 0x13F...0x178)
N013 ( 53, 36) [000170] --CXG-------              *  CALL      void   System.Console.WriteLine
N012 ( 39, 30) [000169] --CXG------- arg0 in rcx  \--*  CALL      ref    System.String.Concat
N007 ( 17, 10) [000367] -ACXG---R-L- arg0 SETUP      +--*  ASG       ref   
N006 (  1,  1) [000366] D------N----                 |  +--*  LCL_VAR   ref    V24 tmp17        
N005 ( 17, 10) [000167] --CXG-------                 |  \--*  CALL      ref    System.DateTime.ToString
N004 (  3,  3) [000166] ------------ this in rcx     |     \--*  ADDR      byref 
N003 (  3,  2) [000165] ----G--N----                 |        \--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                     |        \--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
N009 (  1,  1) [000368] ------------ arg0 in rcx     +--*  LCL_VAR   ref    V24 tmp17        
N011 (  4, 12) [000365] #---G------- arg1 in rdx     \--*  IND       ref   
N010 (  2, 10) [000364] H-----------                    \--*  CNS_INT(h) long   0x75003208 "	 Done.  Profiler is active, available options:"

***** BB15
STMT00043 (IL 0x155...  ???)
N004 ( 18, 18) [000172] --CXG-------              *  CALL      void   System.Console.WriteLine
N003 (  4, 12) [000372] #---G------- arg0 in rcx  \--*  IND       ref   
N002 (  2, 10) [000371] H-----------                 \--*  CNS_INT(h) long   0x75003210 "   Q = quit"

***** BB15
STMT00044 (IL 0x15F...  ???)
N004 ( 18, 18) [000174] --CXG-------              *  CALL      void   System.Console.WriteLine
N003 (  4, 12) [000375] #---G------- arg0 in rcx  \--*  IND       ref   
N002 (  2, 10) [000374] H-----------                 \--*  CNS_INT(h) long   0x75003218 "   H = heap snapshot"

***** BB15
STMT00045 (IL 0x169...  ???)
N004 ( 18, 18) [000176] --CXG-------              *  CALL      void   System.Console.WriteLine
N003 (  4, 12) [000378] #---G------- arg0 in rcx  \--*  IND       ref   
N002 (  2, 10) [000377] H-----------                 \--*  CNS_INT(h) long   0x75003220 "   G = GC (max gen)"

***** BB15
STMT00046 (IL 0x173...  ???)
N004 ( 18, 18) [000178] --CXG-------              *  CALL      void   System.Console.WriteLine
N003 (  4, 12) [000381] #---G------- arg0 in rcx  \--*  IND       ref   
N002 (  2, 10) [000380] H-----------                 \--*  CNS_INT(h) long   0x75003228 "   R = clear the running flag to stop the consumer thread"

------------ BB16 [???..???), preds={BB15,BB25} succs={BB17}

------------ BB17 [???..???), preds={BB16,BB24} succs={BB18}

------------ BB18 [???..???), preds={BB17,BB22} succs={BB19}

------------ BB19 [17D..18F) -> BB21 (cond), preds={BB18,BB20} succs={BB20,BB21}

***** BB19
STMT00048 (IL   ???...  ???)
N006 ( 18, 11) [000233] S-CXG-------              *  CALL      void   System.ConsolePal.ReadKey
N004 (  3,  3) [000235] ------------ arg0 in rcx  +--*  ADDR      long  
N003 (  3,  2) [000236] ----G--N----              |  \--*  LCL_VAR   struct<System.ConsoleKeyInfo, 12>(AX)(P) V06 loc4         
                                                  |  \--*    ushort V06._keyChar (offs=0x00) -> V18 tmp11        
                                                  |  \--*    int    V06._key (offs=0x04) -> V19 tmp12        
                                                  |  \--*    int    V06._mods (offs=0x08) -> V20 tmp13        
N005 (  1,  1) [000232] ------------ arg1 in rdx  \--*  CNS_INT   int    0

***** BB19
STMT00050 (IL   ???...  ???)
N004 (  7,  6) [000189] ----G-------              *  JTRUE     void  
N003 (  5,  4) [000188] N---G--N-U--              \--*  NE        int   
N001 (  3,  2) [000240] ----G-------                 +--*  LCL_VAR   int   (AX) V19 tmp12        
N002 (  1,  1) [000187] ------------                 \--*  CNS_INT   int    71

------------ BB20 [18F..19B) -> BB19 (always), preds={BB19} succs={BB19}

***** BB20
STMT00061 (IL 0x18F...0x199)
N003 ( 28, 11) [000222] --CXG-------              *  CALL      void   System.GC.Collect
N002 ( 14,  5) [000221] --CXG------- arg0 in rcx  \--*  CALL      int    System.GC.get_MaxGeneration

------------ BB21 [19B..1A6) -> BB23 (cond), preds={BB19} succs={BB22,BB23}

***** BB21
STMT00052 (IL   ???...  ???)
N004 (  7,  6) [000196] ----G-------              *  JTRUE     void  
N003 (  5,  4) [000195] N---G--N-U--              \--*  NE        int   
N001 (  3,  2) [000244] ----G-------                 +--*  LCL_VAR   int   (AX) V19 tmp12        
N002 (  1,  1) [000194] ------------                 \--*  CNS_INT   int    72

------------ BB22 [1A6..1AD) -> BB18 (always), preds={BB21} succs={BB18}

***** BB22
STMT00060 (IL 0x1A6...0x1AB)
N001 ( 14,  5) [000220] --CXG-------              *  CALL      void   System.Diagnostics.Debugger.Break

------------ BB23 [1AD..1B8) -> BB25 (cond), preds={BB21} succs={BB24,BB25}

***** BB23
STMT00054 (IL   ???...  ???)
N004 (  7,  6) [000203] ----G-------              *  JTRUE     void  
N003 (  5,  4) [000202] N---G--N-U--              \--*  NE        int   
N001 (  3,  2) [000248] ----G-------                 +--*  LCL_VAR   int   (AX) V19 tmp12        
N002 (  1,  1) [000201] ------------                 \--*  CNS_INT   int    82

------------ BB24 [1B8..1C1) -> BB17 (always), preds={BB23} succs={BB17}

***** BB24
STMT00059 (IL 0x1B8...0x1BA)
N006 (  7,  7) [000219] -A-XG-------              *  ASG       bool  
N004 (  5,  5) [000218] ---XG--N----              +--*  IND       bool  
N003 (  2,  2) [000387] -------N----              |  \--*  ADD       byref 
N001 (  1,  1) [000216] ------------              |     +--*  LCL_VAR   ref    V00 this         
N002 (  1,  1) [000386] ------------              |     \--*  CNS_INT   long   16 field offset Fseq[_running]
N005 (  1,  1) [000217] ------------              \--*  CNS_INT   int    0

------------ BB25 [1C1..1CC) -> BB16 (cond), preds={BB23} succs={BB26,BB16}

***** BB25
STMT00056 (IL   ???...  ???)
N004 (  7,  6) [000210] ----G-------              *  JTRUE     void  
N003 (  5,  4) [000209] N---G--N-U--              \--*  NE        int   
N001 (  3,  2) [000252] ----G-------                 +--*  LCL_VAR   int   (AX) V19 tmp12        
N002 (  1,  1) [000208] ------------                 \--*  CNS_INT   int    81

------------ BB26 [1CC..1D4) (return), preds={BB25} succs={}

***** BB26
STMT00057 (IL 0x1CC...0x1CE)
N006 (  7,  7) [000214] -A-XG-------              *  ASG       bool  
N004 (  5,  5) [000213] ---XG--N----              +--*  IND       bool  
N003 (  2,  2) [000389] -------N----              |  \--*  ADD       byref 
N001 (  1,  1) [000211] ------------              |     +--*  LCL_VAR   ref    V00 this         
N002 (  1,  1) [000388] ------------              |     \--*  CNS_INT   long   16 field offset Fseq[_running]
N005 (  1,  1) [000212] ------------              \--*  CNS_INT   int    0

***** BB26
STMT00058 (IL 0x1D3...0x1D3)
N001 (  0,  0) [000215] ------------              *  RETURN    void  

------------ BB27 [0CA..0CD) -> BB29 (cond), preds={} succs={BB28,BB29}

***** BB27
STMT00031 (IL 0x0CA...0x0CB)
N005 (  8,  8) [000126] ----G-------              *  JTRUE     void  
N004 (  6,  6) [000125] J---G--N----              \--*  EQ        int   
N002 (  4,  4) [000336] ----G-------                 +--*  CAST      int <- bool <- int
N001 (  3,  2) [000123] ----G-------                 |  \--*  LCL_VAR   int   (AX) V05 loc3         
N003 (  1,  1) [000124] ------------                 \--*  CNS_INT   int    0

------------ BB28 [0CD..0D3), preds={BB27} succs={BB29}

***** BB28
STMT00033 (IL 0x0CD...0x0CE)
N003 ( 15,  7) [000129] --CXG-------              *  CALL      void   System.Threading.Monitor.Exit
N002 (  1,  1) [000128] ------------ arg0 in rcx  \--*  LCL_VAR   ref    V04 loc2         

------------ BB29 [0D3..0D4) (finret), preds={BB27,BB28} succs={}

***** BB29
STMT00032 (IL 0x0D3...0x0D3)
N001 (  0,  0) [000127] ------------              *  RETFILT   void  

------------ BB30 [126..129) -> BB32 (cond), preds={BB13} succs={BB31,BB32}

***** BB30
STMT00062 (IL 0x126...0x127)
N005 (  8,  8) [000226] ----G-------              *  JTRUE     void  
N004 (  6,  6) [000225] J---G--N----              \--*  EQ        int   
N002 (  4,  4) [000360] ----G-------                 +--*  CAST      int <- bool <- int
N001 (  3,  2) [000223] ----G-------                 |  \--*  LCL_VAR   int   (AX) V05 loc3         
N003 (  1,  1) [000224] ------------                 \--*  CNS_INT   int    0

------------ BB31 [129..12F), preds={BB30} succs={BB32}

***** BB31
STMT00064 (IL 0x129...0x12A)
N003 ( 15,  7) [000229] --CXG-------              *  CALL      void   System.Threading.Monitor.Exit
N002 (  1,  1) [000228] ------------ arg0 in rcx  \--*  LCL_VAR   ref    V04 loc2         

------------ BB32 [12F..130) (finret), preds={BB30,BB31} succs={BB14}

***** BB32
STMT00063 (IL 0x12F...0x12F)
N001 (  0,  0) [000227] ------------              *  RETFILT   void  

-------------------------------------------------------------------------------------------------------------------

*************** Starting PHASE Build SSA representation
*************** In SsaBuilder::Build()
[SsaBuilder] Max block count is 33.

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..072)-> BB07 ( cond )                     i hascall gcsafe newobj 
BB02 [0001]  2       BB01,BB06             8     0 [072..07B)                                     i Loop gcsafe bwd bwd-target align 
BB03 [0002]  1  0    BB02                  8     0 [07B..0CA)                 T0      try { }     keep i try hascall gcsafe newobj bwd 
BB04 [0038]  1       BB03                  8     0 [0CA..0CD)-> BB06 ( cond )                     keep i gcsafe bwd cfb 
BB05 [0039]  1       BB04                  4     0 [0CD..0D4)                                     i hascall gcsafe bwd 
BB06 [0006]  2       BB04,BB05             8     0 [0D4..0DD)-> BB02 ( cond )                     i gcsafe bwd 
BB07 [0008]  2       BB01,BB06             1       [0DD..0F9)                                     i hascall gcsafe 
BB08 [0009]  2       BB07,BB12             8     1 [0F9..102)                                     i Loop gcsafe bwd bwd-target align 
BB09 [0010]  1  1    BB08                  8     1 [102..122)-> BB13 ( cond ) T1      try { }     keep i try hascall gcsafe bwd 
BB10 [0041]  1       BB09                  8     1 [126..129)-> BB12 ( cond )                     keep i gcsafe bwd cfb 
BB11 [0042]  1       BB10                  4     1 [129..130)                                     i hascall gcsafe bwd 
BB12 [0016]  2       BB10,BB11             8     1 [130..139)-> BB08 (always)                     i hascall gcsafe bwd 
BB13 [0030]  1       BB09                  1       [???..???)-> BB30 (callf )                     i internal gcsafe 
BB14 [0031]  1       BB32                  1       [???..???)-> BB15 (ALWAYS)                     i internal gcsafe KEEP 
BB15 [0017]  1       BB14                  1       [139..17D)                                     i hascall gcsafe 
BB16 [0045]  2       BB15,BB25             1     2 [???..???)                                     internal gcsafe 
BB17 [0046]  2       BB16,BB24             1     3 [???..???)                                     internal gcsafe 
BB18 [0047]  2       BB17,BB22             1     4 [???..???)                                     internal gcsafe 
BB19 [0018]  2       BB18,BB20             8     5 [17D..18F)-> BB21 ( cond )                     i Loop hascall gcsafe bwd bwd-target align 
BB20 [0019]  1       BB19                  8     5 [18F..19B)-> BB19 (always)                     i hascall gcsafe bwd 
BB21 [0020]  1       BB19                  1     4 [19B..1A6)-> BB23 ( cond )                     i gcsafe bwd 
BB22 [0021]  1       BB21                  1     4 [1A6..1AD)-> BB18 (always)                     i hascall gcsafe bwd 
BB23 [0022]  1       BB21                  1     3 [1AD..1B8)-> BB25 ( cond )                     i gcsafe bwd 
BB24 [0023]  1       BB23                  1     3 [1B8..1C1)-> BB17 (always)                     i gcsafe bwd 
BB25 [0024]  1       BB23                  1     2 [1C1..1CC)-> BB16 ( cond )                     i gcsafe bwd 
BB26 [0025]  1       BB25                  1       [1CC..1D4)        (return)                     i gcsafe 
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ funclets follow
BB27 [0003]  1     0                       0       [0CA..0CD)-> BB29 ( cond )    H0 F fault {     keep i rare flet bwd 
BB28 [0004]  1     0 BB27                  0       [0CD..0D3)                    H0               i rare hascall bwd 
BB29 [0005]  2     0 BB27,BB28             0       [0D3..0D4)        (finret)    H0   }           i rare bwd 
BB30 [0013]  2     1 BB13                  1       [126..129)-> BB32 ( cond )    H1 F finally {   keep i gcsafe flet bwd 
BB31 [0014]  1     1 BB30                  1       [129..12F)                    H1               i hascall gcsafe bwd 
BB32 [0015]  2     1 BB30,BB31             1       [12F..130)        (finret)    H1   }           i gcsafe bwd 
-----------------------------------------------------------------------------------------------------------------------------------------

***************  Exception Handling table
index  eTry, eHnd
  0  ::            - Try at BB03..BB03 [07B..0CA), Fault   at BB27..BB29 [0CA..0D4)
  1  ::            - Try at BB09..BB09 [102..126), Finally at BB30..BB32 [126..130)
[SsaBuilder] Topologically sorted the graph.
[SsaBuilder::ComputeImmediateDom]

Inside fgBuildDomTree

After computing the Dominance Tree:
BB01 : BB07 BB02 
BB02 : BB27 BB03 
BB03 : BB04 
BB04 : BB06 BB05 
BB07 : BB08 
BB08 : BB30 BB09 
BB09 : BB13 BB10 
BB10 : BB12 BB11 
BB14 : BB15 
BB15 : BB16 
BB16 : BB17 
BB17 : BB18 
BB18 : BB19 
BB19 : BB21 BB20 
BB21 : BB23 BB22 
BB23 : BB25 BB24 
BB25 : BB26 
BB27 : BB29 BB28 
BB30 : BB32 BB31 
BB32 : BB14 

*************** In fgLocalVarLiveness()
In fgLocalVarLivenessInit

Local V17 should not be enregistered because: field of a dependently promoted struct

Local V18 should not be enregistered because: field of a dependently promoted struct

Local V19 should not be enregistered because: field of a dependently promoted struct

Local V20 should not be enregistered because: field of a dependently promoted struct
Tracked variable (17 out of 27) table:
V00 this          [   ref]: refCnt =   15, refCntWtd =  71   
V13 tmp6          [   ref]: refCnt =    3, refCntWtd =  48   
V15 tmp8          [   ref]: refCnt =    3, refCntWtd =  48   
V04 loc2          [   ref]: refCnt =    8, refCntWtd =  41   
V14 tmp7          [   ref]: refCnt =    2, refCntWtd =  32   
V16 tmp9          [   ref]: refCnt =    2, refCntWtd =  32   
V03 loc1          [   int]: refCnt =    5, refCntWtd =  26   
V08 tmp1          [   ref]: refCnt =    3, refCntWtd =   6   
V09 tmp2          [   ref]: refCnt =    3, refCntWtd =   6   
V11 tmp4          [   ref]: refCnt =    3, refCntWtd =   6   
V12 tmp5          [   ref]: refCnt =    3, refCntWtd =   6   
V10 tmp3          [   ref]: refCnt =    2, refCntWtd =   4   
V21 tmp14         [   ref]: refCnt =    2, refCntWtd =   4   
V22 tmp15         [   ref]: refCnt =    2, refCntWtd =   4   
V23 tmp16         [   ref]: refCnt =    2, refCntWtd =   4   
V24 tmp17         [   ref]: refCnt =    2, refCntWtd =   4   
V26 tmp19         [   ref]: refCnt =    1, refCntWtd =   1   

*************** In fgPerBlockLocalVarLiveness()
BB01 USE(1)={V00                                    } + ByrefExposed + GcHeap
     DEF(9)={    V03 V08 V09 V11 V12 V10 V21 V22 V26} + ByrefExposed* + GcHeap*

BB02 USE(1)={V00    } + ByrefExposed + GcHeap
     DEF(1)={    V04} + ByrefExposed

BB03 USE(2)={V00         V04        } + ByrefExposed + GcHeap
     DEF(4)={    V13 V15     V14 V16} + ByrefExposed* + GcHeap*

BB04 USE(0)={} + ByrefExposed
     DEF(0)={}

BB05 USE(1)={V04} + ByrefExposed + GcHeap
     DEF(0)={   } + ByrefExposed* + GcHeap*

BB06 USE(1)={V03}
     DEF(1)={V03}

BB07 USE(0)={   } + ByrefExposed + GcHeap
     DEF(1)={V23} + ByrefExposed* + GcHeap*

BB08 USE(1)={V00    } + ByrefExposed + GcHeap
     DEF(1)={    V04} + ByrefExposed

BB09 USE(2)={V00 V04} + ByrefExposed + GcHeap
     DEF(0)={       } + ByrefExposed* + GcHeap*

BB10 USE(0)={} + ByrefExposed
     DEF(0)={}

BB11 USE(1)={V04} + ByrefExposed + GcHeap
     DEF(0)={   } + ByrefExposed* + GcHeap*

BB12 USE(0)={} + ByrefExposed + GcHeap
     DEF(0)={} + ByrefExposed* + GcHeap*

BB13 USE(0)={}
     DEF(0)={}

BB14 USE(0)={}
     DEF(0)={}

BB15 USE(0)={   } + ByrefExposed + GcHeap
     DEF(1)={V24} + ByrefExposed* + GcHeap*

BB16 USE(0)={}
     DEF(0)={}

BB17 USE(0)={}
     DEF(0)={}

BB18 USE(0)={}
     DEF(0)={}

BB19 USE(0)={} + ByrefExposed + GcHeap
     DEF(0)={} + ByrefExposed* + GcHeap*

BB20 USE(0)={} + ByrefExposed + GcHeap
     DEF(0)={} + ByrefExposed* + GcHeap*

BB21 USE(0)={} + ByrefExposed
     DEF(0)={}

BB22 USE(0)={} + ByrefExposed + GcHeap
     DEF(0)={} + ByrefExposed* + GcHeap*

BB23 USE(0)={} + ByrefExposed
     DEF(0)={}

BB24 USE(1)={V00} + ByrefExposed + GcHeap
     DEF(0)={   } + ByrefExposed + GcHeap

BB25 USE(0)={} + ByrefExposed
     DEF(0)={}

BB26 USE(1)={V00} + ByrefExposed + GcHeap
     DEF(0)={   } + ByrefExposed + GcHeap

BB27 USE(0)={} + ByrefExposed
     DEF(0)={}

BB28 USE(1)={V04} + ByrefExposed + GcHeap
     DEF(0)={   } + ByrefExposed* + GcHeap*

BB29 USE(0)={}
     DEF(0)={}

BB30 USE(0)={} + ByrefExposed
     DEF(0)={}

BB31 USE(1)={V04} + ByrefExposed + GcHeap
     DEF(0)={   } + ByrefExposed* + GcHeap*

BB32 USE(0)={}
     DEF(0)={}

** Memory liveness computed, GcHeap states and ByrefExposed states diverge
*************** In fgInterBlockLocalVarLiveness()

BB liveness after fgLiveVarAnalysis():

BB01 IN (1)={V00    } + ByrefExposed + GcHeap
     OUT(2)={V00 V03} + ByrefExposed + GcHeap

BB02 IN (2)={V00     V03} + ByrefExposed + GcHeap
     OUT(3)={V00 V04 V03} + ByrefExposed + GcHeap

BB03 IN (3)={V00 V04 V03} + ByrefExposed + GcHeap
     OUT(3)={V00 V04 V03} + ByrefExposed + GcHeap

BB04 IN (3)={V00 V04 V03} + ByrefExposed + GcHeap
     OUT(3)={V00 V04 V03} + ByrefExposed + GcHeap

BB05 IN (3)={V00 V04 V03} + ByrefExposed + GcHeap
     OUT(2)={V00     V03} + ByrefExposed + GcHeap

BB06 IN (2)={V00 V03} + ByrefExposed + GcHeap
     OUT(2)={V00 V03} + ByrefExposed + GcHeap

BB07 IN (1)={V00} + ByrefExposed + GcHeap
     OUT(1)={V00} + ByrefExposed + GcHeap

BB08 IN (1)={V00    } + ByrefExposed + GcHeap
     OUT(2)={V00 V04} + ByrefExposed + GcHeap

BB09 IN (2)={V00 V04} + ByrefExposed + GcHeap
     OUT(2)={V00 V04} + ByrefExposed + GcHeap

BB10 IN (2)={V00 V04} + ByrefExposed + GcHeap
     OUT(2)={V00 V04} + ByrefExposed + GcHeap

BB11 IN (2)={V00 V04} + ByrefExposed + GcHeap
     OUT(1)={V00    } + ByrefExposed + GcHeap

BB12 IN (1)={V00} + ByrefExposed + GcHeap
     OUT(1)={V00} + ByrefExposed + GcHeap

BB13 IN (2)={V00 V04} + ByrefExposed + GcHeap
     OUT(2)={V00 V04} + ByrefExposed + GcHeap

BB14 IN (1)={V00} + ByrefExposed + GcHeap
     OUT(1)={V00} + ByrefExposed + GcHeap

BB15 IN (1)={V00} + ByrefExposed + GcHeap
     OUT(1)={V00} + ByrefExposed + GcHeap

BB16 IN (1)={V00} + ByrefExposed + GcHeap
     OUT(1)={V00} + ByrefExposed + GcHeap

BB17 IN (1)={V00} + ByrefExposed + GcHeap
     OUT(1)={V00} + ByrefExposed + GcHeap

BB18 IN (1)={V00} + ByrefExposed + GcHeap
     OUT(1)={V00} + ByrefExposed + GcHeap

BB19 IN (1)={V00} + ByrefExposed + GcHeap
     OUT(1)={V00} + ByrefExposed + GcHeap

BB20 IN (1)={V00} + ByrefExposed + GcHeap
     OUT(1)={V00} + ByrefExposed + GcHeap

BB21 IN (1)={V00} + ByrefExposed + GcHeap
     OUT(1)={V00} + ByrefExposed + GcHeap

BB22 IN (1)={V00} + ByrefExposed + GcHeap
     OUT(1)={V00} + ByrefExposed + GcHeap

BB23 IN (1)={V00} + ByrefExposed + GcHeap
     OUT(1)={V00} + ByrefExposed + GcHeap

BB24 IN (1)={V00} + ByrefExposed + GcHeap
     OUT(1)={V00} + ByrefExposed + GcHeap

BB25 IN (1)={V00} + ByrefExposed + GcHeap
     OUT(1)={V00} + ByrefExposed + GcHeap

BB26 IN (1)={V00} + ByrefExposed + GcHeap
     OUT(0)={   }

BB27 IN (1)={V04} + ByrefExposed + GcHeap
     OUT(1)={V04} + ByrefExposed + GcHeap

BB28 IN (1)={V04} + ByrefExposed + GcHeap
     OUT(0)={   }

BB29 IN (0)={}
     OUT(0)={}

BB30 IN (2)={V00 V04} + ByrefExposed + GcHeap
     OUT(2)={V00 V04} + ByrefExposed + GcHeap

BB31 IN (2)={V00 V04} + ByrefExposed + GcHeap
     OUT(1)={V00    } + ByrefExposed + GcHeap

BB32 IN (1)={V00} + ByrefExposed + GcHeap
     OUT(1)={V00} + ByrefExposed + GcHeap


Local V04 should not be enregistered because: live in/out of a handler
top level assign
removing stmt with no side effects

removing useless STMT00073 (IL   ???...  ???)
N003 (  5,  4) [000396] -A------R---              *  ASG       ref   
N002 (  3,  2) [000395] D------N----              +--*  LCL_VAR   ref    V26 tmp19        
N001 (  1,  1) [000394] ------------              \--*  LCL_VAR   ref    V00 this         
 from BB01
*************** In optRemoveRedundantZeroInits()
Marking L02 as having an explicit init
Marking L03 as having an explicit init
*************** In SsaBuilder::InsertPhiFunctions()
Inserting phi functions:
Inserting phi definition for ByrefExposed at start of BB08.
Inserting phi definition for GcHeap at start of BB08.
Inserting phi definition for ByrefExposed at start of BB12.
Inserting phi definition for GcHeap at start of BB12.
Inserting phi definition for ByrefExposed at start of BB19.
Inserting phi definition for GcHeap at start of BB19.
Inserting phi definition for ByrefExposed at start of BB18.
Inserting phi definition for GcHeap at start of BB18.
Inserting phi definition for ByrefExposed at start of BB17.
Inserting phi definition for GcHeap at start of BB17.
Inserting phi definition for ByrefExposed at start of BB16.
Inserting phi definition for GcHeap at start of BB16.
Inserting phi definition for ByrefExposed at start of BB32.
Inserting phi definition for GcHeap at start of BB32.
Inserting phi definition for ByrefExposed at start of BB30.
Inserting phi definition for GcHeap at start of BB30.
Added PHI definition for V03 at start of BB02.
Inserting phi definition for ByrefExposed at start of BB06.
Inserting phi definition for GcHeap at start of BB06.
Inserting phi definition for ByrefExposed at start of BB07.
Inserting phi definition for GcHeap at start of BB07.
Inserting phi definition for ByrefExposed at start of BB02.
Inserting phi definition for GcHeap at start of BB02.
Inserting phi definition for ByrefExposed at start of BB27.
Inserting phi definition for GcHeap at start of BB27.
*************** In SsaBuilder::RenameVariables()

After fgSsaBuild:

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..072)-> BB07 ( cond )                     i hascall gcsafe newobj 
BB02 [0001]  2       BB01,BB06             8     0 [072..07B)                                     i Loop gcsafe bwd bwd-target align 
BB03 [0002]  1  0    BB02                  8     0 [07B..0CA)                 T0      try { }     keep i try hascall gcsafe newobj bwd 
BB04 [0038]  1       BB03                  8     0 [0CA..0CD)-> BB06 ( cond )                     keep i gcsafe bwd cfb 
BB05 [0039]  1       BB04                  4     0 [0CD..0D4)                                     i hascall gcsafe bwd 
BB06 [0006]  2       BB04,BB05             8     0 [0D4..0DD)-> BB02 ( cond )                     i gcsafe bwd 
BB07 [0008]  2       BB01,BB06             1       [0DD..0F9)                                     i hascall gcsafe 
BB08 [0009]  2       BB07,BB12             8     1 [0F9..102)                                     i Loop gcsafe bwd bwd-target align 
BB09 [0010]  1  1    BB08                  8     1 [102..122)-> BB13 ( cond ) T1      try { }     keep i try hascall gcsafe bwd 
BB10 [0041]  1       BB09                  8     1 [126..129)-> BB12 ( cond )                     keep i gcsafe bwd cfb 
BB11 [0042]  1       BB10                  4     1 [129..130)                                     i hascall gcsafe bwd 
BB12 [0016]  2       BB10,BB11             8     1 [130..139)-> BB08 (always)                     i hascall gcsafe bwd 
BB13 [0030]  1       BB09                  1       [???..???)-> BB30 (callf )                     i internal gcsafe 
BB14 [0031]  1       BB32                  1       [???..???)-> BB15 (ALWAYS)                     i internal gcsafe KEEP 
BB15 [0017]  1       BB14                  1       [139..17D)                                     i hascall gcsafe 
BB16 [0045]  2       BB15,BB25             1     2 [???..???)                                     internal gcsafe 
BB17 [0046]  2       BB16,BB24             1     3 [???..???)                                     internal gcsafe 
BB18 [0047]  2       BB17,BB22             1     4 [???..???)                                     internal gcsafe 
BB19 [0018]  2       BB18,BB20             8     5 [17D..18F)-> BB21 ( cond )                     i Loop hascall gcsafe bwd bwd-target align 
BB20 [0019]  1       BB19                  8     5 [18F..19B)-> BB19 (always)                     i hascall gcsafe bwd 
BB21 [0020]  1       BB19                  1     4 [19B..1A6)-> BB23 ( cond )                     i gcsafe bwd 
BB22 [0021]  1       BB21                  1     4 [1A6..1AD)-> BB18 (always)                     i hascall gcsafe bwd 
BB23 [0022]  1       BB21                  1     3 [1AD..1B8)-> BB25 ( cond )                     i gcsafe bwd 
BB24 [0023]  1       BB23                  1     3 [1B8..1C1)-> BB17 (always)                     i gcsafe bwd 
BB25 [0024]  1       BB23                  1     2 [1C1..1CC)-> BB16 ( cond )                     i gcsafe bwd 
BB26 [0025]  1       BB25                  1       [1CC..1D4)        (return)                     i gcsafe 
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ funclets follow
BB27 [0003]  1     0                       0       [0CA..0CD)-> BB29 ( cond )    H0 F fault {     keep i rare flet bwd 
BB28 [0004]  1     0 BB27                  0       [0CD..0D3)                    H0               i rare hascall bwd 
BB29 [0005]  2     0 BB27,BB28             0       [0D3..0D4)        (finret)    H0   }           i rare bwd 
BB30 [0013]  2     1 BB13                  1       [126..129)-> BB32 ( cond )    H1 F finally {   keep i gcsafe flet bwd 
BB31 [0014]  1     1 BB30                  1       [129..12F)                    H1               i hascall gcsafe bwd 
BB32 [0015]  2     1 BB30,BB31             1       [12F..130)        (finret)    H1   }           i gcsafe bwd 
-----------------------------------------------------------------------------------------------------------------------------------------

------------ BB01 [000..072) -> BB07 (cond), preds={} succs={BB02,BB07}

***** BB01
STMT00000 (IL 0x000...0x005)
N003 ( 18,  8) [000003] -ACXG---R---              *  ASG       struct (copy)
N002 (  3,  2) [000001] D---G--N----              +--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  +--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
N001 ( 14,  5) [000000] --CXG-------              \--*  CALL      struct System.DateTime.get_Now

***** BB01
STMT00001 (IL 0x006...0x022)
N013 ( 53, 36) [000009] --CXG-------              *  CALL      void   System.Console.WriteLine
N012 ( 39, 30) [000008] --CXG------- arg0 in rcx  \--*  CALL      ref    System.String.Concat
N007 ( 17, 10) [000272] -ACXG---R-L- arg0 SETUP      +--*  ASG       ref   
N006 (  1,  1) [000271] D------N----                 |  +--*  LCL_VAR   ref    V21 tmp14        d:2
N005 ( 17, 10) [000006] --CXG-------                 |  \--*  CALL      ref    System.DateTime.ToString
N004 (  3,  3) [000005] ------------ this in rcx     |     \--*  ADDR      byref 
N003 (  3,  2) [000004] ----G--N----                 |        \--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                     |        \--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
N009 (  1,  1) [000273] ------------ arg0 in rcx     +--*  LCL_VAR   ref    V21 tmp14        u:2 (last use)
N011 (  4, 12) [000270] #---G------- arg1 in rdx     \--*  IND       ref   
N010 (  2, 10) [000269] H-----------                    \--*  CNS_INT(h) long   0x750031F0 "	 Created list"

***** BB01
STMT00002 (IL 0x01C...  ???)
N005 ( 16, 16) [000014] -AC-----R---              *  ASG       ref   
N004 (  1,  1) [000013] D------N----              +--*  LCL_VAR   ref    V08 tmp1         d:2
N003 ( 16, 16) [000012] --C---------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
N002 (  2, 10) [000011] H----------- arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb3ee2350 method

***** BB01
STMT00003 (IL   ???...  ???)
N003 ( 15,  8) [000016] --CXG-------              *  CALL      void   FalseLeakRepro.List..ctor
N002 (  1,  1) [000015] ------------ this in rcx  \--*  LCL_VAR   ref    V08 tmp1         u:2

***** BB01
STMT00004 (IL 0x022...  ???)
N006 (  6,  6) [000019] -A-XG-------              *  ASG       ref   
N004 (  4,  4) [000018] D--XG--N----              +--*  IND       ref   
N003 (  2,  2) [000279] -------N----              |  \--*  ADD       byref 
N001 (  1,  1) [000010] ------------              |     +--*  LCL_VAR   ref    V00 this         u:1
N002 (  1,  1) [000278] ------------              |     \--*  CNS_INT   long   8 field offset Fseq[_myList]
N005 (  1,  1) [000017] ------------              \--*  LCL_VAR   ref    V08 tmp1         u:2 (last use)

***** BB01
STMT00005 (IL 0x027...0x037)
N005 ( 16, 16) [000026] -AC-----R---              *  ASG       ref   
N004 (  1,  1) [000025] D------N----              +--*  LCL_VAR   ref    V09 tmp2         d:2
N003 ( 16, 16) [000024] --C---------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
N002 (  2, 10) [000023] H----------- arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb3b058b8 token

***** BB01
STMT00007 (IL   ???...  ???)
N009 (  7,  7) [000030] -A-XG---R---              *  ASG       ref   
N008 (  1,  1) [000029] D------N----              +--*  LCL_VAR   ref    V10 tmp3         d:2
N007 (  7,  7) [000022] ---XG-------              \--*  IND       ref   
N006 (  5,  5) [000282] ---XG--N----                 \--*  ADD       byref 
N004 (  4,  4) [000021] ---XG-------                    +--*  IND       ref   
N003 (  2,  2) [000284] -------N----                    |  \--*  ADD       byref 
N001 (  1,  1) [000020] ------------                    |     +--*  LCL_VAR   ref    V00 this         u:1
N002 (  1,  1) [000283] ------------                    |     \--*  CNS_INT   long   8 field offset Fseq[_myList]
N005 (  1,  1) [000281] ------------                    \--*  CNS_INT   long   8 field offset Fseq[Head]

***** BB01
STMT00006 (IL   ???...  ???)
N003 ( 15,  8) [000028] --CXG-------              *  CALL      void   System.Object..ctor
N002 (  1,  1) [000027] ------------ this in rcx  \--*  LCL_VAR   ref    V09 tmp2         u:2

***** BB01
STMT00008 (IL 0x037...  ???)
N006 (  6,  6) [000034] -A-XG-------              *  ASG       ref   
N004 (  4,  4) [000033] D--XG--N----              +--*  IND       ref   
N003 (  2,  2) [000287] -------N----              |  \--*  ADD       byref 
N001 (  1,  1) [000031] ------------              |     +--*  LCL_VAR   ref    V10 tmp3         u:2 (last use)
N002 (  1,  1) [000286] ------------              |     \--*  CNS_INT   long   16 field offset Fseq[Data]
N005 (  1,  1) [000032] ------------              \--*  LCL_VAR   ref    V09 tmp2         u:2 (last use)

***** BB01
STMT00009 (IL 0x03C...0x057)
N005 ( 16, 16) [000040] -AC-----R---              *  ASG       ref   
N004 (  1,  1) [000039] D------N----              +--*  LCL_VAR   ref    V11 tmp4         d:2
N003 ( 16, 16) [000038] --C---------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
N002 (  2, 10) [000037] H----------- arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb3ee6200 token

***** BB01
STMT00010 (IL   ???...  ???)
N007 ( 18, 21) [000042] --CXG-------              *  CALL      void   System.MulticastDelegate.CtorClosed
N004 (  1,  1) [000041] ------------ this in rcx  +--*  LCL_VAR   ref    V11 tmp4         u:2
N005 (  1,  1) [000035] ------------ arg1 in rdx  +--*  LCL_VAR   ref    V00 this         u:1
N006 (  2, 10) [000036] H----------- arg2 in r8   \--*  CNS_INT(h) long   0x7ffdb3b213f8 ftn

***** BB01
STMT00011 (IL 0x048...  ???)
N005 ( 16, 16) [000047] -AC-----R---              *  ASG       ref   
N004 (  1,  1) [000046] D------N----              +--*  LCL_VAR   ref    V12 tmp5         d:2
N003 ( 16, 16) [000045] --C---------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWFAST
N002 (  2, 10) [000044] H----------- arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb3c84e80 token

***** BB01
STMT00012 (IL   ???...  ???)
N005 ( 16, 10) [000049] --CXG-------              *  CALL      void   System.Threading.Thread..ctor
N003 (  1,  1) [000048] ------------ this in rcx  +--*  LCL_VAR   ref    V12 tmp5         u:2
N004 (  1,  1) [000043] ------------ arg1 in rdx  \--*  LCL_VAR   ref    V11 tmp4         u:2 (last use)

***** BB01
STMT00013 (IL 0x04D...  ???)
N003 ( 15,  8) [000051] --CXG-------              *  CALL nullcheck void   System.Threading.Thread.Start
N002 (  1,  1) [000050] ------------ this in rcx  \--*  LCL_VAR   ref    V12 tmp5         u:2 (last use)

***** BB01
STMT00014 (IL 0x052...  ???)
N003 ( 18,  8) [000055] -ACXG---R---              *  ASG       struct (copy)
N002 (  3,  2) [000053] D---G--N----              +--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  +--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
N001 ( 14,  5) [000052] --CXG-------              \--*  CALL      struct System.DateTime.get_Now

***** BB01
STMT00015 (IL 0x058...0x06F)
N013 ( 53, 36) [000061] --CXG-------              *  CALL      void   System.Console.WriteLine
N012 ( 39, 30) [000060] --CXG------- arg0 in rcx  \--*  CALL      ref    System.String.Concat
N007 ( 17, 10) [000300] -ACXG---R-L- arg0 SETUP      +--*  ASG       ref   
N006 (  1,  1) [000299] D------N----                 |  +--*  LCL_VAR   ref    V22 tmp15        d:2
N005 ( 17, 10) [000058] --CXG-------                 |  \--*  CALL      ref    System.DateTime.ToString
N004 (  3,  3) [000057] ------------ this in rcx     |     \--*  ADDR      byref 
N003 (  3,  2) [000056] ----G--N----                 |        \--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                     |        \--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
N009 (  1,  1) [000301] ------------ arg0 in rcx     +--*  LCL_VAR   ref    V22 tmp15        u:2 (last use)
N011 (  4, 12) [000298] #---G------- arg1 in rdx     \--*  IND       ref   
N010 (  2, 10) [000297] H-----------                    \--*  CNS_INT(h) long   0x750031F8 "	 Consumer thread started, adding items..."

***** BB01
STMT00016 (IL 0x06E...  ???)
N003 (  1,  3) [000064] -A------R---              *  ASG       int   
N002 (  1,  1) [000063] D------N----              +--*  LCL_VAR   int    V03 loc1         d:2
N001 (  1,  1) [000062] ------------              \--*  CNS_INT   int    0

***** BB01
STMT00072 (IL 0x0D8...  ???)
N004 (  5,  5) [000390] ------------              *  JTRUE     void  
N003 (  3,  3) [000391] J------N----              \--*  GE        int   
N001 (  1,  1) [000392] ------------                 +--*  LCL_VAR   int    V03 loc1         u:2
N002 (  1,  1) [000393] ------------                 \--*  CNS_INT   int    10

------------ BB02 [072..07B), preds={BB01,BB06} succs={BB03}

***** BB02
STMT00074 (IL   ???...  ???)
N005 (  0,  0) [000399] -A------R---              *  ASG       int   
N004 (  0,  0) [000397] D------N----              +--*  LCL_VAR   int    V03 loc1         d:3
N003 (  0,  0) [000398] ------------              \--*  PHI       int   
N001 (  0,  0) [000401] ------------ pred BB06       +--*  PHI_ARG   int    V03 loc1         u:4
N002 (  0,  0) [000400] ------------ pred BB01       \--*  PHI_ARG   int    V03 loc1         u:2

***** BB02
STMT00018 (IL 0x072...0x078)
N006 (  4,  4) [000072] -A-XG---R---              *  ASG       ref   
N005 (  1,  1) [000071] D------N----              +--*  LCL_VAR   ref    V04 loc2         d:3
N004 (  4,  4) [000070] ---XG-------              \--*  IND       ref   
N003 (  2,  2) [000305] -------N----                 \--*  ADD       byref 
N001 (  1,  1) [000069] ------------                    +--*  LCL_VAR   ref    V00 this         u:1
N002 (  1,  1) [000304] ------------                    \--*  CNS_INT   long   8 field offset Fseq[_myList]

***** BB02
STMT00019 (IL 0x079...0x07A)
N003 (  5,  4) [000075] -A--G---R---              *  ASG       int   
N002 (  3,  2) [000074] D---G--N----              +--*  LCL_VAR   int   (AX) V05 loc3         
N001 (  1,  1) [000073] ------------              \--*  CNS_INT   int    0

------------ BB03 [07B..0CA), preds={BB02} succs={BB04}

***** BB03
STMT00020 (IL 0x07B...0x093)
N005 ( 18, 11) [000079] --CXG-------              *  CALL      void   System.Threading.Monitor.Enter
N003 (  3,  3) [000078] ------------ arg1 in rdx  +--*  LCL_VAR_ADDR long   V05 loc3         
N004 (  1,  1) [000076] ------------ arg0 in rcx  \--*  LCL_VAR   ref    V04 loc2         u:3

***** BB03
STMT00021 (IL 0x083...  ???)
N005 ( 16, 16) [000086] -AC-----R---              *  ASG       ref   
N004 (  1,  1) [000085] D------N----              +--*  LCL_VAR   ref    V13 tmp6         d:2
N003 ( 16, 16) [000084] --C---------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
N002 (  2, 10) [000083] H----------- arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb3ee58a8 method

***** BB03
STMT00023 (IL   ???...  ???)
N009 (  7,  7) [000090] -A-XG---R---              *  ASG       ref   
N008 (  1,  1) [000089] D------N----              +--*  LCL_VAR   ref    V14 tmp7         d:2
N007 (  7,  7) [000082] ---XG-------              \--*  IND       ref   
N006 (  5,  5) [000310] ---XG--N----                 \--*  ADD       byref 
N004 (  4,  4) [000081] ---XG-------                    +--*  IND       ref   
N003 (  2,  2) [000312] -------N----                    |  \--*  ADD       byref 
N001 (  1,  1) [000080] ------------                    |     +--*  LCL_VAR   ref    V00 this         u:1
N002 (  1,  1) [000311] ------------                    |     \--*  CNS_INT   long   8 field offset Fseq[_myList]
N005 (  1,  1) [000309] ------------                    \--*  CNS_INT   long   8 field offset Fseq[Head]

***** BB03
STMT00065 (IL   ???...  ???)
N003 ( 15,  8) [000230] --CXG-------              *  CALL      void   System.Object..ctor
N002 (  1,  1) [000087] ------------ this in rcx  \--*  LCL_VAR   ref    V13 tmp6         u:2

***** BB03
STMT00024 (IL 0x093...  ???)
N006 (  6,  6) [000094] -A-XG-------              *  ASG       ref   
N004 (  4,  4) [000093] D--XG--N----              +--*  IND       ref   
N003 (  2,  2) [000315] -------N----              |  \--*  ADD       byref 
N001 (  1,  1) [000091] ------------              |     +--*  LCL_VAR   ref    V14 tmp7         u:2 (last use)
N002 (  1,  1) [000314] ------------              |     \--*  CNS_INT   long   8 field offset Fseq[Next]
N005 (  1,  1) [000092] ------------              \--*  LCL_VAR   ref    V13 tmp6         u:2 (last use)

***** BB03
STMT00025 (IL 0x098...0x0AE)
N018 ( 18, 18) [000102] -A-XG-------              *  ASG       ref   
N007 (  7,  7) [000101] D--XG--N----              +--*  IND       ref   
N006 (  5,  5) [000317] ---XG--N----              |  \--*  ADD       byref 
N004 (  4,  4) [000096] ---XG-------              |     +--*  IND       ref   
N003 (  2,  2) [000319] -------N----              |     |  \--*  ADD       byref 
N001 (  1,  1) [000095] ------------              |     |     +--*  LCL_VAR   ref    V00 this         u:1
N002 (  1,  1) [000318] ------------              |     |     \--*  CNS_INT   long   8 field offset Fseq[_myList]
N005 (  1,  1) [000316] ------------              |     \--*  CNS_INT   long   8 field offset Fseq[Head]
N017 ( 10, 10) [000100] ---XG-------              \--*  IND       ref   
N016 (  8,  8) [000321] ---XG--N----                 \--*  ADD       byref 
N014 (  7,  7) [000099] ---XG-------                    +--*  IND       ref   
N013 (  5,  5) [000323] ---XG--N----                    |  \--*  ADD       byref 
N011 (  4,  4) [000098] ---XG-------                    |     +--*  IND       ref   
N010 (  2,  2) [000325] -------N----                    |     |  \--*  ADD       byref 
N008 (  1,  1) [000097] ------------                    |     |     +--*  LCL_VAR   ref    V00 this         u:1
N009 (  1,  1) [000324] ------------                    |     |     \--*  CNS_INT   long   8 field offset Fseq[_myList]
N012 (  1,  1) [000322] ------------                    |     \--*  CNS_INT   long   8 field offset Fseq[Head]
N015 (  1,  1) [000320] ------------                    \--*  CNS_INT   long   8 field offset Fseq[Next]

***** BB03
STMT00026 (IL 0x0B3...0x0C3)
N005 ( 16, 16) [000109] -AC-----R---              *  ASG       ref   
N004 (  1,  1) [000108] D------N----              +--*  LCL_VAR   ref    V15 tmp8         d:2
N003 ( 16, 16) [000107] --C---------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
N002 (  2, 10) [000106] H----------- arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb3b058b8 token

***** BB03
STMT00028 (IL   ???...  ???)
N009 (  7,  7) [000113] -A-XG---R---              *  ASG       ref   
N008 (  1,  1) [000112] D------N----              +--*  LCL_VAR   ref    V16 tmp9         d:2
N007 (  7,  7) [000105] ---XG-------              \--*  IND       ref   
N006 (  5,  5) [000328] ---XG--N----                 \--*  ADD       byref 
N004 (  4,  4) [000104] ---XG-------                    +--*  IND       ref   
N003 (  2,  2) [000330] -------N----                    |  \--*  ADD       byref 
N001 (  1,  1) [000103] ------------                    |     +--*  LCL_VAR   ref    V00 this         u:1
N002 (  1,  1) [000329] ------------                    |     \--*  CNS_INT   long   8 field offset Fseq[_myList]
N005 (  1,  1) [000327] ------------                    \--*  CNS_INT   long   8 field offset Fseq[Head]

***** BB03
STMT00027 (IL   ???...  ???)
N003 ( 15,  8) [000111] --CXG-------              *  CALL      void   System.Object..ctor
N002 (  1,  1) [000110] ------------ this in rcx  \--*  LCL_VAR   ref    V15 tmp8         u:2

***** BB03
STMT00029 (IL 0x0C3...  ???)
N006 (  6,  6) [000117] -A-XG-------              *  ASG       ref   
N004 (  4,  4) [000116] D--XG--N----              +--*  IND       ref   
N003 (  2,  2) [000333] -------N----              |  \--*  ADD       byref 
N001 (  1,  1) [000114] ------------              |     +--*  LCL_VAR   ref    V16 tmp9         u:2 (last use)
N002 (  1,  1) [000332] ------------              |     \--*  CNS_INT   long   16 field offset Fseq[Data]
N005 (  1,  1) [000115] ------------              \--*  LCL_VAR   ref    V15 tmp8         u:2 (last use)

------------ BB04 [0CA..0CD) -> BB06 (cond), preds={BB03} succs={BB05,BB06}

***** BB04
STMT00066 (IL   ???...  ???)
N005 (  8,  8) [000254] ----G-------              *  JTRUE     void  
N004 (  6,  6) [000255] J---G--N----              \--*  EQ        int   
N002 (  4,  4) [000334] ----G-------                 +--*  CAST      int <- bool <- int
N001 (  3,  2) [000256] ----G-------                 |  \--*  LCL_VAR   int   (AX) V05 loc3         
N003 (  1,  1) [000257] ------------                 \--*  CNS_INT   int    0

------------ BB05 [0CD..0D4), preds={BB04} succs={BB06}

***** BB05
STMT00067 (IL   ???...  ???)
N003 ( 15,  7) [000258] --CXG-------              *  CALL      void   System.Threading.Monitor.Exit
N002 (  1,  1) [000259] ------------ arg0 in rcx  \--*  LCL_VAR   ref    V04 loc2         u:3 (last use)

------------ BB06 [0D4..0DD) -> BB02 (cond), preds={BB04,BB05} succs={BB07,BB02}

***** BB06
STMT00030 (IL 0x0D4...0x0D7)
N005 (  3,  3) [000122] -A------R---              *  ASG       int   
N004 (  1,  1) [000121] D------N----              +--*  LCL_VAR   int    V03 loc1         d:4
N003 (  3,  3) [000120] ------------              \--*  ADD       int   
N001 (  1,  1) [000118] ------------                 +--*  LCL_VAR   int    V03 loc1         u:3 (last use)
N002 (  1,  1) [000119] ------------                 \--*  CNS_INT   int    1

***** BB06
STMT00017 (IL 0x0D8...0x0DB)
N004 (  5,  5) [000068] ------------              *  JTRUE     void  
N003 (  3,  3) [000067] J------N----              \--*  LT        int   
N001 (  1,  1) [000065] ------------                 +--*  LCL_VAR   int    V03 loc1         u:4
N002 (  1,  1) [000066] ------------                 \--*  CNS_INT   int    10

------------ BB07 [0DD..0F9), preds={BB01,BB06} succs={BB08}

***** BB07
STMT00034 (IL 0x0DD...0x0E2)
N003 ( 18,  8) [000133] -ACXG---R---              *  ASG       struct (copy)
N002 (  3,  2) [000131] D---G--N----              +--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  +--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
N001 ( 14,  5) [000130] --CXG-------              \--*  CALL      struct System.DateTime.get_Now

***** BB07
STMT00035 (IL 0x0E3...0x0F4)
N013 ( 53, 36) [000139] --CXG-------              *  CALL      void   System.Console.WriteLine
N012 ( 39, 30) [000138] --CXG------- arg0 in rcx  \--*  CALL      ref    System.String.Concat
N007 ( 17, 10) [000342] -ACXG---R-L- arg0 SETUP      +--*  ASG       ref   
N006 (  1,  1) [000341] D------N----                 |  +--*  LCL_VAR   ref    V23 tmp16        d:2
N005 ( 17, 10) [000136] --CXG-------                 |  \--*  CALL      ref    System.DateTime.ToString
N004 (  3,  3) [000135] ------------ this in rcx     |     \--*  ADDR      byref 
N003 (  3,  2) [000134] ----G--N----                 |        \--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                     |        \--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
N009 (  1,  1) [000343] ------------ arg0 in rcx     +--*  LCL_VAR   ref    V23 tmp16        u:2 (last use)
N011 (  4, 12) [000340] #---G------- arg1 in rdx     \--*  IND       ref   
N010 (  2, 10) [000339] H-----------                    \--*  CNS_INT(h) long   0x75003200 "	 Waiting for list processing to complete..."

------------ BB08 [0F9..102), preds={BB07,BB12} succs={BB09}

***** BB08
STMT00036 (IL 0x0F9...0x0FF)
N006 (  4,  4) [000143] -A-XG---R---              *  ASG       ref   
N005 (  1,  1) [000142] D------N----              +--*  LCL_VAR   ref    V04 loc2         d:2
N004 (  4,  4) [000141] ---XG-------              \--*  IND       ref   
N003 (  2,  2) [000347] -------N----                 \--*  ADD       byref 
N001 (  1,  1) [000140] ------------                    +--*  LCL_VAR   ref    V00 this         u:1
N002 (  1,  1) [000346] ------------                    \--*  CNS_INT   long   8 field offset Fseq[_myList]

***** BB08
STMT00037 (IL 0x100...0x101)
N003 (  5,  4) [000146] -A--G---R---              *  ASG       int   
N002 (  3,  2) [000145] D---G--N----              +--*  LCL_VAR   int   (AX) V05 loc3         
N001 (  1,  1) [000144] ------------              \--*  CNS_INT   int    0

------------ BB09 [102..122) -> BB13 (cond), preds={BB08} succs={BB10,BB13}

***** BB09
STMT00038 (IL 0x102...0x120)
N005 ( 18, 11) [000150] --CXG-------              *  CALL      void   System.Threading.Monitor.Enter
N003 (  3,  3) [000149] ------------ arg1 in rdx  +--*  LCL_VAR_ADDR long   V05 loc3         
N004 (  1,  1) [000147] ------------ arg0 in rcx  \--*  LCL_VAR   ref    V04 loc2         u:2

***** BB09
STMT00039 (IL 0x10A...  ???)
N016 ( 17, 17) [000158] ---XG-------              *  JTRUE     void  
N015 ( 15, 15) [000157] N--XG--N-U--              \--*  EQ        int   
N007 (  7,  7) [000153] ---XG-------                 +--*  IND       ref   
N006 (  5,  5) [000351] ---XG--N----                 |  \--*  ADD       byref 
N004 (  4,  4) [000152] ---XG-------                 |     +--*  IND       ref   
N003 (  2,  2) [000353] -------N----                 |     |  \--*  ADD       byref 
N001 (  1,  1) [000151] ------------                 |     |     +--*  LCL_VAR   ref    V00 this         u:1
N002 (  1,  1) [000352] ------------                 |     |     \--*  CNS_INT   long   8 field offset Fseq[_myList]
N005 (  1,  1) [000350] ------------                 |     \--*  CNS_INT   long   8 field offset Fseq[Head]
N014 (  7,  7) [000156] ---XG-------                 \--*  IND       ref   
N013 (  5,  5) [000355] ---XG--N----                    \--*  ADD       byref 
N011 (  4,  4) [000155] ---XG-------                       +--*  IND       ref   
N010 (  2,  2) [000357] -------N----                       |  \--*  ADD       byref 
N008 (  1,  1) [000154] ------------                       |     +--*  LCL_VAR   ref    V00 this         u:1
N009 (  1,  1) [000356] ------------                       |     \--*  CNS_INT   long   8 field offset Fseq[_myList]
N012 (  1,  1) [000354] ------------                       \--*  CNS_INT   long   16 field offset Fseq[Tail]

------------ BB10 [126..129) -> BB12 (cond), preds={BB09} succs={BB11,BB12}

***** BB10
STMT00069 (IL   ???...  ???)
N005 (  8,  8) [000261] ----G-------              *  JTRUE     void  
N004 (  6,  6) [000262] J---G--N----              \--*  EQ        int   
N002 (  4,  4) [000358] ----G-------                 +--*  CAST      int <- bool <- int
N001 (  3,  2) [000263] ----G-------                 |  \--*  LCL_VAR   int   (AX) V05 loc3         
N003 (  1,  1) [000264] ------------                 \--*  CNS_INT   int    0

------------ BB11 [129..130), preds={BB10} succs={BB12}

***** BB11
STMT00070 (IL   ???...  ???)
N003 ( 15,  7) [000265] --CXG-------              *  CALL      void   System.Threading.Monitor.Exit
N002 (  1,  1) [000266] ------------ arg0 in rcx  \--*  LCL_VAR   ref    V04 loc2         u:2 (last use)

------------ BB12 [130..139) -> BB08 (always), preds={BB10,BB11} succs={BB08}

***** BB12
STMT00040 (IL 0x130...0x137)
N003 ( 15,  7) [000160] --CXG-------              *  CALL      void   System.Threading.Thread.Sleep
N002 (  1,  1) [000159] ------------ arg0 in rcx  \--*  CNS_INT   int    100

------------ BB13 [???..???) -> BB30 (callf), preds={BB09} succs={BB30}

------------ BB14 [???..???) -> BB15 (ALWAYS), preds={BB32} succs={BB15}

------------ BB15 [139..17D), preds={BB14} succs={BB16}

***** BB15
STMT00041 (IL 0x139...0x13E)
N003 ( 18,  8) [000164] -ACXG---R---              *  ASG       struct (copy)
N002 (  3,  2) [000162] D---G--N----              +--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  +--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
N001 ( 14,  5) [000161] --CXG-------              \--*  CALL      struct System.DateTime.get_Now

***** BB15
STMT00042 (IL 0x13F...0x178)
N013 ( 53, 36) [000170] --CXG-------              *  CALL      void   System.Console.WriteLine
N012 ( 39, 30) [000169] --CXG------- arg0 in rcx  \--*  CALL      ref    System.String.Concat
N007 ( 17, 10) [000367] -ACXG---R-L- arg0 SETUP      +--*  ASG       ref   
N006 (  1,  1) [000366] D------N----                 |  +--*  LCL_VAR   ref    V24 tmp17        d:2
N005 ( 17, 10) [000167] --CXG-------                 |  \--*  CALL      ref    System.DateTime.ToString
N004 (  3,  3) [000166] ------------ this in rcx     |     \--*  ADDR      byref 
N003 (  3,  2) [000165] ----G--N----                 |        \--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                     |        \--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
N009 (  1,  1) [000368] ------------ arg0 in rcx     +--*  LCL_VAR   ref    V24 tmp17        u:2 (last use)
N011 (  4, 12) [000365] #---G------- arg1 in rdx     \--*  IND       ref   
N010 (  2, 10) [000364] H-----------                    \--*  CNS_INT(h) long   0x75003208 "	 Done.  Profiler is active, available options:"

***** BB15
STMT00043 (IL 0x155...  ???)
N004 ( 18, 18) [000172] --CXG-------              *  CALL      void   System.Console.WriteLine
N003 (  4, 12) [000372] #---G------- arg0 in rcx  \--*  IND       ref   
N002 (  2, 10) [000371] H-----------                 \--*  CNS_INT(h) long   0x75003210 "   Q = quit"

***** BB15
STMT00044 (IL 0x15F...  ???)
N004 ( 18, 18) [000174] --CXG-------              *  CALL      void   System.Console.WriteLine
N003 (  4, 12) [000375] #---G------- arg0 in rcx  \--*  IND       ref   
N002 (  2, 10) [000374] H-----------                 \--*  CNS_INT(h) long   0x75003218 "   H = heap snapshot"

***** BB15
STMT00045 (IL 0x169...  ???)
N004 ( 18, 18) [000176] --CXG-------              *  CALL      void   System.Console.WriteLine
N003 (  4, 12) [000378] #---G------- arg0 in rcx  \--*  IND       ref   
N002 (  2, 10) [000377] H-----------                 \--*  CNS_INT(h) long   0x75003220 "   G = GC (max gen)"

***** BB15
STMT00046 (IL 0x173...  ???)
N004 ( 18, 18) [000178] --CXG-------              *  CALL      void   System.Console.WriteLine
N003 (  4, 12) [000381] #---G------- arg0 in rcx  \--*  IND       ref   
N002 (  2, 10) [000380] H-----------                 \--*  CNS_INT(h) long   0x75003228 "   R = clear the running flag to stop the consumer thread"

------------ BB16 [???..???), preds={BB15,BB25} succs={BB17}

------------ BB17 [???..???), preds={BB16,BB24} succs={BB18}

------------ BB18 [???..???), preds={BB17,BB22} succs={BB19}

------------ BB19 [17D..18F) -> BB21 (cond), preds={BB18,BB20} succs={BB20,BB21}

***** BB19
STMT00048 (IL   ???...  ???)
N006 ( 18, 11) [000233] S-CXG-------              *  CALL      void   System.ConsolePal.ReadKey
N004 (  3,  3) [000235] ------------ arg0 in rcx  +--*  ADDR      long  
N003 (  3,  2) [000236] ----G--N----              |  \--*  LCL_VAR   struct<System.ConsoleKeyInfo, 12>(AX)(P) V06 loc4         
                                                  |  \--*    ushort V06._keyChar (offs=0x00) -> V18 tmp11        
                                                  |  \--*    int    V06._key (offs=0x04) -> V19 tmp12        
                                                  |  \--*    int    V06._mods (offs=0x08) -> V20 tmp13        
N005 (  1,  1) [000232] ------------ arg1 in rdx  \--*  CNS_INT   int    0

***** BB19
STMT00050 (IL   ???...  ???)
N004 (  7,  6) [000189] ----G-------              *  JTRUE     void  
N003 (  5,  4) [000188] N---G--N-U--              \--*  NE        int   
N001 (  3,  2) [000240] ----G-------                 +--*  LCL_VAR   int   (AX) V19 tmp12        
N002 (  1,  1) [000187] ------------                 \--*  CNS_INT   int    71

------------ BB20 [18F..19B) -> BB19 (always), preds={BB19} succs={BB19}

***** BB20
STMT00061 (IL 0x18F...0x199)
N003 ( 28, 11) [000222] --CXG-------              *  CALL      void   System.GC.Collect
N002 ( 14,  5) [000221] --CXG------- arg0 in rcx  \--*  CALL      int    System.GC.get_MaxGeneration

------------ BB21 [19B..1A6) -> BB23 (cond), preds={BB19} succs={BB22,BB23}

***** BB21
STMT00052 (IL   ???...  ???)
N004 (  7,  6) [000196] ----G-------              *  JTRUE     void  
N003 (  5,  4) [000195] N---G--N-U--              \--*  NE        int   
N001 (  3,  2) [000244] ----G-------                 +--*  LCL_VAR   int   (AX) V19 tmp12        
N002 (  1,  1) [000194] ------------                 \--*  CNS_INT   int    72

------------ BB22 [1A6..1AD) -> BB18 (always), preds={BB21} succs={BB18}

***** BB22
STMT00060 (IL 0x1A6...0x1AB)
N001 ( 14,  5) [000220] --CXG-------              *  CALL      void   System.Diagnostics.Debugger.Break

------------ BB23 [1AD..1B8) -> BB25 (cond), preds={BB21} succs={BB24,BB25}

***** BB23
STMT00054 (IL   ???...  ???)
N004 (  7,  6) [000203] ----G-------              *  JTRUE     void  
N003 (  5,  4) [000202] N---G--N-U--              \--*  NE        int   
N001 (  3,  2) [000248] ----G-------                 +--*  LCL_VAR   int   (AX) V19 tmp12        
N002 (  1,  1) [000201] ------------                 \--*  CNS_INT   int    82

------------ BB24 [1B8..1C1) -> BB17 (always), preds={BB23} succs={BB17}

***** BB24
STMT00059 (IL 0x1B8...0x1BA)
N006 (  7,  7) [000219] -A-XG-------              *  ASG       bool  
N004 (  5,  5) [000218] D--XG--N----              +--*  IND       bool  
N003 (  2,  2) [000387] -------N----              |  \--*  ADD       byref 
N001 (  1,  1) [000216] ------------              |     +--*  LCL_VAR   ref    V00 this         u:1
N002 (  1,  1) [000386] ------------              |     \--*  CNS_INT   long   16 field offset Fseq[_running]
N005 (  1,  1) [000217] ------------              \--*  CNS_INT   int    0

------------ BB25 [1C1..1CC) -> BB16 (cond), preds={BB23} succs={BB26,BB16}

***** BB25
STMT00056 (IL   ???...  ???)
N004 (  7,  6) [000210] ----G-------              *  JTRUE     void  
N003 (  5,  4) [000209] N---G--N-U--              \--*  NE        int   
N001 (  3,  2) [000252] ----G-------                 +--*  LCL_VAR   int   (AX) V19 tmp12        
N002 (  1,  1) [000208] ------------                 \--*  CNS_INT   int    81

------------ BB26 [1CC..1D4) (return), preds={BB25} succs={}

***** BB26
STMT00057 (IL 0x1CC...0x1CE)
N006 (  7,  7) [000214] -A-XG-------              *  ASG       bool  
N004 (  5,  5) [000213] D--XG--N----              +--*  IND       bool  
N003 (  2,  2) [000389] -------N----              |  \--*  ADD       byref 
N001 (  1,  1) [000211] ------------              |     +--*  LCL_VAR   ref    V00 this         u:1 (last use)
N002 (  1,  1) [000388] ------------              |     \--*  CNS_INT   long   16 field offset Fseq[_running]
N005 (  1,  1) [000212] ------------              \--*  CNS_INT   int    0

***** BB26
STMT00058 (IL 0x1D3...0x1D3)
N001 (  0,  0) [000215] ------------              *  RETURN    void  

------------ BB27 [0CA..0CD) -> BB29 (cond), preds={} succs={BB28,BB29}

***** BB27
STMT00031 (IL 0x0CA...0x0CB)
N005 (  8,  8) [000126] ----G-------              *  JTRUE     void  
N004 (  6,  6) [000125] J---G--N----              \--*  EQ        int   
N002 (  4,  4) [000336] ----G-------                 +--*  CAST      int <- bool <- int
N001 (  3,  2) [000123] ----G-------                 |  \--*  LCL_VAR   int   (AX) V05 loc3         
N003 (  1,  1) [000124] ------------                 \--*  CNS_INT   int    0

------------ BB28 [0CD..0D3), preds={BB27} succs={BB29}

***** BB28
STMT00033 (IL 0x0CD...0x0CE)
N003 ( 15,  7) [000129] --CXG-------              *  CALL      void   System.Threading.Monitor.Exit
N002 (  1,  1) [000128] ------------ arg0 in rcx  \--*  LCL_VAR   ref    V04 loc2         u:3 (last use)

------------ BB29 [0D3..0D4) (finret), preds={BB27,BB28} succs={}

***** BB29
STMT00032 (IL 0x0D3...0x0D3)
N001 (  0,  0) [000127] ------------              *  RETFILT   void  

------------ BB30 [126..129) -> BB32 (cond), preds={BB13} succs={BB31,BB32}

***** BB30
STMT00062 (IL 0x126...0x127)
N005 (  8,  8) [000226] ----G-------              *  JTRUE     void  
N004 (  6,  6) [000225] J---G--N----              \--*  EQ        int   
N002 (  4,  4) [000360] ----G-------                 +--*  CAST      int <- bool <- int
N001 (  3,  2) [000223] ----G-------                 |  \--*  LCL_VAR   int   (AX) V05 loc3         
N003 (  1,  1) [000224] ------------                 \--*  CNS_INT   int    0

------------ BB31 [129..12F), preds={BB30} succs={BB32}

***** BB31
STMT00064 (IL 0x129...0x12A)
N003 ( 15,  7) [000229] --CXG-------              *  CALL      void   System.Threading.Monitor.Exit
N002 (  1,  1) [000228] ------------ arg0 in rcx  \--*  LCL_VAR   ref    V04 loc2         u:2 (last use)

------------ BB32 [12F..130) (finret), preds={BB30,BB31} succs={BB14}

***** BB32
STMT00063 (IL 0x12F...0x12F)
N001 (  0,  0) [000227] ------------              *  RETFILT   void  

-------------------------------------------------------------------------------------------------------------------

*************** Finishing PHASE Build SSA representation
Trees after Build SSA representation

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..072)-> BB07 ( cond )                     i hascall gcsafe newobj 
BB02 [0001]  2       BB01,BB06             8     0 [072..07B)                                     i Loop gcsafe bwd bwd-target align 
BB03 [0002]  1  0    BB02                  8     0 [07B..0CA)                 T0      try { }     keep i try hascall gcsafe newobj bwd 
BB04 [0038]  1       BB03                  8     0 [0CA..0CD)-> BB06 ( cond )                     keep i gcsafe bwd cfb 
BB05 [0039]  1       BB04                  4     0 [0CD..0D4)                                     i hascall gcsafe bwd 
BB06 [0006]  2       BB04,BB05             8     0 [0D4..0DD)-> BB02 ( cond )                     i gcsafe bwd 
BB07 [0008]  2       BB01,BB06             1       [0DD..0F9)                                     i hascall gcsafe 
BB08 [0009]  2       BB07,BB12             8     1 [0F9..102)                                     i Loop gcsafe bwd bwd-target align 
BB09 [0010]  1  1    BB08                  8     1 [102..122)-> BB13 ( cond ) T1      try { }     keep i try hascall gcsafe bwd 
BB10 [0041]  1       BB09                  8     1 [126..129)-> BB12 ( cond )                     keep i gcsafe bwd cfb 
BB11 [0042]  1       BB10                  4     1 [129..130)                                     i hascall gcsafe bwd 
BB12 [0016]  2       BB10,BB11             8     1 [130..139)-> BB08 (always)                     i hascall gcsafe bwd 
BB13 [0030]  1       BB09                  1       [???..???)-> BB30 (callf )                     i internal gcsafe 
BB14 [0031]  1       BB32                  1       [???..???)-> BB15 (ALWAYS)                     i internal gcsafe KEEP 
BB15 [0017]  1       BB14                  1       [139..17D)                                     i hascall gcsafe 
BB16 [0045]  2       BB15,BB25             1     2 [???..???)                                     internal gcsafe 
BB17 [0046]  2       BB16,BB24             1     3 [???..???)                                     internal gcsafe 
BB18 [0047]  2       BB17,BB22             1     4 [???..???)                                     internal gcsafe 
BB19 [0018]  2       BB18,BB20             8     5 [17D..18F)-> BB21 ( cond )                     i Loop hascall gcsafe bwd bwd-target align 
BB20 [0019]  1       BB19                  8     5 [18F..19B)-> BB19 (always)                     i hascall gcsafe bwd 
BB21 [0020]  1       BB19                  1     4 [19B..1A6)-> BB23 ( cond )                     i gcsafe bwd 
BB22 [0021]  1       BB21                  1     4 [1A6..1AD)-> BB18 (always)                     i hascall gcsafe bwd 
BB23 [0022]  1       BB21                  1     3 [1AD..1B8)-> BB25 ( cond )                     i gcsafe bwd 
BB24 [0023]  1       BB23                  1     3 [1B8..1C1)-> BB17 (always)                     i gcsafe bwd 
BB25 [0024]  1       BB23                  1     2 [1C1..1CC)-> BB16 ( cond )                     i gcsafe bwd 
BB26 [0025]  1       BB25                  1       [1CC..1D4)        (return)                     i gcsafe 
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ funclets follow
BB27 [0003]  1     0                       0       [0CA..0CD)-> BB29 ( cond )    H0 F fault {     keep i rare flet bwd 
BB28 [0004]  1     0 BB27                  0       [0CD..0D3)                    H0               i rare hascall bwd 
BB29 [0005]  2     0 BB27,BB28             0       [0D3..0D4)        (finret)    H0   }           i rare bwd 
BB30 [0013]  2     1 BB13                  1       [126..129)-> BB32 ( cond )    H1 F finally {   keep i gcsafe flet bwd 
BB31 [0014]  1     1 BB30                  1       [129..12F)                    H1               i hascall gcsafe bwd 
BB32 [0015]  2     1 BB30,BB31             1       [12F..130)        (finret)    H1   }           i gcsafe bwd 
-----------------------------------------------------------------------------------------------------------------------------------------

------------ BB01 [000..072) -> BB07 (cond), preds={} succs={BB02,BB07}

***** BB01
STMT00000 (IL 0x000...0x005)
N003 ( 18,  8) [000003] -ACXG---R---              *  ASG       struct (copy)
N002 (  3,  2) [000001] D---G--N----              +--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  +--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
N001 ( 14,  5) [000000] --CXG-------              \--*  CALL      struct System.DateTime.get_Now

***** BB01
STMT00001 (IL 0x006...0x022)
N013 ( 53, 36) [000009] --CXG-------              *  CALL      void   System.Console.WriteLine
N012 ( 39, 30) [000008] --CXG------- arg0 in rcx  \--*  CALL      ref    System.String.Concat
N007 ( 17, 10) [000272] -ACXG---R-L- arg0 SETUP      +--*  ASG       ref   
N006 (  1,  1) [000271] D------N----                 |  +--*  LCL_VAR   ref    V21 tmp14        d:2
N005 ( 17, 10) [000006] --CXG-------                 |  \--*  CALL      ref    System.DateTime.ToString
N004 (  3,  3) [000005] ------------ this in rcx     |     \--*  ADDR      byref 
N003 (  3,  2) [000004] ----G--N----                 |        \--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                     |        \--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
N009 (  1,  1) [000273] ------------ arg0 in rcx     +--*  LCL_VAR   ref    V21 tmp14        u:2 (last use)
N011 (  4, 12) [000270] #---G------- arg1 in rdx     \--*  IND       ref   
N010 (  2, 10) [000269] H-----------                    \--*  CNS_INT(h) long   0x750031F0 "	 Created list"

***** BB01
STMT00002 (IL 0x01C...  ???)
N005 ( 16, 16) [000014] -AC-----R---              *  ASG       ref   
N004 (  1,  1) [000013] D------N----              +--*  LCL_VAR   ref    V08 tmp1         d:2
N003 ( 16, 16) [000012] --C---------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
N002 (  2, 10) [000011] H----------- arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb3ee2350 method

***** BB01
STMT00003 (IL   ???...  ???)
N003 ( 15,  8) [000016] --CXG-------              *  CALL      void   FalseLeakRepro.List..ctor
N002 (  1,  1) [000015] ------------ this in rcx  \--*  LCL_VAR   ref    V08 tmp1         u:2

***** BB01
STMT00004 (IL 0x022...  ???)
N006 (  6,  6) [000019] -A-XG-------              *  ASG       ref   
N004 (  4,  4) [000018] D--XG--N----              +--*  IND       ref   
N003 (  2,  2) [000279] -------N----              |  \--*  ADD       byref 
N001 (  1,  1) [000010] ------------              |     +--*  LCL_VAR   ref    V00 this         u:1
N002 (  1,  1) [000278] ------------              |     \--*  CNS_INT   long   8 field offset Fseq[_myList]
N005 (  1,  1) [000017] ------------              \--*  LCL_VAR   ref    V08 tmp1         u:2 (last use)

***** BB01
STMT00005 (IL 0x027...0x037)
N005 ( 16, 16) [000026] -AC-----R---              *  ASG       ref   
N004 (  1,  1) [000025] D------N----              +--*  LCL_VAR   ref    V09 tmp2         d:2
N003 ( 16, 16) [000024] --C---------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
N002 (  2, 10) [000023] H----------- arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb3b058b8 token

***** BB01
STMT00007 (IL   ???...  ???)
N009 (  7,  7) [000030] -A-XG---R---              *  ASG       ref   
N008 (  1,  1) [000029] D------N----              +--*  LCL_VAR   ref    V10 tmp3         d:2
N007 (  7,  7) [000022] ---XG-------              \--*  IND       ref   
N006 (  5,  5) [000282] ---XG--N----                 \--*  ADD       byref 
N004 (  4,  4) [000021] ---XG-------                    +--*  IND       ref   
N003 (  2,  2) [000284] -------N----                    |  \--*  ADD       byref 
N001 (  1,  1) [000020] ------------                    |     +--*  LCL_VAR   ref    V00 this         u:1
N002 (  1,  1) [000283] ------------                    |     \--*  CNS_INT   long   8 field offset Fseq[_myList]
N005 (  1,  1) [000281] ------------                    \--*  CNS_INT   long   8 field offset Fseq[Head]

***** BB01
STMT00006 (IL   ???...  ???)
N003 ( 15,  8) [000028] --CXG-------              *  CALL      void   System.Object..ctor
N002 (  1,  1) [000027] ------------ this in rcx  \--*  LCL_VAR   ref    V09 tmp2         u:2

***** BB01
STMT00008 (IL 0x037...  ???)
N006 (  6,  6) [000034] -A-XG-------              *  ASG       ref   
N004 (  4,  4) [000033] D--XG--N----              +--*  IND       ref   
N003 (  2,  2) [000287] -------N----              |  \--*  ADD       byref 
N001 (  1,  1) [000031] ------------              |     +--*  LCL_VAR   ref    V10 tmp3         u:2 (last use)
N002 (  1,  1) [000286] ------------              |     \--*  CNS_INT   long   16 field offset Fseq[Data]
N005 (  1,  1) [000032] ------------              \--*  LCL_VAR   ref    V09 tmp2         u:2 (last use)

***** BB01
STMT00009 (IL 0x03C...0x057)
N005 ( 16, 16) [000040] -AC-----R---              *  ASG       ref   
N004 (  1,  1) [000039] D------N----              +--*  LCL_VAR   ref    V11 tmp4         d:2
N003 ( 16, 16) [000038] --C---------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
N002 (  2, 10) [000037] H----------- arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb3ee6200 token

***** BB01
STMT00010 (IL   ???...  ???)
N007 ( 18, 21) [000042] --CXG-------              *  CALL      void   System.MulticastDelegate.CtorClosed
N004 (  1,  1) [000041] ------------ this in rcx  +--*  LCL_VAR   ref    V11 tmp4         u:2
N005 (  1,  1) [000035] ------------ arg1 in rdx  +--*  LCL_VAR   ref    V00 this         u:1
N006 (  2, 10) [000036] H----------- arg2 in r8   \--*  CNS_INT(h) long   0x7ffdb3b213f8 ftn

***** BB01
STMT00011 (IL 0x048...  ???)
N005 ( 16, 16) [000047] -AC-----R---              *  ASG       ref   
N004 (  1,  1) [000046] D------N----              +--*  LCL_VAR   ref    V12 tmp5         d:2
N003 ( 16, 16) [000045] --C---------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWFAST
N002 (  2, 10) [000044] H----------- arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb3c84e80 token

***** BB01
STMT00012 (IL   ???...  ???)
N005 ( 16, 10) [000049] --CXG-------              *  CALL      void   System.Threading.Thread..ctor
N003 (  1,  1) [000048] ------------ this in rcx  +--*  LCL_VAR   ref    V12 tmp5         u:2
N004 (  1,  1) [000043] ------------ arg1 in rdx  \--*  LCL_VAR   ref    V11 tmp4         u:2 (last use)

***** BB01
STMT00013 (IL 0x04D...  ???)
N003 ( 15,  8) [000051] --CXG-------              *  CALL nullcheck void   System.Threading.Thread.Start
N002 (  1,  1) [000050] ------------ this in rcx  \--*  LCL_VAR   ref    V12 tmp5         u:2 (last use)

***** BB01
STMT00014 (IL 0x052...  ???)
N003 ( 18,  8) [000055] -ACXG---R---              *  ASG       struct (copy)
N002 (  3,  2) [000053] D---G--N----              +--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  +--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
N001 ( 14,  5) [000052] --CXG-------              \--*  CALL      struct System.DateTime.get_Now

***** BB01
STMT00015 (IL 0x058...0x06F)
N013 ( 53, 36) [000061] --CXG-------              *  CALL      void   System.Console.WriteLine
N012 ( 39, 30) [000060] --CXG------- arg0 in rcx  \--*  CALL      ref    System.String.Concat
N007 ( 17, 10) [000300] -ACXG---R-L- arg0 SETUP      +--*  ASG       ref   
N006 (  1,  1) [000299] D------N----                 |  +--*  LCL_VAR   ref    V22 tmp15        d:2
N005 ( 17, 10) [000058] --CXG-------                 |  \--*  CALL      ref    System.DateTime.ToString
N004 (  3,  3) [000057] ------------ this in rcx     |     \--*  ADDR      byref 
N003 (  3,  2) [000056] ----G--N----                 |        \--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                     |        \--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
N009 (  1,  1) [000301] ------------ arg0 in rcx     +--*  LCL_VAR   ref    V22 tmp15        u:2 (last use)
N011 (  4, 12) [000298] #---G------- arg1 in rdx     \--*  IND       ref   
N010 (  2, 10) [000297] H-----------                    \--*  CNS_INT(h) long   0x750031F8 "	 Consumer thread started, adding items..."

***** BB01
STMT00016 (IL 0x06E...  ???)
N003 (  1,  3) [000064] -A------R---              *  ASG       int   
N002 (  1,  1) [000063] D------N----              +--*  LCL_VAR   int    V03 loc1         d:2
N001 (  1,  1) [000062] ------------              \--*  CNS_INT   int    0

***** BB01
STMT00072 (IL 0x0D8...  ???)
N004 (  5,  5) [000390] ------------              *  JTRUE     void  
N003 (  3,  3) [000391] J------N----              \--*  GE        int   
N001 (  1,  1) [000392] ------------                 +--*  LCL_VAR   int    V03 loc1         u:2
N002 (  1,  1) [000393] ------------                 \--*  CNS_INT   int    10

------------ BB02 [072..07B), preds={BB01,BB06} succs={BB03}

***** BB02
STMT00074 (IL   ???...  ???)
N005 (  0,  0) [000399] -A------R---              *  ASG       int   
N004 (  0,  0) [000397] D------N----              +--*  LCL_VAR   int    V03 loc1         d:3
N003 (  0,  0) [000398] ------------              \--*  PHI       int   
N001 (  0,  0) [000401] ------------ pred BB06       +--*  PHI_ARG   int    V03 loc1         u:4
N002 (  0,  0) [000400] ------------ pred BB01       \--*  PHI_ARG   int    V03 loc1         u:2

***** BB02
STMT00018 (IL 0x072...0x078)
N006 (  4,  4) [000072] -A-XG---R---              *  ASG       ref   
N005 (  1,  1) [000071] D------N----              +--*  LCL_VAR   ref    V04 loc2         d:3
N004 (  4,  4) [000070] ---XG-------              \--*  IND       ref   
N003 (  2,  2) [000305] -------N----                 \--*  ADD       byref 
N001 (  1,  1) [000069] ------------                    +--*  LCL_VAR   ref    V00 this         u:1
N002 (  1,  1) [000304] ------------                    \--*  CNS_INT   long   8 field offset Fseq[_myList]

***** BB02
STMT00019 (IL 0x079...0x07A)
N003 (  5,  4) [000075] -A--G---R---              *  ASG       int   
N002 (  3,  2) [000074] D---G--N----              +--*  LCL_VAR   int   (AX) V05 loc3         
N001 (  1,  1) [000073] ------------              \--*  CNS_INT   int    0

------------ BB03 [07B..0CA), preds={BB02} succs={BB04}

***** BB03
STMT00020 (IL 0x07B...0x093)
N005 ( 18, 11) [000079] --CXG-------              *  CALL      void   System.Threading.Monitor.Enter
N003 (  3,  3) [000078] ------------ arg1 in rdx  +--*  LCL_VAR_ADDR long   V05 loc3         
N004 (  1,  1) [000076] ------------ arg0 in rcx  \--*  LCL_VAR   ref    V04 loc2         u:3

***** BB03
STMT00021 (IL 0x083...  ???)
N005 ( 16, 16) [000086] -AC-----R---              *  ASG       ref   
N004 (  1,  1) [000085] D------N----              +--*  LCL_VAR   ref    V13 tmp6         d:2
N003 ( 16, 16) [000084] --C---------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
N002 (  2, 10) [000083] H----------- arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb3ee58a8 method

***** BB03
STMT00023 (IL   ???...  ???)
N009 (  7,  7) [000090] -A-XG---R---              *  ASG       ref   
N008 (  1,  1) [000089] D------N----              +--*  LCL_VAR   ref    V14 tmp7         d:2
N007 (  7,  7) [000082] ---XG-------              \--*  IND       ref   
N006 (  5,  5) [000310] ---XG--N----                 \--*  ADD       byref 
N004 (  4,  4) [000081] ---XG-------                    +--*  IND       ref   
N003 (  2,  2) [000312] -------N----                    |  \--*  ADD       byref 
N001 (  1,  1) [000080] ------------                    |     +--*  LCL_VAR   ref    V00 this         u:1
N002 (  1,  1) [000311] ------------                    |     \--*  CNS_INT   long   8 field offset Fseq[_myList]
N005 (  1,  1) [000309] ------------                    \--*  CNS_INT   long   8 field offset Fseq[Head]

***** BB03
STMT00065 (IL   ???...  ???)
N003 ( 15,  8) [000230] --CXG-------              *  CALL      void   System.Object..ctor
N002 (  1,  1) [000087] ------------ this in rcx  \--*  LCL_VAR   ref    V13 tmp6         u:2

***** BB03
STMT00024 (IL 0x093...  ???)
N006 (  6,  6) [000094] -A-XG-------              *  ASG       ref   
N004 (  4,  4) [000093] D--XG--N----              +--*  IND       ref   
N003 (  2,  2) [000315] -------N----              |  \--*  ADD       byref 
N001 (  1,  1) [000091] ------------              |     +--*  LCL_VAR   ref    V14 tmp7         u:2 (last use)
N002 (  1,  1) [000314] ------------              |     \--*  CNS_INT   long   8 field offset Fseq[Next]
N005 (  1,  1) [000092] ------------              \--*  LCL_VAR   ref    V13 tmp6         u:2 (last use)

***** BB03
STMT00025 (IL 0x098...0x0AE)
N018 ( 18, 18) [000102] -A-XG-------              *  ASG       ref   
N007 (  7,  7) [000101] D--XG--N----              +--*  IND       ref   
N006 (  5,  5) [000317] ---XG--N----              |  \--*  ADD       byref 
N004 (  4,  4) [000096] ---XG-------              |     +--*  IND       ref   
N003 (  2,  2) [000319] -------N----              |     |  \--*  ADD       byref 
N001 (  1,  1) [000095] ------------              |     |     +--*  LCL_VAR   ref    V00 this         u:1
N002 (  1,  1) [000318] ------------              |     |     \--*  CNS_INT   long   8 field offset Fseq[_myList]
N005 (  1,  1) [000316] ------------              |     \--*  CNS_INT   long   8 field offset Fseq[Head]
N017 ( 10, 10) [000100] ---XG-------              \--*  IND       ref   
N016 (  8,  8) [000321] ---XG--N----                 \--*  ADD       byref 
N014 (  7,  7) [000099] ---XG-------                    +--*  IND       ref   
N013 (  5,  5) [000323] ---XG--N----                    |  \--*  ADD       byref 
N011 (  4,  4) [000098] ---XG-------                    |     +--*  IND       ref   
N010 (  2,  2) [000325] -------N----                    |     |  \--*  ADD       byref 
N008 (  1,  1) [000097] ------------                    |     |     +--*  LCL_VAR   ref    V00 this         u:1
N009 (  1,  1) [000324] ------------                    |     |     \--*  CNS_INT   long   8 field offset Fseq[_myList]
N012 (  1,  1) [000322] ------------                    |     \--*  CNS_INT   long   8 field offset Fseq[Head]
N015 (  1,  1) [000320] ------------                    \--*  CNS_INT   long   8 field offset Fseq[Next]

***** BB03
STMT00026 (IL 0x0B3...0x0C3)
N005 ( 16, 16) [000109] -AC-----R---              *  ASG       ref   
N004 (  1,  1) [000108] D------N----              +--*  LCL_VAR   ref    V15 tmp8         d:2
N003 ( 16, 16) [000107] --C---------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
N002 (  2, 10) [000106] H----------- arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb3b058b8 token

***** BB03
STMT00028 (IL   ???...  ???)
N009 (  7,  7) [000113] -A-XG---R---              *  ASG       ref   
N008 (  1,  1) [000112] D------N----              +--*  LCL_VAR   ref    V16 tmp9         d:2
N007 (  7,  7) [000105] ---XG-------              \--*  IND       ref   
N006 (  5,  5) [000328] ---XG--N----                 \--*  ADD       byref 
N004 (  4,  4) [000104] ---XG-------                    +--*  IND       ref   
N003 (  2,  2) [000330] -------N----                    |  \--*  ADD       byref 
N001 (  1,  1) [000103] ------------                    |     +--*  LCL_VAR   ref    V00 this         u:1
N002 (  1,  1) [000329] ------------                    |     \--*  CNS_INT   long   8 field offset Fseq[_myList]
N005 (  1,  1) [000327] ------------                    \--*  CNS_INT   long   8 field offset Fseq[Head]

***** BB03
STMT00027 (IL   ???...  ???)
N003 ( 15,  8) [000111] --CXG-------              *  CALL      void   System.Object..ctor
N002 (  1,  1) [000110] ------------ this in rcx  \--*  LCL_VAR   ref    V15 tmp8         u:2

***** BB03
STMT00029 (IL 0x0C3...  ???)
N006 (  6,  6) [000117] -A-XG-------              *  ASG       ref   
N004 (  4,  4) [000116] D--XG--N----              +--*  IND       ref   
N003 (  2,  2) [000333] -------N----              |  \--*  ADD       byref 
N001 (  1,  1) [000114] ------------              |     +--*  LCL_VAR   ref    V16 tmp9         u:2 (last use)
N002 (  1,  1) [000332] ------------              |     \--*  CNS_INT   long   16 field offset Fseq[Data]
N005 (  1,  1) [000115] ------------              \--*  LCL_VAR   ref    V15 tmp8         u:2 (last use)

------------ BB04 [0CA..0CD) -> BB06 (cond), preds={BB03} succs={BB05,BB06}

***** BB04
STMT00066 (IL   ???...  ???)
N005 (  8,  8) [000254] ----G-------              *  JTRUE     void  
N004 (  6,  6) [000255] J---G--N----              \--*  EQ        int   
N002 (  4,  4) [000334] ----G-------                 +--*  CAST      int <- bool <- int
N001 (  3,  2) [000256] ----G-------                 |  \--*  LCL_VAR   int   (AX) V05 loc3         
N003 (  1,  1) [000257] ------------                 \--*  CNS_INT   int    0

------------ BB05 [0CD..0D4), preds={BB04} succs={BB06}

***** BB05
STMT00067 (IL   ???...  ???)
N003 ( 15,  7) [000258] --CXG-------              *  CALL      void   System.Threading.Monitor.Exit
N002 (  1,  1) [000259] ------------ arg0 in rcx  \--*  LCL_VAR   ref    V04 loc2         u:3 (last use)

------------ BB06 [0D4..0DD) -> BB02 (cond), preds={BB04,BB05} succs={BB07,BB02}

***** BB06
STMT00030 (IL 0x0D4...0x0D7)
N005 (  3,  3) [000122] -A------R---              *  ASG       int   
N004 (  1,  1) [000121] D------N----              +--*  LCL_VAR   int    V03 loc1         d:4
N003 (  3,  3) [000120] ------------              \--*  ADD       int   
N001 (  1,  1) [000118] ------------                 +--*  LCL_VAR   int    V03 loc1         u:3 (last use)
N002 (  1,  1) [000119] ------------                 \--*  CNS_INT   int    1

***** BB06
STMT00017 (IL 0x0D8...0x0DB)
N004 (  5,  5) [000068] ------------              *  JTRUE     void  
N003 (  3,  3) [000067] J------N----              \--*  LT        int   
N001 (  1,  1) [000065] ------------                 +--*  LCL_VAR   int    V03 loc1         u:4
N002 (  1,  1) [000066] ------------                 \--*  CNS_INT   int    10

------------ BB07 [0DD..0F9), preds={BB01,BB06} succs={BB08}

***** BB07
STMT00034 (IL 0x0DD...0x0E2)
N003 ( 18,  8) [000133] -ACXG---R---              *  ASG       struct (copy)
N002 (  3,  2) [000131] D---G--N----              +--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  +--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
N001 ( 14,  5) [000130] --CXG-------              \--*  CALL      struct System.DateTime.get_Now

***** BB07
STMT00035 (IL 0x0E3...0x0F4)
N013 ( 53, 36) [000139] --CXG-------              *  CALL      void   System.Console.WriteLine
N012 ( 39, 30) [000138] --CXG------- arg0 in rcx  \--*  CALL      ref    System.String.Concat
N007 ( 17, 10) [000342] -ACXG---R-L- arg0 SETUP      +--*  ASG       ref   
N006 (  1,  1) [000341] D------N----                 |  +--*  LCL_VAR   ref    V23 tmp16        d:2
N005 ( 17, 10) [000136] --CXG-------                 |  \--*  CALL      ref    System.DateTime.ToString
N004 (  3,  3) [000135] ------------ this in rcx     |     \--*  ADDR      byref 
N003 (  3,  2) [000134] ----G--N----                 |        \--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                     |        \--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
N009 (  1,  1) [000343] ------------ arg0 in rcx     +--*  LCL_VAR   ref    V23 tmp16        u:2 (last use)
N011 (  4, 12) [000340] #---G------- arg1 in rdx     \--*  IND       ref   
N010 (  2, 10) [000339] H-----------                    \--*  CNS_INT(h) long   0x75003200 "	 Waiting for list processing to complete..."

------------ BB08 [0F9..102), preds={BB07,BB12} succs={BB09}

***** BB08
STMT00036 (IL 0x0F9...0x0FF)
N006 (  4,  4) [000143] -A-XG---R---              *  ASG       ref   
N005 (  1,  1) [000142] D------N----              +--*  LCL_VAR   ref    V04 loc2         d:2
N004 (  4,  4) [000141] ---XG-------              \--*  IND       ref   
N003 (  2,  2) [000347] -------N----                 \--*  ADD       byref 
N001 (  1,  1) [000140] ------------                    +--*  LCL_VAR   ref    V00 this         u:1
N002 (  1,  1) [000346] ------------                    \--*  CNS_INT   long   8 field offset Fseq[_myList]

***** BB08
STMT00037 (IL 0x100...0x101)
N003 (  5,  4) [000146] -A--G---R---              *  ASG       int   
N002 (  3,  2) [000145] D---G--N----              +--*  LCL_VAR   int   (AX) V05 loc3         
N001 (  1,  1) [000144] ------------              \--*  CNS_INT   int    0

------------ BB09 [102..122) -> BB13 (cond), preds={BB08} succs={BB10,BB13}

***** BB09
STMT00038 (IL 0x102...0x120)
N005 ( 18, 11) [000150] --CXG-------              *  CALL      void   System.Threading.Monitor.Enter
N003 (  3,  3) [000149] ------------ arg1 in rdx  +--*  LCL_VAR_ADDR long   V05 loc3         
N004 (  1,  1) [000147] ------------ arg0 in rcx  \--*  LCL_VAR   ref    V04 loc2         u:2

***** BB09
STMT00039 (IL 0x10A...  ???)
N016 ( 17, 17) [000158] ---XG-------              *  JTRUE     void  
N015 ( 15, 15) [000157] N--XG--N-U--              \--*  EQ        int   
N007 (  7,  7) [000153] ---XG-------                 +--*  IND       ref   
N006 (  5,  5) [000351] ---XG--N----                 |  \--*  ADD       byref 
N004 (  4,  4) [000152] ---XG-------                 |     +--*  IND       ref   
N003 (  2,  2) [000353] -------N----                 |     |  \--*  ADD       byref 
N001 (  1,  1) [000151] ------------                 |     |     +--*  LCL_VAR   ref    V00 this         u:1
N002 (  1,  1) [000352] ------------                 |     |     \--*  CNS_INT   long   8 field offset Fseq[_myList]
N005 (  1,  1) [000350] ------------                 |     \--*  CNS_INT   long   8 field offset Fseq[Head]
N014 (  7,  7) [000156] ---XG-------                 \--*  IND       ref   
N013 (  5,  5) [000355] ---XG--N----                    \--*  ADD       byref 
N011 (  4,  4) [000155] ---XG-------                       +--*  IND       ref   
N010 (  2,  2) [000357] -------N----                       |  \--*  ADD       byref 
N008 (  1,  1) [000154] ------------                       |     +--*  LCL_VAR   ref    V00 this         u:1
N009 (  1,  1) [000356] ------------                       |     \--*  CNS_INT   long   8 field offset Fseq[_myList]
N012 (  1,  1) [000354] ------------                       \--*  CNS_INT   long   16 field offset Fseq[Tail]

------------ BB10 [126..129) -> BB12 (cond), preds={BB09} succs={BB11,BB12}

***** BB10
STMT00069 (IL   ???...  ???)
N005 (  8,  8) [000261] ----G-------              *  JTRUE     void  
N004 (  6,  6) [000262] J---G--N----              \--*  EQ        int   
N002 (  4,  4) [000358] ----G-------                 +--*  CAST      int <- bool <- int
N001 (  3,  2) [000263] ----G-------                 |  \--*  LCL_VAR   int   (AX) V05 loc3         
N003 (  1,  1) [000264] ------------                 \--*  CNS_INT   int    0

------------ BB11 [129..130), preds={BB10} succs={BB12}

***** BB11
STMT00070 (IL   ???...  ???)
N003 ( 15,  7) [000265] --CXG-------              *  CALL      void   System.Threading.Monitor.Exit
N002 (  1,  1) [000266] ------------ arg0 in rcx  \--*  LCL_VAR   ref    V04 loc2         u:2 (last use)

------------ BB12 [130..139) -> BB08 (always), preds={BB10,BB11} succs={BB08}

***** BB12
STMT00040 (IL 0x130...0x137)
N003 ( 15,  7) [000160] --CXG-------              *  CALL      void   System.Threading.Thread.Sleep
N002 (  1,  1) [000159] ------------ arg0 in rcx  \--*  CNS_INT   int    100

------------ BB13 [???..???) -> BB30 (callf), preds={BB09} succs={BB30}

------------ BB14 [???..???) -> BB15 (ALWAYS), preds={BB32} succs={BB15}

------------ BB15 [139..17D), preds={BB14} succs={BB16}

***** BB15
STMT00041 (IL 0x139...0x13E)
N003 ( 18,  8) [000164] -ACXG---R---              *  ASG       struct (copy)
N002 (  3,  2) [000162] D---G--N----              +--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  +--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
N001 ( 14,  5) [000161] --CXG-------              \--*  CALL      struct System.DateTime.get_Now

***** BB15
STMT00042 (IL 0x13F...0x178)
N013 ( 53, 36) [000170] --CXG-------              *  CALL      void   System.Console.WriteLine
N012 ( 39, 30) [000169] --CXG------- arg0 in rcx  \--*  CALL      ref    System.String.Concat
N007 ( 17, 10) [000367] -ACXG---R-L- arg0 SETUP      +--*  ASG       ref   
N006 (  1,  1) [000366] D------N----                 |  +--*  LCL_VAR   ref    V24 tmp17        d:2
N005 ( 17, 10) [000167] --CXG-------                 |  \--*  CALL      ref    System.DateTime.ToString
N004 (  3,  3) [000166] ------------ this in rcx     |     \--*  ADDR      byref 
N003 (  3,  2) [000165] ----G--N----                 |        \--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                     |        \--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
N009 (  1,  1) [000368] ------------ arg0 in rcx     +--*  LCL_VAR   ref    V24 tmp17        u:2 (last use)
N011 (  4, 12) [000365] #---G------- arg1 in rdx     \--*  IND       ref   
N010 (  2, 10) [000364] H-----------                    \--*  CNS_INT(h) long   0x75003208 "	 Done.  Profiler is active, available options:"

***** BB15
STMT00043 (IL 0x155...  ???)
N004 ( 18, 18) [000172] --CXG-------              *  CALL      void   System.Console.WriteLine
N003 (  4, 12) [000372] #---G------- arg0 in rcx  \--*  IND       ref   
N002 (  2, 10) [000371] H-----------                 \--*  CNS_INT(h) long   0x75003210 "   Q = quit"

***** BB15
STMT00044 (IL 0x15F...  ???)
N004 ( 18, 18) [000174] --CXG-------              *  CALL      void   System.Console.WriteLine
N003 (  4, 12) [000375] #---G------- arg0 in rcx  \--*  IND       ref   
N002 (  2, 10) [000374] H-----------                 \--*  CNS_INT(h) long   0x75003218 "   H = heap snapshot"

***** BB15
STMT00045 (IL 0x169...  ???)
N004 ( 18, 18) [000176] --CXG-------              *  CALL      void   System.Console.WriteLine
N003 (  4, 12) [000378] #---G------- arg0 in rcx  \--*  IND       ref   
N002 (  2, 10) [000377] H-----------                 \--*  CNS_INT(h) long   0x75003220 "   G = GC (max gen)"

***** BB15
STMT00046 (IL 0x173...  ???)
N004 ( 18, 18) [000178] --CXG-------              *  CALL      void   System.Console.WriteLine
N003 (  4, 12) [000381] #---G------- arg0 in rcx  \--*  IND       ref   
N002 (  2, 10) [000380] H-----------                 \--*  CNS_INT(h) long   0x75003228 "   R = clear the running flag to stop the consumer thread"

------------ BB16 [???..???), preds={BB15,BB25} succs={BB17}

------------ BB17 [???..???), preds={BB16,BB24} succs={BB18}

------------ BB18 [???..???), preds={BB17,BB22} succs={BB19}

------------ BB19 [17D..18F) -> BB21 (cond), preds={BB18,BB20} succs={BB20,BB21}

***** BB19
STMT00048 (IL   ???...  ???)
N006 ( 18, 11) [000233] S-CXG-------              *  CALL      void   System.ConsolePal.ReadKey
N004 (  3,  3) [000235] ------------ arg0 in rcx  +--*  ADDR      long  
N003 (  3,  2) [000236] ----G--N----              |  \--*  LCL_VAR   struct<System.ConsoleKeyInfo, 12>(AX)(P) V06 loc4         
                                                  |  \--*    ushort V06._keyChar (offs=0x00) -> V18 tmp11        
                                                  |  \--*    int    V06._key (offs=0x04) -> V19 tmp12        
                                                  |  \--*    int    V06._mods (offs=0x08) -> V20 tmp13        
N005 (  1,  1) [000232] ------------ arg1 in rdx  \--*  CNS_INT   int    0

***** BB19
STMT00050 (IL   ???...  ???)
N004 (  7,  6) [000189] ----G-------              *  JTRUE     void  
N003 (  5,  4) [000188] N---G--N-U--              \--*  NE        int   
N001 (  3,  2) [000240] ----G-------                 +--*  LCL_VAR   int   (AX) V19 tmp12        
N002 (  1,  1) [000187] ------------                 \--*  CNS_INT   int    71

------------ BB20 [18F..19B) -> BB19 (always), preds={BB19} succs={BB19}

***** BB20
STMT00061 (IL 0x18F...0x199)
N003 ( 28, 11) [000222] --CXG-------              *  CALL      void   System.GC.Collect
N002 ( 14,  5) [000221] --CXG------- arg0 in rcx  \--*  CALL      int    System.GC.get_MaxGeneration

------------ BB21 [19B..1A6) -> BB23 (cond), preds={BB19} succs={BB22,BB23}

***** BB21
STMT00052 (IL   ???...  ???)
N004 (  7,  6) [000196] ----G-------              *  JTRUE     void  
N003 (  5,  4) [000195] N---G--N-U--              \--*  NE        int   
N001 (  3,  2) [000244] ----G-------                 +--*  LCL_VAR   int   (AX) V19 tmp12        
N002 (  1,  1) [000194] ------------                 \--*  CNS_INT   int    72

------------ BB22 [1A6..1AD) -> BB18 (always), preds={BB21} succs={BB18}

***** BB22
STMT00060 (IL 0x1A6...0x1AB)
N001 ( 14,  5) [000220] --CXG-------              *  CALL      void   System.Diagnostics.Debugger.Break

------------ BB23 [1AD..1B8) -> BB25 (cond), preds={BB21} succs={BB24,BB25}

***** BB23
STMT00054 (IL   ???...  ???)
N004 (  7,  6) [000203] ----G-------              *  JTRUE     void  
N003 (  5,  4) [000202] N---G--N-U--              \--*  NE        int   
N001 (  3,  2) [000248] ----G-------                 +--*  LCL_VAR   int   (AX) V19 tmp12        
N002 (  1,  1) [000201] ------------                 \--*  CNS_INT   int    82

------------ BB24 [1B8..1C1) -> BB17 (always), preds={BB23} succs={BB17}

***** BB24
STMT00059 (IL 0x1B8...0x1BA)
N006 (  7,  7) [000219] -A-XG-------              *  ASG       bool  
N004 (  5,  5) [000218] D--XG--N----              +--*  IND       bool  
N003 (  2,  2) [000387] -------N----              |  \--*  ADD       byref 
N001 (  1,  1) [000216] ------------              |     +--*  LCL_VAR   ref    V00 this         u:1
N002 (  1,  1) [000386] ------------              |     \--*  CNS_INT   long   16 field offset Fseq[_running]
N005 (  1,  1) [000217] ------------              \--*  CNS_INT   int    0

------------ BB25 [1C1..1CC) -> BB16 (cond), preds={BB23} succs={BB26,BB16}

***** BB25
STMT00056 (IL   ???...  ???)
N004 (  7,  6) [000210] ----G-------              *  JTRUE     void  
N003 (  5,  4) [000209] N---G--N-U--              \--*  NE        int   
N001 (  3,  2) [000252] ----G-------                 +--*  LCL_VAR   int   (AX) V19 tmp12        
N002 (  1,  1) [000208] ------------                 \--*  CNS_INT   int    81

------------ BB26 [1CC..1D4) (return), preds={BB25} succs={}

***** BB26
STMT00057 (IL 0x1CC...0x1CE)
N006 (  7,  7) [000214] -A-XG-------              *  ASG       bool  
N004 (  5,  5) [000213] D--XG--N----              +--*  IND       bool  
N003 (  2,  2) [000389] -------N----              |  \--*  ADD       byref 
N001 (  1,  1) [000211] ------------              |     +--*  LCL_VAR   ref    V00 this         u:1 (last use)
N002 (  1,  1) [000388] ------------              |     \--*  CNS_INT   long   16 field offset Fseq[_running]
N005 (  1,  1) [000212] ------------              \--*  CNS_INT   int    0

***** BB26
STMT00058 (IL 0x1D3...0x1D3)
N001 (  0,  0) [000215] ------------              *  RETURN    void  

------------ BB27 [0CA..0CD) -> BB29 (cond), preds={} succs={BB28,BB29}

***** BB27
STMT00031 (IL 0x0CA...0x0CB)
N005 (  8,  8) [000126] ----G-------              *  JTRUE     void  
N004 (  6,  6) [000125] J---G--N----              \--*  EQ        int   
N002 (  4,  4) [000336] ----G-------                 +--*  CAST      int <- bool <- int
N001 (  3,  2) [000123] ----G-------                 |  \--*  LCL_VAR   int   (AX) V05 loc3         
N003 (  1,  1) [000124] ------------                 \--*  CNS_INT   int    0

------------ BB28 [0CD..0D3), preds={BB27} succs={BB29}

***** BB28
STMT00033 (IL 0x0CD...0x0CE)
N003 ( 15,  7) [000129] --CXG-------              *  CALL      void   System.Threading.Monitor.Exit
N002 (  1,  1) [000128] ------------ arg0 in rcx  \--*  LCL_VAR   ref    V04 loc2         u:3 (last use)

------------ BB29 [0D3..0D4) (finret), preds={BB27,BB28} succs={}

***** BB29
STMT00032 (IL 0x0D3...0x0D3)
N001 (  0,  0) [000127] ------------              *  RETFILT   void  

------------ BB30 [126..129) -> BB32 (cond), preds={BB13} succs={BB31,BB32}

***** BB30
STMT00062 (IL 0x126...0x127)
N005 (  8,  8) [000226] ----G-------              *  JTRUE     void  
N004 (  6,  6) [000225] J---G--N----              \--*  EQ        int   
N002 (  4,  4) [000360] ----G-------                 +--*  CAST      int <- bool <- int
N001 (  3,  2) [000223] ----G-------                 |  \--*  LCL_VAR   int   (AX) V05 loc3         
N003 (  1,  1) [000224] ------------                 \--*  CNS_INT   int    0

------------ BB31 [129..12F), preds={BB30} succs={BB32}

***** BB31
STMT00064 (IL 0x129...0x12A)
N003 ( 15,  7) [000229] --CXG-------              *  CALL      void   System.Threading.Monitor.Exit
N002 (  1,  1) [000228] ------------ arg0 in rcx  \--*  LCL_VAR   ref    V04 loc2         u:2 (last use)

------------ BB32 [12F..130) (finret), preds={BB30,BB31} succs={BB14}

***** BB32
STMT00063 (IL 0x12F...0x12F)
N001 (  0,  0) [000227] ------------              *  RETFILT   void  

-------------------------------------------------------------------------------------------------------------------
*************** In fgDebugCheckBBlist

*************** Starting PHASE Early Value Propagation
*************** In optEarlyProp()

After optEarlyProp:

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..072)-> BB07 ( cond )                     i hascall gcsafe newobj 
BB02 [0001]  2       BB01,BB06             8     0 [072..07B)                                     i Loop gcsafe bwd bwd-target align 
BB03 [0002]  1  0    BB02                  8     0 [07B..0CA)                 T0      try { }     keep i try hascall gcsafe newobj bwd 
BB04 [0038]  1       BB03                  8     0 [0CA..0CD)-> BB06 ( cond )                     keep i gcsafe bwd cfb 
BB05 [0039]  1       BB04                  4     0 [0CD..0D4)                                     i hascall gcsafe bwd 
BB06 [0006]  2       BB04,BB05             8     0 [0D4..0DD)-> BB02 ( cond )                     i gcsafe bwd 
BB07 [0008]  2       BB01,BB06             1       [0DD..0F9)                                     i hascall gcsafe 
BB08 [0009]  2       BB07,BB12             8     1 [0F9..102)                                     i Loop gcsafe bwd bwd-target align 
BB09 [0010]  1  1    BB08                  8     1 [102..122)-> BB13 ( cond ) T1      try { }     keep i try hascall gcsafe bwd 
BB10 [0041]  1       BB09                  8     1 [126..129)-> BB12 ( cond )                     keep i gcsafe bwd cfb 
BB11 [0042]  1       BB10                  4     1 [129..130)                                     i hascall gcsafe bwd 
BB12 [0016]  2       BB10,BB11             8     1 [130..139)-> BB08 (always)                     i hascall gcsafe bwd 
BB13 [0030]  1       BB09                  1       [???..???)-> BB30 (callf )                     i internal gcsafe 
BB14 [0031]  1       BB32                  1       [???..???)-> BB15 (ALWAYS)                     i internal gcsafe KEEP 
BB15 [0017]  1       BB14                  1       [139..17D)                                     i hascall gcsafe 
BB16 [0045]  2       BB15,BB25             1     2 [???..???)                                     internal gcsafe 
BB17 [0046]  2       BB16,BB24             1     3 [???..???)                                     internal gcsafe 
BB18 [0047]  2       BB17,BB22             1     4 [???..???)                                     internal gcsafe 
BB19 [0018]  2       BB18,BB20             8     5 [17D..18F)-> BB21 ( cond )                     i Loop hascall gcsafe bwd bwd-target align 
BB20 [0019]  1       BB19                  8     5 [18F..19B)-> BB19 (always)                     i hascall gcsafe bwd 
BB21 [0020]  1       BB19                  1     4 [19B..1A6)-> BB23 ( cond )                     i gcsafe bwd 
BB22 [0021]  1       BB21                  1     4 [1A6..1AD)-> BB18 (always)                     i hascall gcsafe bwd 
BB23 [0022]  1       BB21                  1     3 [1AD..1B8)-> BB25 ( cond )                     i gcsafe bwd 
BB24 [0023]  1       BB23                  1     3 [1B8..1C1)-> BB17 (always)                     i gcsafe bwd 
BB25 [0024]  1       BB23                  1     2 [1C1..1CC)-> BB16 ( cond )                     i gcsafe bwd 
BB26 [0025]  1       BB25                  1       [1CC..1D4)        (return)                     i gcsafe 
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ funclets follow
BB27 [0003]  1     0                       0       [0CA..0CD)-> BB29 ( cond )    H0 F fault {     keep i rare flet bwd 
BB28 [0004]  1     0 BB27                  0       [0CD..0D3)                    H0               i rare hascall bwd 
BB29 [0005]  2     0 BB27,BB28             0       [0D3..0D4)        (finret)    H0   }           i rare bwd 
BB30 [0013]  2     1 BB13                  1       [126..129)-> BB32 ( cond )    H1 F finally {   keep i gcsafe flet bwd 
BB31 [0014]  1     1 BB30                  1       [129..12F)                    H1               i hascall gcsafe bwd 
BB32 [0015]  2     1 BB30,BB31             1       [12F..130)        (finret)    H1   }           i gcsafe bwd 
-----------------------------------------------------------------------------------------------------------------------------------------

------------ BB01 [000..072) -> BB07 (cond), preds={} succs={BB02,BB07}

***** BB01
STMT00000 (IL 0x000...0x005)
N003 ( 18,  8) [000003] -ACXG---R---              *  ASG       struct (copy)
N002 (  3,  2) [000001] D---G--N----              +--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  +--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
N001 ( 14,  5) [000000] --CXG-------              \--*  CALL      struct System.DateTime.get_Now

***** BB01
STMT00001 (IL 0x006...0x022)
N013 ( 53, 36) [000009] --CXG-------              *  CALL      void   System.Console.WriteLine
N012 ( 39, 30) [000008] --CXG------- arg0 in rcx  \--*  CALL      ref    System.String.Concat
N007 ( 17, 10) [000272] -ACXG---R-L- arg0 SETUP      +--*  ASG       ref   
N006 (  1,  1) [000271] D------N----                 |  +--*  LCL_VAR   ref    V21 tmp14        d:2
N005 ( 17, 10) [000006] --CXG-------                 |  \--*  CALL      ref    System.DateTime.ToString
N004 (  3,  3) [000005] ------------ this in rcx     |     \--*  ADDR      byref 
N003 (  3,  2) [000004] ----G--N----                 |        \--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                     |        \--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
N009 (  1,  1) [000273] ------------ arg0 in rcx     +--*  LCL_VAR   ref    V21 tmp14        u:2 (last use)
N011 (  4, 12) [000270] #---G------- arg1 in rdx     \--*  IND       ref   
N010 (  2, 10) [000269] H-----------                    \--*  CNS_INT(h) long   0x750031F0 "	 Created list"

***** BB01
STMT00002 (IL 0x01C...  ???)
N005 ( 16, 16) [000014] -AC-----R---              *  ASG       ref   
N004 (  1,  1) [000013] D------N----              +--*  LCL_VAR   ref    V08 tmp1         d:2
N003 ( 16, 16) [000012] --C---------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
N002 (  2, 10) [000011] H----------- arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb3ee2350 method

***** BB01
STMT00003 (IL   ???...  ???)
N003 ( 15,  8) [000016] --CXG-------              *  CALL      void   FalseLeakRepro.List..ctor
N002 (  1,  1) [000015] ------------ this in rcx  \--*  LCL_VAR   ref    V08 tmp1         u:2

***** BB01
STMT00004 (IL 0x022...  ???)
N006 (  6,  6) [000019] -A-XG-------              *  ASG       ref   
N004 (  4,  4) [000018] D--XG--N----              +--*  IND       ref   
N003 (  2,  2) [000279] -------N----              |  \--*  ADD       byref 
N001 (  1,  1) [000010] ------------              |     +--*  LCL_VAR   ref    V00 this         u:1
N002 (  1,  1) [000278] ------------              |     \--*  CNS_INT   long   8 field offset Fseq[_myList]
N005 (  1,  1) [000017] ------------              \--*  LCL_VAR   ref    V08 tmp1         u:2 (last use)

***** BB01
STMT00005 (IL 0x027...0x037)
N005 ( 16, 16) [000026] -AC-----R---              *  ASG       ref   
N004 (  1,  1) [000025] D------N----              +--*  LCL_VAR   ref    V09 tmp2         d:2
N003 ( 16, 16) [000024] --C---------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
N002 (  2, 10) [000023] H----------- arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb3b058b8 token

***** BB01
STMT00007 (IL   ???...  ???)
N009 (  7,  7) [000030] -A-XG---R---              *  ASG       ref   
N008 (  1,  1) [000029] D------N----              +--*  LCL_VAR   ref    V10 tmp3         d:2
N007 (  7,  7) [000022] ---XG-------              \--*  IND       ref   
N006 (  5,  5) [000282] ---XG--N----                 \--*  ADD       byref 
N004 (  4,  4) [000021] ---XG-------                    +--*  IND       ref   
N003 (  2,  2) [000284] -------N----                    |  \--*  ADD       byref 
N001 (  1,  1) [000020] ------------                    |     +--*  LCL_VAR   ref    V00 this         u:1
N002 (  1,  1) [000283] ------------                    |     \--*  CNS_INT   long   8 field offset Fseq[_myList]
N005 (  1,  1) [000281] ------------                    \--*  CNS_INT   long   8 field offset Fseq[Head]

***** BB01
STMT00006 (IL   ???...  ???)
N003 ( 15,  8) [000028] --CXG-------              *  CALL      void   System.Object..ctor
N002 (  1,  1) [000027] ------------ this in rcx  \--*  LCL_VAR   ref    V09 tmp2         u:2

***** BB01
STMT00008 (IL 0x037...  ???)
N006 (  6,  6) [000034] -A-XG-------              *  ASG       ref   
N004 (  4,  4) [000033] D--XG--N----              +--*  IND       ref   
N003 (  2,  2) [000287] -------N----              |  \--*  ADD       byref 
N001 (  1,  1) [000031] ------------              |     +--*  LCL_VAR   ref    V10 tmp3         u:2 (last use)
N002 (  1,  1) [000286] ------------              |     \--*  CNS_INT   long   16 field offset Fseq[Data]
N005 (  1,  1) [000032] ------------              \--*  LCL_VAR   ref    V09 tmp2         u:2 (last use)

***** BB01
STMT00009 (IL 0x03C...0x057)
N005 ( 16, 16) [000040] -AC-----R---              *  ASG       ref   
N004 (  1,  1) [000039] D------N----              +--*  LCL_VAR   ref    V11 tmp4         d:2
N003 ( 16, 16) [000038] --C---------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
N002 (  2, 10) [000037] H----------- arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb3ee6200 token

***** BB01
STMT00010 (IL   ???...  ???)
N007 ( 18, 21) [000042] --CXG-------              *  CALL      void   System.MulticastDelegate.CtorClosed
N004 (  1,  1) [000041] ------------ this in rcx  +--*  LCL_VAR   ref    V11 tmp4         u:2
N005 (  1,  1) [000035] ------------ arg1 in rdx  +--*  LCL_VAR   ref    V00 this         u:1
N006 (  2, 10) [000036] H----------- arg2 in r8   \--*  CNS_INT(h) long   0x7ffdb3b213f8 ftn

***** BB01
STMT00011 (IL 0x048...  ???)
N005 ( 16, 16) [000047] -AC-----R---              *  ASG       ref   
N004 (  1,  1) [000046] D------N----              +--*  LCL_VAR   ref    V12 tmp5         d:2
N003 ( 16, 16) [000045] --C---------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWFAST
N002 (  2, 10) [000044] H----------- arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb3c84e80 token

***** BB01
STMT00012 (IL   ???...  ???)
N005 ( 16, 10) [000049] --CXG-------              *  CALL      void   System.Threading.Thread..ctor
N003 (  1,  1) [000048] ------------ this in rcx  +--*  LCL_VAR   ref    V12 tmp5         u:2
N004 (  1,  1) [000043] ------------ arg1 in rdx  \--*  LCL_VAR   ref    V11 tmp4         u:2 (last use)

***** BB01
STMT00013 (IL 0x04D...  ???)
N003 ( 15,  8) [000051] --CXG-------              *  CALL nullcheck void   System.Threading.Thread.Start
N002 (  1,  1) [000050] ------------ this in rcx  \--*  LCL_VAR   ref    V12 tmp5         u:2 (last use)

***** BB01
STMT00014 (IL 0x052...  ???)
N003 ( 18,  8) [000055] -ACXG---R---              *  ASG       struct (copy)
N002 (  3,  2) [000053] D---G--N----              +--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  +--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
N001 ( 14,  5) [000052] --CXG-------              \--*  CALL      struct System.DateTime.get_Now

***** BB01
STMT00015 (IL 0x058...0x06F)
N013 ( 53, 36) [000061] --CXG-------              *  CALL      void   System.Console.WriteLine
N012 ( 39, 30) [000060] --CXG------- arg0 in rcx  \--*  CALL      ref    System.String.Concat
N007 ( 17, 10) [000300] -ACXG---R-L- arg0 SETUP      +--*  ASG       ref   
N006 (  1,  1) [000299] D------N----                 |  +--*  LCL_VAR   ref    V22 tmp15        d:2
N005 ( 17, 10) [000058] --CXG-------                 |  \--*  CALL      ref    System.DateTime.ToString
N004 (  3,  3) [000057] ------------ this in rcx     |     \--*  ADDR      byref 
N003 (  3,  2) [000056] ----G--N----                 |        \--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                     |        \--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
N009 (  1,  1) [000301] ------------ arg0 in rcx     +--*  LCL_VAR   ref    V22 tmp15        u:2 (last use)
N011 (  4, 12) [000298] #---G------- arg1 in rdx     \--*  IND       ref   
N010 (  2, 10) [000297] H-----------                    \--*  CNS_INT(h) long   0x750031F8 "	 Consumer thread started, adding items..."

***** BB01
STMT00016 (IL 0x06E...  ???)
N003 (  1,  3) [000064] -A------R---              *  ASG       int   
N002 (  1,  1) [000063] D------N----              +--*  LCL_VAR   int    V03 loc1         d:2
N001 (  1,  1) [000062] ------------              \--*  CNS_INT   int    0

***** BB01
STMT00072 (IL 0x0D8...  ???)
N004 (  5,  5) [000390] ------------              *  JTRUE     void  
N003 (  3,  3) [000391] J------N----              \--*  GE        int   
N001 (  1,  1) [000392] ------------                 +--*  LCL_VAR   int    V03 loc1         u:2
N002 (  1,  1) [000393] ------------                 \--*  CNS_INT   int    10

------------ BB02 [072..07B), preds={BB01,BB06} succs={BB03}

***** BB02
STMT00074 (IL   ???...  ???)
N005 (  0,  0) [000399] -A------R---              *  ASG       int   
N004 (  0,  0) [000397] D------N----              +--*  LCL_VAR   int    V03 loc1         d:3
N003 (  0,  0) [000398] ------------              \--*  PHI       int   
N001 (  0,  0) [000401] ------------ pred BB06       +--*  PHI_ARG   int    V03 loc1         u:4
N002 (  0,  0) [000400] ------------ pred BB01       \--*  PHI_ARG   int    V03 loc1         u:2

***** BB02
STMT00018 (IL 0x072...0x078)
N006 (  4,  4) [000072] -A-XG---R---              *  ASG       ref   
N005 (  1,  1) [000071] D------N----              +--*  LCL_VAR   ref    V04 loc2         d:3
N004 (  4,  4) [000070] ---XG-------              \--*  IND       ref   
N003 (  2,  2) [000305] -------N----                 \--*  ADD       byref 
N001 (  1,  1) [000069] ------------                    +--*  LCL_VAR   ref    V00 this         u:1
N002 (  1,  1) [000304] ------------                    \--*  CNS_INT   long   8 field offset Fseq[_myList]

***** BB02
STMT00019 (IL 0x079...0x07A)
N003 (  5,  4) [000075] -A--G---R---              *  ASG       int   
N002 (  3,  2) [000074] D---G--N----              +--*  LCL_VAR   int   (AX) V05 loc3         
N001 (  1,  1) [000073] ------------              \--*  CNS_INT   int    0

------------ BB03 [07B..0CA), preds={BB02} succs={BB04}

***** BB03
STMT00020 (IL 0x07B...0x093)
N005 ( 18, 11) [000079] --CXG-------              *  CALL      void   System.Threading.Monitor.Enter
N003 (  3,  3) [000078] ------------ arg1 in rdx  +--*  LCL_VAR_ADDR long   V05 loc3         
N004 (  1,  1) [000076] ------------ arg0 in rcx  \--*  LCL_VAR   ref    V04 loc2         u:3

***** BB03
STMT00021 (IL 0x083...  ???)
N005 ( 16, 16) [000086] -AC-----R---              *  ASG       ref   
N004 (  1,  1) [000085] D------N----              +--*  LCL_VAR   ref    V13 tmp6         d:2
N003 ( 16, 16) [000084] --C---------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
N002 (  2, 10) [000083] H----------- arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb3ee58a8 method

***** BB03
STMT00023 (IL   ???...  ???)
N009 (  7,  7) [000090] -A-XG---R---              *  ASG       ref   
N008 (  1,  1) [000089] D------N----              +--*  LCL_VAR   ref    V14 tmp7         d:2
N007 (  7,  7) [000082] ---XG-------              \--*  IND       ref   
N006 (  5,  5) [000310] ---XG--N----                 \--*  ADD       byref 
N004 (  4,  4) [000081] ---XG-------                    +--*  IND       ref   
N003 (  2,  2) [000312] -------N----                    |  \--*  ADD       byref 
N001 (  1,  1) [000080] ------------                    |     +--*  LCL_VAR   ref    V00 this         u:1
N002 (  1,  1) [000311] ------------                    |     \--*  CNS_INT   long   8 field offset Fseq[_myList]
N005 (  1,  1) [000309] ------------                    \--*  CNS_INT   long   8 field offset Fseq[Head]

***** BB03
STMT00065 (IL   ???...  ???)
N003 ( 15,  8) [000230] --CXG-------              *  CALL      void   System.Object..ctor
N002 (  1,  1) [000087] ------------ this in rcx  \--*  LCL_VAR   ref    V13 tmp6         u:2

***** BB03
STMT00024 (IL 0x093...  ???)
N006 (  6,  6) [000094] -A-XG-------              *  ASG       ref   
N004 (  4,  4) [000093] D--XG--N----              +--*  IND       ref   
N003 (  2,  2) [000315] -------N----              |  \--*  ADD       byref 
N001 (  1,  1) [000091] ------------              |     +--*  LCL_VAR   ref    V14 tmp7         u:2 (last use)
N002 (  1,  1) [000314] ------------              |     \--*  CNS_INT   long   8 field offset Fseq[Next]
N005 (  1,  1) [000092] ------------              \--*  LCL_VAR   ref    V13 tmp6         u:2 (last use)

***** BB03
STMT00025 (IL 0x098...0x0AE)
N018 ( 18, 18) [000102] -A-XG-------              *  ASG       ref   
N007 (  7,  7) [000101] D--XG--N----              +--*  IND       ref   
N006 (  5,  5) [000317] ---XG--N----              |  \--*  ADD       byref 
N004 (  4,  4) [000096] ---XG-------              |     +--*  IND       ref   
N003 (  2,  2) [000319] -------N----              |     |  \--*  ADD       byref 
N001 (  1,  1) [000095] ------------              |     |     +--*  LCL_VAR   ref    V00 this         u:1
N002 (  1,  1) [000318] ------------              |     |     \--*  CNS_INT   long   8 field offset Fseq[_myList]
N005 (  1,  1) [000316] ------------              |     \--*  CNS_INT   long   8 field offset Fseq[Head]
N017 ( 10, 10) [000100] ---XG-------              \--*  IND       ref   
N016 (  8,  8) [000321] ---XG--N----                 \--*  ADD       byref 
N014 (  7,  7) [000099] ---XG-------                    +--*  IND       ref   
N013 (  5,  5) [000323] ---XG--N----                    |  \--*  ADD       byref 
N011 (  4,  4) [000098] ---XG-------                    |     +--*  IND       ref   
N010 (  2,  2) [000325] -------N----                    |     |  \--*  ADD       byref 
N008 (  1,  1) [000097] ------------                    |     |     +--*  LCL_VAR   ref    V00 this         u:1
N009 (  1,  1) [000324] ------------                    |     |     \--*  CNS_INT   long   8 field offset Fseq[_myList]
N012 (  1,  1) [000322] ------------                    |     \--*  CNS_INT   long   8 field offset Fseq[Head]
N015 (  1,  1) [000320] ------------                    \--*  CNS_INT   long   8 field offset Fseq[Next]

***** BB03
STMT00026 (IL 0x0B3...0x0C3)
N005 ( 16, 16) [000109] -AC-----R---              *  ASG       ref   
N004 (  1,  1) [000108] D------N----              +--*  LCL_VAR   ref    V15 tmp8         d:2
N003 ( 16, 16) [000107] --C---------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
N002 (  2, 10) [000106] H----------- arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb3b058b8 token

***** BB03
STMT00028 (IL   ???...  ???)
N009 (  7,  7) [000113] -A-XG---R---              *  ASG       ref   
N008 (  1,  1) [000112] D------N----              +--*  LCL_VAR   ref    V16 tmp9         d:2
N007 (  7,  7) [000105] ---XG-------              \--*  IND       ref   
N006 (  5,  5) [000328] ---XG--N----                 \--*  ADD       byref 
N004 (  4,  4) [000104] ---XG-------                    +--*  IND       ref   
N003 (  2,  2) [000330] -------N----                    |  \--*  ADD       byref 
N001 (  1,  1) [000103] ------------                    |     +--*  LCL_VAR   ref    V00 this         u:1
N002 (  1,  1) [000329] ------------                    |     \--*  CNS_INT   long   8 field offset Fseq[_myList]
N005 (  1,  1) [000327] ------------                    \--*  CNS_INT   long   8 field offset Fseq[Head]

***** BB03
STMT00027 (IL   ???...  ???)
N003 ( 15,  8) [000111] --CXG-------              *  CALL      void   System.Object..ctor
N002 (  1,  1) [000110] ------------ this in rcx  \--*  LCL_VAR   ref    V15 tmp8         u:2

***** BB03
STMT00029 (IL 0x0C3...  ???)
N006 (  6,  6) [000117] -A-XG-------              *  ASG       ref   
N004 (  4,  4) [000116] D--XG--N----              +--*  IND       ref   
N003 (  2,  2) [000333] -------N----              |  \--*  ADD       byref 
N001 (  1,  1) [000114] ------------              |     +--*  LCL_VAR   ref    V16 tmp9         u:2 (last use)
N002 (  1,  1) [000332] ------------              |     \--*  CNS_INT   long   16 field offset Fseq[Data]
N005 (  1,  1) [000115] ------------              \--*  LCL_VAR   ref    V15 tmp8         u:2 (last use)

------------ BB04 [0CA..0CD) -> BB06 (cond), preds={BB03} succs={BB05,BB06}

***** BB04
STMT00066 (IL   ???...  ???)
N005 (  8,  8) [000254] ----G-------              *  JTRUE     void  
N004 (  6,  6) [000255] J---G--N----              \--*  EQ        int   
N002 (  4,  4) [000334] ----G-------                 +--*  CAST      int <- bool <- int
N001 (  3,  2) [000256] ----G-------                 |  \--*  LCL_VAR   int   (AX) V05 loc3         
N003 (  1,  1) [000257] ------------                 \--*  CNS_INT   int    0

------------ BB05 [0CD..0D4), preds={BB04} succs={BB06}

***** BB05
STMT00067 (IL   ???...  ???)
N003 ( 15,  7) [000258] --CXG-------              *  CALL      void   System.Threading.Monitor.Exit
N002 (  1,  1) [000259] ------------ arg0 in rcx  \--*  LCL_VAR   ref    V04 loc2         u:3 (last use)

------------ BB06 [0D4..0DD) -> BB02 (cond), preds={BB04,BB05} succs={BB07,BB02}

***** BB06
STMT00030 (IL 0x0D4...0x0D7)
N005 (  3,  3) [000122] -A------R---              *  ASG       int   
N004 (  1,  1) [000121] D------N----              +--*  LCL_VAR   int    V03 loc1         d:4
N003 (  3,  3) [000120] ------------              \--*  ADD       int   
N001 (  1,  1) [000118] ------------                 +--*  LCL_VAR   int    V03 loc1         u:3 (last use)
N002 (  1,  1) [000119] ------------                 \--*  CNS_INT   int    1

***** BB06
STMT00017 (IL 0x0D8...0x0DB)
N004 (  5,  5) [000068] ------------              *  JTRUE     void  
N003 (  3,  3) [000067] J------N----              \--*  LT        int   
N001 (  1,  1) [000065] ------------                 +--*  LCL_VAR   int    V03 loc1         u:4
N002 (  1,  1) [000066] ------------                 \--*  CNS_INT   int    10

------------ BB07 [0DD..0F9), preds={BB01,BB06} succs={BB08}

***** BB07
STMT00034 (IL 0x0DD...0x0E2)
N003 ( 18,  8) [000133] -ACXG---R---              *  ASG       struct (copy)
N002 (  3,  2) [000131] D---G--N----              +--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  +--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
N001 ( 14,  5) [000130] --CXG-------              \--*  CALL      struct System.DateTime.get_Now

***** BB07
STMT00035 (IL 0x0E3...0x0F4)
N013 ( 53, 36) [000139] --CXG-------              *  CALL      void   System.Console.WriteLine
N012 ( 39, 30) [000138] --CXG------- arg0 in rcx  \--*  CALL      ref    System.String.Concat
N007 ( 17, 10) [000342] -ACXG---R-L- arg0 SETUP      +--*  ASG       ref   
N006 (  1,  1) [000341] D------N----                 |  +--*  LCL_VAR   ref    V23 tmp16        d:2
N005 ( 17, 10) [000136] --CXG-------                 |  \--*  CALL      ref    System.DateTime.ToString
N004 (  3,  3) [000135] ------------ this in rcx     |     \--*  ADDR      byref 
N003 (  3,  2) [000134] ----G--N----                 |        \--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                     |        \--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
N009 (  1,  1) [000343] ------------ arg0 in rcx     +--*  LCL_VAR   ref    V23 tmp16        u:2 (last use)
N011 (  4, 12) [000340] #---G------- arg1 in rdx     \--*  IND       ref   
N010 (  2, 10) [000339] H-----------                    \--*  CNS_INT(h) long   0x75003200 "	 Waiting for list processing to complete..."

------------ BB08 [0F9..102), preds={BB07,BB12} succs={BB09}

***** BB08
STMT00036 (IL 0x0F9...0x0FF)
N006 (  4,  4) [000143] -A-XG---R---              *  ASG       ref   
N005 (  1,  1) [000142] D------N----              +--*  LCL_VAR   ref    V04 loc2         d:2
N004 (  4,  4) [000141] ---XG-------              \--*  IND       ref   
N003 (  2,  2) [000347] -------N----                 \--*  ADD       byref 
N001 (  1,  1) [000140] ------------                    +--*  LCL_VAR   ref    V00 this         u:1
N002 (  1,  1) [000346] ------------                    \--*  CNS_INT   long   8 field offset Fseq[_myList]

***** BB08
STMT00037 (IL 0x100...0x101)
N003 (  5,  4) [000146] -A--G---R---              *  ASG       int   
N002 (  3,  2) [000145] D---G--N----              +--*  LCL_VAR   int   (AX) V05 loc3         
N001 (  1,  1) [000144] ------------              \--*  CNS_INT   int    0

------------ BB09 [102..122) -> BB13 (cond), preds={BB08} succs={BB10,BB13}

***** BB09
STMT00038 (IL 0x102...0x120)
N005 ( 18, 11) [000150] --CXG-------              *  CALL      void   System.Threading.Monitor.Enter
N003 (  3,  3) [000149] ------------ arg1 in rdx  +--*  LCL_VAR_ADDR long   V05 loc3         
N004 (  1,  1) [000147] ------------ arg0 in rcx  \--*  LCL_VAR   ref    V04 loc2         u:2

***** BB09
STMT00039 (IL 0x10A...  ???)
N016 ( 17, 17) [000158] ---XG-------              *  JTRUE     void  
N015 ( 15, 15) [000157] N--XG--N-U--              \--*  EQ        int   
N007 (  7,  7) [000153] ---XG-------                 +--*  IND       ref   
N006 (  5,  5) [000351] ---XG--N----                 |  \--*  ADD       byref 
N004 (  4,  4) [000152] ---XG-------                 |     +--*  IND       ref   
N003 (  2,  2) [000353] -------N----                 |     |  \--*  ADD       byref 
N001 (  1,  1) [000151] ------------                 |     |     +--*  LCL_VAR   ref    V00 this         u:1
N002 (  1,  1) [000352] ------------                 |     |     \--*  CNS_INT   long   8 field offset Fseq[_myList]
N005 (  1,  1) [000350] ------------                 |     \--*  CNS_INT   long   8 field offset Fseq[Head]
N014 (  7,  7) [000156] ---XG-------                 \--*  IND       ref   
N013 (  5,  5) [000355] ---XG--N----                    \--*  ADD       byref 
N011 (  4,  4) [000155] ---XG-------                       +--*  IND       ref   
N010 (  2,  2) [000357] -------N----                       |  \--*  ADD       byref 
N008 (  1,  1) [000154] ------------                       |     +--*  LCL_VAR   ref    V00 this         u:1
N009 (  1,  1) [000356] ------------                       |     \--*  CNS_INT   long   8 field offset Fseq[_myList]
N012 (  1,  1) [000354] ------------                       \--*  CNS_INT   long   16 field offset Fseq[Tail]

------------ BB10 [126..129) -> BB12 (cond), preds={BB09} succs={BB11,BB12}

***** BB10
STMT00069 (IL   ???...  ???)
N005 (  8,  8) [000261] ----G-------              *  JTRUE     void  
N004 (  6,  6) [000262] J---G--N----              \--*  EQ        int   
N002 (  4,  4) [000358] ----G-------                 +--*  CAST      int <- bool <- int
N001 (  3,  2) [000263] ----G-------                 |  \--*  LCL_VAR   int   (AX) V05 loc3         
N003 (  1,  1) [000264] ------------                 \--*  CNS_INT   int    0

------------ BB11 [129..130), preds={BB10} succs={BB12}

***** BB11
STMT00070 (IL   ???...  ???)
N003 ( 15,  7) [000265] --CXG-------              *  CALL      void   System.Threading.Monitor.Exit
N002 (  1,  1) [000266] ------------ arg0 in rcx  \--*  LCL_VAR   ref    V04 loc2         u:2 (last use)

------------ BB12 [130..139) -> BB08 (always), preds={BB10,BB11} succs={BB08}

***** BB12
STMT00040 (IL 0x130...0x137)
N003 ( 15,  7) [000160] --CXG-------              *  CALL      void   System.Threading.Thread.Sleep
N002 (  1,  1) [000159] ------------ arg0 in rcx  \--*  CNS_INT   int    100

------------ BB13 [???..???) -> BB30 (callf), preds={BB09} succs={BB30}

------------ BB14 [???..???) -> BB15 (ALWAYS), preds={BB32} succs={BB15}

------------ BB15 [139..17D), preds={BB14} succs={BB16}

***** BB15
STMT00041 (IL 0x139...0x13E)
N003 ( 18,  8) [000164] -ACXG---R---              *  ASG       struct (copy)
N002 (  3,  2) [000162] D---G--N----              +--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  +--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
N001 ( 14,  5) [000161] --CXG-------              \--*  CALL      struct System.DateTime.get_Now

***** BB15
STMT00042 (IL 0x13F...0x178)
N013 ( 53, 36) [000170] --CXG-------              *  CALL      void   System.Console.WriteLine
N012 ( 39, 30) [000169] --CXG------- arg0 in rcx  \--*  CALL      ref    System.String.Concat
N007 ( 17, 10) [000367] -ACXG---R-L- arg0 SETUP      +--*  ASG       ref   
N006 (  1,  1) [000366] D------N----                 |  +--*  LCL_VAR   ref    V24 tmp17        d:2
N005 ( 17, 10) [000167] --CXG-------                 |  \--*  CALL      ref    System.DateTime.ToString
N004 (  3,  3) [000166] ------------ this in rcx     |     \--*  ADDR      byref 
N003 (  3,  2) [000165] ----G--N----                 |        \--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                     |        \--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
N009 (  1,  1) [000368] ------------ arg0 in rcx     +--*  LCL_VAR   ref    V24 tmp17        u:2 (last use)
N011 (  4, 12) [000365] #---G------- arg1 in rdx     \--*  IND       ref   
N010 (  2, 10) [000364] H-----------                    \--*  CNS_INT(h) long   0x75003208 "	 Done.  Profiler is active, available options:"

***** BB15
STMT00043 (IL 0x155...  ???)
N004 ( 18, 18) [000172] --CXG-------              *  CALL      void   System.Console.WriteLine
N003 (  4, 12) [000372] #---G------- arg0 in rcx  \--*  IND       ref   
N002 (  2, 10) [000371] H-----------                 \--*  CNS_INT(h) long   0x75003210 "   Q = quit"

***** BB15
STMT00044 (IL 0x15F...  ???)
N004 ( 18, 18) [000174] --CXG-------              *  CALL      void   System.Console.WriteLine
N003 (  4, 12) [000375] #---G------- arg0 in rcx  \--*  IND       ref   
N002 (  2, 10) [000374] H-----------                 \--*  CNS_INT(h) long   0x75003218 "   H = heap snapshot"

***** BB15
STMT00045 (IL 0x169...  ???)
N004 ( 18, 18) [000176] --CXG-------              *  CALL      void   System.Console.WriteLine
N003 (  4, 12) [000378] #---G------- arg0 in rcx  \--*  IND       ref   
N002 (  2, 10) [000377] H-----------                 \--*  CNS_INT(h) long   0x75003220 "   G = GC (max gen)"

***** BB15
STMT00046 (IL 0x173...  ???)
N004 ( 18, 18) [000178] --CXG-------              *  CALL      void   System.Console.WriteLine
N003 (  4, 12) [000381] #---G------- arg0 in rcx  \--*  IND       ref   
N002 (  2, 10) [000380] H-----------                 \--*  CNS_INT(h) long   0x75003228 "   R = clear the running flag to stop the consumer thread"

------------ BB16 [???..???), preds={BB15,BB25} succs={BB17}

------------ BB17 [???..???), preds={BB16,BB24} succs={BB18}

------------ BB18 [???..???), preds={BB17,BB22} succs={BB19}

------------ BB19 [17D..18F) -> BB21 (cond), preds={BB18,BB20} succs={BB20,BB21}

***** BB19
STMT00048 (IL   ???...  ???)
N006 ( 18, 11) [000233] S-CXG-------              *  CALL      void   System.ConsolePal.ReadKey
N004 (  3,  3) [000235] ------------ arg0 in rcx  +--*  ADDR      long  
N003 (  3,  2) [000236] ----G--N----              |  \--*  LCL_VAR   struct<System.ConsoleKeyInfo, 12>(AX)(P) V06 loc4         
                                                  |  \--*    ushort V06._keyChar (offs=0x00) -> V18 tmp11        
                                                  |  \--*    int    V06._key (offs=0x04) -> V19 tmp12        
                                                  |  \--*    int    V06._mods (offs=0x08) -> V20 tmp13        
N005 (  1,  1) [000232] ------------ arg1 in rdx  \--*  CNS_INT   int    0

***** BB19
STMT00050 (IL   ???...  ???)
N004 (  7,  6) [000189] ----G-------              *  JTRUE     void  
N003 (  5,  4) [000188] N---G--N-U--              \--*  NE        int   
N001 (  3,  2) [000240] ----G-------                 +--*  LCL_VAR   int   (AX) V19 tmp12        
N002 (  1,  1) [000187] ------------                 \--*  CNS_INT   int    71

------------ BB20 [18F..19B) -> BB19 (always), preds={BB19} succs={BB19}

***** BB20
STMT00061 (IL 0x18F...0x199)
N003 ( 28, 11) [000222] --CXG-------              *  CALL      void   System.GC.Collect
N002 ( 14,  5) [000221] --CXG------- arg0 in rcx  \--*  CALL      int    System.GC.get_MaxGeneration

------------ BB21 [19B..1A6) -> BB23 (cond), preds={BB19} succs={BB22,BB23}

***** BB21
STMT00052 (IL   ???...  ???)
N004 (  7,  6) [000196] ----G-------              *  JTRUE     void  
N003 (  5,  4) [000195] N---G--N-U--              \--*  NE        int   
N001 (  3,  2) [000244] ----G-------                 +--*  LCL_VAR   int   (AX) V19 tmp12        
N002 (  1,  1) [000194] ------------                 \--*  CNS_INT   int    72

------------ BB22 [1A6..1AD) -> BB18 (always), preds={BB21} succs={BB18}

***** BB22
STMT00060 (IL 0x1A6...0x1AB)
N001 ( 14,  5) [000220] --CXG-------              *  CALL      void   System.Diagnostics.Debugger.Break

------------ BB23 [1AD..1B8) -> BB25 (cond), preds={BB21} succs={BB24,BB25}

***** BB23
STMT00054 (IL   ???...  ???)
N004 (  7,  6) [000203] ----G-------              *  JTRUE     void  
N003 (  5,  4) [000202] N---G--N-U--              \--*  NE        int   
N001 (  3,  2) [000248] ----G-------                 +--*  LCL_VAR   int   (AX) V19 tmp12        
N002 (  1,  1) [000201] ------------                 \--*  CNS_INT   int    82

------------ BB24 [1B8..1C1) -> BB17 (always), preds={BB23} succs={BB17}

***** BB24
STMT00059 (IL 0x1B8...0x1BA)
N006 (  7,  7) [000219] -A-XG-------              *  ASG       bool  
N004 (  5,  5) [000218] D--XG--N----              +--*  IND       bool  
N003 (  2,  2) [000387] -------N----              |  \--*  ADD       byref 
N001 (  1,  1) [000216] ------------              |     +--*  LCL_VAR   ref    V00 this         u:1
N002 (  1,  1) [000386] ------------              |     \--*  CNS_INT   long   16 field offset Fseq[_running]
N005 (  1,  1) [000217] ------------              \--*  CNS_INT   int    0

------------ BB25 [1C1..1CC) -> BB16 (cond), preds={BB23} succs={BB26,BB16}

***** BB25
STMT00056 (IL   ???...  ???)
N004 (  7,  6) [000210] ----G-------              *  JTRUE     void  
N003 (  5,  4) [000209] N---G--N-U--              \--*  NE        int   
N001 (  3,  2) [000252] ----G-------                 +--*  LCL_VAR   int   (AX) V19 tmp12        
N002 (  1,  1) [000208] ------------                 \--*  CNS_INT   int    81

------------ BB26 [1CC..1D4) (return), preds={BB25} succs={}

***** BB26
STMT00057 (IL 0x1CC...0x1CE)
N006 (  7,  7) [000214] -A-XG-------              *  ASG       bool  
N004 (  5,  5) [000213] D--XG--N----              +--*  IND       bool  
N003 (  2,  2) [000389] -------N----              |  \--*  ADD       byref 
N001 (  1,  1) [000211] ------------              |     +--*  LCL_VAR   ref    V00 this         u:1 (last use)
N002 (  1,  1) [000388] ------------              |     \--*  CNS_INT   long   16 field offset Fseq[_running]
N005 (  1,  1) [000212] ------------              \--*  CNS_INT   int    0

***** BB26
STMT00058 (IL 0x1D3...0x1D3)
N001 (  0,  0) [000215] ------------              *  RETURN    void  

------------ BB27 [0CA..0CD) -> BB29 (cond), preds={} succs={BB28,BB29}

***** BB27
STMT00031 (IL 0x0CA...0x0CB)
N005 (  8,  8) [000126] ----G-------              *  JTRUE     void  
N004 (  6,  6) [000125] J---G--N----              \--*  EQ        int   
N002 (  4,  4) [000336] ----G-------                 +--*  CAST      int <- bool <- int
N001 (  3,  2) [000123] ----G-------                 |  \--*  LCL_VAR   int   (AX) V05 loc3         
N003 (  1,  1) [000124] ------------                 \--*  CNS_INT   int    0

------------ BB28 [0CD..0D3), preds={BB27} succs={BB29}

***** BB28
STMT00033 (IL 0x0CD...0x0CE)
N003 ( 15,  7) [000129] --CXG-------              *  CALL      void   System.Threading.Monitor.Exit
N002 (  1,  1) [000128] ------------ arg0 in rcx  \--*  LCL_VAR   ref    V04 loc2         u:3 (last use)

------------ BB29 [0D3..0D4) (finret), preds={BB27,BB28} succs={}

***** BB29
STMT00032 (IL 0x0D3...0x0D3)
N001 (  0,  0) [000127] ------------              *  RETFILT   void  

------------ BB30 [126..129) -> BB32 (cond), preds={BB13} succs={BB31,BB32}

***** BB30
STMT00062 (IL 0x126...0x127)
N005 (  8,  8) [000226] ----G-------              *  JTRUE     void  
N004 (  6,  6) [000225] J---G--N----              \--*  EQ        int   
N002 (  4,  4) [000360] ----G-------                 +--*  CAST      int <- bool <- int
N001 (  3,  2) [000223] ----G-------                 |  \--*  LCL_VAR   int   (AX) V05 loc3         
N003 (  1,  1) [000224] ------------                 \--*  CNS_INT   int    0

------------ BB31 [129..12F), preds={BB30} succs={BB32}

***** BB31
STMT00064 (IL 0x129...0x12A)
N003 ( 15,  7) [000229] --CXG-------              *  CALL      void   System.Threading.Monitor.Exit
N002 (  1,  1) [000228] ------------ arg0 in rcx  \--*  LCL_VAR   ref    V04 loc2         u:2 (last use)

------------ BB32 [12F..130) (finret), preds={BB30,BB31} succs={BB14}

***** BB32
STMT00063 (IL 0x12F...0x12F)
N001 (  0,  0) [000227] ------------              *  RETFILT   void  

-------------------------------------------------------------------------------------------------------------------

*************** Finishing PHASE Early Value Propagation

*************** Starting PHASE Do value numbering

*************** In fgValueNumber()
optComputeLoopSideEffects lnum is 0
optComputeLoopSideEffectsOfBlock BB02, mostNestedLoop 0
optComputeLoopSideEffectsOfBlock BB03, mostNestedLoop 0
Removing LOOP_ALIGN flag for L00 that starts at BB02 because loop has a call.
optComputeLoopSideEffectsOfBlock BB04, mostNestedLoop 0
optComputeLoopSideEffectsOfBlock BB05, mostNestedLoop 0
Removing LOOP_ALIGN flag for L00 that starts at BB02 because loop has a call.
optComputeLoopSideEffectsOfBlock BB06, mostNestedLoop 0
optComputeLoopSideEffects lnum is 1
optComputeLoopSideEffectsOfBlock BB08, mostNestedLoop 1
optComputeLoopSideEffectsOfBlock BB09, mostNestedLoop 1
Removing LOOP_ALIGN flag for L01 that starts at BB08 because loop has a call.
optComputeLoopSideEffectsOfBlock BB10, mostNestedLoop 1
optComputeLoopSideEffectsOfBlock BB11, mostNestedLoop 1
Removing LOOP_ALIGN flag for L01 that starts at BB08 because loop has a call.
optComputeLoopSideEffectsOfBlock BB12, mostNestedLoop 1
Removing LOOP_ALIGN flag for L01 that starts at BB08 because loop has a call.
optComputeLoopSideEffects lnum is 2
optComputeLoopSideEffectsOfBlock BB16, mostNestedLoop 2
optComputeLoopSideEffectsOfBlock BB17, mostNestedLoop 3
optComputeLoopSideEffectsOfBlock BB18, mostNestedLoop 4
optComputeLoopSideEffectsOfBlock BB19, mostNestedLoop 5
Removing LOOP_ALIGN flag for L05 that starts at BB19 because loop has a call.
optComputeLoopSideEffectsOfBlock BB20, mostNestedLoop 5
Removing LOOP_ALIGN flag for L05 that starts at BB19 because loop has a call.
Removing LOOP_ALIGN flag for L05 that starts at BB19 because loop has a call.
optComputeLoopSideEffectsOfBlock BB21, mostNestedLoop 4
optComputeLoopSideEffectsOfBlock BB22, mostNestedLoop 4
optComputeLoopSideEffectsOfBlock BB23, mostNestedLoop 3
optComputeLoopSideEffectsOfBlock BB24, mostNestedLoop 3
optComputeLoopSideEffectsOfBlock BB25, mostNestedLoop 2
Memory Initial Value in BB01 is: $81
The SSA definition for ByrefExposed (#1) at start of BB01 is $81 {InitVal($41)}
The SSA definition for GcHeap (#1) at start of BB01 is $81 {InitVal($41)}

***** BB01, STMT00000(before)
N003 ( 18,  8) [000003] -ACXG---R---              *  ASG       struct (copy)
N002 (  3,  2) [000001] D---G--N----              +--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  +--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
N001 ( 14,  5) [000000] --CXG-------              \--*  CALL      struct System.DateTime.get_Now

  fgCurMemoryVN[GcHeap] assigned for CALL at [000000] to VN: $82.
N001 [000000]   CALL      => $c0 {MemOpaque:NotInLoop}
  fgCurMemoryVN[ByrefExposed] assigned for COPYBLK - address-exposed local at [000003] to VN: $101.
N003 [000003]   ASG       => $VN.Void

***** BB01, STMT00000(after)
N003 ( 18,  8) [000003] -ACXG---R---              *  ASG       struct (copy) $VN.Void
N002 (  3,  2) [000001] D---G--N----              +--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  +--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
N001 ( 14,  5) [000000] --CXG-------              \--*  CALL      struct System.DateTime.get_Now $c0

---------

***** BB01, STMT00001(before)
N013 ( 53, 36) [000009] --CXG-------              *  CALL      void   System.Console.WriteLine
N012 ( 39, 30) [000008] --CXG------- arg0 in rcx  \--*  CALL      ref    System.String.Concat
N007 ( 17, 10) [000272] -ACXG---R-L- arg0 SETUP      +--*  ASG       ref   
N006 (  1,  1) [000271] D------N----                 |  +--*  LCL_VAR   ref    V21 tmp14        d:2
N005 ( 17, 10) [000006] --CXG-------                 |  \--*  CALL      ref    System.DateTime.ToString
N004 (  3,  3) [000005] ------------ this in rcx     |     \--*  ADDR      byref 
N003 (  3,  2) [000004] ----G--N----                 |        \--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                     |        \--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
N009 (  1,  1) [000273] ------------ arg0 in rcx     +--*  LCL_VAR   ref    V21 tmp14        u:2 (last use)
N011 (  4, 12) [000270] #---G------- arg1 in rdx     \--*  IND       ref   
N010 (  2, 10) [000269] H-----------                    \--*  CNS_INT(h) long   0x750031F0 "	 Created list"

N001 [000275]   ARGPLACE  => $83 {MemOpaque:NotInLoop}
N002 [000268]   ARGPLACE  => $140 {MemOpaque:NotInLoop}
N003 [000004]   LCL_VAR   V02 loc0         
                                                      long   V02._dateData (offs=0x00) -> V17 tmp10         => $c1 {MemOpaque:NotInLoop}
N004 [000005]   ADDR      => $141 {MemOpaque:NotInLoop}
  fgCurMemoryVN[GcHeap] assigned for CALL at [000006] to VN: $85.
N005 [000006]   CALL      => $84 {MemOpaque:NotInLoop}
N006 [000271]   LCL_VAR   V21 tmp14        d:2 => $84 {MemOpaque:NotInLoop}
N007 [000272]   ASG       => $84 {MemOpaque:NotInLoop}
N008 [000274]   ARGPLACE  => $87 {MemOpaque:NotInLoop}
N009 [000273]   LCL_VAR   V21 tmp14        u:2 (last use) => $84 {MemOpaque:NotInLoop}
N010 [000269]   CNS_INT(h) 0x750031F0 "	 Created list" => $1c0 {Hnd const: 0x0000016D750031F0}
N011 [000270]   IND       => $88 {NonNullIndirect($1c0)}
VN of ARGPLACE tree [000274] updated to $88 {NonNullIndirect($1c0)}
  fgCurMemoryVN[GcHeap] assigned for CALL at [000008] to VN: $8a.
N012 [000008]   CALL      => $89 {MemOpaque:NotInLoop}
VN of ARGPLACE tree [000275] updated to $89 {MemOpaque:NotInLoop}
  fgCurMemoryVN[GcHeap] assigned for CALL at [000009] to VN: $8b.
N013 [000009]   CALL      => $VN.Void

***** BB01, STMT00001(after)
N013 ( 53, 36) [000009] --CXG-------              *  CALL      void   System.Console.WriteLine $VN.Void
N012 ( 39, 30) [000008] --CXG------- arg0 in rcx  \--*  CALL      ref    System.String.Concat $89
N007 ( 17, 10) [000272] -ACXG---R-L- arg0 SETUP      +--*  ASG       ref    $84
N006 (  1,  1) [000271] D------N----                 |  +--*  LCL_VAR   ref    V21 tmp14        d:2 $84
N005 ( 17, 10) [000006] --CXG-------                 |  \--*  CALL      ref    System.DateTime.ToString $84
N004 (  3,  3) [000005] ------------ this in rcx     |     \--*  ADDR      byref  $141
N003 (  3,  2) [000004] ----G--N----                 |        \--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                     |        \--*    long   V02._dateData (offs=0x00) -> V17 tmp10         $c1
N009 (  1,  1) [000273] ------------ arg0 in rcx     +--*  LCL_VAR   ref    V21 tmp14        u:2 (last use) $84
N011 (  4, 12) [000270] #---G------- arg1 in rdx     \--*  IND       ref    $88
N010 (  2, 10) [000269] H-----------                    \--*  CNS_INT(h) long   0x750031F0 "	 Created list" $1c0

---------

***** BB01, STMT00002(before)
N005 ( 16, 16) [000014] -AC-----R---              *  ASG       ref   
N004 (  1,  1) [000013] D------N----              +--*  LCL_VAR   ref    V08 tmp1         d:2
N003 ( 16, 16) [000012] --C---------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
N002 (  2, 10) [000011] H----------- arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb3ee2350 method

N001 [000276]   ARGPLACE  => $200 {MemOpaque:NotInLoop}
N002 [000011]   CNS_INT(h) 0x7ffdb3ee2350 method => $1c1 {Hnd const: 0x00007FFDB3EE2350}
VN of ARGPLACE tree [000276] updated to $1c1 {Hnd const: 0x00007FFDB3EE2350}
N003 [000012]   CALL help => $240 {JitNew($1c1, $8c)}
N004 [000013]   LCL_VAR   V08 tmp1         d:2 => $240 {JitNew($1c1, $8c)}
N005 [000014]   ASG       => $240 {JitNew($1c1, $8c)}

***** BB01, STMT00002(after)
N005 ( 16, 16) [000014] -AC-----R---              *  ASG       ref    $240
N004 (  1,  1) [000013] D------N----              +--*  LCL_VAR   ref    V08 tmp1         d:2 $240
N003 ( 16, 16) [000012] --C---------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST $240
N002 (  2, 10) [000011] H----------- arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb3ee2350 method $1c1

---------

***** BB01, STMT00003(before)
N003 ( 15,  8) [000016] --CXG-------              *  CALL      void   FalseLeakRepro.List..ctor
N002 (  1,  1) [000015] ------------ this in rcx  \--*  LCL_VAR   ref    V08 tmp1         u:2

N001 [000277]   ARGPLACE  => $8e {MemOpaque:NotInLoop}
N002 [000015]   LCL_VAR   V08 tmp1         u:2 => $240 {JitNew($1c1, $8c)}
  fgCurMemoryVN[GcHeap] assigned for CALL at [000016] to VN: $8f.
N003 [000016]   CALL      => $VN.Void

***** BB01, STMT00003(after)
N003 ( 15,  8) [000016] --CXG-------              *  CALL      void   FalseLeakRepro.List..ctor $VN.Void
N002 (  1,  1) [000015] ------------ this in rcx  \--*  LCL_VAR   ref    V08 tmp1         u:2 $240

---------

***** BB01, STMT00004(before)
N006 (  6,  6) [000019] -A-XG-------              *  ASG       ref   
N004 (  4,  4) [000018] D--XG--N----              +--*  IND       ref   
N003 (  2,  2) [000279] -------N----              |  \--*  ADD       byref 
N001 (  1,  1) [000010] ------------              |     +--*  LCL_VAR   ref    V00 this         u:1
N002 (  1,  1) [000278] ------------              |     \--*  CNS_INT   long   8 field offset Fseq[_myList]
N005 (  1,  1) [000017] ------------              \--*  LCL_VAR   ref    V08 tmp1         u:2 (last use)

N001 [000010]   LCL_VAR   V00 this         u:1 => $80 {InitVal($40)}
N002 [000278]   CNS_INT   8 field offset Fseq[_myList] => $280 {LngCns:  8}
N003 [000279]   ADD       => $181 {ADD($80, $280)}
N005 [000017]   LCL_VAR   V08 tmp1         u:2 (last use) => $240 {JitNew($1c1, $8c)}
  VNApplySelectors:
    VNForHandle(_myList) is $1c2, fieldType is ref
    VNForMapSelect($8f, $1c2):ref returns $241 {$8f[$1c2]}
    VNForMapSelect($241, $80):ref returns $242 {$241[$80]}
    VNForMapStore($241, $80, $240):ref in BB01 returns $2c0 {$241[$80 := $240]}
  VNApplySelectorsAssign:
    VNForHandle(_myList) is $1c2, fieldType is ref
    VNForMapStore($8f, $1c2, $2c0):ref in BB01 returns $2c1 {$8f[$1c2 := $2c0]}
  fgCurMemoryVN[GcHeap] assigned for StoreField at [000019] to VN: $2c1.
N006 [000019]   ASG       => $VN.Void

***** BB01, STMT00004(after)
N006 (  6,  6) [000019] -A-XG-------              *  ASG       ref    $VN.Void
N004 (  4,  4) [000018] D--XG--N----              +--*  IND       ref    $240
N003 (  2,  2) [000279] -------N----              |  \--*  ADD       byref  $181
N001 (  1,  1) [000010] ------------              |     +--*  LCL_VAR   ref    V00 this         u:1 $80
N002 (  1,  1) [000278] ------------              |     \--*  CNS_INT   long   8 field offset Fseq[_myList] $280
N005 (  1,  1) [000017] ------------              \--*  LCL_VAR   ref    V08 tmp1         u:2 (last use) $240

---------

***** BB01, STMT00005(before)
N005 ( 16, 16) [000026] -AC-----R---              *  ASG       ref   
N004 (  1,  1) [000025] D------N----              +--*  LCL_VAR   ref    V09 tmp2         d:2
N003 ( 16, 16) [000024] --C---------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
N002 (  2, 10) [000023] H----------- arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb3b058b8 token

N001 [000280]   ARGPLACE  => $201 {MemOpaque:NotInLoop}
N002 [000023]   CNS_INT(h) 0x7ffdb3b058b8 token => $1c3 {Hnd const: 0x00007FFDB3B058B8}
VN of ARGPLACE tree [000280] updated to $1c3 {Hnd const: 0x00007FFDB3B058B8}
N003 [000024]   CALL help => $243 {JitNew($1c3, $90)}
N004 [000025]   LCL_VAR   V09 tmp2         d:2 => $243 {JitNew($1c3, $90)}
N005 [000026]   ASG       => $243 {JitNew($1c3, $90)}

***** BB01, STMT00005(after)
N005 ( 16, 16) [000026] -AC-----R---              *  ASG       ref    $243
N004 (  1,  1) [000025] D------N----              +--*  LCL_VAR   ref    V09 tmp2         d:2 $243
N003 ( 16, 16) [000024] --C---------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST $243
N002 (  2, 10) [000023] H----------- arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb3b058b8 token $1c3

---------

***** BB01, STMT00007(before)
N009 (  7,  7) [000030] -A-XG---R---              *  ASG       ref   
N008 (  1,  1) [000029] D------N----              +--*  LCL_VAR   ref    V10 tmp3         d:2
N007 (  7,  7) [000022] ---XG-------              \--*  IND       ref   
N006 (  5,  5) [000282] ---XG--N----                 \--*  ADD       byref 
N004 (  4,  4) [000021] ---XG-------                    +--*  IND       ref   
N003 (  2,  2) [000284] -------N----                    |  \--*  ADD       byref 
N001 (  1,  1) [000020] ------------                    |     +--*  LCL_VAR   ref    V00 this         u:1
N002 (  1,  1) [000283] ------------                    |     \--*  CNS_INT   long   8 field offset Fseq[_myList]
N005 (  1,  1) [000281] ------------                    \--*  CNS_INT   long   8 field offset Fseq[Head]

N001 [000020]   LCL_VAR   V00 this         u:1 => $80 {InitVal($40)}
N002 [000283]   CNS_INT   8 field offset Fseq[_myList] => $280 {LngCns:  8}
N003 [000284]   ADD       => $181 {ADD($80, $280)}
  VNApplySelectors:
    VNForHandle(_myList) is $1c2, fieldType is ref
      AX1: select([$8f]store($2c1, $1c2, $2c0), $1c2) ==> $2c0.
    VNForMapSelect($2c1, $1c2):ref returns $2c0 {$241[$80 := $240]}
      AX1: select([$241]store($2c0, $80, $240), $80) ==> $240.
    VNForMapSelect($2c0, $80):ref returns $240 {JitNew($1c1, $8c)}
N004 [000021]   IND       => <l:$246 {norm=$240 {JitNew($1c1, $8c)}, exc=$244 {NullPtrExc($80)}}, c:$245 {norm=$92 {MemOpaque:NotInLoop}, exc=$244 {NullPtrExc($80)}}>
N005 [000281]   CNS_INT   8 field offset Fseq[Head] => $280 {LngCns:  8}
N006 [000282]   ADD       => <l:$185 {norm=$183 {ADD($240, $280)}, exc=$244 {NullPtrExc($80)}}, c:$184 {norm=$182 {ADD($92, $280)}, exc=$244 {NullPtrExc($80)}}>
  VNApplySelectors:
    VNForHandle(Head) is $1c4, fieldType is ref
      AX2: $1c4 != $1c2 ==> select([$2c1]store($8f, $1c2, $2c0), $1c4) ==> select($8f, $1c4) remaining budget is 99.
    VNForMapSelect($2c1, $1c4):ref returns $247 {$8f[$1c4]}
    VNForMapSelect($247, $240):ref returns $248 {$247[$240]}
N007 [000022]   IND       => <l:$250 {norm=$248 {$247[$240]}, exc=$24e( {NullPtrExc($80)},  {NullPtrExc($183)})}, c:$24f {norm=$94 {MemOpaque:NotInLoop}, exc=$24d( {NullPtrExc($80)},  {NullPtrExc($182)})}>
N008 [000029]   LCL_VAR   V10 tmp3         d:2 => <l:$248 {$247[$240]}, c:$94 {MemOpaque:NotInLoop}>
N009 [000030]   ASG       => <l:$250 {norm=$248 {$247[$240]}, exc=$24e( {NullPtrExc($80)},  {NullPtrExc($183)})}, c:$24f {norm=$94 {MemOpaque:NotInLoop}, exc=$24d( {NullPtrExc($80)},  {NullPtrExc($182)})}>

***** BB01, STMT00007(after)
N009 (  7,  7) [000030] -A-XG---R---              *  ASG       ref    <l:$250, c:$24f>
N008 (  1,  1) [000029] D------N----              +--*  LCL_VAR   ref    V10 tmp3         d:2 <l:$248, c:$94>
N007 (  7,  7) [000022] ---XG-------              \--*  IND       ref    <l:$250, c:$24f>
N006 (  5,  5) [000282] ---XG--N----                 \--*  ADD       byref  <l:$185, c:$184>
N004 (  4,  4) [000021] ---XG-------                    +--*  IND       ref    <l:$246, c:$245>
N003 (  2,  2) [000284] -------N----                    |  \--*  ADD       byref  $181
N001 (  1,  1) [000020] ------------                    |     +--*  LCL_VAR   ref    V00 this         u:1 $80
N002 (  1,  1) [000283] ------------                    |     \--*  CNS_INT   long   8 field offset Fseq[_myList] $280
N005 (  1,  1) [000281] ------------                    \--*  CNS_INT   long   8 field offset Fseq[Head] $280

---------

***** BB01, STMT00006(before)
N003 ( 15,  8) [000028] --CXG-------              *  CALL      void   System.Object..ctor
N002 (  1,  1) [000027] ------------ this in rcx  \--*  LCL_VAR   ref    V09 tmp2         u:2

N001 [000285]   ARGPLACE  => $98 {MemOpaque:NotInLoop}
N002 [000027]   LCL_VAR   V09 tmp2         u:2 => $243 {JitNew($1c3, $90)}
  fgCurMemoryVN[GcHeap] assigned for CALL at [000028] to VN: $99.
N003 [000028]   CALL      => $VN.Void

***** BB01, STMT00006(after)
N003 ( 15,  8) [000028] --CXG-------              *  CALL      void   System.Object..ctor $VN.Void
N002 (  1,  1) [000027] ------------ this in rcx  \--*  LCL_VAR   ref    V09 tmp2         u:2 $243

---------

***** BB01, STMT00008(before)
N006 (  6,  6) [000034] -A-XG-------              *  ASG       ref   
N004 (  4,  4) [000033] D--XG--N----              +--*  IND       ref   
N003 (  2,  2) [000287] -------N----              |  \--*  ADD       byref 
N001 (  1,  1) [000031] ------------              |     +--*  LCL_VAR   ref    V10 tmp3         u:2 (last use)
N002 (  1,  1) [000286] ------------              |     \--*  CNS_INT   long   16 field offset Fseq[Data]
N005 (  1,  1) [000032] ------------              \--*  LCL_VAR   ref    V09 tmp2         u:2 (last use)

N001 [000031]   LCL_VAR   V10 tmp3         u:2 (last use) => <l:$248 {$247[$240]}, c:$94 {MemOpaque:NotInLoop}>
N002 [000286]   CNS_INT   16 field offset Fseq[Data] => $281 {LngCns:  16}
N003 [000287]   ADD       => <l:$187 {ADD($248, $281)}, c:$186 {ADD($94, $281)}>
N005 [000032]   LCL_VAR   V09 tmp2         u:2 (last use) => $243 {JitNew($1c3, $90)}
  VNApplySelectors:
    VNForHandle(Data) is $1c5, fieldType is ref
    VNForMapSelect($99, $1c5):ref returns $251 {$99[$1c5]}
    VNForMapSelect($251, $248):ref returns $252 {$251[$248]}
    VNForMapStore($251, $248, $243):ref in BB01 returns $2c2 {$251[$248 := $243]}
  VNApplySelectorsAssign:
    VNForHandle(Data) is $1c5, fieldType is ref
    VNForMapStore($99, $1c5, $2c2):ref in BB01 returns $2c3 {$99[$1c5 := $2c2]}
  fgCurMemoryVN[GcHeap] assigned for StoreField at [000034] to VN: $2c3.
N006 [000034]   ASG       => $VN.Void

***** BB01, STMT00008(after)
N006 (  6,  6) [000034] -A-XG-------              *  ASG       ref    $VN.Void
N004 (  4,  4) [000033] D--XG--N----              +--*  IND       ref    $243
N003 (  2,  2) [000287] -------N----              |  \--*  ADD       byref  <l:$187, c:$186>
N001 (  1,  1) [000031] ------------              |     +--*  LCL_VAR   ref    V10 tmp3         u:2 (last use) <l:$248, c:$94>
N002 (  1,  1) [000286] ------------              |     \--*  CNS_INT   long   16 field offset Fseq[Data] $281
N005 (  1,  1) [000032] ------------              \--*  LCL_VAR   ref    V09 tmp2         u:2 (last use) $243

---------

***** BB01, STMT00009(before)
N005 ( 16, 16) [000040] -AC-----R---              *  ASG       ref   
N004 (  1,  1) [000039] D------N----              +--*  LCL_VAR   ref    V11 tmp4         d:2
N003 ( 16, 16) [000038] --C---------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
N002 (  2, 10) [000037] H----------- arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb3ee6200 token

N001 [000288]   ARGPLACE  => $202 {MemOpaque:NotInLoop}
N002 [000037]   CNS_INT(h) 0x7ffdb3ee6200 token => $1c6 {Hnd const: 0x00007FFDB3EE6200}
VN of ARGPLACE tree [000288] updated to $1c6 {Hnd const: 0x00007FFDB3EE6200}
N003 [000038]   CALL help => $253 {JitNew($1c6, $9a)}
N004 [000039]   LCL_VAR   V11 tmp4         d:2 => $253 {JitNew($1c6, $9a)}
N005 [000040]   ASG       => $253 {JitNew($1c6, $9a)}

***** BB01, STMT00009(after)
N005 ( 16, 16) [000040] -AC-----R---              *  ASG       ref    $253
N004 (  1,  1) [000039] D------N----              +--*  LCL_VAR   ref    V11 tmp4         d:2 $253
N003 ( 16, 16) [000038] --C---------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST $253
N002 (  2, 10) [000037] H----------- arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb3ee6200 token $1c6

---------

***** BB01, STMT00010(before)
N007 ( 18, 21) [000042] --CXG-------              *  CALL      void   System.MulticastDelegate.CtorClosed
N004 (  1,  1) [000041] ------------ this in rcx  +--*  LCL_VAR   ref    V11 tmp4         u:2
N005 (  1,  1) [000035] ------------ arg1 in rdx  +--*  LCL_VAR   ref    V00 this         u:1
N006 (  2, 10) [000036] H----------- arg2 in r8   \--*  CNS_INT(h) long   0x7ffdb3b213f8 ftn

N001 [000289]   ARGPLACE  => $9c {MemOpaque:NotInLoop}
N002 [000290]   ARGPLACE  => $9d {MemOpaque:NotInLoop}
N003 [000291]   ARGPLACE  => $203 {MemOpaque:NotInLoop}
N004 [000041]   LCL_VAR   V11 tmp4         u:2 => $253 {JitNew($1c6, $9a)}
N005 [000035]   LCL_VAR   V00 this         u:1 => $80 {InitVal($40)}
N006 [000036]   CNS_INT(h) 0x7ffdb3b213f8 ftn => $1c7 {Hnd const: 0x00007FFDB3B213F8}
VN of ARGPLACE tree [000290] updated to $253 {JitNew($1c6, $9a)}
VN of ARGPLACE tree [000291] updated to $80 {InitVal($40)}
  fgCurMemoryVN[GcHeap] assigned for CALL at [000042] to VN: $9e.
N007 [000042]   CALL      => $VN.Void

***** BB01, STMT00010(after)
N007 ( 18, 21) [000042] --CXG-------              *  CALL      void   System.MulticastDelegate.CtorClosed $VN.Void
N004 (  1,  1) [000041] ------------ this in rcx  +--*  LCL_VAR   ref    V11 tmp4         u:2 $253
N005 (  1,  1) [000035] ------------ arg1 in rdx  +--*  LCL_VAR   ref    V00 this         u:1 $80
N006 (  2, 10) [000036] H----------- arg2 in r8   \--*  CNS_INT(h) long   0x7ffdb3b213f8 ftn $1c7

---------

***** BB01, STMT00011(before)
N005 ( 16, 16) [000047] -AC-----R---              *  ASG       ref   
N004 (  1,  1) [000046] D------N----              +--*  LCL_VAR   ref    V12 tmp5         d:2
N003 ( 16, 16) [000045] --C---------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWFAST
N002 (  2, 10) [000044] H----------- arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb3c84e80 token

N001 [000292]   ARGPLACE  => $204 {MemOpaque:NotInLoop}
N002 [000044]   CNS_INT(h) 0x7ffdb3c84e80 token => $1c8 {Hnd const: 0x00007FFDB3C84E80}
VN of ARGPLACE tree [000292] updated to $1c8 {Hnd const: 0x00007FFDB3C84E80}
N003 [000045]   CALL help => $254 {JitNew($1c8, $9f)}
N004 [000046]   LCL_VAR   V12 tmp5         d:2 => $254 {JitNew($1c8, $9f)}
N005 [000047]   ASG       => $254 {JitNew($1c8, $9f)}

***** BB01, STMT00011(after)
N005 ( 16, 16) [000047] -AC-----R---              *  ASG       ref    $254
N004 (  1,  1) [000046] D------N----              +--*  LCL_VAR   ref    V12 tmp5         d:2 $254
N003 ( 16, 16) [000045] --C---------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWFAST $254
N002 (  2, 10) [000044] H----------- arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb3c84e80 token $1c8

---------

***** BB01, STMT00012(before)
N005 ( 16, 10) [000049] --CXG-------              *  CALL      void   System.Threading.Thread..ctor
N003 (  1,  1) [000048] ------------ this in rcx  +--*  LCL_VAR   ref    V12 tmp5         u:2
N004 (  1,  1) [000043] ------------ arg1 in rdx  \--*  LCL_VAR   ref    V11 tmp4         u:2 (last use)

N001 [000293]   ARGPLACE  => $a1 {MemOpaque:NotInLoop}
N002 [000294]   ARGPLACE  => $a2 {MemOpaque:NotInLoop}
N003 [000048]   LCL_VAR   V12 tmp5         u:2 => $254 {JitNew($1c8, $9f)}
N004 [000043]   LCL_VAR   V11 tmp4         u:2 (last use) => $253 {JitNew($1c6, $9a)}
VN of ARGPLACE tree [000294] updated to $254 {JitNew($1c8, $9f)}
  fgCurMemoryVN[GcHeap] assigned for CALL at [000049] to VN: $a3.
N005 [000049]   CALL      => $VN.Void

***** BB01, STMT00012(after)
N005 ( 16, 10) [000049] --CXG-------              *  CALL      void   System.Threading.Thread..ctor $VN.Void
N003 (  1,  1) [000048] ------------ this in rcx  +--*  LCL_VAR   ref    V12 tmp5         u:2 $254
N004 (  1,  1) [000043] ------------ arg1 in rdx  \--*  LCL_VAR   ref    V11 tmp4         u:2 (last use) $253

---------

***** BB01, STMT00013(before)
N003 ( 15,  8) [000051] --CXG-------              *  CALL nullcheck void   System.Threading.Thread.Start
N002 (  1,  1) [000050] ------------ this in rcx  \--*  LCL_VAR   ref    V12 tmp5         u:2 (last use)

N001 [000295]   ARGPLACE  => $a4 {MemOpaque:NotInLoop}
N002 [000050]   LCL_VAR   V12 tmp5         u:2 (last use) => $254 {JitNew($1c8, $9f)}
  fgCurMemoryVN[GcHeap] assigned for CALL at [000051] to VN: $a5.
N003 [000051]   CALL nullcheck => $VN.Void

***** BB01, STMT00013(after)
N003 ( 15,  8) [000051] --CXG-------              *  CALL nullcheck void   System.Threading.Thread.Start $VN.Void
N002 (  1,  1) [000050] ------------ this in rcx  \--*  LCL_VAR   ref    V12 tmp5         u:2 (last use) $254

---------

***** BB01, STMT00014(before)
N003 ( 18,  8) [000055] -ACXG---R---              *  ASG       struct (copy)
N002 (  3,  2) [000053] D---G--N----              +--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  +--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
N001 ( 14,  5) [000052] --CXG-------              \--*  CALL      struct System.DateTime.get_Now

  fgCurMemoryVN[GcHeap] assigned for CALL at [000052] to VN: $a6.
N001 [000052]   CALL      => $c2 {MemOpaque:NotInLoop}
  fgCurMemoryVN[ByrefExposed] assigned for COPYBLK - address-exposed local at [000055] to VN: $10d.
N003 [000055]   ASG       => $VN.Void

***** BB01, STMT00014(after)
N003 ( 18,  8) [000055] -ACXG---R---              *  ASG       struct (copy) $VN.Void
N002 (  3,  2) [000053] D---G--N----              +--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  +--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
N001 ( 14,  5) [000052] --CXG-------              \--*  CALL      struct System.DateTime.get_Now $c2

---------

***** BB01, STMT00015(before)
N013 ( 53, 36) [000061] --CXG-------              *  CALL      void   System.Console.WriteLine
N012 ( 39, 30) [000060] --CXG------- arg0 in rcx  \--*  CALL      ref    System.String.Concat
N007 ( 17, 10) [000300] -ACXG---R-L- arg0 SETUP      +--*  ASG       ref   
N006 (  1,  1) [000299] D------N----                 |  +--*  LCL_VAR   ref    V22 tmp15        d:2
N005 ( 17, 10) [000058] --CXG-------                 |  \--*  CALL      ref    System.DateTime.ToString
N004 (  3,  3) [000057] ------------ this in rcx     |     \--*  ADDR      byref 
N003 (  3,  2) [000056] ----G--N----                 |        \--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                     |        \--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
N009 (  1,  1) [000301] ------------ arg0 in rcx     +--*  LCL_VAR   ref    V22 tmp15        u:2 (last use)
N011 (  4, 12) [000298] #---G------- arg1 in rdx     \--*  IND       ref   
N010 (  2, 10) [000297] H-----------                    \--*  CNS_INT(h) long   0x750031F8 "	 Consumer thread started, adding items..."

N001 [000303]   ARGPLACE  => $a7 {MemOpaque:NotInLoop}
N002 [000296]   ARGPLACE  => $142 {MemOpaque:NotInLoop}
N003 [000056]   LCL_VAR   V02 loc0         
                                                      long   V02._dateData (offs=0x00) -> V17 tmp10         => $c3 {MemOpaque:NotInLoop}
N004 [000057]   ADDR      => $143 {MemOpaque:NotInLoop}
  fgCurMemoryVN[GcHeap] assigned for CALL at [000058] to VN: $a9.
N005 [000058]   CALL      => $a8 {MemOpaque:NotInLoop}
N006 [000299]   LCL_VAR   V22 tmp15        d:2 => $a8 {MemOpaque:NotInLoop}
N007 [000300]   ASG       => $a8 {MemOpaque:NotInLoop}
N008 [000302]   ARGPLACE  => $ab {MemOpaque:NotInLoop}
N009 [000301]   LCL_VAR   V22 tmp15        u:2 (last use) => $a8 {MemOpaque:NotInLoop}
N010 [000297]   CNS_INT(h) 0x750031F8 "	 Consumer thread started, adding items..." => $1c9 {Hnd const: 0x0000016D750031F8}
N011 [000298]   IND       => $ac {NonNullIndirect($1c9)}
VN of ARGPLACE tree [000302] updated to $ac {NonNullIndirect($1c9)}
  fgCurMemoryVN[GcHeap] assigned for CALL at [000060] to VN: $ae.
N012 [000060]   CALL      => $ad {MemOpaque:NotInLoop}
VN of ARGPLACE tree [000303] updated to $ad {MemOpaque:NotInLoop}
  fgCurMemoryVN[GcHeap] assigned for CALL at [000061] to VN: $af.
N013 [000061]   CALL      => $VN.Void

***** BB01, STMT00015(after)
N013 ( 53, 36) [000061] --CXG-------              *  CALL      void   System.Console.WriteLine $VN.Void
N012 ( 39, 30) [000060] --CXG------- arg0 in rcx  \--*  CALL      ref    System.String.Concat $ad
N007 ( 17, 10) [000300] -ACXG---R-L- arg0 SETUP      +--*  ASG       ref    $a8
N006 (  1,  1) [000299] D------N----                 |  +--*  LCL_VAR   ref    V22 tmp15        d:2 $a8
N005 ( 17, 10) [000058] --CXG-------                 |  \--*  CALL      ref    System.DateTime.ToString $a8
N004 (  3,  3) [000057] ------------ this in rcx     |     \--*  ADDR      byref  $143
N003 (  3,  2) [000056] ----G--N----                 |        \--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                     |        \--*    long   V02._dateData (offs=0x00) -> V17 tmp10         $c3
N009 (  1,  1) [000301] ------------ arg0 in rcx     +--*  LCL_VAR   ref    V22 tmp15        u:2 (last use) $a8
N011 (  4, 12) [000298] #---G------- arg1 in rdx     \--*  IND       ref    $ac
N010 (  2, 10) [000297] H-----------                    \--*  CNS_INT(h) long   0x750031F8 "	 Consumer thread started, adding items..." $1c9

---------

***** BB01, STMT00016(before)
N003 (  1,  3) [000064] -A------R---              *  ASG       int   
N002 (  1,  1) [000063] D------N----              +--*  LCL_VAR   int    V03 loc1         d:2
N001 (  1,  1) [000062] ------------              \--*  CNS_INT   int    0

N001 [000062]   CNS_INT   0 => $40 {IntCns 0}
N002 [000063]   LCL_VAR   V03 loc1         d:2 => $40 {IntCns 0}
N003 [000064]   ASG       => $40 {IntCns 0}

***** BB01, STMT00016(after)
N003 (  1,  3) [000064] -A------R---              *  ASG       int    $40
N002 (  1,  1) [000063] D------N----              +--*  LCL_VAR   int    V03 loc1         d:2 $40
N001 (  1,  1) [000062] ------------              \--*  CNS_INT   int    0 $40

---------

***** BB01, STMT00072(before)
N004 (  5,  5) [000390] ------------              *  JTRUE     void  
N003 (  3,  3) [000391] J------N----              \--*  GE        int   
N001 (  1,  1) [000392] ------------                 +--*  LCL_VAR   int    V03 loc1         u:2
N002 (  1,  1) [000393] ------------                 \--*  CNS_INT   int    10

N001 [000392]   LCL_VAR   V03 loc1         u:2 => $40 {IntCns 0}
N002 [000393]   CNS_INT   10 => $43 {IntCns 10}
N003 [000391]   GE        => $40 {IntCns 0}

***** BB01, STMT00072(after)
N004 (  5,  5) [000390] ------------              *  JTRUE     void  
N003 (  3,  3) [000391] J------N----              \--*  GE        int    $40
N001 (  1,  1) [000392] ------------                 +--*  LCL_VAR   int    V03 loc1         u:2 $40
N002 (  1,  1) [000393] ------------                 \--*  CNS_INT   int    10 $43

finish(BB01).
   Succ(BB02).
     Not yet completed.
     Not all preds complete  Adding to notallDone, if necessary...
       Was necessary.
   Succ(BB07).
     Not yet completed.
     Not all preds complete  Adding to notallDone, if necessary...
       Was necessary.
SSA PHI definition: set VN of local 3/3 to $380 {PhiDef($3, $3, $340)} .
Computing ByrefExposed state for block BB02, entry block for loops 0 to 0:
  Loop 0 has memory havoc effect; heap state is new unique $b0.
The SSA definition for ByrefExposed (#45) at start of BB02 is $b0 {MemOpaque:L00}
Computing GcHeap state for block BB02, entry block for loops 0 to 0:
  Loop 0 has memory havoc effect; heap state is new unique $b1.
The SSA definition for GcHeap (#46) at start of BB02 is $b1 {MemOpaque:L00}

***** BB02, STMT00018(before)
N006 (  4,  4) [000072] -A-XG---R---              *  ASG       ref   
N005 (  1,  1) [000071] D------N----              +--*  LCL_VAR   ref    V04 loc2         d:3
N004 (  4,  4) [000070] ---XG-------              \--*  IND       ref   
N003 (  2,  2) [000305] -------N----                 \--*  ADD       byref 
N001 (  1,  1) [000069] ------------                    +--*  LCL_VAR   ref    V00 this         u:1
N002 (  1,  1) [000304] ------------                    \--*  CNS_INT   long   8 field offset Fseq[_myList]

N001 [000069]   LCL_VAR   V00 this         u:1 => $80 {InitVal($40)}
N002 [000304]   CNS_INT   8 field offset Fseq[_myList] => $280 {LngCns:  8}
N003 [000305]   ADD       => $181 {ADD($80, $280)}
  VNApplySelectors:
    VNForHandle(_myList) is $1c2, fieldType is ref
    VNForMapSelect($b1, $1c2):ref returns $255 {$b1[$1c2]}
    VNForMapSelect($255, $80):ref returns $256 {$255[$80]}
N004 [000070]   IND       => <l:$258 {norm=$256 {$255[$80]}, exc=$244 {NullPtrExc($80)}}, c:$257 {norm=$b2 {MemOpaque:L00}, exc=$244 {NullPtrExc($80)}}>
N005 [000071]   LCL_VAR   V04 loc2         d:3 => <l:$256 {$255[$80]}, c:$b2 {MemOpaque:L00}>
N006 [000072]   ASG       => <l:$258 {norm=$256 {$255[$80]}, exc=$244 {NullPtrExc($80)}}, c:$257 {norm=$b2 {MemOpaque:L00}, exc=$244 {NullPtrExc($80)}}>

***** BB02, STMT00018(after)
N006 (  4,  4) [000072] -A-XG---R---              *  ASG       ref    <l:$258, c:$257>
N005 (  1,  1) [000071] D------N----              +--*  LCL_VAR   ref    V04 loc2         d:3 <l:$256, c:$b2>
N004 (  4,  4) [000070] ---XG-------              \--*  IND       ref    <l:$258, c:$257>
N003 (  2,  2) [000305] -------N----                 \--*  ADD       byref  $181
N001 (  1,  1) [000069] ------------                    +--*  LCL_VAR   ref    V00 this         u:1 $80
N002 (  1,  1) [000304] ------------                    \--*  CNS_INT   long   8 field offset Fseq[_myList] $280

---------

***** BB02, STMT00019(before)
N003 (  5,  4) [000075] -A--G---R---              *  ASG       int   
N002 (  3,  2) [000074] D---G--N----              +--*  LCL_VAR   int   (AX) V05 loc3         
N001 (  1,  1) [000073] ------------              \--*  CNS_INT   int    0

N001 [000073]   CNS_INT   0 => $40 {IntCns 0}
  fgCurMemoryVN[ByrefExposed] assigned for local assign at [000075] to VN: $111.
N003 [000075]   ASG       => $40 {IntCns 0}

***** BB02, STMT00019(after)
N003 (  5,  4) [000075] -A--G---R---              *  ASG       int    $40
N002 (  3,  2) [000074] D---G--N----              +--*  LCL_VAR   int   (AX) V05 loc3         
N001 (  1,  1) [000073] ------------              \--*  CNS_INT   int    0 $40

finish(BB02).
   Succ(BB03).
     Not yet completed.
     All preds complete, adding to allDone.
   Succ(BB27).
     Not yet completed.
     Not all preds complete  Adding to notallDone, if necessary...
       Was necessary.
The SSA definition for ByrefExposed (#47) at start of BB03 is $111 {MemOpaque:L00}
The SSA definition for GcHeap (#46) at start of BB03 is $b1 {MemOpaque:L00}

***** BB03, STMT00020(before)
N005 ( 18, 11) [000079] --CXG-------              *  CALL      void   System.Threading.Monitor.Enter
N003 (  3,  3) [000078] ------------ arg1 in rdx  +--*  LCL_VAR_ADDR long   V05 loc3         
N004 (  1,  1) [000076] ------------ arg0 in rcx  \--*  LCL_VAR   ref    V04 loc2         u:3

N001 [000307]   ARGPLACE  => $b4 {MemOpaque:L00}
N002 [000306]   ARGPLACE  => $205 {MemOpaque:L00}
N003 [000078]   LCL_VAR_ADDR V05 loc3          => $206 {MemOpaque:L00}
N004 [000076]   LCL_VAR   V04 loc2         u:3 => <l:$256 {$255[$80]}, c:$b2 {MemOpaque:L00}>
VN of ARGPLACE tree [000307] updated to <l:$256 {$255[$80]}, c:$b2 {MemOpaque:L00}>
VN of ARGPLACE tree [000306] updated to $206 {MemOpaque:L00}
  fgCurMemoryVN[GcHeap] assigned for CALL at [000079] to VN: $b5.
N005 [000079]   CALL      => $VN.Void

***** BB03, STMT00020(after)
N005 ( 18, 11) [000079] --CXG-------              *  CALL      void   System.Threading.Monitor.Enter $VN.Void
N003 (  3,  3) [000078] ------------ arg1 in rdx  +--*  LCL_VAR_ADDR long   V05 loc3          $206
N004 (  1,  1) [000076] ------------ arg0 in rcx  \--*  LCL_VAR   ref    V04 loc2         u:3 <l:$256, c:$b2>

---------

***** BB03, STMT00021(before)
N005 ( 16, 16) [000086] -AC-----R---              *  ASG       ref   
N004 (  1,  1) [000085] D------N----              +--*  LCL_VAR   ref    V13 tmp6         d:2
N003 ( 16, 16) [000084] --C---------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
N002 (  2, 10) [000083] H----------- arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb3ee58a8 method

N001 [000308]   ARGPLACE  => $207 {MemOpaque:L00}
N002 [000083]   CNS_INT(h) 0x7ffdb3ee58a8 method => $1ca {Hnd const: 0x00007FFDB3EE58A8}
VN of ARGPLACE tree [000308] updated to $1ca {Hnd const: 0x00007FFDB3EE58A8}
N003 [000084]   CALL help => $259 {JitNew($1ca, $b6)}
N004 [000085]   LCL_VAR   V13 tmp6         d:2 => $259 {JitNew($1ca, $b6)}
N005 [000086]   ASG       => $259 {JitNew($1ca, $b6)}

***** BB03, STMT00021(after)
N005 ( 16, 16) [000086] -AC-----R---              *  ASG       ref    $259
N004 (  1,  1) [000085] D------N----              +--*  LCL_VAR   ref    V13 tmp6         d:2 $259
N003 ( 16, 16) [000084] --C---------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST $259
N002 (  2, 10) [000083] H----------- arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb3ee58a8 method $1ca

---------

***** BB03, STMT00023(before)
N009 (  7,  7) [000090] -A-XG---R---              *  ASG       ref   
N008 (  1,  1) [000089] D------N----              +--*  LCL_VAR   ref    V14 tmp7         d:2
N007 (  7,  7) [000082] ---XG-------              \--*  IND       ref   
N006 (  5,  5) [000310] ---XG--N----                 \--*  ADD       byref 
N004 (  4,  4) [000081] ---XG-------                    +--*  IND       ref   
N003 (  2,  2) [000312] -------N----                    |  \--*  ADD       byref 
N001 (  1,  1) [000080] ------------                    |     +--*  LCL_VAR   ref    V00 this         u:1
N002 (  1,  1) [000311] ------------                    |     \--*  CNS_INT   long   8 field offset Fseq[_myList]
N005 (  1,  1) [000309] ------------                    \--*  CNS_INT   long   8 field offset Fseq[Head]

N001 [000080]   LCL_VAR   V00 this         u:1 => $80 {InitVal($40)}
N002 [000311]   CNS_INT   8 field offset Fseq[_myList] => $280 {LngCns:  8}
N003 [000312]   ADD       => $181 {ADD($80, $280)}
  VNApplySelectors:
    VNForHandle(_myList) is $1c2, fieldType is ref
    VNForMapSelect($b5, $1c2):ref returns $25a {$b5[$1c2]}
    VNForMapSelect($25a, $80):ref returns $25b {$25a[$80]}
N004 [000081]   IND       => <l:$25d {norm=$25b {$25a[$80]}, exc=$244 {NullPtrExc($80)}}, c:$25c {norm=$b8 {MemOpaque:L00}, exc=$244 {NullPtrExc($80)}}>
N005 [000309]   CNS_INT   8 field offset Fseq[Head] => $280 {LngCns:  8}
N006 [000310]   ADD       => <l:$18b {norm=$189 {ADD($25b, $280)}, exc=$244 {NullPtrExc($80)}}, c:$18a {norm=$188 {ADD($b8, $280)}, exc=$244 {NullPtrExc($80)}}>
  VNApplySelectors:
    VNForHandle(Head) is $1c4, fieldType is ref
    VNForMapSelect($b5, $1c4):ref returns $25e {$b5[$1c4]}
    VNForMapSelect($25e, $25b):ref returns $25f {$25e[$25b]}
N007 [000082]   IND       => <l:$267 {norm=$25f {$25e[$25b]}, exc=$265( {NullPtrExc($80)},  {NullPtrExc($189)})}, c:$266 {norm=$b9 {MemOpaque:L00}, exc=$264( {NullPtrExc($80)},  {NullPtrExc($188)})}>
N008 [000089]   LCL_VAR   V14 tmp7         d:2 => <l:$25f {$25e[$25b]}, c:$b9 {MemOpaque:L00}>
N009 [000090]   ASG       => <l:$267 {norm=$25f {$25e[$25b]}, exc=$265( {NullPtrExc($80)},  {NullPtrExc($189)})}, c:$266 {norm=$b9 {MemOpaque:L00}, exc=$264( {NullPtrExc($80)},  {NullPtrExc($188)})}>

***** BB03, STMT00023(after)
N009 (  7,  7) [000090] -A-XG---R---              *  ASG       ref    <l:$267, c:$266>
N008 (  1,  1) [000089] D------N----              +--*  LCL_VAR   ref    V14 tmp7         d:2 <l:$25f, c:$b9>
N007 (  7,  7) [000082] ---XG-------              \--*  IND       ref    <l:$267, c:$266>
N006 (  5,  5) [000310] ---XG--N----                 \--*  ADD       byref  <l:$18b, c:$18a>
N004 (  4,  4) [000081] ---XG-------                    +--*  IND       ref    <l:$25d, c:$25c>
N003 (  2,  2) [000312] -------N----                    |  \--*  ADD       byref  $181
N001 (  1,  1) [000080] ------------                    |     +--*  LCL_VAR   ref    V00 this         u:1 $80
N002 (  1,  1) [000311] ------------                    |     \--*  CNS_INT   long   8 field offset Fseq[_myList] $280
N005 (  1,  1) [000309] ------------                    \--*  CNS_INT   long   8 field offset Fseq[Head] $280

---------

***** BB03, STMT00065(before)
N003 ( 15,  8) [000230] --CXG-------              *  CALL      void   System.Object..ctor
N002 (  1,  1) [000087] ------------ this in rcx  \--*  LCL_VAR   ref    V13 tmp6         u:2

N001 [000313]   ARGPLACE  => $bd {MemOpaque:L00}
N002 [000087]   LCL_VAR   V13 tmp6         u:2 => $259 {JitNew($1ca, $b6)}
  fgCurMemoryVN[GcHeap] assigned for CALL at [000230] to VN: $be.
N003 [000230]   CALL      => $VN.Void

***** BB03, STMT00065(after)
N003 ( 15,  8) [000230] --CXG-------              *  CALL      void   System.Object..ctor $VN.Void
N002 (  1,  1) [000087] ------------ this in rcx  \--*  LCL_VAR   ref    V13 tmp6         u:2 $259

---------

***** BB03, STMT00024(before)
N006 (  6,  6) [000094] -A-XG-------              *  ASG       ref   
N004 (  4,  4) [000093] D--XG--N----              +--*  IND       ref   
N003 (  2,  2) [000315] -------N----              |  \--*  ADD       byref 
N001 (  1,  1) [000091] ------------              |     +--*  LCL_VAR   ref    V14 tmp7         u:2 (last use)
N002 (  1,  1) [000314] ------------              |     \--*  CNS_INT   long   8 field offset Fseq[Next]
N005 (  1,  1) [000092] ------------              \--*  LCL_VAR   ref    V13 tmp6         u:2 (last use)

N001 [000091]   LCL_VAR   V14 tmp7         u:2 (last use) => <l:$25f {$25e[$25b]}, c:$b9 {MemOpaque:L00}>
N002 [000314]   CNS_INT   8 field offset Fseq[Next] => $280 {LngCns:  8}
N003 [000315]   ADD       => <l:$18d {ADD($25f, $280)}, c:$18c {ADD($b9, $280)}>
N005 [000092]   LCL_VAR   V13 tmp6         u:2 (last use) => $259 {JitNew($1ca, $b6)}
  VNApplySelectors:
    VNForHandle(Next) is $1cb, fieldType is ref
    VNForMapSelect($be, $1cb):ref returns $268 {$be[$1cb]}
    VNForMapSelect($268, $25f):ref returns $269 {$268[$25f]}
    VNForMapStore($268, $25f, $259):ref in BB03 returns $2c4 {$268[$25f := $259]@L00}
  VNApplySelectorsAssign:
    VNForHandle(Next) is $1cb, fieldType is ref
    VNForMapStore($be, $1cb, $2c4):ref in BB03 returns $2c5 {$be[$1cb := $2c4]@L00}
  fgCurMemoryVN[GcHeap] assigned for StoreField at [000094] to VN: $2c5.
N006 [000094]   ASG       => $VN.Void

***** BB03, STMT00024(after)
N006 (  6,  6) [000094] -A-XG-------              *  ASG       ref    $VN.Void
N004 (  4,  4) [000093] D--XG--N----              +--*  IND       ref    $259
N003 (  2,  2) [000315] -------N----              |  \--*  ADD       byref  <l:$18d, c:$18c>
N001 (  1,  1) [000091] ------------              |     +--*  LCL_VAR   ref    V14 tmp7         u:2 (last use) <l:$25f, c:$b9>
N002 (  1,  1) [000314] ------------              |     \--*  CNS_INT   long   8 field offset Fseq[Next] $280
N005 (  1,  1) [000092] ------------              \--*  LCL_VAR   ref    V13 tmp6         u:2 (last use) $259

---------

***** BB03, STMT00025(before)
N018 ( 18, 18) [000102] -A-XG-------              *  ASG       ref   
N007 (  7,  7) [000101] D--XG--N----              +--*  IND       ref   
N006 (  5,  5) [000317] ---XG--N----              |  \--*  ADD       byref 
N004 (  4,  4) [000096] ---XG-------              |     +--*  IND       ref   
N003 (  2,  2) [000319] -------N----              |     |  \--*  ADD       byref 
N001 (  1,  1) [000095] ------------              |     |     +--*  LCL_VAR   ref    V00 this         u:1
N002 (  1,  1) [000318] ------------              |     |     \--*  CNS_INT   long   8 field offset Fseq[_myList]
N005 (  1,  1) [000316] ------------              |     \--*  CNS_INT   long   8 field offset Fseq[Head]
N017 ( 10, 10) [000100] ---XG-------              \--*  IND       ref   
N016 (  8,  8) [000321] ---XG--N----                 \--*  ADD       byref 
N014 (  7,  7) [000099] ---XG-------                    +--*  IND       ref   
N013 (  5,  5) [000323] ---XG--N----                    |  \--*  ADD       byref 
N011 (  4,  4) [000098] ---XG-------                    |     +--*  IND       ref   
N010 (  2,  2) [000325] -------N----                    |     |  \--*  ADD       byref 
N008 (  1,  1) [000097] ------------                    |     |     +--*  LCL_VAR   ref    V00 this         u:1
N009 (  1,  1) [000324] ------------                    |     |     \--*  CNS_INT   long   8 field offset Fseq[_myList]
N012 (  1,  1) [000322] ------------                    |     \--*  CNS_INT   long   8 field offset Fseq[Head]
N015 (  1,  1) [000320] ------------                    \--*  CNS_INT   long   8 field offset Fseq[Next]

N001 [000095]   LCL_VAR   V00 this         u:1 => $80 {InitVal($40)}
N002 [000318]   CNS_INT   8 field offset Fseq[_myList] => $280 {LngCns:  8}
N003 [000319]   ADD       => $181 {ADD($80, $280)}
  VNApplySelectors:
    VNForHandle(_myList) is $1c2, fieldType is ref
      AX2: $1c2 != $1cb ==> select([$2c5]store($be, $1cb, $2c4), $1c2) ==> select($be, $1c2) remaining budget is 99.
    VNForMapSelect($2c5, $1c2):ref returns $26a {$be[$1c2]}
    VNForMapSelect($26a, $80):ref returns $26b {$26a[$80]}
N004 [000096]   IND       => <l:$26d {norm=$26b {$26a[$80]}, exc=$244 {NullPtrExc($80)}}, c:$26c {norm=$bf {MemOpaque:L00}, exc=$244 {NullPtrExc($80)}}>
N005 [000316]   CNS_INT   8 field offset Fseq[Head] => $280 {LngCns:  8}
N006 [000317]   ADD       => <l:$191 {norm=$18f {ADD($26b, $280)}, exc=$244 {NullPtrExc($80)}}, c:$190 {norm=$18e {ADD($bf, $280)}, exc=$244 {NullPtrExc($80)}}>
N008 [000097]   LCL_VAR   V00 this         u:1 => $80 {InitVal($40)}
N009 [000324]   CNS_INT   8 field offset Fseq[_myList] => $280 {LngCns:  8}
N010 [000325]   ADD       => $181 {ADD($80, $280)}
  VNApplySelectors:
    VNForHandle(_myList) is $1c2, fieldType is ref
      AX2: $1c2 != $1cb ==> select([$2c5]store($be, $1cb, $2c4), $1c2) ==> select($be, $1c2) remaining budget is 99.
    VNForMapSelect($2c5, $1c2):ref returns $26a {$be[$1c2]}
    VNForMapSelect($26a, $80):ref returns $26b {$26a[$80]}
N011 [000098]   IND       => <l:$26d {norm=$26b {$26a[$80]}, exc=$244 {NullPtrExc($80)}}, c:$26e {norm=$3c0 {MemOpaque:L00}, exc=$244 {NullPtrExc($80)}}>
N012 [000322]   CNS_INT   8 field offset Fseq[Head] => $280 {LngCns:  8}
N013 [000323]   ADD       => <l:$191 {norm=$18f {ADD($26b, $280)}, exc=$244 {NullPtrExc($80)}}, c:$193 {norm=$192 {ADD($280, $3c0)}, exc=$244 {NullPtrExc($80)}}>
  VNApplySelectors:
    VNForHandle(Head) is $1c4, fieldType is ref
      AX2: $1c4 != $1cb ==> select([$2c5]store($be, $1cb, $2c4), $1c4) ==> select($be, $1c4) remaining budget is 99.
    VNForMapSelect($2c5, $1c4):ref returns $26f {$be[$1c4]}
    VNForMapSelect($26f, $26b):ref returns $270 {$26f[$26b]}
N014 [000099]   IND       => <l:$278 {norm=$270 {$26f[$26b]}, exc=$276( {NullPtrExc($80)},  {NullPtrExc($18f)})}, c:$277 {norm=$3c1 {MemOpaque:L00}, exc=$275( {NullPtrExc($80)},  {NullPtrExc($192)})}>
N015 [000320]   CNS_INT   8 field offset Fseq[Next] => $280 {LngCns:  8}
N016 [000321]   ADD       => <l:$197 {norm=$195 {ADD($270, $280)}, exc=$276( {NullPtrExc($80)},  {NullPtrExc($18f)})}, c:$196 {norm=$194 {ADD($280, $3c1)}, exc=$275( {NullPtrExc($80)},  {NullPtrExc($192)})}>
  VNApplySelectors:
    VNForHandle(Next) is $1cb, fieldType is ref
      AX1: select([$be]store($2c5, $1cb, $2c4), $1cb) ==> $2c4.
      ==> Updating loop memory dependence of [000100] to L00
    VNForMapSelect($2c5, $1cb):ref returns $2c4 {$268[$25f := $259]@L00}
    VNForMapSelect($2c4, $270):ref returns $279 {$2c4[$270]}
N017 [000100]   IND       => <l:$403 {norm=$279 {$2c4[$270]}, exc=$401( {NullPtrExc($80)},  {NullPtrExc($18f)},  {NullPtrExc($195)})}, c:$402 {norm=$3c4 {MemOpaque:L00}, exc=$27f( {NullPtrExc($80)},  {NullPtrExc($192)},  {NullPtrExc($194)})}>
  VNApplySelectors:
    VNForHandle(Head) is $1c4, fieldType is ref
      AX2: $1c4 != $1cb ==> select([$2c5]store($be, $1cb, $2c4), $1c4) ==> select($be, $1c4) remaining budget is 99.
    VNForMapSelect($2c5, $1c4):ref returns $26f {$be[$1c4]}
    VNForMapSelect($26f, $26b):ref returns $270 {$26f[$26b]}
    VNForMapStore($26f, $26b, $279):ref in BB03 returns $2c6 {$26f[$26b := $279]@L00}
  VNApplySelectorsAssign:
    VNForHandle(Head) is $1c4, fieldType is ref
    VNForMapStore($2c5, $1c4, $2c6):ref in BB03 returns $2c7 {$2c5[$1c4 := $2c6]@L00}
  fgCurMemoryVN[GcHeap] assigned for StoreField at [000102] to VN: $2c7.
N018 [000102]   ASG       => $VN.Void

***** BB03, STMT00025(after)
N018 ( 18, 18) [000102] -A-XG-------              *  ASG       ref    $VN.Void
N007 (  7,  7) [000101] D--XG--N----              +--*  IND       ref    $279
N006 (  5,  5) [000317] ---XG--N----              |  \--*  ADD       byref  <l:$191, c:$190>
N004 (  4,  4) [000096] ---XG-------              |     +--*  IND       ref    <l:$26d, c:$26c>
N003 (  2,  2) [000319] -------N----              |     |  \--*  ADD       byref  $181
N001 (  1,  1) [000095] ------------              |     |     +--*  LCL_VAR   ref    V00 this         u:1 $80
N002 (  1,  1) [000318] ------------              |     |     \--*  CNS_INT   long   8 field offset Fseq[_myList] $280
N005 (  1,  1) [000316] ------------              |     \--*  CNS_INT   long   8 field offset Fseq[Head] $280
N017 ( 10, 10) [000100] ---XG-------              \--*  IND       ref    <l:$403, c:$402>
N016 (  8,  8) [000321] ---XG--N----                 \--*  ADD       byref  <l:$197, c:$196>
N014 (  7,  7) [000099] ---XG-------                    +--*  IND       ref    <l:$278, c:$277>
N013 (  5,  5) [000323] ---XG--N----                    |  \--*  ADD       byref  <l:$191, c:$193>
N011 (  4,  4) [000098] ---XG-------                    |     +--*  IND       ref    <l:$26d, c:$26e>
N010 (  2,  2) [000325] -------N----                    |     |  \--*  ADD       byref  $181
N008 (  1,  1) [000097] ------------                    |     |     +--*  LCL_VAR   ref    V00 this         u:1 $80
N009 (  1,  1) [000324] ------------                    |     |     \--*  CNS_INT   long   8 field offset Fseq[_myList] $280
N012 (  1,  1) [000322] ------------                    |     \--*  CNS_INT   long   8 field offset Fseq[Head] $280
N015 (  1,  1) [000320] ------------                    \--*  CNS_INT   long   8 field offset Fseq[Next] $280

---------

***** BB03, STMT00026(before)
N005 ( 16, 16) [000109] -AC-----R---              *  ASG       ref   
N004 (  1,  1) [000108] D------N----              +--*  LCL_VAR   ref    V15 tmp8         d:2
N003 ( 16, 16) [000107] --C---------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST
N002 (  2, 10) [000106] H----------- arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb3b058b8 token

N001 [000326]   ARGPLACE  => $208 {MemOpaque:L00}
N002 [000106]   CNS_INT(h) 0x7ffdb3b058b8 token => $1c3 {Hnd const: 0x00007FFDB3B058B8}
VN of ARGPLACE tree [000326] updated to $1c3 {Hnd const: 0x00007FFDB3B058B8}
N003 [000107]   CALL help => $404 {JitNew($1c3, $3c7)}
N004 [000108]   LCL_VAR   V15 tmp8         d:2 => $404 {JitNew($1c3, $3c7)}
N005 [000109]   ASG       => $404 {JitNew($1c3, $3c7)}

***** BB03, STMT00026(after)
N005 ( 16, 16) [000109] -AC-----R---              *  ASG       ref    $404
N004 (  1,  1) [000108] D------N----              +--*  LCL_VAR   ref    V15 tmp8         d:2 $404
N003 ( 16, 16) [000107] --C---------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST $404
N002 (  2, 10) [000106] H----------- arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb3b058b8 token $1c3

---------

***** BB03, STMT00028(before)
N009 (  7,  7) [000113] -A-XG---R---              *  ASG       ref   
N008 (  1,  1) [000112] D------N----              +--*  LCL_VAR   ref    V16 tmp9         d:2
N007 (  7,  7) [000105] ---XG-------              \--*  IND       ref   
N006 (  5,  5) [000328] ---XG--N----                 \--*  ADD       byref 
N004 (  4,  4) [000104] ---XG-------                    +--*  IND       ref   
N003 (  2,  2) [000330] -------N----                    |  \--*  ADD       byref 
N001 (  1,  1) [000103] ------------                    |     +--*  LCL_VAR   ref    V00 this         u:1
N002 (  1,  1) [000329] ------------                    |     \--*  CNS_INT   long   8 field offset Fseq[_myList]
N005 (  1,  1) [000327] ------------                    \--*  CNS_INT   long   8 field offset Fseq[Head]

N001 [000103]   LCL_VAR   V00 this         u:1 => $80 {InitVal($40)}
N002 [000329]   CNS_INT   8 field offset Fseq[_myList] => $280 {LngCns:  8}
N003 [000330]   ADD       => $181 {ADD($80, $280)}
  VNApplySelectors:
    VNForHandle(_myList) is $1c2, fieldType is ref
      AX2: $1c2 != $1c4 ==> select([$2c7]store($2c5, $1c4, $2c6), $1c2) ==> select($2c5, $1c2) remaining budget is 99.
      AX2: $1c2 != $1cb ==> select([$2c5]store($be, $1cb, $2c4), $1c2) ==> select($be, $1c2) remaining budget is 98.
    VNForMapSelect($2c7, $1c2):ref returns $26a {$be[$1c2]}
    VNForMapSelect($26a, $80):ref returns $26b {$26a[$80]}
N004 [000104]   IND       => <l:$26d {norm=$26b {$26a[$80]}, exc=$244 {NullPtrExc($80)}}, c:$405 {norm=$3c9 {MemOpaque:L00}, exc=$244 {NullPtrExc($80)}}>
N005 [000327]   CNS_INT   8 field offset Fseq[Head] => $280 {LngCns:  8}
N006 [000328]   ADD       => <l:$191 {norm=$18f {ADD($26b, $280)}, exc=$244 {NullPtrExc($80)}}, c:$199 {norm=$198 {ADD($280, $3c9)}, exc=$244 {NullPtrExc($80)}}>
  VNApplySelectors:
    VNForHandle(Head) is $1c4, fieldType is ref
      AX1: select([$2c5]store($2c7, $1c4, $2c6), $1c4) ==> $2c6.
      ==> Updating loop memory dependence of [000105] to L00
    VNForMapSelect($2c7, $1c4):ref returns $2c6 {$26f[$26b := $279]@L00}
      AX1: select([$26f]store($2c6, $26b, $279), $26b) ==> $279.
      ==> Not updating loop memory dependence of [000105], memory $26f not defined in a loop
    VNForMapSelect($2c6, $26b):ref returns $279 {$2c4[$270]}
N007 [000105]   IND       => <l:$27b {norm=$279 {$2c4[$270]}, exc=$276( {NullPtrExc($80)},  {NullPtrExc($18f)})}, c:$40a {norm=$3ca {MemOpaque:L00}, exc=$409( {NullPtrExc($80)},  {NullPtrExc($198)})}>
N008 [000112]   LCL_VAR   V16 tmp9         d:2 => <l:$279 {$2c4[$270]}, c:$3ca {MemOpaque:L00}>
N009 [000113]   ASG       => <l:$27b {norm=$279 {$2c4[$270]}, exc=$276( {NullPtrExc($80)},  {NullPtrExc($18f)})}, c:$40a {norm=$3ca {MemOpaque:L00}, exc=$409( {NullPtrExc($80)},  {NullPtrExc($198)})}>

***** BB03, STMT00028(after)
N009 (  7,  7) [000113] -A-XG---R---              *  ASG       ref    <l:$27b, c:$40a>
N008 (  1,  1) [000112] D------N----              +--*  LCL_VAR   ref    V16 tmp9         d:2 <l:$279, c:$3ca>
N007 (  7,  7) [000105] ---XG-------              \--*  IND       ref    <l:$27b, c:$40a>
N006 (  5,  5) [000328] ---XG--N----                 \--*  ADD       byref  <l:$191, c:$199>
N004 (  4,  4) [000104] ---XG-------                    +--*  IND       ref    <l:$26d, c:$405>
N003 (  2,  2) [000330] -------N----                    |  \--*  ADD       byref  $181
N001 (  1,  1) [000103] ------------                    |     +--*  LCL_VAR   ref    V00 this         u:1 $80
N002 (  1,  1) [000329] ------------                    |     \--*  CNS_INT   long   8 field offset Fseq[_myList] $280
N005 (  1,  1) [000327] ------------                    \--*  CNS_INT   long   8 field offset Fseq[Head] $280

---------

***** BB03, STMT00027(before)
N003 ( 15,  8) [000111] --CXG-------              *  CALL      void   System.Object..ctor
N002 (  1,  1) [000110] ------------ this in rcx  \--*  LCL_VAR   ref    V15 tmp8         u:2

N001 [000331]   ARGPLACE  => $3cd {MemOpaque:L00}
N002 [000110]   LCL_VAR   V15 tmp8         u:2 => $404 {JitNew($1c3, $3c7)}
  fgCurMemoryVN[GcHeap] assigned for CALL at [000111] to VN: $3ce.
N003 [000111]   CALL      => $VN.Void

***** BB03, STMT00027(after)
N003 ( 15,  8) [000111] --CXG-------              *  CALL      void   System.Object..ctor $VN.Void
N002 (  1,  1) [000110] ------------ this in rcx  \--*  LCL_VAR   ref    V15 tmp8         u:2 $404

---------

***** BB03, STMT00029(before)
N006 (  6,  6) [000117] -A-XG-------              *  ASG       ref   
N004 (  4,  4) [000116] D--XG--N----              +--*  IND       ref   
N003 (  2,  2) [000333] -------N----              |  \--*  ADD       byref 
N001 (  1,  1) [000114] ------------              |     +--*  LCL_VAR   ref    V16 tmp9         u:2 (last use)
N002 (  1,  1) [000332] ------------              |     \--*  CNS_INT   long   16 field offset Fseq[Data]
N005 (  1,  1) [000115] ------------              \--*  LCL_VAR   ref    V15 tmp8         u:2 (last use)

N001 [000114]   LCL_VAR   V16 tmp9         u:2 (last use) => <l:$279 {$2c4[$270]}, c:$3ca {MemOpaque:L00}>
N002 [000332]   CNS_INT   16 field offset Fseq[Data] => $281 {LngCns:  16}
N003 [000333]   ADD       => <l:$19b {ADD($279, $281)}, c:$19a {ADD($281, $3ca)}>
N005 [000115]   LCL_VAR   V15 tmp8         u:2 (last use) => $404 {JitNew($1c3, $3c7)}
  VNApplySelectors:
    VNForHandle(Data) is $1c5, fieldType is ref
    VNForMapSelect($3ce, $1c5):ref returns $40b {$3ce[$1c5]}
    VNForMapSelect($40b, $279):ref returns $40c {$40b[$279]}
    VNForMapStore($40b, $279, $404):ref in BB03 returns $2c8 {$40b[$279 := $404]@L00}
  VNApplySelectorsAssign:
    VNForHandle(Data) is $1c5, fieldType is ref
    VNForMapStore($3ce, $1c5, $2c8):ref in BB03 returns $2c9 {$3ce[$1c5 := $2c8]@L00}
  fgCurMemoryVN[GcHeap] assigned for StoreField at [000117] to VN: $2c9.
N006 [000117]   ASG       => $VN.Void

***** BB03, STMT00029(after)
N006 (  6,  6) [000117] -A-XG-------              *  ASG       ref    $VN.Void
N004 (  4,  4) [000116] D--XG--N----              +--*  IND       ref    $404
N003 (  2,  2) [000333] -------N----              |  \--*  ADD       byref  <l:$19b, c:$19a>
N001 (  1,  1) [000114] ------------              |     +--*  LCL_VAR   ref    V16 tmp9         u:2 (last use) <l:$279, c:$3ca>
N002 (  1,  1) [000332] ------------              |     \--*  CNS_INT   long   16 field offset Fseq[Data] $281
N005 (  1,  1) [000115] ------------              \--*  LCL_VAR   ref    V15 tmp8         u:2 (last use) $404

finish(BB03).
   Succ(BB04).
     Not yet completed.
     All preds complete, adding to allDone.
   Succ(BB27).
     Not yet completed.
     All preds complete, adding to allDone.
  Building phi application: $46 = SSA# 52.
  Building phi application: $47 = SSA# 47.
  Building phi application: $40d = phi($47, $46).
The SSA definition for ByrefExposed (#48) at start of BB27 is $40e {PhiMemoryDef($1cc, $40d)}
  Building phi application: $48 = SSA# 53.
  Building phi application: $49 = SSA# 46.
  Building phi application: $40f = phi($49, $48).
The SSA definition for GcHeap (#49) at start of BB27 is $410 {PhiMemoryDef($1cc, $40f)}

***** BB27, STMT00031(before)
N005 (  8,  8) [000126] ----G-------              *  JTRUE     void  
N004 (  6,  6) [000125] J---G--N----              \--*  EQ        int   
N002 (  4,  4) [000336] ----G-------                 +--*  CAST      int <- bool <- int
N001 (  3,  2) [000123] ----G-------                 |  \--*  LCL_VAR   int   (AX) V05 loc3         
N003 (  1,  1) [000124] ------------                 \--*  CNS_INT   int    0

N001 [000123]   LCL_VAR   V05 loc3          => $381 {ByrefExposedLoad($4b, $19c, $40e)}
    VNForCastOper(bool) is $44
N002 [000336]   CAST      => $341 {Cast($381, $44)}
N003 [000124]   CNS_INT   0 => $40 {IntCns 0}
N004 [000125]   EQ        => $342 {EQ($341, $40)}

***** BB27, STMT00031(after)
N005 (  8,  8) [000126] ----G-------              *  JTRUE     void  
N004 (  6,  6) [000125] J---G--N----              \--*  EQ        int    $342
N002 (  4,  4) [000336] ----G-------                 +--*  CAST      int <- bool <- int $341
N001 (  3,  2) [000123] ----G-------                 |  \--*  LCL_VAR   int   (AX) V05 loc3          $381
N003 (  1,  1) [000124] ------------                 \--*  CNS_INT   int    0 $40

finish(BB27).
   Succ(BB28).
     Not yet completed.
     All preds complete, adding to allDone.
   Succ(BB29).
     Not yet completed.
     Not all preds complete  Adding to notallDone, if necessary...
       Was necessary.
The SSA definition for ByrefExposed (#48) at start of BB28 is $40e {PhiMemoryDef($1cc, $40d)}
The SSA definition for GcHeap (#49) at start of BB28 is $410 {PhiMemoryDef($1cc, $40f)}

***** BB28, STMT00033(before)
N003 ( 15,  7) [000129] --CXG-------              *  CALL      void   System.Threading.Monitor.Exit
N002 (  1,  1) [000128] ------------ arg0 in rcx  \--*  LCL_VAR   ref    V04 loc2         u:3 (last use)

N001 [000337]   ARGPLACE  => $3cf {MemOpaque:NotInLoop}
N002 [000128]   LCL_VAR   V04 loc2         u:3 (last use) => <l:$256 {$255[$80]}, c:$b2 {MemOpaque:L00}>
VN of ARGPLACE tree [000337] updated to <l:$256 {$255[$80]}, c:$b2 {MemOpaque:L00}>
  fgCurMemoryVN[GcHeap] assigned for CALL at [000129] to VN: $3d0.
N003 [000129]   CALL      => $VN.Void

***** BB28, STMT00033(after)
N003 ( 15,  7) [000129] --CXG-------              *  CALL      void   System.Threading.Monitor.Exit $VN.Void
N002 (  1,  1) [000128] ------------ arg0 in rcx  \--*  LCL_VAR   ref    V04 loc2         u:3 (last use) <l:$256, c:$b2>

finish(BB28).
   Succ(BB29).
     Not yet completed.
     All preds complete, adding to allDone.
The SSA definition for ByrefExposed (#48) at start of BB29 is $40e {PhiMemoryDef($1cc, $40d)}
The SSA definition for GcHeap (#49) at start of BB29 is $410 {PhiMemoryDef($1cc, $40f)}

***** BB29, STMT00032(before)
N001 (  0,  0) [000127] ------------              *  RETFILT   void  

N001 [000127]   RETFILT   => $440 {MemOpaque:NotInLoop}

***** BB29, STMT00032(after)
N001 (  0,  0) [000127] ------------              *  RETFILT   void   $440

finish(BB29).
The SSA definition for ByrefExposed (#52) at start of BB04 is $117 {MemOpaque:L00}
The SSA definition for GcHeap (#53) at start of BB04 is $2c9 {$3ce[$1c5 := $2c8]@L00}

***** BB04, STMT00066(before)
N005 (  8,  8) [000254] ----G-------              *  JTRUE     void  
N004 (  6,  6) [000255] J---G--N----              \--*  EQ        int   
N002 (  4,  4) [000334] ----G-------                 +--*  CAST      int <- bool <- int
N001 (  3,  2) [000256] ----G-------                 |  \--*  LCL_VAR   int   (AX) V05 loc3         
N003 (  1,  1) [000257] ------------                 \--*  CNS_INT   int    0

N001 [000256]   LCL_VAR   V05 loc3          => $382 {ByrefExposedLoad($4b, $19c, $117)}
    VNForCastOper(bool) is $44
N002 [000334]   CAST      => $343 {Cast($382, $44)}
N003 [000257]   CNS_INT   0 => $40 {IntCns 0}
N004 [000255]   EQ        => $344 {EQ($343, $40)}

***** BB04, STMT00066(after)
N005 (  8,  8) [000254] ----G-------              *  JTRUE     void  
N004 (  6,  6) [000255] J---G--N----              \--*  EQ        int    $344
N002 (  4,  4) [000334] ----G-------                 +--*  CAST      int <- bool <- int $343
N001 (  3,  2) [000256] ----G-------                 |  \--*  LCL_VAR   int   (AX) V05 loc3          $382
N003 (  1,  1) [000257] ------------                 \--*  CNS_INT   int    0 $40

finish(BB04).
   Succ(BB05).
     Not yet completed.
     All preds complete, adding to allDone.
   Succ(BB06).
     Not yet completed.
     Not all preds complete  Adding to notallDone, if necessary...
       Was necessary.
The SSA definition for ByrefExposed (#52) at start of BB05 is $117 {MemOpaque:L00}
The SSA definition for GcHeap (#53) at start of BB05 is $2c9 {$3ce[$1c5 := $2c8]@L00}

***** BB05, STMT00067(before)
N003 ( 15,  7) [000258] --CXG-------              *  CALL      void   System.Threading.Monitor.Exit
N002 (  1,  1) [000259] ------------ arg0 in rcx  \--*  LCL_VAR   ref    V04 loc2         u:3 (last use)

N001 [000335]   ARGPLACE  => $3d1 {MemOpaque:L00}
N002 [000259]   LCL_VAR   V04 loc2         u:3 (last use) => <l:$256 {$255[$80]}, c:$b2 {MemOpaque:L00}>
VN of ARGPLACE tree [000335] updated to <l:$256 {$255[$80]}, c:$b2 {MemOpaque:L00}>
  fgCurMemoryVN[GcHeap] assigned for CALL at [000258] to VN: $3d2.
N003 [000258]   CALL      => $VN.Void

***** BB05, STMT00067(after)
N003 ( 15,  7) [000258] --CXG-------              *  CALL      void   System.Threading.Monitor.Exit $VN.Void
N002 (  1,  1) [000259] ------------ arg0 in rcx  \--*  LCL_VAR   ref    V04 loc2         u:3 (last use) <l:$256, c:$b2>

finish(BB05).
   Succ(BB06).
     Not yet completed.
     All preds complete, adding to allDone.
  Building phi application: $4c = SSA# 56.
  Building phi application: $46 = SSA# 52.
  Building phi application: $411 = phi($46, $4c).
The SSA definition for ByrefExposed (#54) at start of BB06 is $412 {PhiMemoryDef($1cd, $411)}
  Building phi application: $4d = SSA# 57.
  Building phi application: $48 = SSA# 53.
  Building phi application: $413 = phi($48, $4d).
The SSA definition for GcHeap (#55) at start of BB06 is $414 {PhiMemoryDef($1cd, $413)}

***** BB06, STMT00030(before)
N005 (  3,  3) [000122] -A------R---              *  ASG       int   
N004 (  1,  1) [000121] D------N----              +--*  LCL_VAR   int    V03 loc1         d:4
N003 (  3,  3) [000120] ------------              \--*  ADD       int   
N001 (  1,  1) [000118] ------------                 +--*  LCL_VAR   int    V03 loc1         u:3 (last use)
N002 (  1,  1) [000119] ------------                 \--*  CNS_INT   int    1

N001 [000118]   LCL_VAR   V03 loc1         u:3 (last use) => $380 {PhiDef($3, $3, $340)}
N002 [000119]   CNS_INT   1 => $4e {IntCns 1}
N003 [000120]   ADD       => $345 {ADD($4e, $380)}
N004 [000121]   LCL_VAR   V03 loc1         d:4 => $345 {ADD($4e, $380)}
N005 [000122]   ASG       => $345 {ADD($4e, $380)}

***** BB06, STMT00030(after)
N005 (  3,  3) [000122] -A------R---              *  ASG       int    $345
N004 (  1,  1) [000121] D------N----              +--*  LCL_VAR   int    V03 loc1         d:4 $345
N003 (  3,  3) [000120] ------------              \--*  ADD       int    $345
N001 (  1,  1) [000118] ------------                 +--*  LCL_VAR   int    V03 loc1         u:3 (last use) $380
N002 (  1,  1) [000119] ------------                 \--*  CNS_INT   int    1 $4e

---------

***** BB06, STMT00017(before)
N004 (  5,  5) [000068] ------------              *  JTRUE     void  
N003 (  3,  3) [000067] J------N----              \--*  LT        int   
N001 (  1,  1) [000065] ------------                 +--*  LCL_VAR   int    V03 loc1         u:4
N002 (  1,  1) [000066] ------------                 \--*  CNS_INT   int    10

N001 [000065]   LCL_VAR   V03 loc1         u:4 => $345 {ADD($4e, $380)}
N002 [000066]   CNS_INT   10 => $43 {IntCns 10}
N003 [000067]   LT        => $346 {LT($345, $43)}

***** BB06, STMT00017(after)
N004 (  5,  5) [000068] ------------              *  JTRUE     void  
N003 (  3,  3) [000067] J------N----              \--*  LT        int    $346
N001 (  1,  1) [000065] ------------                 +--*  LCL_VAR   int    V03 loc1         u:4 $345
N002 (  1,  1) [000066] ------------                 \--*  CNS_INT   int    10 $43

finish(BB06).
   Succ(BB07).
     Not yet completed.
     All preds complete, adding to allDone.
   Succ(BB02).
  Building phi application: $4f = SSA# 54.
  Building phi application: $45 = SSA# 2.
  Building phi application: $415 = phi($45, $4f).
The SSA definition for ByrefExposed (#4) at start of BB07 is $416 {PhiMemoryDef($1ce, $415)}
  Building phi application: $50 = SSA# 55.
  Building phi application: $51 = SSA# 3.
  Building phi application: $417 = phi($51, $50).
The SSA definition for GcHeap (#5) at start of BB07 is $418 {PhiMemoryDef($1ce, $417)}

***** BB07, STMT00034(before)
N003 ( 18,  8) [000133] -ACXG---R---              *  ASG       struct (copy)
N002 (  3,  2) [000131] D---G--N----              +--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  +--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
N001 ( 14,  5) [000130] --CXG-------              \--*  CALL      struct System.DateTime.get_Now

  fgCurMemoryVN[GcHeap] assigned for CALL at [000130] to VN: $3d3.
N001 [000130]   CALL      => $c4 {MemOpaque:NotInLoop}
  fgCurMemoryVN[ByrefExposed] assigned for COPYBLK - address-exposed local at [000133] to VN: $11b.
N003 [000133]   ASG       => $VN.Void

***** BB07, STMT00034(after)
N003 ( 18,  8) [000133] -ACXG---R---              *  ASG       struct (copy) $VN.Void
N002 (  3,  2) [000131] D---G--N----              +--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  +--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
N001 ( 14,  5) [000130] --CXG-------              \--*  CALL      struct System.DateTime.get_Now $c4

---------

***** BB07, STMT00035(before)
N013 ( 53, 36) [000139] --CXG-------              *  CALL      void   System.Console.WriteLine
N012 ( 39, 30) [000138] --CXG------- arg0 in rcx  \--*  CALL      ref    System.String.Concat
N007 ( 17, 10) [000342] -ACXG---R-L- arg0 SETUP      +--*  ASG       ref   
N006 (  1,  1) [000341] D------N----                 |  +--*  LCL_VAR   ref    V23 tmp16        d:2
N005 ( 17, 10) [000136] --CXG-------                 |  \--*  CALL      ref    System.DateTime.ToString
N004 (  3,  3) [000135] ------------ this in rcx     |     \--*  ADDR      byref 
N003 (  3,  2) [000134] ----G--N----                 |        \--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                     |        \--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
N009 (  1,  1) [000343] ------------ arg0 in rcx     +--*  LCL_VAR   ref    V23 tmp16        u:2 (last use)
N011 (  4, 12) [000340] #---G------- arg1 in rdx     \--*  IND       ref   
N010 (  2, 10) [000339] H-----------                    \--*  CNS_INT(h) long   0x75003200 "	 Waiting for list processing to complete..."

N001 [000345]   ARGPLACE  => $3d4 {MemOpaque:NotInLoop}
N002 [000338]   ARGPLACE  => $144 {MemOpaque:NotInLoop}
N003 [000134]   LCL_VAR   V02 loc0         
                                                      long   V02._dateData (offs=0x00) -> V17 tmp10         => $c5 {MemOpaque:NotInLoop}
N004 [000135]   ADDR      => $145 {MemOpaque:NotInLoop}
  fgCurMemoryVN[GcHeap] assigned for CALL at [000136] to VN: $3d6.
N005 [000136]   CALL      => $3d5 {MemOpaque:NotInLoop}
N006 [000341]   LCL_VAR   V23 tmp16        d:2 => $3d5 {MemOpaque:NotInLoop}
N007 [000342]   ASG       => $3d5 {MemOpaque:NotInLoop}
N008 [000344]   ARGPLACE  => $3d8 {MemOpaque:NotInLoop}
N009 [000343]   LCL_VAR   V23 tmp16        u:2 (last use) => $3d5 {MemOpaque:NotInLoop}
N010 [000339]   CNS_INT(h) 0x75003200 "	 Waiting for list processing to complete..." => $1cf {Hnd const: 0x0000016D75003200}
N011 [000340]   IND       => $3d9 {NonNullIndirect($1cf)}
VN of ARGPLACE tree [000344] updated to $3d9 {NonNullIndirect($1cf)}
  fgCurMemoryVN[GcHeap] assigned for CALL at [000138] to VN: $3db.
N012 [000138]   CALL      => $3da {MemOpaque:NotInLoop}
VN of ARGPLACE tree [000345] updated to $3da {MemOpaque:NotInLoop}
  fgCurMemoryVN[GcHeap] assigned for CALL at [000139] to VN: $3dc.
N013 [000139]   CALL      => $VN.Void

***** BB07, STMT00035(after)
N013 ( 53, 36) [000139] --CXG-------              *  CALL      void   System.Console.WriteLine $VN.Void
N012 ( 39, 30) [000138] --CXG------- arg0 in rcx  \--*  CALL      ref    System.String.Concat $3da
N007 ( 17, 10) [000342] -ACXG---R-L- arg0 SETUP      +--*  ASG       ref    $3d5
N006 (  1,  1) [000341] D------N----                 |  +--*  LCL_VAR   ref    V23 tmp16        d:2 $3d5
N005 ( 17, 10) [000136] --CXG-------                 |  \--*  CALL      ref    System.DateTime.ToString $3d5
N004 (  3,  3) [000135] ------------ this in rcx     |     \--*  ADDR      byref  $145
N003 (  3,  2) [000134] ----G--N----                 |        \--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                     |        \--*    long   V02._dateData (offs=0x00) -> V17 tmp10         $c5
N009 (  1,  1) [000343] ------------ arg0 in rcx     +--*  LCL_VAR   ref    V23 tmp16        u:2 (last use) $3d5
N011 (  4, 12) [000340] #---G------- arg1 in rdx     \--*  IND       ref    $3d9
N010 (  2, 10) [000339] H-----------                    \--*  CNS_INT(h) long   0x75003200 "	 Waiting for list processing to complete..." $1cf

finish(BB07).
   Succ(BB08).
     Not yet completed.
     Not all preds complete  Adding to notallDone, if necessary...
       Was necessary.
Computing ByrefExposed state for block BB08, entry block for loops 1 to 1:
  Loop 1 has memory havoc effect; heap state is new unique $3dd.
The SSA definition for ByrefExposed (#8) at start of BB08 is $3dd {MemOpaque:L01}
Computing GcHeap state for block BB08, entry block for loops 1 to 1:
  Loop 1 has memory havoc effect; heap state is new unique $3de.
The SSA definition for GcHeap (#9) at start of BB08 is $3de {MemOpaque:L01}

***** BB08, STMT00036(before)
N006 (  4,  4) [000143] -A-XG---R---              *  ASG       ref   
N005 (  1,  1) [000142] D------N----              +--*  LCL_VAR   ref    V04 loc2         d:2
N004 (  4,  4) [000141] ---XG-------              \--*  IND       ref   
N003 (  2,  2) [000347] -------N----                 \--*  ADD       byref 
N001 (  1,  1) [000140] ------------                    +--*  LCL_VAR   ref    V00 this         u:1
N002 (  1,  1) [000346] ------------                    \--*  CNS_INT   long   8 field offset Fseq[_myList]

N001 [000140]   LCL_VAR   V00 this         u:1 => $80 {InitVal($40)}
N002 [000346]   CNS_INT   8 field offset Fseq[_myList] => $280 {LngCns:  8}
N003 [000347]   ADD       => $181 {ADD($80, $280)}
  VNApplySelectors:
    VNForHandle(_myList) is $1c2, fieldType is ref
    VNForMapSelect($3de, $1c2):ref returns $419 {$3de[$1c2]}
    VNForMapSelect($419, $80):ref returns $41a {$419[$80]}
N004 [000141]   IND       => <l:$41c {norm=$41a {$419[$80]}, exc=$244 {NullPtrExc($80)}}, c:$41b {norm=$3df {MemOpaque:L01}, exc=$244 {NullPtrExc($80)}}>
N005 [000142]   LCL_VAR   V04 loc2         d:2 => <l:$41a {$419[$80]}, c:$3df {MemOpaque:L01}>
N006 [000143]   ASG       => <l:$41c {norm=$41a {$419[$80]}, exc=$244 {NullPtrExc($80)}}, c:$41b {norm=$3df {MemOpaque:L01}, exc=$244 {NullPtrExc($80)}}>

***** BB08, STMT00036(after)
N006 (  4,  4) [000143] -A-XG---R---              *  ASG       ref    <l:$41c, c:$41b>
N005 (  1,  1) [000142] D------N----              +--*  LCL_VAR   ref    V04 loc2         d:2 <l:$41a, c:$3df>
N004 (  4,  4) [000141] ---XG-------              \--*  IND       ref    <l:$41c, c:$41b>
N003 (  2,  2) [000347] -------N----                 \--*  ADD       byref  $181
N001 (  1,  1) [000140] ------------                    +--*  LCL_VAR   ref    V00 this         u:1 $80
N002 (  1,  1) [000346] ------------                    \--*  CNS_INT   long   8 field offset Fseq[_myList] $280

---------

***** BB08, STMT00037(before)
N003 (  5,  4) [000146] -A--G---R---              *  ASG       int   
N002 (  3,  2) [000145] D---G--N----              +--*  LCL_VAR   int   (AX) V05 loc3         
N001 (  1,  1) [000144] ------------              \--*  CNS_INT   int    0

N001 [000144]   CNS_INT   0 => $40 {IntCns 0}
  fgCurMemoryVN[ByrefExposed] assigned for local assign at [000146] to VN: $11f.
N003 [000146]   ASG       => $40 {IntCns 0}

***** BB08, STMT00037(after)
N003 (  5,  4) [000146] -A--G---R---              *  ASG       int    $40
N002 (  3,  2) [000145] D---G--N----              +--*  LCL_VAR   int   (AX) V05 loc3         
N001 (  1,  1) [000144] ------------              \--*  CNS_INT   int    0 $40

finish(BB08).
   Succ(BB09).
     Not yet completed.
     All preds complete, adding to allDone.
   Succ(BB30).
     Not yet completed.
     Not all preds complete  Adding to notallDone, if necessary...
       Was necessary.
The SSA definition for ByrefExposed (#10) at start of BB09 is $11f {MemOpaque:L01}
The SSA definition for GcHeap (#9) at start of BB09 is $3de {MemOpaque:L01}

***** BB09, STMT00038(before)
N005 ( 18, 11) [000150] --CXG-------              *  CALL      void   System.Threading.Monitor.Enter
N003 (  3,  3) [000149] ------------ arg1 in rdx  +--*  LCL_VAR_ADDR long   V05 loc3         
N004 (  1,  1) [000147] ------------ arg0 in rcx  \--*  LCL_VAR   ref    V04 loc2         u:2

N001 [000349]   ARGPLACE  => $3e1 {MemOpaque:L01}
N002 [000348]   ARGPLACE  => $209 {MemOpaque:L01}
N003 [000149]   LCL_VAR_ADDR V05 loc3          => $20a {MemOpaque:L01}
N004 [000147]   LCL_VAR   V04 loc2         u:2 => <l:$41a {$419[$80]}, c:$3df {MemOpaque:L01}>
VN of ARGPLACE tree [000349] updated to <l:$41a {$419[$80]}, c:$3df {MemOpaque:L01}>
VN of ARGPLACE tree [000348] updated to $20a {MemOpaque:L01}
  fgCurMemoryVN[GcHeap] assigned for CALL at [000150] to VN: $3e2.
N005 [000150]   CALL      => $VN.Void

***** BB09, STMT00038(after)
N005 ( 18, 11) [000150] --CXG-------              *  CALL      void   System.Threading.Monitor.Enter $VN.Void
N003 (  3,  3) [000149] ------------ arg1 in rdx  +--*  LCL_VAR_ADDR long   V05 loc3          $20a
N004 (  1,  1) [000147] ------------ arg0 in rcx  \--*  LCL_VAR   ref    V04 loc2         u:2 <l:$41a, c:$3df>

---------

***** BB09, STMT00039(before)
N016 ( 17, 17) [000158] ---XG-------              *  JTRUE     void  
N015 ( 15, 15) [000157] N--XG--N-U--              \--*  EQ        int   
N007 (  7,  7) [000153] ---XG-------                 +--*  IND       ref   
N006 (  5,  5) [000351] ---XG--N----                 |  \--*  ADD       byref 
N004 (  4,  4) [000152] ---XG-------                 |     +--*  IND       ref   
N003 (  2,  2) [000353] -------N----                 |     |  \--*  ADD       byref 
N001 (  1,  1) [000151] ------------                 |     |     +--*  LCL_VAR   ref    V00 this         u:1
N002 (  1,  1) [000352] ------------                 |     |     \--*  CNS_INT   long   8 field offset Fseq[_myList]
N005 (  1,  1) [000350] ------------                 |     \--*  CNS_INT   long   8 field offset Fseq[Head]
N014 (  7,  7) [000156] ---XG-------                 \--*  IND       ref   
N013 (  5,  5) [000355] ---XG--N----                    \--*  ADD       byref 
N011 (  4,  4) [000155] ---XG-------                       +--*  IND       ref   
N010 (  2,  2) [000357] -------N----                       |  \--*  ADD       byref 
N008 (  1,  1) [000154] ------------                       |     +--*  LCL_VAR   ref    V00 this         u:1
N009 (  1,  1) [000356] ------------                       |     \--*  CNS_INT   long   8 field offset Fseq[_myList]
N012 (  1,  1) [000354] ------------                       \--*  CNS_INT   long   16 field offset Fseq[Tail]

N001 [000151]   LCL_VAR   V00 this         u:1 => $80 {InitVal($40)}
N002 [000352]   CNS_INT   8 field offset Fseq[_myList] => $280 {LngCns:  8}
N003 [000353]   ADD       => $181 {ADD($80, $280)}
  VNApplySelectors:
    VNForHandle(_myList) is $1c2, fieldType is ref
    VNForMapSelect($3e2, $1c2):ref returns $41d {$3e2[$1c2]}
    VNForMapSelect($41d, $80):ref returns $41e {$41d[$80]}
N004 [000152]   IND       => <l:$420 {norm=$41e {$41d[$80]}, exc=$244 {NullPtrExc($80)}}, c:$41f {norm=$3e3 {MemOpaque:L01}, exc=$244 {NullPtrExc($80)}}>
N005 [000350]   CNS_INT   8 field offset Fseq[Head] => $280 {LngCns:  8}
N006 [000351]   ADD       => <l:$1a0 {norm=$19e {ADD($280, $41e)}, exc=$244 {NullPtrExc($80)}}, c:$19f {norm=$19d {ADD($280, $3e3)}, exc=$244 {NullPtrExc($80)}}>
  VNApplySelectors:
    VNForHandle(Head) is $1c4, fieldType is ref
    VNForMapSelect($3e2, $1c4):ref returns $421 {$3e2[$1c4]}
    VNForMapSelect($421, $41e):ref returns $422 {$421[$41e]}
N007 [000153]   IND       => <l:$42a {norm=$422 {$421[$41e]}, exc=$428( {NullPtrExc($80)},  {NullPtrExc($19e)})}, c:$429 {norm=$3e4 {MemOpaque:L01}, exc=$427( {NullPtrExc($80)},  {NullPtrExc($19d)})}>
N008 [000154]   LCL_VAR   V00 this         u:1 => $80 {InitVal($40)}
N009 [000356]   CNS_INT   8 field offset Fseq[_myList] => $280 {LngCns:  8}
N010 [000357]   ADD       => $181 {ADD($80, $280)}
  VNApplySelectors:
    VNForHandle(_myList) is $1c2, fieldType is ref
    VNForMapSelect($3e2, $1c2):ref returns $41d {$3e2[$1c2]}
    VNForMapSelect($41d, $80):ref returns $41e {$41d[$80]}
N011 [000155]   IND       => <l:$420 {norm=$41e {$41d[$80]}, exc=$244 {NullPtrExc($80)}}, c:$42b {norm=$3e7 {MemOpaque:L01}, exc=$244 {NullPtrExc($80)}}>
N012 [000354]   CNS_INT   16 field offset Fseq[Tail] => $281 {LngCns:  16}
N013 [000355]   ADD       => <l:$1a4 {norm=$1a2 {ADD($281, $41e)}, exc=$244 {NullPtrExc($80)}}, c:$1a3 {norm=$1a1 {ADD($281, $3e7)}, exc=$244 {NullPtrExc($80)}}>
  VNApplySelectors:
    VNForHandle(Tail) is $1d0, fieldType is ref
    VNForMapSelect($3e2, $1d0):ref returns $42c {$3e2[$1d0]}
    VNForMapSelect($42c, $41e):ref returns $42d {$42c[$41e]}
N014 [000156]   IND       => <l:$435 {norm=$42d {$42c[$41e]}, exc=$433( {NullPtrExc($80)},  {NullPtrExc($1a2)})}, c:$434 {norm=$3e8 {MemOpaque:L01}, exc=$432( {NullPtrExc($80)},  {NullPtrExc($1a1)})}>
N015 [000157]   EQ        => <l:$34a {norm=$348 {EQ($422, $42d)}, exc=$439( {NullPtrExc($80)},  {NullPtrExc($19e)},  {NullPtrExc($1a2)})}, c:$349 {norm=$347 {EQ($3e4, $3e8)}, exc=$437( {NullPtrExc($80)},  {NullPtrExc($19d)},  {NullPtrExc($1a1)})}>

***** BB09, STMT00039(after)
N016 ( 17, 17) [000158] ---XG-------              *  JTRUE     void  
N015 ( 15, 15) [000157] N--XG--N-U--              \--*  EQ        int    <l:$34a, c:$349>
N007 (  7,  7) [000153] ---XG-------                 +--*  IND       ref    <l:$42a, c:$429>
N006 (  5,  5) [000351] ---XG--N----                 |  \--*  ADD       byref  <l:$1a0, c:$19f>
N004 (  4,  4) [000152] ---XG-------                 |     +--*  IND       ref    <l:$420, c:$41f>
N003 (  2,  2) [000353] -------N----                 |     |  \--*  ADD       byref  $181
N001 (  1,  1) [000151] ------------                 |     |     +--*  LCL_VAR   ref    V00 this         u:1 $80
N002 (  1,  1) [000352] ------------                 |     |     \--*  CNS_INT   long   8 field offset Fseq[_myList] $280
N005 (  1,  1) [000350] ------------                 |     \--*  CNS_INT   long   8 field offset Fseq[Head] $280
N014 (  7,  7) [000156] ---XG-------                 \--*  IND       ref    <l:$435, c:$434>
N013 (  5,  5) [000355] ---XG--N----                    \--*  ADD       byref  <l:$1a4, c:$1a3>
N011 (  4,  4) [000155] ---XG-------                       +--*  IND       ref    <l:$420, c:$42b>
N010 (  2,  2) [000357] -------N----                       |  \--*  ADD       byref  $181
N008 (  1,  1) [000154] ------------                       |     +--*  LCL_VAR   ref    V00 this         u:1 $80
N009 (  1,  1) [000356] ------------                       |     \--*  CNS_INT   long   8 field offset Fseq[_myList] $280
N012 (  1,  1) [000354] ------------                       \--*  CNS_INT   long   16 field offset Fseq[Tail] $281

finish(BB09).
   Succ(BB10).
     Not yet completed.
     All preds complete, adding to allDone.
   Succ(BB13).
     Not yet completed.
     All preds complete, adding to allDone.
   Succ(BB30).
     Not yet completed.
     Not all preds complete  Adding to notallDone, if necessary...
The SSA definition for ByrefExposed (#37) at start of BB13 is $120 {MemOpaque:L01}
The SSA definition for GcHeap (#38) at start of BB13 is $3e2 {MemOpaque:L01}
finish(BB13).
   Succ(BB30).
     Not yet completed.
     All preds complete, adding to allDone.
  Building phi application: $52 = SSA# 37.
  Building phi application: $43 = SSA# 10.
  Building phi application: $43a = phi($43, $52).
The SSA definition for ByrefExposed (#11) at start of BB30 is $43b {PhiMemoryDef($1d1, $43a)}
  Building phi application: $53 = SSA# 38.
  Building phi application: $54 = SSA# 9.
  Building phi application: $43c = phi($54, $53).
The SSA definition for GcHeap (#12) at start of BB30 is $43d {PhiMemoryDef($1d1, $43c)}

***** BB30, STMT00062(before)
N005 (  8,  8) [000226] ----G-------              *  JTRUE     void  
N004 (  6,  6) [000225] J---G--N----              \--*  EQ        int   
N002 (  4,  4) [000360] ----G-------                 +--*  CAST      int <- bool <- int
N001 (  3,  2) [000223] ----G-------                 |  \--*  LCL_VAR   int   (AX) V05 loc3         
N003 (  1,  1) [000224] ------------                 \--*  CNS_INT   int    0

N001 [000223]   LCL_VAR   V05 loc3          => $383 {ByrefExposedLoad($4b, $19c, $43b)}
    VNForCastOper(bool) is $44
N002 [000360]   CAST      => $34b {Cast($383, $44)}
N003 [000224]   CNS_INT   0 => $40 {IntCns 0}
N004 [000225]   EQ        => $34c {EQ($34b, $40)}

***** BB30, STMT00062(after)
N005 (  8,  8) [000226] ----G-------              *  JTRUE     void  
N004 (  6,  6) [000225] J---G--N----              \--*  EQ        int    $34c
N002 (  4,  4) [000360] ----G-------                 +--*  CAST      int <- bool <- int $34b
N001 (  3,  2) [000223] ----G-------                 |  \--*  LCL_VAR   int   (AX) V05 loc3          $383
N003 (  1,  1) [000224] ------------                 \--*  CNS_INT   int    0 $40

finish(BB30).
   Succ(BB31).
     Not yet completed.
     All preds complete, adding to allDone.
   Succ(BB32).
     Not yet completed.
     Not all preds complete  Adding to notallDone, if necessary...
       Was necessary.
The SSA definition for ByrefExposed (#11) at start of BB31 is $43b {PhiMemoryDef($1d1, $43a)}
The SSA definition for GcHeap (#12) at start of BB31 is $43d {PhiMemoryDef($1d1, $43c)}

***** BB31, STMT00064(before)
N003 ( 15,  7) [000229] --CXG-------              *  CALL      void   System.Threading.Monitor.Exit
N002 (  1,  1) [000228] ------------ arg0 in rcx  \--*  LCL_VAR   ref    V04 loc2         u:2 (last use)

N001 [000361]   ARGPLACE  => $3eb {MemOpaque:NotInLoop}
N002 [000228]   LCL_VAR   V04 loc2         u:2 (last use) => <l:$41a {$419[$80]}, c:$3df {MemOpaque:L01}>
VN of ARGPLACE tree [000361] updated to <l:$41a {$419[$80]}, c:$3df {MemOpaque:L01}>
  fgCurMemoryVN[GcHeap] assigned for CALL at [000229] to VN: $3ec.
N003 [000229]   CALL      => $VN.Void

***** BB31, STMT00064(after)
N003 ( 15,  7) [000229] --CXG-------              *  CALL      void   System.Threading.Monitor.Exit $VN.Void
N002 (  1,  1) [000228] ------------ arg0 in rcx  \--*  LCL_VAR   ref    V04 loc2         u:2 (last use) <l:$41a, c:$3df>

finish(BB31).
   Succ(BB32).
     Not yet completed.
     All preds complete, adding to allDone.
  Building phi application: $55 = SSA# 35.
  Building phi application: $56 = SSA# 11.
  Building phi application: $43e = phi($56, $55).
The SSA definition for ByrefExposed (#13) at start of BB32 is $43f {PhiMemoryDef($1d2, $43e)}
  Building phi application: $57 = SSA# 36.
  Building phi application: $58 = SSA# 12.
  Building phi application: $480 = phi($58, $57).
The SSA definition for GcHeap (#14) at start of BB32 is $481 {PhiMemoryDef($1d2, $480)}

***** BB32, STMT00063(before)
N001 (  0,  0) [000227] ------------              *  RETFILT   void  

N001 [000227]   RETFILT   => $441 {MemOpaque:NotInLoop}

***** BB32, STMT00063(after)
N001 (  0,  0) [000227] ------------              *  RETFILT   void   $441

finish(BB32).
   Succ(BB14).
     Not yet completed.
     All preds complete, adding to allDone.
The SSA definition for ByrefExposed (#13) at start of BB14 is $43f {PhiMemoryDef($1d2, $43e)}
The SSA definition for GcHeap (#14) at start of BB14 is $481 {PhiMemoryDef($1d2, $480)}
finish(BB14).
   Succ(BB15).
     Not yet completed.
     All preds complete, adding to allDone.
The SSA definition for ByrefExposed (#13) at start of BB15 is $43f {PhiMemoryDef($1d2, $43e)}
The SSA definition for GcHeap (#14) at start of BB15 is $481 {PhiMemoryDef($1d2, $480)}

***** BB15, STMT00041(before)
N003 ( 18,  8) [000164] -ACXG---R---              *  ASG       struct (copy)
N002 (  3,  2) [000162] D---G--N----              +--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  +--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
N001 ( 14,  5) [000161] --CXG-------              \--*  CALL      struct System.DateTime.get_Now

  fgCurMemoryVN[GcHeap] assigned for CALL at [000161] to VN: $3ed.
N001 [000161]   CALL      => $c6 {MemOpaque:NotInLoop}
  fgCurMemoryVN[ByrefExposed] assigned for COPYBLK - address-exposed local at [000164] to VN: $123.
N003 [000164]   ASG       => $VN.Void

***** BB15, STMT00041(after)
N003 ( 18,  8) [000164] -ACXG---R---              *  ASG       struct (copy) $VN.Void
N002 (  3,  2) [000162] D---G--N----              +--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  +--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
N001 ( 14,  5) [000161] --CXG-------              \--*  CALL      struct System.DateTime.get_Now $c6

---------

***** BB15, STMT00042(before)
N013 ( 53, 36) [000170] --CXG-------              *  CALL      void   System.Console.WriteLine
N012 ( 39, 30) [000169] --CXG------- arg0 in rcx  \--*  CALL      ref    System.String.Concat
N007 ( 17, 10) [000367] -ACXG---R-L- arg0 SETUP      +--*  ASG       ref   
N006 (  1,  1) [000366] D------N----                 |  +--*  LCL_VAR   ref    V24 tmp17        d:2
N005 ( 17, 10) [000167] --CXG-------                 |  \--*  CALL      ref    System.DateTime.ToString
N004 (  3,  3) [000166] ------------ this in rcx     |     \--*  ADDR      byref 
N003 (  3,  2) [000165] ----G--N----                 |        \--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                     |        \--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
N009 (  1,  1) [000368] ------------ arg0 in rcx     +--*  LCL_VAR   ref    V24 tmp17        u:2 (last use)
N011 (  4, 12) [000365] #---G------- arg1 in rdx     \--*  IND       ref   
N010 (  2, 10) [000364] H-----------                    \--*  CNS_INT(h) long   0x75003208 "	 Done.  Profiler is active, available options:"

N001 [000370]   ARGPLACE  => $3ee {MemOpaque:NotInLoop}
N002 [000363]   ARGPLACE  => $146 {MemOpaque:NotInLoop}
N003 [000165]   LCL_VAR   V02 loc0         
                                                      long   V02._dateData (offs=0x00) -> V17 tmp10         => $c7 {MemOpaque:NotInLoop}
N004 [000166]   ADDR      => $147 {MemOpaque:NotInLoop}
  fgCurMemoryVN[GcHeap] assigned for CALL at [000167] to VN: $3f0.
N005 [000167]   CALL      => $3ef {MemOpaque:NotInLoop}
N006 [000366]   LCL_VAR   V24 tmp17        d:2 => $3ef {MemOpaque:NotInLoop}
N007 [000367]   ASG       => $3ef {MemOpaque:NotInLoop}
N008 [000369]   ARGPLACE  => $3f2 {MemOpaque:NotInLoop}
N009 [000368]   LCL_VAR   V24 tmp17        u:2 (last use) => $3ef {MemOpaque:NotInLoop}
N010 [000364]   CNS_INT(h) 0x75003208 "	 Done.  Profiler is active, available options:" => $1d3 {Hnd const: 0x0000016D75003208}
N011 [000365]   IND       => $3f3 {NonNullIndirect($1d3)}
VN of ARGPLACE tree [000369] updated to $3f3 {NonNullIndirect($1d3)}
  fgCurMemoryVN[GcHeap] assigned for CALL at [000169] to VN: $3f5.
N012 [000169]   CALL      => $3f4 {MemOpaque:NotInLoop}
VN of ARGPLACE tree [000370] updated to $3f4 {MemOpaque:NotInLoop}
  fgCurMemoryVN[GcHeap] assigned for CALL at [000170] to VN: $3f6.
N013 [000170]   CALL      => $VN.Void

***** BB15, STMT00042(after)
N013 ( 53, 36) [000170] --CXG-------              *  CALL      void   System.Console.WriteLine $VN.Void
N012 ( 39, 30) [000169] --CXG------- arg0 in rcx  \--*  CALL      ref    System.String.Concat $3f4
N007 ( 17, 10) [000367] -ACXG---R-L- arg0 SETUP      +--*  ASG       ref    $3ef
N006 (  1,  1) [000366] D------N----                 |  +--*  LCL_VAR   ref    V24 tmp17        d:2 $3ef
N005 ( 17, 10) [000167] --CXG-------                 |  \--*  CALL      ref    System.DateTime.ToString $3ef
N004 (  3,  3) [000166] ------------ this in rcx     |     \--*  ADDR      byref  $147
N003 (  3,  2) [000165] ----G--N----                 |        \--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                     |        \--*    long   V02._dateData (offs=0x00) -> V17 tmp10         $c7
N009 (  1,  1) [000368] ------------ arg0 in rcx     +--*  LCL_VAR   ref    V24 tmp17        u:2 (last use) $3ef
N011 (  4, 12) [000365] #---G------- arg1 in rdx     \--*  IND       ref    $3f3
N010 (  2, 10) [000364] H-----------                    \--*  CNS_INT(h) long   0x75003208 "	 Done.  Profiler is active, available options:" $1d3

---------

***** BB15, STMT00043(before)
N004 ( 18, 18) [000172] --CXG-------              *  CALL      void   System.Console.WriteLine
N003 (  4, 12) [000372] #---G------- arg0 in rcx  \--*  IND       ref   
N002 (  2, 10) [000371] H-----------                 \--*  CNS_INT(h) long   0x75003210 "   Q = quit"

N001 [000373]   ARGPLACE  => $3f7 {MemOpaque:NotInLoop}
N002 [000371]   CNS_INT(h) 0x75003210 "   Q = quit" => $1d4 {Hnd const: 0x0000016D75003210}
N003 [000372]   IND       => $3f8 {NonNullIndirect($1d4)}
VN of ARGPLACE tree [000373] updated to $3f8 {NonNullIndirect($1d4)}
  fgCurMemoryVN[GcHeap] assigned for CALL at [000172] to VN: $3f9.
N004 [000172]   CALL      => $VN.Void

***** BB15, STMT00043(after)
N004 ( 18, 18) [000172] --CXG-------              *  CALL      void   System.Console.WriteLine $VN.Void
N003 (  4, 12) [000372] #---G------- arg0 in rcx  \--*  IND       ref    $3f8
N002 (  2, 10) [000371] H-----------                 \--*  CNS_INT(h) long   0x75003210 "   Q = quit" $1d4

---------

***** BB15, STMT00044(before)
N004 ( 18, 18) [000174] --CXG-------              *  CALL      void   System.Console.WriteLine
N003 (  4, 12) [000375] #---G------- arg0 in rcx  \--*  IND       ref   
N002 (  2, 10) [000374] H-----------                 \--*  CNS_INT(h) long   0x75003218 "   H = heap snapshot"

N001 [000376]   ARGPLACE  => $3fa {MemOpaque:NotInLoop}
N002 [000374]   CNS_INT(h) 0x75003218 "   H = heap snapshot" => $1d5 {Hnd const: 0x0000016D75003218}
N003 [000375]   IND       => $3fb {NonNullIndirect($1d5)}
VN of ARGPLACE tree [000376] updated to $3fb {NonNullIndirect($1d5)}
  fgCurMemoryVN[GcHeap] assigned for CALL at [000174] to VN: $3fc.
N004 [000174]   CALL      => $VN.Void

***** BB15, STMT00044(after)
N004 ( 18, 18) [000174] --CXG-------              *  CALL      void   System.Console.WriteLine $VN.Void
N003 (  4, 12) [000375] #---G------- arg0 in rcx  \--*  IND       ref    $3fb
N002 (  2, 10) [000374] H-----------                 \--*  CNS_INT(h) long   0x75003218 "   H = heap snapshot" $1d5

---------

***** BB15, STMT00045(before)
N004 ( 18, 18) [000176] --CXG-------              *  CALL      void   System.Console.WriteLine
N003 (  4, 12) [000378] #---G------- arg0 in rcx  \--*  IND       ref   
N002 (  2, 10) [000377] H-----------                 \--*  CNS_INT(h) long   0x75003220 "   G = GC (max gen)"

N001 [000379]   ARGPLACE  => $3fd {MemOpaque:NotInLoop}
N002 [000377]   CNS_INT(h) 0x75003220 "   G = GC (max gen)" => $1d6 {Hnd const: 0x0000016D75003220}
N003 [000378]   IND       => $3fe {NonNullIndirect($1d6)}
VN of ARGPLACE tree [000379] updated to $3fe {NonNullIndirect($1d6)}
  fgCurMemoryVN[GcHeap] assigned for CALL at [000176] to VN: $3ff.
N004 [000176]   CALL      => $VN.Void

***** BB15, STMT00045(after)
N004 ( 18, 18) [000176] --CXG-------              *  CALL      void   System.Console.WriteLine $VN.Void
N003 (  4, 12) [000378] #---G------- arg0 in rcx  \--*  IND       ref    $3fe
N002 (  2, 10) [000377] H-----------                 \--*  CNS_INT(h) long   0x75003220 "   G = GC (max gen)" $1d6

---------

***** BB15, STMT00046(before)
N004 ( 18, 18) [000178] --CXG-------              *  CALL      void   System.Console.WriteLine
N003 (  4, 12) [000381] #---G------- arg0 in rcx  \--*  IND       ref   
N002 (  2, 10) [000380] H-----------                 \--*  CNS_INT(h) long   0x75003228 "   R = clear the running flag to stop the consumer thread"

N001 [000382]   ARGPLACE  => $4c0 {MemOpaque:NotInLoop}
N002 [000380]   CNS_INT(h) 0x75003228 "   R = clear the running flag to stop the consumer thread" => $1d7 {Hnd const: 0x0000016D75003228}
N003 [000381]   IND       => $4c1 {NonNullIndirect($1d7)}
VN of ARGPLACE tree [000382] updated to $4c1 {NonNullIndirect($1d7)}
  fgCurMemoryVN[GcHeap] assigned for CALL at [000178] to VN: $4c2.
N004 [000178]   CALL      => $VN.Void

***** BB15, STMT00046(after)
N004 ( 18, 18) [000178] --CXG-------              *  CALL      void   System.Console.WriteLine $VN.Void
N003 (  4, 12) [000381] #---G------- arg0 in rcx  \--*  IND       ref    $4c1
N002 (  2, 10) [000380] H-----------                 \--*  CNS_INT(h) long   0x75003228 "   R = clear the running flag to stop the consumer thread" $1d7

finish(BB15).
   Succ(BB16).
     Not yet completed.
     Not all preds complete  Adding to notallDone, if necessary...
       Was necessary.
The SSA definition for ByrefExposed (#37) at start of BB10 is $120 {MemOpaque:L01}
The SSA definition for GcHeap (#38) at start of BB10 is $3e2 {MemOpaque:L01}

***** BB10, STMT00069(before)
N005 (  8,  8) [000261] ----G-------              *  JTRUE     void  
N004 (  6,  6) [000262] J---G--N----              \--*  EQ        int   
N002 (  4,  4) [000358] ----G-------                 +--*  CAST      int <- bool <- int
N001 (  3,  2) [000263] ----G-------                 |  \--*  LCL_VAR   int   (AX) V05 loc3         
N003 (  1,  1) [000264] ------------                 \--*  CNS_INT   int    0

N001 [000263]   LCL_VAR   V05 loc3          => $384 {ByrefExposedLoad($4b, $19c, $120)}
    VNForCastOper(bool) is $44
N002 [000358]   CAST      => $34d {Cast($384, $44)}
N003 [000264]   CNS_INT   0 => $40 {IntCns 0}
N004 [000262]   EQ        => $34e {EQ($34d, $40)}

***** BB10, STMT00069(after)
N005 (  8,  8) [000261] ----G-------              *  JTRUE     void  
N004 (  6,  6) [000262] J---G--N----              \--*  EQ        int    $34e
N002 (  4,  4) [000358] ----G-------                 +--*  CAST      int <- bool <- int $34d
N001 (  3,  2) [000263] ----G-------                 |  \--*  LCL_VAR   int   (AX) V05 loc3          $384
N003 (  1,  1) [000264] ------------                 \--*  CNS_INT   int    0 $40

finish(BB10).
   Succ(BB11).
     Not yet completed.
     All preds complete, adding to allDone.
   Succ(BB12).
     Not yet completed.
     Not all preds complete  Adding to notallDone, if necessary...
       Was necessary.
The SSA definition for ByrefExposed (#37) at start of BB11 is $120 {MemOpaque:L01}
The SSA definition for GcHeap (#38) at start of BB11 is $3e2 {MemOpaque:L01}

***** BB11, STMT00070(before)
N003 ( 15,  7) [000265] --CXG-------              *  CALL      void   System.Threading.Monitor.Exit
N002 (  1,  1) [000266] ------------ arg0 in rcx  \--*  LCL_VAR   ref    V04 loc2         u:2 (last use)

N001 [000359]   ARGPLACE  => $4c3 {MemOpaque:L01}
N002 [000266]   LCL_VAR   V04 loc2         u:2 (last use) => <l:$41a {$419[$80]}, c:$3df {MemOpaque:L01}>
VN of ARGPLACE tree [000359] updated to <l:$41a {$419[$80]}, c:$3df {MemOpaque:L01}>
  fgCurMemoryVN[GcHeap] assigned for CALL at [000265] to VN: $4c4.
N003 [000265]   CALL      => $VN.Void

***** BB11, STMT00070(after)
N003 ( 15,  7) [000265] --CXG-------              *  CALL      void   System.Threading.Monitor.Exit $VN.Void
N002 (  1,  1) [000266] ------------ arg0 in rcx  \--*  LCL_VAR   ref    V04 loc2         u:2 (last use) <l:$41a, c:$3df>

finish(BB11).
   Succ(BB12).
     Not yet completed.
     All preds complete, adding to allDone.
  Building phi application: $59 = SSA# 43.
  Building phi application: $52 = SSA# 37.
  Building phi application: $482 = phi($52, $59).
The SSA definition for ByrefExposed (#39) at start of BB12 is $483 {PhiMemoryDef($1d8, $482)}
  Building phi application: $5a = SSA# 44.
  Building phi application: $53 = SSA# 38.
  Building phi application: $484 = phi($53, $5a).
The SSA definition for GcHeap (#40) at start of BB12 is $485 {PhiMemoryDef($1d8, $484)}

***** BB12, STMT00040(before)
N003 ( 15,  7) [000160] --CXG-------              *  CALL      void   System.Threading.Thread.Sleep
N002 (  1,  1) [000159] ------------ arg0 in rcx  \--*  CNS_INT   int    100

N001 [000362]   ARGPLACE  => $302 {MemOpaque:L01}
N002 [000159]   CNS_INT   100 => $5b {IntCns 100}
VN of ARGPLACE tree [000362] updated to $5b {IntCns 100}
  fgCurMemoryVN[GcHeap] assigned for CALL at [000160] to VN: $4c5.
N003 [000160]   CALL      => $VN.Void

***** BB12, STMT00040(after)
N003 ( 15,  7) [000160] --CXG-------              *  CALL      void   System.Threading.Thread.Sleep $VN.Void
N002 (  1,  1) [000159] ------------ arg0 in rcx  \--*  CNS_INT   int    100 $5b

finish(BB12).
   Succ(BB08).
Computing ByrefExposed state for block BB16, entry block for loops 2 to 2:
  Loop 2 has memory havoc effect; heap state is new unique $4c6.
The SSA definition for ByrefExposed (#17) at start of BB16 is $4c6 {MemOpaque:L02}
Computing GcHeap state for block BB16, entry block for loops 2 to 2:
  Loop 2 has memory havoc effect; heap state is new unique $4c7.
The SSA definition for GcHeap (#18) at start of BB16 is $4c7 {MemOpaque:L02}
finish(BB16).
   Succ(BB17).
     Not yet completed.
     Not all preds complete  Adding to notallDone, if necessary...
       Was necessary.
Computing ByrefExposed state for block BB17, entry block for loops 3 to 3:
  Loop 3 has memory havoc effect; heap state is new unique $4c8.
The SSA definition for ByrefExposed (#19) at start of BB17 is $4c8 {MemOpaque:L03}
Computing GcHeap state for block BB17, entry block for loops 3 to 3:
  Loop 3 has memory havoc effect; heap state is new unique $4c9.
The SSA definition for GcHeap (#20) at start of BB17 is $4c9 {MemOpaque:L03}
finish(BB17).
   Succ(BB18).
     Not yet completed.
     Not all preds complete  Adding to notallDone, if necessary...
       Was necessary.
Computing ByrefExposed state for block BB18, entry block for loops 4 to 4:
  Loop 4 has memory havoc effect; heap state is new unique $4ca.
The SSA definition for ByrefExposed (#21) at start of BB18 is $4ca {MemOpaque:L04}
Computing GcHeap state for block BB18, entry block for loops 4 to 4:
  Loop 4 has memory havoc effect; heap state is new unique $4cb.
The SSA definition for GcHeap (#22) at start of BB18 is $4cb {MemOpaque:L04}
finish(BB18).
   Succ(BB19).
     Not yet completed.
     Not all preds complete  Adding to notallDone, if necessary...
       Was necessary.
Computing ByrefExposed state for block BB19, entry block for loops 5 to 5:
  Loop 5 has memory havoc effect; heap state is new unique $4cc.
The SSA definition for ByrefExposed (#23) at start of BB19 is $4cc {MemOpaque:L05}
Computing GcHeap state for block BB19, entry block for loops 5 to 5:
  Loop 5 has memory havoc effect; heap state is new unique $4cd.
The SSA definition for GcHeap (#24) at start of BB19 is $4cd {MemOpaque:L05}

***** BB19, STMT00048(before)
N006 ( 18, 11) [000233] S-CXG-------              *  CALL      void   System.ConsolePal.ReadKey
N004 (  3,  3) [000235] ------------ arg0 in rcx  +--*  ADDR      long  
N003 (  3,  2) [000236] ----G--N----              |  \--*  LCL_VAR   struct<System.ConsoleKeyInfo, 12>(AX)(P) V06 loc4         
                                                  |  \--*    ushort V06._keyChar (offs=0x00) -> V18 tmp11        
                                                  |  \--*    int    V06._key (offs=0x04) -> V19 tmp12        
                                                  |  \--*    int    V06._mods (offs=0x08) -> V20 tmp13        
N005 (  1,  1) [000232] ------------ arg1 in rdx  \--*  CNS_INT   int    0

N001 [000383]   ARGPLACE  => $20b {MemOpaque:L05}
N002 [000384]   ARGPLACE  => $303 {MemOpaque:L05}
N003 [000236]   LCL_VAR   V06 loc4         
                                                      ushort V06._keyChar (offs=0x00) -> V18 tmp11        
                                                      int    V06._key (offs=0x04) -> V19 tmp12        
                                                      int    V06._mods (offs=0x08) -> V20 tmp13         => $c8 {MemOpaque:L05}
N004 [000235]   ADDR      => $148 {MemOpaque:L05}
N005 [000232]   CNS_INT   0 => $40 {IntCns 0}
VN of ARGPLACE tree [000383] updated to $148 {MemOpaque:L05}
VN of ARGPLACE tree [000384] updated to $40 {IntCns 0}
  fgCurMemoryVN[GcHeap] assigned for CALL at [000233] to VN: $4ce.
N006 [000233]   CALL      => $VN.Void

***** BB19, STMT00048(after)
N006 ( 18, 11) [000233] S-CXG-------              *  CALL      void   System.ConsolePal.ReadKey $VN.Void
N004 (  3,  3) [000235] ------------ arg0 in rcx  +--*  ADDR      long   $148
N003 (  3,  2) [000236] ----G--N----              |  \--*  LCL_VAR   struct<System.ConsoleKeyInfo, 12>(AX)(P) V06 loc4         
                                                  |  \--*    ushort V06._keyChar (offs=0x00) -> V18 tmp11        
                                                  |  \--*    int    V06._key (offs=0x04) -> V19 tmp12        
                                                  |  \--*    int    V06._mods (offs=0x08) -> V20 tmp13         $c8
N005 (  1,  1) [000232] ------------ arg1 in rdx  \--*  CNS_INT   int    0 $40

---------

***** BB19, STMT00050(before)
N004 (  7,  6) [000189] ----G-------              *  JTRUE     void  
N003 (  5,  4) [000188] N---G--N-U--              \--*  NE        int   
N001 (  3,  2) [000240] ----G-------                 +--*  LCL_VAR   int   (AX) V19 tmp12        
N002 (  1,  1) [000187] ------------                 \--*  CNS_INT   int    71

N001 [000240]   LCL_VAR   V19 tmp12         => $385 {ByrefExposedLoad($4b, $1a6, $12d)}
N002 [000187]   CNS_INT   71 => $5e {IntCns 71}
N003 [000188]   NE        => $34f {NE($385, $5e)}

***** BB19, STMT00050(after)
N004 (  7,  6) [000189] ----G-------              *  JTRUE     void  
N003 (  5,  4) [000188] N---G--N-U--              \--*  NE        int    $34f
N001 (  3,  2) [000240] ----G-------                 +--*  LCL_VAR   int   (AX) V19 tmp12         $385
N002 (  1,  1) [000187] ------------                 \--*  CNS_INT   int    71 $5e

finish(BB19).
   Succ(BB20).
     Not yet completed.
     All preds complete, adding to allDone.
   Succ(BB21).
     Not yet completed.
     All preds complete, adding to allDone.
The SSA definition for ByrefExposed (#25) at start of BB21 is $12d {MemOpaque:L05}
The SSA definition for GcHeap (#26) at start of BB21 is $4ce {MemOpaque:L05}

***** BB21, STMT00052(before)
N004 (  7,  6) [000196] ----G-------              *  JTRUE     void  
N003 (  5,  4) [000195] N---G--N-U--              \--*  NE        int   
N001 (  3,  2) [000244] ----G-------                 +--*  LCL_VAR   int   (AX) V19 tmp12        
N002 (  1,  1) [000194] ------------                 \--*  CNS_INT   int    72

N001 [000244]   LCL_VAR   V19 tmp12         => $385 {ByrefExposedLoad($4b, $1a6, $12d)}
N002 [000194]   CNS_INT   72 => $5f {IntCns 72}
N003 [000195]   NE        => $350 {NE($385, $5f)}

***** BB21, STMT00052(after)
N004 (  7,  6) [000196] ----G-------              *  JTRUE     void  
N003 (  5,  4) [000195] N---G--N-U--              \--*  NE        int    $350
N001 (  3,  2) [000244] ----G-------                 +--*  LCL_VAR   int   (AX) V19 tmp12         $385
N002 (  1,  1) [000194] ------------                 \--*  CNS_INT   int    72 $5f

finish(BB21).
   Succ(BB22).
     Not yet completed.
     All preds complete, adding to allDone.
   Succ(BB23).
     Not yet completed.
     All preds complete, adding to allDone.
The SSA definition for ByrefExposed (#25) at start of BB23 is $12d {MemOpaque:L05}
The SSA definition for GcHeap (#26) at start of BB23 is $4ce {MemOpaque:L05}

***** BB23, STMT00054(before)
N004 (  7,  6) [000203] ----G-------              *  JTRUE     void  
N003 (  5,  4) [000202] N---G--N-U--              \--*  NE        int   
N001 (  3,  2) [000248] ----G-------                 +--*  LCL_VAR   int   (AX) V19 tmp12        
N002 (  1,  1) [000201] ------------                 \--*  CNS_INT   int    82

N001 [000248]   LCL_VAR   V19 tmp12         => $385 {ByrefExposedLoad($4b, $1a6, $12d)}
N002 [000201]   CNS_INT   82 => $60 {IntCns 82}
N003 [000202]   NE        => $351 {NE($385, $60)}

***** BB23, STMT00054(after)
N004 (  7,  6) [000203] ----G-------              *  JTRUE     void  
N003 (  5,  4) [000202] N---G--N-U--              \--*  NE        int    $351
N001 (  3,  2) [000248] ----G-------                 +--*  LCL_VAR   int   (AX) V19 tmp12         $385
N002 (  1,  1) [000201] ------------                 \--*  CNS_INT   int    82 $60

finish(BB23).
   Succ(BB24).
     Not yet completed.
     All preds complete, adding to allDone.
   Succ(BB25).
     Not yet completed.
     All preds complete, adding to allDone.
The SSA definition for ByrefExposed (#25) at start of BB25 is $12d {MemOpaque:L05}
The SSA definition for GcHeap (#26) at start of BB25 is $4ce {MemOpaque:L05}

***** BB25, STMT00056(before)
N004 (  7,  6) [000210] ----G-------              *  JTRUE     void  
N003 (  5,  4) [000209] N---G--N-U--              \--*  NE        int   
N001 (  3,  2) [000252] ----G-------                 +--*  LCL_VAR   int   (AX) V19 tmp12        
N002 (  1,  1) [000208] ------------                 \--*  CNS_INT   int    81

N001 [000252]   LCL_VAR   V19 tmp12         => $385 {ByrefExposedLoad($4b, $1a6, $12d)}
N002 [000208]   CNS_INT   81 => $61 {IntCns 81}
N003 [000209]   NE        => $352 {NE($385, $61)}

***** BB25, STMT00056(after)
N004 (  7,  6) [000210] ----G-------              *  JTRUE     void  
N003 (  5,  4) [000209] N---G--N-U--              \--*  NE        int    $352
N001 (  3,  2) [000252] ----G-------                 +--*  LCL_VAR   int   (AX) V19 tmp12         $385
N002 (  1,  1) [000208] ------------                 \--*  CNS_INT   int    81 $61

finish(BB25).
   Succ(BB26).
     Not yet completed.
     All preds complete, adding to allDone.
   Succ(BB16).
The SSA definition for ByrefExposed (#25) at start of BB26 is $12d {MemOpaque:L05}
The SSA definition for GcHeap (#26) at start of BB26 is $4ce {MemOpaque:L05}

***** BB26, STMT00057(before)
N006 (  7,  7) [000214] -A-XG-------              *  ASG       bool  
N004 (  5,  5) [000213] D--XG--N----              +--*  IND       bool  
N003 (  2,  2) [000389] -------N----              |  \--*  ADD       byref 
N001 (  1,  1) [000211] ------------              |     +--*  LCL_VAR   ref    V00 this         u:1 (last use)
N002 (  1,  1) [000388] ------------              |     \--*  CNS_INT   long   16 field offset Fseq[_running]
N005 (  1,  1) [000212] ------------              \--*  CNS_INT   int    0

N001 [000211]   LCL_VAR   V00 this         u:1 (last use) => $80 {InitVal($40)}
N002 [000388]   CNS_INT   16 field offset Fseq[_running] => $281 {LngCns:  16}
N003 [000389]   ADD       => $1a7 {ADD($80, $281)}
N005 [000212]   CNS_INT   0 => $40 {IntCns 0}
    VNForCastOper(bool) is $44
  VNApplySelectors:
    VNForHandle(_running) is $1d9, fieldType is bool
    VNForMapSelect($4ce, $1d9):bool returns $500 {$4ce[$1d9]}
    VNForMapSelect($500, $80):bool returns $501 {$500[$80]}
    VNForMapStore($500, $80, $40):bool in BB26 returns $540 {$500[$80 := $40]}
  VNApplySelectorsAssign:
    VNForHandle(_running) is $1d9, fieldType is bool
    VNForMapStore($4ce, $1d9, $540):bool in BB26 returns $541 {$4ce[$1d9 := $540]}
  fgCurMemoryVN[GcHeap] assigned for StoreField at [000214] to VN: $541.
N006 [000214]   ASG       => $VN.Void

***** BB26, STMT00057(after)
N006 (  7,  7) [000214] -A-XG-------              *  ASG       bool   $VN.Void
N004 (  5,  5) [000213] D--XG--N----              +--*  IND       bool   $40
N003 (  2,  2) [000389] -------N----              |  \--*  ADD       byref  $1a7
N001 (  1,  1) [000211] ------------              |     +--*  LCL_VAR   ref    V00 this         u:1 (last use) $80
N002 (  1,  1) [000388] ------------              |     \--*  CNS_INT   long   16 field offset Fseq[_running] $281
N005 (  1,  1) [000212] ------------              \--*  CNS_INT   int    0 $40

---------

***** BB26, STMT00058(before)
N001 (  0,  0) [000215] ------------              *  RETURN    void  

N001 [000215]   RETURN    => $442 {MemOpaque:NotInLoop}

***** BB26, STMT00058(after)
N001 (  0,  0) [000215] ------------              *  RETURN    void   $442

finish(BB26).
The SSA definition for ByrefExposed (#25) at start of BB24 is $12d {MemOpaque:L05}
The SSA definition for GcHeap (#26) at start of BB24 is $4ce {MemOpaque:L05}

***** BB24, STMT00059(before)
N006 (  7,  7) [000219] -A-XG-------              *  ASG       bool  
N004 (  5,  5) [000218] D--XG--N----              +--*  IND       bool  
N003 (  2,  2) [000387] -------N----              |  \--*  ADD       byref 
N001 (  1,  1) [000216] ------------              |     +--*  LCL_VAR   ref    V00 this         u:1
N002 (  1,  1) [000386] ------------              |     \--*  CNS_INT   long   16 field offset Fseq[_running]
N005 (  1,  1) [000217] ------------              \--*  CNS_INT   int    0

N001 [000216]   LCL_VAR   V00 this         u:1 => $80 {InitVal($40)}
N002 [000386]   CNS_INT   16 field offset Fseq[_running] => $281 {LngCns:  16}
N003 [000387]   ADD       => $1a7 {ADD($80, $281)}
N005 [000217]   CNS_INT   0 => $40 {IntCns 0}
    VNForCastOper(bool) is $44
  VNApplySelectors:
    VNForHandle(_running) is $1d9, fieldType is bool
    VNForMapSelect($4ce, $1d9):bool returns $500 {$4ce[$1d9]}
    VNForMapSelect($500, $80):bool returns $501 {$500[$80]}
    VNForMapStore($500, $80, $40):bool in BB24 returns $542 {$500[$80 := $40]@L03}
  VNApplySelectorsAssign:
    VNForHandle(_running) is $1d9, fieldType is bool
    VNForMapStore($4ce, $1d9, $542):bool in BB24 returns $543 {$4ce[$1d9 := $542]@L03}
  fgCurMemoryVN[GcHeap] assigned for StoreField at [000219] to VN: $543.
N006 [000219]   ASG       => $VN.Void

***** BB24, STMT00059(after)
N006 (  7,  7) [000219] -A-XG-------              *  ASG       bool   $VN.Void
N004 (  5,  5) [000218] D--XG--N----              +--*  IND       bool   $40
N003 (  2,  2) [000387] -------N----              |  \--*  ADD       byref  $1a7
N001 (  1,  1) [000216] ------------              |     +--*  LCL_VAR   ref    V00 this         u:1 $80
N002 (  1,  1) [000386] ------------              |     \--*  CNS_INT   long   16 field offset Fseq[_running] $281
N005 (  1,  1) [000217] ------------              \--*  CNS_INT   int    0 $40

finish(BB24).
   Succ(BB17).
The SSA definition for ByrefExposed (#25) at start of BB22 is $12d {MemOpaque:L05}
The SSA definition for GcHeap (#26) at start of BB22 is $4ce {MemOpaque:L05}

***** BB22, STMT00060(before)
N001 ( 14,  5) [000220] --CXG-------              *  CALL      void   System.Diagnostics.Debugger.Break

  fgCurMemoryVN[GcHeap] assigned for CALL at [000220] to VN: $4cf.
N001 [000220]   CALL      => $VN.Void

***** BB22, STMT00060(after)
N001 ( 14,  5) [000220] --CXG-------              *  CALL      void   System.Diagnostics.Debugger.Break $VN.Void

finish(BB22).
   Succ(BB18).
The SSA definition for ByrefExposed (#25) at start of BB20 is $12d {MemOpaque:L05}
The SSA definition for GcHeap (#26) at start of BB20 is $4ce {MemOpaque:L05}

***** BB20, STMT00061(before)
N003 ( 28, 11) [000222] --CXG-------              *  CALL      void   System.GC.Collect
N002 ( 14,  5) [000221] --CXG------- arg0 in rcx  \--*  CALL      int    System.GC.get_MaxGeneration

N001 [000385]   ARGPLACE  => $304 {MemOpaque:L05}
  fgCurMemoryVN[GcHeap] assigned for CALL at [000221] to VN: $4d0.
N002 [000221]   CALL      => $305 {MemOpaque:L05}
VN of ARGPLACE tree [000385] updated to $305 {MemOpaque:L05}
  fgCurMemoryVN[GcHeap] assigned for CALL at [000222] to VN: $4d1.
N003 [000222]   CALL      => $VN.Void

***** BB20, STMT00061(after)
N003 ( 28, 11) [000222] --CXG-------              *  CALL      void   System.GC.Collect $VN.Void
N002 ( 14,  5) [000221] --CXG------- arg0 in rcx  \--*  CALL      int    System.GC.get_MaxGeneration $305

finish(BB20).
   Succ(BB19).

*************** Finishing PHASE Do value numbering

*************** Starting PHASE Hoist loop code

*************** In optHoistLoopCode()
Blocks/Trees before phase

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..072)-> BB07 ( cond )                     i hascall gcsafe newobj 
BB02 [0001]  2       BB01,BB06             8     0 [072..07B)                                     i Loop gcsafe bwd bwd-target 
BB03 [0002]  1  0    BB02                  8     0 [07B..0CA)                 T0      try { }     keep i try hascall gcsafe newobj bwd 
BB04 [0038]  1       BB03                  8     0 [0CA..0CD)-> BB06 ( cond )                     keep i gcsafe bwd cfb 
BB05 [0039]  1       BB04                  4     0 [0CD..0D4)                                     i hascall gcsafe bwd 
BB06 [0006]  2       BB04,BB05             8     0 [0D4..0DD)-> BB02 ( cond )                     i gcsafe bwd 
BB07 [0008]  2       BB01,BB06             1       [0DD..0F9)                                     i hascall gcsafe 
BB08 [0009]  2       BB07,BB12             8     1 [0F9..102)                                     i Loop gcsafe bwd bwd-target 
BB09 [0010]  1  1    BB08                  8     1 [102..122)-> BB13 ( cond ) T1      try { }     keep i try hascall gcsafe bwd 
BB10 [0041]  1       BB09                  8     1 [126..129)-> BB12 ( cond )                     keep i gcsafe bwd cfb 
BB11 [0042]  1       BB10                  4     1 [129..130)                                     i hascall gcsafe bwd 
BB12 [0016]  2       BB10,BB11             8     1 [130..139)-> BB08 (always)                     i hascall gcsafe bwd 
BB13 [0030]  1       BB09                  1       [???..???)-> BB30 (callf )                     i internal gcsafe 
BB14 [0031]  1       BB32                  1       [???..???)-> BB15 (ALWAYS)                     i internal gcsafe KEEP 
BB15 [0017]  1       BB14                  1       [139..17D)                                     i hascall gcsafe 
BB16 [0045]  2       BB15,BB25             1     2 [???..???)                                     internal gcsafe 
BB17 [0046]  2       BB16,BB24             1     3 [???..???)                                     internal gcsafe 
BB18 [0047]  2       BB17,BB22             1     4 [???..???)                                     internal gcsafe 
BB19 [0018]  2       BB18,BB20             8     5 [17D..18F)-> BB21 ( cond )                     i Loop hascall gcsafe bwd bwd-target 
BB20 [0019]  1       BB19                  8     5 [18F..19B)-> BB19 (always)                     i hascall gcsafe bwd 
BB21 [0020]  1       BB19                  1     4 [19B..1A6)-> BB23 ( cond )                     i gcsafe bwd 
BB22 [0021]  1       BB21                  1     4 [1A6..1AD)-> BB18 (always)                     i hascall gcsafe bwd 
BB23 [0022]  1       BB21                  1     3 [1AD..1B8)-> BB25 ( cond )                     i gcsafe bwd 
BB24 [0023]  1       BB23                  1     3 [1B8..1C1)-> BB17 (always)                     i gcsafe bwd 
BB25 [0024]  1       BB23                  1     2 [1C1..1CC)-> BB16 ( cond )                     i gcsafe bwd 
BB26 [0025]  1       BB25                  1       [1CC..1D4)        (return)                     i gcsafe 
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ funclets follow
BB27 [0003]  1     0                       0       [0CA..0CD)-> BB29 ( cond )    H0 F fault {     keep i rare flet bwd 
BB28 [0004]  1     0 BB27                  0       [0CD..0D3)                    H0               i rare hascall bwd 
BB29 [0005]  2     0 BB27,BB28             0       [0D3..0D4)        (finret)    H0   }           i rare bwd 
BB30 [0013]  2     1 BB13                  1       [126..129)-> BB32 ( cond )    H1 F finally {   keep i gcsafe flet bwd 
BB31 [0014]  1     1 BB30                  1       [129..12F)                    H1               i hascall gcsafe bwd 
BB32 [0015]  2     1 BB30,BB31             1       [12F..130)        (finret)    H1   }           i gcsafe bwd 
-----------------------------------------------------------------------------------------------------------------------------------------

------------ BB01 [000..072) -> BB07 (cond), preds={} succs={BB02,BB07}

***** BB01
STMT00000 (IL 0x000...0x005)
N003 ( 18,  8) [000003] -ACXG---R---              *  ASG       struct (copy) $VN.Void
N002 (  3,  2) [000001] D---G--N----              +--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  +--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
N001 ( 14,  5) [000000] --CXG-------              \--*  CALL      struct System.DateTime.get_Now $c0

***** BB01
STMT00001 (IL 0x006...0x022)
N013 ( 53, 36) [000009] --CXG-------              *  CALL      void   System.Console.WriteLine $VN.Void
N012 ( 39, 30) [000008] --CXG------- arg0 in rcx  \--*  CALL      ref    System.String.Concat $89
N007 ( 17, 10) [000272] -ACXG---R-L- arg0 SETUP      +--*  ASG       ref    $84
N006 (  1,  1) [000271] D------N----                 |  +--*  LCL_VAR   ref    V21 tmp14        d:2 $84
N005 ( 17, 10) [000006] --CXG-------                 |  \--*  CALL      ref    System.DateTime.ToString $84
N004 (  3,  3) [000005] ------------ this in rcx     |     \--*  ADDR      byref  $141
N003 (  3,  2) [000004] ----G--N----                 |        \--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                     |        \--*    long   V02._dateData (offs=0x00) -> V17 tmp10         $c1
N009 (  1,  1) [000273] ------------ arg0 in rcx     +--*  LCL_VAR   ref    V21 tmp14        u:2 (last use) $84
N011 (  4, 12) [000270] #---G------- arg1 in rdx     \--*  IND       ref    $88
N010 (  2, 10) [000269] H-----------                    \--*  CNS_INT(h) long   0x750031F0 "	 Created list" $1c0

***** BB01
STMT00002 (IL 0x01C...  ???)
N005 ( 16, 16) [000014] -AC-----R---              *  ASG       ref    $240
N004 (  1,  1) [000013] D------N----              +--*  LCL_VAR   ref    V08 tmp1         d:2 $240
N003 ( 16, 16) [000012] --C---------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST $240
N002 (  2, 10) [000011] H----------- arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb3ee2350 method $1c1

***** BB01
STMT00003 (IL   ???...  ???)
N003 ( 15,  8) [000016] --CXG-------              *  CALL      void   FalseLeakRepro.List..ctor $VN.Void
N002 (  1,  1) [000015] ------------ this in rcx  \--*  LCL_VAR   ref    V08 tmp1         u:2 $240

***** BB01
STMT00004 (IL 0x022...  ???)
N006 (  6,  6) [000019] -A-XG-------              *  ASG       ref    $VN.Void
N004 (  4,  4) [000018] D--XG--N----              +--*  IND       ref    $240
N003 (  2,  2) [000279] -------N----              |  \--*  ADD       byref  $181
N001 (  1,  1) [000010] ------------              |     +--*  LCL_VAR   ref    V00 this         u:1 $80
N002 (  1,  1) [000278] ------------              |     \--*  CNS_INT   long   8 field offset Fseq[_myList] $280
N005 (  1,  1) [000017] ------------              \--*  LCL_VAR   ref    V08 tmp1         u:2 (last use) $240

***** BB01
STMT00005 (IL 0x027...0x037)
N005 ( 16, 16) [000026] -AC-----R---              *  ASG       ref    $243
N004 (  1,  1) [000025] D------N----              +--*  LCL_VAR   ref    V09 tmp2         d:2 $243
N003 ( 16, 16) [000024] --C---------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST $243
N002 (  2, 10) [000023] H----------- arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb3b058b8 token $1c3

***** BB01
STMT00007 (IL   ???...  ???)
N009 (  7,  7) [000030] -A-XG---R---              *  ASG       ref    <l:$250, c:$24f>
N008 (  1,  1) [000029] D------N----              +--*  LCL_VAR   ref    V10 tmp3         d:2 <l:$248, c:$94>
N007 (  7,  7) [000022] ---XG-------              \--*  IND       ref    <l:$250, c:$24f>
N006 (  5,  5) [000282] ---XG--N----                 \--*  ADD       byref  <l:$185, c:$184>
N004 (  4,  4) [000021] ---XG-------                    +--*  IND       ref    <l:$246, c:$245>
N003 (  2,  2) [000284] -------N----                    |  \--*  ADD       byref  $181
N001 (  1,  1) [000020] ------------                    |     +--*  LCL_VAR   ref    V00 this         u:1 $80
N002 (  1,  1) [000283] ------------                    |     \--*  CNS_INT   long   8 field offset Fseq[_myList] $280
N005 (  1,  1) [000281] ------------                    \--*  CNS_INT   long   8 field offset Fseq[Head] $280

***** BB01
STMT00006 (IL   ???...  ???)
N003 ( 15,  8) [000028] --CXG-------              *  CALL      void   System.Object..ctor $VN.Void
N002 (  1,  1) [000027] ------------ this in rcx  \--*  LCL_VAR   ref    V09 tmp2         u:2 $243

***** BB01
STMT00008 (IL 0x037...  ???)
N006 (  6,  6) [000034] -A-XG-------              *  ASG       ref    $VN.Void
N004 (  4,  4) [000033] D--XG--N----              +--*  IND       ref    $243
N003 (  2,  2) [000287] -------N----              |  \--*  ADD       byref  <l:$187, c:$186>
N001 (  1,  1) [000031] ------------              |     +--*  LCL_VAR   ref    V10 tmp3         u:2 (last use) <l:$248, c:$94>
N002 (  1,  1) [000286] ------------              |     \--*  CNS_INT   long   16 field offset Fseq[Data] $281
N005 (  1,  1) [000032] ------------              \--*  LCL_VAR   ref    V09 tmp2         u:2 (last use) $243

***** BB01
STMT00009 (IL 0x03C...0x057)
N005 ( 16, 16) [000040] -AC-----R---              *  ASG       ref    $253
N004 (  1,  1) [000039] D------N----              +--*  LCL_VAR   ref    V11 tmp4         d:2 $253
N003 ( 16, 16) [000038] --C---------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST $253
N002 (  2, 10) [000037] H----------- arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb3ee6200 token $1c6

***** BB01
STMT00010 (IL   ???...  ???)
N007 ( 18, 21) [000042] --CXG-------              *  CALL      void   System.MulticastDelegate.CtorClosed $VN.Void
N004 (  1,  1) [000041] ------------ this in rcx  +--*  LCL_VAR   ref    V11 tmp4         u:2 $253
N005 (  1,  1) [000035] ------------ arg1 in rdx  +--*  LCL_VAR   ref    V00 this         u:1 $80
N006 (  2, 10) [000036] H----------- arg2 in r8   \--*  CNS_INT(h) long   0x7ffdb3b213f8 ftn $1c7

***** BB01
STMT00011 (IL 0x048...  ???)
N005 ( 16, 16) [000047] -AC-----R---              *  ASG       ref    $254
N004 (  1,  1) [000046] D------N----              +--*  LCL_VAR   ref    V12 tmp5         d:2 $254
N003 ( 16, 16) [000045] --C---------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWFAST $254
N002 (  2, 10) [000044] H----------- arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb3c84e80 token $1c8

***** BB01
STMT00012 (IL   ???...  ???)
N005 ( 16, 10) [000049] --CXG-------              *  CALL      void   System.Threading.Thread..ctor $VN.Void
N003 (  1,  1) [000048] ------------ this in rcx  +--*  LCL_VAR   ref    V12 tmp5         u:2 $254
N004 (  1,  1) [000043] ------------ arg1 in rdx  \--*  LCL_VAR   ref    V11 tmp4         u:2 (last use) $253

***** BB01
STMT00013 (IL 0x04D...  ???)
N003 ( 15,  8) [000051] --CXG-------              *  CALL nullcheck void   System.Threading.Thread.Start $VN.Void
N002 (  1,  1) [000050] ------------ this in rcx  \--*  LCL_VAR   ref    V12 tmp5         u:2 (last use) $254

***** BB01
STMT00014 (IL 0x052...  ???)
N003 ( 18,  8) [000055] -ACXG---R---              *  ASG       struct (copy) $VN.Void
N002 (  3,  2) [000053] D---G--N----              +--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  +--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
N001 ( 14,  5) [000052] --CXG-------              \--*  CALL      struct System.DateTime.get_Now $c2

***** BB01
STMT00015 (IL 0x058...0x06F)
N013 ( 53, 36) [000061] --CXG-------              *  CALL      void   System.Console.WriteLine $VN.Void
N012 ( 39, 30) [000060] --CXG------- arg0 in rcx  \--*  CALL      ref    System.String.Concat $ad
N007 ( 17, 10) [000300] -ACXG---R-L- arg0 SETUP      +--*  ASG       ref    $a8
N006 (  1,  1) [000299] D------N----                 |  +--*  LCL_VAR   ref    V22 tmp15        d:2 $a8
N005 ( 17, 10) [000058] --CXG-------                 |  \--*  CALL      ref    System.DateTime.ToString $a8
N004 (  3,  3) [000057] ------------ this in rcx     |     \--*  ADDR      byref  $143
N003 (  3,  2) [000056] ----G--N----                 |        \--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                     |        \--*    long   V02._dateData (offs=0x00) -> V17 tmp10         $c3
N009 (  1,  1) [000301] ------------ arg0 in rcx     +--*  LCL_VAR   ref    V22 tmp15        u:2 (last use) $a8
N011 (  4, 12) [000298] #---G------- arg1 in rdx     \--*  IND       ref    $ac
N010 (  2, 10) [000297] H-----------                    \--*  CNS_INT(h) long   0x750031F8 "	 Consumer thread started, adding items..." $1c9

***** BB01
STMT00016 (IL 0x06E...  ???)
N003 (  1,  3) [000064] -A------R---              *  ASG       int    $40
N002 (  1,  1) [000063] D------N----              +--*  LCL_VAR   int    V03 loc1         d:2 $40
N001 (  1,  1) [000062] ------------              \--*  CNS_INT   int    0 $40

***** BB01
STMT00072 (IL 0x0D8...  ???)
N004 (  5,  5) [000390] ------------              *  JTRUE     void  
N003 (  3,  3) [000391] J------N----              \--*  GE        int    $40
N001 (  1,  1) [000392] ------------                 +--*  LCL_VAR   int    V03 loc1         u:2 $40
N002 (  1,  1) [000393] ------------                 \--*  CNS_INT   int    10 $43

------------ BB02 [072..07B), preds={BB01,BB06} succs={BB03}

***** BB02
STMT00074 (IL   ???...  ???)
N005 (  0,  0) [000399] -A------R---              *  ASG       int   
N004 (  0,  0) [000397] D------N----              +--*  LCL_VAR   int    V03 loc1         d:3
N003 (  0,  0) [000398] ------------              \--*  PHI       int   
N001 (  0,  0) [000401] ------------ pred BB06       +--*  PHI_ARG   int    V03 loc1         u:4
N002 (  0,  0) [000400] ------------ pred BB01       \--*  PHI_ARG   int    V03 loc1         u:2 $40

***** BB02
STMT00018 (IL 0x072...0x078)
N006 (  4,  4) [000072] -A-XG---R---              *  ASG       ref    <l:$258, c:$257>
N005 (  1,  1) [000071] D------N----              +--*  LCL_VAR   ref    V04 loc2         d:3 <l:$256, c:$b2>
N004 (  4,  4) [000070] ---XG-------              \--*  IND       ref    <l:$258, c:$257>
N003 (  2,  2) [000305] -------N----                 \--*  ADD       byref  $181
N001 (  1,  1) [000069] ------------                    +--*  LCL_VAR   ref    V00 this         u:1 $80
N002 (  1,  1) [000304] ------------                    \--*  CNS_INT   long   8 field offset Fseq[_myList] $280

***** BB02
STMT00019 (IL 0x079...0x07A)
N003 (  5,  4) [000075] -A--G---R---              *  ASG       int    $40
N002 (  3,  2) [000074] D---G--N----              +--*  LCL_VAR   int   (AX) V05 loc3         
N001 (  1,  1) [000073] ------------              \--*  CNS_INT   int    0 $40

------------ BB03 [07B..0CA), preds={BB02} succs={BB04}

***** BB03
STMT00020 (IL 0x07B...0x093)
N005 ( 18, 11) [000079] --CXG-------              *  CALL      void   System.Threading.Monitor.Enter $VN.Void
N003 (  3,  3) [000078] ------------ arg1 in rdx  +--*  LCL_VAR_ADDR long   V05 loc3          $206
N004 (  1,  1) [000076] ------------ arg0 in rcx  \--*  LCL_VAR   ref    V04 loc2         u:3 <l:$256, c:$b2>

***** BB03
STMT00021 (IL 0x083...  ???)
N005 ( 16, 16) [000086] -AC-----R---              *  ASG       ref    $259
N004 (  1,  1) [000085] D------N----              +--*  LCL_VAR   ref    V13 tmp6         d:2 $259
N003 ( 16, 16) [000084] --C---------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST $259
N002 (  2, 10) [000083] H----------- arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb3ee58a8 method $1ca

***** BB03
STMT00023 (IL   ???...  ???)
N009 (  7,  7) [000090] -A-XG---R---              *  ASG       ref    <l:$267, c:$266>
N008 (  1,  1) [000089] D------N----              +--*  LCL_VAR   ref    V14 tmp7         d:2 <l:$25f, c:$b9>
N007 (  7,  7) [000082] ---XG-------              \--*  IND       ref    <l:$267, c:$266>
N006 (  5,  5) [000310] ---XG--N----                 \--*  ADD       byref  <l:$18b, c:$18a>
N004 (  4,  4) [000081] ---XG-------                    +--*  IND       ref    <l:$25d, c:$25c>
N003 (  2,  2) [000312] -------N----                    |  \--*  ADD       byref  $181
N001 (  1,  1) [000080] ------------                    |     +--*  LCL_VAR   ref    V00 this         u:1 $80
N002 (  1,  1) [000311] ------------                    |     \--*  CNS_INT   long   8 field offset Fseq[_myList] $280
N005 (  1,  1) [000309] ------------                    \--*  CNS_INT   long   8 field offset Fseq[Head] $280

***** BB03
STMT00065 (IL   ???...  ???)
N003 ( 15,  8) [000230] --CXG-------              *  CALL      void   System.Object..ctor $VN.Void
N002 (  1,  1) [000087] ------------ this in rcx  \--*  LCL_VAR   ref    V13 tmp6         u:2 $259

***** BB03
STMT00024 (IL 0x093...  ???)
N006 (  6,  6) [000094] -A-XG-------              *  ASG       ref    $VN.Void
N004 (  4,  4) [000093] D--XG--N----              +--*  IND       ref    $259
N003 (  2,  2) [000315] -------N----              |  \--*  ADD       byref  <l:$18d, c:$18c>
N001 (  1,  1) [000091] ------------              |     +--*  LCL_VAR   ref    V14 tmp7         u:2 (last use) <l:$25f, c:$b9>
N002 (  1,  1) [000314] ------------              |     \--*  CNS_INT   long   8 field offset Fseq[Next] $280
N005 (  1,  1) [000092] ------------              \--*  LCL_VAR   ref    V13 tmp6         u:2 (last use) $259

***** BB03
STMT00025 (IL 0x098...0x0AE)
N018 ( 18, 18) [000102] -A-XG-------              *  ASG       ref    $VN.Void
N007 (  7,  7) [000101] D--XG--N----              +--*  IND       ref    $279
N006 (  5,  5) [000317] ---XG--N----              |  \--*  ADD       byref  <l:$191, c:$190>
N004 (  4,  4) [000096] ---XG-------              |     +--*  IND       ref    <l:$26d, c:$26c>
N003 (  2,  2) [000319] -------N----              |     |  \--*  ADD       byref  $181
N001 (  1,  1) [000095] ------------              |     |     +--*  LCL_VAR   ref    V00 this         u:1 $80
N002 (  1,  1) [000318] ------------              |     |     \--*  CNS_INT   long   8 field offset Fseq[_myList] $280
N005 (  1,  1) [000316] ------------              |     \--*  CNS_INT   long   8 field offset Fseq[Head] $280
N017 ( 10, 10) [000100] ---XG-------              \--*  IND       ref    <l:$403, c:$402>
N016 (  8,  8) [000321] ---XG--N----                 \--*  ADD       byref  <l:$197, c:$196>
N014 (  7,  7) [000099] ---XG-------                    +--*  IND       ref    <l:$278, c:$277>
N013 (  5,  5) [000323] ---XG--N----                    |  \--*  ADD       byref  <l:$191, c:$193>
N011 (  4,  4) [000098] ---XG-------                    |     +--*  IND       ref    <l:$26d, c:$26e>
N010 (  2,  2) [000325] -------N----                    |     |  \--*  ADD       byref  $181
N008 (  1,  1) [000097] ------------                    |     |     +--*  LCL_VAR   ref    V00 this         u:1 $80
N009 (  1,  1) [000324] ------------                    |     |     \--*  CNS_INT   long   8 field offset Fseq[_myList] $280
N012 (  1,  1) [000322] ------------                    |     \--*  CNS_INT   long   8 field offset Fseq[Head] $280
N015 (  1,  1) [000320] ------------                    \--*  CNS_INT   long   8 field offset Fseq[Next] $280

***** BB03
STMT00026 (IL 0x0B3...0x0C3)
N005 ( 16, 16) [000109] -AC-----R---              *  ASG       ref    $404
N004 (  1,  1) [000108] D------N----              +--*  LCL_VAR   ref    V15 tmp8         d:2 $404
N003 ( 16, 16) [000107] --C---------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST $404
N002 (  2, 10) [000106] H----------- arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb3b058b8 token $1c3

***** BB03
STMT00028 (IL   ???...  ???)
N009 (  7,  7) [000113] -A-XG---R---              *  ASG       ref    <l:$27b, c:$40a>
N008 (  1,  1) [000112] D------N----              +--*  LCL_VAR   ref    V16 tmp9         d:2 <l:$279, c:$3ca>
N007 (  7,  7) [000105] ---XG-------              \--*  IND       ref    <l:$27b, c:$40a>
N006 (  5,  5) [000328] ---XG--N----                 \--*  ADD       byref  <l:$191, c:$199>
N004 (  4,  4) [000104] ---XG-------                    +--*  IND       ref    <l:$26d, c:$405>
N003 (  2,  2) [000330] -------N----                    |  \--*  ADD       byref  $181
N001 (  1,  1) [000103] ------------                    |     +--*  LCL_VAR   ref    V00 this         u:1 $80
N002 (  1,  1) [000329] ------------                    |     \--*  CNS_INT   long   8 field offset Fseq[_myList] $280
N005 (  1,  1) [000327] ------------                    \--*  CNS_INT   long   8 field offset Fseq[Head] $280

***** BB03
STMT00027 (IL   ???...  ???)
N003 ( 15,  8) [000111] --CXG-------              *  CALL      void   System.Object..ctor $VN.Void
N002 (  1,  1) [000110] ------------ this in rcx  \--*  LCL_VAR   ref    V15 tmp8         u:2 $404

***** BB03
STMT00029 (IL 0x0C3...  ???)
N006 (  6,  6) [000117] -A-XG-------              *  ASG       ref    $VN.Void
N004 (  4,  4) [000116] D--XG--N----              +--*  IND       ref    $404
N003 (  2,  2) [000333] -------N----              |  \--*  ADD       byref  <l:$19b, c:$19a>
N001 (  1,  1) [000114] ------------              |     +--*  LCL_VAR   ref    V16 tmp9         u:2 (last use) <l:$279, c:$3ca>
N002 (  1,  1) [000332] ------------              |     \--*  CNS_INT   long   16 field offset Fseq[Data] $281
N005 (  1,  1) [000115] ------------              \--*  LCL_VAR   ref    V15 tmp8         u:2 (last use) $404

------------ BB04 [0CA..0CD) -> BB06 (cond), preds={BB03} succs={BB05,BB06}

***** BB04
STMT00066 (IL   ???...  ???)
N005 (  8,  8) [000254] ----G-------              *  JTRUE     void  
N004 (  6,  6) [000255] J---G--N----              \--*  EQ        int    $344
N002 (  4,  4) [000334] ----G-------                 +--*  CAST      int <- bool <- int $343
N001 (  3,  2) [000256] ----G-------                 |  \--*  LCL_VAR   int   (AX) V05 loc3          $382
N003 (  1,  1) [000257] ------------                 \--*  CNS_INT   int    0 $40

------------ BB05 [0CD..0D4), preds={BB04} succs={BB06}

***** BB05
STMT00067 (IL   ???...  ???)
N003 ( 15,  7) [000258] --CXG-------              *  CALL      void   System.Threading.Monitor.Exit $VN.Void
N002 (  1,  1) [000259] ------------ arg0 in rcx  \--*  LCL_VAR   ref    V04 loc2         u:3 (last use) <l:$256, c:$b2>

------------ BB06 [0D4..0DD) -> BB02 (cond), preds={BB04,BB05} succs={BB07,BB02}

***** BB06
STMT00030 (IL 0x0D4...0x0D7)
N005 (  3,  3) [000122] -A------R---              *  ASG       int    $345
N004 (  1,  1) [000121] D------N----              +--*  LCL_VAR   int    V03 loc1         d:4 $345
N003 (  3,  3) [000120] ------------              \--*  ADD       int    $345
N001 (  1,  1) [000118] ------------                 +--*  LCL_VAR   int    V03 loc1         u:3 (last use) $380
N002 (  1,  1) [000119] ------------                 \--*  CNS_INT   int    1 $4e

***** BB06
STMT00017 (IL 0x0D8...0x0DB)
N004 (  5,  5) [000068] ------------              *  JTRUE     void  
N003 (  3,  3) [000067] J------N----              \--*  LT        int    $346
N001 (  1,  1) [000065] ------------                 +--*  LCL_VAR   int    V03 loc1         u:4 $345
N002 (  1,  1) [000066] ------------                 \--*  CNS_INT   int    10 $43

------------ BB07 [0DD..0F9), preds={BB01,BB06} succs={BB08}

***** BB07
STMT00034 (IL 0x0DD...0x0E2)
N003 ( 18,  8) [000133] -ACXG---R---              *  ASG       struct (copy) $VN.Void
N002 (  3,  2) [000131] D---G--N----              +--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  +--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
N001 ( 14,  5) [000130] --CXG-------              \--*  CALL      struct System.DateTime.get_Now $c4

***** BB07
STMT00035 (IL 0x0E3...0x0F4)
N013 ( 53, 36) [000139] --CXG-------              *  CALL      void   System.Console.WriteLine $VN.Void
N012 ( 39, 30) [000138] --CXG------- arg0 in rcx  \--*  CALL      ref    System.String.Concat $3da
N007 ( 17, 10) [000342] -ACXG---R-L- arg0 SETUP      +--*  ASG       ref    $3d5
N006 (  1,  1) [000341] D------N----                 |  +--*  LCL_VAR   ref    V23 tmp16        d:2 $3d5
N005 ( 17, 10) [000136] --CXG-------                 |  \--*  CALL      ref    System.DateTime.ToString $3d5
N004 (  3,  3) [000135] ------------ this in rcx     |     \--*  ADDR      byref  $145
N003 (  3,  2) [000134] ----G--N----                 |        \--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                     |        \--*    long   V02._dateData (offs=0x00) -> V17 tmp10         $c5
N009 (  1,  1) [000343] ------------ arg0 in rcx     +--*  LCL_VAR   ref    V23 tmp16        u:2 (last use) $3d5
N011 (  4, 12) [000340] #---G------- arg1 in rdx     \--*  IND       ref    $3d9
N010 (  2, 10) [000339] H-----------                    \--*  CNS_INT(h) long   0x75003200 "	 Waiting for list processing to complete..." $1cf

------------ BB08 [0F9..102), preds={BB07,BB12} succs={BB09}

***** BB08
STMT00036 (IL 0x0F9...0x0FF)
N006 (  4,  4) [000143] -A-XG---R---              *  ASG       ref    <l:$41c, c:$41b>
N005 (  1,  1) [000142] D------N----              +--*  LCL_VAR   ref    V04 loc2         d:2 <l:$41a, c:$3df>
N004 (  4,  4) [000141] ---XG-------              \--*  IND       ref    <l:$41c, c:$41b>
N003 (  2,  2) [000347] -------N----                 \--*  ADD       byref  $181
N001 (  1,  1) [000140] ------------                    +--*  LCL_VAR   ref    V00 this         u:1 $80
N002 (  1,  1) [000346] ------------                    \--*  CNS_INT   long   8 field offset Fseq[_myList] $280

***** BB08
STMT00037 (IL 0x100...0x101)
N003 (  5,  4) [000146] -A--G---R---              *  ASG       int    $40
N002 (  3,  2) [000145] D---G--N----              +--*  LCL_VAR   int   (AX) V05 loc3         
N001 (  1,  1) [000144] ------------              \--*  CNS_INT   int    0 $40

------------ BB09 [102..122) -> BB13 (cond), preds={BB08} succs={BB10,BB13}

***** BB09
STMT00038 (IL 0x102...0x120)
N005 ( 18, 11) [000150] --CXG-------              *  CALL      void   System.Threading.Monitor.Enter $VN.Void
N003 (  3,  3) [000149] ------------ arg1 in rdx  +--*  LCL_VAR_ADDR long   V05 loc3          $20a
N004 (  1,  1) [000147] ------------ arg0 in rcx  \--*  LCL_VAR   ref    V04 loc2         u:2 <l:$41a, c:$3df>

***** BB09
STMT00039 (IL 0x10A...  ???)
N016 ( 17, 17) [000158] ---XG-------              *  JTRUE     void  
N015 ( 15, 15) [000157] N--XG--N-U--              \--*  EQ        int    <l:$34a, c:$349>
N007 (  7,  7) [000153] ---XG-------                 +--*  IND       ref    <l:$42a, c:$429>
N006 (  5,  5) [000351] ---XG--N----                 |  \--*  ADD       byref  <l:$1a0, c:$19f>
N004 (  4,  4) [000152] ---XG-------                 |     +--*  IND       ref    <l:$420, c:$41f>
N003 (  2,  2) [000353] -------N----                 |     |  \--*  ADD       byref  $181
N001 (  1,  1) [000151] ------------                 |     |     +--*  LCL_VAR   ref    V00 this         u:1 $80
N002 (  1,  1) [000352] ------------                 |     |     \--*  CNS_INT   long   8 field offset Fseq[_myList] $280
N005 (  1,  1) [000350] ------------                 |     \--*  CNS_INT   long   8 field offset Fseq[Head] $280
N014 (  7,  7) [000156] ---XG-------                 \--*  IND       ref    <l:$435, c:$434>
N013 (  5,  5) [000355] ---XG--N----                    \--*  ADD       byref  <l:$1a4, c:$1a3>
N011 (  4,  4) [000155] ---XG-------                       +--*  IND       ref    <l:$420, c:$42b>
N010 (  2,  2) [000357] -------N----                       |  \--*  ADD       byref  $181
N008 (  1,  1) [000154] ------------                       |     +--*  LCL_VAR   ref    V00 this         u:1 $80
N009 (  1,  1) [000356] ------------                       |     \--*  CNS_INT   long   8 field offset Fseq[_myList] $280
N012 (  1,  1) [000354] ------------                       \--*  CNS_INT   long   16 field offset Fseq[Tail] $281

------------ BB10 [126..129) -> BB12 (cond), preds={BB09} succs={BB11,BB12}

***** BB10
STMT00069 (IL   ???...  ???)
N005 (  8,  8) [000261] ----G-------              *  JTRUE     void  
N004 (  6,  6) [000262] J---G--N----              \--*  EQ        int    $34e
N002 (  4,  4) [000358] ----G-------                 +--*  CAST      int <- bool <- int $34d
N001 (  3,  2) [000263] ----G-------                 |  \--*  LCL_VAR   int   (AX) V05 loc3          $384
N003 (  1,  1) [000264] ------------                 \--*  CNS_INT   int    0 $40

------------ BB11 [129..130), preds={BB10} succs={BB12}

***** BB11
STMT00070 (IL   ???...  ???)
N003 ( 15,  7) [000265] --CXG-------              *  CALL      void   System.Threading.Monitor.Exit $VN.Void
N002 (  1,  1) [000266] ------------ arg0 in rcx  \--*  LCL_VAR   ref    V04 loc2         u:2 (last use) <l:$41a, c:$3df>

------------ BB12 [130..139) -> BB08 (always), preds={BB10,BB11} succs={BB08}

***** BB12
STMT00040 (IL 0x130...0x137)
N003 ( 15,  7) [000160] --CXG-------              *  CALL      void   System.Threading.Thread.Sleep $VN.Void
N002 (  1,  1) [000159] ------------ arg0 in rcx  \--*  CNS_INT   int    100 $5b

------------ BB13 [???..???) -> BB30 (callf), preds={BB09} succs={BB30}

------------ BB14 [???..???) -> BB15 (ALWAYS), preds={BB32} succs={BB15}

------------ BB15 [139..17D), preds={BB14} succs={BB16}

***** BB15
STMT00041 (IL 0x139...0x13E)
N003 ( 18,  8) [000164] -ACXG---R---              *  ASG       struct (copy) $VN.Void
N002 (  3,  2) [000162] D---G--N----              +--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  +--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
N001 ( 14,  5) [000161] --CXG-------              \--*  CALL      struct System.DateTime.get_Now $c6

***** BB15
STMT00042 (IL 0x13F...0x178)
N013 ( 53, 36) [000170] --CXG-------              *  CALL      void   System.Console.WriteLine $VN.Void
N012 ( 39, 30) [000169] --CXG------- arg0 in rcx  \--*  CALL      ref    System.String.Concat $3f4
N007 ( 17, 10) [000367] -ACXG---R-L- arg0 SETUP      +--*  ASG       ref    $3ef
N006 (  1,  1) [000366] D------N----                 |  +--*  LCL_VAR   ref    V24 tmp17        d:2 $3ef
N005 ( 17, 10) [000167] --CXG-------                 |  \--*  CALL      ref    System.DateTime.ToString $3ef
N004 (  3,  3) [000166] ------------ this in rcx     |     \--*  ADDR      byref  $147
N003 (  3,  2) [000165] ----G--N----                 |        \--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                     |        \--*    long   V02._dateData (offs=0x00) -> V17 tmp10         $c7
N009 (  1,  1) [000368] ------------ arg0 in rcx     +--*  LCL_VAR   ref    V24 tmp17        u:2 (last use) $3ef
N011 (  4, 12) [000365] #---G------- arg1 in rdx     \--*  IND       ref    $3f3
N010 (  2, 10) [000364] H-----------                    \--*  CNS_INT(h) long   0x75003208 "	 Done.  Profiler is active, available options:" $1d3

***** BB15
STMT00043 (IL 0x155...  ???)
N004 ( 18, 18) [000172] --CXG-------              *  CALL      void   System.Console.WriteLine $VN.Void
N003 (  4, 12) [000372] #---G------- arg0 in rcx  \--*  IND       ref    $3f8
N002 (  2, 10) [000371] H-----------                 \--*  CNS_INT(h) long   0x75003210 "   Q = quit" $1d4

***** BB15
STMT00044 (IL 0x15F...  ???)
N004 ( 18, 18) [000174] --CXG-------              *  CALL      void   System.Console.WriteLine $VN.Void
N003 (  4, 12) [000375] #---G------- arg0 in rcx  \--*  IND       ref    $3fb
N002 (  2, 10) [000374] H-----------                 \--*  CNS_INT(h) long   0x75003218 "   H = heap snapshot" $1d5

***** BB15
STMT00045 (IL 0x169...  ???)
N004 ( 18, 18) [000176] --CXG-------              *  CALL      void   System.Console.WriteLine $VN.Void
N003 (  4, 12) [000378] #---G------- arg0 in rcx  \--*  IND       ref    $3fe
N002 (  2, 10) [000377] H-----------                 \--*  CNS_INT(h) long   0x75003220 "   G = GC (max gen)" $1d6

***** BB15
STMT00046 (IL 0x173...  ???)
N004 ( 18, 18) [000178] --CXG-------              *  CALL      void   System.Console.WriteLine $VN.Void
N003 (  4, 12) [000381] #---G------- arg0 in rcx  \--*  IND       ref    $4c1
N002 (  2, 10) [000380] H-----------                 \--*  CNS_INT(h) long   0x75003228 "   R = clear the running flag to stop the consumer thread" $1d7

------------ BB16 [???..???), preds={BB15,BB25} succs={BB17}

------------ BB17 [???..???), preds={BB16,BB24} succs={BB18}

------------ BB18 [???..???), preds={BB17,BB22} succs={BB19}

------------ BB19 [17D..18F) -> BB21 (cond), preds={BB18,BB20} succs={BB20,BB21}

***** BB19
STMT00048 (IL   ???...  ???)
N006 ( 18, 11) [000233] S-CXG-------              *  CALL      void   System.ConsolePal.ReadKey $VN.Void
N004 (  3,  3) [000235] ------------ arg0 in rcx  +--*  ADDR      long   $148
N003 (  3,  2) [000236] ----G--N----              |  \--*  LCL_VAR   struct<System.ConsoleKeyInfo, 12>(AX)(P) V06 loc4         
                                                  |  \--*    ushort V06._keyChar (offs=0x00) -> V18 tmp11        
                                                  |  \--*    int    V06._key (offs=0x04) -> V19 tmp12        
                                                  |  \--*    int    V06._mods (offs=0x08) -> V20 tmp13         $c8
N005 (  1,  1) [000232] ------------ arg1 in rdx  \--*  CNS_INT   int    0 $40

***** BB19
STMT00050 (IL   ???...  ???)
N004 (  7,  6) [000189] ----G-------              *  JTRUE     void  
N003 (  5,  4) [000188] N---G--N-U--              \--*  NE        int    $34f
N001 (  3,  2) [000240] ----G-------                 +--*  LCL_VAR   int   (AX) V19 tmp12         $385
N002 (  1,  1) [000187] ------------                 \--*  CNS_INT   int    71 $5e

------------ BB20 [18F..19B) -> BB19 (always), preds={BB19} succs={BB19}

***** BB20
STMT00061 (IL 0x18F...0x199)
N003 ( 28, 11) [000222] --CXG-------              *  CALL      void   System.GC.Collect $VN.Void
N002 ( 14,  5) [000221] --CXG------- arg0 in rcx  \--*  CALL      int    System.GC.get_MaxGeneration $305

------------ BB21 [19B..1A6) -> BB23 (cond), preds={BB19} succs={BB22,BB23}

***** BB21
STMT00052 (IL   ???...  ???)
N004 (  7,  6) [000196] ----G-------              *  JTRUE     void  
N003 (  5,  4) [000195] N---G--N-U--              \--*  NE        int    $350
N001 (  3,  2) [000244] ----G-------                 +--*  LCL_VAR   int   (AX) V19 tmp12         $385
N002 (  1,  1) [000194] ------------                 \--*  CNS_INT   int    72 $5f

------------ BB22 [1A6..1AD) -> BB18 (always), preds={BB21} succs={BB18}

***** BB22
STMT00060 (IL 0x1A6...0x1AB)
N001 ( 14,  5) [000220] --CXG-------              *  CALL      void   System.Diagnostics.Debugger.Break $VN.Void

------------ BB23 [1AD..1B8) -> BB25 (cond), preds={BB21} succs={BB24,BB25}

***** BB23
STMT00054 (IL   ???...  ???)
N004 (  7,  6) [000203] ----G-------              *  JTRUE     void  
N003 (  5,  4) [000202] N---G--N-U--              \--*  NE        int    $351
N001 (  3,  2) [000248] ----G-------                 +--*  LCL_VAR   int   (AX) V19 tmp12         $385
N002 (  1,  1) [000201] ------------                 \--*  CNS_INT   int    82 $60

------------ BB24 [1B8..1C1) -> BB17 (always), preds={BB23} succs={BB17}

***** BB24
STMT00059 (IL 0x1B8...0x1BA)
N006 (  7,  7) [000219] -A-XG-------              *  ASG       bool   $VN.Void
N004 (  5,  5) [000218] D--XG--N----              +--*  IND       bool   $40
N003 (  2,  2) [000387] -------N----              |  \--*  ADD       byref  $1a7
N001 (  1,  1) [000216] ------------              |     +--*  LCL_VAR   ref    V00 this         u:1 $80
N002 (  1,  1) [000386] ------------              |     \--*  CNS_INT   long   16 field offset Fseq[_running] $281
N005 (  1,  1) [000217] ------------              \--*  CNS_INT   int    0 $40

------------ BB25 [1C1..1CC) -> BB16 (cond), preds={BB23} succs={BB26,BB16}

***** BB25
STMT00056 (IL   ???...  ???)
N004 (  7,  6) [000210] ----G-------              *  JTRUE     void  
N003 (  5,  4) [000209] N---G--N-U--              \--*  NE        int    $352
N001 (  3,  2) [000252] ----G-------                 +--*  LCL_VAR   int   (AX) V19 tmp12         $385
N002 (  1,  1) [000208] ------------                 \--*  CNS_INT   int    81 $61

------------ BB26 [1CC..1D4) (return), preds={BB25} succs={}

***** BB26
STMT00057 (IL 0x1CC...0x1CE)
N006 (  7,  7) [000214] -A-XG-------              *  ASG       bool   $VN.Void
N004 (  5,  5) [000213] D--XG--N----              +--*  IND       bool   $40
N003 (  2,  2) [000389] -------N----              |  \--*  ADD       byref  $1a7
N001 (  1,  1) [000211] ------------              |     +--*  LCL_VAR   ref    V00 this         u:1 (last use) $80
N002 (  1,  1) [000388] ------------              |     \--*  CNS_INT   long   16 field offset Fseq[_running] $281
N005 (  1,  1) [000212] ------------              \--*  CNS_INT   int    0 $40

***** BB26
STMT00058 (IL 0x1D3...0x1D3)
N001 (  0,  0) [000215] ------------              *  RETURN    void   $442

------------ BB27 [0CA..0CD) -> BB29 (cond), preds={} succs={BB28,BB29}

***** BB27
STMT00031 (IL 0x0CA...0x0CB)
N005 (  8,  8) [000126] ----G-------              *  JTRUE     void  
N004 (  6,  6) [000125] J---G--N----              \--*  EQ        int    $342
N002 (  4,  4) [000336] ----G-------                 +--*  CAST      int <- bool <- int $341
N001 (  3,  2) [000123] ----G-------                 |  \--*  LCL_VAR   int   (AX) V05 loc3          $381
N003 (  1,  1) [000124] ------------                 \--*  CNS_INT   int    0 $40

------------ BB28 [0CD..0D3), preds={BB27} succs={BB29}

***** BB28
STMT00033 (IL 0x0CD...0x0CE)
N003 ( 15,  7) [000129] --CXG-------              *  CALL      void   System.Threading.Monitor.Exit $VN.Void
N002 (  1,  1) [000128] ------------ arg0 in rcx  \--*  LCL_VAR   ref    V04 loc2         u:3 (last use) <l:$256, c:$b2>

------------ BB29 [0D3..0D4) (finret), preds={BB27,BB28} succs={}

***** BB29
STMT00032 (IL 0x0D3...0x0D3)
N001 (  0,  0) [000127] ------------              *  RETFILT   void   $440

------------ BB30 [126..129) -> BB32 (cond), preds={BB13} succs={BB31,BB32}

***** BB30
STMT00062 (IL 0x126...0x127)
N005 (  8,  8) [000226] ----G-------              *  JTRUE     void  
N004 (  6,  6) [000225] J---G--N----              \--*  EQ        int    $34c
N002 (  4,  4) [000360] ----G-------                 +--*  CAST      int <- bool <- int $34b
N001 (  3,  2) [000223] ----G-------                 |  \--*  LCL_VAR   int   (AX) V05 loc3          $383
N003 (  1,  1) [000224] ------------                 \--*  CNS_INT   int    0 $40

------------ BB31 [129..12F), preds={BB30} succs={BB32}

***** BB31
STMT00064 (IL 0x129...0x12A)
N003 ( 15,  7) [000229] --CXG-------              *  CALL      void   System.Threading.Monitor.Exit $VN.Void
N002 (  1,  1) [000228] ------------ arg0 in rcx  \--*  LCL_VAR   ref    V04 loc2         u:2 (last use) <l:$41a, c:$3df>

------------ BB32 [12F..130) (finret), preds={BB30,BB31} succs={BB14}

***** BB32
STMT00063 (IL 0x12F...0x12F)
N001 (  0,  0) [000227] ------------              *  RETFILT   void   $441

-------------------------------------------------------------------------------------------------------------------
optHoistLoopCode for loop L00 <BB02..BB06>:
  Loop body contains a call
  Loop has single exit

  USEDEF  (7)={V00 V13 V15 V04 V14 V16 V03}
  INOUT   (3)={V00 V04 V03}
  LOOPVARS(3)={V00 V04 V03}
    optHoistLoopBlocks BB02 (weight=  8   ) of loop L00 <BB02..BB06>, firstBlock is true
    optHoistLoopBlocks BB03 (weight=  8   ) of loop L00 <BB02..BB06>, firstBlock is false

Hoisting a copy of [000083] into PreHeader for loop L00 <BB02..BB06>:
N002 (  2, 10) [000083] H-----------              *  CNS_INT(h) long   0x7ffdb3ee58a8 method $1ca

New Basic Block BB33 [0048] created.

Created PreHeader (BB33) for loop L00 (BB02 - BB06), with weight = 1   
Setting edge weights for BB01 -> BB33 to [0 .. 3.402823e+38]
Setting edge weights for BB01 -> BB33 to [100 .. 100]
Setting edge weights for BB33 -> BB02 to [0 .. 3.402823e+38]
Setting edge weights for BB33 -> BB02 to [100 .. 100]
This hoisted copy placed in PreHeader (BB33):
               [000404] ------------              *  COMMA     void  
     (  2, 10) [000402] H------H----              +--*  CNS_INT(h) long   0x7ffdb3ee58a8 method $1ca
               [000403] ------------              \--*  NOP       void  

Hoisting a copy of [000106] into PreHeader for loop L00 <BB02..BB06>:
N002 (  2, 10) [000106] H-----------              *  CNS_INT(h) long   0x7ffdb3b058b8 token $1c3

This hoisted copy placed in PreHeader (BB33):
               [000407] ------------              *  COMMA     void  
     (  2, 10) [000405] H------H----              +--*  CNS_INT(h) long   0x7ffdb3b058b8 token $1c3
               [000406] ------------              \--*  NOP       void  
    optHoistLoopBlocks BB04 (weight=  8   ) of loop L00 <BB02..BB06>, firstBlock is false
    optHoistLoopBlocks BB06 (weight=  8   ) of loop L00 <BB02..BB06>, firstBlock is false
optHoistLoopCode for loop L01 <BB08..BB12>:
  Loop body contains a call
  Loop has single exit

  USEDEF  (2)={V00 V04}
  INOUT   (2)={V00 V04}
  LOOPVARS(2)={V00 V04}
    optHoistLoopBlocks BB08 (weight=  8   ) of loop L01 <BB08..BB12>, firstBlock is true
    optHoistLoopBlocks BB09 (weight=  8   ) of loop L01 <BB08..BB12>, firstBlock is false
optHoistLoopCode for loop L02 <BB16..BB25>:
  Loop body contains a call
  Loop has single exit

  USEDEF  (1)={V00}
  INOUT   (1)={V00}
  LOOPVARS(1)={V00}
    optHoistLoopBlocks BB16 (weight=  1   ) of loop L02 <BB16..BB25>, firstBlock is true
    optHoistLoopBlocks BB17 (weight=  1   ) of loop L02 <BB16..BB25>, firstBlock is false
    optHoistLoopBlocks BB18 (weight=  1   ) of loop L02 <BB16..BB25>, firstBlock is false
    optHoistLoopBlocks BB19 (weight=  8   ) of loop L02 <BB16..BB25>, firstBlock is false
    optHoistLoopBlocks BB21 (weight=  1   ) of loop L02 <BB16..BB25>, firstBlock is false
    optHoistLoopBlocks BB23 (weight=  1   ) of loop L02 <BB16..BB25>, firstBlock is false
    optHoistLoopBlocks BB25 (weight=  1   ) of loop L02 <BB16..BB25>, firstBlock is false
optHoistLoopCode for loop L03 <BB17..BB24>:
  Loop body contains a call
  Loop has single exit

  USEDEF  (1)={V00}
  INOUT   (1)={V00}
  LOOPVARS(1)={V00}
    optHoistLoopBlocks BB17 (weight=  1   ) of loop L03 <BB17..BB24>, firstBlock is true
    optHoistLoopBlocks BB18 (weight=  1   ) of loop L03 <BB17..BB24>, firstBlock is false
    optHoistLoopBlocks BB19 (weight=  8   ) of loop L03 <BB17..BB24>, firstBlock is false
    optHoistLoopBlocks BB21 (weight=  1   ) of loop L03 <BB17..BB24>, firstBlock is false
    optHoistLoopBlocks BB23 (weight=  1   ) of loop L03 <BB17..BB24>, firstBlock is false
optHoistLoopCode for loop L04 <BB18..BB22>:
  Loop body contains a call
  Loop has single exit

  USEDEF  (0)={}
  INOUT   (1)={V00}
  LOOPVARS(0)={}
    optHoistLoopBlocks BB18 (weight=  1   ) of loop L04 <BB18..BB22>, firstBlock is true
    optHoistLoopBlocks BB19 (weight=  8   ) of loop L04 <BB18..BB22>, firstBlock is false
    optHoistLoopBlocks BB21 (weight=  1   ) of loop L04 <BB18..BB22>, firstBlock is false
optHoistLoopCode for loop L05 <BB19..BB20>:
  Loop body contains a call
  Loop has single exit

  USEDEF  (0)={}
  INOUT   (1)={V00}
  LOOPVARS(0)={}
    optHoistLoopBlocks BB19 (weight=  8   ) of loop L05 <BB19..BB20>, firstBlock is true
Blocks/Trees after optHoistLoopCode() modified flowgraph

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..072)-> BB07 ( cond )                     i hascall gcsafe newobj 
BB33 [0048]  1       BB01                  1       [072..???)                                     internal LoopPH 
BB02 [0001]  2       BB06,BB33             8     0 [072..07B)                                     i Loop gcsafe bwd bwd-target 
BB03 [0002]  1  0    BB02                  8     0 [07B..0CA)                 T0      try { }     keep i try hascall gcsafe newobj bwd 
BB04 [0038]  1       BB03                  8     0 [0CA..0CD)-> BB06 ( cond )                     keep i gcsafe bwd cfb 
BB05 [0039]  1       BB04                  4     0 [0CD..0D4)                                     i hascall gcsafe bwd 
BB06 [0006]  2       BB04,BB05             8     0 [0D4..0DD)-> BB02 ( cond )                     i gcsafe bwd 
BB07 [0008]  2       BB01,BB06             1       [0DD..0F9)                                     i hascall gcsafe 
BB08 [0009]  2       BB07,BB12             8     1 [0F9..102)                                     i Loop gcsafe bwd bwd-target 
BB09 [0010]  1  1    BB08                  8     1 [102..122)-> BB13 ( cond ) T1      try { }     keep i try hascall gcsafe bwd 
BB10 [0041]  1       BB09                  8     1 [126..129)-> BB12 ( cond )                     keep i gcsafe bwd cfb 
BB11 [0042]  1       BB10                  4     1 [129..130)                                     i hascall gcsafe bwd 
BB12 [0016]  2       BB10,BB11             8     1 [130..139)-> BB08 (always)                     i hascall gcsafe bwd 
BB13 [0030]  1       BB09                  1       [???..???)-> BB30 (callf )                     i internal gcsafe 
BB14 [0031]  1       BB32                  1       [???..???)-> BB15 (ALWAYS)                     i internal gcsafe KEEP 
BB15 [0017]  1       BB14                  1       [139..17D)                                     i hascall gcsafe 
BB16 [0045]  2       BB15,BB25             1     2 [???..???)                                     internal gcsafe 
BB17 [0046]  2       BB16,BB24             1     3 [???..???)                                     internal gcsafe 
BB18 [0047]  2       BB17,BB22             1     4 [???..???)                                     internal gcsafe 
BB19 [0018]  2       BB18,BB20             8     5 [17D..18F)-> BB21 ( cond )                     i Loop hascall gcsafe bwd bwd-target 
BB20 [0019]  1       BB19                  8     5 [18F..19B)-> BB19 (always)                     i hascall gcsafe bwd 
BB21 [0020]  1       BB19                  1     4 [19B..1A6)-> BB23 ( cond )                     i gcsafe bwd 
BB22 [0021]  1       BB21                  1     4 [1A6..1AD)-> BB18 (always)                     i hascall gcsafe bwd 
BB23 [0022]  1       BB21                  1     3 [1AD..1B8)-> BB25 ( cond )                     i gcsafe bwd 
BB24 [0023]  1       BB23                  1     3 [1B8..1C1)-> BB17 (always)                     i gcsafe bwd 
BB25 [0024]  1       BB23                  1     2 [1C1..1CC)-> BB16 ( cond )                     i gcsafe bwd 
BB26 [0025]  1       BB25                  1       [1CC..1D4)        (return)                     i gcsafe 
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ funclets follow
BB27 [0003]  1     0                       0       [0CA..0CD)-> BB29 ( cond )    H0 F fault {     keep i rare flet bwd 
BB28 [0004]  1     0 BB27                  0       [0CD..0D3)                    H0               i rare hascall bwd 
BB29 [0005]  2     0 BB27,BB28             0       [0D3..0D4)        (finret)    H0   }           i rare bwd 
BB30 [0013]  2     1 BB13                  1       [126..129)-> BB32 ( cond )    H1 F finally {   keep i gcsafe flet bwd 
BB31 [0014]  1     1 BB30                  1       [129..12F)                    H1               i hascall gcsafe bwd 
BB32 [0015]  2     1 BB30,BB31             1       [12F..130)        (finret)    H1   }           i gcsafe bwd 
-----------------------------------------------------------------------------------------------------------------------------------------

------------ BB01 [000..072) -> BB07 (cond), preds={} succs={BB33,BB07}

***** BB01
STMT00000 (IL 0x000...0x005)
N003 ( 18,  8) [000003] -ACXG---R---              *  ASG       struct (copy) $VN.Void
N002 (  3,  2) [000001] D---G--N----              +--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  +--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
N001 ( 14,  5) [000000] --CXG-------              \--*  CALL      struct System.DateTime.get_Now $c0

***** BB01
STMT00001 (IL 0x006...0x022)
N013 ( 53, 36) [000009] --CXG-------              *  CALL      void   System.Console.WriteLine $VN.Void
N012 ( 39, 30) [000008] --CXG------- arg0 in rcx  \--*  CALL      ref    System.String.Concat $89
N007 ( 17, 10) [000272] -ACXG---R-L- arg0 SETUP      +--*  ASG       ref    $84
N006 (  1,  1) [000271] D------N----                 |  +--*  LCL_VAR   ref    V21 tmp14        d:2 $84
N005 ( 17, 10) [000006] --CXG-------                 |  \--*  CALL      ref    System.DateTime.ToString $84
N004 (  3,  3) [000005] ------------ this in rcx     |     \--*  ADDR      byref  $141
N003 (  3,  2) [000004] ----G--N----                 |        \--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                     |        \--*    long   V02._dateData (offs=0x00) -> V17 tmp10         $c1
N009 (  1,  1) [000273] ------------ arg0 in rcx     +--*  LCL_VAR   ref    V21 tmp14        u:2 (last use) $84
N011 (  4, 12) [000270] #---G------- arg1 in rdx     \--*  IND       ref    $88
N010 (  2, 10) [000269] H-----------                    \--*  CNS_INT(h) long   0x750031F0 "	 Created list" $1c0

***** BB01
STMT00002 (IL 0x01C...  ???)
N005 ( 16, 16) [000014] -AC-----R---              *  ASG       ref    $240
N004 (  1,  1) [000013] D------N----              +--*  LCL_VAR   ref    V08 tmp1         d:2 $240
N003 ( 16, 16) [000012] --C---------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST $240
N002 (  2, 10) [000011] H----------- arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb3ee2350 method $1c1

***** BB01
STMT00003 (IL   ???...  ???)
N003 ( 15,  8) [000016] --CXG-------              *  CALL      void   FalseLeakRepro.List..ctor $VN.Void
N002 (  1,  1) [000015] ------------ this in rcx  \--*  LCL_VAR   ref    V08 tmp1         u:2 $240

***** BB01
STMT00004 (IL 0x022...  ???)
N006 (  6,  6) [000019] -A-XG-------              *  ASG       ref    $VN.Void
N004 (  4,  4) [000018] D--XG--N----              +--*  IND       ref    $240
N003 (  2,  2) [000279] -------N----              |  \--*  ADD       byref  $181
N001 (  1,  1) [000010] ------------              |     +--*  LCL_VAR   ref    V00 this         u:1 $80
N002 (  1,  1) [000278] ------------              |     \--*  CNS_INT   long   8 field offset Fseq[_myList] $280
N005 (  1,  1) [000017] ------------              \--*  LCL_VAR   ref    V08 tmp1         u:2 (last use) $240

***** BB01
STMT00005 (IL 0x027...0x037)
N005 ( 16, 16) [000026] -AC-----R---              *  ASG       ref    $243
N004 (  1,  1) [000025] D------N----              +--*  LCL_VAR   ref    V09 tmp2         d:2 $243
N003 ( 16, 16) [000024] --C---------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST $243
N002 (  2, 10) [000023] H----------- arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb3b058b8 token $1c3

***** BB01
STMT00007 (IL   ???...  ???)
N009 (  7,  7) [000030] -A-XG---R---              *  ASG       ref    <l:$250, c:$24f>
N008 (  1,  1) [000029] D------N----              +--*  LCL_VAR   ref    V10 tmp3         d:2 <l:$248, c:$94>
N007 (  7,  7) [000022] ---XG-------              \--*  IND       ref    <l:$250, c:$24f>
N006 (  5,  5) [000282] ---XG--N----                 \--*  ADD       byref  <l:$185, c:$184>
N004 (  4,  4) [000021] ---XG-------                    +--*  IND       ref    <l:$246, c:$245>
N003 (  2,  2) [000284] -------N----                    |  \--*  ADD       byref  $181
N001 (  1,  1) [000020] ------------                    |     +--*  LCL_VAR   ref    V00 this         u:1 $80
N002 (  1,  1) [000283] ------------                    |     \--*  CNS_INT   long   8 field offset Fseq[_myList] $280
N005 (  1,  1) [000281] ------------                    \--*  CNS_INT   long   8 field offset Fseq[Head] $280

***** BB01
STMT00006 (IL   ???...  ???)
N003 ( 15,  8) [000028] --CXG-------              *  CALL      void   System.Object..ctor $VN.Void
N002 (  1,  1) [000027] ------------ this in rcx  \--*  LCL_VAR   ref    V09 tmp2         u:2 $243

***** BB01
STMT00008 (IL 0x037...  ???)
N006 (  6,  6) [000034] -A-XG-------              *  ASG       ref    $VN.Void
N004 (  4,  4) [000033] D--XG--N----              +--*  IND       ref    $243
N003 (  2,  2) [000287] -------N----              |  \--*  ADD       byref  <l:$187, c:$186>
N001 (  1,  1) [000031] ------------              |     +--*  LCL_VAR   ref    V10 tmp3         u:2 (last use) <l:$248, c:$94>
N002 (  1,  1) [000286] ------------              |     \--*  CNS_INT   long   16 field offset Fseq[Data] $281
N005 (  1,  1) [000032] ------------              \--*  LCL_VAR   ref    V09 tmp2         u:2 (last use) $243

***** BB01
STMT00009 (IL 0x03C...0x057)
N005 ( 16, 16) [000040] -AC-----R---              *  ASG       ref    $253
N004 (  1,  1) [000039] D------N----              +--*  LCL_VAR   ref    V11 tmp4         d:2 $253
N003 ( 16, 16) [000038] --C---------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST $253
N002 (  2, 10) [000037] H----------- arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb3ee6200 token $1c6

***** BB01
STMT00010 (IL   ???...  ???)
N007 ( 18, 21) [000042] --CXG-------              *  CALL      void   System.MulticastDelegate.CtorClosed $VN.Void
N004 (  1,  1) [000041] ------------ this in rcx  +--*  LCL_VAR   ref    V11 tmp4         u:2 $253
N005 (  1,  1) [000035] ------------ arg1 in rdx  +--*  LCL_VAR   ref    V00 this         u:1 $80
N006 (  2, 10) [000036] H----------- arg2 in r8   \--*  CNS_INT(h) long   0x7ffdb3b213f8 ftn $1c7

***** BB01
STMT00011 (IL 0x048...  ???)
N005 ( 16, 16) [000047] -AC-----R---              *  ASG       ref    $254
N004 (  1,  1) [000046] D------N----              +--*  LCL_VAR   ref    V12 tmp5         d:2 $254
N003 ( 16, 16) [000045] --C---------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWFAST $254
N002 (  2, 10) [000044] H----------- arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb3c84e80 token $1c8

***** BB01
STMT00012 (IL   ???...  ???)
N005 ( 16, 10) [000049] --CXG-------              *  CALL      void   System.Threading.Thread..ctor $VN.Void
N003 (  1,  1) [000048] ------------ this in rcx  +--*  LCL_VAR   ref    V12 tmp5         u:2 $254
N004 (  1,  1) [000043] ------------ arg1 in rdx  \--*  LCL_VAR   ref    V11 tmp4         u:2 (last use) $253

***** BB01
STMT00013 (IL 0x04D...  ???)
N003 ( 15,  8) [000051] --CXG-------              *  CALL nullcheck void   System.Threading.Thread.Start $VN.Void
N002 (  1,  1) [000050] ------------ this in rcx  \--*  LCL_VAR   ref    V12 tmp5         u:2 (last use) $254

***** BB01
STMT00014 (IL 0x052...  ???)
N003 ( 18,  8) [000055] -ACXG---R---              *  ASG       struct (copy) $VN.Void
N002 (  3,  2) [000053] D---G--N----              +--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  +--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
N001 ( 14,  5) [000052] --CXG-------              \--*  CALL      struct System.DateTime.get_Now $c2

***** BB01
STMT00015 (IL 0x058...0x06F)
N013 ( 53, 36) [000061] --CXG-------              *  CALL      void   System.Console.WriteLine $VN.Void
N012 ( 39, 30) [000060] --CXG------- arg0 in rcx  \--*  CALL      ref    System.String.Concat $ad
N007 ( 17, 10) [000300] -ACXG---R-L- arg0 SETUP      +--*  ASG       ref    $a8
N006 (  1,  1) [000299] D------N----                 |  +--*  LCL_VAR   ref    V22 tmp15        d:2 $a8
N005 ( 17, 10) [000058] --CXG-------                 |  \--*  CALL      ref    System.DateTime.ToString $a8
N004 (  3,  3) [000057] ------------ this in rcx     |     \--*  ADDR      byref  $143
N003 (  3,  2) [000056] ----G--N----                 |        \--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                     |        \--*    long   V02._dateData (offs=0x00) -> V17 tmp10         $c3
N009 (  1,  1) [000301] ------------ arg0 in rcx     +--*  LCL_VAR   ref    V22 tmp15        u:2 (last use) $a8
N011 (  4, 12) [000298] #---G------- arg1 in rdx     \--*  IND       ref    $ac
N010 (  2, 10) [000297] H-----------                    \--*  CNS_INT(h) long   0x750031F8 "	 Consumer thread started, adding items..." $1c9

***** BB01
STMT00016 (IL 0x06E...  ???)
N003 (  1,  3) [000064] -A------R---              *  ASG       int    $40
N002 (  1,  1) [000063] D------N----              +--*  LCL_VAR   int    V03 loc1         d:2 $40
N001 (  1,  1) [000062] ------------              \--*  CNS_INT   int    0 $40

***** BB01
STMT00072 (IL 0x0D8...  ???)
N004 (  5,  5) [000390] ------------              *  JTRUE     void  
N003 (  3,  3) [000391] J------N----              \--*  GE        int    $40
N001 (  1,  1) [000392] ------------                 +--*  LCL_VAR   int    V03 loc1         u:2 $40
N002 (  1,  1) [000393] ------------                 \--*  CNS_INT   int    10 $43

------------ BB33 [072..???), preds={BB01} succs={BB02}

***** BB33
STMT00075 (IL   ???...  ???)
N003 (  2, 10) [000404] ------------              *  COMMA     void  
N001 (  2, 10) [000402] H------H----              +--*  CNS_INT(h) long   0x7ffdb3ee58a8 method $1ca
N002 (  0,  0) [000403] ------------              \--*  NOP       void  

***** BB33
STMT00076 (IL   ???...  ???)
N003 (  2, 10) [000407] ------------              *  COMMA     void  
N001 (  2, 10) [000405] H------H----              +--*  CNS_INT(h) long   0x7ffdb3b058b8 token $1c3
N002 (  0,  0) [000406] ------------              \--*  NOP       void  

------------ BB02 [072..07B), preds={BB06,BB33} succs={BB03}

***** BB02
STMT00074 (IL   ???...  ???)
N005 (  0,  0) [000399] -A------R---              *  ASG       int   
N004 (  0,  0) [000397] D------N----              +--*  LCL_VAR   int    V03 loc1         d:3
N003 (  0,  0) [000398] ------------              \--*  PHI       int   
N001 (  0,  0) [000401] ------------ pred BB06       +--*  PHI_ARG   int    V03 loc1         u:4
N002 (  0,  0) [000400] ------------ pred BB33       \--*  PHI_ARG   int    V03 loc1         u:2 $40

***** BB02
STMT00018 (IL 0x072...0x078)
N006 (  4,  4) [000072] -A-XG---R---              *  ASG       ref    <l:$258, c:$257>
N005 (  1,  1) [000071] D------N----              +--*  LCL_VAR   ref    V04 loc2         d:3 <l:$256, c:$b2>
N004 (  4,  4) [000070] ---XG-------              \--*  IND       ref    <l:$258, c:$257>
N003 (  2,  2) [000305] -------N----                 \--*  ADD       byref  $181
N001 (  1,  1) [000069] ------------                    +--*  LCL_VAR   ref    V00 this         u:1 $80
N002 (  1,  1) [000304] ------------                    \--*  CNS_INT   long   8 field offset Fseq[_myList] $280

***** BB02
STMT00019 (IL 0x079...0x07A)
N003 (  5,  4) [000075] -A--G---R---              *  ASG       int    $40
N002 (  3,  2) [000074] D---G--N----              +--*  LCL_VAR   int   (AX) V05 loc3         
N001 (  1,  1) [000073] ------------              \--*  CNS_INT   int    0 $40

------------ BB03 [07B..0CA), preds={BB02} succs={BB04}

***** BB03
STMT00020 (IL 0x07B...0x093)
N005 ( 18, 11) [000079] --CXG-------              *  CALL      void   System.Threading.Monitor.Enter $VN.Void
N003 (  3,  3) [000078] ------------ arg1 in rdx  +--*  LCL_VAR_ADDR long   V05 loc3          $206
N004 (  1,  1) [000076] ------------ arg0 in rcx  \--*  LCL_VAR   ref    V04 loc2         u:3 <l:$256, c:$b2>

***** BB03
STMT00021 (IL 0x083...  ???)
N005 ( 16, 16) [000086] -AC-----R---              *  ASG       ref    $259
N004 (  1,  1) [000085] D------N----              +--*  LCL_VAR   ref    V13 tmp6         d:2 $259
N003 ( 16, 16) [000084] --C---------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST $259
N002 (  2, 10) [000083] H----------- arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb3ee58a8 method $1ca

***** BB03
STMT00023 (IL   ???...  ???)
N009 (  7,  7) [000090] -A-XG---R---              *  ASG       ref    <l:$267, c:$266>
N008 (  1,  1) [000089] D------N----              +--*  LCL_VAR   ref    V14 tmp7         d:2 <l:$25f, c:$b9>
N007 (  7,  7) [000082] ---XG-------              \--*  IND       ref    <l:$267, c:$266>
N006 (  5,  5) [000310] ---XG--N----                 \--*  ADD       byref  <l:$18b, c:$18a>
N004 (  4,  4) [000081] ---XG-------                    +--*  IND       ref    <l:$25d, c:$25c>
N003 (  2,  2) [000312] -------N----                    |  \--*  ADD       byref  $181
N001 (  1,  1) [000080] ------------                    |     +--*  LCL_VAR   ref    V00 this         u:1 $80
N002 (  1,  1) [000311] ------------                    |     \--*  CNS_INT   long   8 field offset Fseq[_myList] $280
N005 (  1,  1) [000309] ------------                    \--*  CNS_INT   long   8 field offset Fseq[Head] $280

***** BB03
STMT00065 (IL   ???...  ???)
N003 ( 15,  8) [000230] --CXG-------              *  CALL      void   System.Object..ctor $VN.Void
N002 (  1,  1) [000087] ------------ this in rcx  \--*  LCL_VAR   ref    V13 tmp6         u:2 $259

***** BB03
STMT00024 (IL 0x093...  ???)
N006 (  6,  6) [000094] -A-XG-------              *  ASG       ref    $VN.Void
N004 (  4,  4) [000093] D--XG--N----              +--*  IND       ref    $259
N003 (  2,  2) [000315] -------N----              |  \--*  ADD       byref  <l:$18d, c:$18c>
N001 (  1,  1) [000091] ------------              |     +--*  LCL_VAR   ref    V14 tmp7         u:2 (last use) <l:$25f, c:$b9>
N002 (  1,  1) [000314] ------------              |     \--*  CNS_INT   long   8 field offset Fseq[Next] $280
N005 (  1,  1) [000092] ------------              \--*  LCL_VAR   ref    V13 tmp6         u:2 (last use) $259

***** BB03
STMT00025 (IL 0x098...0x0AE)
N018 ( 18, 18) [000102] -A-XG-------              *  ASG       ref    $VN.Void
N007 (  7,  7) [000101] D--XG--N----              +--*  IND       ref    $279
N006 (  5,  5) [000317] ---XG--N----              |  \--*  ADD       byref  <l:$191, c:$190>
N004 (  4,  4) [000096] ---XG-------              |     +--*  IND       ref    <l:$26d, c:$26c>
N003 (  2,  2) [000319] -------N----              |     |  \--*  ADD       byref  $181
N001 (  1,  1) [000095] ------------              |     |     +--*  LCL_VAR   ref    V00 this         u:1 $80
N002 (  1,  1) [000318] ------------              |     |     \--*  CNS_INT   long   8 field offset Fseq[_myList] $280
N005 (  1,  1) [000316] ------------              |     \--*  CNS_INT   long   8 field offset Fseq[Head] $280
N017 ( 10, 10) [000100] ---XG-------              \--*  IND       ref    <l:$403, c:$402>
N016 (  8,  8) [000321] ---XG--N----                 \--*  ADD       byref  <l:$197, c:$196>
N014 (  7,  7) [000099] ---XG-------                    +--*  IND       ref    <l:$278, c:$277>
N013 (  5,  5) [000323] ---XG--N----                    |  \--*  ADD       byref  <l:$191, c:$193>
N011 (  4,  4) [000098] ---XG-------                    |     +--*  IND       ref    <l:$26d, c:$26e>
N010 (  2,  2) [000325] -------N----                    |     |  \--*  ADD       byref  $181
N008 (  1,  1) [000097] ------------                    |     |     +--*  LCL_VAR   ref    V00 this         u:1 $80
N009 (  1,  1) [000324] ------------                    |     |     \--*  CNS_INT   long   8 field offset Fseq[_myList] $280
N012 (  1,  1) [000322] ------------                    |     \--*  CNS_INT   long   8 field offset Fseq[Head] $280
N015 (  1,  1) [000320] ------------                    \--*  CNS_INT   long   8 field offset Fseq[Next] $280

***** BB03
STMT00026 (IL 0x0B3...0x0C3)
N005 ( 16, 16) [000109] -AC-----R---              *  ASG       ref    $404
N004 (  1,  1) [000108] D------N----              +--*  LCL_VAR   ref    V15 tmp8         d:2 $404
N003 ( 16, 16) [000107] --C---------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST $404
N002 (  2, 10) [000106] H----------- arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb3b058b8 token $1c3

***** BB03
STMT00028 (IL   ???...  ???)
N009 (  7,  7) [000113] -A-XG---R---              *  ASG       ref    <l:$27b, c:$40a>
N008 (  1,  1) [000112] D------N----              +--*  LCL_VAR   ref    V16 tmp9         d:2 <l:$279, c:$3ca>
N007 (  7,  7) [000105] ---XG-------              \--*  IND       ref    <l:$27b, c:$40a>
N006 (  5,  5) [000328] ---XG--N----                 \--*  ADD       byref  <l:$191, c:$199>
N004 (  4,  4) [000104] ---XG-------                    +--*  IND       ref    <l:$26d, c:$405>
N003 (  2,  2) [000330] -------N----                    |  \--*  ADD       byref  $181
N001 (  1,  1) [000103] ------------                    |     +--*  LCL_VAR   ref    V00 this         u:1 $80
N002 (  1,  1) [000329] ------------                    |     \--*  CNS_INT   long   8 field offset Fseq[_myList] $280
N005 (  1,  1) [000327] ------------                    \--*  CNS_INT   long   8 field offset Fseq[Head] $280

***** BB03
STMT00027 (IL   ???...  ???)
N003 ( 15,  8) [000111] --CXG-------              *  CALL      void   System.Object..ctor $VN.Void
N002 (  1,  1) [000110] ------------ this in rcx  \--*  LCL_VAR   ref    V15 tmp8         u:2 $404

***** BB03
STMT00029 (IL 0x0C3...  ???)
N006 (  6,  6) [000117] -A-XG-------              *  ASG       ref    $VN.Void
N004 (  4,  4) [000116] D--XG--N----              +--*  IND       ref    $404
N003 (  2,  2) [000333] -------N----              |  \--*  ADD       byref  <l:$19b, c:$19a>
N001 (  1,  1) [000114] ------------              |     +--*  LCL_VAR   ref    V16 tmp9         u:2 (last use) <l:$279, c:$3ca>
N002 (  1,  1) [000332] ------------              |     \--*  CNS_INT   long   16 field offset Fseq[Data] $281
N005 (  1,  1) [000115] ------------              \--*  LCL_VAR   ref    V15 tmp8         u:2 (last use) $404

------------ BB04 [0CA..0CD) -> BB06 (cond), preds={BB03} succs={BB05,BB06}

***** BB04
STMT00066 (IL   ???...  ???)
N005 (  8,  8) [000254] ----G-------              *  JTRUE     void  
N004 (  6,  6) [000255] J---G--N----              \--*  EQ        int    $344
N002 (  4,  4) [000334] ----G-------                 +--*  CAST      int <- bool <- int $343
N001 (  3,  2) [000256] ----G-------                 |  \--*  LCL_VAR   int   (AX) V05 loc3          $382
N003 (  1,  1) [000257] ------------                 \--*  CNS_INT   int    0 $40

------------ BB05 [0CD..0D4), preds={BB04} succs={BB06}

***** BB05
STMT00067 (IL   ???...  ???)
N003 ( 15,  7) [000258] --CXG-------              *  CALL      void   System.Threading.Monitor.Exit $VN.Void
N002 (  1,  1) [000259] ------------ arg0 in rcx  \--*  LCL_VAR   ref    V04 loc2         u:3 (last use) <l:$256, c:$b2>

------------ BB06 [0D4..0DD) -> BB02 (cond), preds={BB04,BB05} succs={BB07,BB02}

***** BB06
STMT00030 (IL 0x0D4...0x0D7)
N005 (  3,  3) [000122] -A------R---              *  ASG       int    $345
N004 (  1,  1) [000121] D------N----              +--*  LCL_VAR   int    V03 loc1         d:4 $345
N003 (  3,  3) [000120] ------------              \--*  ADD       int    $345
N001 (  1,  1) [000118] ------------                 +--*  LCL_VAR   int    V03 loc1         u:3 (last use) $380
N002 (  1,  1) [000119] ------------                 \--*  CNS_INT   int    1 $4e

***** BB06
STMT00017 (IL 0x0D8...0x0DB)
N004 (  5,  5) [000068] ------------              *  JTRUE     void  
N003 (  3,  3) [000067] J------N----              \--*  LT        int    $346
N001 (  1,  1) [000065] ------------                 +--*  LCL_VAR   int    V03 loc1         u:4 $345
N002 (  1,  1) [000066] ------------                 \--*  CNS_INT   int    10 $43

------------ BB07 [0DD..0F9), preds={BB01,BB06} succs={BB08}

***** BB07
STMT00034 (IL 0x0DD...0x0E2)
N003 ( 18,  8) [000133] -ACXG---R---              *  ASG       struct (copy) $VN.Void
N002 (  3,  2) [000131] D---G--N----              +--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  +--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
N001 ( 14,  5) [000130] --CXG-------              \--*  CALL      struct System.DateTime.get_Now $c4

***** BB07
STMT00035 (IL 0x0E3...0x0F4)
N013 ( 53, 36) [000139] --CXG-------              *  CALL      void   System.Console.WriteLine $VN.Void
N012 ( 39, 30) [000138] --CXG------- arg0 in rcx  \--*  CALL      ref    System.String.Concat $3da
N007 ( 17, 10) [000342] -ACXG---R-L- arg0 SETUP      +--*  ASG       ref    $3d5
N006 (  1,  1) [000341] D------N----                 |  +--*  LCL_VAR   ref    V23 tmp16        d:2 $3d5
N005 ( 17, 10) [000136] --CXG-------                 |  \--*  CALL      ref    System.DateTime.ToString $3d5
N004 (  3,  3) [000135] ------------ this in rcx     |     \--*  ADDR      byref  $145
N003 (  3,  2) [000134] ----G--N----                 |        \--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                     |        \--*    long   V02._dateData (offs=0x00) -> V17 tmp10         $c5
N009 (  1,  1) [000343] ------------ arg0 in rcx     +--*  LCL_VAR   ref    V23 tmp16        u:2 (last use) $3d5
N011 (  4, 12) [000340] #---G------- arg1 in rdx     \--*  IND       ref    $3d9
N010 (  2, 10) [000339] H-----------                    \--*  CNS_INT(h) long   0x75003200 "	 Waiting for list processing to complete..." $1cf

------------ BB08 [0F9..102), preds={BB07,BB12} succs={BB09}

***** BB08
STMT00036 (IL 0x0F9...0x0FF)
N006 (  4,  4) [000143] -A-XG---R---              *  ASG       ref    <l:$41c, c:$41b>
N005 (  1,  1) [000142] D------N----              +--*  LCL_VAR   ref    V04 loc2         d:2 <l:$41a, c:$3df>
N004 (  4,  4) [000141] ---XG-------              \--*  IND       ref    <l:$41c, c:$41b>
N003 (  2,  2) [000347] -------N----                 \--*  ADD       byref  $181
N001 (  1,  1) [000140] ------------                    +--*  LCL_VAR   ref    V00 this         u:1 $80
N002 (  1,  1) [000346] ------------                    \--*  CNS_INT   long   8 field offset Fseq[_myList] $280

***** BB08
STMT00037 (IL 0x100...0x101)
N003 (  5,  4) [000146] -A--G---R---              *  ASG       int    $40
N002 (  3,  2) [000145] D---G--N----              +--*  LCL_VAR   int   (AX) V05 loc3         
N001 (  1,  1) [000144] ------------              \--*  CNS_INT   int    0 $40

------------ BB09 [102..122) -> BB13 (cond), preds={BB08} succs={BB10,BB13}

***** BB09
STMT00038 (IL 0x102...0x120)
N005 ( 18, 11) [000150] --CXG-------              *  CALL      void   System.Threading.Monitor.Enter $VN.Void
N003 (  3,  3) [000149] ------------ arg1 in rdx  +--*  LCL_VAR_ADDR long   V05 loc3          $20a
N004 (  1,  1) [000147] ------------ arg0 in rcx  \--*  LCL_VAR   ref    V04 loc2         u:2 <l:$41a, c:$3df>

***** BB09
STMT00039 (IL 0x10A...  ???)
N016 ( 17, 17) [000158] ---XG-------              *  JTRUE     void  
N015 ( 15, 15) [000157] N--XG--N-U--              \--*  EQ        int    <l:$34a, c:$349>
N007 (  7,  7) [000153] ---XG-------                 +--*  IND       ref    <l:$42a, c:$429>
N006 (  5,  5) [000351] ---XG--N----                 |  \--*  ADD       byref  <l:$1a0, c:$19f>
N004 (  4,  4) [000152] ---XG-------                 |     +--*  IND       ref    <l:$420, c:$41f>
N003 (  2,  2) [000353] -------N----                 |     |  \--*  ADD       byref  $181
N001 (  1,  1) [000151] ------------                 |     |     +--*  LCL_VAR   ref    V00 this         u:1 $80
N002 (  1,  1) [000352] ------------                 |     |     \--*  CNS_INT   long   8 field offset Fseq[_myList] $280
N005 (  1,  1) [000350] ------------                 |     \--*  CNS_INT   long   8 field offset Fseq[Head] $280
N014 (  7,  7) [000156] ---XG-------                 \--*  IND       ref    <l:$435, c:$434>
N013 (  5,  5) [000355] ---XG--N----                    \--*  ADD       byref  <l:$1a4, c:$1a3>
N011 (  4,  4) [000155] ---XG-------                       +--*  IND       ref    <l:$420, c:$42b>
N010 (  2,  2) [000357] -------N----                       |  \--*  ADD       byref  $181
N008 (  1,  1) [000154] ------------                       |     +--*  LCL_VAR   ref    V00 this         u:1 $80
N009 (  1,  1) [000356] ------------                       |     \--*  CNS_INT   long   8 field offset Fseq[_myList] $280
N012 (  1,  1) [000354] ------------                       \--*  CNS_INT   long   16 field offset Fseq[Tail] $281

------------ BB10 [126..129) -> BB12 (cond), preds={BB09} succs={BB11,BB12}

***** BB10
STMT00069 (IL   ???...  ???)
N005 (  8,  8) [000261] ----G-------              *  JTRUE     void  
N004 (  6,  6) [000262] J---G--N----              \--*  EQ        int    $34e
N002 (  4,  4) [000358] ----G-------                 +--*  CAST      int <- bool <- int $34d
N001 (  3,  2) [000263] ----G-------                 |  \--*  LCL_VAR   int   (AX) V05 loc3          $384
N003 (  1,  1) [000264] ------------                 \--*  CNS_INT   int    0 $40

------------ BB11 [129..130), preds={BB10} succs={BB12}

***** BB11
STMT00070 (IL   ???...  ???)
N003 ( 15,  7) [000265] --CXG-------              *  CALL      void   System.Threading.Monitor.Exit $VN.Void
N002 (  1,  1) [000266] ------------ arg0 in rcx  \--*  LCL_VAR   ref    V04 loc2         u:2 (last use) <l:$41a, c:$3df>

------------ BB12 [130..139) -> BB08 (always), preds={BB10,BB11} succs={BB08}

***** BB12
STMT00040 (IL 0x130...0x137)
N003 ( 15,  7) [000160] --CXG-------              *  CALL      void   System.Threading.Thread.Sleep $VN.Void
N002 (  1,  1) [000159] ------------ arg0 in rcx  \--*  CNS_INT   int    100 $5b

------------ BB13 [???..???) -> BB30 (callf), preds={BB09} succs={BB30}

------------ BB14 [???..???) -> BB15 (ALWAYS), preds={BB32} succs={BB15}

------------ BB15 [139..17D), preds={BB14} succs={BB16}

***** BB15
STMT00041 (IL 0x139...0x13E)
N003 ( 18,  8) [000164] -ACXG---R---              *  ASG       struct (copy) $VN.Void
N002 (  3,  2) [000162] D---G--N----              +--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  +--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
N001 ( 14,  5) [000161] --CXG-------              \--*  CALL      struct System.DateTime.get_Now $c6

***** BB15
STMT00042 (IL 0x13F...0x178)
N013 ( 53, 36) [000170] --CXG-------              *  CALL      void   System.Console.WriteLine $VN.Void
N012 ( 39, 30) [000169] --CXG------- arg0 in rcx  \--*  CALL      ref    System.String.Concat $3f4
N007 ( 17, 10) [000367] -ACXG---R-L- arg0 SETUP      +--*  ASG       ref    $3ef
N006 (  1,  1) [000366] D------N----                 |  +--*  LCL_VAR   ref    V24 tmp17        d:2 $3ef
N005 ( 17, 10) [000167] --CXG-------                 |  \--*  CALL      ref    System.DateTime.ToString $3ef
N004 (  3,  3) [000166] ------------ this in rcx     |     \--*  ADDR      byref  $147
N003 (  3,  2) [000165] ----G--N----                 |        \--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                     |        \--*    long   V02._dateData (offs=0x00) -> V17 tmp10         $c7
N009 (  1,  1) [000368] ------------ arg0 in rcx     +--*  LCL_VAR   ref    V24 tmp17        u:2 (last use) $3ef
N011 (  4, 12) [000365] #---G------- arg1 in rdx     \--*  IND       ref    $3f3
N010 (  2, 10) [000364] H-----------                    \--*  CNS_INT(h) long   0x75003208 "	 Done.  Profiler is active, available options:" $1d3

***** BB15
STMT00043 (IL 0x155...  ???)
N004 ( 18, 18) [000172] --CXG-------              *  CALL      void   System.Console.WriteLine $VN.Void
N003 (  4, 12) [000372] #---G------- arg0 in rcx  \--*  IND       ref    $3f8
N002 (  2, 10) [000371] H-----------                 \--*  CNS_INT(h) long   0x75003210 "   Q = quit" $1d4

***** BB15
STMT00044 (IL 0x15F...  ???)
N004 ( 18, 18) [000174] --CXG-------              *  CALL      void   System.Console.WriteLine $VN.Void
N003 (  4, 12) [000375] #---G------- arg0 in rcx  \--*  IND       ref    $3fb
N002 (  2, 10) [000374] H-----------                 \--*  CNS_INT(h) long   0x75003218 "   H = heap snapshot" $1d5

***** BB15
STMT00045 (IL 0x169...  ???)
N004 ( 18, 18) [000176] --CXG-------              *  CALL      void   System.Console.WriteLine $VN.Void
N003 (  4, 12) [000378] #---G------- arg0 in rcx  \--*  IND       ref    $3fe
N002 (  2, 10) [000377] H-----------                 \--*  CNS_INT(h) long   0x75003220 "   G = GC (max gen)" $1d6

***** BB15
STMT00046 (IL 0x173...  ???)
N004 ( 18, 18) [000178] --CXG-------              *  CALL      void   System.Console.WriteLine $VN.Void
N003 (  4, 12) [000381] #---G------- arg0 in rcx  \--*  IND       ref    $4c1
N002 (  2, 10) [000380] H-----------                 \--*  CNS_INT(h) long   0x75003228 "   R = clear the running flag to stop the consumer thread" $1d7

------------ BB16 [???..???), preds={BB15,BB25} succs={BB17}

------------ BB17 [???..???), preds={BB16,BB24} succs={BB18}

------------ BB18 [???..???), preds={BB17,BB22} succs={BB19}

------------ BB19 [17D..18F) -> BB21 (cond), preds={BB18,BB20} succs={BB20,BB21}

***** BB19
STMT00048 (IL   ???...  ???)
N006 ( 18, 11) [000233] S-CXG-------              *  CALL      void   System.ConsolePal.ReadKey $VN.Void
N004 (  3,  3) [000235] ------------ arg0 in rcx  +--*  ADDR      long   $148
N003 (  3,  2) [000236] ----G--N----              |  \--*  LCL_VAR   struct<System.ConsoleKeyInfo, 12>(AX)(P) V06 loc4         
                                                  |  \--*    ushort V06._keyChar (offs=0x00) -> V18 tmp11        
                                                  |  \--*    int    V06._key (offs=0x04) -> V19 tmp12        
                                                  |  \--*    int    V06._mods (offs=0x08) -> V20 tmp13         $c8
N005 (  1,  1) [000232] ------------ arg1 in rdx  \--*  CNS_INT   int    0 $40

***** BB19
STMT00050 (IL   ???...  ???)
N004 (  7,  6) [000189] ----G-------              *  JTRUE     void  
N003 (  5,  4) [000188] N---G--N-U--              \--*  NE        int    $34f
N001 (  3,  2) [000240] ----G-------                 +--*  LCL_VAR   int   (AX) V19 tmp12         $385
N002 (  1,  1) [000187] ------------                 \--*  CNS_INT   int    71 $5e

------------ BB20 [18F..19B) -> BB19 (always), preds={BB19} succs={BB19}

***** BB20
STMT00061 (IL 0x18F...0x199)
N003 ( 28, 11) [000222] --CXG-------              *  CALL      void   System.GC.Collect $VN.Void
N002 ( 14,  5) [000221] --CXG------- arg0 in rcx  \--*  CALL      int    System.GC.get_MaxGeneration $305

------------ BB21 [19B..1A6) -> BB23 (cond), preds={BB19} succs={BB22,BB23}

***** BB21
STMT00052 (IL   ???...  ???)
N004 (  7,  6) [000196] ----G-------              *  JTRUE     void  
N003 (  5,  4) [000195] N---G--N-U--              \--*  NE        int    $350
N001 (  3,  2) [000244] ----G-------                 +--*  LCL_VAR   int   (AX) V19 tmp12         $385
N002 (  1,  1) [000194] ------------                 \--*  CNS_INT   int    72 $5f

------------ BB22 [1A6..1AD) -> BB18 (always), preds={BB21} succs={BB18}

***** BB22
STMT00060 (IL 0x1A6...0x1AB)
N001 ( 14,  5) [000220] --CXG-------              *  CALL      void   System.Diagnostics.Debugger.Break $VN.Void

------------ BB23 [1AD..1B8) -> BB25 (cond), preds={BB21} succs={BB24,BB25}

***** BB23
STMT00054 (IL   ???...  ???)
N004 (  7,  6) [000203] ----G-------              *  JTRUE     void  
N003 (  5,  4) [000202] N---G--N-U--              \--*  NE        int    $351
N001 (  3,  2) [000248] ----G-------                 +--*  LCL_VAR   int   (AX) V19 tmp12         $385
N002 (  1,  1) [000201] ------------                 \--*  CNS_INT   int    82 $60

------------ BB24 [1B8..1C1) -> BB17 (always), preds={BB23} succs={BB17}

***** BB24
STMT00059 (IL 0x1B8...0x1BA)
N006 (  7,  7) [000219] -A-XG-------              *  ASG       bool   $VN.Void
N004 (  5,  5) [000218] D--XG--N----              +--*  IND       bool   $40
N003 (  2,  2) [000387] -------N----              |  \--*  ADD       byref  $1a7
N001 (  1,  1) [000216] ------------              |     +--*  LCL_VAR   ref    V00 this         u:1 $80
N002 (  1,  1) [000386] ------------              |     \--*  CNS_INT   long   16 field offset Fseq[_running] $281
N005 (  1,  1) [000217] ------------              \--*  CNS_INT   int    0 $40

------------ BB25 [1C1..1CC) -> BB16 (cond), preds={BB23} succs={BB26,BB16}

***** BB25
STMT00056 (IL   ???...  ???)
N004 (  7,  6) [000210] ----G-------              *  JTRUE     void  
N003 (  5,  4) [000209] N---G--N-U--              \--*  NE        int    $352
N001 (  3,  2) [000252] ----G-------                 +--*  LCL_VAR   int   (AX) V19 tmp12         $385
N002 (  1,  1) [000208] ------------                 \--*  CNS_INT   int    81 $61

------------ BB26 [1CC..1D4) (return), preds={BB25} succs={}

***** BB26
STMT00057 (IL 0x1CC...0x1CE)
N006 (  7,  7) [000214] -A-XG-------              *  ASG       bool   $VN.Void
N004 (  5,  5) [000213] D--XG--N----              +--*  IND       bool   $40
N003 (  2,  2) [000389] -------N----              |  \--*  ADD       byref  $1a7
N001 (  1,  1) [000211] ------------              |     +--*  LCL_VAR   ref    V00 this         u:1 (last use) $80
N002 (  1,  1) [000388] ------------              |     \--*  CNS_INT   long   16 field offset Fseq[_running] $281
N005 (  1,  1) [000212] ------------              \--*  CNS_INT   int    0 $40

***** BB26
STMT00058 (IL 0x1D3...0x1D3)
N001 (  0,  0) [000215] ------------              *  RETURN    void   $442

------------ BB27 [0CA..0CD) -> BB29 (cond), preds={} succs={BB28,BB29}

***** BB27
STMT00031 (IL 0x0CA...0x0CB)
N005 (  8,  8) [000126] ----G-------              *  JTRUE     void  
N004 (  6,  6) [000125] J---G--N----              \--*  EQ        int    $342
N002 (  4,  4) [000336] ----G-------                 +--*  CAST      int <- bool <- int $341
N001 (  3,  2) [000123] ----G-------                 |  \--*  LCL_VAR   int   (AX) V05 loc3          $381
N003 (  1,  1) [000124] ------------                 \--*  CNS_INT   int    0 $40

------------ BB28 [0CD..0D3), preds={BB27} succs={BB29}

***** BB28
STMT00033 (IL 0x0CD...0x0CE)
N003 ( 15,  7) [000129] --CXG-------              *  CALL      void   System.Threading.Monitor.Exit $VN.Void
N002 (  1,  1) [000128] ------------ arg0 in rcx  \--*  LCL_VAR   ref    V04 loc2         u:3 (last use) <l:$256, c:$b2>

------------ BB29 [0D3..0D4) (finret), preds={BB27,BB28} succs={}

***** BB29
STMT00032 (IL 0x0D3...0x0D3)
N001 (  0,  0) [000127] ------------              *  RETFILT   void   $440

------------ BB30 [126..129) -> BB32 (cond), preds={BB13} succs={BB31,BB32}

***** BB30
STMT00062 (IL 0x126...0x127)
N005 (  8,  8) [000226] ----G-------              *  JTRUE     void  
N004 (  6,  6) [000225] J---G--N----              \--*  EQ        int    $34c
N002 (  4,  4) [000360] ----G-------                 +--*  CAST      int <- bool <- int $34b
N001 (  3,  2) [000223] ----G-------                 |  \--*  LCL_VAR   int   (AX) V05 loc3          $383
N003 (  1,  1) [000224] ------------                 \--*  CNS_INT   int    0 $40

------------ BB31 [129..12F), preds={BB30} succs={BB32}

***** BB31
STMT00064 (IL 0x129...0x12A)
N003 ( 15,  7) [000229] --CXG-------              *  CALL      void   System.Threading.Monitor.Exit $VN.Void
N002 (  1,  1) [000228] ------------ arg0 in rcx  \--*  LCL_VAR   ref    V04 loc2         u:2 (last use) <l:$41a, c:$3df>

------------ BB32 [12F..130) (finret), preds={BB30,BB31} succs={BB14}

***** BB32
STMT00063 (IL 0x12F...0x12F)
N001 (  0,  0) [000227] ------------              *  RETFILT   void   $441

-------------------------------------------------------------------------------------------------------------------
*************** In fgDebugCheckBBlist

*************** Finishing PHASE Hoist loop code

*************** Starting PHASE VN based copy prop
*************** In optVnCopyProp()
Copy Assertion for BB01
  curSsaName stack: { }

							Live vars: {V00} => {V00 V21}
							Live vars: {V00 V21} => {V00}
							Live vars: {V00} => {V00 V08}
							Live vars: {V00 V08} => {V00}
							Live vars: {V00} => {V00 V09}
							Live vars: {V00 V09} => {V00 V09 V10}
							Live vars: {V00 V09 V10} => {V00 V09}
							Live vars: {V00 V09} => {V00}
							Live vars: {V00} => {V00 V11}
							Live vars: {V00 V11} => {V00 V11 V12}
							Live vars: {V00 V11 V12} => {V00 V12}
							Live vars: {V00 V12} => {V00}
							Live vars: {V00} => {V00 V22}
							Live vars: {V00 V22} => {V00}
							Live vars: {V00} => {V00 V03}
Copy Assertion for BB07
  curSsaName stack: { 0-[000010]:V00 3-[000063]:V03 8-[000013]:V08 9-[000025]:V09 10-[000029]:V10 11-[000039]:V11 12-[000046]:V12 21-[000271]:V21 22-[000299]:V22 }

							Live vars: {V00} => {V00 V23}
							Live vars: {V00 V23} => {V00}
Copy Assertion for BB08
  curSsaName stack: { 23-[000341]:V23 0-[000010]:V00 3-[000063]:V03 8-[000013]:V08 9-[000025]:V09 10-[000029]:V10 11-[000039]:V11 12-[000046]:V12 21-[000271]:V21 22-[000299]:V22 }

							Live vars: {V00} => {V00 V04}
Copy Assertion for BB30
  curSsaName stack: { 23-[000341]:V23 0-[000010]:V00 3-[000063]:V03 4-[000142]:V04 8-[000013]:V08 9-[000025]:V09 10-[000029]:V10 11-[000039]:V11 12-[000046]:V12 21-[000271]:V21 22-[000299]:V22 }

Copy Assertion for BB32
  curSsaName stack: { 23-[000341]:V23 0-[000010]:V00 3-[000063]:V03 4-[000142]:V04 8-[000013]:V08 9-[000025]:V09 10-[000029]:V10 11-[000039]:V11 12-[000046]:V12 21-[000271]:V21 22-[000299]:V22 }

Copy Assertion for BB14
  curSsaName stack: { 23-[000341]:V23 0-[000010]:V00 3-[000063]:V03 4-[000142]:V04 8-[000013]:V08 9-[000025]:V09 10-[000029]:V10 11-[000039]:V11 12-[000046]:V12 21-[000271]:V21 22-[000299]:V22 }

Copy Assertion for BB15
  curSsaName stack: { 23-[000341]:V23 0-[000010]:V00 3-[000063]:V03 4-[000142]:V04 8-[000013]:V08 9-[000025]:V09 10-[000029]:V10 11-[000039]:V11 12-[000046]:V12 21-[000271]:V21 22-[000299]:V22 }

							Live vars: {V00} => {V00 V24}
							Live vars: {V00 V24} => {V00}
Copy Assertion for BB16
  curSsaName stack: { 23-[000341]:V23 0-[000010]:V00 24-[000366]:V24 3-[000063]:V03 4-[000142]:V04 8-[000013]:V08 9-[000025]:V09 10-[000029]:V10 11-[000039]:V11 12-[000046]:V12 21-[000271]:V21 22-[000299]:V22 }

Copy Assertion for BB17
  curSsaName stack: { 23-[000341]:V23 0-[000010]:V00 24-[000366]:V24 3-[000063]:V03 4-[000142]:V04 8-[000013]:V08 9-[000025]:V09 10-[000029]:V10 11-[000039]:V11 12-[000046]:V12 21-[000271]:V21 22-[000299]:V22 }

Copy Assertion for BB18
  curSsaName stack: { 23-[000341]:V23 0-[000010]:V00 24-[000366]:V24 3-[000063]:V03 4-[000142]:V04 8-[000013]:V08 9-[000025]:V09 10-[000029]:V10 11-[000039]:V11 12-[000046]:V12 21-[000271]:V21 22-[000299]:V22 }

Copy Assertion for BB19
  curSsaName stack: { 23-[000341]:V23 0-[000010]:V00 24-[000366]:V24 3-[000063]:V03 4-[000142]:V04 8-[000013]:V08 9-[000025]:V09 10-[000029]:V10 11-[000039]:V11 12-[000046]:V12 21-[000271]:V21 22-[000299]:V22 }

Copy Assertion for BB21
  curSsaName stack: { 23-[000341]:V23 0-[000010]:V00 24-[000366]:V24 3-[000063]:V03 4-[000142]:V04 8-[000013]:V08 9-[000025]:V09 10-[000029]:V10 11-[000039]:V11 12-[000046]:V12 21-[000271]:V21 22-[000299]:V22 }

Copy Assertion for BB23
  curSsaName stack: { 23-[000341]:V23 0-[000010]:V00 24-[000366]:V24 3-[000063]:V03 4-[000142]:V04 8-[000013]:V08 9-[000025]:V09 10-[000029]:V10 11-[000039]:V11 12-[000046]:V12 21-[000271]:V21 22-[000299]:V22 }

Copy Assertion for BB25
  curSsaName stack: { 23-[000341]:V23 0-[000010]:V00 24-[000366]:V24 3-[000063]:V03 4-[000142]:V04 8-[000013]:V08 9-[000025]:V09 10-[000029]:V10 11-[000039]:V11 12-[000046]:V12 21-[000271]:V21 22-[000299]:V22 }

Copy Assertion for BB26
  curSsaName stack: { 23-[000341]:V23 0-[000010]:V00 24-[000366]:V24 3-[000063]:V03 4-[000142]:V04 8-[000013]:V08 9-[000025]:V09 10-[000029]:V10 11-[000039]:V11 12-[000046]:V12 21-[000271]:V21 22-[000299]:V22 }

							Live vars: {V00} => {}
Copy Assertion for BB24
  curSsaName stack: { 23-[000341]:V23 0-[000010]:V00 24-[000366]:V24 3-[000063]:V03 4-[000142]:V04 8-[000013]:V08 9-[000025]:V09 10-[000029]:V10 11-[000039]:V11 12-[000046]:V12 21-[000271]:V21 22-[000299]:V22 }

Copy Assertion for BB22
  curSsaName stack: { 23-[000341]:V23 0-[000010]:V00 24-[000366]:V24 3-[000063]:V03 4-[000142]:V04 8-[000013]:V08 9-[000025]:V09 10-[000029]:V10 11-[000039]:V11 12-[000046]:V12 21-[000271]:V21 22-[000299]:V22 }

Copy Assertion for BB20
  curSsaName stack: { 23-[000341]:V23 0-[000010]:V00 24-[000366]:V24 3-[000063]:V03 4-[000142]:V04 8-[000013]:V08 9-[000025]:V09 10-[000029]:V10 11-[000039]:V11 12-[000046]:V12 21-[000271]:V21 22-[000299]:V22 }

Copy Assertion for BB31
  curSsaName stack: { 23-[000341]:V23 0-[000010]:V00 3-[000063]:V03 4-[000142]:V04 8-[000013]:V08 9-[000025]:V09 10-[000029]:V10 11-[000039]:V11 12-[000046]:V12 21-[000271]:V21 22-[000299]:V22 }

							Live vars: {V00 V04} => {V00}
Copy Assertion for BB09
  curSsaName stack: { 23-[000341]:V23 0-[000010]:V00 3-[000063]:V03 4-[000142]:V04 8-[000013]:V08 9-[000025]:V09 10-[000029]:V10 11-[000039]:V11 12-[000046]:V12 21-[000271]:V21 22-[000299]:V22 }

Copy Assertion for BB13
  curSsaName stack: { 23-[000341]:V23 0-[000010]:V00 3-[000063]:V03 4-[000142]:V04 8-[000013]:V08 9-[000025]:V09 10-[000029]:V10 11-[000039]:V11 12-[000046]:V12 21-[000271]:V21 22-[000299]:V22 }

Copy Assertion for BB10
  curSsaName stack: { 23-[000341]:V23 0-[000010]:V00 3-[000063]:V03 4-[000142]:V04 8-[000013]:V08 9-[000025]:V09 10-[000029]:V10 11-[000039]:V11 12-[000046]:V12 21-[000271]:V21 22-[000299]:V22 }

Copy Assertion for BB12
  curSsaName stack: { 23-[000341]:V23 0-[000010]:V00 3-[000063]:V03 4-[000142]:V04 8-[000013]:V08 9-[000025]:V09 10-[000029]:V10 11-[000039]:V11 12-[000046]:V12 21-[000271]:V21 22-[000299]:V22 }

Copy Assertion for BB11
  curSsaName stack: { 23-[000341]:V23 0-[000010]:V00 3-[000063]:V03 4-[000142]:V04 8-[000013]:V08 9-[000025]:V09 10-[000029]:V10 11-[000039]:V11 12-[000046]:V12 21-[000271]:V21 22-[000299]:V22 }

							Live vars: {V00 V04} => {V00}
Copy Assertion for BB02
  curSsaName stack: { 0-[000010]:V00 3-[000063]:V03 8-[000013]:V08 9-[000025]:V09 10-[000029]:V10 11-[000039]:V11 12-[000046]:V12 21-[000271]:V21 22-[000299]:V22 }

							Live vars: {V00 V03} => {V00 V03 V04}
Copy Assertion for BB27
  curSsaName stack: { 0-[000010]:V00 3-[000397]:V03 4-[000071]:V04 8-[000013]:V08 9-[000025]:V09 10-[000029]:V10 11-[000039]:V11 12-[000046]:V12 21-[000271]:V21 22-[000299]:V22 }

Copy Assertion for BB29
  curSsaName stack: { 0-[000010]:V00 3-[000397]:V03 4-[000071]:V04 8-[000013]:V08 9-[000025]:V09 10-[000029]:V10 11-[000039]:V11 12-[000046]:V12 21-[000271]:V21 22-[000299]:V22 }

Copy Assertion for BB28
  curSsaName stack: { 0-[000010]:V00 3-[000397]:V03 4-[000071]:V04 8-[000013]:V08 9-[000025]:V09 10-[000029]:V10 11-[000039]:V11 12-[000046]:V12 21-[000271]:V21 22-[000299]:V22 }

							Live vars: {V04} => {}
Copy Assertion for BB03
  curSsaName stack: { 0-[000010]:V00 3-[000397]:V03 4-[000071]:V04 8-[000013]:V08 9-[000025]:V09 10-[000029]:V10 11-[000039]:V11 12-[000046]:V12 21-[000271]:V21 22-[000299]:V22 }

							Live vars: {V00 V03 V04} => {V00 V03 V04 V13}
							Live vars: {V00 V03 V04 V13} => {V00 V03 V04 V13 V14}
							Live vars: {V00 V03 V04 V13 V14} => {V00 V03 V04 V13}
							Live vars: {V00 V03 V04 V13} => {V00 V03 V04}
							Live vars: {V00 V03 V04} => {V00 V03 V04 V15}
							Live vars: {V00 V03 V04 V15} => {V00 V03 V04 V15 V16}
							Live vars: {V00 V03 V04 V15 V16} => {V00 V03 V04 V15}
							Live vars: {V00 V03 V04 V15} => {V00 V03 V04}
Copy Assertion for BB04
  curSsaName stack: { 0-[000010]:V00 3-[000397]:V03 4-[000071]:V04 8-[000013]:V08 9-[000025]:V09 10-[000029]:V10 11-[000039]:V11 12-[000046]:V12 13-[000085]:V13 14-[000089]:V14 15-[000108]:V15 16-[000112]:V16 21-[000271]:V21 22-[000299]:V22 }

Copy Assertion for BB06
  curSsaName stack: { 0-[000010]:V00 3-[000397]:V03 4-[000071]:V04 8-[000013]:V08 9-[000025]:V09 10-[000029]:V10 11-[000039]:V11 12-[000046]:V12 13-[000085]:V13 14-[000089]:V14 15-[000108]:V15 16-[000112]:V16 21-[000271]:V21 22-[000299]:V22 }

							Live vars: {V00 V03} => {V00}
							Live vars: {V00} => {V00 V03}
Copy Assertion for BB05
  curSsaName stack: { 0-[000010]:V00 3-[000397]:V03 4-[000071]:V04 8-[000013]:V08 9-[000025]:V09 10-[000029]:V10 11-[000039]:V11 12-[000046]:V12 13-[000085]:V13 14-[000089]:V14 15-[000108]:V15 16-[000112]:V16 21-[000271]:V21 22-[000299]:V22 }

							Live vars: {V00 V03 V04} => {V00 V03}

*************** Finishing PHASE VN based copy prop

*************** Starting PHASE Redundant branch opts

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..072)-> BB07 ( cond )                     i hascall gcsafe newobj 
BB33 [0048]  1       BB01                  1       [072..???)                                     internal LoopPH 
BB02 [0001]  2       BB06,BB33             8     0 [072..07B)                                     i Loop gcsafe bwd bwd-target 
BB03 [0002]  1  0    BB02                  8     0 [07B..0CA)                 T0      try { }     keep i try hascall gcsafe newobj bwd 
BB04 [0038]  1       BB03                  8     0 [0CA..0CD)-> BB06 ( cond )                     keep i gcsafe bwd cfb 
BB05 [0039]  1       BB04                  4     0 [0CD..0D4)                                     i hascall gcsafe bwd 
BB06 [0006]  2       BB04,BB05             8     0 [0D4..0DD)-> BB02 ( cond )                     i gcsafe bwd 
BB07 [0008]  2       BB01,BB06             1       [0DD..0F9)                                     i hascall gcsafe 
BB08 [0009]  2       BB07,BB12             8     1 [0F9..102)                                     i Loop gcsafe bwd bwd-target 
BB09 [0010]  1  1    BB08                  8     1 [102..122)-> BB13 ( cond ) T1      try { }     keep i try hascall gcsafe bwd 
BB10 [0041]  1       BB09                  8     1 [126..129)-> BB12 ( cond )                     keep i gcsafe bwd cfb 
BB11 [0042]  1       BB10                  4     1 [129..130)                                     i hascall gcsafe bwd 
BB12 [0016]  2       BB10,BB11             8     1 [130..139)-> BB08 (always)                     i hascall gcsafe bwd 
BB13 [0030]  1       BB09                  1       [???..???)-> BB30 (callf )                     i internal gcsafe 
BB14 [0031]  1       BB32                  1       [???..???)-> BB15 (ALWAYS)                     i internal gcsafe KEEP 
BB15 [0017]  1       BB14                  1       [139..17D)                                     i hascall gcsafe 
BB16 [0045]  2       BB15,BB25             1     2 [???..???)                                     internal gcsafe 
BB17 [0046]  2       BB16,BB24             1     3 [???..???)                                     internal gcsafe 
BB18 [0047]  2       BB17,BB22             1     4 [???..???)                                     internal gcsafe 
BB19 [0018]  2       BB18,BB20             8     5 [17D..18F)-> BB21 ( cond )                     i Loop hascall gcsafe bwd bwd-target 
BB20 [0019]  1       BB19                  8     5 [18F..19B)-> BB19 (always)                     i hascall gcsafe bwd 
BB21 [0020]  1       BB19                  1     4 [19B..1A6)-> BB23 ( cond )                     i gcsafe bwd 
BB22 [0021]  1       BB21                  1     4 [1A6..1AD)-> BB18 (always)                     i hascall gcsafe bwd 
BB23 [0022]  1       BB21                  1     3 [1AD..1B8)-> BB25 ( cond )                     i gcsafe bwd 
BB24 [0023]  1       BB23                  1     3 [1B8..1C1)-> BB17 (always)                     i gcsafe bwd 
BB25 [0024]  1       BB23                  1     2 [1C1..1CC)-> BB16 ( cond )                     i gcsafe bwd 
BB26 [0025]  1       BB25                  1       [1CC..1D4)        (return)                     i gcsafe 
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ funclets follow
BB27 [0003]  1     0                       0       [0CA..0CD)-> BB29 ( cond )    H0 F fault {     keep i rare flet bwd 
BB28 [0004]  1     0 BB27                  0       [0CD..0D3)                    H0               i rare hascall bwd 
BB29 [0005]  2     0 BB27,BB28             0       [0D3..0D4)        (finret)    H0   }           i rare bwd 
BB30 [0013]  2     1 BB13                  1       [126..129)-> BB32 ( cond )    H1 F finally {   keep i gcsafe flet bwd 
BB31 [0014]  1     1 BB30                  1       [129..12F)                    H1               i hascall gcsafe bwd 
BB32 [0015]  2     1 BB30,BB31             1       [12F..130)        (finret)    H1   }           i gcsafe bwd 
-----------------------------------------------------------------------------------------------------------------------------------------

*************** Finishing PHASE Redundant branch opts [no changes]
Trees before Optimize Valnum CSEs

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..072)-> BB07 ( cond )                     i hascall gcsafe newobj 
BB33 [0048]  1       BB01                  1       [072..???)                                     internal LoopPH 
BB02 [0001]  2       BB06,BB33             8     0 [072..07B)                                     i Loop gcsafe bwd bwd-target 
BB03 [0002]  1  0    BB02                  8     0 [07B..0CA)                 T0      try { }     keep i try hascall gcsafe newobj bwd 
BB04 [0038]  1       BB03                  8     0 [0CA..0CD)-> BB06 ( cond )                     keep i gcsafe bwd cfb 
BB05 [0039]  1       BB04                  4     0 [0CD..0D4)                                     i hascall gcsafe bwd 
BB06 [0006]  2       BB04,BB05             8     0 [0D4..0DD)-> BB02 ( cond )                     i gcsafe bwd 
BB07 [0008]  2       BB01,BB06             1       [0DD..0F9)                                     i hascall gcsafe 
BB08 [0009]  2       BB07,BB12             8     1 [0F9..102)                                     i Loop gcsafe bwd bwd-target 
BB09 [0010]  1  1    BB08                  8     1 [102..122)-> BB13 ( cond ) T1      try { }     keep i try hascall gcsafe bwd 
BB10 [0041]  1       BB09                  8     1 [126..129)-> BB12 ( cond )                     keep i gcsafe bwd cfb 
BB11 [0042]  1       BB10                  4     1 [129..130)                                     i hascall gcsafe bwd 
BB12 [0016]  2       BB10,BB11             8     1 [130..139)-> BB08 (always)                     i hascall gcsafe bwd 
BB13 [0030]  1       BB09                  1       [???..???)-> BB30 (callf )                     i internal gcsafe 
BB14 [0031]  1       BB32                  1       [???..???)-> BB15 (ALWAYS)                     i internal gcsafe KEEP 
BB15 [0017]  1       BB14                  1       [139..17D)                                     i hascall gcsafe 
BB16 [0045]  2       BB15,BB25             1     2 [???..???)                                     internal gcsafe 
BB17 [0046]  2       BB16,BB24             1     3 [???..???)                                     internal gcsafe 
BB18 [0047]  2       BB17,BB22             1     4 [???..???)                                     internal gcsafe 
BB19 [0018]  2       BB18,BB20             8     5 [17D..18F)-> BB21 ( cond )                     i Loop hascall gcsafe bwd bwd-target 
BB20 [0019]  1       BB19                  8     5 [18F..19B)-> BB19 (always)                     i hascall gcsafe bwd 
BB21 [0020]  1       BB19                  1     4 [19B..1A6)-> BB23 ( cond )                     i gcsafe bwd 
BB22 [0021]  1       BB21                  1     4 [1A6..1AD)-> BB18 (always)                     i hascall gcsafe bwd 
BB23 [0022]  1       BB21                  1     3 [1AD..1B8)-> BB25 ( cond )                     i gcsafe bwd 
BB24 [0023]  1       BB23                  1     3 [1B8..1C1)-> BB17 (always)                     i gcsafe bwd 
BB25 [0024]  1       BB23                  1     2 [1C1..1CC)-> BB16 ( cond )                     i gcsafe bwd 
BB26 [0025]  1       BB25                  1       [1CC..1D4)        (return)                     i gcsafe 
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ funclets follow
BB27 [0003]  1     0                       0       [0CA..0CD)-> BB29 ( cond )    H0 F fault {     keep i rare flet bwd 
BB28 [0004]  1     0 BB27                  0       [0CD..0D3)                    H0               i rare hascall bwd 
BB29 [0005]  2     0 BB27,BB28             0       [0D3..0D4)        (finret)    H0   }           i rare bwd 
BB30 [0013]  2     1 BB13                  1       [126..129)-> BB32 ( cond )    H1 F finally {   keep i gcsafe flet bwd 
BB31 [0014]  1     1 BB30                  1       [129..12F)                    H1               i hascall gcsafe bwd 
BB32 [0015]  2     1 BB30,BB31             1       [12F..130)        (finret)    H1   }           i gcsafe bwd 
-----------------------------------------------------------------------------------------------------------------------------------------

------------ BB01 [000..072) -> BB07 (cond), preds={} succs={BB33,BB07}

***** BB01
STMT00000 (IL 0x000...0x005)
N003 ( 18,  8) [000003] -ACXG---R---              *  ASG       struct (copy) $VN.Void
N002 (  3,  2) [000001] D---G--N----              +--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  +--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
N001 ( 14,  5) [000000] --CXG-------              \--*  CALL      struct System.DateTime.get_Now $c0

***** BB01
STMT00001 (IL 0x006...0x022)
N013 ( 53, 36) [000009] --CXG-------              *  CALL      void   System.Console.WriteLine $VN.Void
N012 ( 39, 30) [000008] --CXG------- arg0 in rcx  \--*  CALL      ref    System.String.Concat $89
N007 ( 17, 10) [000272] -ACXG---R-L- arg0 SETUP      +--*  ASG       ref    $84
N006 (  1,  1) [000271] D------N----                 |  +--*  LCL_VAR   ref    V21 tmp14        d:2 $84
N005 ( 17, 10) [000006] --CXG-------                 |  \--*  CALL      ref    System.DateTime.ToString $84
N004 (  3,  3) [000005] ------------ this in rcx     |     \--*  ADDR      byref  $141
N003 (  3,  2) [000004] ----G--N----                 |        \--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                     |        \--*    long   V02._dateData (offs=0x00) -> V17 tmp10         $c1
N009 (  1,  1) [000273] ------------ arg0 in rcx     +--*  LCL_VAR   ref    V21 tmp14        u:2 (last use) $84
N011 (  4, 12) [000270] #---G------- arg1 in rdx     \--*  IND       ref    $88
N010 (  2, 10) [000269] H-----------                    \--*  CNS_INT(h) long   0x750031F0 "	 Created list" $1c0

***** BB01
STMT00002 (IL 0x01C...  ???)
N005 ( 16, 16) [000014] -AC-----R---              *  ASG       ref    $240
N004 (  1,  1) [000013] D------N----              +--*  LCL_VAR   ref    V08 tmp1         d:2 $240
N003 ( 16, 16) [000012] --C---------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST $240
N002 (  2, 10) [000011] H----------- arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb3ee2350 method $1c1

***** BB01
STMT00003 (IL   ???...  ???)
N003 ( 15,  8) [000016] --CXG-------              *  CALL      void   FalseLeakRepro.List..ctor $VN.Void
N002 (  1,  1) [000015] ------------ this in rcx  \--*  LCL_VAR   ref    V08 tmp1         u:2 $240

***** BB01
STMT00004 (IL 0x022...  ???)
N006 (  6,  6) [000019] -A-XG-------              *  ASG       ref    $VN.Void
N004 (  4,  4) [000018] D--XG--N----              +--*  IND       ref    $240
N003 (  2,  2) [000279] -------N----              |  \--*  ADD       byref  $181
N001 (  1,  1) [000010] ------------              |     +--*  LCL_VAR   ref    V00 this         u:1 $80
N002 (  1,  1) [000278] ------------              |     \--*  CNS_INT   long   8 field offset Fseq[_myList] $280
N005 (  1,  1) [000017] ------------              \--*  LCL_VAR   ref    V08 tmp1         u:2 (last use) $240

***** BB01
STMT00005 (IL 0x027...0x037)
N005 ( 16, 16) [000026] -AC-----R---              *  ASG       ref    $243
N004 (  1,  1) [000025] D------N----              +--*  LCL_VAR   ref    V09 tmp2         d:2 $243
N003 ( 16, 16) [000024] --C---------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST $243
N002 (  2, 10) [000023] H----------- arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb3b058b8 token $1c3

***** BB01
STMT00007 (IL   ???...  ???)
N009 (  7,  7) [000030] -A-XG---R---              *  ASG       ref    <l:$250, c:$24f>
N008 (  1,  1) [000029] D------N----              +--*  LCL_VAR   ref    V10 tmp3         d:2 <l:$248, c:$94>
N007 (  7,  7) [000022] ---XG-------              \--*  IND       ref    <l:$250, c:$24f>
N006 (  5,  5) [000282] ---XG--N----                 \--*  ADD       byref  <l:$185, c:$184>
N004 (  4,  4) [000021] ---XG-------                    +--*  IND       ref    <l:$246, c:$245>
N003 (  2,  2) [000284] -------N----                    |  \--*  ADD       byref  $181
N001 (  1,  1) [000020] ------------                    |     +--*  LCL_VAR   ref    V00 this         u:1 $80
N002 (  1,  1) [000283] ------------                    |     \--*  CNS_INT   long   8 field offset Fseq[_myList] $280
N005 (  1,  1) [000281] ------------                    \--*  CNS_INT   long   8 field offset Fseq[Head] $280

***** BB01
STMT00006 (IL   ???...  ???)
N003 ( 15,  8) [000028] --CXG-------              *  CALL      void   System.Object..ctor $VN.Void
N002 (  1,  1) [000027] ------------ this in rcx  \--*  LCL_VAR   ref    V09 tmp2         u:2 $243

***** BB01
STMT00008 (IL 0x037...  ???)
N006 (  6,  6) [000034] -A-XG-------              *  ASG       ref    $VN.Void
N004 (  4,  4) [000033] D--XG--N----              +--*  IND       ref    $243
N003 (  2,  2) [000287] -------N----              |  \--*  ADD       byref  <l:$187, c:$186>
N001 (  1,  1) [000031] ------------              |     +--*  LCL_VAR   ref    V10 tmp3         u:2 (last use) <l:$248, c:$94>
N002 (  1,  1) [000286] ------------              |     \--*  CNS_INT   long   16 field offset Fseq[Data] $281
N005 (  1,  1) [000032] ------------              \--*  LCL_VAR   ref    V09 tmp2         u:2 (last use) $243

***** BB01
STMT00009 (IL 0x03C...0x057)
N005 ( 16, 16) [000040] -AC-----R---              *  ASG       ref    $253
N004 (  1,  1) [000039] D------N----              +--*  LCL_VAR   ref    V11 tmp4         d:2 $253
N003 ( 16, 16) [000038] --C---------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST $253
N002 (  2, 10) [000037] H----------- arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb3ee6200 token $1c6

***** BB01
STMT00010 (IL   ???...  ???)
N007 ( 18, 21) [000042] --CXG-------              *  CALL      void   System.MulticastDelegate.CtorClosed $VN.Void
N004 (  1,  1) [000041] ------------ this in rcx  +--*  LCL_VAR   ref    V11 tmp4         u:2 $253
N005 (  1,  1) [000035] ------------ arg1 in rdx  +--*  LCL_VAR   ref    V00 this         u:1 $80
N006 (  2, 10) [000036] H----------- arg2 in r8   \--*  CNS_INT(h) long   0x7ffdb3b213f8 ftn $1c7

***** BB01
STMT00011 (IL 0x048...  ???)
N005 ( 16, 16) [000047] -AC-----R---              *  ASG       ref    $254
N004 (  1,  1) [000046] D------N----              +--*  LCL_VAR   ref    V12 tmp5         d:2 $254
N003 ( 16, 16) [000045] --C---------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWFAST $254
N002 (  2, 10) [000044] H----------- arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb3c84e80 token $1c8

***** BB01
STMT00012 (IL   ???...  ???)
N005 ( 16, 10) [000049] --CXG-------              *  CALL      void   System.Threading.Thread..ctor $VN.Void
N003 (  1,  1) [000048] ------------ this in rcx  +--*  LCL_VAR   ref    V12 tmp5         u:2 $254
N004 (  1,  1) [000043] ------------ arg1 in rdx  \--*  LCL_VAR   ref    V11 tmp4         u:2 (last use) $253

***** BB01
STMT00013 (IL 0x04D...  ???)
N003 ( 15,  8) [000051] --CXG-------              *  CALL nullcheck void   System.Threading.Thread.Start $VN.Void
N002 (  1,  1) [000050] ------------ this in rcx  \--*  LCL_VAR   ref    V12 tmp5         u:2 (last use) $254

***** BB01
STMT00014 (IL 0x052...  ???)
N003 ( 18,  8) [000055] -ACXG---R---              *  ASG       struct (copy) $VN.Void
N002 (  3,  2) [000053] D---G--N----              +--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  +--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
N001 ( 14,  5) [000052] --CXG-------              \--*  CALL      struct System.DateTime.get_Now $c2

***** BB01
STMT00015 (IL 0x058...0x06F)
N013 ( 53, 36) [000061] --CXG-------              *  CALL      void   System.Console.WriteLine $VN.Void
N012 ( 39, 30) [000060] --CXG------- arg0 in rcx  \--*  CALL      ref    System.String.Concat $ad
N007 ( 17, 10) [000300] -ACXG---R-L- arg0 SETUP      +--*  ASG       ref    $a8
N006 (  1,  1) [000299] D------N----                 |  +--*  LCL_VAR   ref    V22 tmp15        d:2 $a8
N005 ( 17, 10) [000058] --CXG-------                 |  \--*  CALL      ref    System.DateTime.ToString $a8
N004 (  3,  3) [000057] ------------ this in rcx     |     \--*  ADDR      byref  $143
N003 (  3,  2) [000056] ----G--N----                 |        \--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                     |        \--*    long   V02._dateData (offs=0x00) -> V17 tmp10         $c3
N009 (  1,  1) [000301] ------------ arg0 in rcx     +--*  LCL_VAR   ref    V22 tmp15        u:2 (last use) $a8
N011 (  4, 12) [000298] #---G------- arg1 in rdx     \--*  IND       ref    $ac
N010 (  2, 10) [000297] H-----------                    \--*  CNS_INT(h) long   0x750031F8 "	 Consumer thread started, adding items..." $1c9

***** BB01
STMT00016 (IL 0x06E...  ???)
N003 (  1,  3) [000064] -A------R---              *  ASG       int    $40
N002 (  1,  1) [000063] D------N----              +--*  LCL_VAR   int    V03 loc1         d:2 $40
N001 (  1,  1) [000062] ------------              \--*  CNS_INT   int    0 $40

***** BB01
STMT00072 (IL 0x0D8...  ???)
N004 (  5,  5) [000390] ------------              *  JTRUE     void  
N003 (  3,  3) [000391] J------N----              \--*  GE        int    $40
N001 (  1,  1) [000392] ------------                 +--*  LCL_VAR   int    V03 loc1         u:2 $40
N002 (  1,  1) [000393] ------------                 \--*  CNS_INT   int    10 $43

------------ BB33 [072..???), preds={BB01} succs={BB02}

***** BB33
STMT00075 (IL   ???...  ???)
N003 (  2, 10) [000404] ------------              *  COMMA     void  
N001 (  2, 10) [000402] H------H----              +--*  CNS_INT(h) long   0x7ffdb3ee58a8 method $1ca
N002 (  0,  0) [000403] ------------              \--*  NOP       void  

***** BB33
STMT00076 (IL   ???...  ???)
N003 (  2, 10) [000407] ------------              *  COMMA     void  
N001 (  2, 10) [000405] H------H----              +--*  CNS_INT(h) long   0x7ffdb3b058b8 token $1c3
N002 (  0,  0) [000406] ------------              \--*  NOP       void  

------------ BB02 [072..07B), preds={BB06,BB33} succs={BB03}

***** BB02
STMT00074 (IL   ???...  ???)
N005 (  0,  0) [000399] -A------R---              *  ASG       int   
N004 (  0,  0) [000397] D------N----              +--*  LCL_VAR   int    V03 loc1         d:3
N003 (  0,  0) [000398] ------------              \--*  PHI       int   
N001 (  0,  0) [000401] ------------ pred BB06       +--*  PHI_ARG   int    V03 loc1         u:4
N002 (  0,  0) [000400] ------------ pred BB33       \--*  PHI_ARG   int    V03 loc1         u:2 $40

***** BB02
STMT00018 (IL 0x072...0x078)
N006 (  4,  4) [000072] -A-XG---R---              *  ASG       ref    <l:$258, c:$257>
N005 (  1,  1) [000071] D------N----              +--*  LCL_VAR   ref    V04 loc2         d:3 <l:$256, c:$b2>
N004 (  4,  4) [000070] ---XG-------              \--*  IND       ref    <l:$258, c:$257>
N003 (  2,  2) [000305] -------N----                 \--*  ADD       byref  $181
N001 (  1,  1) [000069] ------------                    +--*  LCL_VAR   ref    V00 this         u:1 $80
N002 (  1,  1) [000304] ------------                    \--*  CNS_INT   long   8 field offset Fseq[_myList] $280

***** BB02
STMT00019 (IL 0x079...0x07A)
N003 (  5,  4) [000075] -A--G---R---              *  ASG       int    $40
N002 (  3,  2) [000074] D---G--N----              +--*  LCL_VAR   int   (AX) V05 loc3         
N001 (  1,  1) [000073] ------------              \--*  CNS_INT   int    0 $40

------------ BB03 [07B..0CA), preds={BB02} succs={BB04}

***** BB03
STMT00020 (IL 0x07B...0x093)
N005 ( 18, 11) [000079] --CXG-------              *  CALL      void   System.Threading.Monitor.Enter $VN.Void
N003 (  3,  3) [000078] ------------ arg1 in rdx  +--*  LCL_VAR_ADDR long   V05 loc3          $206
N004 (  1,  1) [000076] ------------ arg0 in rcx  \--*  LCL_VAR   ref    V04 loc2         u:3 <l:$256, c:$b2>

***** BB03
STMT00021 (IL 0x083...  ???)
N005 ( 16, 16) [000086] -AC-----R---              *  ASG       ref    $259
N004 (  1,  1) [000085] D------N----              +--*  LCL_VAR   ref    V13 tmp6         d:2 $259
N003 ( 16, 16) [000084] --C---------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST $259
N002 (  2, 10) [000083] H----------- arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb3ee58a8 method $1ca

***** BB03
STMT00023 (IL   ???...  ???)
N009 (  7,  7) [000090] -A-XG---R---              *  ASG       ref    <l:$267, c:$266>
N008 (  1,  1) [000089] D------N----              +--*  LCL_VAR   ref    V14 tmp7         d:2 <l:$25f, c:$b9>
N007 (  7,  7) [000082] ---XG-------              \--*  IND       ref    <l:$267, c:$266>
N006 (  5,  5) [000310] ---XG--N----                 \--*  ADD       byref  <l:$18b, c:$18a>
N004 (  4,  4) [000081] ---XG-------                    +--*  IND       ref    <l:$25d, c:$25c>
N003 (  2,  2) [000312] -------N----                    |  \--*  ADD       byref  $181
N001 (  1,  1) [000080] ------------                    |     +--*  LCL_VAR   ref    V00 this         u:1 $80
N002 (  1,  1) [000311] ------------                    |     \--*  CNS_INT   long   8 field offset Fseq[_myList] $280
N005 (  1,  1) [000309] ------------                    \--*  CNS_INT   long   8 field offset Fseq[Head] $280

***** BB03
STMT00065 (IL   ???...  ???)
N003 ( 15,  8) [000230] --CXG-------              *  CALL      void   System.Object..ctor $VN.Void
N002 (  1,  1) [000087] ------------ this in rcx  \--*  LCL_VAR   ref    V13 tmp6         u:2 $259

***** BB03
STMT00024 (IL 0x093...  ???)
N006 (  6,  6) [000094] -A-XG-------              *  ASG       ref    $VN.Void
N004 (  4,  4) [000093] D--XG--N----              +--*  IND       ref    $259
N003 (  2,  2) [000315] -------N----              |  \--*  ADD       byref  <l:$18d, c:$18c>
N001 (  1,  1) [000091] ------------              |     +--*  LCL_VAR   ref    V14 tmp7         u:2 (last use) <l:$25f, c:$b9>
N002 (  1,  1) [000314] ------------              |     \--*  CNS_INT   long   8 field offset Fseq[Next] $280
N005 (  1,  1) [000092] ------------              \--*  LCL_VAR   ref    V13 tmp6         u:2 (last use) $259

***** BB03
STMT00025 (IL 0x098...0x0AE)
N018 ( 18, 18) [000102] -A-XG-------              *  ASG       ref    $VN.Void
N007 (  7,  7) [000101] D--XG--N----              +--*  IND       ref    $279
N006 (  5,  5) [000317] ---XG--N----              |  \--*  ADD       byref  <l:$191, c:$190>
N004 (  4,  4) [000096] ---XG-------              |     +--*  IND       ref    <l:$26d, c:$26c>
N003 (  2,  2) [000319] -------N----              |     |  \--*  ADD       byref  $181
N001 (  1,  1) [000095] ------------              |     |     +--*  LCL_VAR   ref    V00 this         u:1 $80
N002 (  1,  1) [000318] ------------              |     |     \--*  CNS_INT   long   8 field offset Fseq[_myList] $280
N005 (  1,  1) [000316] ------------              |     \--*  CNS_INT   long   8 field offset Fseq[Head] $280
N017 ( 10, 10) [000100] ---XG-------              \--*  IND       ref    <l:$403, c:$402>
N016 (  8,  8) [000321] ---XG--N----                 \--*  ADD       byref  <l:$197, c:$196>
N014 (  7,  7) [000099] ---XG-------                    +--*  IND       ref    <l:$278, c:$277>
N013 (  5,  5) [000323] ---XG--N----                    |  \--*  ADD       byref  <l:$191, c:$193>
N011 (  4,  4) [000098] ---XG-------                    |     +--*  IND       ref    <l:$26d, c:$26e>
N010 (  2,  2) [000325] -------N----                    |     |  \--*  ADD       byref  $181
N008 (  1,  1) [000097] ------------                    |     |     +--*  LCL_VAR   ref    V00 this         u:1 $80
N009 (  1,  1) [000324] ------------                    |     |     \--*  CNS_INT   long   8 field offset Fseq[_myList] $280
N012 (  1,  1) [000322] ------------                    |     \--*  CNS_INT   long   8 field offset Fseq[Head] $280
N015 (  1,  1) [000320] ------------                    \--*  CNS_INT   long   8 field offset Fseq[Next] $280

***** BB03
STMT00026 (IL 0x0B3...0x0C3)
N005 ( 16, 16) [000109] -AC-----R---              *  ASG       ref    $404
N004 (  1,  1) [000108] D------N----              +--*  LCL_VAR   ref    V15 tmp8         d:2 $404
N003 ( 16, 16) [000107] --C---------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST $404
N002 (  2, 10) [000106] H----------- arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb3b058b8 token $1c3

***** BB03
STMT00028 (IL   ???...  ???)
N009 (  7,  7) [000113] -A-XG---R---              *  ASG       ref    <l:$27b, c:$40a>
N008 (  1,  1) [000112] D------N----              +--*  LCL_VAR   ref    V16 tmp9         d:2 <l:$279, c:$3ca>
N007 (  7,  7) [000105] ---XG-------              \--*  IND       ref    <l:$27b, c:$40a>
N006 (  5,  5) [000328] ---XG--N----                 \--*  ADD       byref  <l:$191, c:$199>
N004 (  4,  4) [000104] ---XG-------                    +--*  IND       ref    <l:$26d, c:$405>
N003 (  2,  2) [000330] -------N----                    |  \--*  ADD       byref  $181
N001 (  1,  1) [000103] ------------                    |     +--*  LCL_VAR   ref    V00 this         u:1 $80
N002 (  1,  1) [000329] ------------                    |     \--*  CNS_INT   long   8 field offset Fseq[_myList] $280
N005 (  1,  1) [000327] ------------                    \--*  CNS_INT   long   8 field offset Fseq[Head] $280

***** BB03
STMT00027 (IL   ???...  ???)
N003 ( 15,  8) [000111] --CXG-------              *  CALL      void   System.Object..ctor $VN.Void
N002 (  1,  1) [000110] ------------ this in rcx  \--*  LCL_VAR   ref    V15 tmp8         u:2 $404

***** BB03
STMT00029 (IL 0x0C3...  ???)
N006 (  6,  6) [000117] -A-XG-------              *  ASG       ref    $VN.Void
N004 (  4,  4) [000116] D--XG--N----              +--*  IND       ref    $404
N003 (  2,  2) [000333] -------N----              |  \--*  ADD       byref  <l:$19b, c:$19a>
N001 (  1,  1) [000114] ------------              |     +--*  LCL_VAR   ref    V16 tmp9         u:2 (last use) <l:$279, c:$3ca>
N002 (  1,  1) [000332] ------------              |     \--*  CNS_INT   long   16 field offset Fseq[Data] $281
N005 (  1,  1) [000115] ------------              \--*  LCL_VAR   ref    V15 tmp8         u:2 (last use) $404

------------ BB04 [0CA..0CD) -> BB06 (cond), preds={BB03} succs={BB05,BB06}

***** BB04
STMT00066 (IL   ???...  ???)
N005 (  8,  8) [000254] ----G-------              *  JTRUE     void  
N004 (  6,  6) [000255] J---G--N----              \--*  EQ        int    $344
N002 (  4,  4) [000334] ----G-------                 +--*  CAST      int <- bool <- int $343
N001 (  3,  2) [000256] ----G-------                 |  \--*  LCL_VAR   int   (AX) V05 loc3          $382
N003 (  1,  1) [000257] ------------                 \--*  CNS_INT   int    0 $40

------------ BB05 [0CD..0D4), preds={BB04} succs={BB06}

***** BB05
STMT00067 (IL   ???...  ???)
N003 ( 15,  7) [000258] --CXG-------              *  CALL      void   System.Threading.Monitor.Exit $VN.Void
N002 (  1,  1) [000259] ------------ arg0 in rcx  \--*  LCL_VAR   ref    V04 loc2         u:3 (last use) <l:$256, c:$b2>

------------ BB06 [0D4..0DD) -> BB02 (cond), preds={BB04,BB05} succs={BB07,BB02}

***** BB06
STMT00030 (IL 0x0D4...0x0D7)
N005 (  3,  3) [000122] -A------R---              *  ASG       int    $345
N004 (  1,  1) [000121] D------N----              +--*  LCL_VAR   int    V03 loc1         d:4 $345
N003 (  3,  3) [000120] ------------              \--*  ADD       int    $345
N001 (  1,  1) [000118] ------------                 +--*  LCL_VAR   int    V03 loc1         u:3 (last use) $380
N002 (  1,  1) [000119] ------------                 \--*  CNS_INT   int    1 $4e

***** BB06
STMT00017 (IL 0x0D8...0x0DB)
N004 (  5,  5) [000068] ------------              *  JTRUE     void  
N003 (  3,  3) [000067] J------N----              \--*  LT        int    $346
N001 (  1,  1) [000065] ------------                 +--*  LCL_VAR   int    V03 loc1         u:4 $345
N002 (  1,  1) [000066] ------------                 \--*  CNS_INT   int    10 $43

------------ BB07 [0DD..0F9), preds={BB01,BB06} succs={BB08}

***** BB07
STMT00034 (IL 0x0DD...0x0E2)
N003 ( 18,  8) [000133] -ACXG---R---              *  ASG       struct (copy) $VN.Void
N002 (  3,  2) [000131] D---G--N----              +--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  +--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
N001 ( 14,  5) [000130] --CXG-------              \--*  CALL      struct System.DateTime.get_Now $c4

***** BB07
STMT00035 (IL 0x0E3...0x0F4)
N013 ( 53, 36) [000139] --CXG-------              *  CALL      void   System.Console.WriteLine $VN.Void
N012 ( 39, 30) [000138] --CXG------- arg0 in rcx  \--*  CALL      ref    System.String.Concat $3da
N007 ( 17, 10) [000342] -ACXG---R-L- arg0 SETUP      +--*  ASG       ref    $3d5
N006 (  1,  1) [000341] D------N----                 |  +--*  LCL_VAR   ref    V23 tmp16        d:2 $3d5
N005 ( 17, 10) [000136] --CXG-------                 |  \--*  CALL      ref    System.DateTime.ToString $3d5
N004 (  3,  3) [000135] ------------ this in rcx     |     \--*  ADDR      byref  $145
N003 (  3,  2) [000134] ----G--N----                 |        \--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                     |        \--*    long   V02._dateData (offs=0x00) -> V17 tmp10         $c5
N009 (  1,  1) [000343] ------------ arg0 in rcx     +--*  LCL_VAR   ref    V23 tmp16        u:2 (last use) $3d5
N011 (  4, 12) [000340] #---G------- arg1 in rdx     \--*  IND       ref    $3d9
N010 (  2, 10) [000339] H-----------                    \--*  CNS_INT(h) long   0x75003200 "	 Waiting for list processing to complete..." $1cf

------------ BB08 [0F9..102), preds={BB07,BB12} succs={BB09}

***** BB08
STMT00036 (IL 0x0F9...0x0FF)
N006 (  4,  4) [000143] -A-XG---R---              *  ASG       ref    <l:$41c, c:$41b>
N005 (  1,  1) [000142] D------N----              +--*  LCL_VAR   ref    V04 loc2         d:2 <l:$41a, c:$3df>
N004 (  4,  4) [000141] ---XG-------              \--*  IND       ref    <l:$41c, c:$41b>
N003 (  2,  2) [000347] -------N----                 \--*  ADD       byref  $181
N001 (  1,  1) [000140] ------------                    +--*  LCL_VAR   ref    V00 this         u:1 $80
N002 (  1,  1) [000346] ------------                    \--*  CNS_INT   long   8 field offset Fseq[_myList] $280

***** BB08
STMT00037 (IL 0x100...0x101)
N003 (  5,  4) [000146] -A--G---R---              *  ASG       int    $40
N002 (  3,  2) [000145] D---G--N----              +--*  LCL_VAR   int   (AX) V05 loc3         
N001 (  1,  1) [000144] ------------              \--*  CNS_INT   int    0 $40

------------ BB09 [102..122) -> BB13 (cond), preds={BB08} succs={BB10,BB13}

***** BB09
STMT00038 (IL 0x102...0x120)
N005 ( 18, 11) [000150] --CXG-------              *  CALL      void   System.Threading.Monitor.Enter $VN.Void
N003 (  3,  3) [000149] ------------ arg1 in rdx  +--*  LCL_VAR_ADDR long   V05 loc3          $20a
N004 (  1,  1) [000147] ------------ arg0 in rcx  \--*  LCL_VAR   ref    V04 loc2         u:2 <l:$41a, c:$3df>

***** BB09
STMT00039 (IL 0x10A...  ???)
N016 ( 17, 17) [000158] ---XG-------              *  JTRUE     void  
N015 ( 15, 15) [000157] N--XG--N-U--              \--*  EQ        int    <l:$34a, c:$349>
N007 (  7,  7) [000153] ---XG-------                 +--*  IND       ref    <l:$42a, c:$429>
N006 (  5,  5) [000351] ---XG--N----                 |  \--*  ADD       byref  <l:$1a0, c:$19f>
N004 (  4,  4) [000152] ---XG-------                 |     +--*  IND       ref    <l:$420, c:$41f>
N003 (  2,  2) [000353] -------N----                 |     |  \--*  ADD       byref  $181
N001 (  1,  1) [000151] ------------                 |     |     +--*  LCL_VAR   ref    V00 this         u:1 $80
N002 (  1,  1) [000352] ------------                 |     |     \--*  CNS_INT   long   8 field offset Fseq[_myList] $280
N005 (  1,  1) [000350] ------------                 |     \--*  CNS_INT   long   8 field offset Fseq[Head] $280
N014 (  7,  7) [000156] ---XG-------                 \--*  IND       ref    <l:$435, c:$434>
N013 (  5,  5) [000355] ---XG--N----                    \--*  ADD       byref  <l:$1a4, c:$1a3>
N011 (  4,  4) [000155] ---XG-------                       +--*  IND       ref    <l:$420, c:$42b>
N010 (  2,  2) [000357] -------N----                       |  \--*  ADD       byref  $181
N008 (  1,  1) [000154] ------------                       |     +--*  LCL_VAR   ref    V00 this         u:1 $80
N009 (  1,  1) [000356] ------------                       |     \--*  CNS_INT   long   8 field offset Fseq[_myList] $280
N012 (  1,  1) [000354] ------------                       \--*  CNS_INT   long   16 field offset Fseq[Tail] $281

------------ BB10 [126..129) -> BB12 (cond), preds={BB09} succs={BB11,BB12}

***** BB10
STMT00069 (IL   ???...  ???)
N005 (  8,  8) [000261] ----G-------              *  JTRUE     void  
N004 (  6,  6) [000262] J---G--N----              \--*  EQ        int    $34e
N002 (  4,  4) [000358] ----G-------                 +--*  CAST      int <- bool <- int $34d
N001 (  3,  2) [000263] ----G-------                 |  \--*  LCL_VAR   int   (AX) V05 loc3          $384
N003 (  1,  1) [000264] ------------                 \--*  CNS_INT   int    0 $40

------------ BB11 [129..130), preds={BB10} succs={BB12}

***** BB11
STMT00070 (IL   ???...  ???)
N003 ( 15,  7) [000265] --CXG-------              *  CALL      void   System.Threading.Monitor.Exit $VN.Void
N002 (  1,  1) [000266] ------------ arg0 in rcx  \--*  LCL_VAR   ref    V04 loc2         u:2 (last use) <l:$41a, c:$3df>

------------ BB12 [130..139) -> BB08 (always), preds={BB10,BB11} succs={BB08}

***** BB12
STMT00040 (IL 0x130...0x137)
N003 ( 15,  7) [000160] --CXG-------              *  CALL      void   System.Threading.Thread.Sleep $VN.Void
N002 (  1,  1) [000159] ------------ arg0 in rcx  \--*  CNS_INT   int    100 $5b

------------ BB13 [???..???) -> BB30 (callf), preds={BB09} succs={BB30}

------------ BB14 [???..???) -> BB15 (ALWAYS), preds={BB32} succs={BB15}

------------ BB15 [139..17D), preds={BB14} succs={BB16}

***** BB15
STMT00041 (IL 0x139...0x13E)
N003 ( 18,  8) [000164] -ACXG---R---              *  ASG       struct (copy) $VN.Void
N002 (  3,  2) [000162] D---G--N----              +--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  +--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
N001 ( 14,  5) [000161] --CXG-------              \--*  CALL      struct System.DateTime.get_Now $c6

***** BB15
STMT00042 (IL 0x13F...0x178)
N013 ( 53, 36) [000170] --CXG-------              *  CALL      void   System.Console.WriteLine $VN.Void
N012 ( 39, 30) [000169] --CXG------- arg0 in rcx  \--*  CALL      ref    System.String.Concat $3f4
N007 ( 17, 10) [000367] -ACXG---R-L- arg0 SETUP      +--*  ASG       ref    $3ef
N006 (  1,  1) [000366] D------N----                 |  +--*  LCL_VAR   ref    V24 tmp17        d:2 $3ef
N005 ( 17, 10) [000167] --CXG-------                 |  \--*  CALL      ref    System.DateTime.ToString $3ef
N004 (  3,  3) [000166] ------------ this in rcx     |     \--*  ADDR      byref  $147
N003 (  3,  2) [000165] ----G--N----                 |        \--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                     |        \--*    long   V02._dateData (offs=0x00) -> V17 tmp10         $c7
N009 (  1,  1) [000368] ------------ arg0 in rcx     +--*  LCL_VAR   ref    V24 tmp17        u:2 (last use) $3ef
N011 (  4, 12) [000365] #---G------- arg1 in rdx     \--*  IND       ref    $3f3
N010 (  2, 10) [000364] H-----------                    \--*  CNS_INT(h) long   0x75003208 "	 Done.  Profiler is active, available options:" $1d3

***** BB15
STMT00043 (IL 0x155...  ???)
N004 ( 18, 18) [000172] --CXG-------              *  CALL      void   System.Console.WriteLine $VN.Void
N003 (  4, 12) [000372] #---G------- arg0 in rcx  \--*  IND       ref    $3f8
N002 (  2, 10) [000371] H-----------                 \--*  CNS_INT(h) long   0x75003210 "   Q = quit" $1d4

***** BB15
STMT00044 (IL 0x15F...  ???)
N004 ( 18, 18) [000174] --CXG-------              *  CALL      void   System.Console.WriteLine $VN.Void
N003 (  4, 12) [000375] #---G------- arg0 in rcx  \--*  IND       ref    $3fb
N002 (  2, 10) [000374] H-----------                 \--*  CNS_INT(h) long   0x75003218 "   H = heap snapshot" $1d5

***** BB15
STMT00045 (IL 0x169...  ???)
N004 ( 18, 18) [000176] --CXG-------              *  CALL      void   System.Console.WriteLine $VN.Void
N003 (  4, 12) [000378] #---G------- arg0 in rcx  \--*  IND       ref    $3fe
N002 (  2, 10) [000377] H-----------                 \--*  CNS_INT(h) long   0x75003220 "   G = GC (max gen)" $1d6

***** BB15
STMT00046 (IL 0x173...  ???)
N004 ( 18, 18) [000178] --CXG-------              *  CALL      void   System.Console.WriteLine $VN.Void
N003 (  4, 12) [000381] #---G------- arg0 in rcx  \--*  IND       ref    $4c1
N002 (  2, 10) [000380] H-----------                 \--*  CNS_INT(h) long   0x75003228 "   R = clear the running flag to stop the consumer thread" $1d7

------------ BB16 [???..???), preds={BB15,BB25} succs={BB17}

------------ BB17 [???..???), preds={BB16,BB24} succs={BB18}

------------ BB18 [???..???), preds={BB17,BB22} succs={BB19}

------------ BB19 [17D..18F) -> BB21 (cond), preds={BB18,BB20} succs={BB20,BB21}

***** BB19
STMT00048 (IL   ???...  ???)
N006 ( 18, 11) [000233] S-CXG-------              *  CALL      void   System.ConsolePal.ReadKey $VN.Void
N004 (  3,  3) [000235] ------------ arg0 in rcx  +--*  ADDR      long   $148
N003 (  3,  2) [000236] ----G--N----              |  \--*  LCL_VAR   struct<System.ConsoleKeyInfo, 12>(AX)(P) V06 loc4         
                                                  |  \--*    ushort V06._keyChar (offs=0x00) -> V18 tmp11        
                                                  |  \--*    int    V06._key (offs=0x04) -> V19 tmp12        
                                                  |  \--*    int    V06._mods (offs=0x08) -> V20 tmp13         $c8
N005 (  1,  1) [000232] ------------ arg1 in rdx  \--*  CNS_INT   int    0 $40

***** BB19
STMT00050 (IL   ???...  ???)
N004 (  7,  6) [000189] ----G-------              *  JTRUE     void  
N003 (  5,  4) [000188] N---G--N-U--              \--*  NE        int    $34f
N001 (  3,  2) [000240] ----G-------                 +--*  LCL_VAR   int   (AX) V19 tmp12         $385
N002 (  1,  1) [000187] ------------                 \--*  CNS_INT   int    71 $5e

------------ BB20 [18F..19B) -> BB19 (always), preds={BB19} succs={BB19}

***** BB20
STMT00061 (IL 0x18F...0x199)
N003 ( 28, 11) [000222] --CXG-------              *  CALL      void   System.GC.Collect $VN.Void
N002 ( 14,  5) [000221] --CXG------- arg0 in rcx  \--*  CALL      int    System.GC.get_MaxGeneration $305

------------ BB21 [19B..1A6) -> BB23 (cond), preds={BB19} succs={BB22,BB23}

***** BB21
STMT00052 (IL   ???...  ???)
N004 (  7,  6) [000196] ----G-------              *  JTRUE     void  
N003 (  5,  4) [000195] N---G--N-U--              \--*  NE        int    $350
N001 (  3,  2) [000244] ----G-------                 +--*  LCL_VAR   int   (AX) V19 tmp12         $385
N002 (  1,  1) [000194] ------------                 \--*  CNS_INT   int    72 $5f

------------ BB22 [1A6..1AD) -> BB18 (always), preds={BB21} succs={BB18}

***** BB22
STMT00060 (IL 0x1A6...0x1AB)
N001 ( 14,  5) [000220] --CXG-------              *  CALL      void   System.Diagnostics.Debugger.Break $VN.Void

------------ BB23 [1AD..1B8) -> BB25 (cond), preds={BB21} succs={BB24,BB25}

***** BB23
STMT00054 (IL   ???...  ???)
N004 (  7,  6) [000203] ----G-------              *  JTRUE     void  
N003 (  5,  4) [000202] N---G--N-U--              \--*  NE        int    $351
N001 (  3,  2) [000248] ----G-------                 +--*  LCL_VAR   int   (AX) V19 tmp12         $385
N002 (  1,  1) [000201] ------------                 \--*  CNS_INT   int    82 $60

------------ BB24 [1B8..1C1) -> BB17 (always), preds={BB23} succs={BB17}

***** BB24
STMT00059 (IL 0x1B8...0x1BA)
N006 (  7,  7) [000219] -A-XG-------              *  ASG       bool   $VN.Void
N004 (  5,  5) [000218] D--XG--N----              +--*  IND       bool   $40
N003 (  2,  2) [000387] -------N----              |  \--*  ADD       byref  $1a7
N001 (  1,  1) [000216] ------------              |     +--*  LCL_VAR   ref    V00 this         u:1 $80
N002 (  1,  1) [000386] ------------              |     \--*  CNS_INT   long   16 field offset Fseq[_running] $281
N005 (  1,  1) [000217] ------------              \--*  CNS_INT   int    0 $40

------------ BB25 [1C1..1CC) -> BB16 (cond), preds={BB23} succs={BB26,BB16}

***** BB25
STMT00056 (IL   ???...  ???)
N004 (  7,  6) [000210] ----G-------              *  JTRUE     void  
N003 (  5,  4) [000209] N---G--N-U--              \--*  NE        int    $352
N001 (  3,  2) [000252] ----G-------                 +--*  LCL_VAR   int   (AX) V19 tmp12         $385
N002 (  1,  1) [000208] ------------                 \--*  CNS_INT   int    81 $61

------------ BB26 [1CC..1D4) (return), preds={BB25} succs={}

***** BB26
STMT00057 (IL 0x1CC...0x1CE)
N006 (  7,  7) [000214] -A-XG-------              *  ASG       bool   $VN.Void
N004 (  5,  5) [000213] D--XG--N----              +--*  IND       bool   $40
N003 (  2,  2) [000389] -------N----              |  \--*  ADD       byref  $1a7
N001 (  1,  1) [000211] ------------              |     +--*  LCL_VAR   ref    V00 this         u:1 (last use) $80
N002 (  1,  1) [000388] ------------              |     \--*  CNS_INT   long   16 field offset Fseq[_running] $281
N005 (  1,  1) [000212] ------------              \--*  CNS_INT   int    0 $40

***** BB26
STMT00058 (IL 0x1D3...0x1D3)
N001 (  0,  0) [000215] ------------              *  RETURN    void   $442

------------ BB27 [0CA..0CD) -> BB29 (cond), preds={} succs={BB28,BB29}

***** BB27
STMT00031 (IL 0x0CA...0x0CB)
N005 (  8,  8) [000126] ----G-------              *  JTRUE     void  
N004 (  6,  6) [000125] J---G--N----              \--*  EQ        int    $342
N002 (  4,  4) [000336] ----G-------                 +--*  CAST      int <- bool <- int $341
N001 (  3,  2) [000123] ----G-------                 |  \--*  LCL_VAR   int   (AX) V05 loc3          $381
N003 (  1,  1) [000124] ------------                 \--*  CNS_INT   int    0 $40

------------ BB28 [0CD..0D3), preds={BB27} succs={BB29}

***** BB28
STMT00033 (IL 0x0CD...0x0CE)
N003 ( 15,  7) [000129] --CXG-------              *  CALL      void   System.Threading.Monitor.Exit $VN.Void
N002 (  1,  1) [000128] ------------ arg0 in rcx  \--*  LCL_VAR   ref    V04 loc2         u:3 (last use) <l:$256, c:$b2>

------------ BB29 [0D3..0D4) (finret), preds={BB27,BB28} succs={}

***** BB29
STMT00032 (IL 0x0D3...0x0D3)
N001 (  0,  0) [000127] ------------              *  RETFILT   void   $440

------------ BB30 [126..129) -> BB32 (cond), preds={BB13} succs={BB31,BB32}

***** BB30
STMT00062 (IL 0x126...0x127)
N005 (  8,  8) [000226] ----G-------              *  JTRUE     void  
N004 (  6,  6) [000225] J---G--N----              \--*  EQ        int    $34c
N002 (  4,  4) [000360] ----G-------                 +--*  CAST      int <- bool <- int $34b
N001 (  3,  2) [000223] ----G-------                 |  \--*  LCL_VAR   int   (AX) V05 loc3          $383
N003 (  1,  1) [000224] ------------                 \--*  CNS_INT   int    0 $40

------------ BB31 [129..12F), preds={BB30} succs={BB32}

***** BB31
STMT00064 (IL 0x129...0x12A)
N003 ( 15,  7) [000229] --CXG-------              *  CALL      void   System.Threading.Monitor.Exit $VN.Void
N002 (  1,  1) [000228] ------------ arg0 in rcx  \--*  LCL_VAR   ref    V04 loc2         u:2 (last use) <l:$41a, c:$3df>

------------ BB32 [12F..130) (finret), preds={BB30,BB31} succs={BB14}

***** BB32
STMT00063 (IL 0x12F...0x12F)
N001 (  0,  0) [000227] ------------              *  RETFILT   void   $441

-------------------------------------------------------------------------------------------------------------------

*************** Starting PHASE Optimize Valnum CSEs

CSE candidate #01, key=$26b in BB03, [cost= 4, size= 4]: 
N011 (  4,  4) CSE #01 (use)[000098] ---XG-------              *  IND       ref    <l:$26d, c:$26e>
N010 (  2,  2)              [000325] -------N----              \--*  ADD       byref  $181
N008 (  1,  1)              [000097] ------------                 +--*  LCL_VAR   ref    V00 this         u:1 $80
N009 (  1,  1)              [000324] ------------                 \--*  CNS_INT   long   8 field offset Fseq[_myList] $280

CSE candidate #02, key=$279 in BB03, [cost= 7, size= 7]: 
N007 (  7,  7) CSE #02 (use)[000105] ---XG-------              *  IND       ref    <l:$27b, c:$40a>
N006 (  5,  5)              [000328] ---XG--N----              \--*  ADD       byref  <l:$191, c:$199>
N004 (  4,  4) CSE #01 (use)[000104] ---XG-------                 +--*  IND       ref    <l:$26d, c:$405>
N003 (  2,  2)              [000330] -------N----                 |  \--*  ADD       byref  $181
N001 (  1,  1)              [000103] ------------                 |     +--*  LCL_VAR   ref    V00 this         u:1 $80
N002 (  1,  1)              [000329] ------------                 |     \--*  CNS_INT   long   8 field offset Fseq[_myList] $280
N005 (  1,  1)              [000327] ------------                 \--*  CNS_INT   long   8 field offset Fseq[Head] $280

CSE candidate #03, key=$41e in BB09, [cost= 4, size= 4]: 
N011 (  4,  4) CSE #03 (use)[000155] ---XG-------              *  IND       ref    <l:$420, c:$42b>
N010 (  2,  2)              [000357] -------N----              \--*  ADD       byref  $181
N008 (  1,  1)              [000154] ------------                 +--*  LCL_VAR   ref    V00 this         u:1 $80
N009 (  1,  1)              [000356] ------------                 \--*  CNS_INT   long   8 field offset Fseq[_myList] $280

Blocks that generate CSE def/uses
BB03 cseGen = 0000000000000005 CSE #01, CSE #02
BB09 cseGen = 0000000000000030 CSE #03.c

Performing DataFlow for ValnumCSE's

After performing DataFlow for ValnumCSE's
BB01 in gen out
0000000000000000 
0000000000000000 
0000000000000000 
BB33 in gen out
0000000000000000 
0000000000000000 
0000000000000000 
BB02 in gen out
0000000000000000 
0000000000000000 
0000000000000000 
BB03 in gen out
0000000000000000 
0000000000000005 CSE #01, CSE #02
0000000000000005 CSE #01, CSE #02
BB04 in gen out
0000000000000005 CSE #01, CSE #02
0000000000000000 
0000000000000005 CSE #01, CSE #02
BB05 in gen out
0000000000000005 CSE #01, CSE #02
0000000000000000 
0000000000000005 CSE #01, CSE #02
BB06 in gen out
0000000000000005 CSE #01, CSE #02
0000000000000000 
0000000000000005 CSE #01, CSE #02
BB07 in gen out
0000000000000000 
0000000000000000 
0000000000000000 
BB08 in gen out
0000000000000000 
0000000000000000 
0000000000000000 
BB09 in gen out
0000000000000000 
0000000000000030 CSE #03.c
0000000000000030 CSE #03.c
BB10 in gen out
0000000000000030 CSE #03.c
0000000000000000 
0000000000000030 CSE #03.c
BB11 in gen out
0000000000000030 CSE #03.c
0000000000000000 
0000000000000010 CSE #03
BB12 in gen out
0000000000000010 CSE #03
0000000000000000 
0000000000000010 CSE #03
BB13 in gen out
0000000000000030 CSE #03.c
0000000000000000 
0000000000000030 CSE #03.c
BB14 in gen out
0000000000000000 
0000000000000000 
0000000000000000 
BB15 in gen out
0000000000000000 
0000000000000000 
0000000000000000 
BB16 in gen out
0000000000000000 
0000000000000000 
0000000000000000 
BB17 in gen out
0000000000000000 
0000000000000000 
0000000000000000 
BB18 in gen out
0000000000000000 
0000000000000000 
0000000000000000 
BB19 in gen out
0000000000000000 
0000000000000000 
0000000000000000 
BB20 in gen out
0000000000000000 
0000000000000000 
0000000000000000 
BB21 in gen out
0000000000000000 
0000000000000000 
0000000000000000 
BB22 in gen out
0000000000000000 
0000000000000000 
0000000000000000 
BB23 in gen out
0000000000000000 
0000000000000000 
0000000000000000 
BB24 in gen out
0000000000000000 
0000000000000000 
0000000000000000 
BB25 in gen out
0000000000000000 
0000000000000000 
0000000000000000 
BB26 in gen out
0000000000000000 
0000000000000000 
0000000000000000 
BB27 in gen out
0000000000000000 
0000000000000000 
0000000000000000 
BB28 in gen out
0000000000000000 
0000000000000000 
0000000000000000 
BB29 in gen out
0000000000000000 
0000000000000000 
0000000000000000 
BB30 in gen out
0000000000000000 
0000000000000000 
0000000000000000 
BB31 in gen out
0000000000000000 
0000000000000000 
0000000000000000 
BB32 in gen out
0000000000000000 
0000000000000000 
0000000000000000 

Labeling the CSEs with Use/Def information
BB03 [000096] Def of CSE #01 [weight=8   ]
BB03 [000098] Use of CSE #01 [weight=8   ]
BB03 [000100] Def of CSE #02 [weight=8   ]
BB03 [000104] Use of CSE #01 [weight=8   ] *** Now Live Across Call ***
BB03 [000105] Use of CSE #02 [weight=8   ] *** Now Live Across Call ***
BB09 [000152] Def of CSE #03 [weight=8   ]
BB09 [000155] Use of CSE #03 [weight=8   ]

************ Trees at start of optValnumCSE_Heuristic()

------------ BB01 [000..072) -> BB07 (cond), preds={} succs={BB33,BB07}

***** BB01
STMT00000 (IL 0x000...0x005)
N003 ( 18,  8)              [000003] -ACXG---R---              *  ASG       struct (copy) $VN.Void
N002 (  3,  2)              [000001] D---G--N----              +--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  +--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
N001 ( 14,  5)              [000000] --CXG-------              \--*  CALL      struct System.DateTime.get_Now $c0

***** BB01
STMT00001 (IL 0x006...0x022)
N013 ( 53, 36)              [000009] --CXG-------              *  CALL      void   System.Console.WriteLine $VN.Void
N012 ( 39, 30)              [000008] --CXG------- arg0 in rcx  \--*  CALL      ref    System.String.Concat $89
N007 ( 17, 10)              [000272] -ACXG---R-L- arg0 SETUP      +--*  ASG       ref    $84
N006 (  1,  1)              [000271] D------N----                 |  +--*  LCL_VAR   ref    V21 tmp14        d:2 $84
N005 ( 17, 10)              [000006] --CXG-------                 |  \--*  CALL      ref    System.DateTime.ToString $84
N004 (  3,  3)              [000005] ------------ this in rcx     |     \--*  ADDR      byref  $141
N003 (  3,  2)              [000004] ----G--N----                 |        \--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                     |        \--*    long   V02._dateData (offs=0x00) -> V17 tmp10         $c1
N009 (  1,  1)              [000273] ------------ arg0 in rcx     +--*  LCL_VAR   ref    V21 tmp14        u:2 (last use) $84
N011 (  4, 12)              [000270] #---G------- arg1 in rdx     \--*  IND       ref    $88
N010 (  2, 10)              [000269] H-----------                    \--*  CNS_INT(h) long   0x750031F0 "	 Created list" $1c0

***** BB01
STMT00002 (IL 0x01C...  ???)
N005 ( 16, 16)              [000014] -AC-----R---              *  ASG       ref    $240
N004 (  1,  1)              [000013] D------N----              +--*  LCL_VAR   ref    V08 tmp1         d:2 $240
N003 ( 16, 16)              [000012] --C---------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST $240
N002 (  2, 10)              [000011] H----------- arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb3ee2350 method $1c1

***** BB01
STMT00003 (IL   ???...  ???)
N003 ( 15,  8)              [000016] --CXG-------              *  CALL      void   FalseLeakRepro.List..ctor $VN.Void
N002 (  1,  1)              [000015] ------------ this in rcx  \--*  LCL_VAR   ref    V08 tmp1         u:2 $240

***** BB01
STMT00004 (IL 0x022...  ???)
N006 (  6,  6)              [000019] -A-XG-------              *  ASG       ref    $VN.Void
N004 (  4,  4)              [000018] D--XG--N----              +--*  IND       ref    $240
N003 (  2,  2)              [000279] -------N----              |  \--*  ADD       byref  $181
N001 (  1,  1)              [000010] ------------              |     +--*  LCL_VAR   ref    V00 this         u:1 $80
N002 (  1,  1)              [000278] ------------              |     \--*  CNS_INT   long   8 field offset Fseq[_myList] $280
N005 (  1,  1)              [000017] ------------              \--*  LCL_VAR   ref    V08 tmp1         u:2 (last use) $240

***** BB01
STMT00005 (IL 0x027...0x037)
N005 ( 16, 16)              [000026] -AC-----R---              *  ASG       ref    $243
N004 (  1,  1)              [000025] D------N----              +--*  LCL_VAR   ref    V09 tmp2         d:2 $243
N003 ( 16, 16)              [000024] --C---------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST $243
N002 (  2, 10)              [000023] H----------- arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb3b058b8 token $1c3

***** BB01
STMT00007 (IL   ???...  ???)
N009 (  7,  7)              [000030] -A-XG---R---              *  ASG       ref    <l:$250, c:$24f>
N008 (  1,  1)              [000029] D------N----              +--*  LCL_VAR   ref    V10 tmp3         d:2 <l:$248, c:$94>
N007 (  7,  7)              [000022] ---XG-------              \--*  IND       ref    <l:$250, c:$24f>
N006 (  5,  5)              [000282] ---XG--N----                 \--*  ADD       byref  <l:$185, c:$184>
N004 (  4,  4)              [000021] ---XG-------                    +--*  IND       ref    <l:$246, c:$245>
N003 (  2,  2)              [000284] -------N----                    |  \--*  ADD       byref  $181
N001 (  1,  1)              [000020] ------------                    |     +--*  LCL_VAR   ref    V00 this         u:1 $80
N002 (  1,  1)              [000283] ------------                    |     \--*  CNS_INT   long   8 field offset Fseq[_myList] $280
N005 (  1,  1)              [000281] ------------                    \--*  CNS_INT   long   8 field offset Fseq[Head] $280

***** BB01
STMT00006 (IL   ???...  ???)
N003 ( 15,  8)              [000028] --CXG-------              *  CALL      void   System.Object..ctor $VN.Void
N002 (  1,  1)              [000027] ------------ this in rcx  \--*  LCL_VAR   ref    V09 tmp2         u:2 $243

***** BB01
STMT00008 (IL 0x037...  ???)
N006 (  6,  6)              [000034] -A-XG-------              *  ASG       ref    $VN.Void
N004 (  4,  4)              [000033] D--XG--N----              +--*  IND       ref    $243
N003 (  2,  2)              [000287] -------N----              |  \--*  ADD       byref  <l:$187, c:$186>
N001 (  1,  1)              [000031] ------------              |     +--*  LCL_VAR   ref    V10 tmp3         u:2 (last use) <l:$248, c:$94>
N002 (  1,  1)              [000286] ------------              |     \--*  CNS_INT   long   16 field offset Fseq[Data] $281
N005 (  1,  1)              [000032] ------------              \--*  LCL_VAR   ref    V09 tmp2         u:2 (last use) $243

***** BB01
STMT00009 (IL 0x03C...0x057)
N005 ( 16, 16)              [000040] -AC-----R---              *  ASG       ref    $253
N004 (  1,  1)              [000039] D------N----              +--*  LCL_VAR   ref    V11 tmp4         d:2 $253
N003 ( 16, 16)              [000038] --C---------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST $253
N002 (  2, 10)              [000037] H----------- arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb3ee6200 token $1c6

***** BB01
STMT00010 (IL   ???...  ???)
N007 ( 18, 21)              [000042] --CXG-------              *  CALL      void   System.MulticastDelegate.CtorClosed $VN.Void
N004 (  1,  1)              [000041] ------------ this in rcx  +--*  LCL_VAR   ref    V11 tmp4         u:2 $253
N005 (  1,  1)              [000035] ------------ arg1 in rdx  +--*  LCL_VAR   ref    V00 this         u:1 $80
N006 (  2, 10)              [000036] H----------- arg2 in r8   \--*  CNS_INT(h) long   0x7ffdb3b213f8 ftn $1c7

***** BB01
STMT00011 (IL 0x048...  ???)
N005 ( 16, 16)              [000047] -AC-----R---              *  ASG       ref    $254
N004 (  1,  1)              [000046] D------N----              +--*  LCL_VAR   ref    V12 tmp5         d:2 $254
N003 ( 16, 16)              [000045] --C---------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWFAST $254
N002 (  2, 10)              [000044] H----------- arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb3c84e80 token $1c8

***** BB01
STMT00012 (IL   ???...  ???)
N005 ( 16, 10)              [000049] --CXG-------              *  CALL      void   System.Threading.Thread..ctor $VN.Void
N003 (  1,  1)              [000048] ------------ this in rcx  +--*  LCL_VAR   ref    V12 tmp5         u:2 $254
N004 (  1,  1)              [000043] ------------ arg1 in rdx  \--*  LCL_VAR   ref    V11 tmp4         u:2 (last use) $253

***** BB01
STMT00013 (IL 0x04D...  ???)
N003 ( 15,  8)              [000051] --CXG-------              *  CALL nullcheck void   System.Threading.Thread.Start $VN.Void
N002 (  1,  1)              [000050] ------------ this in rcx  \--*  LCL_VAR   ref    V12 tmp5         u:2 (last use) $254

***** BB01
STMT00014 (IL 0x052...  ???)
N003 ( 18,  8)              [000055] -ACXG---R---              *  ASG       struct (copy) $VN.Void
N002 (  3,  2)              [000053] D---G--N----              +--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  +--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
N001 ( 14,  5)              [000052] --CXG-------              \--*  CALL      struct System.DateTime.get_Now $c2

***** BB01
STMT00015 (IL 0x058...0x06F)
N013 ( 53, 36)              [000061] --CXG-------              *  CALL      void   System.Console.WriteLine $VN.Void
N012 ( 39, 30)              [000060] --CXG------- arg0 in rcx  \--*  CALL      ref    System.String.Concat $ad
N007 ( 17, 10)              [000300] -ACXG---R-L- arg0 SETUP      +--*  ASG       ref    $a8
N006 (  1,  1)              [000299] D------N----                 |  +--*  LCL_VAR   ref    V22 tmp15        d:2 $a8
N005 ( 17, 10)              [000058] --CXG-------                 |  \--*  CALL      ref    System.DateTime.ToString $a8
N004 (  3,  3)              [000057] ------------ this in rcx     |     \--*  ADDR      byref  $143
N003 (  3,  2)              [000056] ----G--N----                 |        \--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                     |        \--*    long   V02._dateData (offs=0x00) -> V17 tmp10         $c3
N009 (  1,  1)              [000301] ------------ arg0 in rcx     +--*  LCL_VAR   ref    V22 tmp15        u:2 (last use) $a8
N011 (  4, 12)              [000298] #---G------- arg1 in rdx     \--*  IND       ref    $ac
N010 (  2, 10)              [000297] H-----------                    \--*  CNS_INT(h) long   0x750031F8 "	 Consumer thread started, adding items..." $1c9

***** BB01
STMT00016 (IL 0x06E...  ???)
N003 (  1,  3)              [000064] -A------R---              *  ASG       int    $40
N002 (  1,  1)              [000063] D------N----              +--*  LCL_VAR   int    V03 loc1         d:2 $40
N001 (  1,  1)              [000062] ------------              \--*  CNS_INT   int    0 $40

***** BB01
STMT00072 (IL 0x0D8...  ???)
N004 (  5,  5)              [000390] ------------              *  JTRUE     void  
N003 (  3,  3)              [000391] J------N----              \--*  GE        int    $40
N001 (  1,  1)              [000392] ------------                 +--*  LCL_VAR   int    V03 loc1         u:2 $40
N002 (  1,  1)              [000393] ------------                 \--*  CNS_INT   int    10 $43

------------ BB33 [072..???), preds={BB01} succs={BB02}

***** BB33
STMT00075 (IL   ???...  ???)
N003 (  2, 10)              [000404] ------------              *  COMMA     void  
N001 (  2, 10)              [000402] H------H----              +--*  CNS_INT(h) long   0x7ffdb3ee58a8 method $1ca
N002 (  0,  0)              [000403] ------------              \--*  NOP       void  

***** BB33
STMT00076 (IL   ???...  ???)
N003 (  2, 10)              [000407] ------------              *  COMMA     void  
N001 (  2, 10)              [000405] H------H----              +--*  CNS_INT(h) long   0x7ffdb3b058b8 token $1c3
N002 (  0,  0)              [000406] ------------              \--*  NOP       void  

------------ BB02 [072..07B), preds={BB06,BB33} succs={BB03}

***** BB02
STMT00074 (IL   ???...  ???)
N005 (  0,  0)              [000399] -A------R---              *  ASG       int   
N004 (  0,  0)              [000397] D------N----              +--*  LCL_VAR   int    V03 loc1         d:3
N003 (  0,  0)              [000398] ------------              \--*  PHI       int   
N001 (  0,  0)              [000401] ------------ pred BB06       +--*  PHI_ARG   int    V03 loc1         u:4
N002 (  0,  0)              [000400] ------------ pred BB33       \--*  PHI_ARG   int    V03 loc1         u:2 $40

***** BB02
STMT00018 (IL 0x072...0x078)
N006 (  4,  4)              [000072] -A-XG---R---              *  ASG       ref    <l:$258, c:$257>
N005 (  1,  1)              [000071] D------N----              +--*  LCL_VAR   ref    V04 loc2         d:3 <l:$256, c:$b2>
N004 (  4,  4)              [000070] ---XG-------              \--*  IND       ref    <l:$258, c:$257>
N003 (  2,  2)              [000305] -------N----                 \--*  ADD       byref  $181
N001 (  1,  1)              [000069] ------------                    +--*  LCL_VAR   ref    V00 this         u:1 $80
N002 (  1,  1)              [000304] ------------                    \--*  CNS_INT   long   8 field offset Fseq[_myList] $280

***** BB02
STMT00019 (IL 0x079...0x07A)
N003 (  5,  4)              [000075] -A--G---R---              *  ASG       int    $40
N002 (  3,  2)              [000074] D---G--N----              +--*  LCL_VAR   int   (AX) V05 loc3         
N001 (  1,  1)              [000073] ------------              \--*  CNS_INT   int    0 $40

------------ BB03 [07B..0CA), preds={BB02} succs={BB04}

***** BB03
STMT00020 (IL 0x07B...0x093)
N005 ( 18, 11)              [000079] --CXG-------              *  CALL      void   System.Threading.Monitor.Enter $VN.Void
N003 (  3,  3)              [000078] ------------ arg1 in rdx  +--*  LCL_VAR_ADDR long   V05 loc3          $206
N004 (  1,  1)              [000076] ------------ arg0 in rcx  \--*  LCL_VAR   ref    V04 loc2         u:3 <l:$256, c:$b2>

***** BB03
STMT00021 (IL 0x083...  ???)
N005 ( 16, 16)              [000086] -AC-----R---              *  ASG       ref    $259
N004 (  1,  1)              [000085] D------N----              +--*  LCL_VAR   ref    V13 tmp6         d:2 $259
N003 ( 16, 16)              [000084] --C---------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST $259
N002 (  2, 10)              [000083] H----------- arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb3ee58a8 method $1ca

***** BB03
STMT00023 (IL   ???...  ???)
N009 (  7,  7)              [000090] -A-XG---R---              *  ASG       ref    <l:$267, c:$266>
N008 (  1,  1)              [000089] D------N----              +--*  LCL_VAR   ref    V14 tmp7         d:2 <l:$25f, c:$b9>
N007 (  7,  7)              [000082] ---XG-------              \--*  IND       ref    <l:$267, c:$266>
N006 (  5,  5)              [000310] ---XG--N----                 \--*  ADD       byref  <l:$18b, c:$18a>
N004 (  4,  4)              [000081] ---XG-------                    +--*  IND       ref    <l:$25d, c:$25c>
N003 (  2,  2)              [000312] -------N----                    |  \--*  ADD       byref  $181
N001 (  1,  1)              [000080] ------------                    |     +--*  LCL_VAR   ref    V00 this         u:1 $80
N002 (  1,  1)              [000311] ------------                    |     \--*  CNS_INT   long   8 field offset Fseq[_myList] $280
N005 (  1,  1)              [000309] ------------                    \--*  CNS_INT   long   8 field offset Fseq[Head] $280

***** BB03
STMT00065 (IL   ???...  ???)
N003 ( 15,  8)              [000230] --CXG-------              *  CALL      void   System.Object..ctor $VN.Void
N002 (  1,  1)              [000087] ------------ this in rcx  \--*  LCL_VAR   ref    V13 tmp6         u:2 $259

***** BB03
STMT00024 (IL 0x093...  ???)
N006 (  6,  6)              [000094] -A-XG-------              *  ASG       ref    $VN.Void
N004 (  4,  4)              [000093] D--XG--N----              +--*  IND       ref    $259
N003 (  2,  2)              [000315] -------N----              |  \--*  ADD       byref  <l:$18d, c:$18c>
N001 (  1,  1)              [000091] ------------              |     +--*  LCL_VAR   ref    V14 tmp7         u:2 (last use) <l:$25f, c:$b9>
N002 (  1,  1)              [000314] ------------              |     \--*  CNS_INT   long   8 field offset Fseq[Next] $280
N005 (  1,  1)              [000092] ------------              \--*  LCL_VAR   ref    V13 tmp6         u:2 (last use) $259

***** BB03
STMT00025 (IL 0x098...0x0AE)
N018 ( 18, 18)              [000102] -A-XG-------              *  ASG       ref    $VN.Void
N007 (  7,  7)              [000101] D--XG--N----              +--*  IND       ref    $279
N006 (  5,  5)              [000317] ---XG--N----              |  \--*  ADD       byref  <l:$191, c:$190>
N004 (  4,  4) CSE #01 (def)[000096] ---XG-------              |     +--*  IND       ref    <l:$26d, c:$26c>
N003 (  2,  2)              [000319] -------N----              |     |  \--*  ADD       byref  $181
N001 (  1,  1)              [000095] ------------              |     |     +--*  LCL_VAR   ref    V00 this         u:1 $80
N002 (  1,  1)              [000318] ------------              |     |     \--*  CNS_INT   long   8 field offset Fseq[_myList] $280
N005 (  1,  1)              [000316] ------------              |     \--*  CNS_INT   long   8 field offset Fseq[Head] $280
N017 ( 10, 10) CSE #02 (def)[000100] ---XG-------              \--*  IND       ref    <l:$403, c:$402>
N016 (  8,  8)              [000321] ---XG--N----                 \--*  ADD       byref  <l:$197, c:$196>
N014 (  7,  7)              [000099] ---XG-------                    +--*  IND       ref    <l:$278, c:$277>
N013 (  5,  5)              [000323] ---XG--N----                    |  \--*  ADD       byref  <l:$191, c:$193>
N011 (  4,  4) CSE #01 (use)[000098] ---XG-------                    |     +--*  IND       ref    <l:$26d, c:$26e>
N010 (  2,  2)              [000325] -------N----                    |     |  \--*  ADD       byref  $181
N008 (  1,  1)              [000097] ------------                    |     |     +--*  LCL_VAR   ref    V00 this         u:1 $80
N009 (  1,  1)              [000324] ------------                    |     |     \--*  CNS_INT   long   8 field offset Fseq[_myList] $280
N012 (  1,  1)              [000322] ------------                    |     \--*  CNS_INT   long   8 field offset Fseq[Head] $280
N015 (  1,  1)              [000320] ------------                    \--*  CNS_INT   long   8 field offset Fseq[Next] $280

***** BB03
STMT00026 (IL 0x0B3...0x0C3)
N005 ( 16, 16)              [000109] -AC-----R---              *  ASG       ref    $404
N004 (  1,  1)              [000108] D------N----              +--*  LCL_VAR   ref    V15 tmp8         d:2 $404
N003 ( 16, 16)              [000107] --C---------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST $404
N002 (  2, 10)              [000106] H----------- arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb3b058b8 token $1c3

***** BB03
STMT00028 (IL   ???...  ???)
N009 (  7,  7)              [000113] -A-XG---R---              *  ASG       ref    <l:$27b, c:$40a>
N008 (  1,  1)              [000112] D------N----              +--*  LCL_VAR   ref    V16 tmp9         d:2 <l:$279, c:$3ca>
N007 (  7,  7) CSE #02 (use)[000105] ---XG-------              \--*  IND       ref    <l:$27b, c:$40a>
N006 (  5,  5)              [000328] ---XG--N----                 \--*  ADD       byref  <l:$191, c:$199>
N004 (  4,  4) CSE #01 (use)[000104] ---XG-------                    +--*  IND       ref    <l:$26d, c:$405>
N003 (  2,  2)              [000330] -------N----                    |  \--*  ADD       byref  $181
N001 (  1,  1)              [000103] ------------                    |     +--*  LCL_VAR   ref    V00 this         u:1 $80
N002 (  1,  1)              [000329] ------------                    |     \--*  CNS_INT   long   8 field offset Fseq[_myList] $280
N005 (  1,  1)              [000327] ------------                    \--*  CNS_INT   long   8 field offset Fseq[Head] $280

***** BB03
STMT00027 (IL   ???...  ???)
N003 ( 15,  8)              [000111] --CXG-------              *  CALL      void   System.Object..ctor $VN.Void
N002 (  1,  1)              [000110] ------------ this in rcx  \--*  LCL_VAR   ref    V15 tmp8         u:2 $404

***** BB03
STMT00029 (IL 0x0C3...  ???)
N006 (  6,  6)              [000117] -A-XG-------              *  ASG       ref    $VN.Void
N004 (  4,  4)              [000116] D--XG--N----              +--*  IND       ref    $404
N003 (  2,  2)              [000333] -------N----              |  \--*  ADD       byref  <l:$19b, c:$19a>
N001 (  1,  1)              [000114] ------------              |     +--*  LCL_VAR   ref    V16 tmp9         u:2 (last use) <l:$279, c:$3ca>
N002 (  1,  1)              [000332] ------------              |     \--*  CNS_INT   long   16 field offset Fseq[Data] $281
N005 (  1,  1)              [000115] ------------              \--*  LCL_VAR   ref    V15 tmp8         u:2 (last use) $404

------------ BB04 [0CA..0CD) -> BB06 (cond), preds={BB03} succs={BB05,BB06}

***** BB04
STMT00066 (IL   ???...  ???)
N005 (  8,  8)              [000254] ----G-------              *  JTRUE     void  
N004 (  6,  6)              [000255] J---G--N----              \--*  EQ        int    $344
N002 (  4,  4)              [000334] ----G-------                 +--*  CAST      int <- bool <- int $343
N001 (  3,  2)              [000256] ----G-------                 |  \--*  LCL_VAR   int   (AX) V05 loc3          $382
N003 (  1,  1)              [000257] ------------                 \--*  CNS_INT   int    0 $40

------------ BB05 [0CD..0D4), preds={BB04} succs={BB06}

***** BB05
STMT00067 (IL   ???...  ???)
N003 ( 15,  7)              [000258] --CXG-------              *  CALL      void   System.Threading.Monitor.Exit $VN.Void
N002 (  1,  1)              [000259] ------------ arg0 in rcx  \--*  LCL_VAR   ref    V04 loc2         u:3 (last use) <l:$256, c:$b2>

------------ BB06 [0D4..0DD) -> BB02 (cond), preds={BB04,BB05} succs={BB07,BB02}

***** BB06
STMT00030 (IL 0x0D4...0x0D7)
N005 (  3,  3)              [000122] -A------R---              *  ASG       int    $345
N004 (  1,  1)              [000121] D------N----              +--*  LCL_VAR   int    V03 loc1         d:4 $345
N003 (  3,  3)              [000120] ------------              \--*  ADD       int    $345
N001 (  1,  1)              [000118] ------------                 +--*  LCL_VAR   int    V03 loc1         u:3 (last use) $380
N002 (  1,  1)              [000119] ------------                 \--*  CNS_INT   int    1 $4e

***** BB06
STMT00017 (IL 0x0D8...0x0DB)
N004 (  5,  5)              [000068] ------------              *  JTRUE     void  
N003 (  3,  3)              [000067] J------N----              \--*  LT        int    $346
N001 (  1,  1)              [000065] ------------                 +--*  LCL_VAR   int    V03 loc1         u:4 $345
N002 (  1,  1)              [000066] ------------                 \--*  CNS_INT   int    10 $43

------------ BB07 [0DD..0F9), preds={BB01,BB06} succs={BB08}

***** BB07
STMT00034 (IL 0x0DD...0x0E2)
N003 ( 18,  8)              [000133] -ACXG---R---              *  ASG       struct (copy) $VN.Void
N002 (  3,  2)              [000131] D---G--N----              +--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  +--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
N001 ( 14,  5)              [000130] --CXG-------              \--*  CALL      struct System.DateTime.get_Now $c4

***** BB07
STMT00035 (IL 0x0E3...0x0F4)
N013 ( 53, 36)              [000139] --CXG-------              *  CALL      void   System.Console.WriteLine $VN.Void
N012 ( 39, 30)              [000138] --CXG------- arg0 in rcx  \--*  CALL      ref    System.String.Concat $3da
N007 ( 17, 10)              [000342] -ACXG---R-L- arg0 SETUP      +--*  ASG       ref    $3d5
N006 (  1,  1)              [000341] D------N----                 |  +--*  LCL_VAR   ref    V23 tmp16        d:2 $3d5
N005 ( 17, 10)              [000136] --CXG-------                 |  \--*  CALL      ref    System.DateTime.ToString $3d5
N004 (  3,  3)              [000135] ------------ this in rcx     |     \--*  ADDR      byref  $145
N003 (  3,  2)              [000134] ----G--N----                 |        \--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                     |        \--*    long   V02._dateData (offs=0x00) -> V17 tmp10         $c5
N009 (  1,  1)              [000343] ------------ arg0 in rcx     +--*  LCL_VAR   ref    V23 tmp16        u:2 (last use) $3d5
N011 (  4, 12)              [000340] #---G------- arg1 in rdx     \--*  IND       ref    $3d9
N010 (  2, 10)              [000339] H-----------                    \--*  CNS_INT(h) long   0x75003200 "	 Waiting for list processing to complete..." $1cf

------------ BB08 [0F9..102), preds={BB07,BB12} succs={BB09}

***** BB08
STMT00036 (IL 0x0F9...0x0FF)
N006 (  4,  4)              [000143] -A-XG---R---              *  ASG       ref    <l:$41c, c:$41b>
N005 (  1,  1)              [000142] D------N----              +--*  LCL_VAR   ref    V04 loc2         d:2 <l:$41a, c:$3df>
N004 (  4,  4)              [000141] ---XG-------              \--*  IND       ref    <l:$41c, c:$41b>
N003 (  2,  2)              [000347] -------N----                 \--*  ADD       byref  $181
N001 (  1,  1)              [000140] ------------                    +--*  LCL_VAR   ref    V00 this         u:1 $80
N002 (  1,  1)              [000346] ------------                    \--*  CNS_INT   long   8 field offset Fseq[_myList] $280

***** BB08
STMT00037 (IL 0x100...0x101)
N003 (  5,  4)              [000146] -A--G---R---              *  ASG       int    $40
N002 (  3,  2)              [000145] D---G--N----              +--*  LCL_VAR   int   (AX) V05 loc3         
N001 (  1,  1)              [000144] ------------              \--*  CNS_INT   int    0 $40

------------ BB09 [102..122) -> BB13 (cond), preds={BB08} succs={BB10,BB13}

***** BB09
STMT00038 (IL 0x102...0x120)
N005 ( 18, 11)              [000150] --CXG-------              *  CALL      void   System.Threading.Monitor.Enter $VN.Void
N003 (  3,  3)              [000149] ------------ arg1 in rdx  +--*  LCL_VAR_ADDR long   V05 loc3          $20a
N004 (  1,  1)              [000147] ------------ arg0 in rcx  \--*  LCL_VAR   ref    V04 loc2         u:2 <l:$41a, c:$3df>

***** BB09
STMT00039 (IL 0x10A...  ???)
N016 ( 17, 17)              [000158] ---XG-------              *  JTRUE     void  
N015 ( 15, 15)              [000157] N--XG--N-U--              \--*  EQ        int    <l:$34a, c:$349>
N007 (  7,  7)              [000153] ---XG-------                 +--*  IND       ref    <l:$42a, c:$429>
N006 (  5,  5)              [000351] ---XG--N----                 |  \--*  ADD       byref  <l:$1a0, c:$19f>
N004 (  4,  4) CSE #03 (def)[000152] ---XG-------                 |     +--*  IND       ref    <l:$420, c:$41f>
N003 (  2,  2)              [000353] -------N----                 |     |  \--*  ADD       byref  $181
N001 (  1,  1)              [000151] ------------                 |     |     +--*  LCL_VAR   ref    V00 this         u:1 $80
N002 (  1,  1)              [000352] ------------                 |     |     \--*  CNS_INT   long   8 field offset Fseq[_myList] $280
N005 (  1,  1)              [000350] ------------                 |     \--*  CNS_INT   long   8 field offset Fseq[Head] $280
N014 (  7,  7)              [000156] ---XG-------                 \--*  IND       ref    <l:$435, c:$434>
N013 (  5,  5)              [000355] ---XG--N----                    \--*  ADD       byref  <l:$1a4, c:$1a3>
N011 (  4,  4) CSE #03 (use)[000155] ---XG-------                       +--*  IND       ref    <l:$420, c:$42b>
N010 (  2,  2)              [000357] -------N----                       |  \--*  ADD       byref  $181
N008 (  1,  1)              [000154] ------------                       |     +--*  LCL_VAR   ref    V00 this         u:1 $80
N009 (  1,  1)              [000356] ------------                       |     \--*  CNS_INT   long   8 field offset Fseq[_myList] $280
N012 (  1,  1)              [000354] ------------                       \--*  CNS_INT   long   16 field offset Fseq[Tail] $281

------------ BB10 [126..129) -> BB12 (cond), preds={BB09} succs={BB11,BB12}

***** BB10
STMT00069 (IL   ???...  ???)
N005 (  8,  8)              [000261] ----G-------              *  JTRUE     void  
N004 (  6,  6)              [000262] J---G--N----              \--*  EQ        int    $34e
N002 (  4,  4)              [000358] ----G-------                 +--*  CAST      int <- bool <- int $34d
N001 (  3,  2)              [000263] ----G-------                 |  \--*  LCL_VAR   int   (AX) V05 loc3          $384
N003 (  1,  1)              [000264] ------------                 \--*  CNS_INT   int    0 $40

------------ BB11 [129..130), preds={BB10} succs={BB12}

***** BB11
STMT00070 (IL   ???...  ???)
N003 ( 15,  7)              [000265] --CXG-------              *  CALL      void   System.Threading.Monitor.Exit $VN.Void
N002 (  1,  1)              [000266] ------------ arg0 in rcx  \--*  LCL_VAR   ref    V04 loc2         u:2 (last use) <l:$41a, c:$3df>

------------ BB12 [130..139) -> BB08 (always), preds={BB10,BB11} succs={BB08}

***** BB12
STMT00040 (IL 0x130...0x137)
N003 ( 15,  7)              [000160] --CXG-------              *  CALL      void   System.Threading.Thread.Sleep $VN.Void
N002 (  1,  1)              [000159] ------------ arg0 in rcx  \--*  CNS_INT   int    100 $5b

------------ BB13 [???..???) -> BB30 (callf), preds={BB09} succs={BB30}

------------ BB14 [???..???) -> BB15 (ALWAYS), preds={BB32} succs={BB15}

------------ BB15 [139..17D), preds={BB14} succs={BB16}

***** BB15
STMT00041 (IL 0x139...0x13E)
N003 ( 18,  8)              [000164] -ACXG---R---              *  ASG       struct (copy) $VN.Void
N002 (  3,  2)              [000162] D---G--N----              +--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  +--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
N001 ( 14,  5)              [000161] --CXG-------              \--*  CALL      struct System.DateTime.get_Now $c6

***** BB15
STMT00042 (IL 0x13F...0x178)
N013 ( 53, 36)              [000170] --CXG-------              *  CALL      void   System.Console.WriteLine $VN.Void
N012 ( 39, 30)              [000169] --CXG------- arg0 in rcx  \--*  CALL      ref    System.String.Concat $3f4
N007 ( 17, 10)              [000367] -ACXG---R-L- arg0 SETUP      +--*  ASG       ref    $3ef
N006 (  1,  1)              [000366] D------N----                 |  +--*  LCL_VAR   ref    V24 tmp17        d:2 $3ef
N005 ( 17, 10)              [000167] --CXG-------                 |  \--*  CALL      ref    System.DateTime.ToString $3ef
N004 (  3,  3)              [000166] ------------ this in rcx     |     \--*  ADDR      byref  $147
N003 (  3,  2)              [000165] ----G--N----                 |        \--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                     |        \--*    long   V02._dateData (offs=0x00) -> V17 tmp10         $c7
N009 (  1,  1)              [000368] ------------ arg0 in rcx     +--*  LCL_VAR   ref    V24 tmp17        u:2 (last use) $3ef
N011 (  4, 12)              [000365] #---G------- arg1 in rdx     \--*  IND       ref    $3f3
N010 (  2, 10)              [000364] H-----------                    \--*  CNS_INT(h) long   0x75003208 "	 Done.  Profiler is active, available options:" $1d3

***** BB15
STMT00043 (IL 0x155...  ???)
N004 ( 18, 18)              [000172] --CXG-------              *  CALL      void   System.Console.WriteLine $VN.Void
N003 (  4, 12)              [000372] #---G------- arg0 in rcx  \--*  IND       ref    $3f8
N002 (  2, 10)              [000371] H-----------                 \--*  CNS_INT(h) long   0x75003210 "   Q = quit" $1d4

***** BB15
STMT00044 (IL 0x15F...  ???)
N004 ( 18, 18)              [000174] --CXG-------              *  CALL      void   System.Console.WriteLine $VN.Void
N003 (  4, 12)              [000375] #---G------- arg0 in rcx  \--*  IND       ref    $3fb
N002 (  2, 10)              [000374] H-----------                 \--*  CNS_INT(h) long   0x75003218 "   H = heap snapshot" $1d5

***** BB15
STMT00045 (IL 0x169...  ???)
N004 ( 18, 18)              [000176] --CXG-------              *  CALL      void   System.Console.WriteLine $VN.Void
N003 (  4, 12)              [000378] #---G------- arg0 in rcx  \--*  IND       ref    $3fe
N002 (  2, 10)              [000377] H-----------                 \--*  CNS_INT(h) long   0x75003220 "   G = GC (max gen)" $1d6

***** BB15
STMT00046 (IL 0x173...  ???)
N004 ( 18, 18)              [000178] --CXG-------              *  CALL      void   System.Console.WriteLine $VN.Void
N003 (  4, 12)              [000381] #---G------- arg0 in rcx  \--*  IND       ref    $4c1
N002 (  2, 10)              [000380] H-----------                 \--*  CNS_INT(h) long   0x75003228 "   R = clear the running flag to stop the consumer thread" $1d7

------------ BB16 [???..???), preds={BB15,BB25} succs={BB17}

------------ BB17 [???..???), preds={BB16,BB24} succs={BB18}

------------ BB18 [???..???), preds={BB17,BB22} succs={BB19}

------------ BB19 [17D..18F) -> BB21 (cond), preds={BB18,BB20} succs={BB20,BB21}

***** BB19
STMT00048 (IL   ???...  ???)
N006 ( 18, 11)              [000233] S-CXG-------              *  CALL      void   System.ConsolePal.ReadKey $VN.Void
N004 (  3,  3)              [000235] ------------ arg0 in rcx  +--*  ADDR      long   $148
N003 (  3,  2)              [000236] ----G--N----              |  \--*  LCL_VAR   struct<System.ConsoleKeyInfo, 12>(AX)(P) V06 loc4         
                                                  |  \--*    ushort V06._keyChar (offs=0x00) -> V18 tmp11        
                                                  |  \--*    int    V06._key (offs=0x04) -> V19 tmp12        
                                                  |  \--*    int    V06._mods (offs=0x08) -> V20 tmp13         $c8
N005 (  1,  1)              [000232] ------------ arg1 in rdx  \--*  CNS_INT   int    0 $40

***** BB19
STMT00050 (IL   ???...  ???)
N004 (  7,  6)              [000189] ----G-------              *  JTRUE     void  
N003 (  5,  4)              [000188] N---G--N-U--              \--*  NE        int    $34f
N001 (  3,  2)              [000240] ----G-------                 +--*  LCL_VAR   int   (AX) V19 tmp12         $385
N002 (  1,  1)              [000187] ------------                 \--*  CNS_INT   int    71 $5e

------------ BB20 [18F..19B) -> BB19 (always), preds={BB19} succs={BB19}

***** BB20
STMT00061 (IL 0x18F...0x199)
N003 ( 28, 11)              [000222] --CXG-------              *  CALL      void   System.GC.Collect $VN.Void
N002 ( 14,  5)              [000221] --CXG------- arg0 in rcx  \--*  CALL      int    System.GC.get_MaxGeneration $305

------------ BB21 [19B..1A6) -> BB23 (cond), preds={BB19} succs={BB22,BB23}

***** BB21
STMT00052 (IL   ???...  ???)
N004 (  7,  6)              [000196] ----G-------              *  JTRUE     void  
N003 (  5,  4)              [000195] N---G--N-U--              \--*  NE        int    $350
N001 (  3,  2)              [000244] ----G-------                 +--*  LCL_VAR   int   (AX) V19 tmp12         $385
N002 (  1,  1)              [000194] ------------                 \--*  CNS_INT   int    72 $5f

------------ BB22 [1A6..1AD) -> BB18 (always), preds={BB21} succs={BB18}

***** BB22
STMT00060 (IL 0x1A6...0x1AB)
N001 ( 14,  5)              [000220] --CXG-------              *  CALL      void   System.Diagnostics.Debugger.Break $VN.Void

------------ BB23 [1AD..1B8) -> BB25 (cond), preds={BB21} succs={BB24,BB25}

***** BB23
STMT00054 (IL   ???...  ???)
N004 (  7,  6)              [000203] ----G-------              *  JTRUE     void  
N003 (  5,  4)              [000202] N---G--N-U--              \--*  NE        int    $351
N001 (  3,  2)              [000248] ----G-------                 +--*  LCL_VAR   int   (AX) V19 tmp12         $385
N002 (  1,  1)              [000201] ------------                 \--*  CNS_INT   int    82 $60

------------ BB24 [1B8..1C1) -> BB17 (always), preds={BB23} succs={BB17}

***** BB24
STMT00059 (IL 0x1B8...0x1BA)
N006 (  7,  7)              [000219] -A-XG-------              *  ASG       bool   $VN.Void
N004 (  5,  5)              [000218] D--XG--N----              +--*  IND       bool   $40
N003 (  2,  2)              [000387] -------N----              |  \--*  ADD       byref  $1a7
N001 (  1,  1)              [000216] ------------              |     +--*  LCL_VAR   ref    V00 this         u:1 $80
N002 (  1,  1)              [000386] ------------              |     \--*  CNS_INT   long   16 field offset Fseq[_running] $281
N005 (  1,  1)              [000217] ------------              \--*  CNS_INT   int    0 $40

------------ BB25 [1C1..1CC) -> BB16 (cond), preds={BB23} succs={BB26,BB16}

***** BB25
STMT00056 (IL   ???...  ???)
N004 (  7,  6)              [000210] ----G-------              *  JTRUE     void  
N003 (  5,  4)              [000209] N---G--N-U--              \--*  NE        int    $352
N001 (  3,  2)              [000252] ----G-------                 +--*  LCL_VAR   int   (AX) V19 tmp12         $385
N002 (  1,  1)              [000208] ------------                 \--*  CNS_INT   int    81 $61

------------ BB26 [1CC..1D4) (return), preds={BB25} succs={}

***** BB26
STMT00057 (IL 0x1CC...0x1CE)
N006 (  7,  7)              [000214] -A-XG-------              *  ASG       bool   $VN.Void
N004 (  5,  5)              [000213] D--XG--N----              +--*  IND       bool   $40
N003 (  2,  2)              [000389] -------N----              |  \--*  ADD       byref  $1a7
N001 (  1,  1)              [000211] ------------              |     +--*  LCL_VAR   ref    V00 this         u:1 (last use) $80
N002 (  1,  1)              [000388] ------------              |     \--*  CNS_INT   long   16 field offset Fseq[_running] $281
N005 (  1,  1)              [000212] ------------              \--*  CNS_INT   int    0 $40

***** BB26
STMT00058 (IL 0x1D3...0x1D3)
N001 (  0,  0)              [000215] ------------              *  RETURN    void   $442

------------ BB27 [0CA..0CD) -> BB29 (cond), preds={} succs={BB28,BB29}

***** BB27
STMT00031 (IL 0x0CA...0x0CB)
N005 (  8,  8)              [000126] ----G-------              *  JTRUE     void  
N004 (  6,  6)              [000125] J---G--N----              \--*  EQ        int    $342
N002 (  4,  4)              [000336] ----G-------                 +--*  CAST      int <- bool <- int $341
N001 (  3,  2)              [000123] ----G-------                 |  \--*  LCL_VAR   int   (AX) V05 loc3          $381
N003 (  1,  1)              [000124] ------------                 \--*  CNS_INT   int    0 $40

------------ BB28 [0CD..0D3), preds={BB27} succs={BB29}

***** BB28
STMT00033 (IL 0x0CD...0x0CE)
N003 ( 15,  7)              [000129] --CXG-------              *  CALL      void   System.Threading.Monitor.Exit $VN.Void
N002 (  1,  1)              [000128] ------------ arg0 in rcx  \--*  LCL_VAR   ref    V04 loc2         u:3 (last use) <l:$256, c:$b2>

------------ BB29 [0D3..0D4) (finret), preds={BB27,BB28} succs={}

***** BB29
STMT00032 (IL 0x0D3...0x0D3)
N001 (  0,  0)              [000127] ------------              *  RETFILT   void   $440

------------ BB30 [126..129) -> BB32 (cond), preds={BB13} succs={BB31,BB32}

***** BB30
STMT00062 (IL 0x126...0x127)
N005 (  8,  8)              [000226] ----G-------              *  JTRUE     void  
N004 (  6,  6)              [000225] J---G--N----              \--*  EQ        int    $34c
N002 (  4,  4)              [000360] ----G-------                 +--*  CAST      int <- bool <- int $34b
N001 (  3,  2)              [000223] ----G-------                 |  \--*  LCL_VAR   int   (AX) V05 loc3          $383
N003 (  1,  1)              [000224] ------------                 \--*  CNS_INT   int    0 $40

------------ BB31 [129..12F), preds={BB30} succs={BB32}

***** BB31
STMT00064 (IL 0x129...0x12A)
N003 ( 15,  7)              [000229] --CXG-------              *  CALL      void   System.Threading.Monitor.Exit $VN.Void
N002 (  1,  1)              [000228] ------------ arg0 in rcx  \--*  LCL_VAR   ref    V04 loc2         u:2 (last use) <l:$41a, c:$3df>

------------ BB32 [12F..130) (finret), preds={BB30,BB31} succs={BB14}

***** BB32
STMT00063 (IL 0x12F...0x12F)
N001 (  0,  0)              [000227] ------------              *  RETFILT   void   $441

-------------------------------------------------------------------------------------------------------------------


Aggressive CSE Promotion cutoff is 500.000000
Moderate CSE Promotion cutoff is 100.000000
enregCount is 16
Framesize estimate is 0x0044
We have a small frame

Sorted CSE candidates:
CSE #02, {$279, $276} useCnt=1: [def=800.000000, use=800.000000, cost= 10, call]
        :: N017 ( 10, 10) CSE #02 (def)[000100] ---XG-------              *  IND       ref    <l:$403, c:$402>
CSE #01, {$26b, $244} useCnt=2: [def=800.000000, use=1600.000000, cost=  4, call]
        :: N004 (  4,  4) CSE #01 (def)[000096] ---XG-------              *  IND       ref    <l:$26d, c:$26c>
CSE #03, {$41e, $244} useCnt=1: [def=800.000000, use=800.000000, cost=  4      ]
        :: N004 (  4,  4) CSE #03 (def)[000152] ---XG-------              *  IND       ref    <l:$420, c:$41f>


Considering CSE #02 {$279, $276} [def=800.000000, use=800.000000, cost= 10, call]
CSE Expression : 
N017 ( 10, 10) CSE #02 (def)[000100] ---XG-------              *  IND       ref    <l:$403, c:$402>
N016 (  8,  8)              [000321] ---XG--N----              \--*  ADD       byref  <l:$197, c:$196>
N014 (  7,  7)              [000099] ---XG-------                 +--*  IND       ref    <l:$278, c:$277>
N013 (  5,  5)              [000323] ---XG--N----                 |  \--*  ADD       byref  <l:$191, c:$193>
N011 (  4,  4) CSE #01 (use)[000098] ---XG-------                 |     +--*  IND       ref    <l:$26d, c:$26e>
N010 (  2,  2)              [000325] -------N----                 |     |  \--*  ADD       byref  $181
N008 (  1,  1)              [000097] ------------                 |     |     +--*  LCL_VAR   ref    V00 this         u:1 $80
N009 (  1,  1)              [000324] ------------                 |     |     \--*  CNS_INT   long   8 field offset Fseq[_myList] $280
N012 (  1,  1)              [000322] ------------                 |     \--*  CNS_INT   long   8 field offset Fseq[Head] $280
N015 (  1,  1)              [000320] ------------                 \--*  CNS_INT   long   8 field offset Fseq[Next] $280

Aggressive CSE Promotion (2400.000000 >= 500.000000)
cseRefCnt=2400.000000, aggressiveRefCnt=500.000000, moderateRefCnt=100.000000
defCnt=800.000000, useCnt=800.000000, cost=10, size=10, LiveAcrossCall
def_cost=1, use_cost=1, extra_no_cost=18, extra_yes_cost=0
CSE cost savings check (8018.000000 >= 1600.000000) passes

Promoting CSE:

lvaGrabTemp returning 27 (V27 rat0) (a long lifetime temp) called for CSE - aggressive.
CSE #02 is single-def, so associated CSE temp V27 will be in SSA
New refCnts for V27: refCnt =  2, refCntWtd = 16   
New refCnts for V27: refCnt =  3, refCntWtd = 24   

CSE #02 def at [000100] replaced in BB03 with def of V27
optValnumCSE morphed tree:
N022 ( 19, 19)              [000102] -A-XG-------              *  ASG       ref    $VN.Void
N007 (  7,  7)              [000101] D--XG--N----              +--*  IND       ref    $279
N006 (  5,  5)              [000317] ---XG--N----              |  \--*  ADD       byref  <l:$191, c:$190>
N004 (  4,  4) CSE #01 (def)[000096] ---XG-------              |     +--*  IND       ref    <l:$26d, c:$26c>
N003 (  2,  2)              [000319] -------N----              |     |  \--*  ADD       byref  $181
N001 (  1,  1)              [000095] ------------              |     |     +--*  LCL_VAR   ref    V00 this         u:1 $80
N002 (  1,  1)              [000318] ------------              |     |     \--*  CNS_INT   long   8 field offset Fseq[_myList] $280
N005 (  1,  1)              [000316] ------------              |     \--*  CNS_INT   long   8 field offset Fseq[Head] $280
N021 ( 11, 11)              [000411] -A-XG-------              \--*  COMMA     ref    <l:$403, c:$402>
N019 ( 10, 10)              [000409] -A-XG---R---                 +--*  ASG       ref    $VN.Void
N018 (  1,  1)              [000408] D------N----                 |  +--*  LCL_VAR   ref    V27 cse0         d:1 <l:$403, c:$402>
N017 ( 10, 10)              [000100] ---XG-------                 |  \--*  IND       ref    <l:$403, c:$402>
N016 (  8,  8)              [000321] ---XG--N----                 |     \--*  ADD       byref  <l:$197, c:$196>
N014 (  7,  7)              [000099] ---XG-------                 |        +--*  IND       ref    <l:$278, c:$277>
N013 (  5,  5)              [000323] ---XG--N----                 |        |  \--*  ADD       byref  <l:$191, c:$193>
N011 (  4,  4) CSE #01 (use)[000098] ---XG-------                 |        |     +--*  IND       ref    <l:$26d, c:$26e>
N010 (  2,  2)              [000325] -------N----                 |        |     |  \--*  ADD       byref  $181
N008 (  1,  1)              [000097] ------------                 |        |     |     +--*  LCL_VAR   ref    V00 this         u:1 $80
N009 (  1,  1)              [000324] ------------                 |        |     |     \--*  CNS_INT   long   8 field offset Fseq[_myList] $280
N012 (  1,  1)              [000322] ------------                 |        |     \--*  CNS_INT   long   8 field offset Fseq[Head] $280
N015 (  1,  1)              [000320] ------------                 |        \--*  CNS_INT   long   8 field offset Fseq[Next] $280
N020 (  1,  1)              [000410] ------------                 \--*  LCL_VAR   ref    V27 cse0         u:1 <l:$403, c:$402>


Working on the replacement of the CSE #02 use at [000105] in BB03
Unmark CSE use #01 at [000104]:   2 ->   1
optValnumCSE morphed tree:
N003 (  1,  3)              [000113] -A--G---R---              *  ASG       ref    <l:$27b, c:$40a>
N002 (  1,  1)              [000112] D------N----              +--*  LCL_VAR   ref    V16 tmp9         d:2 <l:$279, c:$3ca>
N001 (  1,  1)              [000412] ------------              \--*  LCL_VAR   ref    V27 cse0         u:1 <l:$279, c:$3c4>


Considering CSE #01 {$26b, $244} [def=800.000000, use=800.000000, cost=  4, call]
CSE Expression : 
N004 (  4,  4) CSE #01 (def)[000096] ---XG-------              *  IND       ref    <l:$26d, c:$26c>
N003 (  2,  2)              [000319] -------N----              \--*  ADD       byref  $181
N001 (  1,  1)              [000095] ------------                 +--*  LCL_VAR   ref    V00 this         u:1 $80
N002 (  1,  1)              [000318] ------------                 \--*  CNS_INT   long   8 field offset Fseq[_myList] $280

Aggressive CSE Promotion (2400.000000 >= 600.000000)
cseRefCnt=2400.000000, aggressiveRefCnt=600.000000, moderateRefCnt=150.000000
defCnt=800.000000, useCnt=800.000000, cost=4, size=4, LiveAcrossCall
def_cost=1, use_cost=1, extra_no_cost=6, extra_yes_cost=0
CSE cost savings check (3206.000000 >= 1600.000000) passes

Promoting CSE:

lvaGrabTemp returning 28 (V28 rat0) (a long lifetime temp) called for CSE - aggressive.
CSE #01 is single-def, so associated CSE temp V28 will be in SSA
New refCnts for V28: refCnt =  2, refCntWtd = 16   
New refCnts for V28: refCnt =  3, refCntWtd = 24   

CSE #01 def at [000096] replaced in BB03 with def of V28
optValnumCSE morphed tree:
N026 ( 20, 20)              [000102] -A-XG-------              *  ASG       ref    $VN.Void
N011 (  8,  8)              [000101] DA-XG--N----              +--*  IND       ref    $279
N010 (  6,  6)              [000317] -A-XG--N----              |  \--*  ADD       byref  <l:$191, c:$190>
N008 (  5,  5)              [000416] -A-XG-------              |     +--*  COMMA     ref    <l:$26d, c:$26c>
N006 (  4,  4)              [000414] -A-XG---R---              |     |  +--*  ASG       ref    $VN.Void
N005 (  1,  1)              [000413] D------N----              |     |  |  +--*  LCL_VAR   ref    V28 cse1         d:1 <l:$26d, c:$26c>
N004 (  4,  4)              [000096] ---XG-------              |     |  |  \--*  IND       ref    <l:$26d, c:$26c>
N003 (  2,  2)              [000319] -------N----              |     |  |     \--*  ADD       byref  $181
N001 (  1,  1)              [000095] ------------              |     |  |        +--*  LCL_VAR   ref    V00 this         u:1 $80
N002 (  1,  1)              [000318] ------------              |     |  |        \--*  CNS_INT   long   8 field offset Fseq[_myList] $280
N007 (  1,  1)              [000415] ------------              |     |  \--*  LCL_VAR   ref    V28 cse1         u:1 <l:$26d, c:$26c>
N009 (  1,  1)              [000316] ------------              |     \--*  CNS_INT   long   8 field offset Fseq[Head] $280
N025 ( 11, 11)              [000411] -A-XG-------              \--*  COMMA     ref    <l:$403, c:$402>
N023 ( 10, 10)              [000409] -A-XG---R---                 +--*  ASG       ref    $VN.Void
N022 (  1,  1)              [000408] D------N----                 |  +--*  LCL_VAR   ref    V27 cse0         d:1 <l:$403, c:$402>
N021 ( 10, 10)              [000100] ---XG-------                 |  \--*  IND       ref    <l:$403, c:$402>
N020 (  8,  8)              [000321] ---XG--N----                 |     \--*  ADD       byref  <l:$197, c:$196>
N018 (  7,  7)              [000099] ---XG-------                 |        +--*  IND       ref    <l:$278, c:$277>
N017 (  5,  5)              [000323] ---XG--N----                 |        |  \--*  ADD       byref  <l:$191, c:$193>
N015 (  4,  4) CSE #01 (use)[000098] ---XG-------                 |        |     +--*  IND       ref    <l:$26d, c:$26e>
N014 (  2,  2)              [000325] -------N----                 |        |     |  \--*  ADD       byref  $181
N012 (  1,  1)              [000097] ------------                 |        |     |     +--*  LCL_VAR   ref    V00 this         u:1 $80
N013 (  1,  1)              [000324] ------------                 |        |     |     \--*  CNS_INT   long   8 field offset Fseq[_myList] $280
N016 (  1,  1)              [000322] ------------                 |        |     \--*  CNS_INT   long   8 field offset Fseq[Head] $280
N019 (  1,  1)              [000320] ------------                 |        \--*  CNS_INT   long   8 field offset Fseq[Next] $280
N024 (  1,  1)              [000410] ------------                 \--*  LCL_VAR   ref    V27 cse0         u:1 <l:$403, c:$402>


Working on the replacement of the CSE #01 use at [000098] in BB03
optValnumCSE morphed tree:
N023 ( 17, 17)              [000102] -A-XG-------              *  ASG       ref    $VN.Void
N011 (  8,  8)              [000101] DA-XG--N----              +--*  IND       ref    $279
N010 (  6,  6)              [000317] -A-XG--N----              |  \--*  ADD       byref  <l:$191, c:$190>
N008 (  5,  5)              [000416] -A-XG-------              |     +--*  COMMA     ref    <l:$26d, c:$26c>
N006 (  4,  4)              [000414] -A-XG---R---              |     |  +--*  ASG       ref    $VN.Void
N005 (  1,  1)              [000413] D------N----              |     |  |  +--*  LCL_VAR   ref    V28 cse1         d:1 <l:$26d, c:$26c>
N004 (  4,  4)              [000096] ---XG-------              |     |  |  \--*  IND       ref    <l:$26d, c:$26c>
N003 (  2,  2)              [000319] -------N----              |     |  |     \--*  ADD       byref  $181
N001 (  1,  1)              [000095] ------------              |     |  |        +--*  LCL_VAR   ref    V00 this         u:1 $80
N002 (  1,  1)              [000318] ------------              |     |  |        \--*  CNS_INT   long   8 field offset Fseq[_myList] $280
N007 (  1,  1)              [000415] ------------              |     |  \--*  LCL_VAR   ref    V28 cse1         u:1 <l:$26d, c:$26c>
N009 (  1,  1)              [000316] ------------              |     \--*  CNS_INT   long   8 field offset Fseq[Head] $280
N022 (  8,  8)              [000411] -A-XG-------              \--*  COMMA     ref    <l:$403, c:$402>
N020 (  7,  7)              [000409] -A-XG---R---                 +--*  ASG       ref    $VN.Void
N019 (  1,  1)              [000408] D------N----                 |  +--*  LCL_VAR   ref    V27 cse0         d:1 <l:$403, c:$402>
N018 (  7,  7)              [000100] ---XG-------                 |  \--*  IND       ref    <l:$403, c:$402>
N017 (  5,  5)              [000321] ---XG--N----                 |     \--*  ADD       byref  <l:$197, c:$196>
N015 (  4,  4)              [000099] ---XG-------                 |        +--*  IND       ref    <l:$278, c:$277>
N014 (  2,  2)              [000323] ----G--N----                 |        |  \--*  ADD       byref  <l:$191, c:$193>
N012 (  1,  1)              [000417] ------------                 |        |     +--*  LCL_VAR   ref    V28 cse1         u:1 <l:$26b, c:$bf>
N013 (  1,  1)              [000322] ------------                 |        |     \--*  CNS_INT   long   8 field offset Fseq[Head] $280
N016 (  1,  1)              [000320] ------------                 |        \--*  CNS_INT   long   8 field offset Fseq[Next] $280
N021 (  1,  1)              [000410] ------------                 \--*  LCL_VAR   ref    V27 cse0         u:1 <l:$403, c:$402>


Considering CSE #03 {$41e, $244} [def=800.000000, use=800.000000, cost=  4      ]
CSE Expression : 
N004 (  4,  4) CSE #03 (def)[000152] ---XG-------              *  IND       ref    <l:$420, c:$41f>
N003 (  2,  2)              [000353] -------N----              \--*  ADD       byref  $181
N001 (  1,  1)              [000151] ------------                 +--*  LCL_VAR   ref    V00 this         u:1 $80
N002 (  1,  1)              [000352] ------------                 \--*  CNS_INT   long   8 field offset Fseq[_myList] $280

Aggressive CSE Promotion (2400.000000 >= 700.000000)
cseRefCnt=2400.000000, aggressiveRefCnt=700.000000, moderateRefCnt=200.000000
defCnt=800.000000, useCnt=800.000000, cost=4, size=4
def_cost=1, use_cost=1, extra_no_cost=6, extra_yes_cost=0
CSE cost savings check (3206.000000 >= 1600.000000) passes

Promoting CSE:

lvaGrabTemp returning 29 (V29 rat0) (a long lifetime temp) called for CSE - aggressive.
CSE #03 is single-def, so associated CSE temp V29 will be in SSA
New refCnts for V29: refCnt =  2, refCntWtd = 16   
New refCnts for V29: refCnt =  3, refCntWtd = 24   

CSE #03 def at [000152] replaced in BB09 with def of V29
optValnumCSE morphed tree:
N020 ( 18, 18)              [000158] -A-XG-------              *  JTRUE     void  
N019 ( 16, 16)              [000157] NA-XG--N-U--              \--*  EQ        int    <l:$34a, c:$349>
N011 (  8,  8)              [000153] -A-XG-------                 +--*  IND       ref    <l:$42a, c:$429>
N010 (  6,  6)              [000351] -A-XG--N----                 |  \--*  ADD       byref  <l:$1a0, c:$19f>
N008 (  5,  5)              [000421] -A-XG-------                 |     +--*  COMMA     ref    <l:$420, c:$41f>
N006 (  4,  4)              [000419] -A-XG---R---                 |     |  +--*  ASG       ref    $VN.Void
N005 (  1,  1)              [000418] D------N----                 |     |  |  +--*  LCL_VAR   ref    V29 cse2         d:1 <l:$420, c:$41f>
N004 (  4,  4)              [000152] ---XG-------                 |     |  |  \--*  IND       ref    <l:$420, c:$41f>
N003 (  2,  2)              [000353] -------N----                 |     |  |     \--*  ADD       byref  $181
N001 (  1,  1)              [000151] ------------                 |     |  |        +--*  LCL_VAR   ref    V00 this         u:1 $80
N002 (  1,  1)              [000352] ------------                 |     |  |        \--*  CNS_INT   long   8 field offset Fseq[_myList] $280
N007 (  1,  1)              [000420] ------------                 |     |  \--*  LCL_VAR   ref    V29 cse2         u:1 <l:$420, c:$41f>
N009 (  1,  1)              [000350] ------------                 |     \--*  CNS_INT   long   8 field offset Fseq[Head] $280
N018 (  7,  7)              [000156] ---XG-------                 \--*  IND       ref    <l:$435, c:$434>
N017 (  5,  5)              [000355] ---XG--N----                    \--*  ADD       byref  <l:$1a4, c:$1a3>
N015 (  4,  4) CSE #03 (use)[000155] ---XG-------                       +--*  IND       ref    <l:$420, c:$42b>
N014 (  2,  2)              [000357] -------N----                       |  \--*  ADD       byref  $181
N012 (  1,  1)              [000154] ------------                       |     +--*  LCL_VAR   ref    V00 this         u:1 $80
N013 (  1,  1)              [000356] ------------                       |     \--*  CNS_INT   long   8 field offset Fseq[_myList] $280
N016 (  1,  1)              [000354] ------------                       \--*  CNS_INT   long   16 field offset Fseq[Tail] $281


Working on the replacement of the CSE #03 use at [000155] in BB09
optValnumCSE morphed tree:
N017 ( 15, 15)              [000158] -A-XG-------              *  JTRUE     void  
N016 ( 13, 13)              [000157] NA-XG--N-U--              \--*  EQ        int    <l:$34a, c:$349>
N011 (  8,  8)              [000153] -A-XG-------                 +--*  IND       ref    <l:$42a, c:$429>
N010 (  6,  6)              [000351] -A-XG--N----                 |  \--*  ADD       byref  <l:$1a0, c:$19f>
N008 (  5,  5)              [000421] -A-XG-------                 |     +--*  COMMA     ref    <l:$420, c:$41f>
N006 (  4,  4)              [000419] -A-XG---R---                 |     |  +--*  ASG       ref    $VN.Void
N005 (  1,  1)              [000418] D------N----                 |     |  |  +--*  LCL_VAR   ref    V29 cse2         d:1 <l:$420, c:$41f>
N004 (  4,  4)              [000152] ---XG-------                 |     |  |  \--*  IND       ref    <l:$420, c:$41f>
N003 (  2,  2)              [000353] -------N----                 |     |  |     \--*  ADD       byref  $181
N001 (  1,  1)              [000151] ------------                 |     |  |        +--*  LCL_VAR   ref    V00 this         u:1 $80
N002 (  1,  1)              [000352] ------------                 |     |  |        \--*  CNS_INT   long   8 field offset Fseq[_myList] $280
N007 (  1,  1)              [000420] ------------                 |     |  \--*  LCL_VAR   ref    V29 cse2         u:1 <l:$420, c:$41f>
N009 (  1,  1)              [000350] ------------                 |     \--*  CNS_INT   long   8 field offset Fseq[Head] $280
N015 (  4,  4)              [000156] ---XG-------                 \--*  IND       ref    <l:$435, c:$434>
N014 (  2,  2)              [000355] ----G--N----                    \--*  ADD       byref  <l:$1a4, c:$1a3>
N012 (  1,  1)              [000422] ------------                       +--*  LCL_VAR   ref    V29 cse2         u:1 <l:$41e, c:$3e3>
N013 (  1,  1)              [000354] ------------                       \--*  CNS_INT   long   16 field offset Fseq[Tail] $281


*************** Finishing PHASE Optimize Valnum CSEs

*************** Starting PHASE Assertion prop
*************** In optAssertionPropMain()
Blocks/Trees at start of phase

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..072)-> BB07 ( cond )                     i hascall gcsafe newobj 
BB33 [0048]  1       BB01                  1       [072..???)                                     internal LoopPH 
BB02 [0001]  2       BB06,BB33             8     0 [072..07B)                                     i Loop gcsafe bwd bwd-target 
BB03 [0002]  1  0    BB02                  8     0 [07B..0CA)                 T0      try { }     keep i try hascall gcsafe newobj bwd 
BB04 [0038]  1       BB03                  8     0 [0CA..0CD)-> BB06 ( cond )                     keep i gcsafe bwd cfb 
BB05 [0039]  1       BB04                  4     0 [0CD..0D4)                                     i hascall gcsafe bwd 
BB06 [0006]  2       BB04,BB05             8     0 [0D4..0DD)-> BB02 ( cond )                     i gcsafe bwd 
BB07 [0008]  2       BB01,BB06             1       [0DD..0F9)                                     i hascall gcsafe 
BB08 [0009]  2       BB07,BB12             8     1 [0F9..102)                                     i Loop gcsafe bwd bwd-target 
BB09 [0010]  1  1    BB08                  8     1 [102..122)-> BB13 ( cond ) T1      try { }     keep i try hascall gcsafe bwd 
BB10 [0041]  1       BB09                  8     1 [126..129)-> BB12 ( cond )                     keep i gcsafe bwd cfb 
BB11 [0042]  1       BB10                  4     1 [129..130)                                     i hascall gcsafe bwd 
BB12 [0016]  2       BB10,BB11             8     1 [130..139)-> BB08 (always)                     i hascall gcsafe bwd 
BB13 [0030]  1       BB09                  1       [???..???)-> BB30 (callf )                     i internal gcsafe 
BB14 [0031]  1       BB32                  1       [???..???)-> BB15 (ALWAYS)                     i internal gcsafe KEEP 
BB15 [0017]  1       BB14                  1       [139..17D)                                     i hascall gcsafe 
BB16 [0045]  2       BB15,BB25             1     2 [???..???)                                     internal gcsafe 
BB17 [0046]  2       BB16,BB24             1     3 [???..???)                                     internal gcsafe 
BB18 [0047]  2       BB17,BB22             1     4 [???..???)                                     internal gcsafe 
BB19 [0018]  2       BB18,BB20             8     5 [17D..18F)-> BB21 ( cond )                     i Loop hascall gcsafe bwd bwd-target 
BB20 [0019]  1       BB19                  8     5 [18F..19B)-> BB19 (always)                     i hascall gcsafe bwd 
BB21 [0020]  1       BB19                  1     4 [19B..1A6)-> BB23 ( cond )                     i gcsafe bwd 
BB22 [0021]  1       BB21                  1     4 [1A6..1AD)-> BB18 (always)                     i hascall gcsafe bwd 
BB23 [0022]  1       BB21                  1     3 [1AD..1B8)-> BB25 ( cond )                     i gcsafe bwd 
BB24 [0023]  1       BB23                  1     3 [1B8..1C1)-> BB17 (always)                     i gcsafe bwd 
BB25 [0024]  1       BB23                  1     2 [1C1..1CC)-> BB16 ( cond )                     i gcsafe bwd 
BB26 [0025]  1       BB25                  1       [1CC..1D4)        (return)                     i gcsafe 
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ funclets follow
BB27 [0003]  1     0                       0       [0CA..0CD)-> BB29 ( cond )    H0 F fault {     keep i rare flet bwd 
BB28 [0004]  1     0 BB27                  0       [0CD..0D3)                    H0               i rare hascall bwd 
BB29 [0005]  2     0 BB27,BB28             0       [0D3..0D4)        (finret)    H0   }           i rare bwd 
BB30 [0013]  2     1 BB13                  1       [126..129)-> BB32 ( cond )    H1 F finally {   keep i gcsafe flet bwd 
BB31 [0014]  1     1 BB30                  1       [129..12F)                    H1               i hascall gcsafe bwd 
BB32 [0015]  2     1 BB30,BB31             1       [12F..130)        (finret)    H1   }           i gcsafe bwd 
-----------------------------------------------------------------------------------------------------------------------------------------

------------ BB01 [000..072) -> BB07 (cond), preds={} succs={BB33,BB07}

***** BB01
STMT00000 (IL 0x000...0x005)
N003 ( 18,  8) [000003] -ACXG---R---              *  ASG       struct (copy) $VN.Void
N002 (  3,  2) [000001] D---G--N----              +--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  +--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
N001 ( 14,  5) [000000] --CXG-------              \--*  CALL      struct System.DateTime.get_Now $c0

***** BB01
STMT00001 (IL 0x006...0x022)
N013 ( 53, 36) [000009] --CXG-------              *  CALL      void   System.Console.WriteLine $VN.Void
N012 ( 39, 30) [000008] --CXG------- arg0 in rcx  \--*  CALL      ref    System.String.Concat $89
N007 ( 17, 10) [000272] -ACXG---R-L- arg0 SETUP      +--*  ASG       ref    $84
N006 (  1,  1) [000271] D------N----                 |  +--*  LCL_VAR   ref    V21 tmp14        d:2 $84
N005 ( 17, 10) [000006] --CXG-------                 |  \--*  CALL      ref    System.DateTime.ToString $84
N004 (  3,  3) [000005] ------------ this in rcx     |     \--*  ADDR      byref  $141
N003 (  3,  2) [000004] ----G--N----                 |        \--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                     |        \--*    long   V02._dateData (offs=0x00) -> V17 tmp10         $c1
N009 (  1,  1) [000273] ------------ arg0 in rcx     +--*  LCL_VAR   ref    V21 tmp14        u:2 (last use) $84
N011 (  4, 12) [000270] #---G------- arg1 in rdx     \--*  IND       ref    $88
N010 (  2, 10) [000269] H-----------                    \--*  CNS_INT(h) long   0x750031F0 "	 Created list" $1c0

***** BB01
STMT00002 (IL 0x01C...  ???)
N005 ( 16, 16) [000014] -AC-----R---              *  ASG       ref    $240
N004 (  1,  1) [000013] D------N----              +--*  LCL_VAR   ref    V08 tmp1         d:2 $240
N003 ( 16, 16) [000012] --C---------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST $240
N002 (  2, 10) [000011] H----------- arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb3ee2350 method $1c1

***** BB01
STMT00003 (IL   ???...  ???)
N003 ( 15,  8) [000016] --CXG-------              *  CALL      void   FalseLeakRepro.List..ctor $VN.Void
N002 (  1,  1) [000015] ------------ this in rcx  \--*  LCL_VAR   ref    V08 tmp1         u:2 $240

***** BB01
STMT00004 (IL 0x022...  ???)
N006 (  6,  6) [000019] -A-XG-------              *  ASG       ref    $VN.Void
N004 (  4,  4) [000018] D--XG--N----              +--*  IND       ref    $240
N003 (  2,  2) [000279] -------N----              |  \--*  ADD       byref  $181
N001 (  1,  1) [000010] ------------              |     +--*  LCL_VAR   ref    V00 this         u:1 $80
N002 (  1,  1) [000278] ------------              |     \--*  CNS_INT   long   8 field offset Fseq[_myList] $280
N005 (  1,  1) [000017] ------------              \--*  LCL_VAR   ref    V08 tmp1         u:2 (last use) $240

***** BB01
STMT00005 (IL 0x027...0x037)
N005 ( 16, 16) [000026] -AC-----R---              *  ASG       ref    $243
N004 (  1,  1) [000025] D------N----              +--*  LCL_VAR   ref    V09 tmp2         d:2 $243
N003 ( 16, 16) [000024] --C---------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST $243
N002 (  2, 10) [000023] H----------- arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb3b058b8 token $1c3

***** BB01
STMT00007 (IL   ???...  ???)
N009 (  7,  7) [000030] -A-XG---R---              *  ASG       ref    <l:$250, c:$24f>
N008 (  1,  1) [000029] D------N----              +--*  LCL_VAR   ref    V10 tmp3         d:2 <l:$248, c:$94>
N007 (  7,  7) [000022] ---XG-------              \--*  IND       ref    <l:$250, c:$24f>
N006 (  5,  5) [000282] ---XG--N----                 \--*  ADD       byref  <l:$185, c:$184>
N004 (  4,  4) [000021] ---XG-------                    +--*  IND       ref    <l:$246, c:$245>
N003 (  2,  2) [000284] -------N----                    |  \--*  ADD       byref  $181
N001 (  1,  1) [000020] ------------                    |     +--*  LCL_VAR   ref    V00 this         u:1 $80
N002 (  1,  1) [000283] ------------                    |     \--*  CNS_INT   long   8 field offset Fseq[_myList] $280
N005 (  1,  1) [000281] ------------                    \--*  CNS_INT   long   8 field offset Fseq[Head] $280

***** BB01
STMT00006 (IL   ???...  ???)
N003 ( 15,  8) [000028] --CXG-------              *  CALL      void   System.Object..ctor $VN.Void
N002 (  1,  1) [000027] ------------ this in rcx  \--*  LCL_VAR   ref    V09 tmp2         u:2 $243

***** BB01
STMT00008 (IL 0x037...  ???)
N006 (  6,  6) [000034] -A-XG-------              *  ASG       ref    $VN.Void
N004 (  4,  4) [000033] D--XG--N----              +--*  IND       ref    $243
N003 (  2,  2) [000287] -------N----              |  \--*  ADD       byref  <l:$187, c:$186>
N001 (  1,  1) [000031] ------------              |     +--*  LCL_VAR   ref    V10 tmp3         u:2 (last use) <l:$248, c:$94>
N002 (  1,  1) [000286] ------------              |     \--*  CNS_INT   long   16 field offset Fseq[Data] $281
N005 (  1,  1) [000032] ------------              \--*  LCL_VAR   ref    V09 tmp2         u:2 (last use) $243

***** BB01
STMT00009 (IL 0x03C...0x057)
N005 ( 16, 16) [000040] -AC-----R---              *  ASG       ref    $253
N004 (  1,  1) [000039] D------N----              +--*  LCL_VAR   ref    V11 tmp4         d:2 $253
N003 ( 16, 16) [000038] --C---------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST $253
N002 (  2, 10) [000037] H----------- arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb3ee6200 token $1c6

***** BB01
STMT00010 (IL   ???...  ???)
N007 ( 18, 21) [000042] --CXG-------              *  CALL      void   System.MulticastDelegate.CtorClosed $VN.Void
N004 (  1,  1) [000041] ------------ this in rcx  +--*  LCL_VAR   ref    V11 tmp4         u:2 $253
N005 (  1,  1) [000035] ------------ arg1 in rdx  +--*  LCL_VAR   ref    V00 this         u:1 $80
N006 (  2, 10) [000036] H----------- arg2 in r8   \--*  CNS_INT(h) long   0x7ffdb3b213f8 ftn $1c7

***** BB01
STMT00011 (IL 0x048...  ???)
N005 ( 16, 16) [000047] -AC-----R---              *  ASG       ref    $254
N004 (  1,  1) [000046] D------N----              +--*  LCL_VAR   ref    V12 tmp5         d:2 $254
N003 ( 16, 16) [000045] --C---------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWFAST $254
N002 (  2, 10) [000044] H----------- arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb3c84e80 token $1c8

***** BB01
STMT00012 (IL   ???...  ???)
N005 ( 16, 10) [000049] --CXG-------              *  CALL      void   System.Threading.Thread..ctor $VN.Void
N003 (  1,  1) [000048] ------------ this in rcx  +--*  LCL_VAR   ref    V12 tmp5         u:2 $254
N004 (  1,  1) [000043] ------------ arg1 in rdx  \--*  LCL_VAR   ref    V11 tmp4         u:2 (last use) $253

***** BB01
STMT00013 (IL 0x04D...  ???)
N003 ( 15,  8) [000051] --CXG-------              *  CALL nullcheck void   System.Threading.Thread.Start $VN.Void
N002 (  1,  1) [000050] ------------ this in rcx  \--*  LCL_VAR   ref    V12 tmp5         u:2 (last use) $254

***** BB01
STMT00014 (IL 0x052...  ???)
N003 ( 18,  8) [000055] -ACXG---R---              *  ASG       struct (copy) $VN.Void
N002 (  3,  2) [000053] D---G--N----              +--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  +--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
N001 ( 14,  5) [000052] --CXG-------              \--*  CALL      struct System.DateTime.get_Now $c2

***** BB01
STMT00015 (IL 0x058...0x06F)
N013 ( 53, 36) [000061] --CXG-------              *  CALL      void   System.Console.WriteLine $VN.Void
N012 ( 39, 30) [000060] --CXG------- arg0 in rcx  \--*  CALL      ref    System.String.Concat $ad
N007 ( 17, 10) [000300] -ACXG---R-L- arg0 SETUP      +--*  ASG       ref    $a8
N006 (  1,  1) [000299] D------N----                 |  +--*  LCL_VAR   ref    V22 tmp15        d:2 $a8
N005 ( 17, 10) [000058] --CXG-------                 |  \--*  CALL      ref    System.DateTime.ToString $a8
N004 (  3,  3) [000057] ------------ this in rcx     |     \--*  ADDR      byref  $143
N003 (  3,  2) [000056] ----G--N----                 |        \--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                     |        \--*    long   V02._dateData (offs=0x00) -> V17 tmp10         $c3
N009 (  1,  1) [000301] ------------ arg0 in rcx     +--*  LCL_VAR   ref    V22 tmp15        u:2 (last use) $a8
N011 (  4, 12) [000298] #---G------- arg1 in rdx     \--*  IND       ref    $ac
N010 (  2, 10) [000297] H-----------                    \--*  CNS_INT(h) long   0x750031F8 "	 Consumer thread started, adding items..." $1c9

***** BB01
STMT00016 (IL 0x06E...  ???)
N003 (  1,  3) [000064] -A------R---              *  ASG       int    $40
N002 (  1,  1) [000063] D------N----              +--*  LCL_VAR   int    V03 loc1         d:2 $40
N001 (  1,  1) [000062] ------------              \--*  CNS_INT   int    0 $40

***** BB01
STMT00072 (IL 0x0D8...  ???)
N004 (  5,  5) [000390] ------------              *  JTRUE     void  
N003 (  3,  3) [000391] J------N----              \--*  GE        int    $40
N001 (  1,  1) [000392] ------------                 +--*  LCL_VAR   int    V03 loc1         u:2 $40
N002 (  1,  1) [000393] ------------                 \--*  CNS_INT   int    10 $43

------------ BB33 [072..???), preds={BB01} succs={BB02}

***** BB33
STMT00075 (IL   ???...  ???)
N003 (  2, 10) [000404] ------------              *  COMMA     void  
N001 (  2, 10) [000402] H------H----              +--*  CNS_INT(h) long   0x7ffdb3ee58a8 method $1ca
N002 (  0,  0) [000403] ------------              \--*  NOP       void  

***** BB33
STMT00076 (IL   ???...  ???)
N003 (  2, 10) [000407] ------------              *  COMMA     void  
N001 (  2, 10) [000405] H------H----              +--*  CNS_INT(h) long   0x7ffdb3b058b8 token $1c3
N002 (  0,  0) [000406] ------------              \--*  NOP       void  

------------ BB02 [072..07B), preds={BB06,BB33} succs={BB03}

***** BB02
STMT00074 (IL   ???...  ???)
N005 (  0,  0) [000399] -A------R---              *  ASG       int   
N004 (  0,  0) [000397] D------N----              +--*  LCL_VAR   int    V03 loc1         d:3
N003 (  0,  0) [000398] ------------              \--*  PHI       int   
N001 (  0,  0) [000401] ------------ pred BB06       +--*  PHI_ARG   int    V03 loc1         u:4
N002 (  0,  0) [000400] ------------ pred BB33       \--*  PHI_ARG   int    V03 loc1         u:2 $40

***** BB02
STMT00018 (IL 0x072...0x078)
N006 (  4,  4) [000072] -A-XG---R---              *  ASG       ref    <l:$258, c:$257>
N005 (  1,  1) [000071] D------N----              +--*  LCL_VAR   ref    V04 loc2         d:3 <l:$256, c:$b2>
N004 (  4,  4) [000070] ---XG-------              \--*  IND       ref    <l:$258, c:$257>
N003 (  2,  2) [000305] -------N----                 \--*  ADD       byref  $181
N001 (  1,  1) [000069] ------------                    +--*  LCL_VAR   ref    V00 this         u:1 $80
N002 (  1,  1) [000304] ------------                    \--*  CNS_INT   long   8 field offset Fseq[_myList] $280

***** BB02
STMT00019 (IL 0x079...0x07A)
N003 (  5,  4) [000075] -A--G---R---              *  ASG       int    $40
N002 (  3,  2) [000074] D---G--N----              +--*  LCL_VAR   int   (AX) V05 loc3         
N001 (  1,  1) [000073] ------------              \--*  CNS_INT   int    0 $40

------------ BB03 [07B..0CA), preds={BB02} succs={BB04}

***** BB03
STMT00020 (IL 0x07B...0x093)
N005 ( 18, 11) [000079] --CXG-------              *  CALL      void   System.Threading.Monitor.Enter $VN.Void
N003 (  3,  3) [000078] ------------ arg1 in rdx  +--*  LCL_VAR_ADDR long   V05 loc3          $206
N004 (  1,  1) [000076] ------------ arg0 in rcx  \--*  LCL_VAR   ref    V04 loc2         u:3 <l:$256, c:$b2>

***** BB03
STMT00021 (IL 0x083...  ???)
N005 ( 16, 16) [000086] -AC-----R---              *  ASG       ref    $259
N004 (  1,  1) [000085] D------N----              +--*  LCL_VAR   ref    V13 tmp6         d:2 $259
N003 ( 16, 16) [000084] --C---------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST $259
N002 (  2, 10) [000083] H----------- arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb3ee58a8 method $1ca

***** BB03
STMT00023 (IL   ???...  ???)
N009 (  7,  7) [000090] -A-XG---R---              *  ASG       ref    <l:$267, c:$266>
N008 (  1,  1) [000089] D------N----              +--*  LCL_VAR   ref    V14 tmp7         d:2 <l:$25f, c:$b9>
N007 (  7,  7) [000082] ---XG-------              \--*  IND       ref    <l:$267, c:$266>
N006 (  5,  5) [000310] ---XG--N----                 \--*  ADD       byref  <l:$18b, c:$18a>
N004 (  4,  4) [000081] ---XG-------                    +--*  IND       ref    <l:$25d, c:$25c>
N003 (  2,  2) [000312] -------N----                    |  \--*  ADD       byref  $181
N001 (  1,  1) [000080] ------------                    |     +--*  LCL_VAR   ref    V00 this         u:1 $80
N002 (  1,  1) [000311] ------------                    |     \--*  CNS_INT   long   8 field offset Fseq[_myList] $280
N005 (  1,  1) [000309] ------------                    \--*  CNS_INT   long   8 field offset Fseq[Head] $280

***** BB03
STMT00065 (IL   ???...  ???)
N003 ( 15,  8) [000230] --CXG-------              *  CALL      void   System.Object..ctor $VN.Void
N002 (  1,  1) [000087] ------------ this in rcx  \--*  LCL_VAR   ref    V13 tmp6         u:2 $259

***** BB03
STMT00024 (IL 0x093...  ???)
N006 (  6,  6) [000094] -A-XG-------              *  ASG       ref    $VN.Void
N004 (  4,  4) [000093] D--XG--N----              +--*  IND       ref    $259
N003 (  2,  2) [000315] -------N----              |  \--*  ADD       byref  <l:$18d, c:$18c>
N001 (  1,  1) [000091] ------------              |     +--*  LCL_VAR   ref    V14 tmp7         u:2 (last use) <l:$25f, c:$b9>
N002 (  1,  1) [000314] ------------              |     \--*  CNS_INT   long   8 field offset Fseq[Next] $280
N005 (  1,  1) [000092] ------------              \--*  LCL_VAR   ref    V13 tmp6         u:2 (last use) $259

***** BB03
STMT00025 (IL 0x098...0x0AE)
N023 ( 17, 17) [000102] -A-XG-------              *  ASG       ref    $VN.Void
N011 (  8,  8) [000101] DA-XG--N----              +--*  IND       ref    $279
N010 (  6,  6) [000317] -A-XG--N----              |  \--*  ADD       byref  <l:$191, c:$190>
N008 (  5,  5) [000416] -A-XG-------              |     +--*  COMMA     ref    <l:$26d, c:$26c>
N006 (  4,  4) [000414] -A-XG---R---              |     |  +--*  ASG       ref    $VN.Void
N005 (  1,  1) [000413] D------N----              |     |  |  +--*  LCL_VAR   ref    V28 cse1         d:1 <l:$26d, c:$26c>
N004 (  4,  4) [000096] ---XG-------              |     |  |  \--*  IND       ref    <l:$26d, c:$26c>
N003 (  2,  2) [000319] -------N----              |     |  |     \--*  ADD       byref  $181
N001 (  1,  1) [000095] ------------              |     |  |        +--*  LCL_VAR   ref    V00 this         u:1 $80
N002 (  1,  1) [000318] ------------              |     |  |        \--*  CNS_INT   long   8 field offset Fseq[_myList] $280
N007 (  1,  1) [000415] ------------              |     |  \--*  LCL_VAR   ref    V28 cse1         u:1 <l:$26d, c:$26c>
N009 (  1,  1) [000316] ------------              |     \--*  CNS_INT   long   8 field offset Fseq[Head] $280
N022 (  8,  8) [000411] -A-XG-------              \--*  COMMA     ref    <l:$403, c:$402>
N020 (  7,  7) [000409] -A-XG---R---                 +--*  ASG       ref    $VN.Void
N019 (  1,  1) [000408] D------N----                 |  +--*  LCL_VAR   ref    V27 cse0         d:1 <l:$403, c:$402>
N018 (  7,  7) [000100] ---XG-------                 |  \--*  IND       ref    <l:$403, c:$402>
N017 (  5,  5) [000321] ---XG--N----                 |     \--*  ADD       byref  <l:$197, c:$196>
N015 (  4,  4) [000099] ---XG-------                 |        +--*  IND       ref    <l:$278, c:$277>
N014 (  2,  2) [000323] ----G--N----                 |        |  \--*  ADD       byref  <l:$191, c:$193>
N012 (  1,  1) [000417] ------------                 |        |     +--*  LCL_VAR   ref    V28 cse1         u:1 <l:$26b, c:$bf>
N013 (  1,  1) [000322] ------------                 |        |     \--*  CNS_INT   long   8 field offset Fseq[Head] $280
N016 (  1,  1) [000320] ------------                 |        \--*  CNS_INT   long   8 field offset Fseq[Next] $280
N021 (  1,  1) [000410] ------------                 \--*  LCL_VAR   ref    V27 cse0         u:1 <l:$403, c:$402>

***** BB03
STMT00026 (IL 0x0B3...0x0C3)
N005 ( 16, 16) [000109] -AC-----R---              *  ASG       ref    $404
N004 (  1,  1) [000108] D------N----              +--*  LCL_VAR   ref    V15 tmp8         d:2 $404
N003 ( 16, 16) [000107] --C---------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST $404
N002 (  2, 10) [000106] H----------- arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb3b058b8 token $1c3

***** BB03
STMT00028 (IL   ???...  ???)
N003 (  1,  3) [000113] -A--G---R---              *  ASG       ref    <l:$27b, c:$40a>
N002 (  1,  1) [000112] D------N----              +--*  LCL_VAR   ref    V16 tmp9         d:2 <l:$279, c:$3ca>
N001 (  1,  1) [000412] ------------              \--*  LCL_VAR   ref    V27 cse0         u:1 <l:$279, c:$3c4>

***** BB03
STMT00027 (IL   ???...  ???)
N003 ( 15,  8) [000111] --CXG-------              *  CALL      void   System.Object..ctor $VN.Void
N002 (  1,  1) [000110] ------------ this in rcx  \--*  LCL_VAR   ref    V15 tmp8         u:2 $404

***** BB03
STMT00029 (IL 0x0C3...  ???)
N006 (  6,  6) [000117] -A-XG-------              *  ASG       ref    $VN.Void
N004 (  4,  4) [000116] D--XG--N----              +--*  IND       ref    $404
N003 (  2,  2) [000333] -------N----              |  \--*  ADD       byref  <l:$19b, c:$19a>
N001 (  1,  1) [000114] ------------              |     +--*  LCL_VAR   ref    V16 tmp9         u:2 (last use) <l:$279, c:$3ca>
N002 (  1,  1) [000332] ------------              |     \--*  CNS_INT   long   16 field offset Fseq[Data] $281
N005 (  1,  1) [000115] ------------              \--*  LCL_VAR   ref    V15 tmp8         u:2 (last use) $404

------------ BB04 [0CA..0CD) -> BB06 (cond), preds={BB03} succs={BB05,BB06}

***** BB04
STMT00066 (IL   ???...  ???)
N005 (  8,  8) [000254] ----G-------              *  JTRUE     void  
N004 (  6,  6) [000255] J---G--N----              \--*  EQ        int    $344
N002 (  4,  4) [000334] ----G-------                 +--*  CAST      int <- bool <- int $343
N001 (  3,  2) [000256] ----G-------                 |  \--*  LCL_VAR   int   (AX) V05 loc3          $382
N003 (  1,  1) [000257] ------------                 \--*  CNS_INT   int    0 $40

------------ BB05 [0CD..0D4), preds={BB04} succs={BB06}

***** BB05
STMT00067 (IL   ???...  ???)
N003 ( 15,  7) [000258] --CXG-------              *  CALL      void   System.Threading.Monitor.Exit $VN.Void
N002 (  1,  1) [000259] ------------ arg0 in rcx  \--*  LCL_VAR   ref    V04 loc2         u:3 (last use) <l:$256, c:$b2>

------------ BB06 [0D4..0DD) -> BB02 (cond), preds={BB04,BB05} succs={BB07,BB02}

***** BB06
STMT00030 (IL 0x0D4...0x0D7)
N005 (  3,  3) [000122] -A------R---              *  ASG       int    $345
N004 (  1,  1) [000121] D------N----              +--*  LCL_VAR   int    V03 loc1         d:4 $345
N003 (  3,  3) [000120] ------------              \--*  ADD       int    $345
N001 (  1,  1) [000118] ------------                 +--*  LCL_VAR   int    V03 loc1         u:3 (last use) $380
N002 (  1,  1) [000119] ------------                 \--*  CNS_INT   int    1 $4e

***** BB06
STMT00017 (IL 0x0D8...0x0DB)
N004 (  5,  5) [000068] ------------              *  JTRUE     void  
N003 (  3,  3) [000067] J------N----              \--*  LT        int    $346
N001 (  1,  1) [000065] ------------                 +--*  LCL_VAR   int    V03 loc1         u:4 $345
N002 (  1,  1) [000066] ------------                 \--*  CNS_INT   int    10 $43

------------ BB07 [0DD..0F9), preds={BB01,BB06} succs={BB08}

***** BB07
STMT00034 (IL 0x0DD...0x0E2)
N003 ( 18,  8) [000133] -ACXG---R---              *  ASG       struct (copy) $VN.Void
N002 (  3,  2) [000131] D---G--N----              +--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  +--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
N001 ( 14,  5) [000130] --CXG-------              \--*  CALL      struct System.DateTime.get_Now $c4

***** BB07
STMT00035 (IL 0x0E3...0x0F4)
N013 ( 53, 36) [000139] --CXG-------              *  CALL      void   System.Console.WriteLine $VN.Void
N012 ( 39, 30) [000138] --CXG------- arg0 in rcx  \--*  CALL      ref    System.String.Concat $3da
N007 ( 17, 10) [000342] -ACXG---R-L- arg0 SETUP      +--*  ASG       ref    $3d5
N006 (  1,  1) [000341] D------N----                 |  +--*  LCL_VAR   ref    V23 tmp16        d:2 $3d5
N005 ( 17, 10) [000136] --CXG-------                 |  \--*  CALL      ref    System.DateTime.ToString $3d5
N004 (  3,  3) [000135] ------------ this in rcx     |     \--*  ADDR      byref  $145
N003 (  3,  2) [000134] ----G--N----                 |        \--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                     |        \--*    long   V02._dateData (offs=0x00) -> V17 tmp10         $c5
N009 (  1,  1) [000343] ------------ arg0 in rcx     +--*  LCL_VAR   ref    V23 tmp16        u:2 (last use) $3d5
N011 (  4, 12) [000340] #---G------- arg1 in rdx     \--*  IND       ref    $3d9
N010 (  2, 10) [000339] H-----------                    \--*  CNS_INT(h) long   0x75003200 "	 Waiting for list processing to complete..." $1cf

------------ BB08 [0F9..102), preds={BB07,BB12} succs={BB09}

***** BB08
STMT00036 (IL 0x0F9...0x0FF)
N006 (  4,  4) [000143] -A-XG---R---              *  ASG       ref    <l:$41c, c:$41b>
N005 (  1,  1) [000142] D------N----              +--*  LCL_VAR   ref    V04 loc2         d:2 <l:$41a, c:$3df>
N004 (  4,  4) [000141] ---XG-------              \--*  IND       ref    <l:$41c, c:$41b>
N003 (  2,  2) [000347] -------N----                 \--*  ADD       byref  $181
N001 (  1,  1) [000140] ------------                    +--*  LCL_VAR   ref    V00 this         u:1 $80
N002 (  1,  1) [000346] ------------                    \--*  CNS_INT   long   8 field offset Fseq[_myList] $280

***** BB08
STMT00037 (IL 0x100...0x101)
N003 (  5,  4) [000146] -A--G---R---              *  ASG       int    $40
N002 (  3,  2) [000145] D---G--N----              +--*  LCL_VAR   int   (AX) V05 loc3         
N001 (  1,  1) [000144] ------------              \--*  CNS_INT   int    0 $40

------------ BB09 [102..122) -> BB13 (cond), preds={BB08} succs={BB10,BB13}

***** BB09
STMT00038 (IL 0x102...0x120)
N005 ( 18, 11) [000150] --CXG-------              *  CALL      void   System.Threading.Monitor.Enter $VN.Void
N003 (  3,  3) [000149] ------------ arg1 in rdx  +--*  LCL_VAR_ADDR long   V05 loc3          $20a
N004 (  1,  1) [000147] ------------ arg0 in rcx  \--*  LCL_VAR   ref    V04 loc2         u:2 <l:$41a, c:$3df>

***** BB09
STMT00039 (IL 0x10A...  ???)
N017 ( 15, 15) [000158] -A-XG-------              *  JTRUE     void  
N016 ( 13, 13) [000157] NA-XG--N-U--              \--*  EQ        int    <l:$34a, c:$349>
N011 (  8,  8) [000153] -A-XG-------                 +--*  IND       ref    <l:$42a, c:$429>
N010 (  6,  6) [000351] -A-XG--N----                 |  \--*  ADD       byref  <l:$1a0, c:$19f>
N008 (  5,  5) [000421] -A-XG-------                 |     +--*  COMMA     ref    <l:$420, c:$41f>
N006 (  4,  4) [000419] -A-XG---R---                 |     |  +--*  ASG       ref    $VN.Void
N005 (  1,  1) [000418] D------N----                 |     |  |  +--*  LCL_VAR   ref    V29 cse2         d:1 <l:$420, c:$41f>
N004 (  4,  4) [000152] ---XG-------                 |     |  |  \--*  IND       ref    <l:$420, c:$41f>
N003 (  2,  2) [000353] -------N----                 |     |  |     \--*  ADD       byref  $181
N001 (  1,  1) [000151] ------------                 |     |  |        +--*  LCL_VAR   ref    V00 this         u:1 $80
N002 (  1,  1) [000352] ------------                 |     |  |        \--*  CNS_INT   long   8 field offset Fseq[_myList] $280
N007 (  1,  1) [000420] ------------                 |     |  \--*  LCL_VAR   ref    V29 cse2         u:1 <l:$420, c:$41f>
N009 (  1,  1) [000350] ------------                 |     \--*  CNS_INT   long   8 field offset Fseq[Head] $280
N015 (  4,  4) [000156] ---XG-------                 \--*  IND       ref    <l:$435, c:$434>
N014 (  2,  2) [000355] ----G--N----                    \--*  ADD       byref  <l:$1a4, c:$1a3>
N012 (  1,  1) [000422] ------------                       +--*  LCL_VAR   ref    V29 cse2         u:1 <l:$41e, c:$3e3>
N013 (  1,  1) [000354] ------------                       \--*  CNS_INT   long   16 field offset Fseq[Tail] $281

------------ BB10 [126..129) -> BB12 (cond), preds={BB09} succs={BB11,BB12}

***** BB10
STMT00069 (IL   ???...  ???)
N005 (  8,  8) [000261] ----G-------              *  JTRUE     void  
N004 (  6,  6) [000262] J---G--N----              \--*  EQ        int    $34e
N002 (  4,  4) [000358] ----G-------                 +--*  CAST      int <- bool <- int $34d
N001 (  3,  2) [000263] ----G-------                 |  \--*  LCL_VAR   int   (AX) V05 loc3          $384
N003 (  1,  1) [000264] ------------                 \--*  CNS_INT   int    0 $40

------------ BB11 [129..130), preds={BB10} succs={BB12}

***** BB11
STMT00070 (IL   ???...  ???)
N003 ( 15,  7) [000265] --CXG-------              *  CALL      void   System.Threading.Monitor.Exit $VN.Void
N002 (  1,  1) [000266] ------------ arg0 in rcx  \--*  LCL_VAR   ref    V04 loc2         u:2 (last use) <l:$41a, c:$3df>

------------ BB12 [130..139) -> BB08 (always), preds={BB10,BB11} succs={BB08}

***** BB12
STMT00040 (IL 0x130...0x137)
N003 ( 15,  7) [000160] --CXG-------              *  CALL      void   System.Threading.Thread.Sleep $VN.Void
N002 (  1,  1) [000159] ------------ arg0 in rcx  \--*  CNS_INT   int    100 $5b

------------ BB13 [???..???) -> BB30 (callf), preds={BB09} succs={BB30}

------------ BB14 [???..???) -> BB15 (ALWAYS), preds={BB32} succs={BB15}

------------ BB15 [139..17D), preds={BB14} succs={BB16}

***** BB15
STMT00041 (IL 0x139...0x13E)
N003 ( 18,  8) [000164] -ACXG---R---              *  ASG       struct (copy) $VN.Void
N002 (  3,  2) [000162] D---G--N----              +--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  +--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
N001 ( 14,  5) [000161] --CXG-------              \--*  CALL      struct System.DateTime.get_Now $c6

***** BB15
STMT00042 (IL 0x13F...0x178)
N013 ( 53, 36) [000170] --CXG-------              *  CALL      void   System.Console.WriteLine $VN.Void
N012 ( 39, 30) [000169] --CXG------- arg0 in rcx  \--*  CALL      ref    System.String.Concat $3f4
N007 ( 17, 10) [000367] -ACXG---R-L- arg0 SETUP      +--*  ASG       ref    $3ef
N006 (  1,  1) [000366] D------N----                 |  +--*  LCL_VAR   ref    V24 tmp17        d:2 $3ef
N005 ( 17, 10) [000167] --CXG-------                 |  \--*  CALL      ref    System.DateTime.ToString $3ef
N004 (  3,  3) [000166] ------------ this in rcx     |     \--*  ADDR      byref  $147
N003 (  3,  2) [000165] ----G--N----                 |        \--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                     |        \--*    long   V02._dateData (offs=0x00) -> V17 tmp10         $c7
N009 (  1,  1) [000368] ------------ arg0 in rcx     +--*  LCL_VAR   ref    V24 tmp17        u:2 (last use) $3ef
N011 (  4, 12) [000365] #---G------- arg1 in rdx     \--*  IND       ref    $3f3
N010 (  2, 10) [000364] H-----------                    \--*  CNS_INT(h) long   0x75003208 "	 Done.  Profiler is active, available options:" $1d3

***** BB15
STMT00043 (IL 0x155...  ???)
N004 ( 18, 18) [000172] --CXG-------              *  CALL      void   System.Console.WriteLine $VN.Void
N003 (  4, 12) [000372] #---G------- arg0 in rcx  \--*  IND       ref    $3f8
N002 (  2, 10) [000371] H-----------                 \--*  CNS_INT(h) long   0x75003210 "   Q = quit" $1d4

***** BB15
STMT00044 (IL 0x15F...  ???)
N004 ( 18, 18) [000174] --CXG-------              *  CALL      void   System.Console.WriteLine $VN.Void
N003 (  4, 12) [000375] #---G------- arg0 in rcx  \--*  IND       ref    $3fb
N002 (  2, 10) [000374] H-----------                 \--*  CNS_INT(h) long   0x75003218 "   H = heap snapshot" $1d5

***** BB15
STMT00045 (IL 0x169...  ???)
N004 ( 18, 18) [000176] --CXG-------              *  CALL      void   System.Console.WriteLine $VN.Void
N003 (  4, 12) [000378] #---G------- arg0 in rcx  \--*  IND       ref    $3fe
N002 (  2, 10) [000377] H-----------                 \--*  CNS_INT(h) long   0x75003220 "   G = GC (max gen)" $1d6

***** BB15
STMT00046 (IL 0x173...  ???)
N004 ( 18, 18) [000178] --CXG-------              *  CALL      void   System.Console.WriteLine $VN.Void
N003 (  4, 12) [000381] #---G------- arg0 in rcx  \--*  IND       ref    $4c1
N002 (  2, 10) [000380] H-----------                 \--*  CNS_INT(h) long   0x75003228 "   R = clear the running flag to stop the consumer thread" $1d7

------------ BB16 [???..???), preds={BB15,BB25} succs={BB17}

------------ BB17 [???..???), preds={BB16,BB24} succs={BB18}

------------ BB18 [???..???), preds={BB17,BB22} succs={BB19}

------------ BB19 [17D..18F) -> BB21 (cond), preds={BB18,BB20} succs={BB20,BB21}

***** BB19
STMT00048 (IL   ???...  ???)
N006 ( 18, 11) [000233] S-CXG-------              *  CALL      void   System.ConsolePal.ReadKey $VN.Void
N004 (  3,  3) [000235] ------------ arg0 in rcx  +--*  ADDR      long   $148
N003 (  3,  2) [000236] ----G--N----              |  \--*  LCL_VAR   struct<System.ConsoleKeyInfo, 12>(AX)(P) V06 loc4         
                                                  |  \--*    ushort V06._keyChar (offs=0x00) -> V18 tmp11        
                                                  |  \--*    int    V06._key (offs=0x04) -> V19 tmp12        
                                                  |  \--*    int    V06._mods (offs=0x08) -> V20 tmp13         $c8
N005 (  1,  1) [000232] ------------ arg1 in rdx  \--*  CNS_INT   int    0 $40

***** BB19
STMT00050 (IL   ???...  ???)
N004 (  7,  6) [000189] ----G-------              *  JTRUE     void  
N003 (  5,  4) [000188] N---G--N-U--              \--*  NE        int    $34f
N001 (  3,  2) [000240] ----G-------                 +--*  LCL_VAR   int   (AX) V19 tmp12         $385
N002 (  1,  1) [000187] ------------                 \--*  CNS_INT   int    71 $5e

------------ BB20 [18F..19B) -> BB19 (always), preds={BB19} succs={BB19}

***** BB20
STMT00061 (IL 0x18F...0x199)
N003 ( 28, 11) [000222] --CXG-------              *  CALL      void   System.GC.Collect $VN.Void
N002 ( 14,  5) [000221] --CXG------- arg0 in rcx  \--*  CALL      int    System.GC.get_MaxGeneration $305

------------ BB21 [19B..1A6) -> BB23 (cond), preds={BB19} succs={BB22,BB23}

***** BB21
STMT00052 (IL   ???...  ???)
N004 (  7,  6) [000196] ----G-------              *  JTRUE     void  
N003 (  5,  4) [000195] N---G--N-U--              \--*  NE        int    $350
N001 (  3,  2) [000244] ----G-------                 +--*  LCL_VAR   int   (AX) V19 tmp12         $385
N002 (  1,  1) [000194] ------------                 \--*  CNS_INT   int    72 $5f

------------ BB22 [1A6..1AD) -> BB18 (always), preds={BB21} succs={BB18}

***** BB22
STMT00060 (IL 0x1A6...0x1AB)
N001 ( 14,  5) [000220] --CXG-------              *  CALL      void   System.Diagnostics.Debugger.Break $VN.Void

------------ BB23 [1AD..1B8) -> BB25 (cond), preds={BB21} succs={BB24,BB25}

***** BB23
STMT00054 (IL   ???...  ???)
N004 (  7,  6) [000203] ----G-------              *  JTRUE     void  
N003 (  5,  4) [000202] N---G--N-U--              \--*  NE        int    $351
N001 (  3,  2) [000248] ----G-------                 +--*  LCL_VAR   int   (AX) V19 tmp12         $385
N002 (  1,  1) [000201] ------------                 \--*  CNS_INT   int    82 $60

------------ BB24 [1B8..1C1) -> BB17 (always), preds={BB23} succs={BB17}

***** BB24
STMT00059 (IL 0x1B8...0x1BA)
N006 (  7,  7) [000219] -A-XG-------              *  ASG       bool   $VN.Void
N004 (  5,  5) [000218] D--XG--N----              +--*  IND       bool   $40
N003 (  2,  2) [000387] -------N----              |  \--*  ADD       byref  $1a7
N001 (  1,  1) [000216] ------------              |     +--*  LCL_VAR   ref    V00 this         u:1 $80
N002 (  1,  1) [000386] ------------              |     \--*  CNS_INT   long   16 field offset Fseq[_running] $281
N005 (  1,  1) [000217] ------------              \--*  CNS_INT   int    0 $40

------------ BB25 [1C1..1CC) -> BB16 (cond), preds={BB23} succs={BB26,BB16}

***** BB25
STMT00056 (IL   ???...  ???)
N004 (  7,  6) [000210] ----G-------              *  JTRUE     void  
N003 (  5,  4) [000209] N---G--N-U--              \--*  NE        int    $352
N001 (  3,  2) [000252] ----G-------                 +--*  LCL_VAR   int   (AX) V19 tmp12         $385
N002 (  1,  1) [000208] ------------                 \--*  CNS_INT   int    81 $61

------------ BB26 [1CC..1D4) (return), preds={BB25} succs={}

***** BB26
STMT00057 (IL 0x1CC...0x1CE)
N006 (  7,  7) [000214] -A-XG-------              *  ASG       bool   $VN.Void
N004 (  5,  5) [000213] D--XG--N----              +--*  IND       bool   $40
N003 (  2,  2) [000389] -------N----              |  \--*  ADD       byref  $1a7
N001 (  1,  1) [000211] ------------              |     +--*  LCL_VAR   ref    V00 this         u:1 (last use) $80
N002 (  1,  1) [000388] ------------              |     \--*  CNS_INT   long   16 field offset Fseq[_running] $281
N005 (  1,  1) [000212] ------------              \--*  CNS_INT   int    0 $40

***** BB26
STMT00058 (IL 0x1D3...0x1D3)
N001 (  0,  0) [000215] ------------              *  RETURN    void   $442

------------ BB27 [0CA..0CD) -> BB29 (cond), preds={} succs={BB28,BB29}

***** BB27
STMT00031 (IL 0x0CA...0x0CB)
N005 (  8,  8) [000126] ----G-------              *  JTRUE     void  
N004 (  6,  6) [000125] J---G--N----              \--*  EQ        int    $342
N002 (  4,  4) [000336] ----G-------                 +--*  CAST      int <- bool <- int $341
N001 (  3,  2) [000123] ----G-------                 |  \--*  LCL_VAR   int   (AX) V05 loc3          $381
N003 (  1,  1) [000124] ------------                 \--*  CNS_INT   int    0 $40

------------ BB28 [0CD..0D3), preds={BB27} succs={BB29}

***** BB28
STMT00033 (IL 0x0CD...0x0CE)
N003 ( 15,  7) [000129] --CXG-------              *  CALL      void   System.Threading.Monitor.Exit $VN.Void
N002 (  1,  1) [000128] ------------ arg0 in rcx  \--*  LCL_VAR   ref    V04 loc2         u:3 (last use) <l:$256, c:$b2>

------------ BB29 [0D3..0D4) (finret), preds={BB27,BB28} succs={}

***** BB29
STMT00032 (IL 0x0D3...0x0D3)
N001 (  0,  0) [000127] ------------              *  RETFILT   void   $440

------------ BB30 [126..129) -> BB32 (cond), preds={BB13} succs={BB31,BB32}

***** BB30
STMT00062 (IL 0x126...0x127)
N005 (  8,  8) [000226] ----G-------              *  JTRUE     void  
N004 (  6,  6) [000225] J---G--N----              \--*  EQ        int    $34c
N002 (  4,  4) [000360] ----G-------                 +--*  CAST      int <- bool <- int $34b
N001 (  3,  2) [000223] ----G-------                 |  \--*  LCL_VAR   int   (AX) V05 loc3          $383
N003 (  1,  1) [000224] ------------                 \--*  CNS_INT   int    0 $40

------------ BB31 [129..12F), preds={BB30} succs={BB32}

***** BB31
STMT00064 (IL 0x129...0x12A)
N003 ( 15,  7) [000229] --CXG-------              *  CALL      void   System.Threading.Monitor.Exit $VN.Void
N002 (  1,  1) [000228] ------------ arg0 in rcx  \--*  LCL_VAR   ref    V04 loc2         u:2 (last use) <l:$41a, c:$3df>

------------ BB32 [12F..130) (finret), preds={BB30,BB31} succs={BB14}

***** BB32
STMT00063 (IL 0x12F...0x12F)
N001 (  0,  0) [000227] ------------              *  RETFILT   void   $441

-------------------------------------------------------------------------------------------------------------------
GenTreeNode creates assertion:
N004 (  4,  4) [000018] D--XG--N----              *  IND       ref    $240
In BB01 New Global Constant Assertion: ($80,$0) V00.01 != null, index = #01
GenTreeNode creates assertion:
N004 (  4,  4) [000033] D--XG--N----              *  IND       ref    $243
In BB01 New Global Constant Assertion: ($94,$0) V10.02 != null, index = #02

VN based non-null prop in BB01:
N003 ( 15,  8) [000051] --CXG-------              *  CALL nullcheck void   System.Threading.Thread.Start $VN.Void
ReMorphing args for 51.CALL:
argSlots=1, preallocatedArgCount=4, nextSlotNum=4, nextSlotByteOffset=32, outgoingArgSpaceSize=32
ArgTable for 51.CALL after fgMorphArgs:
fgArgTabEntry[arg 0 50.LCL_VAR ref (By ref), 1 reg: rcx, byteAlignment=8, lateArgInx=0, processed]

optVNAssertionPropCurStmt morphed tree:
N003 ( 15,  8) [000051] --CXG-------              *  CALL      void   System.Threading.Thread.Start $VN.Void
N002 (  1,  1) [000050] ------------ this in rcx  \--*  LCL_VAR   ref    V12 tmp5         u:2 (last use) $254

After constant propagation on [000390]:
STMT00072 (IL 0x0D8...  ???)
N004 (  5,  5) [000390] ------------              *  JTRUE     void  
N003 (  3,  3) [000391] J------N----              \--*  NE        int    $40
               [000423] ------------                 +--*  CNS_INT   int    0 $40
               [000424] ------------                 \--*  CNS_INT   int    0 $40

Folding operator with constant nodes into a constant:
N003 (  3,  3) [000391] J------N----              *  NE        int    $40
               [000423] ------------              +--*  CNS_INT   int    0 $40
               [000424] ------------              \--*  CNS_INT   int    0 $40
Bashed to int constant:
N003 (  3,  3) [000391] ------------              *  CNS_INT   int    0 $40

removing useless STMT00072 (IL 0x0D8...  ???)
N004 (  5,  5) [000390] ------------              *  JTRUE     void  
N003 (  3,  3) [000391] ------------              \--*  CNS_INT   int    0 $40
 from BB01

Conditional folded at BB01
BB01 becomes a BBJ_NONE
optVNAssertionPropCurStmt removed tree:
N004 (  5,  5) [000390] ------------              *  JTRUE     void  
N003 (  3,  3) [000391] ------------              \--*  CNS_INT   int    0 $40

GenTreeNode creates assertion:
N004 (  4,  4) [000093] D--XG--N----              *  IND       ref    $259
In BB03 New Global Constant Assertion: ($b9,$0) V14.02 != null, index = #03
GenTreeNode creates assertion:
N015 (  4,  4) [000099] ---XG-------              *  IND       ref    <l:$278, c:$277>
In BB03 New Global Constant Assertion: ($bf,$0) V28.01 != null, index = #04
GenTreeNode creates assertion:
N004 (  4,  4) [000116] D--XG--N----              *  IND       ref    $404
In BB03 New Global Constant Assertion: ($3ca,$0) V16.02 != null, index = #05
GenTreeNode creates assertion:
N004 (  5,  5) [000068] ------------              *  JTRUE     void  
In BB06 New Global Constant Assertion: ($346,$40) Const_Loop_Bnd {LT($345, $43)} is not  {IntCns 0}, index = #06
GenTreeNode creates assertion:
N004 (  5,  5) [000068] ------------              *  JTRUE     void  
In BB06 New Global Constant Assertion: ($346,$40) Const_Loop_Bnd {LT($345, $43)} is  {IntCns 0}, index = #07
GenTreeNode creates assertion:
N015 (  4,  4) [000156] ---XG-------              *  IND       ref    <l:$435, c:$434>
In BB09 New Global Constant Assertion: ($3e3,$0) V29.01 != null, index = #08

BB01 valueGen = #01 #02
BB33 valueGen = #NA
BB02 valueGen = #01
BB03 valueGen = #01 #03 #04 #05
BB04 valueGen = #NA => BB06 valueGen = #NA
BB05 valueGen = #NA
BB06 valueGen = #07 => BB02 valueGen = #06
BB07 valueGen = #NA
BB08 valueGen = #01
BB09 valueGen = #01 #08 => BB13 valueGen = #01 #08
BB10 valueGen = #NA => BB12 valueGen = #NA
BB11 valueGen = #NA
BB12 valueGen = #NA
BB13 valueGen = #NA
BB14 valueGen = #NA
BB15 valueGen = #NA
BB16 valueGen = #NA
BB17 valueGen = #NA
BB18 valueGen = #NA
BB19 valueGen = #NA => BB21 valueGen = #NA
BB20 valueGen = #NA
BB21 valueGen = #NA => BB23 valueGen = #NA
BB22 valueGen = #NA
BB23 valueGen = #NA => BB25 valueGen = #NA
BB24 valueGen = #01
BB25 valueGen = #NA => BB16 valueGen = #NA
BB26 valueGen = #01
BB27 valueGen = #NA => BB29 valueGen = #NA
BB28 valueGen = #NA
BB29 valueGen = #NA
BB30 valueGen = #NA => BB32 valueGen = #NA
BB31 valueGen = #NA
BB32 valueGen = #NA

BB01:
 in   = #NA
 out  = #01 #02
BB33:
 in   = #01 #02
 out  = #01 #02
BB02:
 in   = #01 #02
 out  = #01 #02
BB03:
 in   = #01 #02
 out  = #01 #02 #03 #04 #05
BB04:
 in   = #01 #02 #03 #04 #05
 out  = #01 #02 #03 #04 #05
 BB06 = #01 #02 #03 #04 #05
BB05:
 in   = #01 #02 #03 #04 #05
 out  = #01 #02 #03 #04 #05
BB06:
 in   = #01 #02 #03 #04 #05
 out  = #01 #02 #03 #04 #05 #07
 BB02 = #01 #02 #03 #04 #05 #06
BB07:
 in   = #01 #02 #03 #04 #05 #07
 out  = #01 #02 #03 #04 #05 #07
BB08:
 in   = #01 #02 #03 #04 #05 #07
 out  = #01 #02 #03 #04 #05 #07
BB09:
 in   = #01 #02 #03 #04 #05 #07
 out  = #01 #02 #03 #04 #05 #07 #08
 BB13 = #01 #02 #03 #04 #05 #07 #08
BB10:
 in   = #01 #02 #03 #04 #05 #07 #08
 out  = #01 #02 #03 #04 #05 #07 #08
 BB12 = #01 #02 #03 #04 #05 #07 #08
BB11:
 in   = #01 #02 #03 #04 #05 #07 #08
 out  = #01 #02 #03 #04 #05 #07 #08
BB12:
 in   = #01 #02 #03 #04 #05 #07 #08
 out  = #01 #02 #03 #04 #05 #07 #08
BB13:
 in   = #01 #02 #03 #04 #05 #07 #08
 out  = #01 #02 #03 #04 #05 #07 #08
BB14:
 in   = #01 #02 #03 #04 #05 #07
 out  = #01 #02 #03 #04 #05 #07
BB15:
 in   = #01 #02 #03 #04 #05 #07
 out  = #01 #02 #03 #04 #05 #07
BB16:
 in   = #01 #02 #03 #04 #05 #07
 out  = #01 #02 #03 #04 #05 #07
BB17:
 in   = #01 #02 #03 #04 #05 #07
 out  = #01 #02 #03 #04 #05 #07
BB18:
 in   = #01 #02 #03 #04 #05 #07
 out  = #01 #02 #03 #04 #05 #07
BB19:
 in   = #01 #02 #03 #04 #05 #07
 out  = #01 #02 #03 #04 #05 #07
 BB21 = #01 #02 #03 #04 #05 #07
BB20:
 in   = #01 #02 #03 #04 #05 #07
 out  = #01 #02 #03 #04 #05 #07
BB21:
 in   = #01 #02 #03 #04 #05 #07
 out  = #01 #02 #03 #04 #05 #07
 BB23 = #01 #02 #03 #04 #05 #07
BB22:
 in   = #01 #02 #03 #04 #05 #07
 out  = #01 #02 #03 #04 #05 #07
BB23:
 in   = #01 #02 #03 #04 #05 #07
 out  = #01 #02 #03 #04 #05 #07
 BB25 = #01 #02 #03 #04 #05 #07
BB24:
 in   = #01 #02 #03 #04 #05 #07
 out  = #01 #02 #03 #04 #05 #07
BB25:
 in   = #01 #02 #03 #04 #05 #07
 out  = #01 #02 #03 #04 #05 #07
 BB16 = #01 #02 #03 #04 #05 #07
BB26:
 in   = #01 #02 #03 #04 #05 #07
 out  = #01 #02 #03 #04 #05 #07
BB27:
 in   = #01 #02
 out  = #01 #02
 BB29 = #01 #02
BB28:
 in   = #01 #02
 out  = #01 #02
BB29:
 in   = #01 #02
 out  = #01 #02
BB30:
 in   = #01 #02 #03 #04 #05 #07
 out  = #01 #02 #03 #04 #05 #07
 BB32 = #01 #02 #03 #04 #05 #07
BB31:
 in   = #01 #02 #03 #04 #05 #07
 out  = #01 #02 #03 #04 #05 #07
BB32:
 in   = #01 #02 #03 #04 #05 #07
 out  = #01 #02 #03 #04 #05 #07

Propagating #NA for BB01, stmt STMT00000, tree [000000], tree -> #NA
Propagating #NA for BB01, stmt STMT00000, tree [000001], tree -> #NA
Propagating #NA for BB01, stmt STMT00000, tree [000003], tree -> #NA
Propagating #NA for BB01, stmt STMT00001, tree [000275], tree -> #NA
Propagating #NA for BB01, stmt STMT00001, tree [000268], tree -> #NA
Propagating #NA for BB01, stmt STMT00001, tree [000004], tree -> #NA
Propagating #NA for BB01, stmt STMT00001, tree [000005], tree -> #NA
Propagating #NA for BB01, stmt STMT00001, tree [000006], tree -> #NA
Propagating #NA for BB01, stmt STMT00001, tree [000271], tree -> #NA
Propagating #NA for BB01, stmt STMT00001, tree [000272], tree -> #NA
Propagating #NA for BB01, stmt STMT00001, tree [000274], tree -> #NA
Propagating #NA for BB01, stmt STMT00001, tree [000273], tree -> #NA
Propagating #NA for BB01, stmt STMT00001, tree [000269], tree -> #NA
Propagating #NA for BB01, stmt STMT00001, tree [000270], tree -> #NA
Propagating #NA for BB01, stmt STMT00001, tree [000008], tree -> #NA
Propagating #NA for BB01, stmt STMT00001, tree [000009], tree -> #NA
Propagating #NA for BB01, stmt STMT00002, tree [000276], tree -> #NA
Propagating #NA for BB01, stmt STMT00002, tree [000011], tree -> #NA
Propagating #NA for BB01, stmt STMT00002, tree [000012], tree -> #NA
Propagating #NA for BB01, stmt STMT00002, tree [000013], tree -> #NA
Propagating #NA for BB01, stmt STMT00002, tree [000014], tree -> #NA
Propagating #NA for BB01, stmt STMT00003, tree [000277], tree -> #NA
Propagating #NA for BB01, stmt STMT00003, tree [000015], tree -> #NA
Propagating #NA for BB01, stmt STMT00003, tree [000016], tree -> #NA
Propagating #NA for BB01, stmt STMT00004, tree [000010], tree -> #NA
Propagating #NA for BB01, stmt STMT00004, tree [000278], tree -> #NA
Propagating #NA for BB01, stmt STMT00004, tree [000279], tree -> #NA
Propagating #NA for BB01, stmt STMT00004, tree [000018], tree -> #01
Propagating #01 for BB01, stmt STMT00004, tree [000017], tree -> #NA
Propagating #01 for BB01, stmt STMT00004, tree [000019], tree -> #NA
Propagating #01 for BB01, stmt STMT00005, tree [000280], tree -> #NA
Propagating #01 for BB01, stmt STMT00005, tree [000023], tree -> #NA
Propagating #01 for BB01, stmt STMT00005, tree [000024], tree -> #NA
Propagating #01 for BB01, stmt STMT00005, tree [000025], tree -> #NA
Propagating #01 for BB01, stmt STMT00005, tree [000026], tree -> #NA
Propagating #01 for BB01, stmt STMT00007, tree [000020], tree -> #NA
Propagating #01 for BB01, stmt STMT00007, tree [000283], tree -> #NA
Propagating #01 for BB01, stmt STMT00007, tree [000284], tree -> #NA
Propagating #01 for BB01, stmt STMT00007, tree [000021], tree -> #01

VN based non-null prop in BB01:
N004 (  4,  4) [000021] ---XG-------              *  IND       ref    <l:$246, c:$245>
Propagating #01 for BB01, stmt STMT00007, tree [000281], tree -> #NA
Propagating #01 for BB01, stmt STMT00007, tree [000282], tree -> #NA
Propagating #01 for BB01, stmt STMT00007, tree [000022], tree -> #NA
Propagating #01 for BB01, stmt STMT00007, tree [000029], tree -> #NA
Propagating #01 for BB01, stmt STMT00007, tree [000030], tree -> #NA
Re-morphing this stmt:
STMT00007 (IL   ???...  ???)
N009 (  7,  7) [000030] -A-XG---R---              *  ASG       ref    <l:$250, c:$24f>
N008 (  1,  1) [000029] D------N----              +--*  LCL_VAR   ref    V10 tmp3         d:2 <l:$248, c:$94>
N007 (  7,  7) [000022] ---XG-------              \--*  IND       ref    <l:$250, c:$24f>
N006 (  5,  5) [000282] ---XG--N----                 \--*  ADD       byref  <l:$185, c:$184>
N004 (  4,  4) [000021] n---GO------                    +--*  IND       ref    <l:$246, c:$245>
N003 (  2,  2) [000284] -------N----                    |  \--*  ADD       byref  $181
N001 (  1,  1) [000020] ------------                    |     +--*  LCL_VAR   ref    V00 this         u:1 $80
N002 (  1,  1) [000283] ------------                    |     \--*  CNS_INT   long   8 field offset Fseq[_myList] $280
N005 (  1,  1) [000281] ------------                    \--*  CNS_INT   long   8 field offset Fseq[Head] $280

optAssertionPropMain morphed tree:
N009 (  7,  7) [000030] -A-XGO--R---              *  ASG       ref    <l:$250, c:$24f>
N008 (  1,  1) [000029] D------N----              +--*  LCL_VAR   ref    V10 tmp3         d:2 <l:$248, c:$94>
N007 (  7,  7) [000022] ---XGO------              \--*  IND       ref    <l:$250, c:$24f>
N006 (  5,  5) [000282] ----GO-N----                 \--*  ADD       byref  <l:$185, c:$184>
N004 (  4,  4) [000021] n---GO------                    +--*  IND       ref    <l:$246, c:$245>
N003 (  2,  2) [000284] -------N----                    |  \--*  ADD       byref  $181
N001 (  1,  1) [000020] ------------                    |     +--*  LCL_VAR   ref    V00 this         u:1 $80
N002 (  1,  1) [000283] ------------                    |     \--*  CNS_INT   long   8 field offset Fseq[_myList] $280
N005 (  1,  1) [000281] ------------                    \--*  CNS_INT   long   8 field offset Fseq[Head] $280

Propagating #01 for BB01, stmt STMT00006, tree [000285], tree -> #NA
Propagating #01 for BB01, stmt STMT00006, tree [000027], tree -> #NA
Propagating #01 for BB01, stmt STMT00006, tree [000028], tree -> #NA
Propagating #01 for BB01, stmt STMT00008, tree [000031], tree -> #NA
Propagating #01 for BB01, stmt STMT00008, tree [000286], tree -> #NA
Propagating #01 for BB01, stmt STMT00008, tree [000287], tree -> #NA
Propagating #01 for BB01, stmt STMT00008, tree [000033], tree -> #02
Propagating #01 #02 for BB01, stmt STMT00008, tree [000032], tree -> #NA
Propagating #01 #02 for BB01, stmt STMT00008, tree [000034], tree -> #NA
Propagating #01 #02 for BB01, stmt STMT00009, tree [000288], tree -> #NA
Propagating #01 #02 for BB01, stmt STMT00009, tree [000037], tree -> #NA
Propagating #01 #02 for BB01, stmt STMT00009, tree [000038], tree -> #NA
Propagating #01 #02 for BB01, stmt STMT00009, tree [000039], tree -> #NA
Propagating #01 #02 for BB01, stmt STMT00009, tree [000040], tree -> #NA
Propagating #01 #02 for BB01, stmt STMT00010, tree [000289], tree -> #NA
Propagating #01 #02 for BB01, stmt STMT00010, tree [000290], tree -> #NA
Propagating #01 #02 for BB01, stmt STMT00010, tree [000291], tree -> #NA
Propagating #01 #02 for BB01, stmt STMT00010, tree [000041], tree -> #NA
Propagating #01 #02 for BB01, stmt STMT00010, tree [000035], tree -> #NA
Propagating #01 #02 for BB01, stmt STMT00010, tree [000036], tree -> #NA
Propagating #01 #02 for BB01, stmt STMT00010, tree [000042], tree -> #NA
Propagating #01 #02 for BB01, stmt STMT00011, tree [000292], tree -> #NA
Propagating #01 #02 for BB01, stmt STMT00011, tree [000044], tree -> #NA
Propagating #01 #02 for BB01, stmt STMT00011, tree [000045], tree -> #NA
Propagating #01 #02 for BB01, stmt STMT00011, tree [000046], tree -> #NA
Propagating #01 #02 for BB01, stmt STMT00011, tree [000047], tree -> #NA
Propagating #01 #02 for BB01, stmt STMT00012, tree [000293], tree -> #NA
Propagating #01 #02 for BB01, stmt STMT00012, tree [000294], tree -> #NA
Propagating #01 #02 for BB01, stmt STMT00012, tree [000048], tree -> #NA
Propagating #01 #02 for BB01, stmt STMT00012, tree [000043], tree -> #NA
Propagating #01 #02 for BB01, stmt STMT00012, tree [000049], tree -> #NA
Propagating #01 #02 for BB01, stmt STMT00013, tree [000295], tree -> #NA
Propagating #01 #02 for BB01, stmt STMT00013, tree [000050], tree -> #NA
Propagating #01 #02 for BB01, stmt STMT00013, tree [000051], tree -> #NA
Propagating #01 #02 for BB01, stmt STMT00014, tree [000052], tree -> #NA
Propagating #01 #02 for BB01, stmt STMT00014, tree [000053], tree -> #NA
Propagating #01 #02 for BB01, stmt STMT00014, tree [000055], tree -> #NA
Propagating #01 #02 for BB01, stmt STMT00015, tree [000303], tree -> #NA
Propagating #01 #02 for BB01, stmt STMT00015, tree [000296], tree -> #NA
Propagating #01 #02 for BB01, stmt STMT00015, tree [000056], tree -> #NA
Propagating #01 #02 for BB01, stmt STMT00015, tree [000057], tree -> #NA
Propagating #01 #02 for BB01, stmt STMT00015, tree [000058], tree -> #NA
Propagating #01 #02 for BB01, stmt STMT00015, tree [000299], tree -> #NA
Propagating #01 #02 for BB01, stmt STMT00015, tree [000300], tree -> #NA
Propagating #01 #02 for BB01, stmt STMT00015, tree [000302], tree -> #NA
Propagating #01 #02 for BB01, stmt STMT00015, tree [000301], tree -> #NA
Propagating #01 #02 for BB01, stmt STMT00015, tree [000297], tree -> #NA
Propagating #01 #02 for BB01, stmt STMT00015, tree [000298], tree -> #NA
Propagating #01 #02 for BB01, stmt STMT00015, tree [000060], tree -> #NA
Propagating #01 #02 for BB01, stmt STMT00015, tree [000061], tree -> #NA
Propagating #01 #02 for BB01, stmt STMT00016, tree [000062], tree -> #NA
Propagating #01 #02 for BB01, stmt STMT00016, tree [000063], tree -> #NA
Propagating #01 #02 for BB01, stmt STMT00016, tree [000064], tree -> #NA
Propagating #01 #02 for BB33, stmt STMT00075, tree [000402], tree -> #NA
Propagating #01 #02 for BB33, stmt STMT00075, tree [000403], tree -> #NA
Propagating #01 #02 for BB33, stmt STMT00075, tree [000404], tree -> #NA
Propagating #01 #02 for BB33, stmt STMT00076, tree [000405], tree -> #NA
Propagating #01 #02 for BB33, stmt STMT00076, tree [000406], tree -> #NA
Propagating #01 #02 for BB33, stmt STMT00076, tree [000407], tree -> #NA
Propagating #01 #02 for BB02, stmt STMT00018, tree [000069], tree -> #NA
Propagating #01 #02 for BB02, stmt STMT00018, tree [000304], tree -> #NA
Propagating #01 #02 for BB02, stmt STMT00018, tree [000305], tree -> #NA
Propagating #01 #02 for BB02, stmt STMT00018, tree [000070], tree -> #01

VN based non-null prop in BB02:
N004 (  4,  4) [000070] ---XG-------              *  IND       ref    <l:$258, c:$257>
Propagating #01 #02 for BB02, stmt STMT00018, tree [000071], tree -> #NA
Propagating #01 #02 for BB02, stmt STMT00018, tree [000072], tree -> #NA
Re-morphing this stmt:
STMT00018 (IL 0x072...0x078)
N006 (  4,  4) [000072] -A-XG---R---              *  ASG       ref    <l:$258, c:$257>
N005 (  1,  1) [000071] D------N----              +--*  LCL_VAR   ref    V04 loc2         d:3 <l:$256, c:$b2>
N004 (  4,  4) [000070] n---GO------              \--*  IND       ref    <l:$258, c:$257>
N003 (  2,  2) [000305] -------N----                 \--*  ADD       byref  $181
N001 (  1,  1) [000069] ------------                    +--*  LCL_VAR   ref    V00 this         u:1 $80
N002 (  1,  1) [000304] ------------                    \--*  CNS_INT   long   8 field offset Fseq[_myList] $280

optAssertionPropMain morphed tree:
N006 (  8,  7) [000072] -A--GO--R---              *  ASG       ref    <l:$258, c:$257>
N005 (  3,  2) [000071] D------N----              +--*  LCL_VAR   ref    V04 loc2         d:3 <l:$256, c:$b2>
N004 (  4,  4) [000070] n---GO------              \--*  IND       ref    <l:$258, c:$257>
N003 (  2,  2) [000305] -------N----                 \--*  ADD       byref  $181
N001 (  1,  1) [000069] ------------                    +--*  LCL_VAR   ref    V00 this         u:1 $80
N002 (  1,  1) [000304] ------------                    \--*  CNS_INT   long   8 field offset Fseq[_myList] $280

Propagating #01 #02 for BB02, stmt STMT00019, tree [000073], tree -> #NA
Propagating #01 #02 for BB02, stmt STMT00019, tree [000074], tree -> #NA
Propagating #01 #02 for BB02, stmt STMT00019, tree [000075], tree -> #NA
Propagating #01 #02 for BB03, stmt STMT00020, tree [000307], tree -> #NA
Propagating #01 #02 for BB03, stmt STMT00020, tree [000306], tree -> #NA
Propagating #01 #02 for BB03, stmt STMT00020, tree [000078], tree -> #NA
Propagating #01 #02 for BB03, stmt STMT00020, tree [000076], tree -> #NA
Propagating #01 #02 for BB03, stmt STMT00020, tree [000079], tree -> #NA
Propagating #01 #02 for BB03, stmt STMT00021, tree [000308], tree -> #NA
Propagating #01 #02 for BB03, stmt STMT00021, tree [000083], tree -> #NA
Propagating #01 #02 for BB03, stmt STMT00021, tree [000084], tree -> #NA
Propagating #01 #02 for BB03, stmt STMT00021, tree [000085], tree -> #NA
Propagating #01 #02 for BB03, stmt STMT00021, tree [000086], tree -> #NA
Propagating #01 #02 for BB03, stmt STMT00023, tree [000080], tree -> #NA
Propagating #01 #02 for BB03, stmt STMT00023, tree [000311], tree -> #NA
Propagating #01 #02 for BB03, stmt STMT00023, tree [000312], tree -> #NA
Propagating #01 #02 for BB03, stmt STMT00023, tree [000081], tree -> #01

VN based non-null prop in BB03:
N004 (  4,  4) [000081] ---XG-------              *  IND       ref    <l:$25d, c:$25c>
Propagating #01 #02 for BB03, stmt STMT00023, tree [000309], tree -> #NA
Propagating #01 #02 for BB03, stmt STMT00023, tree [000310], tree -> #NA
Propagating #01 #02 for BB03, stmt STMT00023, tree [000082], tree -> #NA
Propagating #01 #02 for BB03, stmt STMT00023, tree [000089], tree -> #NA
Propagating #01 #02 for BB03, stmt STMT00023, tree [000090], tree -> #NA
Re-morphing this stmt:
STMT00023 (IL   ???...  ???)
N009 (  7,  7) [000090] -A-XG---R---              *  ASG       ref    <l:$267, c:$266>
N008 (  1,  1) [000089] D------N----              +--*  LCL_VAR   ref    V14 tmp7         d:2 <l:$25f, c:$b9>
N007 (  7,  7) [000082] ---XG-------              \--*  IND       ref    <l:$267, c:$266>
N006 (  5,  5) [000310] ---XG--N----                 \--*  ADD       byref  <l:$18b, c:$18a>
N004 (  4,  4) [000081] n---GO------                    +--*  IND       ref    <l:$25d, c:$25c>
N003 (  2,  2) [000312] -------N----                    |  \--*  ADD       byref  $181
N001 (  1,  1) [000080] ------------                    |     +--*  LCL_VAR   ref    V00 this         u:1 $80
N002 (  1,  1) [000311] ------------                    |     \--*  CNS_INT   long   8 field offset Fseq[_myList] $280
N005 (  1,  1) [000309] ------------                    \--*  CNS_INT   long   8 field offset Fseq[Head] $280

optAssertionPropMain morphed tree:
N009 (  7,  7) [000090] -A-XGO--R---              *  ASG       ref    <l:$267, c:$266>
N008 (  1,  1) [000089] D------N----              +--*  LCL_VAR   ref    V14 tmp7         d:2 <l:$25f, c:$b9>
N007 (  7,  7) [000082] ---XGO------              \--*  IND       ref    <l:$267, c:$266>
N006 (  5,  5) [000310] ----GO-N----                 \--*  ADD       byref  <l:$18b, c:$18a>
N004 (  4,  4) [000081] n---GO------                    +--*  IND       ref    <l:$25d, c:$25c>
N003 (  2,  2) [000312] -------N----                    |  \--*  ADD       byref  $181
N001 (  1,  1) [000080] ------------                    |     +--*  LCL_VAR   ref    V00 this         u:1 $80
N002 (  1,  1) [000311] ------------                    |     \--*  CNS_INT   long   8 field offset Fseq[_myList] $280
N005 (  1,  1) [000309] ------------                    \--*  CNS_INT   long   8 field offset Fseq[Head] $280

Propagating #01 #02 for BB03, stmt STMT00065, tree [000313], tree -> #NA
Propagating #01 #02 for BB03, stmt STMT00065, tree [000087], tree -> #NA
Propagating #01 #02 for BB03, stmt STMT00065, tree [000230], tree -> #NA
Propagating #01 #02 for BB03, stmt STMT00024, tree [000091], tree -> #NA
Propagating #01 #02 for BB03, stmt STMT00024, tree [000314], tree -> #NA
Propagating #01 #02 for BB03, stmt STMT00024, tree [000315], tree -> #NA
Propagating #01 #02 for BB03, stmt STMT00024, tree [000093], tree -> #03
Propagating #01 #02 #03 for BB03, stmt STMT00024, tree [000092], tree -> #NA
Propagating #01 #02 #03 for BB03, stmt STMT00024, tree [000094], tree -> #NA
Propagating #01 #02 #03 for BB03, stmt STMT00025, tree [000095], tree -> #NA
Propagating #01 #02 #03 for BB03, stmt STMT00025, tree [000318], tree -> #NA
Propagating #01 #02 #03 for BB03, stmt STMT00025, tree [000319], tree -> #NA
Propagating #01 #02 #03 for BB03, stmt STMT00025, tree [000096], tree -> #01

VN based non-null prop in BB03:
N004 (  4,  4) [000096] ---XG-------              *  IND       ref    <l:$26d, c:$26c>
Propagating #01 #02 #03 for BB03, stmt STMT00025, tree [000413], tree -> #NA
Propagating #01 #02 #03 for BB03, stmt STMT00025, tree [000414], tree -> #NA
Propagating #01 #02 #03 for BB03, stmt STMT00025, tree [000415], tree -> #NA
Propagating #01 #02 #03 for BB03, stmt STMT00025, tree [000416], tree -> #NA
Propagating #01 #02 #03 for BB03, stmt STMT00025, tree [000316], tree -> #NA
Propagating #01 #02 #03 for BB03, stmt STMT00025, tree [000317], tree -> #NA
Propagating #01 #02 #03 for BB03, stmt STMT00025, tree [000101], tree -> #NA
Propagating #01 #02 #03 for BB03, stmt STMT00025, tree [000417], tree -> #NA
Propagating #01 #02 #03 for BB03, stmt STMT00025, tree [000322], tree -> #NA
Propagating #01 #02 #03 for BB03, stmt STMT00025, tree [000323], tree -> #NA
Propagating #01 #02 #03 for BB03, stmt STMT00025, tree [000099], tree -> #04
Propagating #01 #02 #03 #04 for BB03, stmt STMT00025, tree [000320], tree -> #NA
Propagating #01 #02 #03 #04 for BB03, stmt STMT00025, tree [000321], tree -> #NA
Propagating #01 #02 #03 #04 for BB03, stmt STMT00025, tree [000100], tree -> #NA
Propagating #01 #02 #03 #04 for BB03, stmt STMT00025, tree [000408], tree -> #NA
Propagating #01 #02 #03 #04 for BB03, stmt STMT00025, tree [000409], tree -> #NA
Propagating #01 #02 #03 #04 for BB03, stmt STMT00025, tree [000410], tree -> #NA
Propagating #01 #02 #03 #04 for BB03, stmt STMT00025, tree [000411], tree -> #NA
Propagating #01 #02 #03 #04 for BB03, stmt STMT00025, tree [000102], tree -> #NA
Re-morphing this stmt:
STMT00025 (IL 0x098...0x0AE)
N023 ( 17, 17) [000102] -A-XG-------              *  ASG       ref    $VN.Void
N011 (  8,  8) [000101] DA-XG--N----              +--*  IND       ref    $279
N010 (  6,  6) [000317] -A-XG--N----              |  \--*  ADD       byref  <l:$191, c:$190>
N008 (  5,  5) [000416] -A-XG-------              |     +--*  COMMA     ref    <l:$26d, c:$26c>
N006 (  4,  4) [000414] -A-XG---R---              |     |  +--*  ASG       ref    $VN.Void
N005 (  1,  1) [000413] D------N----              |     |  |  +--*  LCL_VAR   ref    V28 cse1         d:1 <l:$26d, c:$26c>
N004 (  4,  4) [000096] n---GO------              |     |  |  \--*  IND       ref    <l:$26d, c:$26c>
N003 (  2,  2) [000319] -------N----              |     |  |     \--*  ADD       byref  $181
N001 (  1,  1) [000095] ------------              |     |  |        +--*  LCL_VAR   ref    V00 this         u:1 $80
N002 (  1,  1) [000318] ------------              |     |  |        \--*  CNS_INT   long   8 field offset Fseq[_myList] $280
N007 (  1,  1) [000415] ------------              |     |  \--*  LCL_VAR   ref    V28 cse1         u:1 <l:$26d, c:$26c>
N009 (  1,  1) [000316] ------------              |     \--*  CNS_INT   long   8 field offset Fseq[Head] $280
N022 (  8,  8) [000411] -A-XG-------              \--*  COMMA     ref    <l:$403, c:$402>
N020 (  7,  7) [000409] -A-XG---R---                 +--*  ASG       ref    $VN.Void
N019 (  1,  1) [000408] D------N----                 |  +--*  LCL_VAR   ref    V27 cse0         d:1 <l:$403, c:$402>
N018 (  7,  7) [000100] ---XG-------                 |  \--*  IND       ref    <l:$403, c:$402>
N017 (  5,  5) [000321] ---XG--N----                 |     \--*  ADD       byref  <l:$197, c:$196>
N015 (  4,  4) [000099] ---XG-------                 |        +--*  IND       ref    <l:$278, c:$277>
N014 (  2,  2) [000323] ----G--N----                 |        |  \--*  ADD       byref  <l:$191, c:$193>
N012 (  1,  1) [000417] ------------                 |        |     +--*  LCL_VAR   ref    V28 cse1         u:1 <l:$26b, c:$bf>
N013 (  1,  1) [000322] ------------                 |        |     \--*  CNS_INT   long   8 field offset Fseq[Head] $280
N016 (  1,  1) [000320] ------------                 |        \--*  CNS_INT   long   8 field offset Fseq[Next] $280
N021 (  1,  1) [000410] ------------                 \--*  LCL_VAR   ref    V27 cse0         u:1 <l:$403, c:$402>

optAssertionPropMain morphed tree:
N023 ( 17, 17) [000102] -A-XGO------              *  ASG       ref    $VN.Void
N011 (  8,  8) [000101] DA-XGO-N----              +--*  IND       ref    $279
N010 (  6,  6) [000317] -A--GO-N----              |  \--*  ADD       byref  <l:$191, c:$190>
N008 (  5,  5) [000416] -A--GO------              |     +--*  COMMA     ref    <l:$26d, c:$26c>
N006 (  4,  4) [000414] -A--GO--R---              |     |  +--*  ASG       ref    $VN.Void
N005 (  1,  1) [000413] D------N----              |     |  |  +--*  LCL_VAR   ref    V28 cse1         d:1 <l:$26d, c:$26c>
N004 (  4,  4) [000096] n---GO------              |     |  |  \--*  IND       ref    <l:$26d, c:$26c>
N003 (  2,  2) [000319] -------N----              |     |  |     \--*  ADD       byref  $181
N001 (  1,  1) [000095] ------------              |     |  |        +--*  LCL_VAR   ref    V00 this         u:1 $80
N002 (  1,  1) [000318] ------------              |     |  |        \--*  CNS_INT   long   8 field offset Fseq[_myList] $280
N007 (  1,  1) [000415] ------------              |     |  \--*  LCL_VAR   ref    V28 cse1         u:1 <l:$26d, c:$26c>
N009 (  1,  1) [000316] ------------              |     \--*  CNS_INT   long   8 field offset Fseq[Head] $280
N022 (  8,  8) [000411] -A-XG-------              \--*  COMMA     ref    <l:$403, c:$402>
N020 (  7,  7) [000409] -A-XG---R---                 +--*  ASG       ref    $VN.Void
N019 (  1,  1) [000408] D------N----                 |  +--*  LCL_VAR   ref    V27 cse0         d:1 <l:$403, c:$402>
N018 (  7,  7) [000100] ---XG-------                 |  \--*  IND       ref    <l:$403, c:$402>
N017 (  5,  5) [000321] ---XG--N----                 |     \--*  ADD       byref  <l:$197, c:$196>
N015 (  4,  4) [000099] ---XG-------                 |        +--*  IND       ref    <l:$278, c:$277>
N014 (  2,  2) [000323] ----G--N----                 |        |  \--*  ADD       byref  <l:$191, c:$193>
N012 (  1,  1) [000417] ------------                 |        |     +--*  LCL_VAR   ref    V28 cse1         u:1 <l:$26b, c:$bf>
N013 (  1,  1) [000322] ------------                 |        |     \--*  CNS_INT   long   8 field offset Fseq[Head] $280
N016 (  1,  1) [000320] ------------                 |        \--*  CNS_INT   long   8 field offset Fseq[Next] $280
N021 (  1,  1) [000410] ------------                 \--*  LCL_VAR   ref    V27 cse0         u:1 <l:$403, c:$402>

Propagating #01 #02 #03 #04 for BB03, stmt STMT00026, tree [000326], tree -> #NA
Propagating #01 #02 #03 #04 for BB03, stmt STMT00026, tree [000106], tree -> #NA
Propagating #01 #02 #03 #04 for BB03, stmt STMT00026, tree [000107], tree -> #NA
Propagating #01 #02 #03 #04 for BB03, stmt STMT00026, tree [000108], tree -> #NA
Propagating #01 #02 #03 #04 for BB03, stmt STMT00026, tree [000109], tree -> #NA
Propagating #01 #02 #03 #04 for BB03, stmt STMT00028, tree [000412], tree -> #NA
Propagating #01 #02 #03 #04 for BB03, stmt STMT00028, tree [000112], tree -> #NA
Propagating #01 #02 #03 #04 for BB03, stmt STMT00028, tree [000113], tree -> #NA
Propagating #01 #02 #03 #04 for BB03, stmt STMT00027, tree [000331], tree -> #NA
Propagating #01 #02 #03 #04 for BB03, stmt STMT00027, tree [000110], tree -> #NA
Propagating #01 #02 #03 #04 for BB03, stmt STMT00027, tree [000111], tree -> #NA
Propagating #01 #02 #03 #04 for BB03, stmt STMT00029, tree [000114], tree -> #NA
Propagating #01 #02 #03 #04 for BB03, stmt STMT00029, tree [000332], tree -> #NA
Propagating #01 #02 #03 #04 for BB03, stmt STMT00029, tree [000333], tree -> #NA
Propagating #01 #02 #03 #04 for BB03, stmt STMT00029, tree [000116], tree -> #05
Propagating #01 #02 #03 #04 #05 for BB03, stmt STMT00029, tree [000115], tree -> #NA
Propagating #01 #02 #03 #04 #05 for BB03, stmt STMT00029, tree [000117], tree -> #NA
Propagating #01 #02 #03 #04 #05 for BB04, stmt STMT00066, tree [000256], tree -> #NA
Propagating #01 #02 #03 #04 #05 for BB04, stmt STMT00066, tree [000334], tree -> #NA
Propagating #01 #02 #03 #04 #05 for BB04, stmt STMT00066, tree [000257], tree -> #NA
Propagating #01 #02 #03 #04 #05 for BB04, stmt STMT00066, tree [000255], tree -> #NA
Propagating #01 #02 #03 #04 #05 for BB04, stmt STMT00066, tree [000254], tree -> #NA
Propagating #01 #02 #03 #04 #05 for BB05, stmt STMT00067, tree [000335], tree -> #NA
Propagating #01 #02 #03 #04 #05 for BB05, stmt STMT00067, tree [000259], tree -> #NA
Propagating #01 #02 #03 #04 #05 for BB05, stmt STMT00067, tree [000258], tree -> #NA
Propagating #01 #02 #03 #04 #05 for BB06, stmt STMT00030, tree [000118], tree -> #NA
Propagating #01 #02 #03 #04 #05 for BB06, stmt STMT00030, tree [000119], tree -> #NA
Propagating #01 #02 #03 #04 #05 for BB06, stmt STMT00030, tree [000120], tree -> #NA
Propagating #01 #02 #03 #04 #05 for BB06, stmt STMT00030, tree [000121], tree -> #NA
Propagating #01 #02 #03 #04 #05 for BB06, stmt STMT00030, tree [000122], tree -> #NA
Propagating #01 #02 #03 #04 #05 for BB06, stmt STMT00017, tree [000065], tree -> #NA
Propagating #01 #02 #03 #04 #05 for BB06, stmt STMT00017, tree [000066], tree -> #NA
Propagating #01 #02 #03 #04 #05 for BB06, stmt STMT00017, tree [000067], tree -> #NA
Propagating #01 #02 #03 #04 #05 for BB06, stmt STMT00017, tree [000068], tree -> #06
Propagating #01 #02 #03 #04 #05 #07 for BB07, stmt STMT00034, tree [000130], tree -> #NA
Propagating #01 #02 #03 #04 #05 #07 for BB07, stmt STMT00034, tree [000131], tree -> #NA
Propagating #01 #02 #03 #04 #05 #07 for BB07, stmt STMT00034, tree [000133], tree -> #NA
Propagating #01 #02 #03 #04 #05 #07 for BB07, stmt STMT00035, tree [000345], tree -> #NA
Propagating #01 #02 #03 #04 #05 #07 for BB07, stmt STMT00035, tree [000338], tree -> #NA
Propagating #01 #02 #03 #04 #05 #07 for BB07, stmt STMT00035, tree [000134], tree -> #NA
Propagating #01 #02 #03 #04 #05 #07 for BB07, stmt STMT00035, tree [000135], tree -> #NA
Propagating #01 #02 #03 #04 #05 #07 for BB07, stmt STMT00035, tree [000136], tree -> #NA
Propagating #01 #02 #03 #04 #05 #07 for BB07, stmt STMT00035, tree [000341], tree -> #NA
Propagating #01 #02 #03 #04 #05 #07 for BB07, stmt STMT00035, tree [000342], tree -> #NA
Propagating #01 #02 #03 #04 #05 #07 for BB07, stmt STMT00035, tree [000344], tree -> #NA
Propagating #01 #02 #03 #04 #05 #07 for BB07, stmt STMT00035, tree [000343], tree -> #NA
Propagating #01 #02 #03 #04 #05 #07 for BB07, stmt STMT00035, tree [000339], tree -> #NA
Propagating #01 #02 #03 #04 #05 #07 for BB07, stmt STMT00035, tree [000340], tree -> #NA
Propagating #01 #02 #03 #04 #05 #07 for BB07, stmt STMT00035, tree [000138], tree -> #NA
Propagating #01 #02 #03 #04 #05 #07 for BB07, stmt STMT00035, tree [000139], tree -> #NA
Propagating #01 #02 #03 #04 #05 #07 for BB08, stmt STMT00036, tree [000140], tree -> #NA
Propagating #01 #02 #03 #04 #05 #07 for BB08, stmt STMT00036, tree [000346], tree -> #NA
Propagating #01 #02 #03 #04 #05 #07 for BB08, stmt STMT00036, tree [000347], tree -> #NA
Propagating #01 #02 #03 #04 #05 #07 for BB08, stmt STMT00036, tree [000141], tree -> #01

VN based non-null prop in BB08:
N004 (  4,  4) [000141] ---XG-------              *  IND       ref    <l:$41c, c:$41b>
Propagating #01 #02 #03 #04 #05 #07 for BB08, stmt STMT00036, tree [000142], tree -> #NA
Propagating #01 #02 #03 #04 #05 #07 for BB08, stmt STMT00036, tree [000143], tree -> #NA
Re-morphing this stmt:
STMT00036 (IL 0x0F9...0x0FF)
N006 (  4,  4) [000143] -A-XG---R---              *  ASG       ref    <l:$41c, c:$41b>
N005 (  1,  1) [000142] D------N----              +--*  LCL_VAR   ref    V04 loc2         d:2 <l:$41a, c:$3df>
N004 (  4,  4) [000141] n---GO------              \--*  IND       ref    <l:$41c, c:$41b>
N003 (  2,  2) [000347] -------N----                 \--*  ADD       byref  $181
N001 (  1,  1) [000140] ------------                    +--*  LCL_VAR   ref    V00 this         u:1 $80
N002 (  1,  1) [000346] ------------                    \--*  CNS_INT   long   8 field offset Fseq[_myList] $280

optAssertionPropMain morphed tree:
N006 (  8,  7) [000143] -A--GO--R---              *  ASG       ref    <l:$41c, c:$41b>
N005 (  3,  2) [000142] D------N----              +--*  LCL_VAR   ref    V04 loc2         d:2 <l:$41a, c:$3df>
N004 (  4,  4) [000141] n---GO------              \--*  IND       ref    <l:$41c, c:$41b>
N003 (  2,  2) [000347] -------N----                 \--*  ADD       byref  $181
N001 (  1,  1) [000140] ------------                    +--*  LCL_VAR   ref    V00 this         u:1 $80
N002 (  1,  1) [000346] ------------                    \--*  CNS_INT   long   8 field offset Fseq[_myList] $280

Propagating #01 #02 #03 #04 #05 #07 for BB08, stmt STMT00037, tree [000144], tree -> #NA
Propagating #01 #02 #03 #04 #05 #07 for BB08, stmt STMT00037, tree [000145], tree -> #NA
Propagating #01 #02 #03 #04 #05 #07 for BB08, stmt STMT00037, tree [000146], tree -> #NA
Propagating #01 #02 #03 #04 #05 #07 for BB09, stmt STMT00038, tree [000349], tree -> #NA
Propagating #01 #02 #03 #04 #05 #07 for BB09, stmt STMT00038, tree [000348], tree -> #NA
Propagating #01 #02 #03 #04 #05 #07 for BB09, stmt STMT00038, tree [000149], tree -> #NA
Propagating #01 #02 #03 #04 #05 #07 for BB09, stmt STMT00038, tree [000147], tree -> #NA
Propagating #01 #02 #03 #04 #05 #07 for BB09, stmt STMT00038, tree [000150], tree -> #NA
Propagating #01 #02 #03 #04 #05 #07 for BB09, stmt STMT00039, tree [000151], tree -> #NA
Propagating #01 #02 #03 #04 #05 #07 for BB09, stmt STMT00039, tree [000352], tree -> #NA
Propagating #01 #02 #03 #04 #05 #07 for BB09, stmt STMT00039, tree [000353], tree -> #NA
Propagating #01 #02 #03 #04 #05 #07 for BB09, stmt STMT00039, tree [000152], tree -> #01

VN based non-null prop in BB09:
N004 (  4,  4) [000152] ---XG-------              *  IND       ref    <l:$420, c:$41f>
Propagating #01 #02 #03 #04 #05 #07 for BB09, stmt STMT00039, tree [000418], tree -> #NA
Propagating #01 #02 #03 #04 #05 #07 for BB09, stmt STMT00039, tree [000419], tree -> #NA
Propagating #01 #02 #03 #04 #05 #07 for BB09, stmt STMT00039, tree [000420], tree -> #NA
Propagating #01 #02 #03 #04 #05 #07 for BB09, stmt STMT00039, tree [000421], tree -> #NA
Propagating #01 #02 #03 #04 #05 #07 for BB09, stmt STMT00039, tree [000350], tree -> #NA
Propagating #01 #02 #03 #04 #05 #07 for BB09, stmt STMT00039, tree [000351], tree -> #NA
Propagating #01 #02 #03 #04 #05 #07 for BB09, stmt STMT00039, tree [000153], tree -> #NA
Propagating #01 #02 #03 #04 #05 #07 for BB09, stmt STMT00039, tree [000422], tree -> #NA
Propagating #01 #02 #03 #04 #05 #07 for BB09, stmt STMT00039, tree [000354], tree -> #NA
Propagating #01 #02 #03 #04 #05 #07 for BB09, stmt STMT00039, tree [000355], tree -> #NA
Propagating #01 #02 #03 #04 #05 #07 for BB09, stmt STMT00039, tree [000156], tree -> #08
Propagating #01 #02 #03 #04 #05 #07 #08 for BB09, stmt STMT00039, tree [000157], tree -> #NA
Propagating #01 #02 #03 #04 #05 #07 #08 for BB09, stmt STMT00039, tree [000158], tree -> #NA
Re-morphing this stmt:
STMT00039 (IL 0x10A...  ???)
N017 ( 15, 15) [000158] -A-XG-------              *  JTRUE     void  
N016 ( 13, 13) [000157] NA-XG--N-U--              \--*  EQ        int    <l:$34a, c:$349>
N011 (  8,  8) [000153] -A-XG-------                 +--*  IND       ref    <l:$42a, c:$429>
N010 (  6,  6) [000351] -A-XG--N----                 |  \--*  ADD       byref  <l:$1a0, c:$19f>
N008 (  5,  5) [000421] -A-XG-------                 |     +--*  COMMA     ref    <l:$420, c:$41f>
N006 (  4,  4) [000419] -A-XG---R---                 |     |  +--*  ASG       ref    $VN.Void
N005 (  1,  1) [000418] D------N----                 |     |  |  +--*  LCL_VAR   ref    V29 cse2         d:1 <l:$420, c:$41f>
N004 (  4,  4) [000152] n---GO------                 |     |  |  \--*  IND       ref    <l:$420, c:$41f>
N003 (  2,  2) [000353] -------N----                 |     |  |     \--*  ADD       byref  $181
N001 (  1,  1) [000151] ------------                 |     |  |        +--*  LCL_VAR   ref    V00 this         u:1 $80
N002 (  1,  1) [000352] ------------                 |     |  |        \--*  CNS_INT   long   8 field offset Fseq[_myList] $280
N007 (  1,  1) [000420] ------------                 |     |  \--*  LCL_VAR   ref    V29 cse2         u:1 <l:$420, c:$41f>
N009 (  1,  1) [000350] ------------                 |     \--*  CNS_INT   long   8 field offset Fseq[Head] $280
N015 (  4,  4) [000156] ---XG-------                 \--*  IND       ref    <l:$435, c:$434>
N014 (  2,  2) [000355] ----G--N----                    \--*  ADD       byref  <l:$1a4, c:$1a3>
N012 (  1,  1) [000422] ------------                       +--*  LCL_VAR   ref    V29 cse2         u:1 <l:$41e, c:$3e3>
N013 (  1,  1) [000354] ------------                       \--*  CNS_INT   long   16 field offset Fseq[Tail] $281

optAssertionPropMain morphed tree:
N017 ( 15, 15) [000158] -A-XGO------              *  JTRUE     void  
N016 ( 13, 13) [000157] NA-XGO-N-U--              \--*  EQ        int    <l:$34a, c:$349>
N011 (  8,  8) [000153] -A-XGO------                 +--*  IND       ref    <l:$42a, c:$429>
N010 (  6,  6) [000351] -A--GO-N----                 |  \--*  ADD       byref  <l:$1a0, c:$19f>
N008 (  5,  5) [000421] -A--GO------                 |     +--*  COMMA     ref    <l:$420, c:$41f>
N006 (  4,  4) [000419] -A--GO--R---                 |     |  +--*  ASG       ref    $VN.Void
N005 (  1,  1) [000418] D------N----                 |     |  |  +--*  LCL_VAR   ref    V29 cse2         d:1 <l:$420, c:$41f>
N004 (  4,  4) [000152] n---GO------                 |     |  |  \--*  IND       ref    <l:$420, c:$41f>
N003 (  2,  2) [000353] -------N----                 |     |  |     \--*  ADD       byref  $181
N001 (  1,  1) [000151] ------------                 |     |  |        +--*  LCL_VAR   ref    V00 this         u:1 $80
N002 (  1,  1) [000352] ------------                 |     |  |        \--*  CNS_INT   long   8 field offset Fseq[_myList] $280
N007 (  1,  1) [000420] ------------                 |     |  \--*  LCL_VAR   ref    V29 cse2         u:1 <l:$420, c:$41f>
N009 (  1,  1) [000350] ------------                 |     \--*  CNS_INT   long   8 field offset Fseq[Head] $280
N015 (  4,  4) [000156] ---XG-------                 \--*  IND       ref    <l:$435, c:$434>
N014 (  2,  2) [000355] ----G--N----                    \--*  ADD       byref  <l:$1a4, c:$1a3>
N012 (  1,  1) [000422] ------------                       +--*  LCL_VAR   ref    V29 cse2         u:1 <l:$41e, c:$3e3>
N013 (  1,  1) [000354] ------------                       \--*  CNS_INT   long   16 field offset Fseq[Tail] $281

Propagating #01 #02 #03 #04 #05 #07 #08 for BB10, stmt STMT00069, tree [000263], tree -> #NA
Propagating #01 #02 #03 #04 #05 #07 #08 for BB10, stmt STMT00069, tree [000358], tree -> #NA
Propagating #01 #02 #03 #04 #05 #07 #08 for BB10, stmt STMT00069, tree [000264], tree -> #NA
Propagating #01 #02 #03 #04 #05 #07 #08 for BB10, stmt STMT00069, tree [000262], tree -> #NA
Propagating #01 #02 #03 #04 #05 #07 #08 for BB10, stmt STMT00069, tree [000261], tree -> #NA
Propagating #01 #02 #03 #04 #05 #07 #08 for BB11, stmt STMT00070, tree [000359], tree -> #NA
Propagating #01 #02 #03 #04 #05 #07 #08 for BB11, stmt STMT00070, tree [000266], tree -> #NA
Propagating #01 #02 #03 #04 #05 #07 #08 for BB11, stmt STMT00070, tree [000265], tree -> #NA
Propagating #01 #02 #03 #04 #05 #07 #08 for BB12, stmt STMT00040, tree [000362], tree -> #NA
Propagating #01 #02 #03 #04 #05 #07 #08 for BB12, stmt STMT00040, tree [000159], tree -> #NA
Propagating #01 #02 #03 #04 #05 #07 #08 for BB12, stmt STMT00040, tree [000160], tree -> #NA
Propagating #01 #02 #03 #04 #05 #07 for BB15, stmt STMT00041, tree [000161], tree -> #NA
Propagating #01 #02 #03 #04 #05 #07 for BB15, stmt STMT00041, tree [000162], tree -> #NA
Propagating #01 #02 #03 #04 #05 #07 for BB15, stmt STMT00041, tree [000164], tree -> #NA
Propagating #01 #02 #03 #04 #05 #07 for BB15, stmt STMT00042, tree [000370], tree -> #NA
Propagating #01 #02 #03 #04 #05 #07 for BB15, stmt STMT00042, tree [000363], tree -> #NA
Propagating #01 #02 #03 #04 #05 #07 for BB15, stmt STMT00042, tree [000165], tree -> #NA
Propagating #01 #02 #03 #04 #05 #07 for BB15, stmt STMT00042, tree [000166], tree -> #NA
Propagating #01 #02 #03 #04 #05 #07 for BB15, stmt STMT00042, tree [000167], tree -> #NA
Propagating #01 #02 #03 #04 #05 #07 for BB15, stmt STMT00042, tree [000366], tree -> #NA
Propagating #01 #02 #03 #04 #05 #07 for BB15, stmt STMT00042, tree [000367], tree -> #NA
Propagating #01 #02 #03 #04 #05 #07 for BB15, stmt STMT00042, tree [000369], tree -> #NA
Propagating #01 #02 #03 #04 #05 #07 for BB15, stmt STMT00042, tree [000368], tree -> #NA
Propagating #01 #02 #03 #04 #05 #07 for BB15, stmt STMT00042, tree [000364], tree -> #NA
Propagating #01 #02 #03 #04 #05 #07 for BB15, stmt STMT00042, tree [000365], tree -> #NA
Propagating #01 #02 #03 #04 #05 #07 for BB15, stmt STMT00042, tree [000169], tree -> #NA
Propagating #01 #02 #03 #04 #05 #07 for BB15, stmt STMT00042, tree [000170], tree -> #NA
Propagating #01 #02 #03 #04 #05 #07 for BB15, stmt STMT00043, tree [000373], tree -> #NA
Propagating #01 #02 #03 #04 #05 #07 for BB15, stmt STMT00043, tree [000371], tree -> #NA
Propagating #01 #02 #03 #04 #05 #07 for BB15, stmt STMT00043, tree [000372], tree -> #NA
Propagating #01 #02 #03 #04 #05 #07 for BB15, stmt STMT00043, tree [000172], tree -> #NA
Propagating #01 #02 #03 #04 #05 #07 for BB15, stmt STMT00044, tree [000376], tree -> #NA
Propagating #01 #02 #03 #04 #05 #07 for BB15, stmt STMT00044, tree [000374], tree -> #NA
Propagating #01 #02 #03 #04 #05 #07 for BB15, stmt STMT00044, tree [000375], tree -> #NA
Propagating #01 #02 #03 #04 #05 #07 for BB15, stmt STMT00044, tree [000174], tree -> #NA
Propagating #01 #02 #03 #04 #05 #07 for BB15, stmt STMT00045, tree [000379], tree -> #NA
Propagating #01 #02 #03 #04 #05 #07 for BB15, stmt STMT00045, tree [000377], tree -> #NA
Propagating #01 #02 #03 #04 #05 #07 for BB15, stmt STMT00045, tree [000378], tree -> #NA
Propagating #01 #02 #03 #04 #05 #07 for BB15, stmt STMT00045, tree [000176], tree -> #NA
Propagating #01 #02 #03 #04 #05 #07 for BB15, stmt STMT00046, tree [000382], tree -> #NA
Propagating #01 #02 #03 #04 #05 #07 for BB15, stmt STMT00046, tree [000380], tree -> #NA
Propagating #01 #02 #03 #04 #05 #07 for BB15, stmt STMT00046, tree [000381], tree -> #NA
Propagating #01 #02 #03 #04 #05 #07 for BB15, stmt STMT00046, tree [000178], tree -> #NA
Propagating #01 #02 #03 #04 #05 #07 for BB19, stmt STMT00048, tree [000383], tree -> #NA
Propagating #01 #02 #03 #04 #05 #07 for BB19, stmt STMT00048, tree [000384], tree -> #NA
Propagating #01 #02 #03 #04 #05 #07 for BB19, stmt STMT00048, tree [000236], tree -> #NA
Propagating #01 #02 #03 #04 #05 #07 for BB19, stmt STMT00048, tree [000235], tree -> #NA
Propagating #01 #02 #03 #04 #05 #07 for BB19, stmt STMT00048, tree [000232], tree -> #NA
Propagating #01 #02 #03 #04 #05 #07 for BB19, stmt STMT00048, tree [000233], tree -> #NA
Propagating #01 #02 #03 #04 #05 #07 for BB19, stmt STMT00050, tree [000240], tree -> #NA
Propagating #01 #02 #03 #04 #05 #07 for BB19, stmt STMT00050, tree [000187], tree -> #NA
Propagating #01 #02 #03 #04 #05 #07 for BB19, stmt STMT00050, tree [000188], tree -> #NA
Propagating #01 #02 #03 #04 #05 #07 for BB19, stmt STMT00050, tree [000189], tree -> #NA
Propagating #01 #02 #03 #04 #05 #07 for BB20, stmt STMT00061, tree [000385], tree -> #NA
Propagating #01 #02 #03 #04 #05 #07 for BB20, stmt STMT00061, tree [000221], tree -> #NA
Propagating #01 #02 #03 #04 #05 #07 for BB20, stmt STMT00061, tree [000222], tree -> #NA
Propagating #01 #02 #03 #04 #05 #07 for BB21, stmt STMT00052, tree [000244], tree -> #NA
Propagating #01 #02 #03 #04 #05 #07 for BB21, stmt STMT00052, tree [000194], tree -> #NA
Propagating #01 #02 #03 #04 #05 #07 for BB21, stmt STMT00052, tree [000195], tree -> #NA
Propagating #01 #02 #03 #04 #05 #07 for BB21, stmt STMT00052, tree [000196], tree -> #NA
Propagating #01 #02 #03 #04 #05 #07 for BB22, stmt STMT00060, tree [000220], tree -> #NA
Propagating #01 #02 #03 #04 #05 #07 for BB23, stmt STMT00054, tree [000248], tree -> #NA
Propagating #01 #02 #03 #04 #05 #07 for BB23, stmt STMT00054, tree [000201], tree -> #NA
Propagating #01 #02 #03 #04 #05 #07 for BB23, stmt STMT00054, tree [000202], tree -> #NA
Propagating #01 #02 #03 #04 #05 #07 for BB23, stmt STMT00054, tree [000203], tree -> #NA
Propagating #01 #02 #03 #04 #05 #07 for BB24, stmt STMT00059, tree [000216], tree -> #NA
Propagating #01 #02 #03 #04 #05 #07 for BB24, stmt STMT00059, tree [000386], tree -> #NA
Propagating #01 #02 #03 #04 #05 #07 for BB24, stmt STMT00059, tree [000387], tree -> #NA
Propagating #01 #02 #03 #04 #05 #07 for BB24, stmt STMT00059, tree [000218], tree -> #01

VN based non-null prop in BB24:
N004 (  5,  5) [000218] D--XG--N----              *  IND       bool   $40
Propagating #01 #02 #03 #04 #05 #07 for BB24, stmt STMT00059, tree [000217], tree -> #NA
Propagating #01 #02 #03 #04 #05 #07 for BB24, stmt STMT00059, tree [000219], tree -> #NA
Re-morphing this stmt:
STMT00059 (IL 0x1B8...0x1BA)
N006 (  7,  7) [000219] -A-XG-------              *  ASG       bool   $VN.Void
N004 (  5,  5) [000218] n---GO-N----              +--*  IND       bool   $40
N003 (  2,  2) [000387] -------N----              |  \--*  ADD       byref  $1a7
N001 (  1,  1) [000216] ------------              |     +--*  LCL_VAR   ref    V00 this         u:1 $80
N002 (  1,  1) [000386] ------------              |     \--*  CNS_INT   long   16 field offset Fseq[_running] $281
N005 (  1,  1) [000217] ------------              \--*  CNS_INT   int    0 $40

optAssertionPropMain morphed tree:
N006 (  7,  7) [000219] -A--GO------              *  ASG       bool   $VN.Void
N004 (  5,  5) [000218] n---GO-N----              +--*  IND       bool   $40
N003 (  2,  2) [000387] -------N----              |  \--*  ADD       byref  $1a7
N001 (  1,  1) [000216] ------------              |     +--*  LCL_VAR   ref    V00 this         u:1 $80
N002 (  1,  1) [000386] ------------              |     \--*  CNS_INT   long   16 field offset Fseq[_running] $281
N005 (  1,  1) [000217] ------------              \--*  CNS_INT   int    0 $40

Propagating #01 #02 #03 #04 #05 #07 for BB25, stmt STMT00056, tree [000252], tree -> #NA
Propagating #01 #02 #03 #04 #05 #07 for BB25, stmt STMT00056, tree [000208], tree -> #NA
Propagating #01 #02 #03 #04 #05 #07 for BB25, stmt STMT00056, tree [000209], tree -> #NA
Propagating #01 #02 #03 #04 #05 #07 for BB25, stmt STMT00056, tree [000210], tree -> #NA
Propagating #01 #02 #03 #04 #05 #07 for BB26, stmt STMT00057, tree [000211], tree -> #NA
Propagating #01 #02 #03 #04 #05 #07 for BB26, stmt STMT00057, tree [000388], tree -> #NA
Propagating #01 #02 #03 #04 #05 #07 for BB26, stmt STMT00057, tree [000389], tree -> #NA
Propagating #01 #02 #03 #04 #05 #07 for BB26, stmt STMT00057, tree [000213], tree -> #01

VN based non-null prop in BB26:
N004 (  5,  5) [000213] D--XG--N----              *  IND       bool   $40
Propagating #01 #02 #03 #04 #05 #07 for BB26, stmt STMT00057, tree [000212], tree -> #NA
Propagating #01 #02 #03 #04 #05 #07 for BB26, stmt STMT00057, tree [000214], tree -> #NA
Re-morphing this stmt:
STMT00057 (IL 0x1CC...0x1CE)
N006 (  7,  7) [000214] -A-XG-------              *  ASG       bool   $VN.Void
N004 (  5,  5) [000213] n---GO-N----              +--*  IND       bool   $40
N003 (  2,  2) [000389] -------N----              |  \--*  ADD       byref  $1a7
N001 (  1,  1) [000211] ------------              |     +--*  LCL_VAR   ref    V00 this         u:1 (last use) $80
N002 (  1,  1) [000388] ------------              |     \--*  CNS_INT   long   16 field offset Fseq[_running] $281
N005 (  1,  1) [000212] ------------              \--*  CNS_INT   int    0 $40

optAssertionPropMain morphed tree:
N006 (  7,  7) [000214] -A--GO------              *  ASG       bool   $VN.Void
N004 (  5,  5) [000213] n---GO-N----              +--*  IND       bool   $40
N003 (  2,  2) [000389] -------N----              |  \--*  ADD       byref  $1a7
N001 (  1,  1) [000211] ------------              |     +--*  LCL_VAR   ref    V00 this         u:1 (last use) $80
N002 (  1,  1) [000388] ------------              |     \--*  CNS_INT   long   16 field offset Fseq[_running] $281
N005 (  1,  1) [000212] ------------              \--*  CNS_INT   int    0 $40

Propagating #01 #02 #03 #04 #05 #07 for BB26, stmt STMT00058, tree [000215], tree -> #NA
Propagating #01 #02 for BB28, stmt STMT00033, tree [000337], tree -> #NA
Propagating #01 #02 for BB28, stmt STMT00033, tree [000128], tree -> #NA
Propagating #01 #02 for BB28, stmt STMT00033, tree [000129], tree -> #NA
Propagating #01 #02 for BB29, stmt STMT00032, tree [000127], tree -> #NA
Propagating #01 #02 #03 #04 #05 #07 for BB30, stmt STMT00062, tree [000223], tree -> #NA
Propagating #01 #02 #03 #04 #05 #07 for BB30, stmt STMT00062, tree [000360], tree -> #NA
Propagating #01 #02 #03 #04 #05 #07 for BB30, stmt STMT00062, tree [000224], tree -> #NA
Propagating #01 #02 #03 #04 #05 #07 for BB30, stmt STMT00062, tree [000225], tree -> #NA
Propagating #01 #02 #03 #04 #05 #07 for BB30, stmt STMT00062, tree [000226], tree -> #NA
Propagating #01 #02 #03 #04 #05 #07 for BB31, stmt STMT00064, tree [000361], tree -> #NA
Propagating #01 #02 #03 #04 #05 #07 for BB31, stmt STMT00064, tree [000228], tree -> #NA
Propagating #01 #02 #03 #04 #05 #07 for BB31, stmt STMT00064, tree [000229], tree -> #NA
Propagating #01 #02 #03 #04 #05 #07 for BB32, stmt STMT00063, tree [000227], tree -> #NA
*************** In fgDebugCheckBBlist

*************** Finishing PHASE Assertion prop

*************** Starting PHASE Optimize index checks
*************** In OptimizeRangeChecks()
Blocks/trees before phase

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..072)                                     i hascall gcsafe newobj 
BB33 [0048]  1       BB01                  1       [072..???)                                     internal LoopPH 
BB02 [0001]  2       BB06,BB33             8     0 [072..07B)                                     i Loop gcsafe bwd bwd-target 
BB03 [0002]  1  0    BB02                  8     0 [07B..0CA)                 T0      try { }     keep i try hascall gcsafe newobj bwd 
BB04 [0038]  1       BB03                  8     0 [0CA..0CD)-> BB06 ( cond )                     keep i gcsafe bwd cfb 
BB05 [0039]  1       BB04                  4     0 [0CD..0D4)                                     i hascall gcsafe bwd 
BB06 [0006]  2       BB04,BB05             8     0 [0D4..0DD)-> BB02 ( cond )                     i gcsafe bwd 
BB07 [0008]  1       BB06                  1       [0DD..0F9)                                     i hascall gcsafe 
BB08 [0009]  2       BB07,BB12             8     1 [0F9..102)                                     i Loop gcsafe bwd bwd-target 
BB09 [0010]  1  1    BB08                  8     1 [102..122)-> BB13 ( cond ) T1      try { }     keep i try hascall gcsafe bwd 
BB10 [0041]  1       BB09                  8     1 [126..129)-> BB12 ( cond )                     keep i gcsafe bwd cfb 
BB11 [0042]  1       BB10                  4     1 [129..130)                                     i hascall gcsafe bwd 
BB12 [0016]  2       BB10,BB11             8     1 [130..139)-> BB08 (always)                     i hascall gcsafe bwd 
BB13 [0030]  1       BB09                  1       [???..???)-> BB30 (callf )                     i internal gcsafe 
BB14 [0031]  1       BB32                  1       [???..???)-> BB15 (ALWAYS)                     i internal gcsafe KEEP 
BB15 [0017]  1       BB14                  1       [139..17D)                                     i hascall gcsafe 
BB16 [0045]  2       BB15,BB25             1     2 [???..???)                                     internal gcsafe 
BB17 [0046]  2       BB16,BB24             1     3 [???..???)                                     internal gcsafe 
BB18 [0047]  2       BB17,BB22             1     4 [???..???)                                     internal gcsafe 
BB19 [0018]  2       BB18,BB20             8     5 [17D..18F)-> BB21 ( cond )                     i Loop hascall gcsafe bwd bwd-target 
BB20 [0019]  1       BB19                  8     5 [18F..19B)-> BB19 (always)                     i hascall gcsafe bwd 
BB21 [0020]  1       BB19                  1     4 [19B..1A6)-> BB23 ( cond )                     i gcsafe bwd 
BB22 [0021]  1       BB21                  1     4 [1A6..1AD)-> BB18 (always)                     i hascall gcsafe bwd 
BB23 [0022]  1       BB21                  1     3 [1AD..1B8)-> BB25 ( cond )                     i gcsafe bwd 
BB24 [0023]  1       BB23                  1     3 [1B8..1C1)-> BB17 (always)                     i gcsafe bwd 
BB25 [0024]  1       BB23                  1     2 [1C1..1CC)-> BB16 ( cond )                     i gcsafe bwd 
BB26 [0025]  1       BB25                  1       [1CC..1D4)        (return)                     i gcsafe 
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ funclets follow
BB27 [0003]  1     0                       0       [0CA..0CD)-> BB29 ( cond )    H0 F fault {     keep i rare flet bwd 
BB28 [0004]  1     0 BB27                  0       [0CD..0D3)                    H0               i rare hascall bwd 
BB29 [0005]  2     0 BB27,BB28             0       [0D3..0D4)        (finret)    H0   }           i rare bwd 
BB30 [0013]  2     1 BB13                  1       [126..129)-> BB32 ( cond )    H1 F finally {   keep i gcsafe flet bwd 
BB31 [0014]  1     1 BB30                  1       [129..12F)                    H1               i hascall gcsafe bwd 
BB32 [0015]  2     1 BB30,BB31             1       [12F..130)        (finret)    H1   }           i gcsafe bwd 
-----------------------------------------------------------------------------------------------------------------------------------------

------------ BB01 [000..072), preds={} succs={BB33}

***** BB01
STMT00000 (IL 0x000...0x005)
N003 ( 18,  8) [000003] -ACXG---R---              *  ASG       struct (copy) $VN.Void
N002 (  3,  2) [000001] D---G--N----              +--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  +--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
N001 ( 14,  5) [000000] --CXG-------              \--*  CALL      struct System.DateTime.get_Now $c0

***** BB01
STMT00001 (IL 0x006...0x022)
N013 ( 53, 36) [000009] --CXG-------              *  CALL      void   System.Console.WriteLine $VN.Void
N012 ( 39, 30) [000008] --CXG------- arg0 in rcx  \--*  CALL      ref    System.String.Concat $89
N007 ( 17, 10) [000272] -ACXG---R-L- arg0 SETUP      +--*  ASG       ref    $84
N006 (  1,  1) [000271] D------N----                 |  +--*  LCL_VAR   ref    V21 tmp14        d:2 $84
N005 ( 17, 10) [000006] --CXG-------                 |  \--*  CALL      ref    System.DateTime.ToString $84
N004 (  3,  3) [000005] ------------ this in rcx     |     \--*  ADDR      byref  $141
N003 (  3,  2) [000004] ----G--N----                 |        \--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                     |        \--*    long   V02._dateData (offs=0x00) -> V17 tmp10         $c1
N009 (  1,  1) [000273] ------------ arg0 in rcx     +--*  LCL_VAR   ref    V21 tmp14        u:2 (last use) $84
N011 (  4, 12) [000270] #---G------- arg1 in rdx     \--*  IND       ref    $88
N010 (  2, 10) [000269] H-----------                    \--*  CNS_INT(h) long   0x750031F0 "	 Created list" $1c0

***** BB01
STMT00002 (IL 0x01C...  ???)
N005 ( 16, 16) [000014] -AC-----R---              *  ASG       ref    $240
N004 (  1,  1) [000013] D------N----              +--*  LCL_VAR   ref    V08 tmp1         d:2 $240
N003 ( 16, 16) [000012] --C---------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST $240
N002 (  2, 10) [000011] H----------- arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb3ee2350 method $1c1

***** BB01
STMT00003 (IL   ???...  ???)
N003 ( 15,  8) [000016] --CXG-------              *  CALL      void   FalseLeakRepro.List..ctor $VN.Void
N002 (  1,  1) [000015] ------------ this in rcx  \--*  LCL_VAR   ref    V08 tmp1         u:2 $240

***** BB01
STMT00004 (IL 0x022...  ???)
N006 (  6,  6) [000019] -A-XG-------              *  ASG       ref    $VN.Void
N004 (  4,  4) [000018] D--XG--N----              +--*  IND       ref    $240
N003 (  2,  2) [000279] -------N----              |  \--*  ADD       byref  $181
N001 (  1,  1) [000010] ------------              |     +--*  LCL_VAR   ref    V00 this         u:1 $80
N002 (  1,  1) [000278] ------------              |     \--*  CNS_INT   long   8 field offset Fseq[_myList] $280
N005 (  1,  1) [000017] ------------              \--*  LCL_VAR   ref    V08 tmp1         u:2 (last use) $240

***** BB01
STMT00005 (IL 0x027...0x037)
N005 ( 16, 16) [000026] -AC-----R---              *  ASG       ref    $243
N004 (  1,  1) [000025] D------N----              +--*  LCL_VAR   ref    V09 tmp2         d:2 $243
N003 ( 16, 16) [000024] --C---------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST $243
N002 (  2, 10) [000023] H----------- arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb3b058b8 token $1c3

***** BB01
STMT00007 (IL   ???...  ???)
N009 (  7,  7) [000030] -A-XGO--R---              *  ASG       ref    <l:$250, c:$24f>
N008 (  1,  1) [000029] D------N----              +--*  LCL_VAR   ref    V10 tmp3         d:2 <l:$248, c:$94>
N007 (  7,  7) [000022] ---XGO------              \--*  IND       ref    <l:$250, c:$24f>
N006 (  5,  5) [000282] ----GO-N----                 \--*  ADD       byref  <l:$185, c:$184>
N004 (  4,  4) [000021] n---GO------                    +--*  IND       ref    <l:$246, c:$245>
N003 (  2,  2) [000284] -------N----                    |  \--*  ADD       byref  $181
N001 (  1,  1) [000020] ------------                    |     +--*  LCL_VAR   ref    V00 this         u:1 $80
N002 (  1,  1) [000283] ------------                    |     \--*  CNS_INT   long   8 field offset Fseq[_myList] $280
N005 (  1,  1) [000281] ------------                    \--*  CNS_INT   long   8 field offset Fseq[Head] $280

***** BB01
STMT00006 (IL   ???...  ???)
N003 ( 15,  8) [000028] --CXG-------              *  CALL      void   System.Object..ctor $VN.Void
N002 (  1,  1) [000027] ------------ this in rcx  \--*  LCL_VAR   ref    V09 tmp2         u:2 $243

***** BB01
STMT00008 (IL 0x037...  ???)
N006 (  6,  6) [000034] -A-XG-------              *  ASG       ref    $VN.Void
N004 (  4,  4) [000033] D--XG--N----              +--*  IND       ref    $243
N003 (  2,  2) [000287] -------N----              |  \--*  ADD       byref  <l:$187, c:$186>
N001 (  1,  1) [000031] ------------              |     +--*  LCL_VAR   ref    V10 tmp3         u:2 (last use) <l:$248, c:$94>
N002 (  1,  1) [000286] ------------              |     \--*  CNS_INT   long   16 field offset Fseq[Data] $281
N005 (  1,  1) [000032] ------------              \--*  LCL_VAR   ref    V09 tmp2         u:2 (last use) $243

***** BB01
STMT00009 (IL 0x03C...0x057)
N005 ( 16, 16) [000040] -AC-----R---              *  ASG       ref    $253
N004 (  1,  1) [000039] D------N----              +--*  LCL_VAR   ref    V11 tmp4         d:2 $253
N003 ( 16, 16) [000038] --C---------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST $253
N002 (  2, 10) [000037] H----------- arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb3ee6200 token $1c6

***** BB01
STMT00010 (IL   ???...  ???)
N007 ( 18, 21) [000042] --CXG-------              *  CALL      void   System.MulticastDelegate.CtorClosed $VN.Void
N004 (  1,  1) [000041] ------------ this in rcx  +--*  LCL_VAR   ref    V11 tmp4         u:2 $253
N005 (  1,  1) [000035] ------------ arg1 in rdx  +--*  LCL_VAR   ref    V00 this         u:1 $80
N006 (  2, 10) [000036] H----------- arg2 in r8   \--*  CNS_INT(h) long   0x7ffdb3b213f8 ftn $1c7

***** BB01
STMT00011 (IL 0x048...  ???)
N005 ( 16, 16) [000047] -AC-----R---              *  ASG       ref    $254
N004 (  1,  1) [000046] D------N----              +--*  LCL_VAR   ref    V12 tmp5         d:2 $254
N003 ( 16, 16) [000045] --C---------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWFAST $254
N002 (  2, 10) [000044] H----------- arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb3c84e80 token $1c8

***** BB01
STMT00012 (IL   ???...  ???)
N005 ( 16, 10) [000049] --CXG-------              *  CALL      void   System.Threading.Thread..ctor $VN.Void
N003 (  1,  1) [000048] ------------ this in rcx  +--*  LCL_VAR   ref    V12 tmp5         u:2 $254
N004 (  1,  1) [000043] ------------ arg1 in rdx  \--*  LCL_VAR   ref    V11 tmp4         u:2 (last use) $253

***** BB01
STMT00013 (IL 0x04D...  ???)
N003 ( 15,  8) [000051] --CXG-------              *  CALL      void   System.Threading.Thread.Start $VN.Void
N002 (  1,  1) [000050] ------------ this in rcx  \--*  LCL_VAR   ref    V12 tmp5         u:2 (last use) $254

***** BB01
STMT00014 (IL 0x052...  ???)
N003 ( 18,  8) [000055] -ACXG---R---              *  ASG       struct (copy) $VN.Void
N002 (  3,  2) [000053] D---G--N----              +--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  +--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
N001 ( 14,  5) [000052] --CXG-------              \--*  CALL      struct System.DateTime.get_Now $c2

***** BB01
STMT00015 (IL 0x058...0x06F)
N013 ( 53, 36) [000061] --CXG-------              *  CALL      void   System.Console.WriteLine $VN.Void
N012 ( 39, 30) [000060] --CXG------- arg0 in rcx  \--*  CALL      ref    System.String.Concat $ad
N007 ( 17, 10) [000300] -ACXG---R-L- arg0 SETUP      +--*  ASG       ref    $a8
N006 (  1,  1) [000299] D------N----                 |  +--*  LCL_VAR   ref    V22 tmp15        d:2 $a8
N005 ( 17, 10) [000058] --CXG-------                 |  \--*  CALL      ref    System.DateTime.ToString $a8
N004 (  3,  3) [000057] ------------ this in rcx     |     \--*  ADDR      byref  $143
N003 (  3,  2) [000056] ----G--N----                 |        \--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                     |        \--*    long   V02._dateData (offs=0x00) -> V17 tmp10         $c3
N009 (  1,  1) [000301] ------------ arg0 in rcx     +--*  LCL_VAR   ref    V22 tmp15        u:2 (last use) $a8
N011 (  4, 12) [000298] #---G------- arg1 in rdx     \--*  IND       ref    $ac
N010 (  2, 10) [000297] H-----------                    \--*  CNS_INT(h) long   0x750031F8 "	 Consumer thread started, adding items..." $1c9

***** BB01
STMT00016 (IL 0x06E...  ???)
N003 (  1,  3) [000064] -A------R---              *  ASG       int    $40
N002 (  1,  1) [000063] D------N----              +--*  LCL_VAR   int    V03 loc1         d:2 $40
N001 (  1,  1) [000062] ------------              \--*  CNS_INT   int    0 $40

------------ BB33 [072..???), preds={BB01} succs={BB02}

***** BB33
STMT00075 (IL   ???...  ???)
N003 (  2, 10) [000404] ------------              *  COMMA     void  
N001 (  2, 10) [000402] H------H----              +--*  CNS_INT(h) long   0x7ffdb3ee58a8 method $1ca
N002 (  0,  0) [000403] ------------              \--*  NOP       void  

***** BB33
STMT00076 (IL   ???...  ???)
N003 (  2, 10) [000407] ------------              *  COMMA     void  
N001 (  2, 10) [000405] H------H----              +--*  CNS_INT(h) long   0x7ffdb3b058b8 token $1c3
N002 (  0,  0) [000406] ------------              \--*  NOP       void  

------------ BB02 [072..07B), preds={BB06,BB33} succs={BB03}

***** BB02
STMT00074 (IL   ???...  ???)
N005 (  0,  0) [000399] -A------R---              *  ASG       int   
N004 (  0,  0) [000397] D------N----              +--*  LCL_VAR   int    V03 loc1         d:3
N003 (  0,  0) [000398] ------------              \--*  PHI       int   
N001 (  0,  0) [000401] ------------ pred BB06       +--*  PHI_ARG   int    V03 loc1         u:4
N002 (  0,  0) [000400] ------------ pred BB33       \--*  PHI_ARG   int    V03 loc1         u:2 $40

***** BB02
STMT00018 (IL 0x072...0x078)
N006 (  8,  7) [000072] -A--GO--R---              *  ASG       ref    <l:$258, c:$257>
N005 (  3,  2) [000071] D------N----              +--*  LCL_VAR   ref    V04 loc2         d:3 <l:$256, c:$b2>
N004 (  4,  4) [000070] n---GO------              \--*  IND       ref    <l:$258, c:$257>
N003 (  2,  2) [000305] -------N----                 \--*  ADD       byref  $181
N001 (  1,  1) [000069] ------------                    +--*  LCL_VAR   ref    V00 this         u:1 $80
N002 (  1,  1) [000304] ------------                    \--*  CNS_INT   long   8 field offset Fseq[_myList] $280

***** BB02
STMT00019 (IL 0x079...0x07A)
N003 (  5,  4) [000075] -A--G---R---              *  ASG       int    $40
N002 (  3,  2) [000074] D---G--N----              +--*  LCL_VAR   int   (AX) V05 loc3         
N001 (  1,  1) [000073] ------------              \--*  CNS_INT   int    0 $40

------------ BB03 [07B..0CA), preds={BB02} succs={BB04}

***** BB03
STMT00020 (IL 0x07B...0x093)
N005 ( 18, 11) [000079] --CXG-------              *  CALL      void   System.Threading.Monitor.Enter $VN.Void
N003 (  3,  3) [000078] ------------ arg1 in rdx  +--*  LCL_VAR_ADDR long   V05 loc3          $206
N004 (  1,  1) [000076] ------------ arg0 in rcx  \--*  LCL_VAR   ref    V04 loc2         u:3 <l:$256, c:$b2>

***** BB03
STMT00021 (IL 0x083...  ???)
N005 ( 16, 16) [000086] -AC-----R---              *  ASG       ref    $259
N004 (  1,  1) [000085] D------N----              +--*  LCL_VAR   ref    V13 tmp6         d:2 $259
N003 ( 16, 16) [000084] --C---------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST $259
N002 (  2, 10) [000083] H----------- arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb3ee58a8 method $1ca

***** BB03
STMT00023 (IL   ???...  ???)
N009 (  7,  7) [000090] -A-XGO--R---              *  ASG       ref    <l:$267, c:$266>
N008 (  1,  1) [000089] D------N----              +--*  LCL_VAR   ref    V14 tmp7         d:2 <l:$25f, c:$b9>
N007 (  7,  7) [000082] ---XGO------              \--*  IND       ref    <l:$267, c:$266>
N006 (  5,  5) [000310] ----GO-N----                 \--*  ADD       byref  <l:$18b, c:$18a>
N004 (  4,  4) [000081] n---GO------                    +--*  IND       ref    <l:$25d, c:$25c>
N003 (  2,  2) [000312] -------N----                    |  \--*  ADD       byref  $181
N001 (  1,  1) [000080] ------------                    |     +--*  LCL_VAR   ref    V00 this         u:1 $80
N002 (  1,  1) [000311] ------------                    |     \--*  CNS_INT   long   8 field offset Fseq[_myList] $280
N005 (  1,  1) [000309] ------------                    \--*  CNS_INT   long   8 field offset Fseq[Head] $280

***** BB03
STMT00065 (IL   ???...  ???)
N003 ( 15,  8) [000230] --CXG-------              *  CALL      void   System.Object..ctor $VN.Void
N002 (  1,  1) [000087] ------------ this in rcx  \--*  LCL_VAR   ref    V13 tmp6         u:2 $259

***** BB03
STMT00024 (IL 0x093...  ???)
N006 (  6,  6) [000094] -A-XG-------              *  ASG       ref    $VN.Void
N004 (  4,  4) [000093] D--XG--N----              +--*  IND       ref    $259
N003 (  2,  2) [000315] -------N----              |  \--*  ADD       byref  <l:$18d, c:$18c>
N001 (  1,  1) [000091] ------------              |     +--*  LCL_VAR   ref    V14 tmp7         u:2 (last use) <l:$25f, c:$b9>
N002 (  1,  1) [000314] ------------              |     \--*  CNS_INT   long   8 field offset Fseq[Next] $280
N005 (  1,  1) [000092] ------------              \--*  LCL_VAR   ref    V13 tmp6         u:2 (last use) $259

***** BB03
STMT00025 (IL 0x098...0x0AE)
N023 ( 17, 17) [000102] -A-XGO------              *  ASG       ref    $VN.Void
N011 (  8,  8) [000101] DA-XGO-N----              +--*  IND       ref    $279
N010 (  6,  6) [000317] -A--GO-N----              |  \--*  ADD       byref  <l:$191, c:$190>
N008 (  5,  5) [000416] -A--GO------              |     +--*  COMMA     ref    <l:$26d, c:$26c>
N006 (  4,  4) [000414] -A--GO--R---              |     |  +--*  ASG       ref    $VN.Void
N005 (  1,  1) [000413] D------N----              |     |  |  +--*  LCL_VAR   ref    V28 cse1         d:1 <l:$26d, c:$26c>
N004 (  4,  4) [000096] n---GO------              |     |  |  \--*  IND       ref    <l:$26d, c:$26c>
N003 (  2,  2) [000319] -------N----              |     |  |     \--*  ADD       byref  $181
N001 (  1,  1) [000095] ------------              |     |  |        +--*  LCL_VAR   ref    V00 this         u:1 $80
N002 (  1,  1) [000318] ------------              |     |  |        \--*  CNS_INT   long   8 field offset Fseq[_myList] $280
N007 (  1,  1) [000415] ------------              |     |  \--*  LCL_VAR   ref    V28 cse1         u:1 <l:$26d, c:$26c>
N009 (  1,  1) [000316] ------------              |     \--*  CNS_INT   long   8 field offset Fseq[Head] $280
N022 (  8,  8) [000411] -A-XG-------              \--*  COMMA     ref    <l:$403, c:$402>
N020 (  7,  7) [000409] -A-XG---R---                 +--*  ASG       ref    $VN.Void
N019 (  1,  1) [000408] D------N----                 |  +--*  LCL_VAR   ref    V27 cse0         d:1 <l:$403, c:$402>
N018 (  7,  7) [000100] ---XG-------                 |  \--*  IND       ref    <l:$403, c:$402>
N017 (  5,  5) [000321] ---XG--N----                 |     \--*  ADD       byref  <l:$197, c:$196>
N015 (  4,  4) [000099] ---XG-------                 |        +--*  IND       ref    <l:$278, c:$277>
N014 (  2,  2) [000323] ----G--N----                 |        |  \--*  ADD       byref  <l:$191, c:$193>
N012 (  1,  1) [000417] ------------                 |        |     +--*  LCL_VAR   ref    V28 cse1         u:1 <l:$26b, c:$bf>
N013 (  1,  1) [000322] ------------                 |        |     \--*  CNS_INT   long   8 field offset Fseq[Head] $280
N016 (  1,  1) [000320] ------------                 |        \--*  CNS_INT   long   8 field offset Fseq[Next] $280
N021 (  1,  1) [000410] ------------                 \--*  LCL_VAR   ref    V27 cse0         u:1 <l:$403, c:$402>

***** BB03
STMT00026 (IL 0x0B3...0x0C3)
N005 ( 16, 16) [000109] -AC-----R---              *  ASG       ref    $404
N004 (  1,  1) [000108] D------N----              +--*  LCL_VAR   ref    V15 tmp8         d:2 $404
N003 ( 16, 16) [000107] --C---------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST $404
N002 (  2, 10) [000106] H----------- arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb3b058b8 token $1c3

***** BB03
STMT00028 (IL   ???...  ???)
N003 (  1,  3) [000113] -A--G---R---              *  ASG       ref    <l:$27b, c:$40a>
N002 (  1,  1) [000112] D------N----              +--*  LCL_VAR   ref    V16 tmp9         d:2 <l:$279, c:$3ca>
N001 (  1,  1) [000412] ------------              \--*  LCL_VAR   ref    V27 cse0         u:1 <l:$279, c:$3c4>

***** BB03
STMT00027 (IL   ???...  ???)
N003 ( 15,  8) [000111] --CXG-------              *  CALL      void   System.Object..ctor $VN.Void
N002 (  1,  1) [000110] ------------ this in rcx  \--*  LCL_VAR   ref    V15 tmp8         u:2 $404

***** BB03
STMT00029 (IL 0x0C3...  ???)
N006 (  6,  6) [000117] -A-XG-------              *  ASG       ref    $VN.Void
N004 (  4,  4) [000116] D--XG--N----              +--*  IND       ref    $404
N003 (  2,  2) [000333] -------N----              |  \--*  ADD       byref  <l:$19b, c:$19a>
N001 (  1,  1) [000114] ------------              |     +--*  LCL_VAR   ref    V16 tmp9         u:2 (last use) <l:$279, c:$3ca>
N002 (  1,  1) [000332] ------------              |     \--*  CNS_INT   long   16 field offset Fseq[Data] $281
N005 (  1,  1) [000115] ------------              \--*  LCL_VAR   ref    V15 tmp8         u:2 (last use) $404

------------ BB04 [0CA..0CD) -> BB06 (cond), preds={BB03} succs={BB05,BB06}

***** BB04
STMT00066 (IL   ???...  ???)
N005 (  8,  8) [000254] ----G-------              *  JTRUE     void  
N004 (  6,  6) [000255] J---G--N----              \--*  EQ        int    $344
N002 (  4,  4) [000334] ----G-------                 +--*  CAST      int <- bool <- int $343
N001 (  3,  2) [000256] ----G-------                 |  \--*  LCL_VAR   int   (AX) V05 loc3          $382
N003 (  1,  1) [000257] ------------                 \--*  CNS_INT   int    0 $40

------------ BB05 [0CD..0D4), preds={BB04} succs={BB06}

***** BB05
STMT00067 (IL   ???...  ???)
N003 ( 15,  7) [000258] --CXG-------              *  CALL      void   System.Threading.Monitor.Exit $VN.Void
N002 (  1,  1) [000259] ------------ arg0 in rcx  \--*  LCL_VAR   ref    V04 loc2         u:3 (last use) <l:$256, c:$b2>

------------ BB06 [0D4..0DD) -> BB02 (cond), preds={BB04,BB05} succs={BB07,BB02}

***** BB06
STMT00030 (IL 0x0D4...0x0D7)
N005 (  3,  3) [000122] -A------R---              *  ASG       int    $345
N004 (  1,  1) [000121] D------N----              +--*  LCL_VAR   int    V03 loc1         d:4 $345
N003 (  3,  3) [000120] ------------              \--*  ADD       int    $345
N001 (  1,  1) [000118] ------------                 +--*  LCL_VAR   int    V03 loc1         u:3 (last use) $380
N002 (  1,  1) [000119] ------------                 \--*  CNS_INT   int    1 $4e

***** BB06
STMT00017 (IL 0x0D8...0x0DB)
N004 (  5,  5) [000068] ------------              *  JTRUE     void  
N003 (  3,  3) [000067] J------N----              \--*  LT        int    $346
N001 (  1,  1) [000065] ------------                 +--*  LCL_VAR   int    V03 loc1         u:4 $345
N002 (  1,  1) [000066] ------------                 \--*  CNS_INT   int    10 $43

------------ BB07 [0DD..0F9), preds={BB06} succs={BB08}

***** BB07
STMT00034 (IL 0x0DD...0x0E2)
N003 ( 18,  8) [000133] -ACXG---R---              *  ASG       struct (copy) $VN.Void
N002 (  3,  2) [000131] D---G--N----              +--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  +--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
N001 ( 14,  5) [000130] --CXG-------              \--*  CALL      struct System.DateTime.get_Now $c4

***** BB07
STMT00035 (IL 0x0E3...0x0F4)
N013 ( 53, 36) [000139] --CXG-------              *  CALL      void   System.Console.WriteLine $VN.Void
N012 ( 39, 30) [000138] --CXG------- arg0 in rcx  \--*  CALL      ref    System.String.Concat $3da
N007 ( 17, 10) [000342] -ACXG---R-L- arg0 SETUP      +--*  ASG       ref    $3d5
N006 (  1,  1) [000341] D------N----                 |  +--*  LCL_VAR   ref    V23 tmp16        d:2 $3d5
N005 ( 17, 10) [000136] --CXG-------                 |  \--*  CALL      ref    System.DateTime.ToString $3d5
N004 (  3,  3) [000135] ------------ this in rcx     |     \--*  ADDR      byref  $145
N003 (  3,  2) [000134] ----G--N----                 |        \--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                     |        \--*    long   V02._dateData (offs=0x00) -> V17 tmp10         $c5
N009 (  1,  1) [000343] ------------ arg0 in rcx     +--*  LCL_VAR   ref    V23 tmp16        u:2 (last use) $3d5
N011 (  4, 12) [000340] #---G------- arg1 in rdx     \--*  IND       ref    $3d9
N010 (  2, 10) [000339] H-----------                    \--*  CNS_INT(h) long   0x75003200 "	 Waiting for list processing to complete..." $1cf

------------ BB08 [0F9..102), preds={BB07,BB12} succs={BB09}

***** BB08
STMT00036 (IL 0x0F9...0x0FF)
N006 (  8,  7) [000143] -A--GO--R---              *  ASG       ref    <l:$41c, c:$41b>
N005 (  3,  2) [000142] D------N----              +--*  LCL_VAR   ref    V04 loc2         d:2 <l:$41a, c:$3df>
N004 (  4,  4) [000141] n---GO------              \--*  IND       ref    <l:$41c, c:$41b>
N003 (  2,  2) [000347] -------N----                 \--*  ADD       byref  $181
N001 (  1,  1) [000140] ------------                    +--*  LCL_VAR   ref    V00 this         u:1 $80
N002 (  1,  1) [000346] ------------                    \--*  CNS_INT   long   8 field offset Fseq[_myList] $280

***** BB08
STMT00037 (IL 0x100...0x101)
N003 (  5,  4) [000146] -A--G---R---              *  ASG       int    $40
N002 (  3,  2) [000145] D---G--N----              +--*  LCL_VAR   int   (AX) V05 loc3         
N001 (  1,  1) [000144] ------------              \--*  CNS_INT   int    0 $40

------------ BB09 [102..122) -> BB13 (cond), preds={BB08} succs={BB10,BB13}

***** BB09
STMT00038 (IL 0x102...0x120)
N005 ( 18, 11) [000150] --CXG-------              *  CALL      void   System.Threading.Monitor.Enter $VN.Void
N003 (  3,  3) [000149] ------------ arg1 in rdx  +--*  LCL_VAR_ADDR long   V05 loc3          $20a
N004 (  1,  1) [000147] ------------ arg0 in rcx  \--*  LCL_VAR   ref    V04 loc2         u:2 <l:$41a, c:$3df>

***** BB09
STMT00039 (IL 0x10A...  ???)
N017 ( 15, 15) [000158] -A-XGO------              *  JTRUE     void  
N016 ( 13, 13) [000157] NA-XGO-N-U--              \--*  EQ        int    <l:$34a, c:$349>
N011 (  8,  8) [000153] -A-XGO------                 +--*  IND       ref    <l:$42a, c:$429>
N010 (  6,  6) [000351] -A--GO-N----                 |  \--*  ADD       byref  <l:$1a0, c:$19f>
N008 (  5,  5) [000421] -A--GO------                 |     +--*  COMMA     ref    <l:$420, c:$41f>
N006 (  4,  4) [000419] -A--GO--R---                 |     |  +--*  ASG       ref    $VN.Void
N005 (  1,  1) [000418] D------N----                 |     |  |  +--*  LCL_VAR   ref    V29 cse2         d:1 <l:$420, c:$41f>
N004 (  4,  4) [000152] n---GO------                 |     |  |  \--*  IND       ref    <l:$420, c:$41f>
N003 (  2,  2) [000353] -------N----                 |     |  |     \--*  ADD       byref  $181
N001 (  1,  1) [000151] ------------                 |     |  |        +--*  LCL_VAR   ref    V00 this         u:1 $80
N002 (  1,  1) [000352] ------------                 |     |  |        \--*  CNS_INT   long   8 field offset Fseq[_myList] $280
N007 (  1,  1) [000420] ------------                 |     |  \--*  LCL_VAR   ref    V29 cse2         u:1 <l:$420, c:$41f>
N009 (  1,  1) [000350] ------------                 |     \--*  CNS_INT   long   8 field offset Fseq[Head] $280
N015 (  4,  4) [000156] ---XG-------                 \--*  IND       ref    <l:$435, c:$434>
N014 (  2,  2) [000355] ----G--N----                    \--*  ADD       byref  <l:$1a4, c:$1a3>
N012 (  1,  1) [000422] ------------                       +--*  LCL_VAR   ref    V29 cse2         u:1 <l:$41e, c:$3e3>
N013 (  1,  1) [000354] ------------                       \--*  CNS_INT   long   16 field offset Fseq[Tail] $281

------------ BB10 [126..129) -> BB12 (cond), preds={BB09} succs={BB11,BB12}

***** BB10
STMT00069 (IL   ???...  ???)
N005 (  8,  8) [000261] ----G-------              *  JTRUE     void  
N004 (  6,  6) [000262] J---G--N----              \--*  EQ        int    $34e
N002 (  4,  4) [000358] ----G-------                 +--*  CAST      int <- bool <- int $34d
N001 (  3,  2) [000263] ----G-------                 |  \--*  LCL_VAR   int   (AX) V05 loc3          $384
N003 (  1,  1) [000264] ------------                 \--*  CNS_INT   int    0 $40

------------ BB11 [129..130), preds={BB10} succs={BB12}

***** BB11
STMT00070 (IL   ???...  ???)
N003 ( 15,  7) [000265] --CXG-------              *  CALL      void   System.Threading.Monitor.Exit $VN.Void
N002 (  1,  1) [000266] ------------ arg0 in rcx  \--*  LCL_VAR   ref    V04 loc2         u:2 (last use) <l:$41a, c:$3df>

------------ BB12 [130..139) -> BB08 (always), preds={BB10,BB11} succs={BB08}

***** BB12
STMT00040 (IL 0x130...0x137)
N003 ( 15,  7) [000160] --CXG-------              *  CALL      void   System.Threading.Thread.Sleep $VN.Void
N002 (  1,  1) [000159] ------------ arg0 in rcx  \--*  CNS_INT   int    100 $5b

------------ BB13 [???..???) -> BB30 (callf), preds={BB09} succs={BB30}

------------ BB14 [???..???) -> BB15 (ALWAYS), preds={BB32} succs={BB15}

------------ BB15 [139..17D), preds={BB14} succs={BB16}

***** BB15
STMT00041 (IL 0x139...0x13E)
N003 ( 18,  8) [000164] -ACXG---R---              *  ASG       struct (copy) $VN.Void
N002 (  3,  2) [000162] D---G--N----              +--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  +--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
N001 ( 14,  5) [000161] --CXG-------              \--*  CALL      struct System.DateTime.get_Now $c6

***** BB15
STMT00042 (IL 0x13F...0x178)
N013 ( 53, 36) [000170] --CXG-------              *  CALL      void   System.Console.WriteLine $VN.Void
N012 ( 39, 30) [000169] --CXG------- arg0 in rcx  \--*  CALL      ref    System.String.Concat $3f4
N007 ( 17, 10) [000367] -ACXG---R-L- arg0 SETUP      +--*  ASG       ref    $3ef
N006 (  1,  1) [000366] D------N----                 |  +--*  LCL_VAR   ref    V24 tmp17        d:2 $3ef
N005 ( 17, 10) [000167] --CXG-------                 |  \--*  CALL      ref    System.DateTime.ToString $3ef
N004 (  3,  3) [000166] ------------ this in rcx     |     \--*  ADDR      byref  $147
N003 (  3,  2) [000165] ----G--N----                 |        \--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                     |        \--*    long   V02._dateData (offs=0x00) -> V17 tmp10         $c7
N009 (  1,  1) [000368] ------------ arg0 in rcx     +--*  LCL_VAR   ref    V24 tmp17        u:2 (last use) $3ef
N011 (  4, 12) [000365] #---G------- arg1 in rdx     \--*  IND       ref    $3f3
N010 (  2, 10) [000364] H-----------                    \--*  CNS_INT(h) long   0x75003208 "	 Done.  Profiler is active, available options:" $1d3

***** BB15
STMT00043 (IL 0x155...  ???)
N004 ( 18, 18) [000172] --CXG-------              *  CALL      void   System.Console.WriteLine $VN.Void
N003 (  4, 12) [000372] #---G------- arg0 in rcx  \--*  IND       ref    $3f8
N002 (  2, 10) [000371] H-----------                 \--*  CNS_INT(h) long   0x75003210 "   Q = quit" $1d4

***** BB15
STMT00044 (IL 0x15F...  ???)
N004 ( 18, 18) [000174] --CXG-------              *  CALL      void   System.Console.WriteLine $VN.Void
N003 (  4, 12) [000375] #---G------- arg0 in rcx  \--*  IND       ref    $3fb
N002 (  2, 10) [000374] H-----------                 \--*  CNS_INT(h) long   0x75003218 "   H = heap snapshot" $1d5

***** BB15
STMT00045 (IL 0x169...  ???)
N004 ( 18, 18) [000176] --CXG-------              *  CALL      void   System.Console.WriteLine $VN.Void
N003 (  4, 12) [000378] #---G------- arg0 in rcx  \--*  IND       ref    $3fe
N002 (  2, 10) [000377] H-----------                 \--*  CNS_INT(h) long   0x75003220 "   G = GC (max gen)" $1d6

***** BB15
STMT00046 (IL 0x173...  ???)
N004 ( 18, 18) [000178] --CXG-------              *  CALL      void   System.Console.WriteLine $VN.Void
N003 (  4, 12) [000381] #---G------- arg0 in rcx  \--*  IND       ref    $4c1
N002 (  2, 10) [000380] H-----------                 \--*  CNS_INT(h) long   0x75003228 "   R = clear the running flag to stop the consumer thread" $1d7

------------ BB16 [???..???), preds={BB15,BB25} succs={BB17}

------------ BB17 [???..???), preds={BB16,BB24} succs={BB18}

------------ BB18 [???..???), preds={BB17,BB22} succs={BB19}

------------ BB19 [17D..18F) -> BB21 (cond), preds={BB18,BB20} succs={BB20,BB21}

***** BB19
STMT00048 (IL   ???...  ???)
N006 ( 18, 11) [000233] S-CXG-------              *  CALL      void   System.ConsolePal.ReadKey $VN.Void
N004 (  3,  3) [000235] ------------ arg0 in rcx  +--*  ADDR      long   $148
N003 (  3,  2) [000236] ----G--N----              |  \--*  LCL_VAR   struct<System.ConsoleKeyInfo, 12>(AX)(P) V06 loc4         
                                                  |  \--*    ushort V06._keyChar (offs=0x00) -> V18 tmp11        
                                                  |  \--*    int    V06._key (offs=0x04) -> V19 tmp12        
                                                  |  \--*    int    V06._mods (offs=0x08) -> V20 tmp13         $c8
N005 (  1,  1) [000232] ------------ arg1 in rdx  \--*  CNS_INT   int    0 $40

***** BB19
STMT00050 (IL   ???...  ???)
N004 (  7,  6) [000189] ----G-------              *  JTRUE     void  
N003 (  5,  4) [000188] N---G--N-U--              \--*  NE        int    $34f
N001 (  3,  2) [000240] ----G-------                 +--*  LCL_VAR   int   (AX) V19 tmp12         $385
N002 (  1,  1) [000187] ------------                 \--*  CNS_INT   int    71 $5e

------------ BB20 [18F..19B) -> BB19 (always), preds={BB19} succs={BB19}

***** BB20
STMT00061 (IL 0x18F...0x199)
N003 ( 28, 11) [000222] --CXG-------              *  CALL      void   System.GC.Collect $VN.Void
N002 ( 14,  5) [000221] --CXG------- arg0 in rcx  \--*  CALL      int    System.GC.get_MaxGeneration $305

------------ BB21 [19B..1A6) -> BB23 (cond), preds={BB19} succs={BB22,BB23}

***** BB21
STMT00052 (IL   ???...  ???)
N004 (  7,  6) [000196] ----G-------              *  JTRUE     void  
N003 (  5,  4) [000195] N---G--N-U--              \--*  NE        int    $350
N001 (  3,  2) [000244] ----G-------                 +--*  LCL_VAR   int   (AX) V19 tmp12         $385
N002 (  1,  1) [000194] ------------                 \--*  CNS_INT   int    72 $5f

------------ BB22 [1A6..1AD) -> BB18 (always), preds={BB21} succs={BB18}

***** BB22
STMT00060 (IL 0x1A6...0x1AB)
N001 ( 14,  5) [000220] --CXG-------              *  CALL      void   System.Diagnostics.Debugger.Break $VN.Void

------------ BB23 [1AD..1B8) -> BB25 (cond), preds={BB21} succs={BB24,BB25}

***** BB23
STMT00054 (IL   ???...  ???)
N004 (  7,  6) [000203] ----G-------              *  JTRUE     void  
N003 (  5,  4) [000202] N---G--N-U--              \--*  NE        int    $351
N001 (  3,  2) [000248] ----G-------                 +--*  LCL_VAR   int   (AX) V19 tmp12         $385
N002 (  1,  1) [000201] ------------                 \--*  CNS_INT   int    82 $60

------------ BB24 [1B8..1C1) -> BB17 (always), preds={BB23} succs={BB17}

***** BB24
STMT00059 (IL 0x1B8...0x1BA)
N006 (  7,  7) [000219] -A--GO------              *  ASG       bool   $VN.Void
N004 (  5,  5) [000218] n---GO-N----              +--*  IND       bool   $40
N003 (  2,  2) [000387] -------N----              |  \--*  ADD       byref  $1a7
N001 (  1,  1) [000216] ------------              |     +--*  LCL_VAR   ref    V00 this         u:1 $80
N002 (  1,  1) [000386] ------------              |     \--*  CNS_INT   long   16 field offset Fseq[_running] $281
N005 (  1,  1) [000217] ------------              \--*  CNS_INT   int    0 $40

------------ BB25 [1C1..1CC) -> BB16 (cond), preds={BB23} succs={BB26,BB16}

***** BB25
STMT00056 (IL   ???...  ???)
N004 (  7,  6) [000210] ----G-------              *  JTRUE     void  
N003 (  5,  4) [000209] N---G--N-U--              \--*  NE        int    $352
N001 (  3,  2) [000252] ----G-------                 +--*  LCL_VAR   int   (AX) V19 tmp12         $385
N002 (  1,  1) [000208] ------------                 \--*  CNS_INT   int    81 $61

------------ BB26 [1CC..1D4) (return), preds={BB25} succs={}

***** BB26
STMT00057 (IL 0x1CC...0x1CE)
N006 (  7,  7) [000214] -A--GO------              *  ASG       bool   $VN.Void
N004 (  5,  5) [000213] n---GO-N----              +--*  IND       bool   $40
N003 (  2,  2) [000389] -------N----              |  \--*  ADD       byref  $1a7
N001 (  1,  1) [000211] ------------              |     +--*  LCL_VAR   ref    V00 this         u:1 (last use) $80
N002 (  1,  1) [000388] ------------              |     \--*  CNS_INT   long   16 field offset Fseq[_running] $281
N005 (  1,  1) [000212] ------------              \--*  CNS_INT   int    0 $40

***** BB26
STMT00058 (IL 0x1D3...0x1D3)
N001 (  0,  0) [000215] ------------              *  RETURN    void   $442

------------ BB27 [0CA..0CD) -> BB29 (cond), preds={} succs={BB28,BB29}

***** BB27
STMT00031 (IL 0x0CA...0x0CB)
N005 (  8,  8) [000126] ----G-------              *  JTRUE     void  
N004 (  6,  6) [000125] J---G--N----              \--*  EQ        int    $342
N002 (  4,  4) [000336] ----G-------                 +--*  CAST      int <- bool <- int $341
N001 (  3,  2) [000123] ----G-------                 |  \--*  LCL_VAR   int   (AX) V05 loc3          $381
N003 (  1,  1) [000124] ------------                 \--*  CNS_INT   int    0 $40

------------ BB28 [0CD..0D3), preds={BB27} succs={BB29}

***** BB28
STMT00033 (IL 0x0CD...0x0CE)
N003 ( 15,  7) [000129] --CXG-------              *  CALL      void   System.Threading.Monitor.Exit $VN.Void
N002 (  1,  1) [000128] ------------ arg0 in rcx  \--*  LCL_VAR   ref    V04 loc2         u:3 (last use) <l:$256, c:$b2>

------------ BB29 [0D3..0D4) (finret), preds={BB27,BB28} succs={}

***** BB29
STMT00032 (IL 0x0D3...0x0D3)
N001 (  0,  0) [000127] ------------              *  RETFILT   void   $440

------------ BB30 [126..129) -> BB32 (cond), preds={BB13} succs={BB31,BB32}

***** BB30
STMT00062 (IL 0x126...0x127)
N005 (  8,  8) [000226] ----G-------              *  JTRUE     void  
N004 (  6,  6) [000225] J---G--N----              \--*  EQ        int    $34c
N002 (  4,  4) [000360] ----G-------                 +--*  CAST      int <- bool <- int $34b
N001 (  3,  2) [000223] ----G-------                 |  \--*  LCL_VAR   int   (AX) V05 loc3          $383
N003 (  1,  1) [000224] ------------                 \--*  CNS_INT   int    0 $40

------------ BB31 [129..12F), preds={BB30} succs={BB32}

***** BB31
STMT00064 (IL 0x129...0x12A)
N003 ( 15,  7) [000229] --CXG-------              *  CALL      void   System.Threading.Monitor.Exit $VN.Void
N002 (  1,  1) [000228] ------------ arg0 in rcx  \--*  LCL_VAR   ref    V04 loc2         u:2 (last use) <l:$41a, c:$3df>

------------ BB32 [12F..130) (finret), preds={BB30,BB31} succs={BB14}

***** BB32
STMT00063 (IL 0x12F...0x12F)
N001 (  0,  0) [000227] ------------              *  RETFILT   void   $441

-------------------------------------------------------------------------------------------------------------------

*************** Finishing PHASE Optimize index checks

*************** Starting PHASE Update flow graph opt pass

*************** In fgUpdateFlowGraph()
Before updating the flow graph:

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..072)                                     i hascall gcsafe newobj 
BB33 [0048]  1       BB01                  1       [072..???)                                     internal LoopPH 
BB02 [0001]  2       BB06,BB33             8     0 [072..07B)                                     i Loop gcsafe bwd bwd-target 
BB03 [0002]  1  0    BB02                  8     0 [07B..0CA)                 T0      try { }     keep i try hascall gcsafe newobj bwd 
BB04 [0038]  1       BB03                  8     0 [0CA..0CD)-> BB06 ( cond )                     keep i gcsafe bwd cfb 
BB05 [0039]  1       BB04                  4     0 [0CD..0D4)                                     i hascall gcsafe bwd 
BB06 [0006]  2       BB04,BB05             8     0 [0D4..0DD)-> BB02 ( cond )                     i gcsafe bwd 
BB07 [0008]  1       BB06                  1       [0DD..0F9)                                     i hascall gcsafe 
BB08 [0009]  2       BB07,BB12             8     1 [0F9..102)                                     i Loop gcsafe bwd bwd-target 
BB09 [0010]  1  1    BB08                  8     1 [102..122)-> BB13 ( cond ) T1      try { }     keep i try hascall gcsafe bwd 
BB10 [0041]  1       BB09                  8     1 [126..129)-> BB12 ( cond )                     keep i gcsafe bwd cfb 
BB11 [0042]  1       BB10                  4     1 [129..130)                                     i hascall gcsafe bwd 
BB12 [0016]  2       BB10,BB11             8     1 [130..139)-> BB08 (always)                     i hascall gcsafe bwd 
BB13 [0030]  1       BB09                  1       [???..???)-> BB30 (callf )                     i internal gcsafe 
BB14 [0031]  1       BB32                  1       [???..???)-> BB15 (ALWAYS)                     i internal gcsafe KEEP 
BB15 [0017]  1       BB14                  1       [139..17D)                                     i hascall gcsafe 
BB16 [0045]  2       BB15,BB25             1     2 [???..???)                                     internal gcsafe 
BB17 [0046]  2       BB16,BB24             1     3 [???..???)                                     internal gcsafe 
BB18 [0047]  2       BB17,BB22             1     4 [???..???)                                     internal gcsafe 
BB19 [0018]  2       BB18,BB20             8     5 [17D..18F)-> BB21 ( cond )                     i Loop hascall gcsafe bwd bwd-target 
BB20 [0019]  1       BB19                  8     5 [18F..19B)-> BB19 (always)                     i hascall gcsafe bwd 
BB21 [0020]  1       BB19                  1     4 [19B..1A6)-> BB23 ( cond )                     i gcsafe bwd 
BB22 [0021]  1       BB21                  1     4 [1A6..1AD)-> BB18 (always)                     i hascall gcsafe bwd 
BB23 [0022]  1       BB21                  1     3 [1AD..1B8)-> BB25 ( cond )                     i gcsafe bwd 
BB24 [0023]  1       BB23                  1     3 [1B8..1C1)-> BB17 (always)                     i gcsafe bwd 
BB25 [0024]  1       BB23                  1     2 [1C1..1CC)-> BB16 ( cond )                     i gcsafe bwd 
BB26 [0025]  1       BB25                  1       [1CC..1D4)        (return)                     i gcsafe 
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ funclets follow
BB27 [0003]  1     0                       0       [0CA..0CD)-> BB29 ( cond )    H0 F fault {     keep i rare flet bwd 
BB28 [0004]  1     0 BB27                  0       [0CD..0D3)                    H0               i rare hascall bwd 
BB29 [0005]  2     0 BB27,BB28             0       [0D3..0D4)        (finret)    H0   }           i rare bwd 
BB30 [0013]  2     1 BB13                  1       [126..129)-> BB32 ( cond )    H1 F finally {   keep i gcsafe flet bwd 
BB31 [0014]  1     1 BB30                  1       [129..12F)                    H1               i hascall gcsafe bwd 
BB32 [0015]  2     1 BB30,BB31             1       [12F..130)        (finret)    H1   }           i gcsafe bwd 
-----------------------------------------------------------------------------------------------------------------------------------------


Compacting blocks BB01 and BB33:
*************** In fgDebugCheckBBlist
fgRemoveBlock BB16
Removing empty BB16

UpdateLoopsBeforeRemoveBlock Before: L00, from BB02 to BB06 (Head=BB01, Entry=BB02, ExitCnt=1 at BB06)
UpdateLoopsBeforeRemoveBlock After: L00, from BB02 to BB06 (Head=BB01, Entry=BB02, ExitCnt=1 at BB06)
UpdateLoopsBeforeRemoveBlock Before: L01, from BB08 to BB12 (Head=BB07, Entry=BB08, ExitCnt=1 at BB09)
UpdateLoopsBeforeRemoveBlock After: L01, from BB08 to BB12 (Head=BB07, Entry=BB08, ExitCnt=1 at BB09)
UpdateLoopsBeforeRemoveBlock Before: L03, from BB17 to BB24 (Head=BB16, Entry=BB17, ExitCnt=1 at BB23, parent loop = L02)
UpdateLoopsBeforeRemoveBlock After: L03, from BB17 to BB24 (Head=BB16, Entry=BB17, ExitCnt=1 at BB23, parent loop = L02)
UpdateLoopsBeforeRemoveBlock Before: L04, from BB18 to BB22 (Head=BB17, Entry=BB18, ExitCnt=1 at BB21, parent loop = L03)
UpdateLoopsBeforeRemoveBlock After: L04, from BB18 to BB22 (Head=BB17, Entry=BB18, ExitCnt=1 at BB21, parent loop = L03)
UpdateLoopsBeforeRemoveBlock Before: L05, from BB19 to BB20 (Head=BB18, Entry=BB19, ExitCnt=1 at BB19, parent loop = L04)
UpdateLoopsBeforeRemoveBlock After: L05, from BB19 to BB20 (Head=BB18, Entry=BB19, ExitCnt=1 at BB19, parent loop = L04)Setting edge weights for BB15 -> BB17 to [0 .. 3.402823e+38]
Setting edge weights for BB25 -> BB17 to [0 .. 3.402823e+38]
fgRemoveBlock BB17
Removing empty BB17

UpdateLoopsBeforeRemoveBlock Before: L00, from BB02 to BB06 (Head=BB01, Entry=BB02, ExitCnt=1 at BB06)
UpdateLoopsBeforeRemoveBlock After: L00, from BB02 to BB06 (Head=BB01, Entry=BB02, ExitCnt=1 at BB06)
UpdateLoopsBeforeRemoveBlock Before: L01, from BB08 to BB12 (Head=BB07, Entry=BB08, ExitCnt=1 at BB09)
UpdateLoopsBeforeRemoveBlock After: L01, from BB08 to BB12 (Head=BB07, Entry=BB08, ExitCnt=1 at BB09)
UpdateLoopsBeforeRemoveBlock Before: L04, from BB18 to BB22 (Head=BB17, Entry=BB18, ExitCnt=1 at BB21, parent loop = L03)
UpdateLoopsBeforeRemoveBlock After: L04, from BB18 to BB22 (Head=BB17, Entry=BB18, ExitCnt=1 at BB21, parent loop = L03)
UpdateLoopsBeforeRemoveBlock Before: L05, from BB19 to BB20 (Head=BB18, Entry=BB19, ExitCnt=1 at BB19, parent loop = L04)
UpdateLoopsBeforeRemoveBlock After: L05, from BB19 to BB20 (Head=BB18, Entry=BB19, ExitCnt=1 at BB19, parent loop = L04)Setting edge weights for BB15 -> BB18 to [0 .. 3.402823e+38]
Setting edge weights for BB24 -> BB18 to [0 .. 3.402823e+38]
Setting edge weights for BB25 -> BB18 to [0 .. 3.402823e+38]
fgRemoveBlock BB18
Removing empty BB18

UpdateLoopsBeforeRemoveBlock Before: L00, from BB02 to BB06 (Head=BB01, Entry=BB02, ExitCnt=1 at BB06)
UpdateLoopsBeforeRemoveBlock After: L00, from BB02 to BB06 (Head=BB01, Entry=BB02, ExitCnt=1 at BB06)
UpdateLoopsBeforeRemoveBlock Before: L01, from BB08 to BB12 (Head=BB07, Entry=BB08, ExitCnt=1 at BB09)
UpdateLoopsBeforeRemoveBlock After: L01, from BB08 to BB12 (Head=BB07, Entry=BB08, ExitCnt=1 at BB09)
UpdateLoopsBeforeRemoveBlock Before: L05, from BB19 to BB20 (Head=BB18, Entry=BB19, ExitCnt=1 at BB19, parent loop = L04)
UpdateLoopsBeforeRemoveBlock After: L05, from BB19 to BB20 (Head=BB18, Entry=BB19, ExitCnt=1 at BB19, parent loop = L04)Setting edge weights for BB15 -> BB19 to [0 .. 3.402823e+38]
Setting edge weights for BB22 -> BB19 to [0 .. 3.402823e+38]
Setting edge weights for BB24 -> BB19 to [0 .. 3.402823e+38]
Setting edge weights for BB25 -> BB19 to [0 .. 3.402823e+38]

After updating the flow graph:

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..072)                                     i hascall gcsafe newobj 
BB02 [0001]  2       BB01,BB06             8     0 [072..07B)                                     i Loop gcsafe bwd bwd-target 
BB03 [0002]  1  0    BB02                  8     0 [07B..0CA)                 T0      try { }     keep i try hascall gcsafe newobj bwd 
BB04 [0038]  1       BB03                  8     0 [0CA..0CD)-> BB06 ( cond )                     keep i gcsafe bwd cfb 
BB05 [0039]  1       BB04                  4     0 [0CD..0D4)                                     i hascall gcsafe bwd 
BB06 [0006]  2       BB04,BB05             8     0 [0D4..0DD)-> BB02 ( cond )                     i gcsafe bwd 
BB07 [0008]  1       BB06                  1       [0DD..0F9)                                     i hascall gcsafe 
BB08 [0009]  2       BB07,BB12             8     1 [0F9..102)                                     i Loop gcsafe bwd bwd-target 
BB09 [0010]  1  1    BB08                  8     1 [102..122)-> BB13 ( cond ) T1      try { }     keep i try hascall gcsafe bwd 
BB10 [0041]  1       BB09                  8     1 [126..129)-> BB12 ( cond )                     keep i gcsafe bwd cfb 
BB11 [0042]  1       BB10                  4     1 [129..130)                                     i hascall gcsafe bwd 
BB12 [0016]  2       BB10,BB11             8     1 [130..139)-> BB08 (always)                     i hascall gcsafe bwd 
BB13 [0030]  1       BB09                  1       [???..???)-> BB30 (callf )                     i internal gcsafe 
BB14 [0031]  1       BB32                  1       [???..???)-> BB15 (ALWAYS)                     i internal gcsafe KEEP 
BB15 [0017]  1       BB14                  1       [139..17D)                                     i hascall gcsafe 
BB19 [0018]  5       BB15,BB20,BB22,BB24,BB25   8     5 [17D..18F)-> BB21 ( cond )                     i Loop hascall gcsafe bwd bwd-target 
BB20 [0019]  1       BB19                  8     5 [18F..19B)-> BB19 (always)                     i hascall gcsafe bwd 
BB21 [0020]  1       BB19                  1     4 [19B..1A6)-> BB23 ( cond )                     i gcsafe bwd 
BB22 [0021]  1       BB21                  1     4 [1A6..1AD)-> BB19 (always)                     i hascall gcsafe bwd 
BB23 [0022]  1       BB21                  1     3 [1AD..1B8)-> BB25 ( cond )                     i gcsafe bwd 
BB24 [0023]  1       BB23                  1     3 [1B8..1C1)-> BB19 (always)                     i gcsafe bwd 
BB25 [0024]  1       BB23                  1     2 [1C1..1CC)-> BB19 ( cond )                     i gcsafe bwd 
BB26 [0025]  1       BB25                  1       [1CC..1D4)        (return)                     i gcsafe 
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ funclets follow
BB27 [0003]  1     0                       0       [0CA..0CD)-> BB29 ( cond )    H0 F fault {     keep i rare flet bwd 
BB28 [0004]  1     0 BB27                  0       [0CD..0D3)                    H0               i rare hascall bwd 
BB29 [0005]  2     0 BB27,BB28             0       [0D3..0D4)        (finret)    H0   }           i rare bwd 
BB30 [0013]  2     1 BB13                  1       [126..129)-> BB32 ( cond )    H1 F finally {   keep i gcsafe flet bwd 
BB31 [0014]  1     1 BB30                  1       [129..12F)                    H1               i hascall gcsafe bwd 
BB32 [0015]  2     1 BB30,BB31             1       [12F..130)        (finret)    H1   }           i gcsafe bwd 
-----------------------------------------------------------------------------------------------------------------------------------------

***************  Exception Handling table
index  eTry, eHnd
  0  ::            - Try at BB03..BB03 [07B..0CA), Fault   at BB27..BB29 [0CA..0D4)
  1  ::            - Try at BB09..BB09 [102..126), Finally at BB30..BB32 [126..130)
*************** In fgDebugCheckBBlist

*************** Finishing PHASE Update flow graph opt pass

*************** Starting PHASE Compute edge weights (2, false)
 -- not optimizing or no profile data, so not computing edge weights

*************** Finishing PHASE Compute edge weights (2, false)

*************** Starting PHASE Insert GC Polls

*************** Finishing PHASE Insert GC Polls [no changes]

*************** Starting PHASE Determine first cold block

*************** In fgDetermineFirstColdBlock()
No procedure splitting will be done for this method

*************** Finishing PHASE Determine first cold block
Trees before Rationalize IR

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..072)                                     i hascall gcsafe newobj 
BB02 [0001]  2       BB01,BB06             8     0 [072..07B)                                     i Loop gcsafe bwd bwd-target 
BB03 [0002]  1  0    BB02                  8     0 [07B..0CA)                 T0      try { }     keep i try hascall gcsafe newobj bwd 
BB04 [0038]  1       BB03                  8     0 [0CA..0CD)-> BB06 ( cond )                     keep i gcsafe bwd cfb 
BB05 [0039]  1       BB04                  4     0 [0CD..0D4)                                     i hascall gcsafe bwd 
BB06 [0006]  2       BB04,BB05             8     0 [0D4..0DD)-> BB02 ( cond )                     i gcsafe bwd 
BB07 [0008]  1       BB06                  1       [0DD..0F9)                                     i hascall gcsafe 
BB08 [0009]  2       BB07,BB12             8     1 [0F9..102)                                     i Loop gcsafe bwd bwd-target 
BB09 [0010]  1  1    BB08                  8     1 [102..122)-> BB13 ( cond ) T1      try { }     keep i try hascall gcsafe bwd 
BB10 [0041]  1       BB09                  8     1 [126..129)-> BB12 ( cond )                     keep i gcsafe bwd cfb 
BB11 [0042]  1       BB10                  4     1 [129..130)                                     i hascall gcsafe bwd 
BB12 [0016]  2       BB10,BB11             8     1 [130..139)-> BB08 (always)                     i hascall gcsafe bwd 
BB13 [0030]  1       BB09                  1       [???..???)-> BB30 (callf )                     i internal gcsafe 
BB14 [0031]  1       BB32                  1       [???..???)-> BB15 (ALWAYS)                     i internal gcsafe KEEP 
BB15 [0017]  1       BB14                  1       [139..17D)                                     i hascall gcsafe 
BB19 [0018]  5       BB15,BB20,BB22,BB24,BB25   8     5 [17D..18F)-> BB21 ( cond )                     i Loop hascall gcsafe bwd bwd-target 
BB20 [0019]  1       BB19                  8     5 [18F..19B)-> BB19 (always)                     i hascall gcsafe bwd 
BB21 [0020]  1       BB19                  1     4 [19B..1A6)-> BB23 ( cond )                     i gcsafe bwd 
BB22 [0021]  1       BB21                  1     4 [1A6..1AD)-> BB19 (always)                     i hascall gcsafe bwd 
BB23 [0022]  1       BB21                  1     3 [1AD..1B8)-> BB25 ( cond )                     i gcsafe bwd 
BB24 [0023]  1       BB23                  1     3 [1B8..1C1)-> BB19 (always)                     i gcsafe bwd 
BB25 [0024]  1       BB23                  1     2 [1C1..1CC)-> BB19 ( cond )                     i gcsafe bwd 
BB26 [0025]  1       BB25                  1       [1CC..1D4)        (return)                     i gcsafe 
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ funclets follow
BB27 [0003]  1     0                       0       [0CA..0CD)-> BB29 ( cond )    H0 F fault {     keep i rare flet bwd 
BB28 [0004]  1     0 BB27                  0       [0CD..0D3)                    H0               i rare hascall bwd 
BB29 [0005]  2     0 BB27,BB28             0       [0D3..0D4)        (finret)    H0   }           i rare bwd 
BB30 [0013]  2     1 BB13                  1       [126..129)-> BB32 ( cond )    H1 F finally {   keep i gcsafe flet bwd 
BB31 [0014]  1     1 BB30                  1       [129..12F)                    H1               i hascall gcsafe bwd 
BB32 [0015]  2     1 BB30,BB31             1       [12F..130)        (finret)    H1   }           i gcsafe bwd 
-----------------------------------------------------------------------------------------------------------------------------------------

------------ BB01 [000..072), preds={} succs={BB02}

***** BB01
STMT00000 (IL 0x000...0x005)
N003 ( 18,  8) [000003] -ACXG---R---              *  ASG       struct (copy) $VN.Void
N002 (  3,  2) [000001] D---G--N----              +--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  +--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
N001 ( 14,  5) [000000] --CXG-------              \--*  CALL      struct System.DateTime.get_Now $c0

***** BB01
STMT00001 (IL 0x006...0x022)
N013 ( 53, 36) [000009] --CXG-------              *  CALL      void   System.Console.WriteLine $VN.Void
N012 ( 39, 30) [000008] --CXG------- arg0 in rcx  \--*  CALL      ref    System.String.Concat $89
N007 ( 17, 10) [000272] -ACXG---R-L- arg0 SETUP      +--*  ASG       ref    $84
N006 (  1,  1) [000271] D------N----                 |  +--*  LCL_VAR   ref    V21 tmp14        d:2 $84
N005 ( 17, 10) [000006] --CXG-------                 |  \--*  CALL      ref    System.DateTime.ToString $84
N004 (  3,  3) [000005] ------------ this in rcx     |     \--*  ADDR      byref  $141
N003 (  3,  2) [000004] ----G--N----                 |        \--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                     |        \--*    long   V02._dateData (offs=0x00) -> V17 tmp10         $c1
N009 (  1,  1) [000273] ------------ arg0 in rcx     +--*  LCL_VAR   ref    V21 tmp14        u:2 (last use) $84
N011 (  4, 12) [000270] #---G------- arg1 in rdx     \--*  IND       ref    $88
N010 (  2, 10) [000269] H-----------                    \--*  CNS_INT(h) long   0x750031F0 "	 Created list" $1c0

***** BB01
STMT00002 (IL 0x01C...  ???)
N005 ( 16, 16) [000014] -AC-----R---              *  ASG       ref    $240
N004 (  1,  1) [000013] D------N----              +--*  LCL_VAR   ref    V08 tmp1         d:2 $240
N003 ( 16, 16) [000012] --C---------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST $240
N002 (  2, 10) [000011] H----------- arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb3ee2350 method $1c1

***** BB01
STMT00003 (IL   ???...  ???)
N003 ( 15,  8) [000016] --CXG-------              *  CALL      void   FalseLeakRepro.List..ctor $VN.Void
N002 (  1,  1) [000015] ------------ this in rcx  \--*  LCL_VAR   ref    V08 tmp1         u:2 $240

***** BB01
STMT00004 (IL 0x022...  ???)
N006 (  6,  6) [000019] -A-XG-------              *  ASG       ref    $VN.Void
N004 (  4,  4) [000018] D--XG--N----              +--*  IND       ref    $240
N003 (  2,  2) [000279] -------N----              |  \--*  ADD       byref  $181
N001 (  1,  1) [000010] ------------              |     +--*  LCL_VAR   ref    V00 this         u:1 $80
N002 (  1,  1) [000278] ------------              |     \--*  CNS_INT   long   8 field offset Fseq[_myList] $280
N005 (  1,  1) [000017] ------------              \--*  LCL_VAR   ref    V08 tmp1         u:2 (last use) $240

***** BB01
STMT00005 (IL 0x027...0x037)
N005 ( 16, 16) [000026] -AC-----R---              *  ASG       ref    $243
N004 (  1,  1) [000025] D------N----              +--*  LCL_VAR   ref    V09 tmp2         d:2 $243
N003 ( 16, 16) [000024] --C---------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST $243
N002 (  2, 10) [000023] H----------- arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb3b058b8 token $1c3

***** BB01
STMT00007 (IL   ???...  ???)
N009 (  7,  7) [000030] -A-XGO--R---              *  ASG       ref    <l:$250, c:$24f>
N008 (  1,  1) [000029] D------N----              +--*  LCL_VAR   ref    V10 tmp3         d:2 <l:$248, c:$94>
N007 (  7,  7) [000022] ---XGO------              \--*  IND       ref    <l:$250, c:$24f>
N006 (  5,  5) [000282] ----GO-N----                 \--*  ADD       byref  <l:$185, c:$184>
N004 (  4,  4) [000021] n---GO------                    +--*  IND       ref    <l:$246, c:$245>
N003 (  2,  2) [000284] -------N----                    |  \--*  ADD       byref  $181
N001 (  1,  1) [000020] ------------                    |     +--*  LCL_VAR   ref    V00 this         u:1 $80
N002 (  1,  1) [000283] ------------                    |     \--*  CNS_INT   long   8 field offset Fseq[_myList] $280
N005 (  1,  1) [000281] ------------                    \--*  CNS_INT   long   8 field offset Fseq[Head] $280

***** BB01
STMT00006 (IL   ???...  ???)
N003 ( 15,  8) [000028] --CXG-------              *  CALL      void   System.Object..ctor $VN.Void
N002 (  1,  1) [000027] ------------ this in rcx  \--*  LCL_VAR   ref    V09 tmp2         u:2 $243

***** BB01
STMT00008 (IL 0x037...  ???)
N006 (  6,  6) [000034] -A-XG-------              *  ASG       ref    $VN.Void
N004 (  4,  4) [000033] D--XG--N----              +--*  IND       ref    $243
N003 (  2,  2) [000287] -------N----              |  \--*  ADD       byref  <l:$187, c:$186>
N001 (  1,  1) [000031] ------------              |     +--*  LCL_VAR   ref    V10 tmp3         u:2 (last use) <l:$248, c:$94>
N002 (  1,  1) [000286] ------------              |     \--*  CNS_INT   long   16 field offset Fseq[Data] $281
N005 (  1,  1) [000032] ------------              \--*  LCL_VAR   ref    V09 tmp2         u:2 (last use) $243

***** BB01
STMT00009 (IL 0x03C...0x057)
N005 ( 16, 16) [000040] -AC-----R---              *  ASG       ref    $253
N004 (  1,  1) [000039] D------N----              +--*  LCL_VAR   ref    V11 tmp4         d:2 $253
N003 ( 16, 16) [000038] --C---------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST $253
N002 (  2, 10) [000037] H----------- arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb3ee6200 token $1c6

***** BB01
STMT00010 (IL   ???...  ???)
N007 ( 18, 21) [000042] --CXG-------              *  CALL      void   System.MulticastDelegate.CtorClosed $VN.Void
N004 (  1,  1) [000041] ------------ this in rcx  +--*  LCL_VAR   ref    V11 tmp4         u:2 $253
N005 (  1,  1) [000035] ------------ arg1 in rdx  +--*  LCL_VAR   ref    V00 this         u:1 $80
N006 (  2, 10) [000036] H----------- arg2 in r8   \--*  CNS_INT(h) long   0x7ffdb3b213f8 ftn $1c7

***** BB01
STMT00011 (IL 0x048...  ???)
N005 ( 16, 16) [000047] -AC-----R---              *  ASG       ref    $254
N004 (  1,  1) [000046] D------N----              +--*  LCL_VAR   ref    V12 tmp5         d:2 $254
N003 ( 16, 16) [000045] --C---------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWFAST $254
N002 (  2, 10) [000044] H----------- arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb3c84e80 token $1c8

***** BB01
STMT00012 (IL   ???...  ???)
N005 ( 16, 10) [000049] --CXG-------              *  CALL      void   System.Threading.Thread..ctor $VN.Void
N003 (  1,  1) [000048] ------------ this in rcx  +--*  LCL_VAR   ref    V12 tmp5         u:2 $254
N004 (  1,  1) [000043] ------------ arg1 in rdx  \--*  LCL_VAR   ref    V11 tmp4         u:2 (last use) $253

***** BB01
STMT00013 (IL 0x04D...  ???)
N003 ( 15,  8) [000051] --CXG-------              *  CALL      void   System.Threading.Thread.Start $VN.Void
N002 (  1,  1) [000050] ------------ this in rcx  \--*  LCL_VAR   ref    V12 tmp5         u:2 (last use) $254

***** BB01
STMT00014 (IL 0x052...  ???)
N003 ( 18,  8) [000055] -ACXG---R---              *  ASG       struct (copy) $VN.Void
N002 (  3,  2) [000053] D---G--N----              +--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  +--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
N001 ( 14,  5) [000052] --CXG-------              \--*  CALL      struct System.DateTime.get_Now $c2

***** BB01
STMT00015 (IL 0x058...0x06F)
N013 ( 53, 36) [000061] --CXG-------              *  CALL      void   System.Console.WriteLine $VN.Void
N012 ( 39, 30) [000060] --CXG------- arg0 in rcx  \--*  CALL      ref    System.String.Concat $ad
N007 ( 17, 10) [000300] -ACXG---R-L- arg0 SETUP      +--*  ASG       ref    $a8
N006 (  1,  1) [000299] D------N----                 |  +--*  LCL_VAR   ref    V22 tmp15        d:2 $a8
N005 ( 17, 10) [000058] --CXG-------                 |  \--*  CALL      ref    System.DateTime.ToString $a8
N004 (  3,  3) [000057] ------------ this in rcx     |     \--*  ADDR      byref  $143
N003 (  3,  2) [000056] ----G--N----                 |        \--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                     |        \--*    long   V02._dateData (offs=0x00) -> V17 tmp10         $c3
N009 (  1,  1) [000301] ------------ arg0 in rcx     +--*  LCL_VAR   ref    V22 tmp15        u:2 (last use) $a8
N011 (  4, 12) [000298] #---G------- arg1 in rdx     \--*  IND       ref    $ac
N010 (  2, 10) [000297] H-----------                    \--*  CNS_INT(h) long   0x750031F8 "	 Consumer thread started, adding items..." $1c9

***** BB01
STMT00016 (IL 0x06E...  ???)
N003 (  1,  3) [000064] -A------R---              *  ASG       int    $40
N002 (  1,  1) [000063] D------N----              +--*  LCL_VAR   int    V03 loc1         d:2 $40
N001 (  1,  1) [000062] ------------              \--*  CNS_INT   int    0 $40

***** BB01
STMT00075 (IL   ???...  ???)
N003 (  2, 10) [000404] ------------              *  COMMA     void  
N001 (  2, 10) [000402] H------H----              +--*  CNS_INT(h) long   0x7ffdb3ee58a8 method $1ca
N002 (  0,  0) [000403] ------------              \--*  NOP       void  

***** BB01
STMT00076 (IL   ???...  ???)
N003 (  2, 10) [000407] ------------              *  COMMA     void  
N001 (  2, 10) [000405] H------H----              +--*  CNS_INT(h) long   0x7ffdb3b058b8 token $1c3
N002 (  0,  0) [000406] ------------              \--*  NOP       void  

------------ BB02 [072..07B), preds={BB01,BB06} succs={BB03}

***** BB02
STMT00074 (IL   ???...  ???)
N005 (  0,  0) [000399] -A------R---              *  ASG       int   
N004 (  0,  0) [000397] D------N----              +--*  LCL_VAR   int    V03 loc1         d:3
N003 (  0,  0) [000398] ------------              \--*  PHI       int   
N001 (  0,  0) [000401] ------------ pred BB06       +--*  PHI_ARG   int    V03 loc1         u:4
N002 (  0,  0) [000400] ------------ pred BB33       \--*  PHI_ARG   int    V03 loc1         u:2 $40

***** BB02
STMT00018 (IL 0x072...0x078)
N006 (  8,  7) [000072] -A--GO--R---              *  ASG       ref    <l:$258, c:$257>
N005 (  3,  2) [000071] D------N----              +--*  LCL_VAR   ref    V04 loc2         d:3 <l:$256, c:$b2>
N004 (  4,  4) [000070] n---GO------              \--*  IND       ref    <l:$258, c:$257>
N003 (  2,  2) [000305] -------N----                 \--*  ADD       byref  $181
N001 (  1,  1) [000069] ------------                    +--*  LCL_VAR   ref    V00 this         u:1 $80
N002 (  1,  1) [000304] ------------                    \--*  CNS_INT   long   8 field offset Fseq[_myList] $280

***** BB02
STMT00019 (IL 0x079...0x07A)
N003 (  5,  4) [000075] -A--G---R---              *  ASG       int    $40
N002 (  3,  2) [000074] D---G--N----              +--*  LCL_VAR   int   (AX) V05 loc3         
N001 (  1,  1) [000073] ------------              \--*  CNS_INT   int    0 $40

------------ BB03 [07B..0CA), preds={BB02} succs={BB04}

***** BB03
STMT00020 (IL 0x07B...0x093)
N005 ( 18, 11) [000079] --CXG-------              *  CALL      void   System.Threading.Monitor.Enter $VN.Void
N003 (  3,  3) [000078] ------------ arg1 in rdx  +--*  LCL_VAR_ADDR long   V05 loc3          $206
N004 (  1,  1) [000076] ------------ arg0 in rcx  \--*  LCL_VAR   ref    V04 loc2         u:3 <l:$256, c:$b2>

***** BB03
STMT00021 (IL 0x083...  ???)
N005 ( 16, 16) [000086] -AC-----R---              *  ASG       ref    $259
N004 (  1,  1) [000085] D------N----              +--*  LCL_VAR   ref    V13 tmp6         d:2 $259
N003 ( 16, 16) [000084] --C---------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST $259
N002 (  2, 10) [000083] H----------- arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb3ee58a8 method $1ca

***** BB03
STMT00023 (IL   ???...  ???)
N009 (  7,  7) [000090] -A-XGO--R---              *  ASG       ref    <l:$267, c:$266>
N008 (  1,  1) [000089] D------N----              +--*  LCL_VAR   ref    V14 tmp7         d:2 <l:$25f, c:$b9>
N007 (  7,  7) [000082] ---XGO------              \--*  IND       ref    <l:$267, c:$266>
N006 (  5,  5) [000310] ----GO-N----                 \--*  ADD       byref  <l:$18b, c:$18a>
N004 (  4,  4) [000081] n---GO------                    +--*  IND       ref    <l:$25d, c:$25c>
N003 (  2,  2) [000312] -------N----                    |  \--*  ADD       byref  $181
N001 (  1,  1) [000080] ------------                    |     +--*  LCL_VAR   ref    V00 this         u:1 $80
N002 (  1,  1) [000311] ------------                    |     \--*  CNS_INT   long   8 field offset Fseq[_myList] $280
N005 (  1,  1) [000309] ------------                    \--*  CNS_INT   long   8 field offset Fseq[Head] $280

***** BB03
STMT00065 (IL   ???...  ???)
N003 ( 15,  8) [000230] --CXG-------              *  CALL      void   System.Object..ctor $VN.Void
N002 (  1,  1) [000087] ------------ this in rcx  \--*  LCL_VAR   ref    V13 tmp6         u:2 $259

***** BB03
STMT00024 (IL 0x093...  ???)
N006 (  6,  6) [000094] -A-XG-------              *  ASG       ref    $VN.Void
N004 (  4,  4) [000093] D--XG--N----              +--*  IND       ref    $259
N003 (  2,  2) [000315] -------N----              |  \--*  ADD       byref  <l:$18d, c:$18c>
N001 (  1,  1) [000091] ------------              |     +--*  LCL_VAR   ref    V14 tmp7         u:2 (last use) <l:$25f, c:$b9>
N002 (  1,  1) [000314] ------------              |     \--*  CNS_INT   long   8 field offset Fseq[Next] $280
N005 (  1,  1) [000092] ------------              \--*  LCL_VAR   ref    V13 tmp6         u:2 (last use) $259

***** BB03
STMT00025 (IL 0x098...0x0AE)
N023 ( 17, 17) [000102] -A-XGO------              *  ASG       ref    $VN.Void
N011 (  8,  8) [000101] DA-XGO-N----              +--*  IND       ref    $279
N010 (  6,  6) [000317] -A--GO-N----              |  \--*  ADD       byref  <l:$191, c:$190>
N008 (  5,  5) [000416] -A--GO------              |     +--*  COMMA     ref    <l:$26d, c:$26c>
N006 (  4,  4) [000414] -A--GO--R---              |     |  +--*  ASG       ref    $VN.Void
N005 (  1,  1) [000413] D------N----              |     |  |  +--*  LCL_VAR   ref    V28 cse1         d:1 <l:$26d, c:$26c>
N004 (  4,  4) [000096] n---GO------              |     |  |  \--*  IND       ref    <l:$26d, c:$26c>
N003 (  2,  2) [000319] -------N----              |     |  |     \--*  ADD       byref  $181
N001 (  1,  1) [000095] ------------              |     |  |        +--*  LCL_VAR   ref    V00 this         u:1 $80
N002 (  1,  1) [000318] ------------              |     |  |        \--*  CNS_INT   long   8 field offset Fseq[_myList] $280
N007 (  1,  1) [000415] ------------              |     |  \--*  LCL_VAR   ref    V28 cse1         u:1 <l:$26d, c:$26c>
N009 (  1,  1) [000316] ------------              |     \--*  CNS_INT   long   8 field offset Fseq[Head] $280
N022 (  8,  8) [000411] -A-XG-------              \--*  COMMA     ref    <l:$403, c:$402>
N020 (  7,  7) [000409] -A-XG---R---                 +--*  ASG       ref    $VN.Void
N019 (  1,  1) [000408] D------N----                 |  +--*  LCL_VAR   ref    V27 cse0         d:1 <l:$403, c:$402>
N018 (  7,  7) [000100] ---XG-------                 |  \--*  IND       ref    <l:$403, c:$402>
N017 (  5,  5) [000321] ---XG--N----                 |     \--*  ADD       byref  <l:$197, c:$196>
N015 (  4,  4) [000099] ---XG-------                 |        +--*  IND       ref    <l:$278, c:$277>
N014 (  2,  2) [000323] ----G--N----                 |        |  \--*  ADD       byref  <l:$191, c:$193>
N012 (  1,  1) [000417] ------------                 |        |     +--*  LCL_VAR   ref    V28 cse1         u:1 <l:$26b, c:$bf>
N013 (  1,  1) [000322] ------------                 |        |     \--*  CNS_INT   long   8 field offset Fseq[Head] $280
N016 (  1,  1) [000320] ------------                 |        \--*  CNS_INT   long   8 field offset Fseq[Next] $280
N021 (  1,  1) [000410] ------------                 \--*  LCL_VAR   ref    V27 cse0         u:1 <l:$403, c:$402>

***** BB03
STMT00026 (IL 0x0B3...0x0C3)
N005 ( 16, 16) [000109] -AC-----R---              *  ASG       ref    $404
N004 (  1,  1) [000108] D------N----              +--*  LCL_VAR   ref    V15 tmp8         d:2 $404
N003 ( 16, 16) [000107] --C---------              \--*  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST $404
N002 (  2, 10) [000106] H----------- arg0 in rcx     \--*  CNS_INT(h) long   0x7ffdb3b058b8 token $1c3

***** BB03
STMT00028 (IL   ???...  ???)
N003 (  1,  3) [000113] -A--G---R---              *  ASG       ref    <l:$27b, c:$40a>
N002 (  1,  1) [000112] D------N----              +--*  LCL_VAR   ref    V16 tmp9         d:2 <l:$279, c:$3ca>
N001 (  1,  1) [000412] ------------              \--*  LCL_VAR   ref    V27 cse0         u:1 <l:$279, c:$3c4>

***** BB03
STMT00027 (IL   ???...  ???)
N003 ( 15,  8) [000111] --CXG-------              *  CALL      void   System.Object..ctor $VN.Void
N002 (  1,  1) [000110] ------------ this in rcx  \--*  LCL_VAR   ref    V15 tmp8         u:2 $404

***** BB03
STMT00029 (IL 0x0C3...  ???)
N006 (  6,  6) [000117] -A-XG-------              *  ASG       ref    $VN.Void
N004 (  4,  4) [000116] D--XG--N----              +--*  IND       ref    $404
N003 (  2,  2) [000333] -------N----              |  \--*  ADD       byref  <l:$19b, c:$19a>
N001 (  1,  1) [000114] ------------              |     +--*  LCL_VAR   ref    V16 tmp9         u:2 (last use) <l:$279, c:$3ca>
N002 (  1,  1) [000332] ------------              |     \--*  CNS_INT   long   16 field offset Fseq[Data] $281
N005 (  1,  1) [000115] ------------              \--*  LCL_VAR   ref    V15 tmp8         u:2 (last use) $404

------------ BB04 [0CA..0CD) -> BB06 (cond), preds={BB03} succs={BB05,BB06}

***** BB04
STMT00066 (IL   ???...  ???)
N005 (  8,  8) [000254] ----G-------              *  JTRUE     void  
N004 (  6,  6) [000255] J---G--N----              \--*  EQ        int    $344
N002 (  4,  4) [000334] ----G-------                 +--*  CAST      int <- bool <- int $343
N001 (  3,  2) [000256] ----G-------                 |  \--*  LCL_VAR   int   (AX) V05 loc3          $382
N003 (  1,  1) [000257] ------------                 \--*  CNS_INT   int    0 $40

------------ BB05 [0CD..0D4), preds={BB04} succs={BB06}

***** BB05
STMT00067 (IL   ???...  ???)
N003 ( 15,  7) [000258] --CXG-------              *  CALL      void   System.Threading.Monitor.Exit $VN.Void
N002 (  1,  1) [000259] ------------ arg0 in rcx  \--*  LCL_VAR   ref    V04 loc2         u:3 (last use) <l:$256, c:$b2>

------------ BB06 [0D4..0DD) -> BB02 (cond), preds={BB04,BB05} succs={BB07,BB02}

***** BB06
STMT00030 (IL 0x0D4...0x0D7)
N005 (  3,  3) [000122] -A------R---              *  ASG       int    $345
N004 (  1,  1) [000121] D------N----              +--*  LCL_VAR   int    V03 loc1         d:4 $345
N003 (  3,  3) [000120] ------------              \--*  ADD       int    $345
N001 (  1,  1) [000118] ------------                 +--*  LCL_VAR   int    V03 loc1         u:3 (last use) $380
N002 (  1,  1) [000119] ------------                 \--*  CNS_INT   int    1 $4e

***** BB06
STMT00017 (IL 0x0D8...0x0DB)
N004 (  5,  5) [000068] ------------              *  JTRUE     void  
N003 (  3,  3) [000067] J------N----              \--*  LT        int    $346
N001 (  1,  1) [000065] ------------                 +--*  LCL_VAR   int    V03 loc1         u:4 $345
N002 (  1,  1) [000066] ------------                 \--*  CNS_INT   int    10 $43

------------ BB07 [0DD..0F9), preds={BB06} succs={BB08}

***** BB07
STMT00034 (IL 0x0DD...0x0E2)
N003 ( 18,  8) [000133] -ACXG---R---              *  ASG       struct (copy) $VN.Void
N002 (  3,  2) [000131] D---G--N----              +--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  +--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
N001 ( 14,  5) [000130] --CXG-------              \--*  CALL      struct System.DateTime.get_Now $c4

***** BB07
STMT00035 (IL 0x0E3...0x0F4)
N013 ( 53, 36) [000139] --CXG-------              *  CALL      void   System.Console.WriteLine $VN.Void
N012 ( 39, 30) [000138] --CXG------- arg0 in rcx  \--*  CALL      ref    System.String.Concat $3da
N007 ( 17, 10) [000342] -ACXG---R-L- arg0 SETUP      +--*  ASG       ref    $3d5
N006 (  1,  1) [000341] D------N----                 |  +--*  LCL_VAR   ref    V23 tmp16        d:2 $3d5
N005 ( 17, 10) [000136] --CXG-------                 |  \--*  CALL      ref    System.DateTime.ToString $3d5
N004 (  3,  3) [000135] ------------ this in rcx     |     \--*  ADDR      byref  $145
N003 (  3,  2) [000134] ----G--N----                 |        \--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                     |        \--*    long   V02._dateData (offs=0x00) -> V17 tmp10         $c5
N009 (  1,  1) [000343] ------------ arg0 in rcx     +--*  LCL_VAR   ref    V23 tmp16        u:2 (last use) $3d5
N011 (  4, 12) [000340] #---G------- arg1 in rdx     \--*  IND       ref    $3d9
N010 (  2, 10) [000339] H-----------                    \--*  CNS_INT(h) long   0x75003200 "	 Waiting for list processing to complete..." $1cf

------------ BB08 [0F9..102), preds={BB07,BB12} succs={BB09}

***** BB08
STMT00036 (IL 0x0F9...0x0FF)
N006 (  8,  7) [000143] -A--GO--R---              *  ASG       ref    <l:$41c, c:$41b>
N005 (  3,  2) [000142] D------N----              +--*  LCL_VAR   ref    V04 loc2         d:2 <l:$41a, c:$3df>
N004 (  4,  4) [000141] n---GO------              \--*  IND       ref    <l:$41c, c:$41b>
N003 (  2,  2) [000347] -------N----                 \--*  ADD       byref  $181
N001 (  1,  1) [000140] ------------                    +--*  LCL_VAR   ref    V00 this         u:1 $80
N002 (  1,  1) [000346] ------------                    \--*  CNS_INT   long   8 field offset Fseq[_myList] $280

***** BB08
STMT00037 (IL 0x100...0x101)
N003 (  5,  4) [000146] -A--G---R---              *  ASG       int    $40
N002 (  3,  2) [000145] D---G--N----              +--*  LCL_VAR   int   (AX) V05 loc3         
N001 (  1,  1) [000144] ------------              \--*  CNS_INT   int    0 $40

------------ BB09 [102..122) -> BB13 (cond), preds={BB08} succs={BB10,BB13}

***** BB09
STMT00038 (IL 0x102...0x120)
N005 ( 18, 11) [000150] --CXG-------              *  CALL      void   System.Threading.Monitor.Enter $VN.Void
N003 (  3,  3) [000149] ------------ arg1 in rdx  +--*  LCL_VAR_ADDR long   V05 loc3          $20a
N004 (  1,  1) [000147] ------------ arg0 in rcx  \--*  LCL_VAR   ref    V04 loc2         u:2 <l:$41a, c:$3df>

***** BB09
STMT00039 (IL 0x10A...  ???)
N017 ( 15, 15) [000158] -A-XGO------              *  JTRUE     void  
N016 ( 13, 13) [000157] NA-XGO-N-U--              \--*  EQ        int    <l:$34a, c:$349>
N011 (  8,  8) [000153] -A-XGO------                 +--*  IND       ref    <l:$42a, c:$429>
N010 (  6,  6) [000351] -A--GO-N----                 |  \--*  ADD       byref  <l:$1a0, c:$19f>
N008 (  5,  5) [000421] -A--GO------                 |     +--*  COMMA     ref    <l:$420, c:$41f>
N006 (  4,  4) [000419] -A--GO--R---                 |     |  +--*  ASG       ref    $VN.Void
N005 (  1,  1) [000418] D------N----                 |     |  |  +--*  LCL_VAR   ref    V29 cse2         d:1 <l:$420, c:$41f>
N004 (  4,  4) [000152] n---GO------                 |     |  |  \--*  IND       ref    <l:$420, c:$41f>
N003 (  2,  2) [000353] -------N----                 |     |  |     \--*  ADD       byref  $181
N001 (  1,  1) [000151] ------------                 |     |  |        +--*  LCL_VAR   ref    V00 this         u:1 $80
N002 (  1,  1) [000352] ------------                 |     |  |        \--*  CNS_INT   long   8 field offset Fseq[_myList] $280
N007 (  1,  1) [000420] ------------                 |     |  \--*  LCL_VAR   ref    V29 cse2         u:1 <l:$420, c:$41f>
N009 (  1,  1) [000350] ------------                 |     \--*  CNS_INT   long   8 field offset Fseq[Head] $280
N015 (  4,  4) [000156] ---XG-------                 \--*  IND       ref    <l:$435, c:$434>
N014 (  2,  2) [000355] ----G--N----                    \--*  ADD       byref  <l:$1a4, c:$1a3>
N012 (  1,  1) [000422] ------------                       +--*  LCL_VAR   ref    V29 cse2         u:1 <l:$41e, c:$3e3>
N013 (  1,  1) [000354] ------------                       \--*  CNS_INT   long   16 field offset Fseq[Tail] $281

------------ BB10 [126..129) -> BB12 (cond), preds={BB09} succs={BB11,BB12}

***** BB10
STMT00069 (IL   ???...  ???)
N005 (  8,  8) [000261] ----G-------              *  JTRUE     void  
N004 (  6,  6) [000262] J---G--N----              \--*  EQ        int    $34e
N002 (  4,  4) [000358] ----G-------                 +--*  CAST      int <- bool <- int $34d
N001 (  3,  2) [000263] ----G-------                 |  \--*  LCL_VAR   int   (AX) V05 loc3          $384
N003 (  1,  1) [000264] ------------                 \--*  CNS_INT   int    0 $40

------------ BB11 [129..130), preds={BB10} succs={BB12}

***** BB11
STMT00070 (IL   ???...  ???)
N003 ( 15,  7) [000265] --CXG-------              *  CALL      void   System.Threading.Monitor.Exit $VN.Void
N002 (  1,  1) [000266] ------------ arg0 in rcx  \--*  LCL_VAR   ref    V04 loc2         u:2 (last use) <l:$41a, c:$3df>

------------ BB12 [130..139) -> BB08 (always), preds={BB10,BB11} succs={BB08}

***** BB12
STMT00040 (IL 0x130...0x137)
N003 ( 15,  7) [000160] --CXG-------              *  CALL      void   System.Threading.Thread.Sleep $VN.Void
N002 (  1,  1) [000159] ------------ arg0 in rcx  \--*  CNS_INT   int    100 $5b

------------ BB13 [???..???) -> BB30 (callf), preds={BB09} succs={BB30}

------------ BB14 [???..???) -> BB15 (ALWAYS), preds={BB32} succs={BB15}

------------ BB15 [139..17D), preds={BB14} succs={BB19}

***** BB15
STMT00041 (IL 0x139...0x13E)
N003 ( 18,  8) [000164] -ACXG---R---              *  ASG       struct (copy) $VN.Void
N002 (  3,  2) [000162] D---G--N----              +--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  +--*    long   V02._dateData (offs=0x00) -> V17 tmp10        
N001 ( 14,  5) [000161] --CXG-------              \--*  CALL      struct System.DateTime.get_Now $c6

***** BB15
STMT00042 (IL 0x13F...0x178)
N013 ( 53, 36) [000170] --CXG-------              *  CALL      void   System.Console.WriteLine $VN.Void
N012 ( 39, 30) [000169] --CXG------- arg0 in rcx  \--*  CALL      ref    System.String.Concat $3f4
N007 ( 17, 10) [000367] -ACXG---R-L- arg0 SETUP      +--*  ASG       ref    $3ef
N006 (  1,  1) [000366] D------N----                 |  +--*  LCL_VAR   ref    V24 tmp17        d:2 $3ef
N005 ( 17, 10) [000167] --CXG-------                 |  \--*  CALL      ref    System.DateTime.ToString $3ef
N004 (  3,  3) [000166] ------------ this in rcx     |     \--*  ADDR      byref  $147
N003 (  3,  2) [000165] ----G--N----                 |        \--*  LCL_VAR   struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                     |        \--*    long   V02._dateData (offs=0x00) -> V17 tmp10         $c7
N009 (  1,  1) [000368] ------------ arg0 in rcx     +--*  LCL_VAR   ref    V24 tmp17        u:2 (last use) $3ef
N011 (  4, 12) [000365] #---G------- arg1 in rdx     \--*  IND       ref    $3f3
N010 (  2, 10) [000364] H-----------                    \--*  CNS_INT(h) long   0x75003208 "	 Done.  Profiler is active, available options:" $1d3

***** BB15
STMT00043 (IL 0x155...  ???)
N004 ( 18, 18) [000172] --CXG-------              *  CALL      void   System.Console.WriteLine $VN.Void
N003 (  4, 12) [000372] #---G------- arg0 in rcx  \--*  IND       ref    $3f8
N002 (  2, 10) [000371] H-----------                 \--*  CNS_INT(h) long   0x75003210 "   Q = quit" $1d4

***** BB15
STMT00044 (IL 0x15F...  ???)
N004 ( 18, 18) [000174] --CXG-------              *  CALL      void   System.Console.WriteLine $VN.Void
N003 (  4, 12) [000375] #---G------- arg0 in rcx  \--*  IND       ref    $3fb
N002 (  2, 10) [000374] H-----------                 \--*  CNS_INT(h) long   0x75003218 "   H = heap snapshot" $1d5

***** BB15
STMT00045 (IL 0x169...  ???)
N004 ( 18, 18) [000176] --CXG-------              *  CALL      void   System.Console.WriteLine $VN.Void
N003 (  4, 12) [000378] #---G------- arg0 in rcx  \--*  IND       ref    $3fe
N002 (  2, 10) [000377] H-----------                 \--*  CNS_INT(h) long   0x75003220 "   G = GC (max gen)" $1d6

***** BB15
STMT00046 (IL 0x173...  ???)
N004 ( 18, 18) [000178] --CXG-------              *  CALL      void   System.Console.WriteLine $VN.Void
N003 (  4, 12) [000381] #---G------- arg0 in rcx  \--*  IND       ref    $4c1
N002 (  2, 10) [000380] H-----------                 \--*  CNS_INT(h) long   0x75003228 "   R = clear the running flag to stop the consumer thread" $1d7

------------ BB19 [17D..18F) -> BB21 (cond), preds={BB15,BB20,BB22,BB24,BB25} succs={BB20,BB21}

***** BB19
STMT00048 (IL   ???...  ???)
N006 ( 18, 11) [000233] S-CXG-------              *  CALL      void   System.ConsolePal.ReadKey $VN.Void
N004 (  3,  3) [000235] ------------ arg0 in rcx  +--*  ADDR      long   $148
N003 (  3,  2) [000236] ----G--N----              |  \--*  LCL_VAR   struct<System.ConsoleKeyInfo, 12>(AX)(P) V06 loc4         
                                                  |  \--*    ushort V06._keyChar (offs=0x00) -> V18 tmp11        
                                                  |  \--*    int    V06._key (offs=0x04) -> V19 tmp12        
                                                  |  \--*    int    V06._mods (offs=0x08) -> V20 tmp13         $c8
N005 (  1,  1) [000232] ------------ arg1 in rdx  \--*  CNS_INT   int    0 $40

***** BB19
STMT00050 (IL   ???...  ???)
N004 (  7,  6) [000189] ----G-------              *  JTRUE     void  
N003 (  5,  4) [000188] N---G--N-U--              \--*  NE        int    $34f
N001 (  3,  2) [000240] ----G-------                 +--*  LCL_VAR   int   (AX) V19 tmp12         $385
N002 (  1,  1) [000187] ------------                 \--*  CNS_INT   int    71 $5e

------------ BB20 [18F..19B) -> BB19 (always), preds={BB19} succs={BB19}

***** BB20
STMT00061 (IL 0x18F...0x199)
N003 ( 28, 11) [000222] --CXG-------              *  CALL      void   System.GC.Collect $VN.Void
N002 ( 14,  5) [000221] --CXG------- arg0 in rcx  \--*  CALL      int    System.GC.get_MaxGeneration $305

------------ BB21 [19B..1A6) -> BB23 (cond), preds={BB19} succs={BB22,BB23}

***** BB21
STMT00052 (IL   ???...  ???)
N004 (  7,  6) [000196] ----G-------              *  JTRUE     void  
N003 (  5,  4) [000195] N---G--N-U--              \--*  NE        int    $350
N001 (  3,  2) [000244] ----G-------                 +--*  LCL_VAR   int   (AX) V19 tmp12         $385
N002 (  1,  1) [000194] ------------                 \--*  CNS_INT   int    72 $5f

------------ BB22 [1A6..1AD) -> BB19 (always), preds={BB21} succs={BB19}

***** BB22
STMT00060 (IL 0x1A6...0x1AB)
N001 ( 14,  5) [000220] --CXG-------              *  CALL      void   System.Diagnostics.Debugger.Break $VN.Void

------------ BB23 [1AD..1B8) -> BB25 (cond), preds={BB21} succs={BB24,BB25}

***** BB23
STMT00054 (IL   ???...  ???)
N004 (  7,  6) [000203] ----G-------              *  JTRUE     void  
N003 (  5,  4) [000202] N---G--N-U--              \--*  NE        int    $351
N001 (  3,  2) [000248] ----G-------                 +--*  LCL_VAR   int   (AX) V19 tmp12         $385
N002 (  1,  1) [000201] ------------                 \--*  CNS_INT   int    82 $60

------------ BB24 [1B8..1C1) -> BB19 (always), preds={BB23} succs={BB19}

***** BB24
STMT00059 (IL 0x1B8...0x1BA)
N006 (  7,  7) [000219] -A--GO------              *  ASG       bool   $VN.Void
N004 (  5,  5) [000218] n---GO-N----              +--*  IND       bool   $40
N003 (  2,  2) [000387] -------N----              |  \--*  ADD       byref  $1a7
N001 (  1,  1) [000216] ------------              |     +--*  LCL_VAR   ref    V00 this         u:1 $80
N002 (  1,  1) [000386] ------------              |     \--*  CNS_INT   long   16 field offset Fseq[_running] $281
N005 (  1,  1) [000217] ------------              \--*  CNS_INT   int    0 $40

------------ BB25 [1C1..1CC) -> BB19 (cond), preds={BB23} succs={BB26,BB19}

***** BB25
STMT00056 (IL   ???...  ???)
N004 (  7,  6) [000210] ----G-------              *  JTRUE     void  
N003 (  5,  4) [000209] N---G--N-U--              \--*  NE        int    $352
N001 (  3,  2) [000252] ----G-------                 +--*  LCL_VAR   int   (AX) V19 tmp12         $385
N002 (  1,  1) [000208] ------------                 \--*  CNS_INT   int    81 $61

------------ BB26 [1CC..1D4) (return), preds={BB25} succs={}

***** BB26
STMT00057 (IL 0x1CC...0x1CE)
N006 (  7,  7) [000214] -A--GO------              *  ASG       bool   $VN.Void
N004 (  5,  5) [000213] n---GO-N----              +--*  IND       bool   $40
N003 (  2,  2) [000389] -------N----              |  \--*  ADD       byref  $1a7
N001 (  1,  1) [000211] ------------              |     +--*  LCL_VAR   ref    V00 this         u:1 (last use) $80
N002 (  1,  1) [000388] ------------              |     \--*  CNS_INT   long   16 field offset Fseq[_running] $281
N005 (  1,  1) [000212] ------------              \--*  CNS_INT   int    0 $40

***** BB26
STMT00058 (IL 0x1D3...0x1D3)
N001 (  0,  0) [000215] ------------              *  RETURN    void   $442

------------ BB27 [0CA..0CD) -> BB29 (cond), preds={} succs={BB28,BB29}

***** BB27
STMT00031 (IL 0x0CA...0x0CB)
N005 (  8,  8) [000126] ----G-------              *  JTRUE     void  
N004 (  6,  6) [000125] J---G--N----              \--*  EQ        int    $342
N002 (  4,  4) [000336] ----G-------                 +--*  CAST      int <- bool <- int $341
N001 (  3,  2) [000123] ----G-------                 |  \--*  LCL_VAR   int   (AX) V05 loc3          $381
N003 (  1,  1) [000124] ------------                 \--*  CNS_INT   int    0 $40

------------ BB28 [0CD..0D3), preds={BB27} succs={BB29}

***** BB28
STMT00033 (IL 0x0CD...0x0CE)
N003 ( 15,  7) [000129] --CXG-------              *  CALL      void   System.Threading.Monitor.Exit $VN.Void
N002 (  1,  1) [000128] ------------ arg0 in rcx  \--*  LCL_VAR   ref    V04 loc2         u:3 (last use) <l:$256, c:$b2>

------------ BB29 [0D3..0D4) (finret), preds={BB27,BB28} succs={}

***** BB29
STMT00032 (IL 0x0D3...0x0D3)
N001 (  0,  0) [000127] ------------              *  RETFILT   void   $440

------------ BB30 [126..129) -> BB32 (cond), preds={BB13} succs={BB31,BB32}

***** BB30
STMT00062 (IL 0x126...0x127)
N005 (  8,  8) [000226] ----G-------              *  JTRUE     void  
N004 (  6,  6) [000225] J---G--N----              \--*  EQ        int    $34c
N002 (  4,  4) [000360] ----G-------                 +--*  CAST      int <- bool <- int $34b
N001 (  3,  2) [000223] ----G-------                 |  \--*  LCL_VAR   int   (AX) V05 loc3          $383
N003 (  1,  1) [000224] ------------                 \--*  CNS_INT   int    0 $40

------------ BB31 [129..12F), preds={BB30} succs={BB32}

***** BB31
STMT00064 (IL 0x129...0x12A)
N003 ( 15,  7) [000229] --CXG-------              *  CALL      void   System.Threading.Monitor.Exit $VN.Void
N002 (  1,  1) [000228] ------------ arg0 in rcx  \--*  LCL_VAR   ref    V04 loc2         u:2 (last use) <l:$41a, c:$3df>

------------ BB32 [12F..130) (finret), preds={BB30,BB31} succs={BB14}

***** BB32
STMT00063 (IL 0x12F...0x12F)
N001 (  0,  0) [000227] ------------              *  RETFILT   void   $441

-------------------------------------------------------------------------------------------------------------------

*************** Starting PHASE Rationalize IR
rewriting asg(LCL_VAR, X) to STORE_LCL_VAR(X)
N003 ( 18,  8) [000003] DACXG-------              *  STORE_LCL_VAR struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  *    long   V02._dateData (offs=0x00) -> V17 tmp10        

Rewriting GT_ADDR(GT_LCL_VAR) to GT_LCL_VAR_ADDR:
N003 (  3,  2) [000004] -------N----         t4 =    LCL_VAR_ADDR byref  V02 loc0         
                                                  *    long   V02._dateData (offs=0x00) -> V17 tmp10        

rewriting asg(LCL_VAR, X) to STORE_LCL_VAR(X)
N007 ( 17, 10) [000272] DACXG-----L-              *  STORE_LCL_VAR ref    V21 tmp14        d:2

rewriting asg(LCL_VAR, X) to STORE_LCL_VAR(X)
N005 ( 16, 16) [000014] DAC---------              *  STORE_LCL_VAR ref    V08 tmp1         d:2

rewriting asg(LCL_VAR, X) to STORE_LCL_VAR(X)
N005 ( 16, 16) [000026] DAC---------              *  STORE_LCL_VAR ref    V09 tmp2         d:2

rewriting asg(LCL_VAR, X) to STORE_LCL_VAR(X)
N009 (  7,  7) [000030] DA-XGO------              *  STORE_LCL_VAR ref    V10 tmp3         d:2

rewriting asg(LCL_VAR, X) to STORE_LCL_VAR(X)
N005 ( 16, 16) [000040] DAC---------              *  STORE_LCL_VAR ref    V11 tmp4         d:2

rewriting asg(LCL_VAR, X) to STORE_LCL_VAR(X)
N005 ( 16, 16) [000047] DAC---------              *  STORE_LCL_VAR ref    V12 tmp5         d:2

rewriting asg(LCL_VAR, X) to STORE_LCL_VAR(X)
N003 ( 18,  8) [000055] DACXG-------              *  STORE_LCL_VAR struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  *    long   V02._dateData (offs=0x00) -> V17 tmp10        

Rewriting GT_ADDR(GT_LCL_VAR) to GT_LCL_VAR_ADDR:
N003 (  3,  2) [000056] -------N----        t56 =    LCL_VAR_ADDR byref  V02 loc0         
                                                  *    long   V02._dateData (offs=0x00) -> V17 tmp10        

rewriting asg(LCL_VAR, X) to STORE_LCL_VAR(X)
N007 ( 17, 10) [000300] DACXG-----L-              *  STORE_LCL_VAR ref    V22 tmp15        d:2

rewriting asg(LCL_VAR, X) to STORE_LCL_VAR(X)
N003 (  1,  3) [000064] DA----------              *  STORE_LCL_VAR int    V03 loc1         d:2

rewriting asg(LCL_VAR, X) to STORE_LCL_VAR(X)
N006 (  8,  7) [000072] DA--GO------              *  STORE_LCL_VAR ref    V04 loc2         d:3

rewriting asg(LCL_VAR, X) to STORE_LCL_VAR(X)
N003 (  5,  4) [000075] DA--G-------              *  STORE_LCL_VAR int   (AX) V05 loc3         

rewriting asg(LCL_VAR, X) to STORE_LCL_VAR(X)
N005 ( 16, 16) [000086] DAC---------              *  STORE_LCL_VAR ref    V13 tmp6         d:2

rewriting asg(LCL_VAR, X) to STORE_LCL_VAR(X)
N009 (  7,  7) [000090] DA-XGO------              *  STORE_LCL_VAR ref    V14 tmp7         d:2

rewriting asg(LCL_VAR, X) to STORE_LCL_VAR(X)
N006 (  4,  4) [000414] DA--GO------              *  STORE_LCL_VAR ref    V28 cse1         d:1

rewriting asg(LCL_VAR, X) to STORE_LCL_VAR(X)
N020 (  7,  7) [000409] DA-XG-------              *  STORE_LCL_VAR ref    V27 cse0         d:1

rewriting asg(LCL_VAR, X) to STORE_LCL_VAR(X)
N005 ( 16, 16) [000109] DAC---------              *  STORE_LCL_VAR ref    V15 tmp8         d:2

rewriting asg(LCL_VAR, X) to STORE_LCL_VAR(X)
N003 (  1,  3) [000113] DA--G-------              *  STORE_LCL_VAR ref    V16 tmp9         d:2

rewriting asg(LCL_VAR, X) to STORE_LCL_VAR(X)
N005 (  3,  3) [000122] DA----------              *  STORE_LCL_VAR int    V03 loc1         d:4

rewriting asg(LCL_VAR, X) to STORE_LCL_VAR(X)
N003 ( 18,  8) [000133] DACXG-------              *  STORE_LCL_VAR struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  *    long   V02._dateData (offs=0x00) -> V17 tmp10        

Rewriting GT_ADDR(GT_LCL_VAR) to GT_LCL_VAR_ADDR:
N003 (  3,  2) [000134] -------N----       t134 =    LCL_VAR_ADDR byref  V02 loc0         
                                                  *    long   V02._dateData (offs=0x00) -> V17 tmp10        

rewriting asg(LCL_VAR, X) to STORE_LCL_VAR(X)
N007 ( 17, 10) [000342] DACXG-----L-              *  STORE_LCL_VAR ref    V23 tmp16        d:2

rewriting asg(LCL_VAR, X) to STORE_LCL_VAR(X)
N006 (  8,  7) [000143] DA--GO------              *  STORE_LCL_VAR ref    V04 loc2         d:2

rewriting asg(LCL_VAR, X) to STORE_LCL_VAR(X)
N003 (  5,  4) [000146] DA--G-------              *  STORE_LCL_VAR int   (AX) V05 loc3         

rewriting asg(LCL_VAR, X) to STORE_LCL_VAR(X)
N006 (  4,  4) [000419] DA--GO------              *  STORE_LCL_VAR ref    V29 cse2         d:1

rewriting asg(LCL_VAR, X) to STORE_LCL_VAR(X)
N003 ( 18,  8) [000164] DACXG-------              *  STORE_LCL_VAR struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  *    long   V02._dateData (offs=0x00) -> V17 tmp10        

Rewriting GT_ADDR(GT_LCL_VAR) to GT_LCL_VAR_ADDR:
N003 (  3,  2) [000165] -------N----       t165 =    LCL_VAR_ADDR byref  V02 loc0         
                                                  *    long   V02._dateData (offs=0x00) -> V17 tmp10        

rewriting asg(LCL_VAR, X) to STORE_LCL_VAR(X)
N007 ( 17, 10) [000367] DACXG-----L-              *  STORE_LCL_VAR ref    V24 tmp17        d:2

Rewriting GT_ADDR(GT_LCL_VAR) to GT_LCL_VAR_ADDR:
N003 (  3,  2) [000236] -------N----       t236 =    LCL_VAR_ADDR byref  V06 loc4         
                                                  *    ushort V06._keyChar (offs=0x00) -> V18 tmp11        
                                                  *    int    V06._key (offs=0x04) -> V19 tmp12        
                                                  *    int    V06._mods (offs=0x08) -> V20 tmp13        


*************** Finishing PHASE Rationalize IR
Trees after Rationalize IR

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..072)                                     i hascall gcsafe newobj LIR 
BB02 [0001]  2       BB01,BB06             8     0 [072..07B)                                     i Loop gcsafe bwd bwd-target LIR 
BB03 [0002]  1  0    BB02                  8     0 [07B..0CA)                 T0      try { }     keep i try hascall gcsafe newobj bwd LIR 
BB04 [0038]  1       BB03                  8     0 [0CA..0CD)-> BB06 ( cond )                     keep i gcsafe bwd LIR cfb 
BB05 [0039]  1       BB04                  4     0 [0CD..0D4)                                     i hascall gcsafe bwd LIR 
BB06 [0006]  2       BB04,BB05             8     0 [0D4..0DD)-> BB02 ( cond )                     i gcsafe bwd LIR 
BB07 [0008]  1       BB06                  1       [0DD..0F9)                                     i hascall gcsafe LIR 
BB08 [0009]  2       BB07,BB12             8     1 [0F9..102)                                     i Loop gcsafe bwd bwd-target LIR 
BB09 [0010]  1  1    BB08                  8     1 [102..122)-> BB13 ( cond ) T1      try { }     keep i try hascall gcsafe bwd LIR 
BB10 [0041]  1       BB09                  8     1 [126..129)-> BB12 ( cond )                     keep i gcsafe bwd LIR cfb 
BB11 [0042]  1       BB10                  4     1 [129..130)                                     i hascall gcsafe bwd LIR 
BB12 [0016]  2       BB10,BB11             8     1 [130..139)-> BB08 (always)                     i hascall gcsafe bwd LIR 
BB13 [0030]  1       BB09                  1       [???..???)-> BB30 (callf )                     i internal gcsafe LIR 
BB14 [0031]  1       BB32                  1       [???..???)-> BB15 (ALWAYS)                     i internal gcsafe LIR KEEP 
BB15 [0017]  1       BB14                  1       [139..17D)                                     i hascall gcsafe LIR 
BB19 [0018]  5       BB15,BB20,BB22,BB24,BB25   8     5 [17D..18F)-> BB21 ( cond )                     i Loop hascall gcsafe bwd bwd-target LIR 
BB20 [0019]  1       BB19                  8     5 [18F..19B)-> BB19 (always)                     i hascall gcsafe bwd LIR 
BB21 [0020]  1       BB19                  1     4 [19B..1A6)-> BB23 ( cond )                     i gcsafe bwd LIR 
BB22 [0021]  1       BB21                  1     4 [1A6..1AD)-> BB19 (always)                     i hascall gcsafe bwd LIR 
BB23 [0022]  1       BB21                  1     3 [1AD..1B8)-> BB25 ( cond )                     i gcsafe bwd LIR 
BB24 [0023]  1       BB23                  1     3 [1B8..1C1)-> BB19 (always)                     i gcsafe bwd LIR 
BB25 [0024]  1       BB23                  1     2 [1C1..1CC)-> BB19 ( cond )                     i gcsafe bwd LIR 
BB26 [0025]  1       BB25                  1       [1CC..1D4)        (return)                     i gcsafe LIR 
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ funclets follow
BB27 [0003]  1     0                       0       [0CA..0CD)-> BB29 ( cond )    H0 F fault {     keep i rare flet bwd LIR 
BB28 [0004]  1     0 BB27                  0       [0CD..0D3)                    H0               i rare hascall bwd LIR 
BB29 [0005]  2     0 BB27,BB28             0       [0D3..0D4)        (finret)    H0   }           i rare bwd LIR 
BB30 [0013]  2     1 BB13                  1       [126..129)-> BB32 ( cond )    H1 F finally {   keep i gcsafe flet bwd LIR 
BB31 [0014]  1     1 BB30                  1       [129..12F)                    H1               i hascall gcsafe bwd LIR 
BB32 [0015]  2     1 BB30,BB31             1       [12F..130)        (finret)    H1   }           i gcsafe bwd LIR 
-----------------------------------------------------------------------------------------------------------------------------------------

------------ BB01 [000..072), preds={} succs={BB02}
               [000425] ------------                 IL_OFFSET void   IL offset: 0x0
N001 ( 14,  5) [000000] --CXG-------         t0 =    CALL      struct System.DateTime.get_Now $c0
                                                  /--*  t0     struct 
N003 ( 18,  8) [000003] DA-XG-------              *  STORE_LCL_VAR struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  *    long   V02._dateData (offs=0x00) -> V17 tmp10        
               [000426] ------------                 IL_OFFSET void   IL offset: 0x6
N003 (  3,  2) [000004] -------N----         t4 =    LCL_VAR_ADDR byref  V02 loc0         
                                                  *    long   V02._dateData (offs=0x00) -> V17 tmp10        
                                                  /--*  t4     byref  this in rcx
N005 ( 17, 10) [000006] --CXG-------         t6 = *  CALL      ref    System.DateTime.ToString $84
                                                  /--*  t6     ref    
N007 ( 17, 10) [000272] DA-XG-----L-              *  STORE_LCL_VAR ref    V21 tmp14        d:2
N009 (  1,  1) [000273] ------------       t273 =    LCL_VAR   ref    V21 tmp14        u:2 (last use) $84
N010 (  2, 10) [000269] H-----------       t269 =    CNS_INT(h) long   0x750031F0 "	 Created list" $1c0
                                                  /--*  t269   long   
N011 (  4, 12) [000270] #---G-------       t270 = *  IND       ref    $88
                                                  /--*  t273   ref    arg0 in rcx
                                                  +--*  t270   ref    arg1 in rdx
N012 ( 39, 30) [000008] --CXG-------         t8 = *  CALL      ref    System.String.Concat $89
                                                  /--*  t8     ref    arg0 in rcx
N013 ( 53, 36) [000009] --CXG-------              *  CALL      void   System.Console.WriteLine $VN.Void
               [000427] ------------                 IL_OFFSET void   IL offset: 0x1c
N002 (  2, 10) [000011] H-----------        t11 =    CNS_INT(h) long   0x7ffdb3ee2350 method $1c1
                                                  /--*  t11    long   arg0 in rcx
N003 ( 16, 16) [000012] --C---------        t12 = *  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST $240
                                                  /--*  t12    ref    
N005 ( 16, 16) [000014] DA----------              *  STORE_LCL_VAR ref    V08 tmp1         d:2
N002 (  1,  1) [000015] ------------        t15 =    LCL_VAR   ref    V08 tmp1         u:2 $240
                                                  /--*  t15    ref    this in rcx
N003 ( 15,  8) [000016] --CXG-------              *  CALL      void   FalseLeakRepro.List..ctor $VN.Void
               [000428] ------------                 IL_OFFSET void   IL offset: 0x22
N001 (  1,  1) [000010] ------------        t10 =    LCL_VAR   ref    V00 this         u:1 $80
N002 (  1,  1) [000278] ------------       t278 =    CNS_INT   long   8 field offset Fseq[_myList] $280
                                                  /--*  t10    ref    
                                                  +--*  t278   long   
N003 (  2,  2) [000279] -------N----       t279 = *  ADD       byref  $181
N005 (  1,  1) [000017] ------------        t17 =    LCL_VAR   ref    V08 tmp1         u:2 (last use) $240
                                                  /--*  t279   byref  
                                                  +--*  t17    ref    
               [000429] -A-XG-------              *  STOREIND  ref   
               [000430] ------------                 IL_OFFSET void   IL offset: 0x27
N002 (  2, 10) [000023] H-----------        t23 =    CNS_INT(h) long   0x7ffdb3b058b8 token $1c3
                                                  /--*  t23    long   arg0 in rcx
N003 ( 16, 16) [000024] --C---------        t24 = *  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST $243
                                                  /--*  t24    ref    
N005 ( 16, 16) [000026] DA----------              *  STORE_LCL_VAR ref    V09 tmp2         d:2
N001 (  1,  1) [000020] ------------        t20 =    LCL_VAR   ref    V00 this         u:1 $80
N002 (  1,  1) [000283] ------------       t283 =    CNS_INT   long   8 field offset Fseq[_myList] $280
                                                  /--*  t20    ref    
                                                  +--*  t283   long   
N003 (  2,  2) [000284] -------N----       t284 = *  ADD       byref  $181
                                                  /--*  t284   byref  
N004 (  4,  4) [000021] n---GO------        t21 = *  IND       ref    <l:$246, c:$245>
N005 (  1,  1) [000281] ------------       t281 =    CNS_INT   long   8 field offset Fseq[Head] $280
                                                  /--*  t21    ref    
                                                  +--*  t281   long   
N006 (  5,  5) [000282] ----GO-N----       t282 = *  ADD       byref  <l:$185, c:$184>
                                                  /--*  t282   byref  
N007 (  7,  7) [000022] ---XGO------        t22 = *  IND       ref    <l:$250, c:$24f>
                                                  /--*  t22    ref    
N009 (  7,  7) [000030] DA-XGO------              *  STORE_LCL_VAR ref    V10 tmp3         d:2
N002 (  1,  1) [000027] ------------        t27 =    LCL_VAR   ref    V09 tmp2         u:2 $243
                                                  /--*  t27    ref    this in rcx
N003 ( 15,  8) [000028] --CXG-------              *  CALL      void   System.Object..ctor $VN.Void
               [000431] ------------                 IL_OFFSET void   IL offset: 0x37
N001 (  1,  1) [000031] ------------        t31 =    LCL_VAR   ref    V10 tmp3         u:2 (last use) <l:$248, c:$94>
N002 (  1,  1) [000286] ------------       t286 =    CNS_INT   long   16 field offset Fseq[Data] $281
                                                  /--*  t31    ref    
                                                  +--*  t286   long   
N003 (  2,  2) [000287] -------N----       t287 = *  ADD       byref  <l:$187, c:$186>
N005 (  1,  1) [000032] ------------        t32 =    LCL_VAR   ref    V09 tmp2         u:2 (last use) $243
                                                  /--*  t287   byref  
                                                  +--*  t32    ref    
               [000432] -A-XG-------              *  STOREIND  ref   
               [000433] ------------                 IL_OFFSET void   IL offset: 0x3c
N002 (  2, 10) [000037] H-----------        t37 =    CNS_INT(h) long   0x7ffdb3ee6200 token $1c6
                                                  /--*  t37    long   arg0 in rcx
N003 ( 16, 16) [000038] --C---------        t38 = *  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST $253
                                                  /--*  t38    ref    
N005 ( 16, 16) [000040] DA----------              *  STORE_LCL_VAR ref    V11 tmp4         d:2
N004 (  1,  1) [000041] ------------        t41 =    LCL_VAR   ref    V11 tmp4         u:2 $253
N005 (  1,  1) [000035] ------------        t35 =    LCL_VAR   ref    V00 this         u:1 $80
N006 (  2, 10) [000036] H-----------        t36 =    CNS_INT(h) long   0x7ffdb3b213f8 ftn $1c7
                                                  /--*  t41    ref    this in rcx
                                                  +--*  t35    ref    arg1 in rdx
                                                  +--*  t36    long   arg2 in r8
N007 ( 18, 21) [000042] --CXG-------              *  CALL      void   System.MulticastDelegate.CtorClosed $VN.Void
               [000434] ------------                 IL_OFFSET void   IL offset: 0x48
N002 (  2, 10) [000044] H-----------        t44 =    CNS_INT(h) long   0x7ffdb3c84e80 token $1c8
                                                  /--*  t44    long   arg0 in rcx
N003 ( 16, 16) [000045] --C---------        t45 = *  CALL help ref    HELPER.CORINFO_HELP_NEWFAST $254
                                                  /--*  t45    ref    
N005 ( 16, 16) [000047] DA----------              *  STORE_LCL_VAR ref    V12 tmp5         d:2
N003 (  1,  1) [000048] ------------        t48 =    LCL_VAR   ref    V12 tmp5         u:2 $254
N004 (  1,  1) [000043] ------------        t43 =    LCL_VAR   ref    V11 tmp4         u:2 (last use) $253
                                                  /--*  t48    ref    this in rcx
                                                  +--*  t43    ref    arg1 in rdx
N005 ( 16, 10) [000049] --CXG-------              *  CALL      void   System.Threading.Thread..ctor $VN.Void
               [000435] ------------                 IL_OFFSET void   IL offset: 0x4d
N002 (  1,  1) [000050] ------------        t50 =    LCL_VAR   ref    V12 tmp5         u:2 (last use) $254
                                                  /--*  t50    ref    this in rcx
N003 ( 15,  8) [000051] --CXG-------              *  CALL      void   System.Threading.Thread.Start $VN.Void
               [000436] ------------                 IL_OFFSET void   IL offset: 0x52
N001 ( 14,  5) [000052] --CXG-------        t52 =    CALL      struct System.DateTime.get_Now $c2
                                                  /--*  t52    struct 
N003 ( 18,  8) [000055] DA-XG-------              *  STORE_LCL_VAR struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  *    long   V02._dateData (offs=0x00) -> V17 tmp10        
               [000437] ------------                 IL_OFFSET void   IL offset: 0x58
N003 (  3,  2) [000056] -------N----        t56 =    LCL_VAR_ADDR byref  V02 loc0         
                                                  *    long   V02._dateData (offs=0x00) -> V17 tmp10        
                                                  /--*  t56    byref  this in rcx
N005 ( 17, 10) [000058] --CXG-------        t58 = *  CALL      ref    System.DateTime.ToString $a8
                                                  /--*  t58    ref    
N007 ( 17, 10) [000300] DA-XG-----L-              *  STORE_LCL_VAR ref    V22 tmp15        d:2
N009 (  1,  1) [000301] ------------       t301 =    LCL_VAR   ref    V22 tmp15        u:2 (last use) $a8
N010 (  2, 10) [000297] H-----------       t297 =    CNS_INT(h) long   0x750031F8 "	 Consumer thread started, adding items..." $1c9
                                                  /--*  t297   long   
N011 (  4, 12) [000298] #---G-------       t298 = *  IND       ref    $ac
                                                  /--*  t301   ref    arg0 in rcx
                                                  +--*  t298   ref    arg1 in rdx
N012 ( 39, 30) [000060] --CXG-------        t60 = *  CALL      ref    System.String.Concat $ad
                                                  /--*  t60    ref    arg0 in rcx
N013 ( 53, 36) [000061] --CXG-------              *  CALL      void   System.Console.WriteLine $VN.Void
               [000438] ------------                 IL_OFFSET void   IL offset: 0x6e
N001 (  1,  1) [000062] ------------        t62 =    CNS_INT   int    0 $40
                                                  /--*  t62    int    
N003 (  1,  3) [000064] DA----------              *  STORE_LCL_VAR int    V03 loc1         d:2

------------ BB02 [072..07B), preds={BB01,BB06} succs={BB03}
               [000439] ------------                 IL_OFFSET void   IL offset: 0x72
N001 (  1,  1) [000069] ------------        t69 =    LCL_VAR   ref    V00 this         u:1 $80
N002 (  1,  1) [000304] ------------       t304 =    CNS_INT   long   8 field offset Fseq[_myList] $280
                                                  /--*  t69    ref    
                                                  +--*  t304   long   
N003 (  2,  2) [000305] -------N----       t305 = *  ADD       byref  $181
                                                  /--*  t305   byref  
N004 (  4,  4) [000070] n---GO------        t70 = *  IND       ref    <l:$258, c:$257>
                                                  /--*  t70    ref    
N006 (  8,  7) [000072] DA--GO------              *  STORE_LCL_VAR ref    V04 loc2         d:3
               [000440] ------------                 IL_OFFSET void   IL offset: 0x79
N001 (  1,  1) [000073] ------------        t73 =    CNS_INT   int    0 $40
                                                  /--*  t73    int    
N003 (  5,  4) [000075] DA--G-------              *  STORE_LCL_VAR int   (AX) V05 loc3         

------------ BB03 [07B..0CA), preds={BB02} succs={BB04}
               [000441] ------------                 IL_OFFSET void   IL offset: 0x7b
N003 (  3,  3) [000078] ------------        t78 =    LCL_VAR_ADDR long   V05 loc3          $206
N004 (  1,  1) [000076] ------------        t76 =    LCL_VAR   ref    V04 loc2         u:3 <l:$256, c:$b2>
                                                  /--*  t78    long   arg1 in rdx
                                                  +--*  t76    ref    arg0 in rcx
N005 ( 18, 11) [000079] --CXG-------              *  CALL      void   System.Threading.Monitor.Enter $VN.Void
               [000442] ------------                 IL_OFFSET void   IL offset: 0x83
N002 (  2, 10) [000083] H-----------        t83 =    CNS_INT(h) long   0x7ffdb3ee58a8 method $1ca
                                                  /--*  t83    long   arg0 in rcx
N003 ( 16, 16) [000084] --C---------        t84 = *  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST $259
                                                  /--*  t84    ref    
N005 ( 16, 16) [000086] DA----------              *  STORE_LCL_VAR ref    V13 tmp6         d:2
N001 (  1,  1) [000080] ------------        t80 =    LCL_VAR   ref    V00 this         u:1 $80
N002 (  1,  1) [000311] ------------       t311 =    CNS_INT   long   8 field offset Fseq[_myList] $280
                                                  /--*  t80    ref    
                                                  +--*  t311   long   
N003 (  2,  2) [000312] -------N----       t312 = *  ADD       byref  $181
                                                  /--*  t312   byref  
N004 (  4,  4) [000081] n---GO------        t81 = *  IND       ref    <l:$25d, c:$25c>
N005 (  1,  1) [000309] ------------       t309 =    CNS_INT   long   8 field offset Fseq[Head] $280
                                                  /--*  t81    ref    
                                                  +--*  t309   long   
N006 (  5,  5) [000310] ----GO-N----       t310 = *  ADD       byref  <l:$18b, c:$18a>
                                                  /--*  t310   byref  
N007 (  7,  7) [000082] ---XGO------        t82 = *  IND       ref    <l:$267, c:$266>
                                                  /--*  t82    ref    
N009 (  7,  7) [000090] DA-XGO------              *  STORE_LCL_VAR ref    V14 tmp7         d:2
N002 (  1,  1) [000087] ------------        t87 =    LCL_VAR   ref    V13 tmp6         u:2 $259
                                                  /--*  t87    ref    this in rcx
N003 ( 15,  8) [000230] --CXG-------              *  CALL      void   System.Object..ctor $VN.Void
               [000443] ------------                 IL_OFFSET void   IL offset: 0x93
N001 (  1,  1) [000091] ------------        t91 =    LCL_VAR   ref    V14 tmp7         u:2 (last use) <l:$25f, c:$b9>
N002 (  1,  1) [000314] ------------       t314 =    CNS_INT   long   8 field offset Fseq[Next] $280
                                                  /--*  t91    ref    
                                                  +--*  t314   long   
N003 (  2,  2) [000315] -------N----       t315 = *  ADD       byref  <l:$18d, c:$18c>
N005 (  1,  1) [000092] ------------        t92 =    LCL_VAR   ref    V13 tmp6         u:2 (last use) $259
                                                  /--*  t315   byref  
                                                  +--*  t92    ref    
               [000444] -A-XG-------              *  STOREIND  ref   
               [000445] ------------                 IL_OFFSET void   IL offset: 0x98
N001 (  1,  1) [000095] ------------        t95 =    LCL_VAR   ref    V00 this         u:1 $80
N002 (  1,  1) [000318] ------------       t318 =    CNS_INT   long   8 field offset Fseq[_myList] $280
                                                  /--*  t95    ref    
                                                  +--*  t318   long   
N003 (  2,  2) [000319] -------N----       t319 = *  ADD       byref  $181
                                                  /--*  t319   byref  
N004 (  4,  4) [000096] n---GO------        t96 = *  IND       ref    <l:$26d, c:$26c>
                                                  /--*  t96    ref    
N006 (  4,  4) [000414] DA--GO------              *  STORE_LCL_VAR ref    V28 cse1         d:1
N007 (  1,  1) [000415] ------------       t415 =    LCL_VAR   ref    V28 cse1         u:1 <l:$26d, c:$26c>
N009 (  1,  1) [000316] ------------       t316 =    CNS_INT   long   8 field offset Fseq[Head] $280
                                                  /--*  t415   ref    
                                                  +--*  t316   long   
N010 (  6,  6) [000317] ----GO-N----       t317 = *  ADD       byref  <l:$191, c:$190>
N012 (  1,  1) [000417] ------------       t417 =    LCL_VAR   ref    V28 cse1         u:1 <l:$26b, c:$bf>
N013 (  1,  1) [000322] ------------       t322 =    CNS_INT   long   8 field offset Fseq[Head] $280
                                                  /--*  t417   ref    
                                                  +--*  t322   long   
N014 (  2,  2) [000323] ----G--N----       t323 = *  ADD       byref  <l:$191, c:$193>
                                                  /--*  t323   byref  
N015 (  4,  4) [000099] ---XG-------        t99 = *  IND       ref    <l:$278, c:$277>
N016 (  1,  1) [000320] ------------       t320 =    CNS_INT   long   8 field offset Fseq[Next] $280
                                                  /--*  t99    ref    
                                                  +--*  t320   long   
N017 (  5,  5) [000321] ---XG--N----       t321 = *  ADD       byref  <l:$197, c:$196>
                                                  /--*  t321   byref  
N018 (  7,  7) [000100] ---XG-------       t100 = *  IND       ref    <l:$403, c:$402>
                                                  /--*  t100   ref    
N020 (  7,  7) [000409] DA-XG-------              *  STORE_LCL_VAR ref    V27 cse0         d:1
N021 (  1,  1) [000410] ------------       t410 =    LCL_VAR   ref    V27 cse0         u:1 <l:$403, c:$402>
                                                  /--*  t317   byref  
                                                  +--*  t410   ref    
               [000446] -A-XGO------              *  STOREIND  ref   
               [000447] ------------                 IL_OFFSET void   IL offset: 0xb3
N002 (  2, 10) [000106] H-----------       t106 =    CNS_INT(h) long   0x7ffdb3b058b8 token $1c3
                                                  /--*  t106   long   arg0 in rcx
N003 ( 16, 16) [000107] --C---------       t107 = *  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST $404
                                                  /--*  t107   ref    
N005 ( 16, 16) [000109] DA----------              *  STORE_LCL_VAR ref    V15 tmp8         d:2
N001 (  1,  1) [000412] ------------       t412 =    LCL_VAR   ref    V27 cse0         u:1 <l:$279, c:$3c4>
                                                  /--*  t412   ref    
N003 (  1,  3) [000113] DA--G-------              *  STORE_LCL_VAR ref    V16 tmp9         d:2
N002 (  1,  1) [000110] ------------       t110 =    LCL_VAR   ref    V15 tmp8         u:2 $404
                                                  /--*  t110   ref    this in rcx
N003 ( 15,  8) [000111] --CXG-------              *  CALL      void   System.Object..ctor $VN.Void
               [000448] ------------                 IL_OFFSET void   IL offset: 0xc3
N001 (  1,  1) [000114] ------------       t114 =    LCL_VAR   ref    V16 tmp9         u:2 (last use) <l:$279, c:$3ca>
N002 (  1,  1) [000332] ------------       t332 =    CNS_INT   long   16 field offset Fseq[Data] $281
                                                  /--*  t114   ref    
                                                  +--*  t332   long   
N003 (  2,  2) [000333] -------N----       t333 = *  ADD       byref  <l:$19b, c:$19a>
N005 (  1,  1) [000115] ------------       t115 =    LCL_VAR   ref    V15 tmp8         u:2 (last use) $404
                                                  /--*  t333   byref  
                                                  +--*  t115   ref    
               [000449] -A-XG-------              *  STOREIND  ref   

------------ BB04 [0CA..0CD) -> BB06 (cond), preds={BB03} succs={BB05,BB06}
N001 (  3,  2) [000256] ------------       t256 =    LCL_VAR   int   (AX) V05 loc3          $382
                                                  /--*  t256   int    
N002 (  4,  4) [000334] ----G-------       t334 = *  CAST      int <- bool <- int $343
N003 (  1,  1) [000257] ------------       t257 =    CNS_INT   int    0 $40
                                                  /--*  t334   int    
                                                  +--*  t257   int    
N004 (  6,  6) [000255] J---G--N----       t255 = *  EQ        int    $344
                                                  /--*  t255   int    
N005 (  8,  8) [000254] ----G-------              *  JTRUE     void  

------------ BB05 [0CD..0D4), preds={BB04} succs={BB06}
N002 (  1,  1) [000259] ------------       t259 =    LCL_VAR   ref    V04 loc2         u:3 (last use) <l:$256, c:$b2>
                                                  /--*  t259   ref    arg0 in rcx
N003 ( 15,  7) [000258] --CXG-------              *  CALL      void   System.Threading.Monitor.Exit $VN.Void

------------ BB06 [0D4..0DD) -> BB02 (cond), preds={BB04,BB05} succs={BB07,BB02}
               [000450] ------------                 IL_OFFSET void   IL offset: 0xd4
N001 (  1,  1) [000118] ------------       t118 =    LCL_VAR   int    V03 loc1         u:3 (last use) $380
N002 (  1,  1) [000119] ------------       t119 =    CNS_INT   int    1 $4e
                                                  /--*  t118   int    
                                                  +--*  t119   int    
N003 (  3,  3) [000120] ------------       t120 = *  ADD       int    $345
                                                  /--*  t120   int    
N005 (  3,  3) [000122] DA----------              *  STORE_LCL_VAR int    V03 loc1         d:4
               [000451] ------------                 IL_OFFSET void   IL offset: 0xd8
N001 (  1,  1) [000065] ------------        t65 =    LCL_VAR   int    V03 loc1         u:4 $345
N002 (  1,  1) [000066] ------------        t66 =    CNS_INT   int    10 $43
                                                  /--*  t65    int    
                                                  +--*  t66    int    
N003 (  3,  3) [000067] J------N----        t67 = *  LT        int    $346
                                                  /--*  t67    int    
N004 (  5,  5) [000068] ------------              *  JTRUE     void  

------------ BB07 [0DD..0F9), preds={BB06} succs={BB08}
               [000452] ------------                 IL_OFFSET void   IL offset: 0xdd
N001 ( 14,  5) [000130] --CXG-------       t130 =    CALL      struct System.DateTime.get_Now $c4
                                                  /--*  t130   struct 
N003 ( 18,  8) [000133] DA-XG-------              *  STORE_LCL_VAR struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  *    long   V02._dateData (offs=0x00) -> V17 tmp10        
               [000453] ------------                 IL_OFFSET void   IL offset: 0xe3
N003 (  3,  2) [000134] -------N----       t134 =    LCL_VAR_ADDR byref  V02 loc0         
                                                  *    long   V02._dateData (offs=0x00) -> V17 tmp10        
                                                  /--*  t134   byref  this in rcx
N005 ( 17, 10) [000136] --CXG-------       t136 = *  CALL      ref    System.DateTime.ToString $3d5
                                                  /--*  t136   ref    
N007 ( 17, 10) [000342] DA-XG-----L-              *  STORE_LCL_VAR ref    V23 tmp16        d:2
N009 (  1,  1) [000343] ------------       t343 =    LCL_VAR   ref    V23 tmp16        u:2 (last use) $3d5
N010 (  2, 10) [000339] H-----------       t339 =    CNS_INT(h) long   0x75003200 "	 Waiting for list processing to complete..." $1cf
                                                  /--*  t339   long   
N011 (  4, 12) [000340] #---G-------       t340 = *  IND       ref    $3d9
                                                  /--*  t343   ref    arg0 in rcx
                                                  +--*  t340   ref    arg1 in rdx
N012 ( 39, 30) [000138] --CXG-------       t138 = *  CALL      ref    System.String.Concat $3da
                                                  /--*  t138   ref    arg0 in rcx
N013 ( 53, 36) [000139] --CXG-------              *  CALL      void   System.Console.WriteLine $VN.Void

------------ BB08 [0F9..102), preds={BB07,BB12} succs={BB09}
               [000454] ------------                 IL_OFFSET void   IL offset: 0xf9
N001 (  1,  1) [000140] ------------       t140 =    LCL_VAR   ref    V00 this         u:1 $80
N002 (  1,  1) [000346] ------------       t346 =    CNS_INT   long   8 field offset Fseq[_myList] $280
                                                  /--*  t140   ref    
                                                  +--*  t346   long   
N003 (  2,  2) [000347] -------N----       t347 = *  ADD       byref  $181
                                                  /--*  t347   byref  
N004 (  4,  4) [000141] n---GO------       t141 = *  IND       ref    <l:$41c, c:$41b>
                                                  /--*  t141   ref    
N006 (  8,  7) [000143] DA--GO------              *  STORE_LCL_VAR ref    V04 loc2         d:2
               [000455] ------------                 IL_OFFSET void   IL offset: 0x100
N001 (  1,  1) [000144] ------------       t144 =    CNS_INT   int    0 $40
                                                  /--*  t144   int    
N003 (  5,  4) [000146] DA--G-------              *  STORE_LCL_VAR int   (AX) V05 loc3         

------------ BB09 [102..122) -> BB13 (cond), preds={BB08} succs={BB10,BB13}
               [000456] ------------                 IL_OFFSET void   IL offset: 0x102
N003 (  3,  3) [000149] ------------       t149 =    LCL_VAR_ADDR long   V05 loc3          $20a
N004 (  1,  1) [000147] ------------       t147 =    LCL_VAR   ref    V04 loc2         u:2 <l:$41a, c:$3df>
                                                  /--*  t149   long   arg1 in rdx
                                                  +--*  t147   ref    arg0 in rcx
N005 ( 18, 11) [000150] --CXG-------              *  CALL      void   System.Threading.Monitor.Enter $VN.Void
               [000457] ------------                 IL_OFFSET void   IL offset: 0x10a
N001 (  1,  1) [000151] ------------       t151 =    LCL_VAR   ref    V00 this         u:1 $80
N002 (  1,  1) [000352] ------------       t352 =    CNS_INT   long   8 field offset Fseq[_myList] $280
                                                  /--*  t151   ref    
                                                  +--*  t352   long   
N003 (  2,  2) [000353] -------N----       t353 = *  ADD       byref  $181
                                                  /--*  t353   byref  
N004 (  4,  4) [000152] n---GO------       t152 = *  IND       ref    <l:$420, c:$41f>
                                                  /--*  t152   ref    
N006 (  4,  4) [000419] DA--GO------              *  STORE_LCL_VAR ref    V29 cse2         d:1
N007 (  1,  1) [000420] ------------       t420 =    LCL_VAR   ref    V29 cse2         u:1 <l:$420, c:$41f>
N009 (  1,  1) [000350] ------------       t350 =    CNS_INT   long   8 field offset Fseq[Head] $280
                                                  /--*  t420   ref    
                                                  +--*  t350   long   
N010 (  6,  6) [000351] ----GO-N----       t351 = *  ADD       byref  <l:$1a0, c:$19f>
                                                  /--*  t351   byref  
N011 (  8,  8) [000153] ---XGO------       t153 = *  IND       ref    <l:$42a, c:$429>
N012 (  1,  1) [000422] ------------       t422 =    LCL_VAR   ref    V29 cse2         u:1 <l:$41e, c:$3e3>
N013 (  1,  1) [000354] ------------       t354 =    CNS_INT   long   16 field offset Fseq[Tail] $281
                                                  /--*  t422   ref    
                                                  +--*  t354   long   
N014 (  2,  2) [000355] ----G--N----       t355 = *  ADD       byref  <l:$1a4, c:$1a3>
                                                  /--*  t355   byref  
N015 (  4,  4) [000156] ---XG-------       t156 = *  IND       ref    <l:$435, c:$434>
                                                  /--*  t153   ref    
                                                  +--*  t156   ref    
N016 ( 13, 13) [000157] N--XGO-N-U--       t157 = *  EQ        int    <l:$34a, c:$349>
                                                  /--*  t157   int    
N017 ( 15, 15) [000158] ---XGO------              *  JTRUE     void  

------------ BB10 [126..129) -> BB12 (cond), preds={BB09} succs={BB11,BB12}
N001 (  3,  2) [000263] ------------       t263 =    LCL_VAR   int   (AX) V05 loc3          $384
                                                  /--*  t263   int    
N002 (  4,  4) [000358] ----G-------       t358 = *  CAST      int <- bool <- int $34d
N003 (  1,  1) [000264] ------------       t264 =    CNS_INT   int    0 $40
                                                  /--*  t358   int    
                                                  +--*  t264   int    
N004 (  6,  6) [000262] J---G--N----       t262 = *  EQ        int    $34e
                                                  /--*  t262   int    
N005 (  8,  8) [000261] ----G-------              *  JTRUE     void  

------------ BB11 [129..130), preds={BB10} succs={BB12}
N002 (  1,  1) [000266] ------------       t266 =    LCL_VAR   ref    V04 loc2         u:2 (last use) <l:$41a, c:$3df>
                                                  /--*  t266   ref    arg0 in rcx
N003 ( 15,  7) [000265] --CXG-------              *  CALL      void   System.Threading.Monitor.Exit $VN.Void

------------ BB12 [130..139) -> BB08 (always), preds={BB10,BB11} succs={BB08}
               [000458] ------------                 IL_OFFSET void   IL offset: 0x130
N002 (  1,  1) [000159] ------------       t159 =    CNS_INT   int    100 $5b
                                                  /--*  t159   int    arg0 in rcx
N003 ( 15,  7) [000160] --CXG-------              *  CALL      void   System.Threading.Thread.Sleep $VN.Void

------------ BB13 [???..???) -> BB30 (callf), preds={BB09} succs={BB30}

------------ BB14 [???..???) -> BB15 (ALWAYS), preds={BB32} succs={BB15}

------------ BB15 [139..17D), preds={BB14} succs={BB19}
               [000459] ------------                 IL_OFFSET void   IL offset: 0x139
N001 ( 14,  5) [000161] --CXG-------       t161 =    CALL      struct System.DateTime.get_Now $c6
                                                  /--*  t161   struct 
N003 ( 18,  8) [000164] DA-XG-------              *  STORE_LCL_VAR struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  *    long   V02._dateData (offs=0x00) -> V17 tmp10        
               [000460] ------------                 IL_OFFSET void   IL offset: 0x13f
N003 (  3,  2) [000165] -------N----       t165 =    LCL_VAR_ADDR byref  V02 loc0         
                                                  *    long   V02._dateData (offs=0x00) -> V17 tmp10        
                                                  /--*  t165   byref  this in rcx
N005 ( 17, 10) [000167] --CXG-------       t167 = *  CALL      ref    System.DateTime.ToString $3ef
                                                  /--*  t167   ref    
N007 ( 17, 10) [000367] DA-XG-----L-              *  STORE_LCL_VAR ref    V24 tmp17        d:2
N009 (  1,  1) [000368] ------------       t368 =    LCL_VAR   ref    V24 tmp17        u:2 (last use) $3ef
N010 (  2, 10) [000364] H-----------       t364 =    CNS_INT(h) long   0x75003208 "	 Done.  Profiler is active, available options:" $1d3
                                                  /--*  t364   long   
N011 (  4, 12) [000365] #---G-------       t365 = *  IND       ref    $3f3
                                                  /--*  t368   ref    arg0 in rcx
                                                  +--*  t365   ref    arg1 in rdx
N012 ( 39, 30) [000169] --CXG-------       t169 = *  CALL      ref    System.String.Concat $3f4
                                                  /--*  t169   ref    arg0 in rcx
N013 ( 53, 36) [000170] --CXG-------              *  CALL      void   System.Console.WriteLine $VN.Void
               [000461] ------------                 IL_OFFSET void   IL offset: 0x155
N002 (  2, 10) [000371] H-----------       t371 =    CNS_INT(h) long   0x75003210 "   Q = quit" $1d4
                                                  /--*  t371   long   
N003 (  4, 12) [000372] #---G-------       t372 = *  IND       ref    $3f8
                                                  /--*  t372   ref    arg0 in rcx
N004 ( 18, 18) [000172] --CXG-------              *  CALL      void   System.Console.WriteLine $VN.Void
               [000462] ------------                 IL_OFFSET void   IL offset: 0x15f
N002 (  2, 10) [000374] H-----------       t374 =    CNS_INT(h) long   0x75003218 "   H = heap snapshot" $1d5
                                                  /--*  t374   long   
N003 (  4, 12) [000375] #---G-------       t375 = *  IND       ref    $3fb
                                                  /--*  t375   ref    arg0 in rcx
N004 ( 18, 18) [000174] --CXG-------              *  CALL      void   System.Console.WriteLine $VN.Void
               [000463] ------------                 IL_OFFSET void   IL offset: 0x169
N002 (  2, 10) [000377] H-----------       t377 =    CNS_INT(h) long   0x75003220 "   G = GC (max gen)" $1d6
                                                  /--*  t377   long   
N003 (  4, 12) [000378] #---G-------       t378 = *  IND       ref    $3fe
                                                  /--*  t378   ref    arg0 in rcx
N004 ( 18, 18) [000176] --CXG-------              *  CALL      void   System.Console.WriteLine $VN.Void
               [000464] ------------                 IL_OFFSET void   IL offset: 0x173
N002 (  2, 10) [000380] H-----------       t380 =    CNS_INT(h) long   0x75003228 "   R = clear the running flag to stop the consumer thread" $1d7
                                                  /--*  t380   long   
N003 (  4, 12) [000381] #---G-------       t381 = *  IND       ref    $4c1
                                                  /--*  t381   ref    arg0 in rcx
N004 ( 18, 18) [000178] --CXG-------              *  CALL      void   System.Console.WriteLine $VN.Void

------------ BB19 [17D..18F) -> BB21 (cond), preds={BB15,BB20,BB22,BB24,BB25} succs={BB20,BB21}
N003 (  3,  2) [000236] -------N----       t236 =    LCL_VAR_ADDR byref  V06 loc4         
                                                  *    ushort V06._keyChar (offs=0x00) -> V18 tmp11        
                                                  *    int    V06._key (offs=0x04) -> V19 tmp12        
                                                  *    int    V06._mods (offs=0x08) -> V20 tmp13        
N005 (  1,  1) [000232] ------------       t232 =    CNS_INT   int    0 $40
                                                  /--*  t236   byref  arg0 in rcx
                                                  +--*  t232   int    arg1 in rdx
N006 ( 18, 11) [000233] S-CXG-------              *  CALL      void   System.ConsolePal.ReadKey $VN.Void
N001 (  3,  2) [000240] ------------       t240 =    LCL_VAR   int   (AX) V19 tmp12         $385
N002 (  1,  1) [000187] ------------       t187 =    CNS_INT   int    71 $5e
                                                  /--*  t240   int    
                                                  +--*  t187   int    
N003 (  5,  4) [000188] N---G--N-U--       t188 = *  NE        int    $34f
                                                  /--*  t188   int    
N004 (  7,  6) [000189] ----G-------              *  JTRUE     void  

------------ BB20 [18F..19B) -> BB19 (always), preds={BB19} succs={BB19}
               [000465] ------------                 IL_OFFSET void   IL offset: 0x18f
N002 ( 14,  5) [000221] --CXG-------       t221 =    CALL      int    System.GC.get_MaxGeneration $305
                                                  /--*  t221   int    arg0 in rcx
N003 ( 28, 11) [000222] --CXG-------              *  CALL      void   System.GC.Collect $VN.Void

------------ BB21 [19B..1A6) -> BB23 (cond), preds={BB19} succs={BB22,BB23}
N001 (  3,  2) [000244] ------------       t244 =    LCL_VAR   int   (AX) V19 tmp12         $385
N002 (  1,  1) [000194] ------------       t194 =    CNS_INT   int    72 $5f
                                                  /--*  t244   int    
                                                  +--*  t194   int    
N003 (  5,  4) [000195] N---G--N-U--       t195 = *  NE        int    $350
                                                  /--*  t195   int    
N004 (  7,  6) [000196] ----G-------              *  JTRUE     void  

------------ BB22 [1A6..1AD) -> BB19 (always), preds={BB21} succs={BB19}
               [000466] ------------                 IL_OFFSET void   IL offset: 0x1a6
N001 ( 14,  5) [000220] --CXG-------                 CALL      void   System.Diagnostics.Debugger.Break $VN.Void

------------ BB23 [1AD..1B8) -> BB25 (cond), preds={BB21} succs={BB24,BB25}
N001 (  3,  2) [000248] ------------       t248 =    LCL_VAR   int   (AX) V19 tmp12         $385
N002 (  1,  1) [000201] ------------       t201 =    CNS_INT   int    82 $60
                                                  /--*  t248   int    
                                                  +--*  t201   int    
N003 (  5,  4) [000202] N---G--N-U--       t202 = *  NE        int    $351
                                                  /--*  t202   int    
N004 (  7,  6) [000203] ----G-------              *  JTRUE     void  

------------ BB24 [1B8..1C1) -> BB19 (always), preds={BB23} succs={BB19}
               [000467] ------------                 IL_OFFSET void   IL offset: 0x1b8
N001 (  1,  1) [000216] ------------       t216 =    LCL_VAR   ref    V00 this         u:1 $80
N002 (  1,  1) [000386] ------------       t386 =    CNS_INT   long   16 field offset Fseq[_running] $281
                                                  /--*  t216   ref    
                                                  +--*  t386   long   
N003 (  2,  2) [000387] -------N----       t387 = *  ADD       byref  $1a7
N005 (  1,  1) [000217] ------------       t217 =    CNS_INT   int    0 $40
                                                  /--*  t387   byref  
                                                  +--*  t217   int    
               [000468] -A--GO------              *  STOREIND  bool  

------------ BB25 [1C1..1CC) -> BB19 (cond), preds={BB23} succs={BB26,BB19}
N001 (  3,  2) [000252] ------------       t252 =    LCL_VAR   int   (AX) V19 tmp12         $385
N002 (  1,  1) [000208] ------------       t208 =    CNS_INT   int    81 $61
                                                  /--*  t252   int    
                                                  +--*  t208   int    
N003 (  5,  4) [000209] N---G--N-U--       t209 = *  NE        int    $352
                                                  /--*  t209   int    
N004 (  7,  6) [000210] ----G-------              *  JTRUE     void  

------------ BB26 [1CC..1D4) (return), preds={BB25} succs={}
               [000469] ------------                 IL_OFFSET void   IL offset: 0x1cc
N001 (  1,  1) [000211] ------------       t211 =    LCL_VAR   ref    V00 this         u:1 (last use) $80
N002 (  1,  1) [000388] ------------       t388 =    CNS_INT   long   16 field offset Fseq[_running] $281
                                                  /--*  t211   ref    
                                                  +--*  t388   long   
N003 (  2,  2) [000389] -------N----       t389 = *  ADD       byref  $1a7
N005 (  1,  1) [000212] ------------       t212 =    CNS_INT   int    0 $40
                                                  /--*  t389   byref  
                                                  +--*  t212   int    
               [000470] -A--GO------              *  STOREIND  bool  
               [000471] ------------                 IL_OFFSET void   IL offset: 0x1d3
N001 (  0,  0) [000215] ------------                 RETURN    void   $442

------------ BB27 [0CA..0CD) -> BB29 (cond), preds={} succs={BB28,BB29}
               [000472] ------------                 IL_OFFSET void   IL offset: 0xca
N001 (  3,  2) [000123] ------------       t123 =    LCL_VAR   int   (AX) V05 loc3          $381
                                                  /--*  t123   int    
N002 (  4,  4) [000336] ----G-------       t336 = *  CAST      int <- bool <- int $341
N003 (  1,  1) [000124] ------------       t124 =    CNS_INT   int    0 $40
                                                  /--*  t336   int    
                                                  +--*  t124   int    
N004 (  6,  6) [000125] J---G--N----       t125 = *  EQ        int    $342
                                                  /--*  t125   int    
N005 (  8,  8) [000126] ----G-------              *  JTRUE     void  

------------ BB28 [0CD..0D3), preds={BB27} succs={BB29}
               [000473] ------------                 IL_OFFSET void   IL offset: 0xcd
N002 (  1,  1) [000128] ------------       t128 =    LCL_VAR   ref    V04 loc2         u:3 (last use) <l:$256, c:$b2>
                                                  /--*  t128   ref    arg0 in rcx
N003 ( 15,  7) [000129] --CXG-------              *  CALL      void   System.Threading.Monitor.Exit $VN.Void

------------ BB29 [0D3..0D4) (finret), preds={BB27,BB28} succs={}
               [000474] ------------                 IL_OFFSET void   IL offset: 0xd3
N001 (  0,  0) [000127] ------------                 RETFILT   void   $440

------------ BB30 [126..129) -> BB32 (cond), preds={BB13} succs={BB31,BB32}
               [000475] ------------                 IL_OFFSET void   IL offset: 0x126
N001 (  3,  2) [000223] ------------       t223 =    LCL_VAR   int   (AX) V05 loc3          $383
                                                  /--*  t223   int    
N002 (  4,  4) [000360] ----G-------       t360 = *  CAST      int <- bool <- int $34b
N003 (  1,  1) [000224] ------------       t224 =    CNS_INT   int    0 $40
                                                  /--*  t360   int    
                                                  +--*  t224   int    
N004 (  6,  6) [000225] J---G--N----       t225 = *  EQ        int    $34c
                                                  /--*  t225   int    
N005 (  8,  8) [000226] ----G-------              *  JTRUE     void  

------------ BB31 [129..12F), preds={BB30} succs={BB32}
               [000476] ------------                 IL_OFFSET void   IL offset: 0x129
N002 (  1,  1) [000228] ------------       t228 =    LCL_VAR   ref    V04 loc2         u:2 (last use) <l:$41a, c:$3df>
                                                  /--*  t228   ref    arg0 in rcx
N003 ( 15,  7) [000229] --CXG-------              *  CALL      void   System.Threading.Monitor.Exit $VN.Void

------------ BB32 [12F..130) (finret), preds={BB30,BB31} succs={BB14}
               [000477] ------------                 IL_OFFSET void   IL offset: 0x12f
N001 (  0,  0) [000227] ------------                 RETFILT   void   $441

-------------------------------------------------------------------------------------------------------------------
*************** In fgDebugCheckBBlist

*************** Starting PHASE Do 'simple' lowering
Bumping outgoingArgSpaceSize to 32 for call [000000]
outgoingArgSpaceSize 32 sufficient for call [000006], which needs 32
outgoingArgSpaceSize 32 sufficient for call [000008], which needs 32
outgoingArgSpaceSize 32 sufficient for call [000009], which needs 32
outgoingArgSpaceSize 32 sufficient for call [000012], which needs 32
outgoingArgSpaceSize 32 sufficient for call [000016], which needs 32
outgoingArgSpaceSize 32 sufficient for call [000024], which needs 32
outgoingArgSpaceSize 32 sufficient for call [000028], which needs 32
outgoingArgSpaceSize 32 sufficient for call [000038], which needs 32
outgoingArgSpaceSize 32 sufficient for call [000042], which needs 32
outgoingArgSpaceSize 32 sufficient for call [000045], which needs 32
outgoingArgSpaceSize 32 sufficient for call [000049], which needs 32
outgoingArgSpaceSize 32 sufficient for call [000051], which needs 32
outgoingArgSpaceSize 32 sufficient for call [000052], which needs 32
outgoingArgSpaceSize 32 sufficient for call [000058], which needs 32
outgoingArgSpaceSize 32 sufficient for call [000060], which needs 32
outgoingArgSpaceSize 32 sufficient for call [000061], which needs 32
outgoingArgSpaceSize 32 sufficient for call [000079], which needs 32
outgoingArgSpaceSize 32 sufficient for call [000084], which needs 32
outgoingArgSpaceSize 32 sufficient for call [000230], which needs 32
outgoingArgSpaceSize 32 sufficient for call [000107], which needs 32
outgoingArgSpaceSize 32 sufficient for call [000111], which needs 32
outgoingArgSpaceSize 32 sufficient for call [000258], which needs 32
outgoingArgSpaceSize 32 sufficient for call [000130], which needs 32
outgoingArgSpaceSize 32 sufficient for call [000136], which needs 32
outgoingArgSpaceSize 32 sufficient for call [000138], which needs 32
outgoingArgSpaceSize 32 sufficient for call [000139], which needs 32
outgoingArgSpaceSize 32 sufficient for call [000150], which needs 32
outgoingArgSpaceSize 32 sufficient for call [000265], which needs 32
outgoingArgSpaceSize 32 sufficient for call [000160], which needs 32
outgoingArgSpaceSize 32 sufficient for call [000161], which needs 32
outgoingArgSpaceSize 32 sufficient for call [000167], which needs 32
outgoingArgSpaceSize 32 sufficient for call [000169], which needs 32
outgoingArgSpaceSize 32 sufficient for call [000170], which needs 32
outgoingArgSpaceSize 32 sufficient for call [000172], which needs 32
outgoingArgSpaceSize 32 sufficient for call [000174], which needs 32
outgoingArgSpaceSize 32 sufficient for call [000176], which needs 32
outgoingArgSpaceSize 32 sufficient for call [000178], which needs 32
outgoingArgSpaceSize 32 sufficient for call [000233], which needs 32
outgoingArgSpaceSize 32 sufficient for call [000221], which needs 32
outgoingArgSpaceSize 32 sufficient for call [000222], which needs 32
outgoingArgSpaceSize 32 sufficient for call [000220], which needs 32
outgoingArgSpaceSize 32 sufficient for call [000129], which needs 32
outgoingArgSpaceSize 32 sufficient for call [000229], which needs 32

*************** Finishing PHASE Do 'simple' lowering
*************** In fgDebugCheckBBlist
Trees before Lowering nodeinfo

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..072)                                     i hascall gcsafe newobj LIR 
BB02 [0001]  2       BB01,BB06             8     0 [072..07B)                                     i Loop gcsafe bwd bwd-target LIR 
BB03 [0002]  1  0    BB02                  8     0 [07B..0CA)                 T0      try { }     keep i try hascall gcsafe newobj bwd LIR 
BB04 [0038]  1       BB03                  8     0 [0CA..0CD)-> BB06 ( cond )                     keep i gcsafe bwd LIR cfb 
BB05 [0039]  1       BB04                  4     0 [0CD..0D4)                                     i hascall gcsafe bwd LIR 
BB06 [0006]  2       BB04,BB05             8     0 [0D4..0DD)-> BB02 ( cond )                     i gcsafe bwd LIR 
BB07 [0008]  1       BB06                  1       [0DD..0F9)                                     i hascall gcsafe LIR 
BB08 [0009]  2       BB07,BB12             8     1 [0F9..102)                                     i Loop gcsafe bwd bwd-target LIR 
BB09 [0010]  1  1    BB08                  8     1 [102..122)-> BB13 ( cond ) T1      try { }     keep i try hascall gcsafe bwd LIR 
BB10 [0041]  1       BB09                  8     1 [126..129)-> BB12 ( cond )                     keep i gcsafe bwd LIR cfb 
BB11 [0042]  1       BB10                  4     1 [129..130)                                     i hascall gcsafe bwd LIR 
BB12 [0016]  2       BB10,BB11             8     1 [130..139)-> BB08 (always)                     i hascall gcsafe bwd LIR 
BB13 [0030]  1       BB09                  1       [???..???)-> BB30 (callf )                     i internal gcsafe LIR 
BB14 [0031]  1       BB32                  1       [???..???)-> BB15 (ALWAYS)                     i internal gcsafe LIR KEEP 
BB15 [0017]  1       BB14                  1       [139..17D)                                     i hascall gcsafe LIR 
BB19 [0018]  5       BB15,BB20,BB22,BB24,BB25   8     5 [17D..18F)-> BB21 ( cond )                     i Loop hascall gcsafe bwd bwd-target LIR 
BB20 [0019]  1       BB19                  8     5 [18F..19B)-> BB19 (always)                     i hascall gcsafe bwd LIR 
BB21 [0020]  1       BB19                  1     4 [19B..1A6)-> BB23 ( cond )                     i gcsafe bwd LIR 
BB22 [0021]  1       BB21                  1     4 [1A6..1AD)-> BB19 (always)                     i hascall gcsafe bwd LIR 
BB23 [0022]  1       BB21                  1     3 [1AD..1B8)-> BB25 ( cond )                     i gcsafe bwd LIR 
BB24 [0023]  1       BB23                  1     3 [1B8..1C1)-> BB19 (always)                     i gcsafe bwd LIR 
BB25 [0024]  1       BB23                  1     2 [1C1..1CC)-> BB19 ( cond )                     i gcsafe bwd LIR 
BB26 [0025]  1       BB25                  1       [1CC..1D4)        (return)                     i gcsafe LIR 
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ funclets follow
BB27 [0003]  1     0                       0       [0CA..0CD)-> BB29 ( cond )    H0 F fault {     keep i rare flet bwd LIR 
BB28 [0004]  1     0 BB27                  0       [0CD..0D3)                    H0               i rare hascall bwd LIR 
BB29 [0005]  2     0 BB27,BB28             0       [0D3..0D4)        (finret)    H0   }           i rare bwd LIR 
BB30 [0013]  2     1 BB13                  1       [126..129)-> BB32 ( cond )    H1 F finally {   keep i gcsafe flet bwd LIR 
BB31 [0014]  1     1 BB30                  1       [129..12F)                    H1               i hascall gcsafe bwd LIR 
BB32 [0015]  2     1 BB30,BB31             1       [12F..130)        (finret)    H1   }           i gcsafe bwd LIR 
-----------------------------------------------------------------------------------------------------------------------------------------

------------ BB01 [000..072), preds={} succs={BB02}
               [000425] ------------                 IL_OFFSET void   IL offset: 0x0
N001 ( 14,  5) [000000] --CXG-------         t0 =    CALL      struct System.DateTime.get_Now $c0
                                                  /--*  t0     struct 
N003 ( 18,  8) [000003] DA-XG-------              *  STORE_LCL_VAR struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  *    long   V02._dateData (offs=0x00) -> V17 tmp10        
               [000426] ------------                 IL_OFFSET void   IL offset: 0x6
N003 (  3,  2) [000004] -------N----         t4 =    LCL_VAR_ADDR byref  V02 loc0         
                                                  *    long   V02._dateData (offs=0x00) -> V17 tmp10        
                                                  /--*  t4     byref  this in rcx
N005 ( 17, 10) [000006] --CXG-------         t6 = *  CALL      ref    System.DateTime.ToString $84
                                                  /--*  t6     ref    
N007 ( 17, 10) [000272] DA-XG-----L-              *  STORE_LCL_VAR ref    V21 tmp14        d:2
N009 (  1,  1) [000273] ------------       t273 =    LCL_VAR   ref    V21 tmp14        u:2 (last use) $84
N010 (  2, 10) [000269] H-----------       t269 =    CNS_INT(h) long   0x750031F0 "	 Created list" $1c0
                                                  /--*  t269   long   
N011 (  4, 12) [000270] #---G-------       t270 = *  IND       ref    $88
                                                  /--*  t273   ref    arg0 in rcx
                                                  +--*  t270   ref    arg1 in rdx
N012 ( 39, 30) [000008] --CXG-------         t8 = *  CALL      ref    System.String.Concat $89
                                                  /--*  t8     ref    arg0 in rcx
N013 ( 53, 36) [000009] --CXG-------              *  CALL      void   System.Console.WriteLine $VN.Void
               [000427] ------------                 IL_OFFSET void   IL offset: 0x1c
N002 (  2, 10) [000011] H-----------        t11 =    CNS_INT(h) long   0x7ffdb3ee2350 method $1c1
                                                  /--*  t11    long   arg0 in rcx
N003 ( 16, 16) [000012] --C---------        t12 = *  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST $240
                                                  /--*  t12    ref    
N005 ( 16, 16) [000014] DA----------              *  STORE_LCL_VAR ref    V08 tmp1         d:2
N002 (  1,  1) [000015] ------------        t15 =    LCL_VAR   ref    V08 tmp1         u:2 $240
                                                  /--*  t15    ref    this in rcx
N003 ( 15,  8) [000016] --CXG-------              *  CALL      void   FalseLeakRepro.List..ctor $VN.Void
               [000428] ------------                 IL_OFFSET void   IL offset: 0x22
N001 (  1,  1) [000010] ------------        t10 =    LCL_VAR   ref    V00 this         u:1 $80
N002 (  1,  1) [000278] ------------       t278 =    CNS_INT   long   8 field offset Fseq[_myList] $280
                                                  /--*  t10    ref    
                                                  +--*  t278   long   
N003 (  2,  2) [000279] -------N----       t279 = *  ADD       byref  $181
N005 (  1,  1) [000017] ------------        t17 =    LCL_VAR   ref    V08 tmp1         u:2 (last use) $240
                                                  /--*  t279   byref  
                                                  +--*  t17    ref    
               [000429] -A-XG-------              *  STOREIND  ref   
               [000430] ------------                 IL_OFFSET void   IL offset: 0x27
N002 (  2, 10) [000023] H-----------        t23 =    CNS_INT(h) long   0x7ffdb3b058b8 token $1c3
                                                  /--*  t23    long   arg0 in rcx
N003 ( 16, 16) [000024] --C---------        t24 = *  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST $243
                                                  /--*  t24    ref    
N005 ( 16, 16) [000026] DA----------              *  STORE_LCL_VAR ref    V09 tmp2         d:2
N001 (  1,  1) [000020] ------------        t20 =    LCL_VAR   ref    V00 this         u:1 $80
N002 (  1,  1) [000283] ------------       t283 =    CNS_INT   long   8 field offset Fseq[_myList] $280
                                                  /--*  t20    ref    
                                                  +--*  t283   long   
N003 (  2,  2) [000284] -------N----       t284 = *  ADD       byref  $181
                                                  /--*  t284   byref  
N004 (  4,  4) [000021] n---GO------        t21 = *  IND       ref    <l:$246, c:$245>
N005 (  1,  1) [000281] ------------       t281 =    CNS_INT   long   8 field offset Fseq[Head] $280
                                                  /--*  t21    ref    
                                                  +--*  t281   long   
N006 (  5,  5) [000282] ----GO-N----       t282 = *  ADD       byref  <l:$185, c:$184>
                                                  /--*  t282   byref  
N007 (  7,  7) [000022] ---XGO------        t22 = *  IND       ref    <l:$250, c:$24f>
                                                  /--*  t22    ref    
N009 (  7,  7) [000030] DA-XGO------              *  STORE_LCL_VAR ref    V10 tmp3         d:2
N002 (  1,  1) [000027] ------------        t27 =    LCL_VAR   ref    V09 tmp2         u:2 $243
                                                  /--*  t27    ref    this in rcx
N003 ( 15,  8) [000028] --CXG-------              *  CALL      void   System.Object..ctor $VN.Void
               [000431] ------------                 IL_OFFSET void   IL offset: 0x37
N001 (  1,  1) [000031] ------------        t31 =    LCL_VAR   ref    V10 tmp3         u:2 (last use) <l:$248, c:$94>
N002 (  1,  1) [000286] ------------       t286 =    CNS_INT   long   16 field offset Fseq[Data] $281
                                                  /--*  t31    ref    
                                                  +--*  t286   long   
N003 (  2,  2) [000287] -------N----       t287 = *  ADD       byref  <l:$187, c:$186>
N005 (  1,  1) [000032] ------------        t32 =    LCL_VAR   ref    V09 tmp2         u:2 (last use) $243
                                                  /--*  t287   byref  
                                                  +--*  t32    ref    
               [000432] -A-XG-------              *  STOREIND  ref   
               [000433] ------------                 IL_OFFSET void   IL offset: 0x3c
N002 (  2, 10) [000037] H-----------        t37 =    CNS_INT(h) long   0x7ffdb3ee6200 token $1c6
                                                  /--*  t37    long   arg0 in rcx
N003 ( 16, 16) [000038] --C---------        t38 = *  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST $253
                                                  /--*  t38    ref    
N005 ( 16, 16) [000040] DA----------              *  STORE_LCL_VAR ref    V11 tmp4         d:2
N004 (  1,  1) [000041] ------------        t41 =    LCL_VAR   ref    V11 tmp4         u:2 $253
N005 (  1,  1) [000035] ------------        t35 =    LCL_VAR   ref    V00 this         u:1 $80
N006 (  2, 10) [000036] H-----------        t36 =    CNS_INT(h) long   0x7ffdb3b213f8 ftn $1c7
                                                  /--*  t41    ref    this in rcx
                                                  +--*  t35    ref    arg1 in rdx
                                                  +--*  t36    long   arg2 in r8
N007 ( 18, 21) [000042] --CXG-------              *  CALL      void   System.MulticastDelegate.CtorClosed $VN.Void
               [000434] ------------                 IL_OFFSET void   IL offset: 0x48
N002 (  2, 10) [000044] H-----------        t44 =    CNS_INT(h) long   0x7ffdb3c84e80 token $1c8
                                                  /--*  t44    long   arg0 in rcx
N003 ( 16, 16) [000045] --C---------        t45 = *  CALL help ref    HELPER.CORINFO_HELP_NEWFAST $254
                                                  /--*  t45    ref    
N005 ( 16, 16) [000047] DA----------              *  STORE_LCL_VAR ref    V12 tmp5         d:2
N003 (  1,  1) [000048] ------------        t48 =    LCL_VAR   ref    V12 tmp5         u:2 $254
N004 (  1,  1) [000043] ------------        t43 =    LCL_VAR   ref    V11 tmp4         u:2 (last use) $253
                                                  /--*  t48    ref    this in rcx
                                                  +--*  t43    ref    arg1 in rdx
N005 ( 16, 10) [000049] --CXG-------              *  CALL      void   System.Threading.Thread..ctor $VN.Void
               [000435] ------------                 IL_OFFSET void   IL offset: 0x4d
N002 (  1,  1) [000050] ------------        t50 =    LCL_VAR   ref    V12 tmp5         u:2 (last use) $254
                                                  /--*  t50    ref    this in rcx
N003 ( 15,  8) [000051] --CXG-------              *  CALL      void   System.Threading.Thread.Start $VN.Void
               [000436] ------------                 IL_OFFSET void   IL offset: 0x52
N001 ( 14,  5) [000052] --CXG-------        t52 =    CALL      struct System.DateTime.get_Now $c2
                                                  /--*  t52    struct 
N003 ( 18,  8) [000055] DA-XG-------              *  STORE_LCL_VAR struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  *    long   V02._dateData (offs=0x00) -> V17 tmp10        
               [000437] ------------                 IL_OFFSET void   IL offset: 0x58
N003 (  3,  2) [000056] -------N----        t56 =    LCL_VAR_ADDR byref  V02 loc0         
                                                  *    long   V02._dateData (offs=0x00) -> V17 tmp10        
                                                  /--*  t56    byref  this in rcx
N005 ( 17, 10) [000058] --CXG-------        t58 = *  CALL      ref    System.DateTime.ToString $a8
                                                  /--*  t58    ref    
N007 ( 17, 10) [000300] DA-XG-----L-              *  STORE_LCL_VAR ref    V22 tmp15        d:2
N009 (  1,  1) [000301] ------------       t301 =    LCL_VAR   ref    V22 tmp15        u:2 (last use) $a8
N010 (  2, 10) [000297] H-----------       t297 =    CNS_INT(h) long   0x750031F8 "	 Consumer thread started, adding items..." $1c9
                                                  /--*  t297   long   
N011 (  4, 12) [000298] #---G-------       t298 = *  IND       ref    $ac
                                                  /--*  t301   ref    arg0 in rcx
                                                  +--*  t298   ref    arg1 in rdx
N012 ( 39, 30) [000060] --CXG-------        t60 = *  CALL      ref    System.String.Concat $ad
                                                  /--*  t60    ref    arg0 in rcx
N013 ( 53, 36) [000061] --CXG-------              *  CALL      void   System.Console.WriteLine $VN.Void
               [000438] ------------                 IL_OFFSET void   IL offset: 0x6e
N001 (  1,  1) [000062] ------------        t62 =    CNS_INT   int    0 $40
                                                  /--*  t62    int    
N003 (  1,  3) [000064] DA----------              *  STORE_LCL_VAR int    V03 loc1         d:2

------------ BB02 [072..07B), preds={BB01,BB06} succs={BB03}
               [000439] ------------                 IL_OFFSET void   IL offset: 0x72
N001 (  1,  1) [000069] ------------        t69 =    LCL_VAR   ref    V00 this         u:1 $80
N002 (  1,  1) [000304] ------------       t304 =    CNS_INT   long   8 field offset Fseq[_myList] $280
                                                  /--*  t69    ref    
                                                  +--*  t304   long   
N003 (  2,  2) [000305] -------N----       t305 = *  ADD       byref  $181
                                                  /--*  t305   byref  
N004 (  4,  4) [000070] n---GO------        t70 = *  IND       ref    <l:$258, c:$257>
                                                  /--*  t70    ref    
N006 (  8,  7) [000072] DA--GO------              *  STORE_LCL_VAR ref    V04 loc2         d:3
               [000440] ------------                 IL_OFFSET void   IL offset: 0x79
N001 (  1,  1) [000073] ------------        t73 =    CNS_INT   int    0 $40
                                                  /--*  t73    int    
N003 (  5,  4) [000075] DA--G-------              *  STORE_LCL_VAR int   (AX) V05 loc3         

------------ BB03 [07B..0CA), preds={BB02} succs={BB04}
               [000441] ------------                 IL_OFFSET void   IL offset: 0x7b
N003 (  3,  3) [000078] ------------        t78 =    LCL_VAR_ADDR long   V05 loc3          $206
N004 (  1,  1) [000076] ------------        t76 =    LCL_VAR   ref    V04 loc2         u:3 <l:$256, c:$b2>
                                                  /--*  t78    long   arg1 in rdx
                                                  +--*  t76    ref    arg0 in rcx
N005 ( 18, 11) [000079] --CXG-------              *  CALL      void   System.Threading.Monitor.Enter $VN.Void
               [000442] ------------                 IL_OFFSET void   IL offset: 0x83
N002 (  2, 10) [000083] H-----------        t83 =    CNS_INT(h) long   0x7ffdb3ee58a8 method $1ca
                                                  /--*  t83    long   arg0 in rcx
N003 ( 16, 16) [000084] --C---------        t84 = *  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST $259
                                                  /--*  t84    ref    
N005 ( 16, 16) [000086] DA----------              *  STORE_LCL_VAR ref    V13 tmp6         d:2
N001 (  1,  1) [000080] ------------        t80 =    LCL_VAR   ref    V00 this         u:1 $80
N002 (  1,  1) [000311] ------------       t311 =    CNS_INT   long   8 field offset Fseq[_myList] $280
                                                  /--*  t80    ref    
                                                  +--*  t311   long   
N003 (  2,  2) [000312] -------N----       t312 = *  ADD       byref  $181
                                                  /--*  t312   byref  
N004 (  4,  4) [000081] n---GO------        t81 = *  IND       ref    <l:$25d, c:$25c>
N005 (  1,  1) [000309] ------------       t309 =    CNS_INT   long   8 field offset Fseq[Head] $280
                                                  /--*  t81    ref    
                                                  +--*  t309   long   
N006 (  5,  5) [000310] ----GO-N----       t310 = *  ADD       byref  <l:$18b, c:$18a>
                                                  /--*  t310   byref  
N007 (  7,  7) [000082] ---XGO------        t82 = *  IND       ref    <l:$267, c:$266>
                                                  /--*  t82    ref    
N009 (  7,  7) [000090] DA-XGO------              *  STORE_LCL_VAR ref    V14 tmp7         d:2
N002 (  1,  1) [000087] ------------        t87 =    LCL_VAR   ref    V13 tmp6         u:2 $259
                                                  /--*  t87    ref    this in rcx
N003 ( 15,  8) [000230] --CXG-------              *  CALL      void   System.Object..ctor $VN.Void
               [000443] ------------                 IL_OFFSET void   IL offset: 0x93
N001 (  1,  1) [000091] ------------        t91 =    LCL_VAR   ref    V14 tmp7         u:2 (last use) <l:$25f, c:$b9>
N002 (  1,  1) [000314] ------------       t314 =    CNS_INT   long   8 field offset Fseq[Next] $280
                                                  /--*  t91    ref    
                                                  +--*  t314   long   
N003 (  2,  2) [000315] -------N----       t315 = *  ADD       byref  <l:$18d, c:$18c>
N005 (  1,  1) [000092] ------------        t92 =    LCL_VAR   ref    V13 tmp6         u:2 (last use) $259
                                                  /--*  t315   byref  
                                                  +--*  t92    ref    
               [000444] -A-XG-------              *  STOREIND  ref   
               [000445] ------------                 IL_OFFSET void   IL offset: 0x98
N001 (  1,  1) [000095] ------------        t95 =    LCL_VAR   ref    V00 this         u:1 $80
N002 (  1,  1) [000318] ------------       t318 =    CNS_INT   long   8 field offset Fseq[_myList] $280
                                                  /--*  t95    ref    
                                                  +--*  t318   long   
N003 (  2,  2) [000319] -------N----       t319 = *  ADD       byref  $181
                                                  /--*  t319   byref  
N004 (  4,  4) [000096] n---GO------        t96 = *  IND       ref    <l:$26d, c:$26c>
                                                  /--*  t96    ref    
N006 (  4,  4) [000414] DA--GO------              *  STORE_LCL_VAR ref    V28 cse1         d:1
N007 (  1,  1) [000415] ------------       t415 =    LCL_VAR   ref    V28 cse1         u:1 <l:$26d, c:$26c>
N009 (  1,  1) [000316] ------------       t316 =    CNS_INT   long   8 field offset Fseq[Head] $280
                                                  /--*  t415   ref    
                                                  +--*  t316   long   
N010 (  6,  6) [000317] ----GO-N----       t317 = *  ADD       byref  <l:$191, c:$190>
N012 (  1,  1) [000417] ------------       t417 =    LCL_VAR   ref    V28 cse1         u:1 <l:$26b, c:$bf>
N013 (  1,  1) [000322] ------------       t322 =    CNS_INT   long   8 field offset Fseq[Head] $280
                                                  /--*  t417   ref    
                                                  +--*  t322   long   
N014 (  2,  2) [000323] ----G--N----       t323 = *  ADD       byref  <l:$191, c:$193>
                                                  /--*  t323   byref  
N015 (  4,  4) [000099] ---XG-------        t99 = *  IND       ref    <l:$278, c:$277>
N016 (  1,  1) [000320] ------------       t320 =    CNS_INT   long   8 field offset Fseq[Next] $280
                                                  /--*  t99    ref    
                                                  +--*  t320   long   
N017 (  5,  5) [000321] ---XG--N----       t321 = *  ADD       byref  <l:$197, c:$196>
                                                  /--*  t321   byref  
N018 (  7,  7) [000100] ---XG-------       t100 = *  IND       ref    <l:$403, c:$402>
                                                  /--*  t100   ref    
N020 (  7,  7) [000409] DA-XG-------              *  STORE_LCL_VAR ref    V27 cse0         d:1
N021 (  1,  1) [000410] ------------       t410 =    LCL_VAR   ref    V27 cse0         u:1 <l:$403, c:$402>
                                                  /--*  t317   byref  
                                                  +--*  t410   ref    
               [000446] -A-XGO------              *  STOREIND  ref   
               [000447] ------------                 IL_OFFSET void   IL offset: 0xb3
N002 (  2, 10) [000106] H-----------       t106 =    CNS_INT(h) long   0x7ffdb3b058b8 token $1c3
                                                  /--*  t106   long   arg0 in rcx
N003 ( 16, 16) [000107] --C---------       t107 = *  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST $404
                                                  /--*  t107   ref    
N005 ( 16, 16) [000109] DA----------              *  STORE_LCL_VAR ref    V15 tmp8         d:2
N001 (  1,  1) [000412] ------------       t412 =    LCL_VAR   ref    V27 cse0         u:1 <l:$279, c:$3c4>
                                                  /--*  t412   ref    
N003 (  1,  3) [000113] DA--G-------              *  STORE_LCL_VAR ref    V16 tmp9         d:2
N002 (  1,  1) [000110] ------------       t110 =    LCL_VAR   ref    V15 tmp8         u:2 $404
                                                  /--*  t110   ref    this in rcx
N003 ( 15,  8) [000111] --CXG-------              *  CALL      void   System.Object..ctor $VN.Void
               [000448] ------------                 IL_OFFSET void   IL offset: 0xc3
N001 (  1,  1) [000114] ------------       t114 =    LCL_VAR   ref    V16 tmp9         u:2 (last use) <l:$279, c:$3ca>
N002 (  1,  1) [000332] ------------       t332 =    CNS_INT   long   16 field offset Fseq[Data] $281
                                                  /--*  t114   ref    
                                                  +--*  t332   long   
N003 (  2,  2) [000333] -------N----       t333 = *  ADD       byref  <l:$19b, c:$19a>
N005 (  1,  1) [000115] ------------       t115 =    LCL_VAR   ref    V15 tmp8         u:2 (last use) $404
                                                  /--*  t333   byref  
                                                  +--*  t115   ref    
               [000449] -A-XG-------              *  STOREIND  ref   

------------ BB04 [0CA..0CD) -> BB06 (cond), preds={BB03} succs={BB05,BB06}
N001 (  3,  2) [000256] ------------       t256 =    LCL_VAR   int   (AX) V05 loc3          $382
                                                  /--*  t256   int    
N002 (  4,  4) [000334] ----G-------       t334 = *  CAST      int <- bool <- int $343
N003 (  1,  1) [000257] ------------       t257 =    CNS_INT   int    0 $40
                                                  /--*  t334   int    
                                                  +--*  t257   int    
N004 (  6,  6) [000255] J---G--N----       t255 = *  EQ        int    $344
                                                  /--*  t255   int    
N005 (  8,  8) [000254] ----G-------              *  JTRUE     void  

------------ BB05 [0CD..0D4), preds={BB04} succs={BB06}
N002 (  1,  1) [000259] ------------       t259 =    LCL_VAR   ref    V04 loc2         u:3 (last use) <l:$256, c:$b2>
                                                  /--*  t259   ref    arg0 in rcx
N003 ( 15,  7) [000258] --CXG-------              *  CALL      void   System.Threading.Monitor.Exit $VN.Void

------------ BB06 [0D4..0DD) -> BB02 (cond), preds={BB04,BB05} succs={BB07,BB02}
               [000450] ------------                 IL_OFFSET void   IL offset: 0xd4
N001 (  1,  1) [000118] ------------       t118 =    LCL_VAR   int    V03 loc1         u:3 (last use) $380
N002 (  1,  1) [000119] ------------       t119 =    CNS_INT   int    1 $4e
                                                  /--*  t118   int    
                                                  +--*  t119   int    
N003 (  3,  3) [000120] ------------       t120 = *  ADD       int    $345
                                                  /--*  t120   int    
N005 (  3,  3) [000122] DA----------              *  STORE_LCL_VAR int    V03 loc1         d:4
               [000451] ------------                 IL_OFFSET void   IL offset: 0xd8
N001 (  1,  1) [000065] ------------        t65 =    LCL_VAR   int    V03 loc1         u:4 $345
N002 (  1,  1) [000066] ------------        t66 =    CNS_INT   int    10 $43
                                                  /--*  t65    int    
                                                  +--*  t66    int    
N003 (  3,  3) [000067] J------N----        t67 = *  LT        int    $346
                                                  /--*  t67    int    
N004 (  5,  5) [000068] ------------              *  JTRUE     void  

------------ BB07 [0DD..0F9), preds={BB06} succs={BB08}
               [000452] ------------                 IL_OFFSET void   IL offset: 0xdd
N001 ( 14,  5) [000130] --CXG-------       t130 =    CALL      struct System.DateTime.get_Now $c4
                                                  /--*  t130   struct 
N003 ( 18,  8) [000133] DA-XG-------              *  STORE_LCL_VAR struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  *    long   V02._dateData (offs=0x00) -> V17 tmp10        
               [000453] ------------                 IL_OFFSET void   IL offset: 0xe3
N003 (  3,  2) [000134] -------N----       t134 =    LCL_VAR_ADDR byref  V02 loc0         
                                                  *    long   V02._dateData (offs=0x00) -> V17 tmp10        
                                                  /--*  t134   byref  this in rcx
N005 ( 17, 10) [000136] --CXG-------       t136 = *  CALL      ref    System.DateTime.ToString $3d5
                                                  /--*  t136   ref    
N007 ( 17, 10) [000342] DA-XG-----L-              *  STORE_LCL_VAR ref    V23 tmp16        d:2
N009 (  1,  1) [000343] ------------       t343 =    LCL_VAR   ref    V23 tmp16        u:2 (last use) $3d5
N010 (  2, 10) [000339] H-----------       t339 =    CNS_INT(h) long   0x75003200 "	 Waiting for list processing to complete..." $1cf
                                                  /--*  t339   long   
N011 (  4, 12) [000340] #---G-------       t340 = *  IND       ref    $3d9
                                                  /--*  t343   ref    arg0 in rcx
                                                  +--*  t340   ref    arg1 in rdx
N012 ( 39, 30) [000138] --CXG-------       t138 = *  CALL      ref    System.String.Concat $3da
                                                  /--*  t138   ref    arg0 in rcx
N013 ( 53, 36) [000139] --CXG-------              *  CALL      void   System.Console.WriteLine $VN.Void

------------ BB08 [0F9..102), preds={BB07,BB12} succs={BB09}
               [000454] ------------                 IL_OFFSET void   IL offset: 0xf9
N001 (  1,  1) [000140] ------------       t140 =    LCL_VAR   ref    V00 this         u:1 $80
N002 (  1,  1) [000346] ------------       t346 =    CNS_INT   long   8 field offset Fseq[_myList] $280
                                                  /--*  t140   ref    
                                                  +--*  t346   long   
N003 (  2,  2) [000347] -------N----       t347 = *  ADD       byref  $181
                                                  /--*  t347   byref  
N004 (  4,  4) [000141] n---GO------       t141 = *  IND       ref    <l:$41c, c:$41b>
                                                  /--*  t141   ref    
N006 (  8,  7) [000143] DA--GO------              *  STORE_LCL_VAR ref    V04 loc2         d:2
               [000455] ------------                 IL_OFFSET void   IL offset: 0x100
N001 (  1,  1) [000144] ------------       t144 =    CNS_INT   int    0 $40
                                                  /--*  t144   int    
N003 (  5,  4) [000146] DA--G-------              *  STORE_LCL_VAR int   (AX) V05 loc3         

------------ BB09 [102..122) -> BB13 (cond), preds={BB08} succs={BB10,BB13}
               [000456] ------------                 IL_OFFSET void   IL offset: 0x102
N003 (  3,  3) [000149] ------------       t149 =    LCL_VAR_ADDR long   V05 loc3          $20a
N004 (  1,  1) [000147] ------------       t147 =    LCL_VAR   ref    V04 loc2         u:2 <l:$41a, c:$3df>
                                                  /--*  t149   long   arg1 in rdx
                                                  +--*  t147   ref    arg0 in rcx
N005 ( 18, 11) [000150] --CXG-------              *  CALL      void   System.Threading.Monitor.Enter $VN.Void
               [000457] ------------                 IL_OFFSET void   IL offset: 0x10a
N001 (  1,  1) [000151] ------------       t151 =    LCL_VAR   ref    V00 this         u:1 $80
N002 (  1,  1) [000352] ------------       t352 =    CNS_INT   long   8 field offset Fseq[_myList] $280
                                                  /--*  t151   ref    
                                                  +--*  t352   long   
N003 (  2,  2) [000353] -------N----       t353 = *  ADD       byref  $181
                                                  /--*  t353   byref  
N004 (  4,  4) [000152] n---GO------       t152 = *  IND       ref    <l:$420, c:$41f>
                                                  /--*  t152   ref    
N006 (  4,  4) [000419] DA--GO------              *  STORE_LCL_VAR ref    V29 cse2         d:1
N007 (  1,  1) [000420] ------------       t420 =    LCL_VAR   ref    V29 cse2         u:1 <l:$420, c:$41f>
N009 (  1,  1) [000350] ------------       t350 =    CNS_INT   long   8 field offset Fseq[Head] $280
                                                  /--*  t420   ref    
                                                  +--*  t350   long   
N010 (  6,  6) [000351] ----GO-N----       t351 = *  ADD       byref  <l:$1a0, c:$19f>
                                                  /--*  t351   byref  
N011 (  8,  8) [000153] ---XGO------       t153 = *  IND       ref    <l:$42a, c:$429>
N012 (  1,  1) [000422] ------------       t422 =    LCL_VAR   ref    V29 cse2         u:1 <l:$41e, c:$3e3>
N013 (  1,  1) [000354] ------------       t354 =    CNS_INT   long   16 field offset Fseq[Tail] $281
                                                  /--*  t422   ref    
                                                  +--*  t354   long   
N014 (  2,  2) [000355] ----G--N----       t355 = *  ADD       byref  <l:$1a4, c:$1a3>
                                                  /--*  t355   byref  
N015 (  4,  4) [000156] ---XG-------       t156 = *  IND       ref    <l:$435, c:$434>
                                                  /--*  t153   ref    
                                                  +--*  t156   ref    
N016 ( 13, 13) [000157] N--XGO-N-U--       t157 = *  EQ        int    <l:$34a, c:$349>
                                                  /--*  t157   int    
N017 ( 15, 15) [000158] ---XGO------              *  JTRUE     void  

------------ BB10 [126..129) -> BB12 (cond), preds={BB09} succs={BB11,BB12}
N001 (  3,  2) [000263] ------------       t263 =    LCL_VAR   int   (AX) V05 loc3          $384
                                                  /--*  t263   int    
N002 (  4,  4) [000358] ----G-------       t358 = *  CAST      int <- bool <- int $34d
N003 (  1,  1) [000264] ------------       t264 =    CNS_INT   int    0 $40
                                                  /--*  t358   int    
                                                  +--*  t264   int    
N004 (  6,  6) [000262] J---G--N----       t262 = *  EQ        int    $34e
                                                  /--*  t262   int    
N005 (  8,  8) [000261] ----G-------              *  JTRUE     void  

------------ BB11 [129..130), preds={BB10} succs={BB12}
N002 (  1,  1) [000266] ------------       t266 =    LCL_VAR   ref    V04 loc2         u:2 (last use) <l:$41a, c:$3df>
                                                  /--*  t266   ref    arg0 in rcx
N003 ( 15,  7) [000265] --CXG-------              *  CALL      void   System.Threading.Monitor.Exit $VN.Void

------------ BB12 [130..139) -> BB08 (always), preds={BB10,BB11} succs={BB08}
               [000458] ------------                 IL_OFFSET void   IL offset: 0x130
N002 (  1,  1) [000159] ------------       t159 =    CNS_INT   int    100 $5b
                                                  /--*  t159   int    arg0 in rcx
N003 ( 15,  7) [000160] --CXG-------              *  CALL      void   System.Threading.Thread.Sleep $VN.Void

------------ BB13 [???..???) -> BB30 (callf), preds={BB09} succs={BB30}

------------ BB14 [???..???) -> BB15 (ALWAYS), preds={BB32} succs={BB15}

------------ BB15 [139..17D), preds={BB14} succs={BB19}
               [000459] ------------                 IL_OFFSET void   IL offset: 0x139
N001 ( 14,  5) [000161] --CXG-------       t161 =    CALL      struct System.DateTime.get_Now $c6
                                                  /--*  t161   struct 
N003 ( 18,  8) [000164] DA-XG-------              *  STORE_LCL_VAR struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  *    long   V02._dateData (offs=0x00) -> V17 tmp10        
               [000460] ------------                 IL_OFFSET void   IL offset: 0x13f
N003 (  3,  2) [000165] -------N----       t165 =    LCL_VAR_ADDR byref  V02 loc0         
                                                  *    long   V02._dateData (offs=0x00) -> V17 tmp10        
                                                  /--*  t165   byref  this in rcx
N005 ( 17, 10) [000167] --CXG-------       t167 = *  CALL      ref    System.DateTime.ToString $3ef
                                                  /--*  t167   ref    
N007 ( 17, 10) [000367] DA-XG-----L-              *  STORE_LCL_VAR ref    V24 tmp17        d:2
N009 (  1,  1) [000368] ------------       t368 =    LCL_VAR   ref    V24 tmp17        u:2 (last use) $3ef
N010 (  2, 10) [000364] H-----------       t364 =    CNS_INT(h) long   0x75003208 "	 Done.  Profiler is active, available options:" $1d3
                                                  /--*  t364   long   
N011 (  4, 12) [000365] #---G-------       t365 = *  IND       ref    $3f3
                                                  /--*  t368   ref    arg0 in rcx
                                                  +--*  t365   ref    arg1 in rdx
N012 ( 39, 30) [000169] --CXG-------       t169 = *  CALL      ref    System.String.Concat $3f4
                                                  /--*  t169   ref    arg0 in rcx
N013 ( 53, 36) [000170] --CXG-------              *  CALL      void   System.Console.WriteLine $VN.Void
               [000461] ------------                 IL_OFFSET void   IL offset: 0x155
N002 (  2, 10) [000371] H-----------       t371 =    CNS_INT(h) long   0x75003210 "   Q = quit" $1d4
                                                  /--*  t371   long   
N003 (  4, 12) [000372] #---G-------       t372 = *  IND       ref    $3f8
                                                  /--*  t372   ref    arg0 in rcx
N004 ( 18, 18) [000172] --CXG-------              *  CALL      void   System.Console.WriteLine $VN.Void
               [000462] ------------                 IL_OFFSET void   IL offset: 0x15f
N002 (  2, 10) [000374] H-----------       t374 =    CNS_INT(h) long   0x75003218 "   H = heap snapshot" $1d5
                                                  /--*  t374   long   
N003 (  4, 12) [000375] #---G-------       t375 = *  IND       ref    $3fb
                                                  /--*  t375   ref    arg0 in rcx
N004 ( 18, 18) [000174] --CXG-------              *  CALL      void   System.Console.WriteLine $VN.Void
               [000463] ------------                 IL_OFFSET void   IL offset: 0x169
N002 (  2, 10) [000377] H-----------       t377 =    CNS_INT(h) long   0x75003220 "   G = GC (max gen)" $1d6
                                                  /--*  t377   long   
N003 (  4, 12) [000378] #---G-------       t378 = *  IND       ref    $3fe
                                                  /--*  t378   ref    arg0 in rcx
N004 ( 18, 18) [000176] --CXG-------              *  CALL      void   System.Console.WriteLine $VN.Void
               [000464] ------------                 IL_OFFSET void   IL offset: 0x173
N002 (  2, 10) [000380] H-----------       t380 =    CNS_INT(h) long   0x75003228 "   R = clear the running flag to stop the consumer thread" $1d7
                                                  /--*  t380   long   
N003 (  4, 12) [000381] #---G-------       t381 = *  IND       ref    $4c1
                                                  /--*  t381   ref    arg0 in rcx
N004 ( 18, 18) [000178] --CXG-------              *  CALL      void   System.Console.WriteLine $VN.Void

------------ BB19 [17D..18F) -> BB21 (cond), preds={BB15,BB20,BB22,BB24,BB25} succs={BB20,BB21}
N003 (  3,  2) [000236] -------N----       t236 =    LCL_VAR_ADDR byref  V06 loc4         
                                                  *    ushort V06._keyChar (offs=0x00) -> V18 tmp11        
                                                  *    int    V06._key (offs=0x04) -> V19 tmp12        
                                                  *    int    V06._mods (offs=0x08) -> V20 tmp13        
N005 (  1,  1) [000232] ------------       t232 =    CNS_INT   int    0 $40
                                                  /--*  t236   byref  arg0 in rcx
                                                  +--*  t232   int    arg1 in rdx
N006 ( 18, 11) [000233] S-CXG-------              *  CALL      void   System.ConsolePal.ReadKey $VN.Void
N001 (  3,  2) [000240] ------------       t240 =    LCL_VAR   int   (AX) V19 tmp12         $385
N002 (  1,  1) [000187] ------------       t187 =    CNS_INT   int    71 $5e
                                                  /--*  t240   int    
                                                  +--*  t187   int    
N003 (  5,  4) [000188] N---G--N-U--       t188 = *  NE        int    $34f
                                                  /--*  t188   int    
N004 (  7,  6) [000189] ----G-------              *  JTRUE     void  

------------ BB20 [18F..19B) -> BB19 (always), preds={BB19} succs={BB19}
               [000465] ------------                 IL_OFFSET void   IL offset: 0x18f
N002 ( 14,  5) [000221] --CXG-------       t221 =    CALL      int    System.GC.get_MaxGeneration $305
                                                  /--*  t221   int    arg0 in rcx
N003 ( 28, 11) [000222] --CXG-------              *  CALL      void   System.GC.Collect $VN.Void

------------ BB21 [19B..1A6) -> BB23 (cond), preds={BB19} succs={BB22,BB23}
N001 (  3,  2) [000244] ------------       t244 =    LCL_VAR   int   (AX) V19 tmp12         $385
N002 (  1,  1) [000194] ------------       t194 =    CNS_INT   int    72 $5f
                                                  /--*  t244   int    
                                                  +--*  t194   int    
N003 (  5,  4) [000195] N---G--N-U--       t195 = *  NE        int    $350
                                                  /--*  t195   int    
N004 (  7,  6) [000196] ----G-------              *  JTRUE     void  

------------ BB22 [1A6..1AD) -> BB19 (always), preds={BB21} succs={BB19}
               [000466] ------------                 IL_OFFSET void   IL offset: 0x1a6
N001 ( 14,  5) [000220] --CXG-------                 CALL      void   System.Diagnostics.Debugger.Break $VN.Void

------------ BB23 [1AD..1B8) -> BB25 (cond), preds={BB21} succs={BB24,BB25}
N001 (  3,  2) [000248] ------------       t248 =    LCL_VAR   int   (AX) V19 tmp12         $385
N002 (  1,  1) [000201] ------------       t201 =    CNS_INT   int    82 $60
                                                  /--*  t248   int    
                                                  +--*  t201   int    
N003 (  5,  4) [000202] N---G--N-U--       t202 = *  NE        int    $351
                                                  /--*  t202   int    
N004 (  7,  6) [000203] ----G-------              *  JTRUE     void  

------------ BB24 [1B8..1C1) -> BB19 (always), preds={BB23} succs={BB19}
               [000467] ------------                 IL_OFFSET void   IL offset: 0x1b8
N001 (  1,  1) [000216] ------------       t216 =    LCL_VAR   ref    V00 this         u:1 $80
N002 (  1,  1) [000386] ------------       t386 =    CNS_INT   long   16 field offset Fseq[_running] $281
                                                  /--*  t216   ref    
                                                  +--*  t386   long   
N003 (  2,  2) [000387] -------N----       t387 = *  ADD       byref  $1a7
N005 (  1,  1) [000217] ------------       t217 =    CNS_INT   int    0 $40
                                                  /--*  t387   byref  
                                                  +--*  t217   int    
               [000468] -A--GO------              *  STOREIND  bool  

------------ BB25 [1C1..1CC) -> BB19 (cond), preds={BB23} succs={BB26,BB19}
N001 (  3,  2) [000252] ------------       t252 =    LCL_VAR   int   (AX) V19 tmp12         $385
N002 (  1,  1) [000208] ------------       t208 =    CNS_INT   int    81 $61
                                                  /--*  t252   int    
                                                  +--*  t208   int    
N003 (  5,  4) [000209] N---G--N-U--       t209 = *  NE        int    $352
                                                  /--*  t209   int    
N004 (  7,  6) [000210] ----G-------              *  JTRUE     void  

------------ BB26 [1CC..1D4) (return), preds={BB25} succs={}
               [000469] ------------                 IL_OFFSET void   IL offset: 0x1cc
N001 (  1,  1) [000211] ------------       t211 =    LCL_VAR   ref    V00 this         u:1 (last use) $80
N002 (  1,  1) [000388] ------------       t388 =    CNS_INT   long   16 field offset Fseq[_running] $281
                                                  /--*  t211   ref    
                                                  +--*  t388   long   
N003 (  2,  2) [000389] -------N----       t389 = *  ADD       byref  $1a7
N005 (  1,  1) [000212] ------------       t212 =    CNS_INT   int    0 $40
                                                  /--*  t389   byref  
                                                  +--*  t212   int    
               [000470] -A--GO------              *  STOREIND  bool  
               [000471] ------------                 IL_OFFSET void   IL offset: 0x1d3
N001 (  0,  0) [000215] ------------                 RETURN    void   $442

------------ BB27 [0CA..0CD) -> BB29 (cond), preds={} succs={BB28,BB29}
               [000472] ------------                 IL_OFFSET void   IL offset: 0xca
N001 (  3,  2) [000123] ------------       t123 =    LCL_VAR   int   (AX) V05 loc3          $381
                                                  /--*  t123   int    
N002 (  4,  4) [000336] ----G-------       t336 = *  CAST      int <- bool <- int $341
N003 (  1,  1) [000124] ------------       t124 =    CNS_INT   int    0 $40
                                                  /--*  t336   int    
                                                  +--*  t124   int    
N004 (  6,  6) [000125] J---G--N----       t125 = *  EQ        int    $342
                                                  /--*  t125   int    
N005 (  8,  8) [000126] ----G-------              *  JTRUE     void  

------------ BB28 [0CD..0D3), preds={BB27} succs={BB29}
               [000473] ------------                 IL_OFFSET void   IL offset: 0xcd
N002 (  1,  1) [000128] ------------       t128 =    LCL_VAR   ref    V04 loc2         u:3 (last use) <l:$256, c:$b2>
                                                  /--*  t128   ref    arg0 in rcx
N003 ( 15,  7) [000129] --CXG-------              *  CALL      void   System.Threading.Monitor.Exit $VN.Void

------------ BB29 [0D3..0D4) (finret), preds={BB27,BB28} succs={}
               [000474] ------------                 IL_OFFSET void   IL offset: 0xd3
N001 (  0,  0) [000127] ------------                 RETFILT   void   $440

------------ BB30 [126..129) -> BB32 (cond), preds={BB13} succs={BB31,BB32}
               [000475] ------------                 IL_OFFSET void   IL offset: 0x126
N001 (  3,  2) [000223] ------------       t223 =    LCL_VAR   int   (AX) V05 loc3          $383
                                                  /--*  t223   int    
N002 (  4,  4) [000360] ----G-------       t360 = *  CAST      int <- bool <- int $34b
N003 (  1,  1) [000224] ------------       t224 =    CNS_INT   int    0 $40
                                                  /--*  t360   int    
                                                  +--*  t224   int    
N004 (  6,  6) [000225] J---G--N----       t225 = *  EQ        int    $34c
                                                  /--*  t225   int    
N005 (  8,  8) [000226] ----G-------              *  JTRUE     void  

------------ BB31 [129..12F), preds={BB30} succs={BB32}
               [000476] ------------                 IL_OFFSET void   IL offset: 0x129
N002 (  1,  1) [000228] ------------       t228 =    LCL_VAR   ref    V04 loc2         u:2 (last use) <l:$41a, c:$3df>
                                                  /--*  t228   ref    arg0 in rcx
N003 ( 15,  7) [000229] --CXG-------              *  CALL      void   System.Threading.Monitor.Exit $VN.Void

------------ BB32 [12F..130) (finret), preds={BB30,BB31} succs={BB14}
               [000477] ------------                 IL_OFFSET void   IL offset: 0x12f
N001 (  0,  0) [000227] ------------                 RETFILT   void   $441

-------------------------------------------------------------------------------------------------------------------

*************** Starting PHASE Lowering nodeinfo
lowering call (before):
N001 ( 14,  5) [000000] --CXG-------         t0 =    CALL      struct System.DateTime.get_Now $c0

objp:
======

args:
======

late:
======
lowering call (after):
N001 ( 14,  5) [000000] --CXG-------         t0 =    CALL      long   System.DateTime.get_Now $c0

lowering store lcl var/field (before):
N001 ( 14,  5) [000000] --CXG-------         t0 =    CALL      long   System.DateTime.get_Now $c0
                                                  /--*  t0     long   
N003 ( 18,  8) [000003] DA-XG-------              *  STORE_LCL_VAR struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  *    long   V02._dateData (offs=0x00) -> V17 tmp10        

lowering store lcl var/field (after):
N001 ( 14,  5) [000000] --CXG-------         t0 =    CALL      long   System.DateTime.get_Now $c0
                                                  /--*  t0     long   
N003 ( 18,  8) [000003] DA-XG-------              *  STORE_LCL_VAR struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  *    long   V02._dateData (offs=0x00) -> V17 tmp10        


Local V02 should not be enregistered because: written in a block op
lowering call (before):
N003 (  3,  2) [000004] -------N----         t4 =    LCL_VAR_ADDR byref  V02 loc0         
                                                  *    long   V02._dateData (offs=0x00) -> V17 tmp10        
                                                  /--*  t4     byref  this in rcx
N005 ( 17, 10) [000006] --CXG-------         t6 = *  CALL      ref    System.DateTime.ToString $84

objp:
======
lowering arg : N002 (  0,  0) [000268] ----------L-              *  ARGPLACE  byref  $140

args:
======

late:
======
lowering arg : N003 (  3,  2) [000004] -------N----              *  LCL_VAR_ADDR byref  V02 loc0         
                                                  *    long   V02._dateData (offs=0x00) -> V17 tmp10        
new node is :                [000478] ------------              *  PUTARG_REG byref  REG rcx

lowering call (after):
N003 (  3,  2) [000004] -------N----         t4 =    LCL_VAR_ADDR byref  V02 loc0         
                                                  *    long   V02._dateData (offs=0x00) -> V17 tmp10        
                                                  /--*  t4     byref  
               [000478] ------------       t478 = *  PUTARG_REG byref  REG rcx
                                                  /--*  t478   byref  this in rcx
N005 ( 17, 10) [000006] --CXG-------         t6 = *  CALL      ref    System.DateTime.ToString $84

lowering store lcl var/field (before):
N003 (  3,  2) [000004] -------N----         t4 =    LCL_VAR_ADDR byref  V02 loc0         
                                                  *    long   V02._dateData (offs=0x00) -> V17 tmp10        
                                                  /--*  t4     byref  
               [000478] ------------       t478 = *  PUTARG_REG byref  REG rcx
                                                  /--*  t478   byref  this in rcx
N005 ( 17, 10) [000006] --CXG-------         t6 = *  CALL      ref    System.DateTime.ToString $84
                                                  /--*  t6     ref    
N007 ( 17, 10) [000272] DA-XG-----L-              *  STORE_LCL_VAR ref    V21 tmp14        d:2

lowering store lcl var/field (after):
N003 (  3,  2) [000004] -------N----         t4 =    LCL_VAR_ADDR byref  V02 loc0         
                                                  *    long   V02._dateData (offs=0x00) -> V17 tmp10        
                                                  /--*  t4     byref  
               [000478] ------------       t478 = *  PUTARG_REG byref  REG rcx
                                                  /--*  t478   byref  this in rcx
N005 ( 17, 10) [000006] --CXG-------         t6 = *  CALL      ref    System.DateTime.ToString $84
                                                  /--*  t6     ref    
N007 ( 17, 10) [000272] DA-XG-----L-              *  STORE_LCL_VAR ref    V21 tmp14        d:2

lowering call (before):
N003 (  3,  2) [000004] -------N----         t4 =    LCL_VAR_ADDR byref  V02 loc0         
                                                  *    long   V02._dateData (offs=0x00) -> V17 tmp10        
                                                  /--*  t4     byref  
               [000478] ------------       t478 = *  PUTARG_REG byref  REG rcx
                                                  /--*  t478   byref  this in rcx
N005 ( 17, 10) [000006] --CXG-------         t6 = *  CALL      ref    System.DateTime.ToString $84
                                                  /--*  t6     ref    
N007 ( 17, 10) [000272] DA-XG-----L-              *  STORE_LCL_VAR ref    V21 tmp14        d:2
N009 (  1,  1) [000273] ------------       t273 =    LCL_VAR   ref    V21 tmp14        u:2 (last use) $84
N010 (  2, 10) [000269] H-----------       t269 =    CNS_INT(h) long   0x750031F0 "	 Created list" $1c0
                                                  /--*  t269   long   
N011 (  4, 12) [000270] #---G-------       t270 = *  IND       ref    $88
                                                  /--*  t273   ref    arg0 in rcx
                                                  +--*  t270   ref    arg1 in rdx
N012 ( 39, 30) [000008] --CXG-------         t8 = *  CALL      ref    System.String.Concat $89

objp:
======

args:
======
lowering arg : N007 ( 17, 10) [000272] DA-XG-----L-              *  STORE_LCL_VAR ref    V21 tmp14        d:2
lowering arg : N008 (  0,  0) [000274] ----------L-              *  ARGPLACE  ref    $88

late:
======
lowering arg : N009 (  1,  1) [000273] ------------              *  LCL_VAR   ref    V21 tmp14        u:2 (last use) $84
new node is :                [000479] ------------              *  PUTARG_REG ref    REG rcx

lowering arg : N011 (  4, 12) [000270] #---G-------              *  IND       ref    $88
new node is :                [000480] ----G-------              *  PUTARG_REG ref    REG rdx

lowering call (after):
N003 (  3,  2) [000004] -------N----         t4 =    LCL_VAR_ADDR byref  V02 loc0         
                                                  *    long   V02._dateData (offs=0x00) -> V17 tmp10        
                                                  /--*  t4     byref  
               [000478] ------------       t478 = *  PUTARG_REG byref  REG rcx
                                                  /--*  t478   byref  this in rcx
N005 ( 17, 10) [000006] --CXG-------         t6 = *  CALL      ref    System.DateTime.ToString $84
                                                  /--*  t6     ref    
N007 ( 17, 10) [000272] DA-XG-----L-              *  STORE_LCL_VAR ref    V21 tmp14        d:2
N009 (  1,  1) [000273] ------------       t273 =    LCL_VAR   ref    V21 tmp14        u:2 (last use) $84
                                                  /--*  t273   ref    
               [000479] ------------       t479 = *  PUTARG_REG ref    REG rcx
N010 (  2, 10) [000269] H-----------       t269 =    CNS_INT(h) long   0x750031F0 "	 Created list" $1c0
                                                  /--*  t269   long   
N011 (  4, 12) [000270] #---G-------       t270 = *  IND       ref    $88
                                                  /--*  t270   ref    
               [000480] ----G-------       t480 = *  PUTARG_REG ref    REG rdx
                                                  /--*  t479   ref    arg0 in rcx
                                                  +--*  t480   ref    arg1 in rdx
N012 ( 39, 30) [000008] --CXG-------         t8 = *  CALL      ref    System.String.Concat $89

lowering call (before):
N003 (  3,  2) [000004] -------N----         t4 =    LCL_VAR_ADDR byref  V02 loc0         
                                                  *    long   V02._dateData (offs=0x00) -> V17 tmp10        
                                                  /--*  t4     byref  
               [000478] ------------       t478 = *  PUTARG_REG byref  REG rcx
                                                  /--*  t478   byref  this in rcx
N005 ( 17, 10) [000006] --CXG-------         t6 = *  CALL      ref    System.DateTime.ToString $84
                                                  /--*  t6     ref    
N007 ( 17, 10) [000272] DA-XG-----L-              *  STORE_LCL_VAR ref    V21 tmp14        d:2
N009 (  1,  1) [000273] ------------       t273 =    LCL_VAR   ref    V21 tmp14        u:2 (last use) $84
                                                  /--*  t273   ref    
               [000479] ------------       t479 = *  PUTARG_REG ref    REG rcx
N010 (  2, 10) [000269] H-----------       t269 =    CNS_INT(h) long   0x750031F0 "	 Created list" $1c0
                                                  /--*  t269   long   
N011 (  4, 12) [000270] #---G-------       t270 = *  IND       ref    $88
                                                  /--*  t270   ref    
               [000480] ----G-------       t480 = *  PUTARG_REG ref    REG rdx
                                                  /--*  t479   ref    arg0 in rcx
                                                  +--*  t480   ref    arg1 in rdx
N012 ( 39, 30) [000008] --CXG-------         t8 = *  CALL      ref    System.String.Concat $89
                                                  /--*  t8     ref    arg0 in rcx
N013 ( 53, 36) [000009] --CXG-------              *  CALL      void   System.Console.WriteLine $VN.Void

objp:
======

args:
======
lowering arg : N001 (  0,  0) [000275] ----------L-              *  ARGPLACE  ref    $89

late:
======
lowering arg : N012 ( 39, 30) [000008] --CXG-------              *  CALL      ref    System.String.Concat $89
new node is :                [000481] --CXG-------              *  PUTARG_REG ref    REG rcx

lowering call (after):
N003 (  3,  2) [000004] -------N----         t4 =    LCL_VAR_ADDR byref  V02 loc0         
                                                  *    long   V02._dateData (offs=0x00) -> V17 tmp10        
                                                  /--*  t4     byref  
               [000478] ------------       t478 = *  PUTARG_REG byref  REG rcx
                                                  /--*  t478   byref  this in rcx
N005 ( 17, 10) [000006] --CXG-------         t6 = *  CALL      ref    System.DateTime.ToString $84
                                                  /--*  t6     ref    
N007 ( 17, 10) [000272] DA-XG-----L-              *  STORE_LCL_VAR ref    V21 tmp14        d:2
N009 (  1,  1) [000273] ------------       t273 =    LCL_VAR   ref    V21 tmp14        u:2 (last use) $84
                                                  /--*  t273   ref    
               [000479] ------------       t479 = *  PUTARG_REG ref    REG rcx
N010 (  2, 10) [000269] H-----------       t269 =    CNS_INT(h) long   0x750031F0 "	 Created list" $1c0
                                                  /--*  t269   long   
N011 (  4, 12) [000270] #---G-------       t270 = *  IND       ref    $88
                                                  /--*  t270   ref    
               [000480] ----G-------       t480 = *  PUTARG_REG ref    REG rdx
                                                  /--*  t479   ref    arg0 in rcx
                                                  +--*  t480   ref    arg1 in rdx
N012 ( 39, 30) [000008] --CXG-------         t8 = *  CALL      ref    System.String.Concat $89
                                                  /--*  t8     ref    
               [000481] --CXG-------       t481 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t481   ref    arg0 in rcx
N013 ( 53, 36) [000009] --CXG-------              *  CALL      void   System.Console.WriteLine $VN.Void

lowering call (before):
N002 (  2, 10) [000011] H-----------        t11 =    CNS_INT(h) long   0x7ffdb3ee2350 method $1c1
                                                  /--*  t11    long   arg0 in rcx
N003 ( 16, 16) [000012] --C---------        t12 = *  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST $240

objp:
======

args:
======
lowering arg : N001 (  0,  0) [000276] ----------L-              *  ARGPLACE  long   $1c1

late:
======
lowering arg : N002 (  2, 10) [000011] H-----------              *  CNS_INT(h) long   0x7ffdb3ee2350 method $1c1
new node is :                [000482] ------------              *  PUTARG_REG long   REG rcx

lowering call (after):
N002 (  2, 10) [000011] H-----------        t11 =    CNS_INT(h) long   0x7ffdb3ee2350 method $1c1
                                                  /--*  t11    long   
               [000482] ------------       t482 = *  PUTARG_REG long   REG rcx
                                                  /--*  t482   long   arg0 in rcx
N003 ( 16, 16) [000012] --C---------        t12 = *  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST $240

lowering store lcl var/field (before):
N002 (  2, 10) [000011] H-----------        t11 =    CNS_INT(h) long   0x7ffdb3ee2350 method $1c1
                                                  /--*  t11    long   
               [000482] ------------       t482 = *  PUTARG_REG long   REG rcx
                                                  /--*  t482   long   arg0 in rcx
N003 ( 16, 16) [000012] --C---------        t12 = *  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST $240
                                                  /--*  t12    ref    
N005 ( 16, 16) [000014] DA----------              *  STORE_LCL_VAR ref    V08 tmp1         d:2

lowering store lcl var/field (after):
N002 (  2, 10) [000011] H-----------        t11 =    CNS_INT(h) long   0x7ffdb3ee2350 method $1c1
                                                  /--*  t11    long   
               [000482] ------------       t482 = *  PUTARG_REG long   REG rcx
                                                  /--*  t482   long   arg0 in rcx
N003 ( 16, 16) [000012] --C---------        t12 = *  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST $240
                                                  /--*  t12    ref    
N005 ( 16, 16) [000014] DA----------              *  STORE_LCL_VAR ref    V08 tmp1         d:2

lowering call (before):
N002 (  1,  1) [000015] ------------        t15 =    LCL_VAR   ref    V08 tmp1         u:2 $240
                                                  /--*  t15    ref    this in rcx
N003 ( 15,  8) [000016] --CXG-------              *  CALL      void   FalseLeakRepro.List..ctor $VN.Void

objp:
======
lowering arg : N001 (  0,  0) [000277] ----------L-              *  ARGPLACE  ref    $8e

args:
======

late:
======
lowering arg : N002 (  1,  1) [000015] ------------              *  LCL_VAR   ref    V08 tmp1         u:2 $240
new node is :                [000483] ------------              *  PUTARG_REG ref    REG rcx

lowering call (after):
N002 (  1,  1) [000015] ------------        t15 =    LCL_VAR   ref    V08 tmp1         u:2 $240
                                                  /--*  t15    ref    
               [000483] ------------       t483 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t483   ref    this in rcx
N003 ( 15,  8) [000016] --CXG-------              *  CALL      void   FalseLeakRepro.List..ctor $VN.Void

Addressing mode:
  Base
    N001 (  1,  1) [000010] ------------              *  LCL_VAR   ref    V00 this         u:1 $80
  + 8
Removing unused node:
  N002 (  1,  1) [000278] -c----------              *  CNS_INT   long   8 field offset Fseq[_myList] $280
New addressing mode node:
  N003 (  2,  2) [000279] ------------              *  LEA(b+8)  byref 

lowering call (before):
N002 (  2, 10) [000023] H-----------        t23 =    CNS_INT(h) long   0x7ffdb3b058b8 token $1c3
                                                  /--*  t23    long   arg0 in rcx
N003 ( 16, 16) [000024] --C---------        t24 = *  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST $243

objp:
======

args:
======
lowering arg : N001 (  0,  0) [000280] ----------L-              *  ARGPLACE  long   $1c3

late:
======
lowering arg : N002 (  2, 10) [000023] H-----------              *  CNS_INT(h) long   0x7ffdb3b058b8 token $1c3
new node is :                [000484] ------------              *  PUTARG_REG long   REG rcx

lowering call (after):
N002 (  2, 10) [000023] H-----------        t23 =    CNS_INT(h) long   0x7ffdb3b058b8 token $1c3
                                                  /--*  t23    long   
               [000484] ------------       t484 = *  PUTARG_REG long   REG rcx
                                                  /--*  t484   long   arg0 in rcx
N003 ( 16, 16) [000024] --C---------        t24 = *  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST $243

lowering store lcl var/field (before):
N002 (  2, 10) [000023] H-----------        t23 =    CNS_INT(h) long   0x7ffdb3b058b8 token $1c3
                                                  /--*  t23    long   
               [000484] ------------       t484 = *  PUTARG_REG long   REG rcx
                                                  /--*  t484   long   arg0 in rcx
N003 ( 16, 16) [000024] --C---------        t24 = *  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST $243
                                                  /--*  t24    ref    
N005 ( 16, 16) [000026] DA----------              *  STORE_LCL_VAR ref    V09 tmp2         d:2

lowering store lcl var/field (after):
N002 (  2, 10) [000023] H-----------        t23 =    CNS_INT(h) long   0x7ffdb3b058b8 token $1c3
                                                  /--*  t23    long   
               [000484] ------------       t484 = *  PUTARG_REG long   REG rcx
                                                  /--*  t484   long   arg0 in rcx
N003 ( 16, 16) [000024] --C---------        t24 = *  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST $243
                                                  /--*  t24    ref    
N005 ( 16, 16) [000026] DA----------              *  STORE_LCL_VAR ref    V09 tmp2         d:2

Addressing mode:
  Base
    N001 (  1,  1) [000020] ------------              *  LCL_VAR   ref    V00 this         u:1 $80
  + 8
Removing unused node:
  N002 (  1,  1) [000283] -c----------              *  CNS_INT   long   8 field offset Fseq[_myList] $280
New addressing mode node:
  N003 (  2,  2) [000284] ------------              *  LEA(b+8)  byref 

Addressing mode:
  Base
    N004 (  4,  4) [000021] n---GO------              *  IND       ref    <l:$246, c:$245>
  + 8
Removing unused node:
  N005 (  1,  1) [000281] -c----------              *  CNS_INT   long   8 field offset Fseq[Head] $280
New addressing mode node:
  N006 (  5,  5) [000282] ------------              *  LEA(b+8)  byref 

lowering store lcl var/field (before):
N001 (  1,  1) [000020] ------------        t20 =    LCL_VAR   ref    V00 this         u:1 $80
                                                  /--*  t20    ref    
N003 (  2,  2) [000284] -c----------       t284 = *  LEA(b+8)  byref 
                                                  /--*  t284   byref  
N004 (  4,  4) [000021] n---GO------        t21 = *  IND       ref    <l:$246, c:$245>
                                                  /--*  t21    ref    
N006 (  5,  5) [000282] -c----------       t282 = *  LEA(b+8)  byref 
                                                  /--*  t282   byref  
N007 (  7,  7) [000022] ---XGO------        t22 = *  IND       ref    <l:$250, c:$24f>
                                                  /--*  t22    ref    
N009 (  7,  7) [000030] DA-XGO------              *  STORE_LCL_VAR ref    V10 tmp3         d:2

lowering store lcl var/field (after):
N001 (  1,  1) [000020] ------------        t20 =    LCL_VAR   ref    V00 this         u:1 $80
                                                  /--*  t20    ref    
N003 (  2,  2) [000284] -c----------       t284 = *  LEA(b+8)  byref 
                                                  /--*  t284   byref  
N004 (  4,  4) [000021] n---GO------        t21 = *  IND       ref    <l:$246, c:$245>
                                                  /--*  t21    ref    
N006 (  5,  5) [000282] -c----------       t282 = *  LEA(b+8)  byref 
                                                  /--*  t282   byref  
N007 (  7,  7) [000022] ---XGO------        t22 = *  IND       ref    <l:$250, c:$24f>
                                                  /--*  t22    ref    
N009 (  7,  7) [000030] DA-XGO------              *  STORE_LCL_VAR ref    V10 tmp3         d:2

lowering call (before):
N002 (  1,  1) [000027] ------------        t27 =    LCL_VAR   ref    V09 tmp2         u:2 $243
                                                  /--*  t27    ref    this in rcx
N003 ( 15,  8) [000028] --CXG-------              *  CALL      void   System.Object..ctor $VN.Void

objp:
======
lowering arg : N001 (  0,  0) [000285] ----------L-              *  ARGPLACE  ref    $98

args:
======

late:
======
lowering arg : N002 (  1,  1) [000027] ------------              *  LCL_VAR   ref    V09 tmp2         u:2 $243
new node is :                [000485] ------------              *  PUTARG_REG ref    REG rcx

lowering call (after):
N002 (  1,  1) [000027] ------------        t27 =    LCL_VAR   ref    V09 tmp2         u:2 $243
                                                  /--*  t27    ref    
               [000485] ------------       t485 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t485   ref    this in rcx
N003 ( 15,  8) [000028] --CXG-------              *  CALL      void   System.Object..ctor $VN.Void

Addressing mode:
  Base
    N001 (  1,  1) [000031] ------------              *  LCL_VAR   ref    V10 tmp3         u:2 (last use) <l:$248, c:$94>
  + 16
Removing unused node:
  N002 (  1,  1) [000286] -c----------              *  CNS_INT   long   16 field offset Fseq[Data] $281
New addressing mode node:
  N003 (  2,  2) [000287] ------------              *  LEA(b+16) byref 

lowering call (before):
N002 (  2, 10) [000037] H-----------        t37 =    CNS_INT(h) long   0x7ffdb3ee6200 token $1c6
                                                  /--*  t37    long   arg0 in rcx
N003 ( 16, 16) [000038] --C---------        t38 = *  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST $253

objp:
======

args:
======
lowering arg : N001 (  0,  0) [000288] ----------L-              *  ARGPLACE  long   $1c6

late:
======
lowering arg : N002 (  2, 10) [000037] H-----------              *  CNS_INT(h) long   0x7ffdb3ee6200 token $1c6
new node is :                [000486] ------------              *  PUTARG_REG long   REG rcx

lowering call (after):
N002 (  2, 10) [000037] H-----------        t37 =    CNS_INT(h) long   0x7ffdb3ee6200 token $1c6
                                                  /--*  t37    long   
               [000486] ------------       t486 = *  PUTARG_REG long   REG rcx
                                                  /--*  t486   long   arg0 in rcx
N003 ( 16, 16) [000038] --C---------        t38 = *  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST $253

lowering store lcl var/field (before):
N002 (  2, 10) [000037] H-----------        t37 =    CNS_INT(h) long   0x7ffdb3ee6200 token $1c6
                                                  /--*  t37    long   
               [000486] ------------       t486 = *  PUTARG_REG long   REG rcx
                                                  /--*  t486   long   arg0 in rcx
N003 ( 16, 16) [000038] --C---------        t38 = *  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST $253
                                                  /--*  t38    ref    
N005 ( 16, 16) [000040] DA----------              *  STORE_LCL_VAR ref    V11 tmp4         d:2

lowering store lcl var/field (after):
N002 (  2, 10) [000037] H-----------        t37 =    CNS_INT(h) long   0x7ffdb3ee6200 token $1c6
                                                  /--*  t37    long   
               [000486] ------------       t486 = *  PUTARG_REG long   REG rcx
                                                  /--*  t486   long   arg0 in rcx
N003 ( 16, 16) [000038] --C---------        t38 = *  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST $253
                                                  /--*  t38    ref    
N005 ( 16, 16) [000040] DA----------              *  STORE_LCL_VAR ref    V11 tmp4         d:2

lowering call (before):
N004 (  1,  1) [000041] ------------        t41 =    LCL_VAR   ref    V11 tmp4         u:2 $253
N005 (  1,  1) [000035] ------------        t35 =    LCL_VAR   ref    V00 this         u:1 $80
N006 (  2, 10) [000036] H-----------        t36 =    CNS_INT(h) long   0x7ffdb3b213f8 ftn $1c7
                                                  /--*  t41    ref    this in rcx
                                                  +--*  t35    ref    arg1 in rdx
                                                  +--*  t36    long   arg2 in r8
N007 ( 18, 21) [000042] --CXG-------              *  CALL      void   System.MulticastDelegate.CtorClosed $VN.Void

objp:
======
lowering arg : N001 (  0,  0) [000289] ----------L-              *  ARGPLACE  ref    $9c

args:
======
lowering arg : N002 (  0,  0) [000290] ----------L-              *  ARGPLACE  ref    $253
lowering arg : N003 (  0,  0) [000291] ----------L-              *  ARGPLACE  long   $80

late:
======
lowering arg : N004 (  1,  1) [000041] ------------              *  LCL_VAR   ref    V11 tmp4         u:2 $253
new node is :                [000487] ------------              *  PUTARG_REG ref    REG rcx

lowering arg : N005 (  1,  1) [000035] ------------              *  LCL_VAR   ref    V00 this         u:1 $80
new node is :                [000488] ------------              *  PUTARG_REG ref    REG rdx

lowering arg : N006 (  2, 10) [000036] H-----------              *  CNS_INT(h) long   0x7ffdb3b213f8 ftn $1c7
new node is :                [000489] ------------              *  PUTARG_REG long   REG r8

lowering call (after):
N004 (  1,  1) [000041] ------------        t41 =    LCL_VAR   ref    V11 tmp4         u:2 $253
                                                  /--*  t41    ref    
               [000487] ------------       t487 = *  PUTARG_REG ref    REG rcx
N005 (  1,  1) [000035] ------------        t35 =    LCL_VAR   ref    V00 this         u:1 $80
                                                  /--*  t35    ref    
               [000488] ------------       t488 = *  PUTARG_REG ref    REG rdx
N006 (  2, 10) [000036] H-----------        t36 =    CNS_INT(h) long   0x7ffdb3b213f8 ftn $1c7
                                                  /--*  t36    long   
               [000489] ------------       t489 = *  PUTARG_REG long   REG r8
                                                  /--*  t487   ref    this in rcx
                                                  +--*  t488   ref    arg1 in rdx
                                                  +--*  t489   long   arg2 in r8
N007 ( 18, 21) [000042] --CXG-------              *  CALL      void   System.MulticastDelegate.CtorClosed $VN.Void

lowering call (before):
N002 (  2, 10) [000044] H-----------        t44 =    CNS_INT(h) long   0x7ffdb3c84e80 token $1c8
                                                  /--*  t44    long   arg0 in rcx
N003 ( 16, 16) [000045] --C---------        t45 = *  CALL help ref    HELPER.CORINFO_HELP_NEWFAST $254

objp:
======

args:
======
lowering arg : N001 (  0,  0) [000292] ----------L-              *  ARGPLACE  long   $1c8

late:
======
lowering arg : N002 (  2, 10) [000044] H-----------              *  CNS_INT(h) long   0x7ffdb3c84e80 token $1c8
new node is :                [000490] ------------              *  PUTARG_REG long   REG rcx

lowering call (after):
N002 (  2, 10) [000044] H-----------        t44 =    CNS_INT(h) long   0x7ffdb3c84e80 token $1c8
                                                  /--*  t44    long   
               [000490] ------------       t490 = *  PUTARG_REG long   REG rcx
                                                  /--*  t490   long   arg0 in rcx
N003 ( 16, 16) [000045] --C---------        t45 = *  CALL help ref    HELPER.CORINFO_HELP_NEWFAST $254

lowering store lcl var/field (before):
N002 (  2, 10) [000044] H-----------        t44 =    CNS_INT(h) long   0x7ffdb3c84e80 token $1c8
                                                  /--*  t44    long   
               [000490] ------------       t490 = *  PUTARG_REG long   REG rcx
                                                  /--*  t490   long   arg0 in rcx
N003 ( 16, 16) [000045] --C---------        t45 = *  CALL help ref    HELPER.CORINFO_HELP_NEWFAST $254
                                                  /--*  t45    ref    
N005 ( 16, 16) [000047] DA----------              *  STORE_LCL_VAR ref    V12 tmp5         d:2

lowering store lcl var/field (after):
N002 (  2, 10) [000044] H-----------        t44 =    CNS_INT(h) long   0x7ffdb3c84e80 token $1c8
                                                  /--*  t44    long   
               [000490] ------------       t490 = *  PUTARG_REG long   REG rcx
                                                  /--*  t490   long   arg0 in rcx
N003 ( 16, 16) [000045] --C---------        t45 = *  CALL help ref    HELPER.CORINFO_HELP_NEWFAST $254
                                                  /--*  t45    ref    
N005 ( 16, 16) [000047] DA----------              *  STORE_LCL_VAR ref    V12 tmp5         d:2

lowering call (before):
N003 (  1,  1) [000048] ------------        t48 =    LCL_VAR   ref    V12 tmp5         u:2 $254
N004 (  1,  1) [000043] ------------        t43 =    LCL_VAR   ref    V11 tmp4         u:2 (last use) $253
                                                  /--*  t48    ref    this in rcx
                                                  +--*  t43    ref    arg1 in rdx
N005 ( 16, 10) [000049] --CXG-------              *  CALL      void   System.Threading.Thread..ctor $VN.Void

objp:
======
lowering arg : N001 (  0,  0) [000293] ----------L-              *  ARGPLACE  ref    $a1

args:
======
lowering arg : N002 (  0,  0) [000294] ----------L-              *  ARGPLACE  ref    $254

late:
======
lowering arg : N003 (  1,  1) [000048] ------------              *  LCL_VAR   ref    V12 tmp5         u:2 $254
new node is :                [000491] ------------              *  PUTARG_REG ref    REG rcx

lowering arg : N004 (  1,  1) [000043] ------------              *  LCL_VAR   ref    V11 tmp4         u:2 (last use) $253
new node is :                [000492] ------------              *  PUTARG_REG ref    REG rdx

lowering call (after):
N003 (  1,  1) [000048] ------------        t48 =    LCL_VAR   ref    V12 tmp5         u:2 $254
                                                  /--*  t48    ref    
               [000491] ------------       t491 = *  PUTARG_REG ref    REG rcx
N004 (  1,  1) [000043] ------------        t43 =    LCL_VAR   ref    V11 tmp4         u:2 (last use) $253
                                                  /--*  t43    ref    
               [000492] ------------       t492 = *  PUTARG_REG ref    REG rdx
                                                  /--*  t491   ref    this in rcx
                                                  +--*  t492   ref    arg1 in rdx
N005 ( 16, 10) [000049] --CXG-------              *  CALL      void   System.Threading.Thread..ctor $VN.Void

lowering call (before):
N002 (  1,  1) [000050] ------------        t50 =    LCL_VAR   ref    V12 tmp5         u:2 (last use) $254
                                                  /--*  t50    ref    this in rcx
N003 ( 15,  8) [000051] --CXG-------              *  CALL      void   System.Threading.Thread.Start $VN.Void

objp:
======
lowering arg : N001 (  0,  0) [000295] ----------L-              *  ARGPLACE  ref    $a4

args:
======

late:
======
lowering arg : N002 (  1,  1) [000050] ------------              *  LCL_VAR   ref    V12 tmp5         u:2 (last use) $254
new node is :                [000493] ------------              *  PUTARG_REG ref    REG rcx

lowering call (after):
N002 (  1,  1) [000050] ------------        t50 =    LCL_VAR   ref    V12 tmp5         u:2 (last use) $254
                                                  /--*  t50    ref    
               [000493] ------------       t493 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t493   ref    this in rcx
N003 ( 15,  8) [000051] --CXG-------              *  CALL      void   System.Threading.Thread.Start $VN.Void

lowering call (before):
N001 ( 14,  5) [000052] --CXG-------        t52 =    CALL      struct System.DateTime.get_Now $c2

objp:
======

args:
======

late:
======
lowering call (after):
N001 ( 14,  5) [000052] --CXG-------        t52 =    CALL      long   System.DateTime.get_Now $c2

lowering store lcl var/field (before):
N001 ( 14,  5) [000052] --CXG-------        t52 =    CALL      long   System.DateTime.get_Now $c2
                                                  /--*  t52    long   
N003 ( 18,  8) [000055] DA-XG-------              *  STORE_LCL_VAR struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  *    long   V02._dateData (offs=0x00) -> V17 tmp10        

lowering store lcl var/field (after):
N001 ( 14,  5) [000052] --CXG-------        t52 =    CALL      long   System.DateTime.get_Now $c2
                                                  /--*  t52    long   
N003 ( 18,  8) [000055] DA-XG-------              *  STORE_LCL_VAR struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  *    long   V02._dateData (offs=0x00) -> V17 tmp10        


Local V02 should not be enregistered because: written in a block op
lowering call (before):
N003 (  3,  2) [000056] -------N----        t56 =    LCL_VAR_ADDR byref  V02 loc0         
                                                  *    long   V02._dateData (offs=0x00) -> V17 tmp10        
                                                  /--*  t56    byref  this in rcx
N005 ( 17, 10) [000058] --CXG-------        t58 = *  CALL      ref    System.DateTime.ToString $a8

objp:
======
lowering arg : N002 (  0,  0) [000296] ----------L-              *  ARGPLACE  byref  $142

args:
======

late:
======
lowering arg : N003 (  3,  2) [000056] -------N----              *  LCL_VAR_ADDR byref  V02 loc0         
                                                  *    long   V02._dateData (offs=0x00) -> V17 tmp10        
new node is :                [000494] ------------              *  PUTARG_REG byref  REG rcx

lowering call (after):
N003 (  3,  2) [000056] -------N----        t56 =    LCL_VAR_ADDR byref  V02 loc0         
                                                  *    long   V02._dateData (offs=0x00) -> V17 tmp10        
                                                  /--*  t56    byref  
               [000494] ------------       t494 = *  PUTARG_REG byref  REG rcx
                                                  /--*  t494   byref  this in rcx
N005 ( 17, 10) [000058] --CXG-------        t58 = *  CALL      ref    System.DateTime.ToString $a8

lowering store lcl var/field (before):
N003 (  3,  2) [000056] -------N----        t56 =    LCL_VAR_ADDR byref  V02 loc0         
                                                  *    long   V02._dateData (offs=0x00) -> V17 tmp10        
                                                  /--*  t56    byref  
               [000494] ------------       t494 = *  PUTARG_REG byref  REG rcx
                                                  /--*  t494   byref  this in rcx
N005 ( 17, 10) [000058] --CXG-------        t58 = *  CALL      ref    System.DateTime.ToString $a8
                                                  /--*  t58    ref    
N007 ( 17, 10) [000300] DA-XG-----L-              *  STORE_LCL_VAR ref    V22 tmp15        d:2

lowering store lcl var/field (after):
N003 (  3,  2) [000056] -------N----        t56 =    LCL_VAR_ADDR byref  V02 loc0         
                                                  *    long   V02._dateData (offs=0x00) -> V17 tmp10        
                                                  /--*  t56    byref  
               [000494] ------------       t494 = *  PUTARG_REG byref  REG rcx
                                                  /--*  t494   byref  this in rcx
N005 ( 17, 10) [000058] --CXG-------        t58 = *  CALL      ref    System.DateTime.ToString $a8
                                                  /--*  t58    ref    
N007 ( 17, 10) [000300] DA-XG-----L-              *  STORE_LCL_VAR ref    V22 tmp15        d:2

lowering call (before):
N003 (  3,  2) [000056] -------N----        t56 =    LCL_VAR_ADDR byref  V02 loc0         
                                                  *    long   V02._dateData (offs=0x00) -> V17 tmp10        
                                                  /--*  t56    byref  
               [000494] ------------       t494 = *  PUTARG_REG byref  REG rcx
                                                  /--*  t494   byref  this in rcx
N005 ( 17, 10) [000058] --CXG-------        t58 = *  CALL      ref    System.DateTime.ToString $a8
                                                  /--*  t58    ref    
N007 ( 17, 10) [000300] DA-XG-----L-              *  STORE_LCL_VAR ref    V22 tmp15        d:2
N009 (  1,  1) [000301] ------------       t301 =    LCL_VAR   ref    V22 tmp15        u:2 (last use) $a8
N010 (  2, 10) [000297] H-----------       t297 =    CNS_INT(h) long   0x750031F8 "	 Consumer thread started, adding items..." $1c9
                                                  /--*  t297   long   
N011 (  4, 12) [000298] #---G-------       t298 = *  IND       ref    $ac
                                                  /--*  t301   ref    arg0 in rcx
                                                  +--*  t298   ref    arg1 in rdx
N012 ( 39, 30) [000060] --CXG-------        t60 = *  CALL      ref    System.String.Concat $ad

objp:
======

args:
======
lowering arg : N007 ( 17, 10) [000300] DA-XG-----L-              *  STORE_LCL_VAR ref    V22 tmp15        d:2
lowering arg : N008 (  0,  0) [000302] ----------L-              *  ARGPLACE  ref    $ac

late:
======
lowering arg : N009 (  1,  1) [000301] ------------              *  LCL_VAR   ref    V22 tmp15        u:2 (last use) $a8
new node is :                [000495] ------------              *  PUTARG_REG ref    REG rcx

lowering arg : N011 (  4, 12) [000298] #---G-------              *  IND       ref    $ac
new node is :                [000496] ----G-------              *  PUTARG_REG ref    REG rdx

lowering call (after):
N003 (  3,  2) [000056] -------N----        t56 =    LCL_VAR_ADDR byref  V02 loc0         
                                                  *    long   V02._dateData (offs=0x00) -> V17 tmp10        
                                                  /--*  t56    byref  
               [000494] ------------       t494 = *  PUTARG_REG byref  REG rcx
                                                  /--*  t494   byref  this in rcx
N005 ( 17, 10) [000058] --CXG-------        t58 = *  CALL      ref    System.DateTime.ToString $a8
                                                  /--*  t58    ref    
N007 ( 17, 10) [000300] DA-XG-----L-              *  STORE_LCL_VAR ref    V22 tmp15        d:2
N009 (  1,  1) [000301] ------------       t301 =    LCL_VAR   ref    V22 tmp15        u:2 (last use) $a8
                                                  /--*  t301   ref    
               [000495] ------------       t495 = *  PUTARG_REG ref    REG rcx
N010 (  2, 10) [000297] H-----------       t297 =    CNS_INT(h) long   0x750031F8 "	 Consumer thread started, adding items..." $1c9
                                                  /--*  t297   long   
N011 (  4, 12) [000298] #---G-------       t298 = *  IND       ref    $ac
                                                  /--*  t298   ref    
               [000496] ----G-------       t496 = *  PUTARG_REG ref    REG rdx
                                                  /--*  t495   ref    arg0 in rcx
                                                  +--*  t496   ref    arg1 in rdx
N012 ( 39, 30) [000060] --CXG-------        t60 = *  CALL      ref    System.String.Concat $ad

lowering call (before):
N003 (  3,  2) [000056] -------N----        t56 =    LCL_VAR_ADDR byref  V02 loc0         
                                                  *    long   V02._dateData (offs=0x00) -> V17 tmp10        
                                                  /--*  t56    byref  
               [000494] ------------       t494 = *  PUTARG_REG byref  REG rcx
                                                  /--*  t494   byref  this in rcx
N005 ( 17, 10) [000058] --CXG-------        t58 = *  CALL      ref    System.DateTime.ToString $a8
                                                  /--*  t58    ref    
N007 ( 17, 10) [000300] DA-XG-----L-              *  STORE_LCL_VAR ref    V22 tmp15        d:2
N009 (  1,  1) [000301] ------------       t301 =    LCL_VAR   ref    V22 tmp15        u:2 (last use) $a8
                                                  /--*  t301   ref    
               [000495] ------------       t495 = *  PUTARG_REG ref    REG rcx
N010 (  2, 10) [000297] H-----------       t297 =    CNS_INT(h) long   0x750031F8 "	 Consumer thread started, adding items..." $1c9
                                                  /--*  t297   long   
N011 (  4, 12) [000298] #---G-------       t298 = *  IND       ref    $ac
                                                  /--*  t298   ref    
               [000496] ----G-------       t496 = *  PUTARG_REG ref    REG rdx
                                                  /--*  t495   ref    arg0 in rcx
                                                  +--*  t496   ref    arg1 in rdx
N012 ( 39, 30) [000060] --CXG-------        t60 = *  CALL      ref    System.String.Concat $ad
                                                  /--*  t60    ref    arg0 in rcx
N013 ( 53, 36) [000061] --CXG-------              *  CALL      void   System.Console.WriteLine $VN.Void

objp:
======

args:
======
lowering arg : N001 (  0,  0) [000303] ----------L-              *  ARGPLACE  ref    $ad

late:
======
lowering arg : N012 ( 39, 30) [000060] --CXG-------              *  CALL      ref    System.String.Concat $ad
new node is :                [000497] --CXG-------              *  PUTARG_REG ref    REG rcx

lowering call (after):
N003 (  3,  2) [000056] -------N----        t56 =    LCL_VAR_ADDR byref  V02 loc0         
                                                  *    long   V02._dateData (offs=0x00) -> V17 tmp10        
                                                  /--*  t56    byref  
               [000494] ------------       t494 = *  PUTARG_REG byref  REG rcx
                                                  /--*  t494   byref  this in rcx
N005 ( 17, 10) [000058] --CXG-------        t58 = *  CALL      ref    System.DateTime.ToString $a8
                                                  /--*  t58    ref    
N007 ( 17, 10) [000300] DA-XG-----L-              *  STORE_LCL_VAR ref    V22 tmp15        d:2
N009 (  1,  1) [000301] ------------       t301 =    LCL_VAR   ref    V22 tmp15        u:2 (last use) $a8
                                                  /--*  t301   ref    
               [000495] ------------       t495 = *  PUTARG_REG ref    REG rcx
N010 (  2, 10) [000297] H-----------       t297 =    CNS_INT(h) long   0x750031F8 "	 Consumer thread started, adding items..." $1c9
                                                  /--*  t297   long   
N011 (  4, 12) [000298] #---G-------       t298 = *  IND       ref    $ac
                                                  /--*  t298   ref    
               [000496] ----G-------       t496 = *  PUTARG_REG ref    REG rdx
                                                  /--*  t495   ref    arg0 in rcx
                                                  +--*  t496   ref    arg1 in rdx
N012 ( 39, 30) [000060] --CXG-------        t60 = *  CALL      ref    System.String.Concat $ad
                                                  /--*  t60    ref    
               [000497] --CXG-------       t497 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t497   ref    arg0 in rcx
N013 ( 53, 36) [000061] --CXG-------              *  CALL      void   System.Console.WriteLine $VN.Void

lowering store lcl var/field (before):
N001 (  1,  1) [000062] ------------        t62 =    CNS_INT   int    0 $40
                                                  /--*  t62    int    
N003 (  1,  3) [000064] DA----------              *  STORE_LCL_VAR int    V03 loc1         d:2

lowering store lcl var/field (after):
N001 (  1,  1) [000062] ------------        t62 =    CNS_INT   int    0 $40
                                                  /--*  t62    int    
N003 (  1,  3) [000064] DA----------              *  STORE_LCL_VAR int    V03 loc1         d:2

Addressing mode:
  Base
    N001 (  1,  1) [000069] ------------              *  LCL_VAR   ref    V00 this         u:1 $80
  + 8
Removing unused node:
  N002 (  1,  1) [000304] -c----------              *  CNS_INT   long   8 field offset Fseq[_myList] $280
New addressing mode node:
  N003 (  2,  2) [000305] ------------              *  LEA(b+8)  byref 

lowering store lcl var/field (before):
N001 (  1,  1) [000069] ------------        t69 =    LCL_VAR   ref    V00 this         u:1 $80
                                                  /--*  t69    ref    
N003 (  2,  2) [000305] -c----------       t305 = *  LEA(b+8)  byref 
                                                  /--*  t305   byref  
N004 (  4,  4) [000070] n---GO------        t70 = *  IND       ref    <l:$258, c:$257>
                                                  /--*  t70    ref    
N006 (  8,  7) [000072] DA--GO------              *  STORE_LCL_VAR ref    V04 loc2         d:3

lowering store lcl var/field (after):
N001 (  1,  1) [000069] ------------        t69 =    LCL_VAR   ref    V00 this         u:1 $80
                                                  /--*  t69    ref    
N003 (  2,  2) [000305] -c----------       t305 = *  LEA(b+8)  byref 
                                                  /--*  t305   byref  
N004 (  4,  4) [000070] n---GO------        t70 = *  IND       ref    <l:$258, c:$257>
                                                  /--*  t70    ref    
N006 (  8,  7) [000072] DA--GO------              *  STORE_LCL_VAR ref    V04 loc2         d:3

lowering store lcl var/field (before):
N001 (  1,  1) [000073] ------------        t73 =    CNS_INT   int    0 $40
                                                  /--*  t73    int    
N003 (  5,  4) [000075] DA--G-------              *  STORE_LCL_VAR int   (AX) V05 loc3         

lowering store lcl var/field (after):
N001 (  1,  1) [000073] ------------        t73 =    CNS_INT   int    0 $40
                                                  /--*  t73    int    
N003 (  5,  4) [000075] DA--G-------              *  STORE_LCL_VAR int   (AX) V05 loc3         


Local V05 should not be enregistered because: written in a block op
lowering call (before):
N003 (  3,  3) [000078] ------------        t78 =    LCL_VAR_ADDR long   V05 loc3          $206
N004 (  1,  1) [000076] ------------        t76 =    LCL_VAR   ref    V04 loc2         u:3 <l:$256, c:$b2>
                                                  /--*  t78    long   arg1 in rdx
                                                  +--*  t76    ref    arg0 in rcx
N005 ( 18, 11) [000079] --CXG-------              *  CALL      void   System.Threading.Monitor.Enter $VN.Void

objp:
======

args:
======
lowering arg : N001 (  0,  0) [000307] ----------L-              *  ARGPLACE  ref    <l:$256, c:$b2>
lowering arg : N002 (  0,  0) [000306] ----------L-              *  ARGPLACE  long   $206

late:
======
lowering arg : N003 (  3,  3) [000078] ------------              *  LCL_VAR_ADDR long   V05 loc3          $206
new node is :                [000498] ------------              *  PUTARG_REG long   REG rdx

lowering arg : N004 (  1,  1) [000076] ------------              *  LCL_VAR   ref    V04 loc2         u:3 <l:$256, c:$b2>
new node is :                [000499] ------------              *  PUTARG_REG ref    REG rcx

lowering call (after):
N003 (  3,  3) [000078] ------------        t78 =    LCL_VAR_ADDR long   V05 loc3          $206
                                                  /--*  t78    long   
               [000498] ------------       t498 = *  PUTARG_REG long   REG rdx
N004 (  1,  1) [000076] ------------        t76 =    LCL_VAR   ref    V04 loc2         u:3 <l:$256, c:$b2>
                                                  /--*  t76    ref    
               [000499] ------------       t499 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t498   long   arg1 in rdx
                                                  +--*  t499   ref    arg0 in rcx
N005 ( 18, 11) [000079] --CXG-------              *  CALL      void   System.Threading.Monitor.Enter $VN.Void

lowering call (before):
N002 (  2, 10) [000083] H-----------        t83 =    CNS_INT(h) long   0x7ffdb3ee58a8 method $1ca
                                                  /--*  t83    long   arg0 in rcx
N003 ( 16, 16) [000084] --C---------        t84 = *  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST $259

objp:
======

args:
======
lowering arg : N001 (  0,  0) [000308] ----------L-              *  ARGPLACE  long   $1ca

late:
======
lowering arg : N002 (  2, 10) [000083] H-----------              *  CNS_INT(h) long   0x7ffdb3ee58a8 method $1ca
new node is :                [000500] ------------              *  PUTARG_REG long   REG rcx

lowering call (after):
N002 (  2, 10) [000083] H-----------        t83 =    CNS_INT(h) long   0x7ffdb3ee58a8 method $1ca
                                                  /--*  t83    long   
               [000500] ------------       t500 = *  PUTARG_REG long   REG rcx
                                                  /--*  t500   long   arg0 in rcx
N003 ( 16, 16) [000084] --C---------        t84 = *  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST $259

lowering store lcl var/field (before):
N002 (  2, 10) [000083] H-----------        t83 =    CNS_INT(h) long   0x7ffdb3ee58a8 method $1ca
                                                  /--*  t83    long   
               [000500] ------------       t500 = *  PUTARG_REG long   REG rcx
                                                  /--*  t500   long   arg0 in rcx
N003 ( 16, 16) [000084] --C---------        t84 = *  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST $259
                                                  /--*  t84    ref    
N005 ( 16, 16) [000086] DA----------              *  STORE_LCL_VAR ref    V13 tmp6         d:2

lowering store lcl var/field (after):
N002 (  2, 10) [000083] H-----------        t83 =    CNS_INT(h) long   0x7ffdb3ee58a8 method $1ca
                                                  /--*  t83    long   
               [000500] ------------       t500 = *  PUTARG_REG long   REG rcx
                                                  /--*  t500   long   arg0 in rcx
N003 ( 16, 16) [000084] --C---------        t84 = *  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST $259
                                                  /--*  t84    ref    
N005 ( 16, 16) [000086] DA----------              *  STORE_LCL_VAR ref    V13 tmp6         d:2

Addressing mode:
  Base
    N001 (  1,  1) [000080] ------------              *  LCL_VAR   ref    V00 this         u:1 $80
  + 8
Removing unused node:
  N002 (  1,  1) [000311] -c----------              *  CNS_INT   long   8 field offset Fseq[_myList] $280
New addressing mode node:
  N003 (  2,  2) [000312] ------------              *  LEA(b+8)  byref 

Addressing mode:
  Base
    N004 (  4,  4) [000081] n---GO------              *  IND       ref    <l:$25d, c:$25c>
  + 8
Removing unused node:
  N005 (  1,  1) [000309] -c----------              *  CNS_INT   long   8 field offset Fseq[Head] $280
New addressing mode node:
  N006 (  5,  5) [000310] ------------              *  LEA(b+8)  byref 

lowering store lcl var/field (before):
N001 (  1,  1) [000080] ------------        t80 =    LCL_VAR   ref    V00 this         u:1 $80
                                                  /--*  t80    ref    
N003 (  2,  2) [000312] -c----------       t312 = *  LEA(b+8)  byref 
                                                  /--*  t312   byref  
N004 (  4,  4) [000081] n---GO------        t81 = *  IND       ref    <l:$25d, c:$25c>
                                                  /--*  t81    ref    
N006 (  5,  5) [000310] -c----------       t310 = *  LEA(b+8)  byref 
                                                  /--*  t310   byref  
N007 (  7,  7) [000082] ---XGO------        t82 = *  IND       ref    <l:$267, c:$266>
                                                  /--*  t82    ref    
N009 (  7,  7) [000090] DA-XGO------              *  STORE_LCL_VAR ref    V14 tmp7         d:2

lowering store lcl var/field (after):
N001 (  1,  1) [000080] ------------        t80 =    LCL_VAR   ref    V00 this         u:1 $80
                                                  /--*  t80    ref    
N003 (  2,  2) [000312] -c----------       t312 = *  LEA(b+8)  byref 
                                                  /--*  t312   byref  
N004 (  4,  4) [000081] n---GO------        t81 = *  IND       ref    <l:$25d, c:$25c>
                                                  /--*  t81    ref    
N006 (  5,  5) [000310] -c----------       t310 = *  LEA(b+8)  byref 
                                                  /--*  t310   byref  
N007 (  7,  7) [000082] ---XGO------        t82 = *  IND       ref    <l:$267, c:$266>
                                                  /--*  t82    ref    
N009 (  7,  7) [000090] DA-XGO------              *  STORE_LCL_VAR ref    V14 tmp7         d:2

lowering call (before):
N002 (  1,  1) [000087] ------------        t87 =    LCL_VAR   ref    V13 tmp6         u:2 $259
                                                  /--*  t87    ref    this in rcx
N003 ( 15,  8) [000230] --CXG-------              *  CALL      void   System.Object..ctor $VN.Void

objp:
======
lowering arg : N001 (  0,  0) [000313] ----------L-              *  ARGPLACE  ref    $bd

args:
======

late:
======
lowering arg : N002 (  1,  1) [000087] ------------              *  LCL_VAR   ref    V13 tmp6         u:2 $259
new node is :                [000501] ------------              *  PUTARG_REG ref    REG rcx

lowering call (after):
N002 (  1,  1) [000087] ------------        t87 =    LCL_VAR   ref    V13 tmp6         u:2 $259
                                                  /--*  t87    ref    
               [000501] ------------       t501 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t501   ref    this in rcx
N003 ( 15,  8) [000230] --CXG-------              *  CALL      void   System.Object..ctor $VN.Void

Addressing mode:
  Base
    N001 (  1,  1) [000091] ------------              *  LCL_VAR   ref    V14 tmp7         u:2 (last use) <l:$25f, c:$b9>
  + 8
Removing unused node:
  N002 (  1,  1) [000314] -c----------              *  CNS_INT   long   8 field offset Fseq[Next] $280
New addressing mode node:
  N003 (  2,  2) [000315] ------------              *  LEA(b+8)  byref 

Addressing mode:
  Base
    N001 (  1,  1) [000095] ------------              *  LCL_VAR   ref    V00 this         u:1 $80
  + 8
Removing unused node:
  N002 (  1,  1) [000318] -c----------              *  CNS_INT   long   8 field offset Fseq[_myList] $280
New addressing mode node:
  N003 (  2,  2) [000319] ------------              *  LEA(b+8)  byref 

lowering store lcl var/field (before):
N001 (  1,  1) [000095] ------------        t95 =    LCL_VAR   ref    V00 this         u:1 $80
                                                  /--*  t95    ref    
N003 (  2,  2) [000319] -c----------       t319 = *  LEA(b+8)  byref 
                                                  /--*  t319   byref  
N004 (  4,  4) [000096] n---GO------        t96 = *  IND       ref    <l:$26d, c:$26c>
                                                  /--*  t96    ref    
N006 (  4,  4) [000414] DA--GO------              *  STORE_LCL_VAR ref    V28 cse1         d:1

lowering store lcl var/field (after):
N001 (  1,  1) [000095] ------------        t95 =    LCL_VAR   ref    V00 this         u:1 $80
                                                  /--*  t95    ref    
N003 (  2,  2) [000319] -c----------       t319 = *  LEA(b+8)  byref 
                                                  /--*  t319   byref  
N004 (  4,  4) [000096] n---GO------        t96 = *  IND       ref    <l:$26d, c:$26c>
                                                  /--*  t96    ref    
N006 (  4,  4) [000414] DA--GO------              *  STORE_LCL_VAR ref    V28 cse1         d:1

Addressing mode:
  Base
    N012 (  1,  1) [000417] ------------              *  LCL_VAR   ref    V28 cse1         u:1 <l:$26b, c:$bf>
  + 8
Removing unused node:
  N013 (  1,  1) [000322] -c----------              *  CNS_INT   long   8 field offset Fseq[Head] $280
New addressing mode node:
  N014 (  2,  2) [000323] ------------              *  LEA(b+8)  byref 

Addressing mode:
  Base
    N015 (  4,  4) [000099] ---XG-------              *  IND       ref    <l:$278, c:$277>
  + 8
Removing unused node:
  N016 (  1,  1) [000320] -c----------              *  CNS_INT   long   8 field offset Fseq[Next] $280
New addressing mode node:
  N017 (  5,  5) [000321] ------------              *  LEA(b+8)  byref 

lowering store lcl var/field (before):
N012 (  1,  1) [000417] ------------       t417 =    LCL_VAR   ref    V28 cse1         u:1 <l:$26b, c:$bf>
                                                  /--*  t417   ref    
N014 (  2,  2) [000323] -c----------       t323 = *  LEA(b+8)  byref 
                                                  /--*  t323   byref  
N015 (  4,  4) [000099] ---XG-------        t99 = *  IND       ref    <l:$278, c:$277>
                                                  /--*  t99    ref    
N017 (  5,  5) [000321] -c----------       t321 = *  LEA(b+8)  byref 
                                                  /--*  t321   byref  
N018 (  7,  7) [000100] ---XG-------       t100 = *  IND       ref    <l:$403, c:$402>
                                                  /--*  t100   ref    
N020 (  7,  7) [000409] DA-XG-------              *  STORE_LCL_VAR ref    V27 cse0         d:1

lowering store lcl var/field (after):
N012 (  1,  1) [000417] ------------       t417 =    LCL_VAR   ref    V28 cse1         u:1 <l:$26b, c:$bf>
                                                  /--*  t417   ref    
N014 (  2,  2) [000323] -c----------       t323 = *  LEA(b+8)  byref 
                                                  /--*  t323   byref  
N015 (  4,  4) [000099] ---XG-------        t99 = *  IND       ref    <l:$278, c:$277>
                                                  /--*  t99    ref    
N017 (  5,  5) [000321] -c----------       t321 = *  LEA(b+8)  byref 
                                                  /--*  t321   byref  
N018 (  7,  7) [000100] ---XG-------       t100 = *  IND       ref    <l:$403, c:$402>
                                                  /--*  t100   ref    
N020 (  7,  7) [000409] DA-XG-------              *  STORE_LCL_VAR ref    V27 cse0         d:1

Addressing mode:
  Base
    N007 (  1,  1) [000415] ------------              *  LCL_VAR   ref    V28 cse1         u:1 <l:$26d, c:$26c>
  + 8
Removing unused node:
  N009 (  1,  1) [000316] -c----------              *  CNS_INT   long   8 field offset Fseq[Head] $280
New addressing mode node:
  N010 (  6,  6) [000317] ------------              *  LEA(b+8)  byref 

lowering call (before):
N002 (  2, 10) [000106] H-----------       t106 =    CNS_INT(h) long   0x7ffdb3b058b8 token $1c3
                                                  /--*  t106   long   arg0 in rcx
N003 ( 16, 16) [000107] --C---------       t107 = *  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST $404

objp:
======

args:
======
lowering arg : N001 (  0,  0) [000326] ----------L-              *  ARGPLACE  long   $1c3

late:
======
lowering arg : N002 (  2, 10) [000106] H-----------              *  CNS_INT(h) long   0x7ffdb3b058b8 token $1c3
new node is :                [000502] ------------              *  PUTARG_REG long   REG rcx

lowering call (after):
N002 (  2, 10) [000106] H-----------       t106 =    CNS_INT(h) long   0x7ffdb3b058b8 token $1c3
                                                  /--*  t106   long   
               [000502] ------------       t502 = *  PUTARG_REG long   REG rcx
                                                  /--*  t502   long   arg0 in rcx
N003 ( 16, 16) [000107] --C---------       t107 = *  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST $404

lowering store lcl var/field (before):
N002 (  2, 10) [000106] H-----------       t106 =    CNS_INT(h) long   0x7ffdb3b058b8 token $1c3
                                                  /--*  t106   long   
               [000502] ------------       t502 = *  PUTARG_REG long   REG rcx
                                                  /--*  t502   long   arg0 in rcx
N003 ( 16, 16) [000107] --C---------       t107 = *  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST $404
                                                  /--*  t107   ref    
N005 ( 16, 16) [000109] DA----------              *  STORE_LCL_VAR ref    V15 tmp8         d:2

lowering store lcl var/field (after):
N002 (  2, 10) [000106] H-----------       t106 =    CNS_INT(h) long   0x7ffdb3b058b8 token $1c3
                                                  /--*  t106   long   
               [000502] ------------       t502 = *  PUTARG_REG long   REG rcx
                                                  /--*  t502   long   arg0 in rcx
N003 ( 16, 16) [000107] --C---------       t107 = *  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST $404
                                                  /--*  t107   ref    
N005 ( 16, 16) [000109] DA----------              *  STORE_LCL_VAR ref    V15 tmp8         d:2

lowering store lcl var/field (before):
N001 (  1,  1) [000412] ------------       t412 =    LCL_VAR   ref    V27 cse0         u:1 <l:$279, c:$3c4>
                                                  /--*  t412   ref    
N003 (  1,  3) [000113] DA--G-------              *  STORE_LCL_VAR ref    V16 tmp9         d:2

lowering store lcl var/field (after):
N001 (  1,  1) [000412] ------------       t412 =    LCL_VAR   ref    V27 cse0         u:1 <l:$279, c:$3c4>
                                                  /--*  t412   ref    
N003 (  1,  3) [000113] DA--G-------              *  STORE_LCL_VAR ref    V16 tmp9         d:2

lowering call (before):
N002 (  1,  1) [000110] ------------       t110 =    LCL_VAR   ref    V15 tmp8         u:2 $404
                                                  /--*  t110   ref    this in rcx
N003 ( 15,  8) [000111] --CXG-------              *  CALL      void   System.Object..ctor $VN.Void

objp:
======
lowering arg : N001 (  0,  0) [000331] ----------L-              *  ARGPLACE  ref    $3cd

args:
======

late:
======
lowering arg : N002 (  1,  1) [000110] ------------              *  LCL_VAR   ref    V15 tmp8         u:2 $404
new node is :                [000503] ------------              *  PUTARG_REG ref    REG rcx

lowering call (after):
N002 (  1,  1) [000110] ------------       t110 =    LCL_VAR   ref    V15 tmp8         u:2 $404
                                                  /--*  t110   ref    
               [000503] ------------       t503 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t503   ref    this in rcx
N003 ( 15,  8) [000111] --CXG-------              *  CALL      void   System.Object..ctor $VN.Void

Addressing mode:
  Base
    N001 (  1,  1) [000114] ------------              *  LCL_VAR   ref    V16 tmp9         u:2 (last use) <l:$279, c:$3ca>
  + 16
Removing unused node:
  N002 (  1,  1) [000332] -c----------              *  CNS_INT   long   16 field offset Fseq[Data] $281
New addressing mode node:
  N003 (  2,  2) [000333] ------------              *  LEA(b+16) byref 

lowering call (before):
N002 (  1,  1) [000259] ------------       t259 =    LCL_VAR   ref    V04 loc2         u:3 (last use) <l:$256, c:$b2>
                                                  /--*  t259   ref    arg0 in rcx
N003 ( 15,  7) [000258] --CXG-------              *  CALL      void   System.Threading.Monitor.Exit $VN.Void

objp:
======

args:
======
lowering arg : N001 (  0,  0) [000335] ----------L-              *  ARGPLACE  ref    <l:$256, c:$b2>

late:
======
lowering arg : N002 (  1,  1) [000259] ------------              *  LCL_VAR   ref    V04 loc2         u:3 (last use) <l:$256, c:$b2>
new node is :                [000504] ------------              *  PUTARG_REG ref    REG rcx

lowering call (after):
N002 (  1,  1) [000259] ------------       t259 =    LCL_VAR   ref    V04 loc2         u:3 (last use) <l:$256, c:$b2>
                                                  /--*  t259   ref    
               [000504] ------------       t504 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t504   ref    arg0 in rcx
N003 ( 15,  7) [000258] --CXG-------              *  CALL      void   System.Threading.Monitor.Exit $VN.Void

lowering store lcl var/field (before):
N001 (  1,  1) [000118] ------------       t118 =    LCL_VAR   int    V03 loc1         u:3 (last use) $380
N002 (  1,  1) [000119] -c----------       t119 =    CNS_INT   int    1 $4e
                                                  /--*  t118   int    
                                                  +--*  t119   int    
N003 (  3,  3) [000120] ------------       t120 = *  ADD       int    $345
                                                  /--*  t120   int    
N005 (  3,  3) [000122] DA----------              *  STORE_LCL_VAR int    V03 loc1         d:4

lowering store lcl var/field (after):
N001 (  1,  1) [000118] ------------       t118 =    LCL_VAR   int    V03 loc1         u:3 (last use) $380
N002 (  1,  1) [000119] -c----------       t119 =    CNS_INT   int    1 $4e
                                                  /--*  t118   int    
                                                  +--*  t119   int    
N003 (  3,  3) [000120] ------------       t120 = *  ADD       int    $345
                                                  /--*  t120   int    
N005 (  3,  3) [000122] DA----------              *  STORE_LCL_VAR int    V03 loc1         d:4

lowering call (before):
N001 ( 14,  5) [000130] --CXG-------       t130 =    CALL      struct System.DateTime.get_Now $c4

objp:
======

args:
======

late:
======
lowering call (after):
N001 ( 14,  5) [000130] --CXG-------       t130 =    CALL      long   System.DateTime.get_Now $c4

lowering store lcl var/field (before):
N001 ( 14,  5) [000130] --CXG-------       t130 =    CALL      long   System.DateTime.get_Now $c4
                                                  /--*  t130   long   
N003 ( 18,  8) [000133] DA-XG-------              *  STORE_LCL_VAR struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  *    long   V02._dateData (offs=0x00) -> V17 tmp10        

lowering store lcl var/field (after):
N001 ( 14,  5) [000130] --CXG-------       t130 =    CALL      long   System.DateTime.get_Now $c4
                                                  /--*  t130   long   
N003 ( 18,  8) [000133] DA-XG-------              *  STORE_LCL_VAR struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  *    long   V02._dateData (offs=0x00) -> V17 tmp10        


Local V02 should not be enregistered because: written in a block op
lowering call (before):
N003 (  3,  2) [000134] -------N----       t134 =    LCL_VAR_ADDR byref  V02 loc0         
                                                  *    long   V02._dateData (offs=0x00) -> V17 tmp10        
                                                  /--*  t134   byref  this in rcx
N005 ( 17, 10) [000136] --CXG-------       t136 = *  CALL      ref    System.DateTime.ToString $3d5

objp:
======
lowering arg : N002 (  0,  0) [000338] ----------L-              *  ARGPLACE  byref  $144

args:
======

late:
======
lowering arg : N003 (  3,  2) [000134] -------N----              *  LCL_VAR_ADDR byref  V02 loc0         
                                                  *    long   V02._dateData (offs=0x00) -> V17 tmp10        
new node is :                [000505] ------------              *  PUTARG_REG byref  REG rcx

lowering call (after):
N003 (  3,  2) [000134] -------N----       t134 =    LCL_VAR_ADDR byref  V02 loc0         
                                                  *    long   V02._dateData (offs=0x00) -> V17 tmp10        
                                                  /--*  t134   byref  
               [000505] ------------       t505 = *  PUTARG_REG byref  REG rcx
                                                  /--*  t505   byref  this in rcx
N005 ( 17, 10) [000136] --CXG-------       t136 = *  CALL      ref    System.DateTime.ToString $3d5

lowering store lcl var/field (before):
N003 (  3,  2) [000134] -------N----       t134 =    LCL_VAR_ADDR byref  V02 loc0         
                                                  *    long   V02._dateData (offs=0x00) -> V17 tmp10        
                                                  /--*  t134   byref  
               [000505] ------------       t505 = *  PUTARG_REG byref  REG rcx
                                                  /--*  t505   byref  this in rcx
N005 ( 17, 10) [000136] --CXG-------       t136 = *  CALL      ref    System.DateTime.ToString $3d5
                                                  /--*  t136   ref    
N007 ( 17, 10) [000342] DA-XG-----L-              *  STORE_LCL_VAR ref    V23 tmp16        d:2

lowering store lcl var/field (after):
N003 (  3,  2) [000134] -------N----       t134 =    LCL_VAR_ADDR byref  V02 loc0         
                                                  *    long   V02._dateData (offs=0x00) -> V17 tmp10        
                                                  /--*  t134   byref  
               [000505] ------------       t505 = *  PUTARG_REG byref  REG rcx
                                                  /--*  t505   byref  this in rcx
N005 ( 17, 10) [000136] --CXG-------       t136 = *  CALL      ref    System.DateTime.ToString $3d5
                                                  /--*  t136   ref    
N007 ( 17, 10) [000342] DA-XG-----L-              *  STORE_LCL_VAR ref    V23 tmp16        d:2

lowering call (before):
N003 (  3,  2) [000134] -------N----       t134 =    LCL_VAR_ADDR byref  V02 loc0         
                                                  *    long   V02._dateData (offs=0x00) -> V17 tmp10        
                                                  /--*  t134   byref  
               [000505] ------------       t505 = *  PUTARG_REG byref  REG rcx
                                                  /--*  t505   byref  this in rcx
N005 ( 17, 10) [000136] --CXG-------       t136 = *  CALL      ref    System.DateTime.ToString $3d5
                                                  /--*  t136   ref    
N007 ( 17, 10) [000342] DA-XG-----L-              *  STORE_LCL_VAR ref    V23 tmp16        d:2
N009 (  1,  1) [000343] ------------       t343 =    LCL_VAR   ref    V23 tmp16        u:2 (last use) $3d5
N010 (  2, 10) [000339] H-----------       t339 =    CNS_INT(h) long   0x75003200 "	 Waiting for list processing to complete..." $1cf
                                                  /--*  t339   long   
N011 (  4, 12) [000340] #---G-------       t340 = *  IND       ref    $3d9
                                                  /--*  t343   ref    arg0 in rcx
                                                  +--*  t340   ref    arg1 in rdx
N012 ( 39, 30) [000138] --CXG-------       t138 = *  CALL      ref    System.String.Concat $3da

objp:
======

args:
======
lowering arg : N007 ( 17, 10) [000342] DA-XG-----L-              *  STORE_LCL_VAR ref    V23 tmp16        d:2
lowering arg : N008 (  0,  0) [000344] ----------L-              *  ARGPLACE  ref    $3d9

late:
======
lowering arg : N009 (  1,  1) [000343] ------------              *  LCL_VAR   ref    V23 tmp16        u:2 (last use) $3d5
new node is :                [000506] ------------              *  PUTARG_REG ref    REG rcx

lowering arg : N011 (  4, 12) [000340] #---G-------              *  IND       ref    $3d9
new node is :                [000507] ----G-------              *  PUTARG_REG ref    REG rdx

lowering call (after):
N003 (  3,  2) [000134] -------N----       t134 =    LCL_VAR_ADDR byref  V02 loc0         
                                                  *    long   V02._dateData (offs=0x00) -> V17 tmp10        
                                                  /--*  t134   byref  
               [000505] ------------       t505 = *  PUTARG_REG byref  REG rcx
                                                  /--*  t505   byref  this in rcx
N005 ( 17, 10) [000136] --CXG-------       t136 = *  CALL      ref    System.DateTime.ToString $3d5
                                                  /--*  t136   ref    
N007 ( 17, 10) [000342] DA-XG-----L-              *  STORE_LCL_VAR ref    V23 tmp16        d:2
N009 (  1,  1) [000343] ------------       t343 =    LCL_VAR   ref    V23 tmp16        u:2 (last use) $3d5
                                                  /--*  t343   ref    
               [000506] ------------       t506 = *  PUTARG_REG ref    REG rcx
N010 (  2, 10) [000339] H-----------       t339 =    CNS_INT(h) long   0x75003200 "	 Waiting for list processing to complete..." $1cf
                                                  /--*  t339   long   
N011 (  4, 12) [000340] #---G-------       t340 = *  IND       ref    $3d9
                                                  /--*  t340   ref    
               [000507] ----G-------       t507 = *  PUTARG_REG ref    REG rdx
                                                  /--*  t506   ref    arg0 in rcx
                                                  +--*  t507   ref    arg1 in rdx
N012 ( 39, 30) [000138] --CXG-------       t138 = *  CALL      ref    System.String.Concat $3da

lowering call (before):
N003 (  3,  2) [000134] -------N----       t134 =    LCL_VAR_ADDR byref  V02 loc0         
                                                  *    long   V02._dateData (offs=0x00) -> V17 tmp10        
                                                  /--*  t134   byref  
               [000505] ------------       t505 = *  PUTARG_REG byref  REG rcx
                                                  /--*  t505   byref  this in rcx
N005 ( 17, 10) [000136] --CXG-------       t136 = *  CALL      ref    System.DateTime.ToString $3d5
                                                  /--*  t136   ref    
N007 ( 17, 10) [000342] DA-XG-----L-              *  STORE_LCL_VAR ref    V23 tmp16        d:2
N009 (  1,  1) [000343] ------------       t343 =    LCL_VAR   ref    V23 tmp16        u:2 (last use) $3d5
                                                  /--*  t343   ref    
               [000506] ------------       t506 = *  PUTARG_REG ref    REG rcx
N010 (  2, 10) [000339] H-----------       t339 =    CNS_INT(h) long   0x75003200 "	 Waiting for list processing to complete..." $1cf
                                                  /--*  t339   long   
N011 (  4, 12) [000340] #---G-------       t340 = *  IND       ref    $3d9
                                                  /--*  t340   ref    
               [000507] ----G-------       t507 = *  PUTARG_REG ref    REG rdx
                                                  /--*  t506   ref    arg0 in rcx
                                                  +--*  t507   ref    arg1 in rdx
N012 ( 39, 30) [000138] --CXG-------       t138 = *  CALL      ref    System.String.Concat $3da
                                                  /--*  t138   ref    arg0 in rcx
N013 ( 53, 36) [000139] --CXG-------              *  CALL      void   System.Console.WriteLine $VN.Void

objp:
======

args:
======
lowering arg : N001 (  0,  0) [000345] ----------L-              *  ARGPLACE  ref    $3da

late:
======
lowering arg : N012 ( 39, 30) [000138] --CXG-------              *  CALL      ref    System.String.Concat $3da
new node is :                [000508] --CXG-------              *  PUTARG_REG ref    REG rcx

lowering call (after):
N003 (  3,  2) [000134] -------N----       t134 =    LCL_VAR_ADDR byref  V02 loc0         
                                                  *    long   V02._dateData (offs=0x00) -> V17 tmp10        
                                                  /--*  t134   byref  
               [000505] ------------       t505 = *  PUTARG_REG byref  REG rcx
                                                  /--*  t505   byref  this in rcx
N005 ( 17, 10) [000136] --CXG-------       t136 = *  CALL      ref    System.DateTime.ToString $3d5
                                                  /--*  t136   ref    
N007 ( 17, 10) [000342] DA-XG-----L-              *  STORE_LCL_VAR ref    V23 tmp16        d:2
N009 (  1,  1) [000343] ------------       t343 =    LCL_VAR   ref    V23 tmp16        u:2 (last use) $3d5
                                                  /--*  t343   ref    
               [000506] ------------       t506 = *  PUTARG_REG ref    REG rcx
N010 (  2, 10) [000339] H-----------       t339 =    CNS_INT(h) long   0x75003200 "	 Waiting for list processing to complete..." $1cf
                                                  /--*  t339   long   
N011 (  4, 12) [000340] #---G-------       t340 = *  IND       ref    $3d9
                                                  /--*  t340   ref    
               [000507] ----G-------       t507 = *  PUTARG_REG ref    REG rdx
                                                  /--*  t506   ref    arg0 in rcx
                                                  +--*  t507   ref    arg1 in rdx
N012 ( 39, 30) [000138] --CXG-------       t138 = *  CALL      ref    System.String.Concat $3da
                                                  /--*  t138   ref    
               [000508] --CXG-------       t508 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t508   ref    arg0 in rcx
N013 ( 53, 36) [000139] --CXG-------              *  CALL      void   System.Console.WriteLine $VN.Void

Addressing mode:
  Base
    N001 (  1,  1) [000140] ------------              *  LCL_VAR   ref    V00 this         u:1 $80
  + 8
Removing unused node:
  N002 (  1,  1) [000346] -c----------              *  CNS_INT   long   8 field offset Fseq[_myList] $280
New addressing mode node:
  N003 (  2,  2) [000347] ------------              *  LEA(b+8)  byref 

lowering store lcl var/field (before):
N001 (  1,  1) [000140] ------------       t140 =    LCL_VAR   ref    V00 this         u:1 $80
                                                  /--*  t140   ref    
N003 (  2,  2) [000347] -c----------       t347 = *  LEA(b+8)  byref 
                                                  /--*  t347   byref  
N004 (  4,  4) [000141] n---GO------       t141 = *  IND       ref    <l:$41c, c:$41b>
                                                  /--*  t141   ref    
N006 (  8,  7) [000143] DA--GO------              *  STORE_LCL_VAR ref    V04 loc2         d:2

lowering store lcl var/field (after):
N001 (  1,  1) [000140] ------------       t140 =    LCL_VAR   ref    V00 this         u:1 $80
                                                  /--*  t140   ref    
N003 (  2,  2) [000347] -c----------       t347 = *  LEA(b+8)  byref 
                                                  /--*  t347   byref  
N004 (  4,  4) [000141] n---GO------       t141 = *  IND       ref    <l:$41c, c:$41b>
                                                  /--*  t141   ref    
N006 (  8,  7) [000143] DA--GO------              *  STORE_LCL_VAR ref    V04 loc2         d:2

lowering store lcl var/field (before):
N001 (  1,  1) [000144] ------------       t144 =    CNS_INT   int    0 $40
                                                  /--*  t144   int    
N003 (  5,  4) [000146] DA--G-------              *  STORE_LCL_VAR int   (AX) V05 loc3         

lowering store lcl var/field (after):
N001 (  1,  1) [000144] ------------       t144 =    CNS_INT   int    0 $40
                                                  /--*  t144   int    
N003 (  5,  4) [000146] DA--G-------              *  STORE_LCL_VAR int   (AX) V05 loc3         


Local V05 should not be enregistered because: written in a block op
lowering call (before):
N003 (  3,  3) [000149] ------------       t149 =    LCL_VAR_ADDR long   V05 loc3          $20a
N004 (  1,  1) [000147] ------------       t147 =    LCL_VAR   ref    V04 loc2         u:2 <l:$41a, c:$3df>
                                                  /--*  t149   long   arg1 in rdx
                                                  +--*  t147   ref    arg0 in rcx
N005 ( 18, 11) [000150] --CXG-------              *  CALL      void   System.Threading.Monitor.Enter $VN.Void

objp:
======

args:
======
lowering arg : N001 (  0,  0) [000349] ----------L-              *  ARGPLACE  ref    <l:$41a, c:$3df>
lowering arg : N002 (  0,  0) [000348] ----------L-              *  ARGPLACE  long   $20a

late:
======
lowering arg : N003 (  3,  3) [000149] ------------              *  LCL_VAR_ADDR long   V05 loc3          $20a
new node is :                [000509] ------------              *  PUTARG_REG long   REG rdx

lowering arg : N004 (  1,  1) [000147] ------------              *  LCL_VAR   ref    V04 loc2         u:2 <l:$41a, c:$3df>
new node is :                [000510] ------------              *  PUTARG_REG ref    REG rcx

lowering call (after):
N003 (  3,  3) [000149] ------------       t149 =    LCL_VAR_ADDR long   V05 loc3          $20a
                                                  /--*  t149   long   
               [000509] ------------       t509 = *  PUTARG_REG long   REG rdx
N004 (  1,  1) [000147] ------------       t147 =    LCL_VAR   ref    V04 loc2         u:2 <l:$41a, c:$3df>
                                                  /--*  t147   ref    
               [000510] ------------       t510 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t509   long   arg1 in rdx
                                                  +--*  t510   ref    arg0 in rcx
N005 ( 18, 11) [000150] --CXG-------              *  CALL      void   System.Threading.Monitor.Enter $VN.Void

Addressing mode:
  Base
    N001 (  1,  1) [000151] ------------              *  LCL_VAR   ref    V00 this         u:1 $80
  + 8
Removing unused node:
  N002 (  1,  1) [000352] -c----------              *  CNS_INT   long   8 field offset Fseq[_myList] $280
New addressing mode node:
  N003 (  2,  2) [000353] ------------              *  LEA(b+8)  byref 

lowering store lcl var/field (before):
N001 (  1,  1) [000151] ------------       t151 =    LCL_VAR   ref    V00 this         u:1 $80
                                                  /--*  t151   ref    
N003 (  2,  2) [000353] -c----------       t353 = *  LEA(b+8)  byref 
                                                  /--*  t353   byref  
N004 (  4,  4) [000152] n---GO------       t152 = *  IND       ref    <l:$420, c:$41f>
                                                  /--*  t152   ref    
N006 (  4,  4) [000419] DA--GO------              *  STORE_LCL_VAR ref    V29 cse2         d:1

lowering store lcl var/field (after):
N001 (  1,  1) [000151] ------------       t151 =    LCL_VAR   ref    V00 this         u:1 $80
                                                  /--*  t151   ref    
N003 (  2,  2) [000353] -c----------       t353 = *  LEA(b+8)  byref 
                                                  /--*  t353   byref  
N004 (  4,  4) [000152] n---GO------       t152 = *  IND       ref    <l:$420, c:$41f>
                                                  /--*  t152   ref    
N006 (  4,  4) [000419] DA--GO------              *  STORE_LCL_VAR ref    V29 cse2         d:1

Addressing mode:
  Base
    N007 (  1,  1) [000420] ------------              *  LCL_VAR   ref    V29 cse2         u:1 <l:$420, c:$41f>
  + 8
Removing unused node:
  N009 (  1,  1) [000350] -c----------              *  CNS_INT   long   8 field offset Fseq[Head] $280
New addressing mode node:
  N010 (  6,  6) [000351] ------------              *  LEA(b+8)  byref 

Addressing mode:
  Base
    N012 (  1,  1) [000422] ------------              *  LCL_VAR   ref    V29 cse2         u:1 <l:$41e, c:$3e3>
  + 16
Removing unused node:
  N013 (  1,  1) [000354] -c----------              *  CNS_INT   long   16 field offset Fseq[Tail] $281
New addressing mode node:
  N014 (  2,  2) [000355] ------------              *  LEA(b+16) byref 

lowering call (before):
N002 (  1,  1) [000266] ------------       t266 =    LCL_VAR   ref    V04 loc2         u:2 (last use) <l:$41a, c:$3df>
                                                  /--*  t266   ref    arg0 in rcx
N003 ( 15,  7) [000265] --CXG-------              *  CALL      void   System.Threading.Monitor.Exit $VN.Void

objp:
======

args:
======
lowering arg : N001 (  0,  0) [000359] ----------L-              *  ARGPLACE  ref    <l:$41a, c:$3df>

late:
======
lowering arg : N002 (  1,  1) [000266] ------------              *  LCL_VAR   ref    V04 loc2         u:2 (last use) <l:$41a, c:$3df>
new node is :                [000511] ------------              *  PUTARG_REG ref    REG rcx

lowering call (after):
N002 (  1,  1) [000266] ------------       t266 =    LCL_VAR   ref    V04 loc2         u:2 (last use) <l:$41a, c:$3df>
                                                  /--*  t266   ref    
               [000511] ------------       t511 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t511   ref    arg0 in rcx
N003 ( 15,  7) [000265] --CXG-------              *  CALL      void   System.Threading.Monitor.Exit $VN.Void

lowering call (before):
N002 (  1,  1) [000159] ------------       t159 =    CNS_INT   int    100 $5b
                                                  /--*  t159   int    arg0 in rcx
N003 ( 15,  7) [000160] --CXG-------              *  CALL      void   System.Threading.Thread.Sleep $VN.Void

objp:
======

args:
======
lowering arg : N001 (  0,  0) [000362] ----------L-              *  ARGPLACE  int    $5b

late:
======
lowering arg : N002 (  1,  1) [000159] ------------              *  CNS_INT   int    100 $5b
new node is :                [000512] ------------              *  PUTARG_REG int    REG rcx

lowering call (after):
N002 (  1,  1) [000159] ------------       t159 =    CNS_INT   int    100 $5b
                                                  /--*  t159   int    
               [000512] ------------       t512 = *  PUTARG_REG int    REG rcx
                                                  /--*  t512   int    arg0 in rcx
N003 ( 15,  7) [000160] --CXG-------              *  CALL      void   System.Threading.Thread.Sleep $VN.Void

lowering call (before):
N001 ( 14,  5) [000161] --CXG-------       t161 =    CALL      struct System.DateTime.get_Now $c6

objp:
======

args:
======

late:
======
lowering call (after):
N001 ( 14,  5) [000161] --CXG-------       t161 =    CALL      long   System.DateTime.get_Now $c6

lowering store lcl var/field (before):
N001 ( 14,  5) [000161] --CXG-------       t161 =    CALL      long   System.DateTime.get_Now $c6
                                                  /--*  t161   long   
N003 ( 18,  8) [000164] DA-XG-------              *  STORE_LCL_VAR struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  *    long   V02._dateData (offs=0x00) -> V17 tmp10        

lowering store lcl var/field (after):
N001 ( 14,  5) [000161] --CXG-------       t161 =    CALL      long   System.DateTime.get_Now $c6
                                                  /--*  t161   long   
N003 ( 18,  8) [000164] DA-XG-------              *  STORE_LCL_VAR struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  *    long   V02._dateData (offs=0x00) -> V17 tmp10        


Local V02 should not be enregistered because: written in a block op
lowering call (before):
N003 (  3,  2) [000165] -------N----       t165 =    LCL_VAR_ADDR byref  V02 loc0         
                                                  *    long   V02._dateData (offs=0x00) -> V17 tmp10        
                                                  /--*  t165   byref  this in rcx
N005 ( 17, 10) [000167] --CXG-------       t167 = *  CALL      ref    System.DateTime.ToString $3ef

objp:
======
lowering arg : N002 (  0,  0) [000363] ----------L-              *  ARGPLACE  byref  $146

args:
======

late:
======
lowering arg : N003 (  3,  2) [000165] -------N----              *  LCL_VAR_ADDR byref  V02 loc0         
                                                  *    long   V02._dateData (offs=0x00) -> V17 tmp10        
new node is :                [000513] ------------              *  PUTARG_REG byref  REG rcx

lowering call (after):
N003 (  3,  2) [000165] -------N----       t165 =    LCL_VAR_ADDR byref  V02 loc0         
                                                  *    long   V02._dateData (offs=0x00) -> V17 tmp10        
                                                  /--*  t165   byref  
               [000513] ------------       t513 = *  PUTARG_REG byref  REG rcx
                                                  /--*  t513   byref  this in rcx
N005 ( 17, 10) [000167] --CXG-------       t167 = *  CALL      ref    System.DateTime.ToString $3ef

lowering store lcl var/field (before):
N003 (  3,  2) [000165] -------N----       t165 =    LCL_VAR_ADDR byref  V02 loc0         
                                                  *    long   V02._dateData (offs=0x00) -> V17 tmp10        
                                                  /--*  t165   byref  
               [000513] ------------       t513 = *  PUTARG_REG byref  REG rcx
                                                  /--*  t513   byref  this in rcx
N005 ( 17, 10) [000167] --CXG-------       t167 = *  CALL      ref    System.DateTime.ToString $3ef
                                                  /--*  t167   ref    
N007 ( 17, 10) [000367] DA-XG-----L-              *  STORE_LCL_VAR ref    V24 tmp17        d:2

lowering store lcl var/field (after):
N003 (  3,  2) [000165] -------N----       t165 =    LCL_VAR_ADDR byref  V02 loc0         
                                                  *    long   V02._dateData (offs=0x00) -> V17 tmp10        
                                                  /--*  t165   byref  
               [000513] ------------       t513 = *  PUTARG_REG byref  REG rcx
                                                  /--*  t513   byref  this in rcx
N005 ( 17, 10) [000167] --CXG-------       t167 = *  CALL      ref    System.DateTime.ToString $3ef
                                                  /--*  t167   ref    
N007 ( 17, 10) [000367] DA-XG-----L-              *  STORE_LCL_VAR ref    V24 tmp17        d:2

lowering call (before):
N003 (  3,  2) [000165] -------N----       t165 =    LCL_VAR_ADDR byref  V02 loc0         
                                                  *    long   V02._dateData (offs=0x00) -> V17 tmp10        
                                                  /--*  t165   byref  
               [000513] ------------       t513 = *  PUTARG_REG byref  REG rcx
                                                  /--*  t513   byref  this in rcx
N005 ( 17, 10) [000167] --CXG-------       t167 = *  CALL      ref    System.DateTime.ToString $3ef
                                                  /--*  t167   ref    
N007 ( 17, 10) [000367] DA-XG-----L-              *  STORE_LCL_VAR ref    V24 tmp17        d:2
N009 (  1,  1) [000368] ------------       t368 =    LCL_VAR   ref    V24 tmp17        u:2 (last use) $3ef
N010 (  2, 10) [000364] H-----------       t364 =    CNS_INT(h) long   0x75003208 "	 Done.  Profiler is active, available options:" $1d3
                                                  /--*  t364   long   
N011 (  4, 12) [000365] #---G-------       t365 = *  IND       ref    $3f3
                                                  /--*  t368   ref    arg0 in rcx
                                                  +--*  t365   ref    arg1 in rdx
N012 ( 39, 30) [000169] --CXG-------       t169 = *  CALL      ref    System.String.Concat $3f4

objp:
======

args:
======
lowering arg : N007 ( 17, 10) [000367] DA-XG-----L-              *  STORE_LCL_VAR ref    V24 tmp17        d:2
lowering arg : N008 (  0,  0) [000369] ----------L-              *  ARGPLACE  ref    $3f3

late:
======
lowering arg : N009 (  1,  1) [000368] ------------              *  LCL_VAR   ref    V24 tmp17        u:2 (last use) $3ef
new node is :                [000514] ------------              *  PUTARG_REG ref    REG rcx

lowering arg : N011 (  4, 12) [000365] #---G-------              *  IND       ref    $3f3
new node is :                [000515] ----G-------              *  PUTARG_REG ref    REG rdx

lowering call (after):
N003 (  3,  2) [000165] -------N----       t165 =    LCL_VAR_ADDR byref  V02 loc0         
                                                  *    long   V02._dateData (offs=0x00) -> V17 tmp10        
                                                  /--*  t165   byref  
               [000513] ------------       t513 = *  PUTARG_REG byref  REG rcx
                                                  /--*  t513   byref  this in rcx
N005 ( 17, 10) [000167] --CXG-------       t167 = *  CALL      ref    System.DateTime.ToString $3ef
                                                  /--*  t167   ref    
N007 ( 17, 10) [000367] DA-XG-----L-              *  STORE_LCL_VAR ref    V24 tmp17        d:2
N009 (  1,  1) [000368] ------------       t368 =    LCL_VAR   ref    V24 tmp17        u:2 (last use) $3ef
                                                  /--*  t368   ref    
               [000514] ------------       t514 = *  PUTARG_REG ref    REG rcx
N010 (  2, 10) [000364] H-----------       t364 =    CNS_INT(h) long   0x75003208 "	 Done.  Profiler is active, available options:" $1d3
                                                  /--*  t364   long   
N011 (  4, 12) [000365] #---G-------       t365 = *  IND       ref    $3f3
                                                  /--*  t365   ref    
               [000515] ----G-------       t515 = *  PUTARG_REG ref    REG rdx
                                                  /--*  t514   ref    arg0 in rcx
                                                  +--*  t515   ref    arg1 in rdx
N012 ( 39, 30) [000169] --CXG-------       t169 = *  CALL      ref    System.String.Concat $3f4

lowering call (before):
N003 (  3,  2) [000165] -------N----       t165 =    LCL_VAR_ADDR byref  V02 loc0         
                                                  *    long   V02._dateData (offs=0x00) -> V17 tmp10        
                                                  /--*  t165   byref  
               [000513] ------------       t513 = *  PUTARG_REG byref  REG rcx
                                                  /--*  t513   byref  this in rcx
N005 ( 17, 10) [000167] --CXG-------       t167 = *  CALL      ref    System.DateTime.ToString $3ef
                                                  /--*  t167   ref    
N007 ( 17, 10) [000367] DA-XG-----L-              *  STORE_LCL_VAR ref    V24 tmp17        d:2
N009 (  1,  1) [000368] ------------       t368 =    LCL_VAR   ref    V24 tmp17        u:2 (last use) $3ef
                                                  /--*  t368   ref    
               [000514] ------------       t514 = *  PUTARG_REG ref    REG rcx
N010 (  2, 10) [000364] H-----------       t364 =    CNS_INT(h) long   0x75003208 "	 Done.  Profiler is active, available options:" $1d3
                                                  /--*  t364   long   
N011 (  4, 12) [000365] #---G-------       t365 = *  IND       ref    $3f3
                                                  /--*  t365   ref    
               [000515] ----G-------       t515 = *  PUTARG_REG ref    REG rdx
                                                  /--*  t514   ref    arg0 in rcx
                                                  +--*  t515   ref    arg1 in rdx
N012 ( 39, 30) [000169] --CXG-------       t169 = *  CALL      ref    System.String.Concat $3f4
                                                  /--*  t169   ref    arg0 in rcx
N013 ( 53, 36) [000170] --CXG-------              *  CALL      void   System.Console.WriteLine $VN.Void

objp:
======

args:
======
lowering arg : N001 (  0,  0) [000370] ----------L-              *  ARGPLACE  ref    $3f4

late:
======
lowering arg : N012 ( 39, 30) [000169] --CXG-------              *  CALL      ref    System.String.Concat $3f4
new node is :                [000516] --CXG-------              *  PUTARG_REG ref    REG rcx

lowering call (after):
N003 (  3,  2) [000165] -------N----       t165 =    LCL_VAR_ADDR byref  V02 loc0         
                                                  *    long   V02._dateData (offs=0x00) -> V17 tmp10        
                                                  /--*  t165   byref  
               [000513] ------------       t513 = *  PUTARG_REG byref  REG rcx
                                                  /--*  t513   byref  this in rcx
N005 ( 17, 10) [000167] --CXG-------       t167 = *  CALL      ref    System.DateTime.ToString $3ef
                                                  /--*  t167   ref    
N007 ( 17, 10) [000367] DA-XG-----L-              *  STORE_LCL_VAR ref    V24 tmp17        d:2
N009 (  1,  1) [000368] ------------       t368 =    LCL_VAR   ref    V24 tmp17        u:2 (last use) $3ef
                                                  /--*  t368   ref    
               [000514] ------------       t514 = *  PUTARG_REG ref    REG rcx
N010 (  2, 10) [000364] H-----------       t364 =    CNS_INT(h) long   0x75003208 "	 Done.  Profiler is active, available options:" $1d3
                                                  /--*  t364   long   
N011 (  4, 12) [000365] #---G-------       t365 = *  IND       ref    $3f3
                                                  /--*  t365   ref    
               [000515] ----G-------       t515 = *  PUTARG_REG ref    REG rdx
                                                  /--*  t514   ref    arg0 in rcx
                                                  +--*  t515   ref    arg1 in rdx
N012 ( 39, 30) [000169] --CXG-------       t169 = *  CALL      ref    System.String.Concat $3f4
                                                  /--*  t169   ref    
               [000516] --CXG-------       t516 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t516   ref    arg0 in rcx
N013 ( 53, 36) [000170] --CXG-------              *  CALL      void   System.Console.WriteLine $VN.Void

lowering call (before):
N002 (  2, 10) [000371] H-----------       t371 =    CNS_INT(h) long   0x75003210 "   Q = quit" $1d4
                                                  /--*  t371   long   
N003 (  4, 12) [000372] #---G-------       t372 = *  IND       ref    $3f8
                                                  /--*  t372   ref    arg0 in rcx
N004 ( 18, 18) [000172] --CXG-------              *  CALL      void   System.Console.WriteLine $VN.Void

objp:
======

args:
======
lowering arg : N001 (  0,  0) [000373] ----------L-              *  ARGPLACE  ref    $3f8

late:
======
lowering arg : N003 (  4, 12) [000372] #---G-------              *  IND       ref    $3f8
new node is :                [000517] ----G-------              *  PUTARG_REG ref    REG rcx

lowering call (after):
N002 (  2, 10) [000371] H-----------       t371 =    CNS_INT(h) long   0x75003210 "   Q = quit" $1d4
                                                  /--*  t371   long   
N003 (  4, 12) [000372] #---G-------       t372 = *  IND       ref    $3f8
                                                  /--*  t372   ref    
               [000517] ----G-------       t517 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t517   ref    arg0 in rcx
N004 ( 18, 18) [000172] --CXG-------              *  CALL      void   System.Console.WriteLine $VN.Void

lowering call (before):
N002 (  2, 10) [000374] H-----------       t374 =    CNS_INT(h) long   0x75003218 "   H = heap snapshot" $1d5
                                                  /--*  t374   long   
N003 (  4, 12) [000375] #---G-------       t375 = *  IND       ref    $3fb
                                                  /--*  t375   ref    arg0 in rcx
N004 ( 18, 18) [000174] --CXG-------              *  CALL      void   System.Console.WriteLine $VN.Void

objp:
======

args:
======
lowering arg : N001 (  0,  0) [000376] ----------L-              *  ARGPLACE  ref    $3fb

late:
======
lowering arg : N003 (  4, 12) [000375] #---G-------              *  IND       ref    $3fb
new node is :                [000518] ----G-------              *  PUTARG_REG ref    REG rcx

lowering call (after):
N002 (  2, 10) [000374] H-----------       t374 =    CNS_INT(h) long   0x75003218 "   H = heap snapshot" $1d5
                                                  /--*  t374   long   
N003 (  4, 12) [000375] #---G-------       t375 = *  IND       ref    $3fb
                                                  /--*  t375   ref    
               [000518] ----G-------       t518 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t518   ref    arg0 in rcx
N004 ( 18, 18) [000174] --CXG-------              *  CALL      void   System.Console.WriteLine $VN.Void

lowering call (before):
N002 (  2, 10) [000377] H-----------       t377 =    CNS_INT(h) long   0x75003220 "   G = GC (max gen)" $1d6
                                                  /--*  t377   long   
N003 (  4, 12) [000378] #---G-------       t378 = *  IND       ref    $3fe
                                                  /--*  t378   ref    arg0 in rcx
N004 ( 18, 18) [000176] --CXG-------              *  CALL      void   System.Console.WriteLine $VN.Void

objp:
======

args:
======
lowering arg : N001 (  0,  0) [000379] ----------L-              *  ARGPLACE  ref    $3fe

late:
======
lowering arg : N003 (  4, 12) [000378] #---G-------              *  IND       ref    $3fe
new node is :                [000519] ----G-------              *  PUTARG_REG ref    REG rcx

lowering call (after):
N002 (  2, 10) [000377] H-----------       t377 =    CNS_INT(h) long   0x75003220 "   G = GC (max gen)" $1d6
                                                  /--*  t377   long   
N003 (  4, 12) [000378] #---G-------       t378 = *  IND       ref    $3fe
                                                  /--*  t378   ref    
               [000519] ----G-------       t519 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t519   ref    arg0 in rcx
N004 ( 18, 18) [000176] --CXG-------              *  CALL      void   System.Console.WriteLine $VN.Void

lowering call (before):
N002 (  2, 10) [000380] H-----------       t380 =    CNS_INT(h) long   0x75003228 "   R = clear the running flag to stop the consumer thread" $1d7
                                                  /--*  t380   long   
N003 (  4, 12) [000381] #---G-------       t381 = *  IND       ref    $4c1
                                                  /--*  t381   ref    arg0 in rcx
N004 ( 18, 18) [000178] --CXG-------              *  CALL      void   System.Console.WriteLine $VN.Void

objp:
======

args:
======
lowering arg : N001 (  0,  0) [000382] ----------L-              *  ARGPLACE  ref    $4c1

late:
======
lowering arg : N003 (  4, 12) [000381] #---G-------              *  IND       ref    $4c1
new node is :                [000520] ----G-------              *  PUTARG_REG ref    REG rcx

lowering call (after):
N002 (  2, 10) [000380] H-----------       t380 =    CNS_INT(h) long   0x75003228 "   R = clear the running flag to stop the consumer thread" $1d7
                                                  /--*  t380   long   
N003 (  4, 12) [000381] #---G-------       t381 = *  IND       ref    $4c1
                                                  /--*  t381   ref    
               [000520] ----G-------       t520 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t520   ref    arg0 in rcx
N004 ( 18, 18) [000178] --CXG-------              *  CALL      void   System.Console.WriteLine $VN.Void


Local V06 should not be enregistered because: written in a block op
lowering call (before):
N003 (  3,  2) [000236] -------N----       t236 =    LCL_VAR_ADDR byref  V06 loc4         
                                                  *    ushort V06._keyChar (offs=0x00) -> V18 tmp11        
                                                  *    int    V06._key (offs=0x04) -> V19 tmp12        
                                                  *    int    V06._mods (offs=0x08) -> V20 tmp13        
N005 (  1,  1) [000232] ------------       t232 =    CNS_INT   int    0 $40
                                                  /--*  t236   byref  arg0 in rcx
                                                  +--*  t232   int    arg1 in rdx
N006 ( 18, 11) [000233] S-CXG-------              *  CALL      void   System.ConsolePal.ReadKey $VN.Void

objp:
======

args:
======
lowering arg : N001 (  0,  0) [000383] ----------L-              *  ARGPLACE  long   $148
lowering arg : N002 (  0,  0) [000384] ----------L-              *  ARGPLACE  int    $40

late:
======
lowering arg : N003 (  3,  2) [000236] -------N----              *  LCL_VAR_ADDR byref  V06 loc4         
                                                  *    ushort V06._keyChar (offs=0x00) -> V18 tmp11        
                                                  *    int    V06._key (offs=0x04) -> V19 tmp12        
                                                  *    int    V06._mods (offs=0x08) -> V20 tmp13        
new node is :                [000521] ------------              *  PUTARG_REG byref  REG rcx

lowering arg : N005 (  1,  1) [000232] ------------              *  CNS_INT   int    0 $40
new node is :                [000522] ------------              *  PUTARG_REG int    REG rdx

lowering call (after):
N003 (  3,  2) [000236] -------N----       t236 =    LCL_VAR_ADDR byref  V06 loc4         
                                                  *    ushort V06._keyChar (offs=0x00) -> V18 tmp11        
                                                  *    int    V06._key (offs=0x04) -> V19 tmp12        
                                                  *    int    V06._mods (offs=0x08) -> V20 tmp13        
                                                  /--*  t236   byref  
               [000521] ------------       t521 = *  PUTARG_REG byref  REG rcx
N005 (  1,  1) [000232] ------------       t232 =    CNS_INT   int    0 $40
                                                  /--*  t232   int    
               [000522] ------------       t522 = *  PUTARG_REG int    REG rdx
                                                  /--*  t521   byref  arg0 in rcx
                                                  +--*  t522   int    arg1 in rdx
N006 ( 18, 11) [000233] S-CXG-------              *  CALL      void   System.ConsolePal.ReadKey $VN.Void

lowering call (before):
N002 ( 14,  5) [000221] --CXG-------       t221 =    CALL      int    System.GC.get_MaxGeneration $305

objp:
======

args:
======

late:
======
lowering call (after):
N002 ( 14,  5) [000221] --CXG-------       t221 =    CALL      int    System.GC.get_MaxGeneration $305

lowering call (before):
N002 ( 14,  5) [000221] --CXG-------       t221 =    CALL      int    System.GC.get_MaxGeneration $305
                                                  /--*  t221   int    arg0 in rcx
N003 ( 28, 11) [000222] --CXG-------              *  CALL      void   System.GC.Collect $VN.Void

objp:
======

args:
======
lowering arg : N001 (  0,  0) [000385] ----------L-              *  ARGPLACE  int    $305

late:
======
lowering arg : N002 ( 14,  5) [000221] --CXG-------              *  CALL      int    System.GC.get_MaxGeneration $305
new node is :                [000523] --CXG-------              *  PUTARG_REG int    REG rcx

lowering call (after):
N002 ( 14,  5) [000221] --CXG-------       t221 =    CALL      int    System.GC.get_MaxGeneration $305
                                                  /--*  t221   int    
               [000523] --CXG-------       t523 = *  PUTARG_REG int    REG rcx
                                                  /--*  t523   int    arg0 in rcx
N003 ( 28, 11) [000222] --CXG-------              *  CALL      void   System.GC.Collect $VN.Void

lowering call (before):
N001 ( 14,  5) [000220] --CXG-------                 CALL      void   System.Diagnostics.Debugger.Break $VN.Void

objp:
======

args:
======

late:
======
lowering call (after):
N001 ( 14,  5) [000220] --CXG-------                 CALL      void   System.Diagnostics.Debugger.Break $VN.Void

Addressing mode:
  Base
    N001 (  1,  1) [000216] ------------              *  LCL_VAR   ref    V00 this         u:1 $80
  + 16
Removing unused node:
  N002 (  1,  1) [000386] -c----------              *  CNS_INT   long   16 field offset Fseq[_running] $281
New addressing mode node:
  N003 (  2,  2) [000387] ------------              *  LEA(b+16) byref 

Lower of StoreInd didn't mark the node as self contained for reason: oper is not supported
N001 (  1,  1) [000216] ------------       t216 =    LCL_VAR   ref    V00 this         u:1 $80
                                                  /--*  t216   ref    
N003 (  2,  2) [000387] ------------       t387 = *  LEA(b+16) byref 
N005 (  1,  1) [000217] ------------       t217 =    CNS_INT   int    0 $40
                                                  /--*  t387   byref  
                                                  +--*  t217   int    
               [000468] -A--GO------              *  STOREIND  bool  
Addressing mode:
  Base
    N001 (  1,  1) [000211] ------------              *  LCL_VAR   ref    V00 this         u:1 (last use) $80
  + 16
Removing unused node:
  N002 (  1,  1) [000388] -c----------              *  CNS_INT   long   16 field offset Fseq[_running] $281
New addressing mode node:
  N003 (  2,  2) [000389] ------------              *  LEA(b+16) byref 

Lower of StoreInd didn't mark the node as self contained for reason: oper is not supported
N001 (  1,  1) [000211] ------------       t211 =    LCL_VAR   ref    V00 this         u:1 (last use) $80
                                                  /--*  t211   ref    
N003 (  2,  2) [000389] ------------       t389 = *  LEA(b+16) byref 
N005 (  1,  1) [000212] ------------       t212 =    CNS_INT   int    0 $40
                                                  /--*  t389   byref  
                                                  +--*  t212   int    
               [000470] -A--GO------              *  STOREIND  bool  
lowering GT_RETURN
N001 (  0,  0) [000215] ------------              *  RETURN    void   $442
============lowering call (before):
N002 (  1,  1) [000128] ------------       t128 =    LCL_VAR   ref    V04 loc2         u:3 (last use) <l:$256, c:$b2>
                                                  /--*  t128   ref    arg0 in rcx
N003 ( 15,  7) [000129] --CXG-------              *  CALL      void   System.Threading.Monitor.Exit $VN.Void

objp:
======

args:
======
lowering arg : N001 (  0,  0) [000337] ----------L-              *  ARGPLACE  ref    <l:$256, c:$b2>

late:
======
lowering arg : N002 (  1,  1) [000128] ------------              *  LCL_VAR   ref    V04 loc2         u:3 (last use) <l:$256, c:$b2>
new node is :                [000524] ------------              *  PUTARG_REG ref    REG rcx

lowering call (after):
N002 (  1,  1) [000128] ------------       t128 =    LCL_VAR   ref    V04 loc2         u:3 (last use) <l:$256, c:$b2>
                                                  /--*  t128   ref    
               [000524] ------------       t524 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t524   ref    arg0 in rcx
N003 ( 15,  7) [000129] --CXG-------              *  CALL      void   System.Threading.Monitor.Exit $VN.Void

lowering call (before):
N002 (  1,  1) [000228] ------------       t228 =    LCL_VAR   ref    V04 loc2         u:2 (last use) <l:$41a, c:$3df>
                                                  /--*  t228   ref    arg0 in rcx
N003 ( 15,  7) [000229] --CXG-------              *  CALL      void   System.Threading.Monitor.Exit $VN.Void

objp:
======

args:
======
lowering arg : N001 (  0,  0) [000361] ----------L-              *  ARGPLACE  ref    <l:$41a, c:$3df>

late:
======
lowering arg : N002 (  1,  1) [000228] ------------              *  LCL_VAR   ref    V04 loc2         u:2 (last use) <l:$41a, c:$3df>
new node is :                [000525] ------------              *  PUTARG_REG ref    REG rcx

lowering call (after):
N002 (  1,  1) [000228] ------------       t228 =    LCL_VAR   ref    V04 loc2         u:2 (last use) <l:$41a, c:$3df>
                                                  /--*  t228   ref    
               [000525] ------------       t525 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t525   ref    arg0 in rcx
N003 ( 15,  7) [000229] --CXG-------              *  CALL      void   System.Threading.Monitor.Exit $VN.Void

Lower has completed modifying nodes.

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..072)                                     i hascall gcsafe newobj LIR 
BB02 [0001]  2       BB01,BB06             8     0 [072..07B)                                     i Loop gcsafe bwd bwd-target LIR 
BB03 [0002]  1  0    BB02                  8     0 [07B..0CA)                 T0      try { }     keep i try hascall gcsafe newobj bwd LIR 
BB04 [0038]  1       BB03                  8     0 [0CA..0CD)-> BB06 ( cond )                     keep i gcsafe bwd LIR cfb 
BB05 [0039]  1       BB04                  4     0 [0CD..0D4)                                     i hascall gcsafe bwd LIR 
BB06 [0006]  2       BB04,BB05             8     0 [0D4..0DD)-> BB02 ( cond )                     i gcsafe bwd LIR 
BB07 [0008]  1       BB06                  1       [0DD..0F9)                                     i hascall gcsafe LIR 
BB08 [0009]  2       BB07,BB12             8     1 [0F9..102)                                     i Loop gcsafe bwd bwd-target LIR 
BB09 [0010]  1  1    BB08                  8     1 [102..122)-> BB13 ( cond ) T1      try { }     keep i try hascall gcsafe bwd LIR 
BB10 [0041]  1       BB09                  8     1 [126..129)-> BB12 ( cond )                     keep i gcsafe bwd LIR cfb 
BB11 [0042]  1       BB10                  4     1 [129..130)                                     i hascall gcsafe bwd LIR 
BB12 [0016]  2       BB10,BB11             8     1 [130..139)-> BB08 (always)                     i hascall gcsafe bwd LIR 
BB13 [0030]  1       BB09                  1       [???..???)-> BB30 (callf )                     i internal gcsafe LIR 
BB14 [0031]  1       BB32                  1       [???..???)-> BB15 (ALWAYS)                     i internal gcsafe LIR KEEP 
BB15 [0017]  1       BB14                  1       [139..17D)                                     i hascall gcsafe LIR 
BB19 [0018]  5       BB15,BB20,BB22,BB24,BB25   8     5 [17D..18F)-> BB21 ( cond )                     i Loop hascall gcsafe bwd bwd-target LIR 
BB20 [0019]  1       BB19                  8     5 [18F..19B)-> BB19 (always)                     i hascall gcsafe bwd LIR 
BB21 [0020]  1       BB19                  1     4 [19B..1A6)-> BB23 ( cond )                     i gcsafe bwd LIR 
BB22 [0021]  1       BB21                  1     4 [1A6..1AD)-> BB19 (always)                     i hascall gcsafe bwd LIR 
BB23 [0022]  1       BB21                  1     3 [1AD..1B8)-> BB25 ( cond )                     i gcsafe bwd LIR 
BB24 [0023]  1       BB23                  1     3 [1B8..1C1)-> BB19 (always)                     i gcsafe bwd LIR 
BB25 [0024]  1       BB23                  1     2 [1C1..1CC)-> BB19 ( cond )                     i gcsafe bwd LIR 
BB26 [0025]  1       BB25                  1       [1CC..1D4)        (return)                     i gcsafe LIR 
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ funclets follow
BB27 [0003]  1     0                       0       [0CA..0CD)-> BB29 ( cond )    H0 F fault {     keep i rare flet bwd LIR 
BB28 [0004]  1     0 BB27                  0       [0CD..0D3)                    H0               i rare hascall bwd LIR 
BB29 [0005]  2     0 BB27,BB28             0       [0D3..0D4)        (finret)    H0   }           i rare bwd LIR 
BB30 [0013]  2     1 BB13                  1       [126..129)-> BB32 ( cond )    H1 F finally {   keep i gcsafe flet bwd LIR 
BB31 [0014]  1     1 BB30                  1       [129..12F)                    H1               i hascall gcsafe bwd LIR 
BB32 [0015]  2     1 BB30,BB31             1       [12F..130)        (finret)    H1   }           i gcsafe bwd LIR 
-----------------------------------------------------------------------------------------------------------------------------------------

------------ BB01 [000..072), preds={} succs={BB02}
               [000425] ------------                 IL_OFFSET void   IL offset: 0x0
N001 ( 14,  5) [000000] --CXG-------         t0 =    CALL      long   System.DateTime.get_Now $c0
                                                  /--*  t0     long   
N003 ( 18,  8) [000003] DA-XG-------              *  STORE_LCL_VAR struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  *    long   V02._dateData (offs=0x00) -> V17 tmp10        
               [000426] ------------                 IL_OFFSET void   IL offset: 0x6
N003 (  3,  2) [000004] -------N----         t4 =    LCL_VAR_ADDR byref  V02 loc0         
                                                  *    long   V02._dateData (offs=0x00) -> V17 tmp10        
                                                  /--*  t4     byref  
               [000478] ------------       t478 = *  PUTARG_REG byref  REG rcx
                                                  /--*  t478   byref  this in rcx
N005 ( 17, 10) [000006] --CXG-------         t6 = *  CALL      ref    System.DateTime.ToString $84
                                                  /--*  t6     ref    
N007 ( 17, 10) [000272] DA-XG-----L-              *  STORE_LCL_VAR ref    V21 tmp14        d:2
N009 (  1,  1) [000273] ------------       t273 =    LCL_VAR   ref    V21 tmp14        u:2 (last use) $84
                                                  /--*  t273   ref    
               [000479] ------------       t479 = *  PUTARG_REG ref    REG rcx
N010 (  2, 10) [000269] H-----------       t269 =    CNS_INT(h) long   0x750031F0 "	 Created list" $1c0
                                                  /--*  t269   long   
N011 (  4, 12) [000270] #---G-------       t270 = *  IND       ref    $88
                                                  /--*  t270   ref    
               [000480] ----G-------       t480 = *  PUTARG_REG ref    REG rdx
                                                  /--*  t479   ref    arg0 in rcx
                                                  +--*  t480   ref    arg1 in rdx
N012 ( 39, 30) [000008] --CXG-------         t8 = *  CALL      ref    System.String.Concat $89
                                                  /--*  t8     ref    
               [000481] --CXG-------       t481 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t481   ref    arg0 in rcx
N013 ( 53, 36) [000009] --CXG-------              *  CALL      void   System.Console.WriteLine $VN.Void
               [000427] ------------                 IL_OFFSET void   IL offset: 0x1c
N002 (  2, 10) [000011] H-----------        t11 =    CNS_INT(h) long   0x7ffdb3ee2350 method $1c1
                                                  /--*  t11    long   
               [000482] ------------       t482 = *  PUTARG_REG long   REG rcx
                                                  /--*  t482   long   arg0 in rcx
N003 ( 16, 16) [000012] --C---------        t12 = *  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST $240
                                                  /--*  t12    ref    
N005 ( 16, 16) [000014] DA----------              *  STORE_LCL_VAR ref    V08 tmp1         d:2
N002 (  1,  1) [000015] ------------        t15 =    LCL_VAR   ref    V08 tmp1         u:2 $240
                                                  /--*  t15    ref    
               [000483] ------------       t483 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t483   ref    this in rcx
N003 ( 15,  8) [000016] --CXG-------              *  CALL      void   FalseLeakRepro.List..ctor $VN.Void
               [000428] ------------                 IL_OFFSET void   IL offset: 0x22
N001 (  1,  1) [000010] ------------        t10 =    LCL_VAR   ref    V00 this         u:1 $80
                                                  /--*  t10    ref    
N003 (  2,  2) [000279] ------------       t279 = *  LEA(b+8)  byref 
N005 (  1,  1) [000017] ------------        t17 =    LCL_VAR   ref    V08 tmp1         u:2 (last use) $240
                                                  /--*  t279   byref  
                                                  +--*  t17    ref    
               [000429] -A-XG-------              *  STOREIND  ref   
               [000430] ------------                 IL_OFFSET void   IL offset: 0x27
N002 (  2, 10) [000023] H-----------        t23 =    CNS_INT(h) long   0x7ffdb3b058b8 token $1c3
                                                  /--*  t23    long   
               [000484] ------------       t484 = *  PUTARG_REG long   REG rcx
                                                  /--*  t484   long   arg0 in rcx
N003 ( 16, 16) [000024] --C---------        t24 = *  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST $243
                                                  /--*  t24    ref    
N005 ( 16, 16) [000026] DA----------              *  STORE_LCL_VAR ref    V09 tmp2         d:2
N001 (  1,  1) [000020] ------------        t20 =    LCL_VAR   ref    V00 this         u:1 $80
                                                  /--*  t20    ref    
N003 (  2,  2) [000284] -c----------       t284 = *  LEA(b+8)  byref 
                                                  /--*  t284   byref  
N004 (  4,  4) [000021] n---GO------        t21 = *  IND       ref    <l:$246, c:$245>
                                                  /--*  t21    ref    
N006 (  5,  5) [000282] -c----------       t282 = *  LEA(b+8)  byref 
                                                  /--*  t282   byref  
N007 (  7,  7) [000022] ---XGO------        t22 = *  IND       ref    <l:$250, c:$24f>
                                                  /--*  t22    ref    
N009 (  7,  7) [000030] DA-XGO------              *  STORE_LCL_VAR ref    V10 tmp3         d:2
N002 (  1,  1) [000027] ------------        t27 =    LCL_VAR   ref    V09 tmp2         u:2 $243
                                                  /--*  t27    ref    
               [000485] ------------       t485 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t485   ref    this in rcx
N003 ( 15,  8) [000028] --CXG-------              *  CALL      void   System.Object..ctor $VN.Void
               [000431] ------------                 IL_OFFSET void   IL offset: 0x37
N001 (  1,  1) [000031] ------------        t31 =    LCL_VAR   ref    V10 tmp3         u:2 (last use) <l:$248, c:$94>
                                                  /--*  t31    ref    
N003 (  2,  2) [000287] ------------       t287 = *  LEA(b+16) byref 
N005 (  1,  1) [000032] ------------        t32 =    LCL_VAR   ref    V09 tmp2         u:2 (last use) $243
                                                  /--*  t287   byref  
                                                  +--*  t32    ref    
               [000432] -A-XG-------              *  STOREIND  ref   
               [000433] ------------                 IL_OFFSET void   IL offset: 0x3c
N002 (  2, 10) [000037] H-----------        t37 =    CNS_INT(h) long   0x7ffdb3ee6200 token $1c6
                                                  /--*  t37    long   
               [000486] ------------       t486 = *  PUTARG_REG long   REG rcx
                                                  /--*  t486   long   arg0 in rcx
N003 ( 16, 16) [000038] --C---------        t38 = *  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST $253
                                                  /--*  t38    ref    
N005 ( 16, 16) [000040] DA----------              *  STORE_LCL_VAR ref    V11 tmp4         d:2
N004 (  1,  1) [000041] ------------        t41 =    LCL_VAR   ref    V11 tmp4         u:2 $253
                                                  /--*  t41    ref    
               [000487] ------------       t487 = *  PUTARG_REG ref    REG rcx
N005 (  1,  1) [000035] ------------        t35 =    LCL_VAR   ref    V00 this         u:1 $80
                                                  /--*  t35    ref    
               [000488] ------------       t488 = *  PUTARG_REG ref    REG rdx
N006 (  2, 10) [000036] H-----------        t36 =    CNS_INT(h) long   0x7ffdb3b213f8 ftn $1c7
                                                  /--*  t36    long   
               [000489] ------------       t489 = *  PUTARG_REG long   REG r8
                                                  /--*  t487   ref    this in rcx
                                                  +--*  t488   ref    arg1 in rdx
                                                  +--*  t489   long   arg2 in r8
N007 ( 18, 21) [000042] --CXG-------              *  CALL      void   System.MulticastDelegate.CtorClosed $VN.Void
               [000434] ------------                 IL_OFFSET void   IL offset: 0x48
N002 (  2, 10) [000044] H-----------        t44 =    CNS_INT(h) long   0x7ffdb3c84e80 token $1c8
                                                  /--*  t44    long   
               [000490] ------------       t490 = *  PUTARG_REG long   REG rcx
                                                  /--*  t490   long   arg0 in rcx
N003 ( 16, 16) [000045] --C---------        t45 = *  CALL help ref    HELPER.CORINFO_HELP_NEWFAST $254
                                                  /--*  t45    ref    
N005 ( 16, 16) [000047] DA----------              *  STORE_LCL_VAR ref    V12 tmp5         d:2
N003 (  1,  1) [000048] ------------        t48 =    LCL_VAR   ref    V12 tmp5         u:2 $254
                                                  /--*  t48    ref    
               [000491] ------------       t491 = *  PUTARG_REG ref    REG rcx
N004 (  1,  1) [000043] ------------        t43 =    LCL_VAR   ref    V11 tmp4         u:2 (last use) $253
                                                  /--*  t43    ref    
               [000492] ------------       t492 = *  PUTARG_REG ref    REG rdx
                                                  /--*  t491   ref    this in rcx
                                                  +--*  t492   ref    arg1 in rdx
N005 ( 16, 10) [000049] --CXG-------              *  CALL      void   System.Threading.Thread..ctor $VN.Void
               [000435] ------------                 IL_OFFSET void   IL offset: 0x4d
N002 (  1,  1) [000050] ------------        t50 =    LCL_VAR   ref    V12 tmp5         u:2 (last use) $254
                                                  /--*  t50    ref    
               [000493] ------------       t493 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t493   ref    this in rcx
N003 ( 15,  8) [000051] --CXG-------              *  CALL      void   System.Threading.Thread.Start $VN.Void
               [000436] ------------                 IL_OFFSET void   IL offset: 0x52
N001 ( 14,  5) [000052] --CXG-------        t52 =    CALL      long   System.DateTime.get_Now $c2
                                                  /--*  t52    long   
N003 ( 18,  8) [000055] DA-XG-------              *  STORE_LCL_VAR struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  *    long   V02._dateData (offs=0x00) -> V17 tmp10        
               [000437] ------------                 IL_OFFSET void   IL offset: 0x58
N003 (  3,  2) [000056] -------N----        t56 =    LCL_VAR_ADDR byref  V02 loc0         
                                                  *    long   V02._dateData (offs=0x00) -> V17 tmp10        
                                                  /--*  t56    byref  
               [000494] ------------       t494 = *  PUTARG_REG byref  REG rcx
                                                  /--*  t494   byref  this in rcx
N005 ( 17, 10) [000058] --CXG-------        t58 = *  CALL      ref    System.DateTime.ToString $a8
                                                  /--*  t58    ref    
N007 ( 17, 10) [000300] DA-XG-----L-              *  STORE_LCL_VAR ref    V22 tmp15        d:2
N009 (  1,  1) [000301] ------------       t301 =    LCL_VAR   ref    V22 tmp15        u:2 (last use) $a8
                                                  /--*  t301   ref    
               [000495] ------------       t495 = *  PUTARG_REG ref    REG rcx
N010 (  2, 10) [000297] H-----------       t297 =    CNS_INT(h) long   0x750031F8 "	 Consumer thread started, adding items..." $1c9
                                                  /--*  t297   long   
N011 (  4, 12) [000298] #---G-------       t298 = *  IND       ref    $ac
                                                  /--*  t298   ref    
               [000496] ----G-------       t496 = *  PUTARG_REG ref    REG rdx
                                                  /--*  t495   ref    arg0 in rcx
                                                  +--*  t496   ref    arg1 in rdx
N012 ( 39, 30) [000060] --CXG-------        t60 = *  CALL      ref    System.String.Concat $ad
                                                  /--*  t60    ref    
               [000497] --CXG-------       t497 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t497   ref    arg0 in rcx
N013 ( 53, 36) [000061] --CXG-------              *  CALL      void   System.Console.WriteLine $VN.Void
               [000438] ------------                 IL_OFFSET void   IL offset: 0x6e
N001 (  1,  1) [000062] ------------        t62 =    CNS_INT   int    0 $40
                                                  /--*  t62    int    
N003 (  1,  3) [000064] DA----------              *  STORE_LCL_VAR int    V03 loc1         d:2

------------ BB02 [072..07B), preds={BB01,BB06} succs={BB03}
               [000439] ------------                 IL_OFFSET void   IL offset: 0x72
N001 (  1,  1) [000069] ------------        t69 =    LCL_VAR   ref    V00 this         u:1 $80
                                                  /--*  t69    ref    
N003 (  2,  2) [000305] -c----------       t305 = *  LEA(b+8)  byref 
                                                  /--*  t305   byref  
N004 (  4,  4) [000070] n---GO------        t70 = *  IND       ref    <l:$258, c:$257>
                                                  /--*  t70    ref    
N006 (  8,  7) [000072] DA--GO------              *  STORE_LCL_VAR ref    V04 loc2         d:3
               [000440] ------------                 IL_OFFSET void   IL offset: 0x79
N001 (  1,  1) [000073] ------------        t73 =    CNS_INT   int    0 $40
                                                  /--*  t73    int    
N003 (  5,  4) [000075] DA--G-------              *  STORE_LCL_VAR int   (AX) V05 loc3         

------------ BB03 [07B..0CA), preds={BB02} succs={BB04}
               [000441] ------------                 IL_OFFSET void   IL offset: 0x7b
N003 (  3,  3) [000078] ------------        t78 =    LCL_VAR_ADDR long   V05 loc3          $206
                                                  /--*  t78    long   
               [000498] ------------       t498 = *  PUTARG_REG long   REG rdx
N004 (  1,  1) [000076] ------------        t76 =    LCL_VAR   ref    V04 loc2         u:3 <l:$256, c:$b2>
                                                  /--*  t76    ref    
               [000499] ------------       t499 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t498   long   arg1 in rdx
                                                  +--*  t499   ref    arg0 in rcx
N005 ( 18, 11) [000079] --CXG-------              *  CALL      void   System.Threading.Monitor.Enter $VN.Void
               [000442] ------------                 IL_OFFSET void   IL offset: 0x83
N002 (  2, 10) [000083] H-----------        t83 =    CNS_INT(h) long   0x7ffdb3ee58a8 method $1ca
                                                  /--*  t83    long   
               [000500] ------------       t500 = *  PUTARG_REG long   REG rcx
                                                  /--*  t500   long   arg0 in rcx
N003 ( 16, 16) [000084] --C---------        t84 = *  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST $259
                                                  /--*  t84    ref    
N005 ( 16, 16) [000086] DA----------              *  STORE_LCL_VAR ref    V13 tmp6         d:2
N001 (  1,  1) [000080] ------------        t80 =    LCL_VAR   ref    V00 this         u:1 $80
                                                  /--*  t80    ref    
N003 (  2,  2) [000312] -c----------       t312 = *  LEA(b+8)  byref 
                                                  /--*  t312   byref  
N004 (  4,  4) [000081] n---GO------        t81 = *  IND       ref    <l:$25d, c:$25c>
                                                  /--*  t81    ref    
N006 (  5,  5) [000310] -c----------       t310 = *  LEA(b+8)  byref 
                                                  /--*  t310   byref  
N007 (  7,  7) [000082] ---XGO------        t82 = *  IND       ref    <l:$267, c:$266>
                                                  /--*  t82    ref    
N009 (  7,  7) [000090] DA-XGO------              *  STORE_LCL_VAR ref    V14 tmp7         d:2
N002 (  1,  1) [000087] ------------        t87 =    LCL_VAR   ref    V13 tmp6         u:2 $259
                                                  /--*  t87    ref    
               [000501] ------------       t501 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t501   ref    this in rcx
N003 ( 15,  8) [000230] --CXG-------              *  CALL      void   System.Object..ctor $VN.Void
               [000443] ------------                 IL_OFFSET void   IL offset: 0x93
N001 (  1,  1) [000091] ------------        t91 =    LCL_VAR   ref    V14 tmp7         u:2 (last use) <l:$25f, c:$b9>
                                                  /--*  t91    ref    
N003 (  2,  2) [000315] ------------       t315 = *  LEA(b+8)  byref 
N005 (  1,  1) [000092] ------------        t92 =    LCL_VAR   ref    V13 tmp6         u:2 (last use) $259
                                                  /--*  t315   byref  
                                                  +--*  t92    ref    
               [000444] -A-XG-------              *  STOREIND  ref   
               [000445] ------------                 IL_OFFSET void   IL offset: 0x98
N001 (  1,  1) [000095] ------------        t95 =    LCL_VAR   ref    V00 this         u:1 $80
                                                  /--*  t95    ref    
N003 (  2,  2) [000319] -c----------       t319 = *  LEA(b+8)  byref 
                                                  /--*  t319   byref  
N004 (  4,  4) [000096] n---GO------        t96 = *  IND       ref    <l:$26d, c:$26c>
                                                  /--*  t96    ref    
N006 (  4,  4) [000414] DA--GO------              *  STORE_LCL_VAR ref    V28 cse1         d:1
N007 (  1,  1) [000415] ------------       t415 =    LCL_VAR   ref    V28 cse1         u:1 <l:$26d, c:$26c>
                                                  /--*  t415   ref    
N010 (  6,  6) [000317] ------------       t317 = *  LEA(b+8)  byref 
N012 (  1,  1) [000417] ------------       t417 =    LCL_VAR   ref    V28 cse1         u:1 <l:$26b, c:$bf>
                                                  /--*  t417   ref    
N014 (  2,  2) [000323] -c----------       t323 = *  LEA(b+8)  byref 
                                                  /--*  t323   byref  
N015 (  4,  4) [000099] ---XG-------        t99 = *  IND       ref    <l:$278, c:$277>
                                                  /--*  t99    ref    
N017 (  5,  5) [000321] -c----------       t321 = *  LEA(b+8)  byref 
                                                  /--*  t321   byref  
N018 (  7,  7) [000100] ---XG-------       t100 = *  IND       ref    <l:$403, c:$402>
                                                  /--*  t100   ref    
N020 (  7,  7) [000409] DA-XG-------              *  STORE_LCL_VAR ref    V27 cse0         d:1
N021 (  1,  1) [000410] ------------       t410 =    LCL_VAR   ref    V27 cse0         u:1 <l:$403, c:$402>
                                                  /--*  t317   byref  
                                                  +--*  t410   ref    
               [000446] -A-XGO------              *  STOREIND  ref   
               [000447] ------------                 IL_OFFSET void   IL offset: 0xb3
N002 (  2, 10) [000106] H-----------       t106 =    CNS_INT(h) long   0x7ffdb3b058b8 token $1c3
                                                  /--*  t106   long   
               [000502] ------------       t502 = *  PUTARG_REG long   REG rcx
                                                  /--*  t502   long   arg0 in rcx
N003 ( 16, 16) [000107] --C---------       t107 = *  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST $404
                                                  /--*  t107   ref    
N005 ( 16, 16) [000109] DA----------              *  STORE_LCL_VAR ref    V15 tmp8         d:2
N001 (  1,  1) [000412] ------------       t412 =    LCL_VAR   ref    V27 cse0         u:1 <l:$279, c:$3c4>
                                                  /--*  t412   ref    
N003 (  1,  3) [000113] DA--G-------              *  STORE_LCL_VAR ref    V16 tmp9         d:2
N002 (  1,  1) [000110] ------------       t110 =    LCL_VAR   ref    V15 tmp8         u:2 $404
                                                  /--*  t110   ref    
               [000503] ------------       t503 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t503   ref    this in rcx
N003 ( 15,  8) [000111] --CXG-------              *  CALL      void   System.Object..ctor $VN.Void
               [000448] ------------                 IL_OFFSET void   IL offset: 0xc3
N001 (  1,  1) [000114] ------------       t114 =    LCL_VAR   ref    V16 tmp9         u:2 (last use) <l:$279, c:$3ca>
                                                  /--*  t114   ref    
N003 (  2,  2) [000333] ------------       t333 = *  LEA(b+16) byref 
N005 (  1,  1) [000115] ------------       t115 =    LCL_VAR   ref    V15 tmp8         u:2 (last use) $404
                                                  /--*  t333   byref  
                                                  +--*  t115   ref    
               [000449] -A-XG-------              *  STOREIND  ref   

------------ BB04 [0CA..0CD) -> BB06 (cond), preds={BB03} succs={BB05,BB06}
N001 (  3,  2) [000256] -c----------       t256 =    LCL_VAR   bool  (AX) V05 loc3          $382
N003 (  1,  1) [000257] -c----------       t257 =    CNS_INT   bool   0 $40
                                                  /--*  t256   bool   
                                                  +--*  t257   bool   
N004 (  6,  6) [000255] J---G--N-U--              *  EQ        void   $344
N005 (  8,  8) [000254] ----G-------              *  JTRUE     void  

------------ BB05 [0CD..0D4), preds={BB04} succs={BB06}
N002 (  1,  1) [000259] ------------       t259 =    LCL_VAR   ref    V04 loc2         u:3 (last use) <l:$256, c:$b2>
                                                  /--*  t259   ref    
               [000504] ------------       t504 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t504   ref    arg0 in rcx
N003 ( 15,  7) [000258] --CXG-------              *  CALL      void   System.Threading.Monitor.Exit $VN.Void

------------ BB06 [0D4..0DD) -> BB02 (cond), preds={BB04,BB05} succs={BB07,BB02}
               [000450] ------------                 IL_OFFSET void   IL offset: 0xd4
N001 (  1,  1) [000118] ------------       t118 =    LCL_VAR   int    V03 loc1         u:3 (last use) $380
N002 (  1,  1) [000119] -c----------       t119 =    CNS_INT   int    1 $4e
                                                  /--*  t118   int    
                                                  +--*  t119   int    
N003 (  3,  3) [000120] ------------       t120 = *  ADD       int    $345
                                                  /--*  t120   int    
N005 (  3,  3) [000122] DA----------              *  STORE_LCL_VAR int    V03 loc1         d:4
               [000451] ------------                 IL_OFFSET void   IL offset: 0xd8
N001 (  1,  1) [000065] ------------        t65 =    LCL_VAR   int    V03 loc1         u:4 $345
N002 (  1,  1) [000066] -c----------        t66 =    CNS_INT   int    10 $43
                                                  /--*  t65    int    
                                                  +--*  t66    int    
N003 (  3,  3) [000067] J------N----              *  LT        void   $346
N004 (  5,  5) [000068] ------------              *  JTRUE     void  

------------ BB07 [0DD..0F9), preds={BB06} succs={BB08}
               [000452] ------------                 IL_OFFSET void   IL offset: 0xdd
N001 ( 14,  5) [000130] --CXG-------       t130 =    CALL      long   System.DateTime.get_Now $c4
                                                  /--*  t130   long   
N003 ( 18,  8) [000133] DA-XG-------              *  STORE_LCL_VAR struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  *    long   V02._dateData (offs=0x00) -> V17 tmp10        
               [000453] ------------                 IL_OFFSET void   IL offset: 0xe3
N003 (  3,  2) [000134] -------N----       t134 =    LCL_VAR_ADDR byref  V02 loc0         
                                                  *    long   V02._dateData (offs=0x00) -> V17 tmp10        
                                                  /--*  t134   byref  
               [000505] ------------       t505 = *  PUTARG_REG byref  REG rcx
                                                  /--*  t505   byref  this in rcx
N005 ( 17, 10) [000136] --CXG-------       t136 = *  CALL      ref    System.DateTime.ToString $3d5
                                                  /--*  t136   ref    
N007 ( 17, 10) [000342] DA-XG-----L-              *  STORE_LCL_VAR ref    V23 tmp16        d:2
N009 (  1,  1) [000343] ------------       t343 =    LCL_VAR   ref    V23 tmp16        u:2 (last use) $3d5
                                                  /--*  t343   ref    
               [000506] ------------       t506 = *  PUTARG_REG ref    REG rcx
N010 (  2, 10) [000339] H-----------       t339 =    CNS_INT(h) long   0x75003200 "	 Waiting for list processing to complete..." $1cf
                                                  /--*  t339   long   
N011 (  4, 12) [000340] #---G-------       t340 = *  IND       ref    $3d9
                                                  /--*  t340   ref    
               [000507] ----G-------       t507 = *  PUTARG_REG ref    REG rdx
                                                  /--*  t506   ref    arg0 in rcx
                                                  +--*  t507   ref    arg1 in rdx
N012 ( 39, 30) [000138] --CXG-------       t138 = *  CALL      ref    System.String.Concat $3da
                                                  /--*  t138   ref    
               [000508] --CXG-------       t508 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t508   ref    arg0 in rcx
N013 ( 53, 36) [000139] --CXG-------              *  CALL      void   System.Console.WriteLine $VN.Void

------------ BB08 [0F9..102), preds={BB07,BB12} succs={BB09}
               [000454] ------------                 IL_OFFSET void   IL offset: 0xf9
N001 (  1,  1) [000140] ------------       t140 =    LCL_VAR   ref    V00 this         u:1 $80
                                                  /--*  t140   ref    
N003 (  2,  2) [000347] -c----------       t347 = *  LEA(b+8)  byref 
                                                  /--*  t347   byref  
N004 (  4,  4) [000141] n---GO------       t141 = *  IND       ref    <l:$41c, c:$41b>
                                                  /--*  t141   ref    
N006 (  8,  7) [000143] DA--GO------              *  STORE_LCL_VAR ref    V04 loc2         d:2
               [000455] ------------                 IL_OFFSET void   IL offset: 0x100
N001 (  1,  1) [000144] ------------       t144 =    CNS_INT   int    0 $40
                                                  /--*  t144   int    
N003 (  5,  4) [000146] DA--G-------              *  STORE_LCL_VAR int   (AX) V05 loc3         

------------ BB09 [102..122) -> BB13 (cond), preds={BB08} succs={BB10,BB13}
               [000456] ------------                 IL_OFFSET void   IL offset: 0x102
N003 (  3,  3) [000149] ------------       t149 =    LCL_VAR_ADDR long   V05 loc3          $20a
                                                  /--*  t149   long   
               [000509] ------------       t509 = *  PUTARG_REG long   REG rdx
N004 (  1,  1) [000147] ------------       t147 =    LCL_VAR   ref    V04 loc2         u:2 <l:$41a, c:$3df>
                                                  /--*  t147   ref    
               [000510] ------------       t510 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t509   long   arg1 in rdx
                                                  +--*  t510   ref    arg0 in rcx
N005 ( 18, 11) [000150] --CXG-------              *  CALL      void   System.Threading.Monitor.Enter $VN.Void
               [000457] ------------                 IL_OFFSET void   IL offset: 0x10a
N001 (  1,  1) [000151] ------------       t151 =    LCL_VAR   ref    V00 this         u:1 $80
                                                  /--*  t151   ref    
N003 (  2,  2) [000353] -c----------       t353 = *  LEA(b+8)  byref 
                                                  /--*  t353   byref  
N004 (  4,  4) [000152] n---GO------       t152 = *  IND       ref    <l:$420, c:$41f>
                                                  /--*  t152   ref    
N006 (  4,  4) [000419] DA--GO------              *  STORE_LCL_VAR ref    V29 cse2         d:1
N007 (  1,  1) [000420] ------------       t420 =    LCL_VAR   ref    V29 cse2         u:1 <l:$420, c:$41f>
                                                  /--*  t420   ref    
N010 (  6,  6) [000351] -c----------       t351 = *  LEA(b+8)  byref 
                                                  /--*  t351   byref  
N011 (  8,  8) [000153] ---XGO------       t153 = *  IND       ref    <l:$42a, c:$429>
N012 (  1,  1) [000422] ------------       t422 =    LCL_VAR   ref    V29 cse2         u:1 <l:$41e, c:$3e3>
                                                  /--*  t422   ref    
N014 (  2,  2) [000355] -c----------       t355 = *  LEA(b+16) byref 
                                                  /--*  t355   byref  
N015 (  4,  4) [000156] -c-XG-------       t156 = *  IND       ref    <l:$435, c:$434>
                                                  /--*  t153   ref    
                                                  +--*  t156   ref    
N016 ( 13, 13) [000157] N--XGO-N-U--              *  EQ        void   <l:$34a, c:$349>
N017 ( 15, 15) [000158] ---XGO------              *  JTRUE     void  

------------ BB10 [126..129) -> BB12 (cond), preds={BB09} succs={BB11,BB12}
N001 (  3,  2) [000263] -c----------       t263 =    LCL_VAR   bool  (AX) V05 loc3          $384
N003 (  1,  1) [000264] -c----------       t264 =    CNS_INT   bool   0 $40
                                                  /--*  t263   bool   
                                                  +--*  t264   bool   
N004 (  6,  6) [000262] J---G--N-U--              *  EQ        void   $34e
N005 (  8,  8) [000261] ----G-------              *  JTRUE     void  

------------ BB11 [129..130), preds={BB10} succs={BB12}
N002 (  1,  1) [000266] ------------       t266 =    LCL_VAR   ref    V04 loc2         u:2 (last use) <l:$41a, c:$3df>
                                                  /--*  t266   ref    
               [000511] ------------       t511 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t511   ref    arg0 in rcx
N003 ( 15,  7) [000265] --CXG-------              *  CALL      void   System.Threading.Monitor.Exit $VN.Void

------------ BB12 [130..139) -> BB08 (always), preds={BB10,BB11} succs={BB08}
               [000458] ------------                 IL_OFFSET void   IL offset: 0x130
N002 (  1,  1) [000159] ------------       t159 =    CNS_INT   int    100 $5b
                                                  /--*  t159   int    
               [000512] ------------       t512 = *  PUTARG_REG int    REG rcx
                                                  /--*  t512   int    arg0 in rcx
N003 ( 15,  7) [000160] --CXG-------              *  CALL      void   System.Threading.Thread.Sleep $VN.Void

------------ BB13 [???..???) -> BB30 (callf), preds={BB09} succs={BB30}

------------ BB14 [???..???) -> BB15 (ALWAYS), preds={BB32} succs={BB15}

------------ BB15 [139..17D), preds={BB14} succs={BB19}
               [000459] ------------                 IL_OFFSET void   IL offset: 0x139
N001 ( 14,  5) [000161] --CXG-------       t161 =    CALL      long   System.DateTime.get_Now $c6
                                                  /--*  t161   long   
N003 ( 18,  8) [000164] DA-XG-------              *  STORE_LCL_VAR struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  *    long   V02._dateData (offs=0x00) -> V17 tmp10        
               [000460] ------------                 IL_OFFSET void   IL offset: 0x13f
N003 (  3,  2) [000165] -------N----       t165 =    LCL_VAR_ADDR byref  V02 loc0         
                                                  *    long   V02._dateData (offs=0x00) -> V17 tmp10        
                                                  /--*  t165   byref  
               [000513] ------------       t513 = *  PUTARG_REG byref  REG rcx
                                                  /--*  t513   byref  this in rcx
N005 ( 17, 10) [000167] --CXG-------       t167 = *  CALL      ref    System.DateTime.ToString $3ef
                                                  /--*  t167   ref    
N007 ( 17, 10) [000367] DA-XG-----L-              *  STORE_LCL_VAR ref    V24 tmp17        d:2
N009 (  1,  1) [000368] ------------       t368 =    LCL_VAR   ref    V24 tmp17        u:2 (last use) $3ef
                                                  /--*  t368   ref    
               [000514] ------------       t514 = *  PUTARG_REG ref    REG rcx
N010 (  2, 10) [000364] H-----------       t364 =    CNS_INT(h) long   0x75003208 "	 Done.  Profiler is active, available options:" $1d3
                                                  /--*  t364   long   
N011 (  4, 12) [000365] #---G-------       t365 = *  IND       ref    $3f3
                                                  /--*  t365   ref    
               [000515] ----G-------       t515 = *  PUTARG_REG ref    REG rdx
                                                  /--*  t514   ref    arg0 in rcx
                                                  +--*  t515   ref    arg1 in rdx
N012 ( 39, 30) [000169] --CXG-------       t169 = *  CALL      ref    System.String.Concat $3f4
                                                  /--*  t169   ref    
               [000516] --CXG-------       t516 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t516   ref    arg0 in rcx
N013 ( 53, 36) [000170] --CXG-------              *  CALL      void   System.Console.WriteLine $VN.Void
               [000461] ------------                 IL_OFFSET void   IL offset: 0x155
N002 (  2, 10) [000371] H-----------       t371 =    CNS_INT(h) long   0x75003210 "   Q = quit" $1d4
                                                  /--*  t371   long   
N003 (  4, 12) [000372] #---G-------       t372 = *  IND       ref    $3f8
                                                  /--*  t372   ref    
               [000517] ----G-------       t517 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t517   ref    arg0 in rcx
N004 ( 18, 18) [000172] --CXG-------              *  CALL      void   System.Console.WriteLine $VN.Void
               [000462] ------------                 IL_OFFSET void   IL offset: 0x15f
N002 (  2, 10) [000374] H-----------       t374 =    CNS_INT(h) long   0x75003218 "   H = heap snapshot" $1d5
                                                  /--*  t374   long   
N003 (  4, 12) [000375] #---G-------       t375 = *  IND       ref    $3fb
                                                  /--*  t375   ref    
               [000518] ----G-------       t518 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t518   ref    arg0 in rcx
N004 ( 18, 18) [000174] --CXG-------              *  CALL      void   System.Console.WriteLine $VN.Void
               [000463] ------------                 IL_OFFSET void   IL offset: 0x169
N002 (  2, 10) [000377] H-----------       t377 =    CNS_INT(h) long   0x75003220 "   G = GC (max gen)" $1d6
                                                  /--*  t377   long   
N003 (  4, 12) [000378] #---G-------       t378 = *  IND       ref    $3fe
                                                  /--*  t378   ref    
               [000519] ----G-------       t519 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t519   ref    arg0 in rcx
N004 ( 18, 18) [000176] --CXG-------              *  CALL      void   System.Console.WriteLine $VN.Void
               [000464] ------------                 IL_OFFSET void   IL offset: 0x173
N002 (  2, 10) [000380] H-----------       t380 =    CNS_INT(h) long   0x75003228 "   R = clear the running flag to stop the consumer thread" $1d7
                                                  /--*  t380   long   
N003 (  4, 12) [000381] #---G-------       t381 = *  IND       ref    $4c1
                                                  /--*  t381   ref    
               [000520] ----G-------       t520 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t520   ref    arg0 in rcx
N004 ( 18, 18) [000178] --CXG-------              *  CALL      void   System.Console.WriteLine $VN.Void

------------ BB19 [17D..18F) -> BB21 (cond), preds={BB15,BB20,BB22,BB24,BB25} succs={BB20,BB21}
N003 (  3,  2) [000236] -------N----       t236 =    LCL_VAR_ADDR byref  V06 loc4         
                                                  *    ushort V06._keyChar (offs=0x00) -> V18 tmp11        
                                                  *    int    V06._key (offs=0x04) -> V19 tmp12        
                                                  *    int    V06._mods (offs=0x08) -> V20 tmp13        
                                                  /--*  t236   byref  
               [000521] ------------       t521 = *  PUTARG_REG byref  REG rcx
N005 (  1,  1) [000232] ------------       t232 =    CNS_INT   int    0 $40
                                                  /--*  t232   int    
               [000522] ------------       t522 = *  PUTARG_REG int    REG rdx
                                                  /--*  t521   byref  arg0 in rcx
                                                  +--*  t522   int    arg1 in rdx
N006 ( 18, 11) [000233] S-CXG-------              *  CALL      void   System.ConsolePal.ReadKey $VN.Void
N001 (  3,  2) [000240] -c----------       t240 =    LCL_VAR   int   (AX) V19 tmp12         $385
N002 (  1,  1) [000187] -c----------       t187 =    CNS_INT   int    71 $5e
                                                  /--*  t240   int    
                                                  +--*  t187   int    
N003 (  5,  4) [000188] N---G--N-U--              *  NE        void   $34f
N004 (  7,  6) [000189] ----G-------              *  JTRUE     void  

------------ BB20 [18F..19B) -> BB19 (always), preds={BB19} succs={BB19}
               [000465] ------------                 IL_OFFSET void   IL offset: 0x18f
N002 ( 14,  5) [000221] --CXG-------       t221 =    CALL      int    System.GC.get_MaxGeneration $305
                                                  /--*  t221   int    
               [000523] --CXG-------       t523 = *  PUTARG_REG int    REG rcx
                                                  /--*  t523   int    arg0 in rcx
N003 ( 28, 11) [000222] --CXG-------              *  CALL      void   System.GC.Collect $VN.Void

------------ BB21 [19B..1A6) -> BB23 (cond), preds={BB19} succs={BB22,BB23}
N001 (  3,  2) [000244] -c----------       t244 =    LCL_VAR   int   (AX) V19 tmp12         $385
N002 (  1,  1) [000194] -c----------       t194 =    CNS_INT   int    72 $5f
                                                  /--*  t244   int    
                                                  +--*  t194   int    
N003 (  5,  4) [000195] N---G--N-U--              *  NE        void   $350
N004 (  7,  6) [000196] ----G-------              *  JTRUE     void  

------------ BB22 [1A6..1AD) -> BB19 (always), preds={BB21} succs={BB19}
               [000466] ------------                 IL_OFFSET void   IL offset: 0x1a6
N001 ( 14,  5) [000220] --CXG-------                 CALL      void   System.Diagnostics.Debugger.Break $VN.Void

------------ BB23 [1AD..1B8) -> BB25 (cond), preds={BB21} succs={BB24,BB25}
N001 (  3,  2) [000248] -c----------       t248 =    LCL_VAR   int   (AX) V19 tmp12         $385
N002 (  1,  1) [000201] -c----------       t201 =    CNS_INT   int    82 $60
                                                  /--*  t248   int    
                                                  +--*  t201   int    
N003 (  5,  4) [000202] N---G--N-U--              *  NE        void   $351
N004 (  7,  6) [000203] ----G-------              *  JTRUE     void  

------------ BB24 [1B8..1C1) -> BB19 (always), preds={BB23} succs={BB19}
               [000467] ------------                 IL_OFFSET void   IL offset: 0x1b8
N001 (  1,  1) [000216] ------------       t216 =    LCL_VAR   ref    V00 this         u:1 $80
                                                  /--*  t216   ref    
N003 (  2,  2) [000387] -c----------       t387 = *  LEA(b+16) byref 
N005 (  1,  1) [000217] -c----------       t217 =    CNS_INT   int    0 $40
                                                  /--*  t387   byref  
                                                  +--*  t217   int    
               [000468] -A--GO------              *  STOREIND  bool  

------------ BB25 [1C1..1CC) -> BB19 (cond), preds={BB23} succs={BB26,BB19}
N001 (  3,  2) [000252] -c----------       t252 =    LCL_VAR   int   (AX) V19 tmp12         $385
N002 (  1,  1) [000208] -c----------       t208 =    CNS_INT   int    81 $61
                                                  /--*  t252   int    
                                                  +--*  t208   int    
N003 (  5,  4) [000209] N---G--N-U--              *  NE        void   $352
N004 (  7,  6) [000210] ----G-------              *  JTRUE     void  

------------ BB26 [1CC..1D4) (return), preds={BB25} succs={}
               [000469] ------------                 IL_OFFSET void   IL offset: 0x1cc
N001 (  1,  1) [000211] ------------       t211 =    LCL_VAR   ref    V00 this         u:1 (last use) $80
                                                  /--*  t211   ref    
N003 (  2,  2) [000389] -c----------       t389 = *  LEA(b+16) byref 
N005 (  1,  1) [000212] -c----------       t212 =    CNS_INT   int    0 $40
                                                  /--*  t389   byref  
                                                  +--*  t212   int    
               [000470] -A--GO------              *  STOREIND  bool  
               [000471] ------------                 IL_OFFSET void   IL offset: 0x1d3
N001 (  0,  0) [000215] ------------                 RETURN    void   $442

------------ BB27 [0CA..0CD) -> BB29 (cond), preds={} succs={BB28,BB29}
               [000472] ------------                 IL_OFFSET void   IL offset: 0xca
N001 (  3,  2) [000123] -c----------       t123 =    LCL_VAR   bool  (AX) V05 loc3          $381
N003 (  1,  1) [000124] -c----------       t124 =    CNS_INT   bool   0 $40
                                                  /--*  t123   bool   
                                                  +--*  t124   bool   
N004 (  6,  6) [000125] J---G--N-U--              *  EQ        void   $342
N005 (  8,  8) [000126] ----G-------              *  JTRUE     void  

------------ BB28 [0CD..0D3), preds={BB27} succs={BB29}
               [000473] ------------                 IL_OFFSET void   IL offset: 0xcd
N002 (  1,  1) [000128] ------------       t128 =    LCL_VAR   ref    V04 loc2         u:3 (last use) <l:$256, c:$b2>
                                                  /--*  t128   ref    
               [000524] ------------       t524 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t524   ref    arg0 in rcx
N003 ( 15,  7) [000129] --CXG-------              *  CALL      void   System.Threading.Monitor.Exit $VN.Void

------------ BB29 [0D3..0D4) (finret), preds={BB27,BB28} succs={}
               [000474] ------------                 IL_OFFSET void   IL offset: 0xd3
N001 (  0,  0) [000127] ------------                 RETFILT   void   $440

------------ BB30 [126..129) -> BB32 (cond), preds={BB13} succs={BB31,BB32}
               [000475] ------------                 IL_OFFSET void   IL offset: 0x126
N001 (  3,  2) [000223] -c----------       t223 =    LCL_VAR   bool  (AX) V05 loc3          $383
N003 (  1,  1) [000224] -c----------       t224 =    CNS_INT   bool   0 $40
                                                  /--*  t223   bool   
                                                  +--*  t224   bool   
N004 (  6,  6) [000225] J---G--N-U--              *  EQ        void   $34c
N005 (  8,  8) [000226] ----G-------              *  JTRUE     void  

------------ BB31 [129..12F), preds={BB30} succs={BB32}
               [000476] ------------                 IL_OFFSET void   IL offset: 0x129
N002 (  1,  1) [000228] ------------       t228 =    LCL_VAR   ref    V04 loc2         u:2 (last use) <l:$41a, c:$3df>
                                                  /--*  t228   ref    
               [000525] ------------       t525 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t525   ref    arg0 in rcx
N003 ( 15,  7) [000229] --CXG-------              *  CALL      void   System.Threading.Monitor.Exit $VN.Void

------------ BB32 [12F..130) (finret), preds={BB30,BB31} succs={BB14}
               [000477] ------------                 IL_OFFSET void   IL offset: 0x12f
N001 (  0,  0) [000227] ------------                 RETFILT   void   $441

-------------------------------------------------------------------------------------------------------------------

*** lvaComputeRefCounts ***

*** lvaComputeRefCounts -- explicit counts ***
New refCnts for V17: refCnt =  1, refCntWtd = 1   
New refCnts for V02: refCnt =  1, refCntWtd = 1   
New refCnts for V17: refCnt =  2, refCntWtd = 2   
New refCnts for V02: refCnt =  2, refCntWtd = 2   
New refCnts for V21: refCnt =  1, refCntWtd = 2   
New refCnts for V21: refCnt =  2, refCntWtd = 4   
New refCnts for V08: refCnt =  1, refCntWtd = 2   
New refCnts for V08: refCnt =  2, refCntWtd = 4   
New refCnts for V00: refCnt =  1, refCntWtd = 1   
New refCnts for V08: refCnt =  3, refCntWtd = 6   
New refCnts for V09: refCnt =  1, refCntWtd = 2   
New refCnts for V00: refCnt =  2, refCntWtd = 2   
New refCnts for V10: refCnt =  1, refCntWtd = 2   
New refCnts for V09: refCnt =  2, refCntWtd = 4   
New refCnts for V10: refCnt =  2, refCntWtd = 4   
New refCnts for V09: refCnt =  3, refCntWtd = 6   
New refCnts for V11: refCnt =  1, refCntWtd = 2   
New refCnts for V11: refCnt =  2, refCntWtd = 4   
New refCnts for V00: refCnt =  3, refCntWtd = 3   
New refCnts for V12: refCnt =  1, refCntWtd = 2   
New refCnts for V12: refCnt =  2, refCntWtd = 4   
New refCnts for V11: refCnt =  3, refCntWtd = 6   
New refCnts for V12: refCnt =  3, refCntWtd = 6   
New refCnts for V17: refCnt =  3, refCntWtd = 3   
New refCnts for V02: refCnt =  3, refCntWtd = 3   
New refCnts for V17: refCnt =  4, refCntWtd = 4   
New refCnts for V02: refCnt =  4, refCntWtd = 4   
New refCnts for V22: refCnt =  1, refCntWtd = 2   
New refCnts for V22: refCnt =  2, refCntWtd = 4   
New refCnts for V03: refCnt =  1, refCntWtd = 1   
New refCnts for V00: refCnt =  4, refCntWtd = 11   
New refCnts for V04: refCnt =  1, refCntWtd = 8   
New refCnts for V05: refCnt =  1, refCntWtd = 8   
New refCnts for V05: refCnt =  2, refCntWtd = 16   
New refCnts for V04: refCnt =  2, refCntWtd = 16   
New refCnts for V13: refCnt =  1, refCntWtd = 16   
New refCnts for V00: refCnt =  5, refCntWtd = 19   
New refCnts for V14: refCnt =  1, refCntWtd = 16   
New refCnts for V13: refCnt =  2, refCntWtd = 32   
New refCnts for V14: refCnt =  2, refCntWtd = 32   
New refCnts for V13: refCnt =  3, refCntWtd = 48   
New refCnts for V00: refCnt =  6, refCntWtd = 27   
New refCnts for V28: refCnt =  1, refCntWtd = 8   
New refCnts for V28: refCnt =  2, refCntWtd = 16   
New refCnts for V28: refCnt =  3, refCntWtd = 24   
New refCnts for V27: refCnt =  1, refCntWtd = 8   
New refCnts for V27: refCnt =  2, refCntWtd = 16   
New refCnts for V15: refCnt =  1, refCntWtd = 16   
New refCnts for V27: refCnt =  3, refCntWtd = 24   
New refCnts for V16: refCnt =  1, refCntWtd = 16   
New refCnts for V15: refCnt =  2, refCntWtd = 32   
New refCnts for V16: refCnt =  2, refCntWtd = 32   
New refCnts for V15: refCnt =  3, refCntWtd = 48   
New refCnts for V05: refCnt =  3, refCntWtd = 24   
New refCnts for V04: refCnt =  3, refCntWtd = 20   
New refCnts for V03: refCnt =  2, refCntWtd = 9   
New refCnts for V03: refCnt =  3, refCntWtd = 17   
New refCnts for V03: refCnt =  4, refCntWtd = 25   
New refCnts for V17: refCnt =  5, refCntWtd = 5   
New refCnts for V02: refCnt =  5, refCntWtd = 5   
New refCnts for V17: refCnt =  6, refCntWtd = 6   
New refCnts for V02: refCnt =  6, refCntWtd = 6   
New refCnts for V23: refCnt =  1, refCntWtd = 2   
New refCnts for V23: refCnt =  2, refCntWtd = 4   
New refCnts for V00: refCnt =  7, refCntWtd = 35   
New refCnts for V04: refCnt =  4, refCntWtd = 28   
New refCnts for V05: refCnt =  4, refCntWtd = 32   
New refCnts for V05: refCnt =  5, refCntWtd = 40   
New refCnts for V04: refCnt =  5, refCntWtd = 36   
New refCnts for V00: refCnt =  8, refCntWtd = 43   
New refCnts for V29: refCnt =  1, refCntWtd = 8   
New refCnts for V29: refCnt =  2, refCntWtd = 16   
New refCnts for V29: refCnt =  3, refCntWtd = 24   
New refCnts for V05: refCnt =  6, refCntWtd = 48   
New refCnts for V04: refCnt =  6, refCntWtd = 40   
New refCnts for V17: refCnt =  7, refCntWtd = 7   
New refCnts for V02: refCnt =  7, refCntWtd = 7   
New refCnts for V17: refCnt =  8, refCntWtd = 8   
New refCnts for V02: refCnt =  8, refCntWtd = 8   
New refCnts for V24: refCnt =  1, refCntWtd = 2   
New refCnts for V24: refCnt =  2, refCntWtd = 4   
New refCnts for V18: refCnt =  1, refCntWtd = 8   
New refCnts for V19: refCnt =  1, refCntWtd = 8   
New refCnts for V20: refCnt =  1, refCntWtd = 8   
New refCnts for V06: refCnt =  1, refCntWtd = 8   
New refCnts for V06: refCnt =  2, refCntWtd = 16   
New refCnts for V19: refCnt =  2, refCntWtd = 16   
New refCnts for V06: refCnt =  3, refCntWtd = 17   
New refCnts for V19: refCnt =  3, refCntWtd = 17   
New refCnts for V06: refCnt =  4, refCntWtd = 18   
New refCnts for V19: refCnt =  4, refCntWtd = 18   
New refCnts for V00: refCnt =  9, refCntWtd = 44   
New refCnts for V06: refCnt =  5, refCntWtd = 19   
New refCnts for V19: refCnt =  5, refCntWtd = 19   
New refCnts for V00: refCnt = 10, refCntWtd = 45   
New refCnts for V05: refCnt =  7, refCntWtd = 48   
New refCnts for V04: refCnt =  7, refCntWtd = 40   
New refCnts for V05: refCnt =  8, refCntWtd = 49   
New refCnts for V04: refCnt =  8, refCntWtd = 41   

*** lvaComputeRefCounts -- implicit counts ***
New refCnts for V00: refCnt = 11, refCntWtd = 46   
New refCnts for V00: refCnt = 12, refCntWtd = 47   
*************** In fgLocalVarLiveness()
; Initial local variable assignments
;
;  V00 this              ref  this class-hnd EH-live single-def
;  V01 arg1              ref  class-hnd single-def
;  V02 loc0           struct <System.DateTime, 8> do-not-enreg[XSB] addr-exposed ld-addr-op
;  V03 loc1              int 
;  V04 loc2              ref  do-not-enreg[Z] class-hnd EH-live
;  V05 loc3             bool  do-not-enreg[XB] addr-exposed ld-addr-op
;  V06 loc4           struct <System.ConsoleKeyInfo, 12> do-not-enreg[XSB] addr-exposed ld-addr-op
;  V07 OutArgs        lclBlk <32>  "OutgoingArgSpace"
;  V08 tmp1              ref  class-hnd exact single-def "NewObj constructor temp"
;  V09 tmp2              ref  class-hnd exact single-def "NewObj constructor temp"
;  V10 tmp3              ref  class-hnd single-def "impAppendStmt"
;  V11 tmp4              ref  class-hnd exact single-def "NewObj constructor temp"
;  V12 tmp5              ref  class-hnd exact single-def "NewObj constructor temp"
;  V13 tmp6              ref  class-hnd exact "NewObj constructor temp"
;  V14 tmp7              ref  class-hnd "impAppendStmt"
;  V15 tmp8              ref  class-hnd exact "NewObj constructor temp"
;  V16 tmp9              ref  class-hnd "impAppendStmt"
;  V17 tmp10            long  do-not-enreg[X] addr-exposed V02._dateData(offs=0x00) P-DEP "field V02._dateData (fldOffset=0x0)"
;  V18 tmp11          ushort  do-not-enreg[X] addr-exposed V06._keyChar(offs=0x00) P-DEP "field V06._keyChar (fldOffset=0x0)"
;  V19 tmp12             int  do-not-enreg[X] addr-exposed V06._key(offs=0x04) P-DEP "field V06._key (fldOffset=0x4)"
;  V20 tmp13             int  do-not-enreg[X] addr-exposed V06._mods(offs=0x08) P-DEP "field V06._mods (fldOffset=0x8)"
;  V21 tmp14             ref  single-def "argument with side effect"
;  V22 tmp15             ref  single-def "argument with side effect"
;  V23 tmp16             ref  single-def "argument with side effect"
;  V24 tmp17             ref  single-def "argument with side effect"
;  V25 PSPSym           long  do-not-enreg[X] addr-exposed "PSPSym"
;  V26 tmp19             ref  "optAddCopies"
;  V27 cse0              ref  "CSE - aggressive"
;  V28 cse1              ref  "CSE - aggressive"
;  V29 cse2              ref  "CSE - aggressive"
In fgLocalVarLivenessInit

Local V17 should not be enregistered because: field of a dependently promoted struct

Local V18 should not be enregistered because: field of a dependently promoted struct

Local V19 should not be enregistered because: field of a dependently promoted struct

Local V20 should not be enregistered because: field of a dependently promoted struct
Tracked variable (19 out of 30) table:
V00 this          [   ref]: refCnt =   12, refCntWtd =  47   
V13 tmp6          [   ref]: refCnt =    3, refCntWtd =  48   
V15 tmp8          [   ref]: refCnt =    3, refCntWtd =  48   
V04 loc2          [   ref]: refCnt =    8, refCntWtd =  41   
V14 tmp7          [   ref]: refCnt =    2, refCntWtd =  32   
V16 tmp9          [   ref]: refCnt =    2, refCntWtd =  32   
V03 loc1          [   int]: refCnt =    4, refCntWtd =  25   
V27 cse0          [   ref]: refCnt =    3, refCntWtd =  24   
V28 cse1          [   ref]: refCnt =    3, refCntWtd =  24   
V29 cse2          [   ref]: refCnt =    3, refCntWtd =  24   
V08 tmp1          [   ref]: refCnt =    3, refCntWtd =   6   
V09 tmp2          [   ref]: refCnt =    3, refCntWtd =   6   
V11 tmp4          [   ref]: refCnt =    3, refCntWtd =   6   
V12 tmp5          [   ref]: refCnt =    3, refCntWtd =   6   
V10 tmp3          [   ref]: refCnt =    2, refCntWtd =   4   
V21 tmp14         [   ref]: refCnt =    2, refCntWtd =   4   
V22 tmp15         [   ref]: refCnt =    2, refCntWtd =   4   
V23 tmp16         [   ref]: refCnt =    2, refCntWtd =   4   
V24 tmp17         [   ref]: refCnt =    2, refCntWtd =   4   

*************** In fgPerBlockLocalVarLiveness()
BB01 USE(1)={V00                                } + ByrefExposed + GcHeap
     DEF(8)={    V03 V08 V09 V11 V12 V10 V21 V22} + ByrefExposed* + GcHeap*

BB02 USE(1)={V00    } + ByrefExposed + GcHeap
     DEF(1)={    V04} + ByrefExposed

BB03 USE(2)={V00         V04                } + ByrefExposed + GcHeap
     DEF(6)={    V13 V15     V14 V16 V27 V28} + ByrefExposed* + GcHeap*

BB04 USE(0)={} + ByrefExposed
     DEF(0)={}

BB05 USE(1)={V04} + ByrefExposed + GcHeap
     DEF(0)={   } + ByrefExposed* + GcHeap*

BB06 USE(1)={V03}
     DEF(1)={V03}

BB07 USE(0)={   } + ByrefExposed + GcHeap
     DEF(1)={V23} + ByrefExposed* + GcHeap*

BB08 USE(1)={V00    } + ByrefExposed + GcHeap
     DEF(1)={    V04} + ByrefExposed

BB09 USE(2)={V00 V04    } + ByrefExposed + GcHeap
     DEF(1)={        V29} + ByrefExposed* + GcHeap*

BB10 USE(0)={} + ByrefExposed
     DEF(0)={}

BB11 USE(1)={V04} + ByrefExposed + GcHeap
     DEF(0)={   } + ByrefExposed* + GcHeap*

BB12 USE(0)={} + ByrefExposed + GcHeap
     DEF(0)={} + ByrefExposed* + GcHeap*

BB13 USE(0)={}
     DEF(0)={}

BB14 USE(0)={}
     DEF(0)={}

BB15 USE(0)={   } + ByrefExposed + GcHeap
     DEF(1)={V24} + ByrefExposed* + GcHeap*

BB19 USE(0)={} + ByrefExposed + GcHeap
     DEF(0)={} + ByrefExposed* + GcHeap*

BB20 USE(0)={} + ByrefExposed + GcHeap
     DEF(0)={} + ByrefExposed* + GcHeap*

BB21 USE(0)={} + ByrefExposed
     DEF(0)={}

BB22 USE(0)={} + ByrefExposed + GcHeap
     DEF(0)={} + ByrefExposed* + GcHeap*

BB23 USE(0)={} + ByrefExposed
     DEF(0)={}

BB24 USE(1)={V00}
     DEF(0)={   }

BB25 USE(0)={} + ByrefExposed
     DEF(0)={}

BB26 USE(1)={V00}
     DEF(0)={   }

BB27 USE(0)={} + ByrefExposed
     DEF(0)={}

BB28 USE(1)={V04} + ByrefExposed + GcHeap
     DEF(0)={   } + ByrefExposed* + GcHeap*

BB29 USE(0)={}
     DEF(0)={}

BB30 USE(0)={} + ByrefExposed
     DEF(0)={}

BB31 USE(1)={V04} + ByrefExposed + GcHeap
     DEF(0)={   } + ByrefExposed* + GcHeap*

BB32 USE(0)={}
     DEF(0)={}

** Memory liveness computed, GcHeap states and ByrefExposed states diverge
*************** In fgInterBlockLocalVarLiveness()

BB liveness after fgLiveVarAnalysis():

BB01 IN (1)={V00    } + ByrefExposed + GcHeap
     OUT(2)={V00 V03} + ByrefExposed + GcHeap

BB02 IN (2)={V00     V03} + ByrefExposed + GcHeap
     OUT(3)={V00 V04 V03} + ByrefExposed + GcHeap

BB03 IN (3)={V00 V04 V03} + ByrefExposed + GcHeap
     OUT(3)={V00 V04 V03} + ByrefExposed + GcHeap

BB04 IN (3)={V00 V04 V03} + ByrefExposed + GcHeap
     OUT(3)={V00 V04 V03} + ByrefExposed + GcHeap

BB05 IN (3)={V00 V04 V03} + ByrefExposed + GcHeap
     OUT(2)={V00     V03} + ByrefExposed + GcHeap

BB06 IN (2)={V00 V03} + ByrefExposed + GcHeap
     OUT(2)={V00 V03} + ByrefExposed + GcHeap

BB07 IN (1)={V00} + ByrefExposed + GcHeap
     OUT(1)={V00} + ByrefExposed + GcHeap

BB08 IN (1)={V00    } + ByrefExposed + GcHeap
     OUT(2)={V00 V04} + ByrefExposed + GcHeap

BB09 IN (2)={V00 V04} + ByrefExposed + GcHeap
     OUT(2)={V00 V04} + ByrefExposed + GcHeap

BB10 IN (2)={V00 V04} + ByrefExposed + GcHeap
     OUT(2)={V00 V04} + ByrefExposed + GcHeap

BB11 IN (2)={V00 V04} + ByrefExposed + GcHeap
     OUT(1)={V00    } + ByrefExposed + GcHeap

BB12 IN (1)={V00} + ByrefExposed + GcHeap
     OUT(1)={V00} + ByrefExposed + GcHeap

BB13 IN (2)={V00 V04} + ByrefExposed + GcHeap
     OUT(2)={V00 V04} + ByrefExposed + GcHeap

BB14 IN (1)={V00} + ByrefExposed + GcHeap
     OUT(1)={V00} + ByrefExposed + GcHeap

BB15 IN (1)={V00} + ByrefExposed + GcHeap
     OUT(1)={V00} + ByrefExposed + GcHeap

BB19 IN (1)={V00} + ByrefExposed + GcHeap
     OUT(1)={V00} + ByrefExposed + GcHeap

BB20 IN (1)={V00} + ByrefExposed + GcHeap
     OUT(1)={V00} + ByrefExposed + GcHeap

BB21 IN (1)={V00} + ByrefExposed + GcHeap
     OUT(1)={V00} + ByrefExposed + GcHeap

BB22 IN (1)={V00} + ByrefExposed + GcHeap
     OUT(1)={V00} + ByrefExposed + GcHeap

BB23 IN (1)={V00} + ByrefExposed + GcHeap
     OUT(1)={V00} + ByrefExposed + GcHeap

BB24 IN (1)={V00} + ByrefExposed + GcHeap
     OUT(1)={V00} + ByrefExposed + GcHeap

BB25 IN (1)={V00} + ByrefExposed + GcHeap
     OUT(1)={V00} + ByrefExposed + GcHeap

BB26 IN (1)={V00}
     OUT(0)={   }

BB27 IN (1)={V04} + ByrefExposed + GcHeap
     OUT(1)={V04} + ByrefExposed + GcHeap

BB28 IN (1)={V04} + ByrefExposed + GcHeap
     OUT(0)={   }

BB29 IN (0)={}
     OUT(0)={}

BB30 IN (2)={V00 V04} + ByrefExposed + GcHeap
     OUT(2)={V00 V04} + ByrefExposed + GcHeap

BB31 IN (2)={V00 V04} + ByrefExposed + GcHeap
     OUT(1)={V00    } + ByrefExposed + GcHeap

BB32 IN (1)={V00} + ByrefExposed + GcHeap
     OUT(1)={V00} + ByrefExposed + GcHeap


Local V04 should not be enregistered because: live in/out of a handler

*************** In fgUpdateFlowGraph()
Before updating the flow graph:

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..072)                                     i hascall gcsafe newobj LIR 
BB02 [0001]  2       BB01,BB06             8     0 [072..07B)                                     i Loop gcsafe bwd bwd-target LIR 
BB03 [0002]  1  0    BB02                  8     0 [07B..0CA)                 T0      try { }     keep i try hascall gcsafe newobj bwd LIR 
BB04 [0038]  1       BB03                  8     0 [0CA..0CD)-> BB06 ( cond )                     keep i gcsafe bwd LIR cfb 
BB05 [0039]  1       BB04                  4     0 [0CD..0D4)                                     i hascall gcsafe bwd LIR 
BB06 [0006]  2       BB04,BB05             8     0 [0D4..0DD)-> BB02 ( cond )                     i gcsafe bwd LIR 
BB07 [0008]  1       BB06                  1       [0DD..0F9)                                     i hascall gcsafe LIR 
BB08 [0009]  2       BB07,BB12             8     1 [0F9..102)                                     i Loop gcsafe bwd bwd-target LIR 
BB09 [0010]  1  1    BB08                  8     1 [102..122)-> BB13 ( cond ) T1      try { }     keep i try hascall gcsafe bwd LIR 
BB10 [0041]  1       BB09                  8     1 [126..129)-> BB12 ( cond )                     keep i gcsafe bwd LIR cfb 
BB11 [0042]  1       BB10                  4     1 [129..130)                                     i hascall gcsafe bwd LIR 
BB12 [0016]  2       BB10,BB11             8     1 [130..139)-> BB08 (always)                     i hascall gcsafe bwd LIR 
BB13 [0030]  1       BB09                  1       [???..???)-> BB30 (callf )                     i internal gcsafe LIR 
BB14 [0031]  1       BB32                  1       [???..???)-> BB15 (ALWAYS)                     i internal gcsafe LIR KEEP 
BB15 [0017]  1       BB14                  1       [139..17D)                                     i hascall gcsafe LIR 
BB19 [0018]  5       BB15,BB20,BB22,BB24,BB25   8     5 [17D..18F)-> BB21 ( cond )                     i Loop hascall gcsafe bwd bwd-target LIR 
BB20 [0019]  1       BB19                  8     5 [18F..19B)-> BB19 (always)                     i hascall gcsafe bwd LIR 
BB21 [0020]  1       BB19                  1     4 [19B..1A6)-> BB23 ( cond )                     i gcsafe bwd LIR 
BB22 [0021]  1       BB21                  1     4 [1A6..1AD)-> BB19 (always)                     i hascall gcsafe bwd LIR 
BB23 [0022]  1       BB21                  1     3 [1AD..1B8)-> BB25 ( cond )                     i gcsafe bwd LIR 
BB24 [0023]  1       BB23                  1     3 [1B8..1C1)-> BB19 (always)                     i gcsafe bwd LIR 
BB25 [0024]  1       BB23                  1     2 [1C1..1CC)-> BB19 ( cond )                     i gcsafe bwd LIR 
BB26 [0025]  1       BB25                  1       [1CC..1D4)        (return)                     i gcsafe LIR 
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ funclets follow
BB27 [0003]  1     0                       0       [0CA..0CD)-> BB29 ( cond )    H0 F fault {     keep i rare flet bwd LIR 
BB28 [0004]  1     0 BB27                  0       [0CD..0D3)                    H0               i rare hascall bwd LIR 
BB29 [0005]  2     0 BB27,BB28             0       [0D3..0D4)        (finret)    H0   }           i rare bwd LIR 
BB30 [0013]  2     1 BB13                  1       [126..129)-> BB32 ( cond )    H1 F finally {   keep i gcsafe flet bwd LIR 
BB31 [0014]  1     1 BB30                  1       [129..12F)                    H1               i hascall gcsafe bwd LIR 
BB32 [0015]  2     1 BB30,BB31             1       [12F..130)        (finret)    H1   }           i gcsafe bwd LIR 
-----------------------------------------------------------------------------------------------------------------------------------------

*************** In fgDebugCheckBBlist

*** lvaComputeRefCounts ***

*** lvaComputeRefCounts -- explicit counts ***
New refCnts for V17: refCnt =  1, refCntWtd = 1   
New refCnts for V02: refCnt =  1, refCntWtd = 1   
New refCnts for V17: refCnt =  2, refCntWtd = 2   
New refCnts for V02: refCnt =  2, refCntWtd = 2   
New refCnts for V21: refCnt =  1, refCntWtd = 2   
New refCnts for V21: refCnt =  2, refCntWtd = 4   
New refCnts for V08: refCnt =  1, refCntWtd = 2   
New refCnts for V08: refCnt =  2, refCntWtd = 4   
New refCnts for V00: refCnt =  1, refCntWtd = 1   
New refCnts for V08: refCnt =  3, refCntWtd = 6   
New refCnts for V09: refCnt =  1, refCntWtd = 2   
New refCnts for V00: refCnt =  2, refCntWtd = 2   
New refCnts for V10: refCnt =  1, refCntWtd = 2   
New refCnts for V09: refCnt =  2, refCntWtd = 4   
New refCnts for V10: refCnt =  2, refCntWtd = 4   
New refCnts for V09: refCnt =  3, refCntWtd = 6   
New refCnts for V11: refCnt =  1, refCntWtd = 2   
New refCnts for V11: refCnt =  2, refCntWtd = 4   
New refCnts for V00: refCnt =  3, refCntWtd = 3   
New refCnts for V12: refCnt =  1, refCntWtd = 2   
New refCnts for V12: refCnt =  2, refCntWtd = 4   
New refCnts for V11: refCnt =  3, refCntWtd = 6   
New refCnts for V12: refCnt =  3, refCntWtd = 6   
New refCnts for V17: refCnt =  3, refCntWtd = 3   
New refCnts for V02: refCnt =  3, refCntWtd = 3   
New refCnts for V17: refCnt =  4, refCntWtd = 4   
New refCnts for V02: refCnt =  4, refCntWtd = 4   
New refCnts for V22: refCnt =  1, refCntWtd = 2   
New refCnts for V22: refCnt =  2, refCntWtd = 4   
New refCnts for V03: refCnt =  1, refCntWtd = 1   
New refCnts for V00: refCnt =  4, refCntWtd = 11   
New refCnts for V04: refCnt =  1, refCntWtd = 8   
New refCnts for V05: refCnt =  1, refCntWtd = 8   
New refCnts for V05: refCnt =  2, refCntWtd = 16   
New refCnts for V04: refCnt =  2, refCntWtd = 16   
New refCnts for V13: refCnt =  1, refCntWtd = 16   
New refCnts for V00: refCnt =  5, refCntWtd = 19   
New refCnts for V14: refCnt =  1, refCntWtd = 16   
New refCnts for V13: refCnt =  2, refCntWtd = 32   
New refCnts for V14: refCnt =  2, refCntWtd = 32   
New refCnts for V13: refCnt =  3, refCntWtd = 48   
New refCnts for V00: refCnt =  6, refCntWtd = 27   
New refCnts for V28: refCnt =  1, refCntWtd = 8   
New refCnts for V28: refCnt =  2, refCntWtd = 16   
New refCnts for V28: refCnt =  3, refCntWtd = 24   
New refCnts for V27: refCnt =  1, refCntWtd = 8   
New refCnts for V27: refCnt =  2, refCntWtd = 16   
New refCnts for V15: refCnt =  1, refCntWtd = 16   
New refCnts for V27: refCnt =  3, refCntWtd = 24   
New refCnts for V16: refCnt =  1, refCntWtd = 16   
New refCnts for V15: refCnt =  2, refCntWtd = 32   
New refCnts for V16: refCnt =  2, refCntWtd = 32   
New refCnts for V15: refCnt =  3, refCntWtd = 48   
New refCnts for V05: refCnt =  3, refCntWtd = 24   
New refCnts for V04: refCnt =  3, refCntWtd = 20   
New refCnts for V03: refCnt =  2, refCntWtd = 9   
New refCnts for V03: refCnt =  3, refCntWtd = 17   
New refCnts for V03: refCnt =  4, refCntWtd = 25   
New refCnts for V17: refCnt =  5, refCntWtd = 5   
New refCnts for V02: refCnt =  5, refCntWtd = 5   
New refCnts for V17: refCnt =  6, refCntWtd = 6   
New refCnts for V02: refCnt =  6, refCntWtd = 6   
New refCnts for V23: refCnt =  1, refCntWtd = 2   
New refCnts for V23: refCnt =  2, refCntWtd = 4   
New refCnts for V00: refCnt =  7, refCntWtd = 35   
New refCnts for V04: refCnt =  4, refCntWtd = 28   
New refCnts for V05: refCnt =  4, refCntWtd = 32   
New refCnts for V05: refCnt =  5, refCntWtd = 40   
New refCnts for V04: refCnt =  5, refCntWtd = 36   
New refCnts for V00: refCnt =  8, refCntWtd = 43   
New refCnts for V29: refCnt =  1, refCntWtd = 8   
New refCnts for V29: refCnt =  2, refCntWtd = 16   
New refCnts for V29: refCnt =  3, refCntWtd = 24   
New refCnts for V05: refCnt =  6, refCntWtd = 48   
New refCnts for V04: refCnt =  6, refCntWtd = 40   
New refCnts for V17: refCnt =  7, refCntWtd = 7   
New refCnts for V02: refCnt =  7, refCntWtd = 7   
New refCnts for V17: refCnt =  8, refCntWtd = 8   
New refCnts for V02: refCnt =  8, refCntWtd = 8   
New refCnts for V24: refCnt =  1, refCntWtd = 2   
New refCnts for V24: refCnt =  2, refCntWtd = 4   
New refCnts for V18: refCnt =  1, refCntWtd = 8   
New refCnts for V19: refCnt =  1, refCntWtd = 8   
New refCnts for V20: refCnt =  1, refCntWtd = 8   
New refCnts for V06: refCnt =  1, refCntWtd = 8   
New refCnts for V06: refCnt =  2, refCntWtd = 16   
New refCnts for V19: refCnt =  2, refCntWtd = 16   
New refCnts for V06: refCnt =  3, refCntWtd = 17   
New refCnts for V19: refCnt =  3, refCntWtd = 17   
New refCnts for V06: refCnt =  4, refCntWtd = 18   
New refCnts for V19: refCnt =  4, refCntWtd = 18   
New refCnts for V00: refCnt =  9, refCntWtd = 44   
New refCnts for V06: refCnt =  5, refCntWtd = 19   
New refCnts for V19: refCnt =  5, refCntWtd = 19   
New refCnts for V00: refCnt = 10, refCntWtd = 45   
New refCnts for V05: refCnt =  7, refCntWtd = 48   
New refCnts for V04: refCnt =  7, refCntWtd = 40   
New refCnts for V05: refCnt =  8, refCntWtd = 49   
New refCnts for V04: refCnt =  8, refCntWtd = 41   

*** lvaComputeRefCounts -- implicit counts ***
New refCnts for V00: refCnt = 11, refCntWtd = 46   
New refCnts for V00: refCnt = 12, refCntWtd = 47   

*************** Finishing PHASE Lowering nodeinfo
Trees after Lowering nodeinfo

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..072)                                     i hascall gcsafe newobj LIR 
BB02 [0001]  2       BB01,BB06             8     0 [072..07B)                                     i Loop gcsafe bwd bwd-target LIR 
BB03 [0002]  1  0    BB02                  8     0 [07B..0CA)                 T0      try { }     keep i try hascall gcsafe newobj bwd LIR 
BB04 [0038]  1       BB03                  8     0 [0CA..0CD)-> BB06 ( cond )                     keep i gcsafe bwd LIR cfb 
BB05 [0039]  1       BB04                  4     0 [0CD..0D4)                                     i hascall gcsafe bwd LIR 
BB06 [0006]  2       BB04,BB05             8     0 [0D4..0DD)-> BB02 ( cond )                     i gcsafe bwd LIR 
BB07 [0008]  1       BB06                  1       [0DD..0F9)                                     i hascall gcsafe LIR 
BB08 [0009]  2       BB07,BB12             8     1 [0F9..102)                                     i Loop gcsafe bwd bwd-target LIR 
BB09 [0010]  1  1    BB08                  8     1 [102..122)-> BB13 ( cond ) T1      try { }     keep i try hascall gcsafe bwd LIR 
BB10 [0041]  1       BB09                  8     1 [126..129)-> BB12 ( cond )                     keep i gcsafe bwd LIR cfb 
BB11 [0042]  1       BB10                  4     1 [129..130)                                     i hascall gcsafe bwd LIR 
BB12 [0016]  2       BB10,BB11             8     1 [130..139)-> BB08 (always)                     i hascall gcsafe bwd LIR 
BB13 [0030]  1       BB09                  1       [???..???)-> BB30 (callf )                     i internal gcsafe LIR 
BB14 [0031]  1       BB32                  1       [???..???)-> BB15 (ALWAYS)                     i internal gcsafe LIR KEEP 
BB15 [0017]  1       BB14                  1       [139..17D)                                     i hascall gcsafe LIR 
BB19 [0018]  5       BB15,BB20,BB22,BB24,BB25   8     5 [17D..18F)-> BB21 ( cond )                     i Loop hascall gcsafe bwd bwd-target LIR 
BB20 [0019]  1       BB19                  8     5 [18F..19B)-> BB19 (always)                     i hascall gcsafe bwd LIR 
BB21 [0020]  1       BB19                  1     4 [19B..1A6)-> BB23 ( cond )                     i gcsafe bwd LIR 
BB22 [0021]  1       BB21                  1     4 [1A6..1AD)-> BB19 (always)                     i hascall gcsafe bwd LIR 
BB23 [0022]  1       BB21                  1     3 [1AD..1B8)-> BB25 ( cond )                     i gcsafe bwd LIR 
BB24 [0023]  1       BB23                  1     3 [1B8..1C1)-> BB19 (always)                     i gcsafe bwd LIR 
BB25 [0024]  1       BB23                  1     2 [1C1..1CC)-> BB19 ( cond )                     i gcsafe bwd LIR 
BB26 [0025]  1       BB25                  1       [1CC..1D4)        (return)                     i gcsafe LIR 
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ funclets follow
BB27 [0003]  1     0                       0       [0CA..0CD)-> BB29 ( cond )    H0 F fault {     keep i rare flet bwd LIR 
BB28 [0004]  1     0 BB27                  0       [0CD..0D3)                    H0               i rare hascall bwd LIR 
BB29 [0005]  2     0 BB27,BB28             0       [0D3..0D4)        (finret)    H0   }           i rare bwd LIR 
BB30 [0013]  2     1 BB13                  1       [126..129)-> BB32 ( cond )    H1 F finally {   keep i gcsafe flet bwd LIR 
BB31 [0014]  1     1 BB30                  1       [129..12F)                    H1               i hascall gcsafe bwd LIR 
BB32 [0015]  2     1 BB30,BB31             1       [12F..130)        (finret)    H1   }           i gcsafe bwd LIR 
-----------------------------------------------------------------------------------------------------------------------------------------

------------ BB01 [000..072), preds={} succs={BB02}
               [000425] ------------                 IL_OFFSET void   IL offset: 0x0
N001 ( 14,  5) [000000] --CXG-------         t0 =    CALL      long   System.DateTime.get_Now $c0
                                                  /--*  t0     long   
N003 ( 18,  8) [000003] DA-XG-------              *  STORE_LCL_VAR struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  *    long   V02._dateData (offs=0x00) -> V17 tmp10        
               [000426] ------------                 IL_OFFSET void   IL offset: 0x6
N003 (  3,  2) [000004] -------N----         t4 =    LCL_VAR_ADDR byref  V02 loc0         
                                                  *    long   V02._dateData (offs=0x00) -> V17 tmp10        
                                                  /--*  t4     byref  
               [000478] ------------       t478 = *  PUTARG_REG byref  REG rcx
                                                  /--*  t478   byref  this in rcx
N005 ( 17, 10) [000006] --CXG-------         t6 = *  CALL      ref    System.DateTime.ToString $84
                                                  /--*  t6     ref    
N007 ( 17, 10) [000272] DA-XG-----L-              *  STORE_LCL_VAR ref    V21 tmp14        d:2
N009 (  1,  1) [000273] ------------       t273 =    LCL_VAR   ref    V21 tmp14        u:2 (last use) $84
                                                  /--*  t273   ref    
               [000479] ------------       t479 = *  PUTARG_REG ref    REG rcx
N010 (  2, 10) [000269] H-----------       t269 =    CNS_INT(h) long   0x750031F0 "	 Created list" $1c0
                                                  /--*  t269   long   
N011 (  4, 12) [000270] #---G-------       t270 = *  IND       ref    $88
                                                  /--*  t270   ref    
               [000480] ----G-------       t480 = *  PUTARG_REG ref    REG rdx
                                                  /--*  t479   ref    arg0 in rcx
                                                  +--*  t480   ref    arg1 in rdx
N012 ( 39, 30) [000008] --CXG-------         t8 = *  CALL      ref    System.String.Concat $89
                                                  /--*  t8     ref    
               [000481] --CXG-------       t481 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t481   ref    arg0 in rcx
N013 ( 53, 36) [000009] --CXG-------              *  CALL      void   System.Console.WriteLine $VN.Void
               [000427] ------------                 IL_OFFSET void   IL offset: 0x1c
N002 (  2, 10) [000011] H-----------        t11 =    CNS_INT(h) long   0x7ffdb3ee2350 method $1c1
                                                  /--*  t11    long   
               [000482] ------------       t482 = *  PUTARG_REG long   REG rcx
                                                  /--*  t482   long   arg0 in rcx
N003 ( 16, 16) [000012] --C---------        t12 = *  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST $240
                                                  /--*  t12    ref    
N005 ( 16, 16) [000014] DA----------              *  STORE_LCL_VAR ref    V08 tmp1         d:2
N002 (  1,  1) [000015] ------------        t15 =    LCL_VAR   ref    V08 tmp1         u:2 $240
                                                  /--*  t15    ref    
               [000483] ------------       t483 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t483   ref    this in rcx
N003 ( 15,  8) [000016] --CXG-------              *  CALL      void   FalseLeakRepro.List..ctor $VN.Void
               [000428] ------------                 IL_OFFSET void   IL offset: 0x22
N001 (  1,  1) [000010] ------------        t10 =    LCL_VAR   ref    V00 this         u:1 $80
                                                  /--*  t10    ref    
N003 (  2,  2) [000279] ------------       t279 = *  LEA(b+8)  byref 
N005 (  1,  1) [000017] ------------        t17 =    LCL_VAR   ref    V08 tmp1         u:2 (last use) $240
                                                  /--*  t279   byref  
                                                  +--*  t17    ref    
               [000429] -A-XG-------              *  STOREIND  ref   
               [000430] ------------                 IL_OFFSET void   IL offset: 0x27
N002 (  2, 10) [000023] H-----------        t23 =    CNS_INT(h) long   0x7ffdb3b058b8 token $1c3
                                                  /--*  t23    long   
               [000484] ------------       t484 = *  PUTARG_REG long   REG rcx
                                                  /--*  t484   long   arg0 in rcx
N003 ( 16, 16) [000024] --C---------        t24 = *  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST $243
                                                  /--*  t24    ref    
N005 ( 16, 16) [000026] DA----------              *  STORE_LCL_VAR ref    V09 tmp2         d:2
N001 (  1,  1) [000020] ------------        t20 =    LCL_VAR   ref    V00 this         u:1 $80
                                                  /--*  t20    ref    
N003 (  2,  2) [000284] -c----------       t284 = *  LEA(b+8)  byref 
                                                  /--*  t284   byref  
N004 (  4,  4) [000021] n---GO------        t21 = *  IND       ref    <l:$246, c:$245>
                                                  /--*  t21    ref    
N006 (  5,  5) [000282] -c----------       t282 = *  LEA(b+8)  byref 
                                                  /--*  t282   byref  
N007 (  7,  7) [000022] ---XGO------        t22 = *  IND       ref    <l:$250, c:$24f>
                                                  /--*  t22    ref    
N009 (  7,  7) [000030] DA-XGO------              *  STORE_LCL_VAR ref    V10 tmp3         d:2
N002 (  1,  1) [000027] ------------        t27 =    LCL_VAR   ref    V09 tmp2         u:2 $243
                                                  /--*  t27    ref    
               [000485] ------------       t485 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t485   ref    this in rcx
N003 ( 15,  8) [000028] --CXG-------              *  CALL      void   System.Object..ctor $VN.Void
               [000431] ------------                 IL_OFFSET void   IL offset: 0x37
N001 (  1,  1) [000031] ------------        t31 =    LCL_VAR   ref    V10 tmp3         u:2 (last use) <l:$248, c:$94>
                                                  /--*  t31    ref    
N003 (  2,  2) [000287] ------------       t287 = *  LEA(b+16) byref 
N005 (  1,  1) [000032] ------------        t32 =    LCL_VAR   ref    V09 tmp2         u:2 (last use) $243
                                                  /--*  t287   byref  
                                                  +--*  t32    ref    
               [000432] -A-XG-------              *  STOREIND  ref   
               [000433] ------------                 IL_OFFSET void   IL offset: 0x3c
N002 (  2, 10) [000037] H-----------        t37 =    CNS_INT(h) long   0x7ffdb3ee6200 token $1c6
                                                  /--*  t37    long   
               [000486] ------------       t486 = *  PUTARG_REG long   REG rcx
                                                  /--*  t486   long   arg0 in rcx
N003 ( 16, 16) [000038] --C---------        t38 = *  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST $253
                                                  /--*  t38    ref    
N005 ( 16, 16) [000040] DA----------              *  STORE_LCL_VAR ref    V11 tmp4         d:2
N004 (  1,  1) [000041] ------------        t41 =    LCL_VAR   ref    V11 tmp4         u:2 $253
                                                  /--*  t41    ref    
               [000487] ------------       t487 = *  PUTARG_REG ref    REG rcx
N005 (  1,  1) [000035] ------------        t35 =    LCL_VAR   ref    V00 this         u:1 $80
                                                  /--*  t35    ref    
               [000488] ------------       t488 = *  PUTARG_REG ref    REG rdx
N006 (  2, 10) [000036] H-----------        t36 =    CNS_INT(h) long   0x7ffdb3b213f8 ftn $1c7
                                                  /--*  t36    long   
               [000489] ------------       t489 = *  PUTARG_REG long   REG r8
                                                  /--*  t487   ref    this in rcx
                                                  +--*  t488   ref    arg1 in rdx
                                                  +--*  t489   long   arg2 in r8
N007 ( 18, 21) [000042] --CXG-------              *  CALL      void   System.MulticastDelegate.CtorClosed $VN.Void
               [000434] ------------                 IL_OFFSET void   IL offset: 0x48
N002 (  2, 10) [000044] H-----------        t44 =    CNS_INT(h) long   0x7ffdb3c84e80 token $1c8
                                                  /--*  t44    long   
               [000490] ------------       t490 = *  PUTARG_REG long   REG rcx
                                                  /--*  t490   long   arg0 in rcx
N003 ( 16, 16) [000045] --C---------        t45 = *  CALL help ref    HELPER.CORINFO_HELP_NEWFAST $254
                                                  /--*  t45    ref    
N005 ( 16, 16) [000047] DA----------              *  STORE_LCL_VAR ref    V12 tmp5         d:2
N003 (  1,  1) [000048] ------------        t48 =    LCL_VAR   ref    V12 tmp5         u:2 $254
                                                  /--*  t48    ref    
               [000491] ------------       t491 = *  PUTARG_REG ref    REG rcx
N004 (  1,  1) [000043] ------------        t43 =    LCL_VAR   ref    V11 tmp4         u:2 (last use) $253
                                                  /--*  t43    ref    
               [000492] ------------       t492 = *  PUTARG_REG ref    REG rdx
                                                  /--*  t491   ref    this in rcx
                                                  +--*  t492   ref    arg1 in rdx
N005 ( 16, 10) [000049] --CXG-------              *  CALL      void   System.Threading.Thread..ctor $VN.Void
               [000435] ------------                 IL_OFFSET void   IL offset: 0x4d
N002 (  1,  1) [000050] ------------        t50 =    LCL_VAR   ref    V12 tmp5         u:2 (last use) $254
                                                  /--*  t50    ref    
               [000493] ------------       t493 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t493   ref    this in rcx
N003 ( 15,  8) [000051] --CXG-------              *  CALL      void   System.Threading.Thread.Start $VN.Void
               [000436] ------------                 IL_OFFSET void   IL offset: 0x52
N001 ( 14,  5) [000052] --CXG-------        t52 =    CALL      long   System.DateTime.get_Now $c2
                                                  /--*  t52    long   
N003 ( 18,  8) [000055] DA-XG-------              *  STORE_LCL_VAR struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  *    long   V02._dateData (offs=0x00) -> V17 tmp10        
               [000437] ------------                 IL_OFFSET void   IL offset: 0x58
N003 (  3,  2) [000056] -------N----        t56 =    LCL_VAR_ADDR byref  V02 loc0         
                                                  *    long   V02._dateData (offs=0x00) -> V17 tmp10        
                                                  /--*  t56    byref  
               [000494] ------------       t494 = *  PUTARG_REG byref  REG rcx
                                                  /--*  t494   byref  this in rcx
N005 ( 17, 10) [000058] --CXG-------        t58 = *  CALL      ref    System.DateTime.ToString $a8
                                                  /--*  t58    ref    
N007 ( 17, 10) [000300] DA-XG-----L-              *  STORE_LCL_VAR ref    V22 tmp15        d:2
N009 (  1,  1) [000301] ------------       t301 =    LCL_VAR   ref    V22 tmp15        u:2 (last use) $a8
                                                  /--*  t301   ref    
               [000495] ------------       t495 = *  PUTARG_REG ref    REG rcx
N010 (  2, 10) [000297] H-----------       t297 =    CNS_INT(h) long   0x750031F8 "	 Consumer thread started, adding items..." $1c9
                                                  /--*  t297   long   
N011 (  4, 12) [000298] #---G-------       t298 = *  IND       ref    $ac
                                                  /--*  t298   ref    
               [000496] ----G-------       t496 = *  PUTARG_REG ref    REG rdx
                                                  /--*  t495   ref    arg0 in rcx
                                                  +--*  t496   ref    arg1 in rdx
N012 ( 39, 30) [000060] --CXG-------        t60 = *  CALL      ref    System.String.Concat $ad
                                                  /--*  t60    ref    
               [000497] --CXG-------       t497 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t497   ref    arg0 in rcx
N013 ( 53, 36) [000061] --CXG-------              *  CALL      void   System.Console.WriteLine $VN.Void
               [000438] ------------                 IL_OFFSET void   IL offset: 0x6e
N001 (  1,  1) [000062] ------------        t62 =    CNS_INT   int    0 $40
                                                  /--*  t62    int    
N003 (  1,  3) [000064] DA----------              *  STORE_LCL_VAR int    V03 loc1         d:2

------------ BB02 [072..07B), preds={BB01,BB06} succs={BB03}
               [000439] ------------                 IL_OFFSET void   IL offset: 0x72
N001 (  1,  1) [000069] ------------        t69 =    LCL_VAR   ref    V00 this         u:1 $80
                                                  /--*  t69    ref    
N003 (  2,  2) [000305] -c----------       t305 = *  LEA(b+8)  byref 
                                                  /--*  t305   byref  
N004 (  4,  4) [000070] n---GO------        t70 = *  IND       ref    <l:$258, c:$257>
                                                  /--*  t70    ref    
N006 (  8,  7) [000072] DA--GO------              *  STORE_LCL_VAR ref    V04 loc2         d:3
               [000440] ------------                 IL_OFFSET void   IL offset: 0x79
N001 (  1,  1) [000073] ------------        t73 =    CNS_INT   int    0 $40
                                                  /--*  t73    int    
N003 (  5,  4) [000075] DA--G-------              *  STORE_LCL_VAR int   (AX) V05 loc3         

------------ BB03 [07B..0CA), preds={BB02} succs={BB04}
               [000441] ------------                 IL_OFFSET void   IL offset: 0x7b
N003 (  3,  3) [000078] ------------        t78 =    LCL_VAR_ADDR long   V05 loc3          $206
                                                  /--*  t78    long   
               [000498] ------------       t498 = *  PUTARG_REG long   REG rdx
N004 (  1,  1) [000076] ------------        t76 =    LCL_VAR   ref    V04 loc2         u:3 <l:$256, c:$b2>
                                                  /--*  t76    ref    
               [000499] ------------       t499 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t498   long   arg1 in rdx
                                                  +--*  t499   ref    arg0 in rcx
N005 ( 18, 11) [000079] --CXG-------              *  CALL      void   System.Threading.Monitor.Enter $VN.Void
               [000442] ------------                 IL_OFFSET void   IL offset: 0x83
N002 (  2, 10) [000083] H-----------        t83 =    CNS_INT(h) long   0x7ffdb3ee58a8 method $1ca
                                                  /--*  t83    long   
               [000500] ------------       t500 = *  PUTARG_REG long   REG rcx
                                                  /--*  t500   long   arg0 in rcx
N003 ( 16, 16) [000084] --C---------        t84 = *  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST $259
                                                  /--*  t84    ref    
N005 ( 16, 16) [000086] DA----------              *  STORE_LCL_VAR ref    V13 tmp6         d:2
N001 (  1,  1) [000080] ------------        t80 =    LCL_VAR   ref    V00 this         u:1 $80
                                                  /--*  t80    ref    
N003 (  2,  2) [000312] -c----------       t312 = *  LEA(b+8)  byref 
                                                  /--*  t312   byref  
N004 (  4,  4) [000081] n---GO------        t81 = *  IND       ref    <l:$25d, c:$25c>
                                                  /--*  t81    ref    
N006 (  5,  5) [000310] -c----------       t310 = *  LEA(b+8)  byref 
                                                  /--*  t310   byref  
N007 (  7,  7) [000082] ---XGO------        t82 = *  IND       ref    <l:$267, c:$266>
                                                  /--*  t82    ref    
N009 (  7,  7) [000090] DA-XGO------              *  STORE_LCL_VAR ref    V14 tmp7         d:2
N002 (  1,  1) [000087] ------------        t87 =    LCL_VAR   ref    V13 tmp6         u:2 $259
                                                  /--*  t87    ref    
               [000501] ------------       t501 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t501   ref    this in rcx
N003 ( 15,  8) [000230] --CXG-------              *  CALL      void   System.Object..ctor $VN.Void
               [000443] ------------                 IL_OFFSET void   IL offset: 0x93
N001 (  1,  1) [000091] ------------        t91 =    LCL_VAR   ref    V14 tmp7         u:2 (last use) <l:$25f, c:$b9>
                                                  /--*  t91    ref    
N003 (  2,  2) [000315] ------------       t315 = *  LEA(b+8)  byref 
N005 (  1,  1) [000092] ------------        t92 =    LCL_VAR   ref    V13 tmp6         u:2 (last use) $259
                                                  /--*  t315   byref  
                                                  +--*  t92    ref    
               [000444] -A-XG-------              *  STOREIND  ref   
               [000445] ------------                 IL_OFFSET void   IL offset: 0x98
N001 (  1,  1) [000095] ------------        t95 =    LCL_VAR   ref    V00 this         u:1 $80
                                                  /--*  t95    ref    
N003 (  2,  2) [000319] -c----------       t319 = *  LEA(b+8)  byref 
                                                  /--*  t319   byref  
N004 (  4,  4) [000096] n---GO------        t96 = *  IND       ref    <l:$26d, c:$26c>
                                                  /--*  t96    ref    
N006 (  4,  4) [000414] DA--GO------              *  STORE_LCL_VAR ref    V28 cse1         d:1
N007 (  1,  1) [000415] ------------       t415 =    LCL_VAR   ref    V28 cse1         u:1 <l:$26d, c:$26c>
                                                  /--*  t415   ref    
N010 (  6,  6) [000317] ------------       t317 = *  LEA(b+8)  byref 
N012 (  1,  1) [000417] ------------       t417 =    LCL_VAR   ref    V28 cse1         u:1 (last use) <l:$26b, c:$bf>
                                                  /--*  t417   ref    
N014 (  2,  2) [000323] -c----------       t323 = *  LEA(b+8)  byref 
                                                  /--*  t323   byref  
N015 (  4,  4) [000099] ---XG-------        t99 = *  IND       ref    <l:$278, c:$277>
                                                  /--*  t99    ref    
N017 (  5,  5) [000321] -c----------       t321 = *  LEA(b+8)  byref 
                                                  /--*  t321   byref  
N018 (  7,  7) [000100] ---XG-------       t100 = *  IND       ref    <l:$403, c:$402>
                                                  /--*  t100   ref    
N020 (  7,  7) [000409] DA-XG-------              *  STORE_LCL_VAR ref    V27 cse0         d:1
N021 (  1,  1) [000410] ------------       t410 =    LCL_VAR   ref    V27 cse0         u:1 <l:$403, c:$402>
                                                  /--*  t317   byref  
                                                  +--*  t410   ref    
               [000446] -A-XGO------              *  STOREIND  ref   
               [000447] ------------                 IL_OFFSET void   IL offset: 0xb3
N002 (  2, 10) [000106] H-----------       t106 =    CNS_INT(h) long   0x7ffdb3b058b8 token $1c3
                                                  /--*  t106   long   
               [000502] ------------       t502 = *  PUTARG_REG long   REG rcx
                                                  /--*  t502   long   arg0 in rcx
N003 ( 16, 16) [000107] --C---------       t107 = *  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST $404
                                                  /--*  t107   ref    
N005 ( 16, 16) [000109] DA----------              *  STORE_LCL_VAR ref    V15 tmp8         d:2
N001 (  1,  1) [000412] ------------       t412 =    LCL_VAR   ref    V27 cse0         u:1 (last use) <l:$279, c:$3c4>
                                                  /--*  t412   ref    
N003 (  1,  3) [000113] DA--G-------              *  STORE_LCL_VAR ref    V16 tmp9         d:2
N002 (  1,  1) [000110] ------------       t110 =    LCL_VAR   ref    V15 tmp8         u:2 $404
                                                  /--*  t110   ref    
               [000503] ------------       t503 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t503   ref    this in rcx
N003 ( 15,  8) [000111] --CXG-------              *  CALL      void   System.Object..ctor $VN.Void
               [000448] ------------                 IL_OFFSET void   IL offset: 0xc3
N001 (  1,  1) [000114] ------------       t114 =    LCL_VAR   ref    V16 tmp9         u:2 (last use) <l:$279, c:$3ca>
                                                  /--*  t114   ref    
N003 (  2,  2) [000333] ------------       t333 = *  LEA(b+16) byref 
N005 (  1,  1) [000115] ------------       t115 =    LCL_VAR   ref    V15 tmp8         u:2 (last use) $404
                                                  /--*  t333   byref  
                                                  +--*  t115   ref    
               [000449] -A-XG-------              *  STOREIND  ref   

------------ BB04 [0CA..0CD) -> BB06 (cond), preds={BB03} succs={BB05,BB06}
N001 (  3,  2) [000256] -c----------       t256 =    LCL_VAR   bool  (AX) V05 loc3          $382
N003 (  1,  1) [000257] -c----------       t257 =    CNS_INT   bool   0 $40
                                                  /--*  t256   bool   
                                                  +--*  t257   bool   
N004 (  6,  6) [000255] J---G--N-U--              *  EQ        void   $344
N005 (  8,  8) [000254] ----G-------              *  JTRUE     void  

------------ BB05 [0CD..0D4), preds={BB04} succs={BB06}
N002 (  1,  1) [000259] ------------       t259 =    LCL_VAR   ref    V04 loc2         u:3 (last use) <l:$256, c:$b2>
                                                  /--*  t259   ref    
               [000504] ------------       t504 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t504   ref    arg0 in rcx
N003 ( 15,  7) [000258] --CXG-------              *  CALL      void   System.Threading.Monitor.Exit $VN.Void

------------ BB06 [0D4..0DD) -> BB02 (cond), preds={BB04,BB05} succs={BB07,BB02}
               [000450] ------------                 IL_OFFSET void   IL offset: 0xd4
N001 (  1,  1) [000118] ------------       t118 =    LCL_VAR   int    V03 loc1         u:3 (last use) $380
N002 (  1,  1) [000119] -c----------       t119 =    CNS_INT   int    1 $4e
                                                  /--*  t118   int    
                                                  +--*  t119   int    
N003 (  3,  3) [000120] ------------       t120 = *  ADD       int    $345
                                                  /--*  t120   int    
N005 (  3,  3) [000122] DA----------              *  STORE_LCL_VAR int    V03 loc1         d:4
               [000451] ------------                 IL_OFFSET void   IL offset: 0xd8
N001 (  1,  1) [000065] ------------        t65 =    LCL_VAR   int    V03 loc1         u:4 $345
N002 (  1,  1) [000066] -c----------        t66 =    CNS_INT   int    10 $43
                                                  /--*  t65    int    
                                                  +--*  t66    int    
N003 (  3,  3) [000067] J------N----              *  LT        void   $346
N004 (  5,  5) [000068] ------------              *  JTRUE     void  

------------ BB07 [0DD..0F9), preds={BB06} succs={BB08}
               [000452] ------------                 IL_OFFSET void   IL offset: 0xdd
N001 ( 14,  5) [000130] --CXG-------       t130 =    CALL      long   System.DateTime.get_Now $c4
                                                  /--*  t130   long   
N003 ( 18,  8) [000133] DA-XG-------              *  STORE_LCL_VAR struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  *    long   V02._dateData (offs=0x00) -> V17 tmp10        
               [000453] ------------                 IL_OFFSET void   IL offset: 0xe3
N003 (  3,  2) [000134] -------N----       t134 =    LCL_VAR_ADDR byref  V02 loc0         
                                                  *    long   V02._dateData (offs=0x00) -> V17 tmp10        
                                                  /--*  t134   byref  
               [000505] ------------       t505 = *  PUTARG_REG byref  REG rcx
                                                  /--*  t505   byref  this in rcx
N005 ( 17, 10) [000136] --CXG-------       t136 = *  CALL      ref    System.DateTime.ToString $3d5
                                                  /--*  t136   ref    
N007 ( 17, 10) [000342] DA-XG-----L-              *  STORE_LCL_VAR ref    V23 tmp16        d:2
N009 (  1,  1) [000343] ------------       t343 =    LCL_VAR   ref    V23 tmp16        u:2 (last use) $3d5
                                                  /--*  t343   ref    
               [000506] ------------       t506 = *  PUTARG_REG ref    REG rcx
N010 (  2, 10) [000339] H-----------       t339 =    CNS_INT(h) long   0x75003200 "	 Waiting for list processing to complete..." $1cf
                                                  /--*  t339   long   
N011 (  4, 12) [000340] #---G-------       t340 = *  IND       ref    $3d9
                                                  /--*  t340   ref    
               [000507] ----G-------       t507 = *  PUTARG_REG ref    REG rdx
                                                  /--*  t506   ref    arg0 in rcx
                                                  +--*  t507   ref    arg1 in rdx
N012 ( 39, 30) [000138] --CXG-------       t138 = *  CALL      ref    System.String.Concat $3da
                                                  /--*  t138   ref    
               [000508] --CXG-------       t508 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t508   ref    arg0 in rcx
N013 ( 53, 36) [000139] --CXG-------              *  CALL      void   System.Console.WriteLine $VN.Void

------------ BB08 [0F9..102), preds={BB07,BB12} succs={BB09}
               [000454] ------------                 IL_OFFSET void   IL offset: 0xf9
N001 (  1,  1) [000140] ------------       t140 =    LCL_VAR   ref    V00 this         u:1 $80
                                                  /--*  t140   ref    
N003 (  2,  2) [000347] -c----------       t347 = *  LEA(b+8)  byref 
                                                  /--*  t347   byref  
N004 (  4,  4) [000141] n---GO------       t141 = *  IND       ref    <l:$41c, c:$41b>
                                                  /--*  t141   ref    
N006 (  8,  7) [000143] DA--GO------              *  STORE_LCL_VAR ref    V04 loc2         d:2
               [000455] ------------                 IL_OFFSET void   IL offset: 0x100
N001 (  1,  1) [000144] ------------       t144 =    CNS_INT   int    0 $40
                                                  /--*  t144   int    
N003 (  5,  4) [000146] DA--G-------              *  STORE_LCL_VAR int   (AX) V05 loc3         

------------ BB09 [102..122) -> BB13 (cond), preds={BB08} succs={BB10,BB13}
               [000456] ------------                 IL_OFFSET void   IL offset: 0x102
N003 (  3,  3) [000149] ------------       t149 =    LCL_VAR_ADDR long   V05 loc3          $20a
                                                  /--*  t149   long   
               [000509] ------------       t509 = *  PUTARG_REG long   REG rdx
N004 (  1,  1) [000147] ------------       t147 =    LCL_VAR   ref    V04 loc2         u:2 <l:$41a, c:$3df>
                                                  /--*  t147   ref    
               [000510] ------------       t510 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t509   long   arg1 in rdx
                                                  +--*  t510   ref    arg0 in rcx
N005 ( 18, 11) [000150] --CXG-------              *  CALL      void   System.Threading.Monitor.Enter $VN.Void
               [000457] ------------                 IL_OFFSET void   IL offset: 0x10a
N001 (  1,  1) [000151] ------------       t151 =    LCL_VAR   ref    V00 this         u:1 $80
                                                  /--*  t151   ref    
N003 (  2,  2) [000353] -c----------       t353 = *  LEA(b+8)  byref 
                                                  /--*  t353   byref  
N004 (  4,  4) [000152] n---GO------       t152 = *  IND       ref    <l:$420, c:$41f>
                                                  /--*  t152   ref    
N006 (  4,  4) [000419] DA--GO------              *  STORE_LCL_VAR ref    V29 cse2         d:1
N007 (  1,  1) [000420] ------------       t420 =    LCL_VAR   ref    V29 cse2         u:1 <l:$420, c:$41f>
                                                  /--*  t420   ref    
N010 (  6,  6) [000351] -c----------       t351 = *  LEA(b+8)  byref 
                                                  /--*  t351   byref  
N011 (  8,  8) [000153] ---XGO------       t153 = *  IND       ref    <l:$42a, c:$429>
N012 (  1,  1) [000422] ------------       t422 =    LCL_VAR   ref    V29 cse2         u:1 (last use) <l:$41e, c:$3e3>
                                                  /--*  t422   ref    
N014 (  2,  2) [000355] -c----------       t355 = *  LEA(b+16) byref 
                                                  /--*  t355   byref  
N015 (  4,  4) [000156] -c-XG-------       t156 = *  IND       ref    <l:$435, c:$434>
                                                  /--*  t153   ref    
                                                  +--*  t156   ref    
N016 ( 13, 13) [000157] N--XGO-N-U--              *  EQ        void   <l:$34a, c:$349>
N017 ( 15, 15) [000158] ---XGO------              *  JTRUE     void  

------------ BB10 [126..129) -> BB12 (cond), preds={BB09} succs={BB11,BB12}
N001 (  3,  2) [000263] -c----------       t263 =    LCL_VAR   bool  (AX) V05 loc3          $384
N003 (  1,  1) [000264] -c----------       t264 =    CNS_INT   bool   0 $40
                                                  /--*  t263   bool   
                                                  +--*  t264   bool   
N004 (  6,  6) [000262] J---G--N-U--              *  EQ        void   $34e
N005 (  8,  8) [000261] ----G-------              *  JTRUE     void  

------------ BB11 [129..130), preds={BB10} succs={BB12}
N002 (  1,  1) [000266] ------------       t266 =    LCL_VAR   ref    V04 loc2         u:2 (last use) <l:$41a, c:$3df>
                                                  /--*  t266   ref    
               [000511] ------------       t511 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t511   ref    arg0 in rcx
N003 ( 15,  7) [000265] --CXG-------              *  CALL      void   System.Threading.Monitor.Exit $VN.Void

------------ BB12 [130..139) -> BB08 (always), preds={BB10,BB11} succs={BB08}
               [000458] ------------                 IL_OFFSET void   IL offset: 0x130
N002 (  1,  1) [000159] ------------       t159 =    CNS_INT   int    100 $5b
                                                  /--*  t159   int    
               [000512] ------------       t512 = *  PUTARG_REG int    REG rcx
                                                  /--*  t512   int    arg0 in rcx
N003 ( 15,  7) [000160] --CXG-------              *  CALL      void   System.Threading.Thread.Sleep $VN.Void

------------ BB13 [???..???) -> BB30 (callf), preds={BB09} succs={BB30}

------------ BB14 [???..???) -> BB15 (ALWAYS), preds={BB32} succs={BB15}

------------ BB15 [139..17D), preds={BB14} succs={BB19}
               [000459] ------------                 IL_OFFSET void   IL offset: 0x139
N001 ( 14,  5) [000161] --CXG-------       t161 =    CALL      long   System.DateTime.get_Now $c6
                                                  /--*  t161   long   
N003 ( 18,  8) [000164] DA-XG-------              *  STORE_LCL_VAR struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  *    long   V02._dateData (offs=0x00) -> V17 tmp10        
               [000460] ------------                 IL_OFFSET void   IL offset: 0x13f
N003 (  3,  2) [000165] -------N----       t165 =    LCL_VAR_ADDR byref  V02 loc0         
                                                  *    long   V02._dateData (offs=0x00) -> V17 tmp10        
                                                  /--*  t165   byref  
               [000513] ------------       t513 = *  PUTARG_REG byref  REG rcx
                                                  /--*  t513   byref  this in rcx
N005 ( 17, 10) [000167] --CXG-------       t167 = *  CALL      ref    System.DateTime.ToString $3ef
                                                  /--*  t167   ref    
N007 ( 17, 10) [000367] DA-XG-----L-              *  STORE_LCL_VAR ref    V24 tmp17        d:2
N009 (  1,  1) [000368] ------------       t368 =    LCL_VAR   ref    V24 tmp17        u:2 (last use) $3ef
                                                  /--*  t368   ref    
               [000514] ------------       t514 = *  PUTARG_REG ref    REG rcx
N010 (  2, 10) [000364] H-----------       t364 =    CNS_INT(h) long   0x75003208 "	 Done.  Profiler is active, available options:" $1d3
                                                  /--*  t364   long   
N011 (  4, 12) [000365] #---G-------       t365 = *  IND       ref    $3f3
                                                  /--*  t365   ref    
               [000515] ----G-------       t515 = *  PUTARG_REG ref    REG rdx
                                                  /--*  t514   ref    arg0 in rcx
                                                  +--*  t515   ref    arg1 in rdx
N012 ( 39, 30) [000169] --CXG-------       t169 = *  CALL      ref    System.String.Concat $3f4
                                                  /--*  t169   ref    
               [000516] --CXG-------       t516 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t516   ref    arg0 in rcx
N013 ( 53, 36) [000170] --CXG-------              *  CALL      void   System.Console.WriteLine $VN.Void
               [000461] ------------                 IL_OFFSET void   IL offset: 0x155
N002 (  2, 10) [000371] H-----------       t371 =    CNS_INT(h) long   0x75003210 "   Q = quit" $1d4
                                                  /--*  t371   long   
N003 (  4, 12) [000372] #---G-------       t372 = *  IND       ref    $3f8
                                                  /--*  t372   ref    
               [000517] ----G-------       t517 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t517   ref    arg0 in rcx
N004 ( 18, 18) [000172] --CXG-------              *  CALL      void   System.Console.WriteLine $VN.Void
               [000462] ------------                 IL_OFFSET void   IL offset: 0x15f
N002 (  2, 10) [000374] H-----------       t374 =    CNS_INT(h) long   0x75003218 "   H = heap snapshot" $1d5
                                                  /--*  t374   long   
N003 (  4, 12) [000375] #---G-------       t375 = *  IND       ref    $3fb
                                                  /--*  t375   ref    
               [000518] ----G-------       t518 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t518   ref    arg0 in rcx
N004 ( 18, 18) [000174] --CXG-------              *  CALL      void   System.Console.WriteLine $VN.Void
               [000463] ------------                 IL_OFFSET void   IL offset: 0x169
N002 (  2, 10) [000377] H-----------       t377 =    CNS_INT(h) long   0x75003220 "   G = GC (max gen)" $1d6
                                                  /--*  t377   long   
N003 (  4, 12) [000378] #---G-------       t378 = *  IND       ref    $3fe
                                                  /--*  t378   ref    
               [000519] ----G-------       t519 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t519   ref    arg0 in rcx
N004 ( 18, 18) [000176] --CXG-------              *  CALL      void   System.Console.WriteLine $VN.Void
               [000464] ------------                 IL_OFFSET void   IL offset: 0x173
N002 (  2, 10) [000380] H-----------       t380 =    CNS_INT(h) long   0x75003228 "   R = clear the running flag to stop the consumer thread" $1d7
                                                  /--*  t380   long   
N003 (  4, 12) [000381] #---G-------       t381 = *  IND       ref    $4c1
                                                  /--*  t381   ref    
               [000520] ----G-------       t520 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t520   ref    arg0 in rcx
N004 ( 18, 18) [000178] --CXG-------              *  CALL      void   System.Console.WriteLine $VN.Void

------------ BB19 [17D..18F) -> BB21 (cond), preds={BB15,BB20,BB22,BB24,BB25} succs={BB20,BB21}
N003 (  3,  2) [000236] -------N----       t236 =    LCL_VAR_ADDR byref  V06 loc4         
                                                  *    ushort V06._keyChar (offs=0x00) -> V18 tmp11        
                                                  *    int    V06._key (offs=0x04) -> V19 tmp12        
                                                  *    int    V06._mods (offs=0x08) -> V20 tmp13        
                                                  /--*  t236   byref  
               [000521] ------------       t521 = *  PUTARG_REG byref  REG rcx
N005 (  1,  1) [000232] ------------       t232 =    CNS_INT   int    0 $40
                                                  /--*  t232   int    
               [000522] ------------       t522 = *  PUTARG_REG int    REG rdx
                                                  /--*  t521   byref  arg0 in rcx
                                                  +--*  t522   int    arg1 in rdx
N006 ( 18, 11) [000233] S-CXG-------              *  CALL      void   System.ConsolePal.ReadKey $VN.Void
N001 (  3,  2) [000240] -c----------       t240 =    LCL_VAR   int   (AX) V19 tmp12         $385
N002 (  1,  1) [000187] -c----------       t187 =    CNS_INT   int    71 $5e
                                                  /--*  t240   int    
                                                  +--*  t187   int    
N003 (  5,  4) [000188] N---G--N-U--              *  NE        void   $34f
N004 (  7,  6) [000189] ----G-------              *  JTRUE     void  

------------ BB20 [18F..19B) -> BB19 (always), preds={BB19} succs={BB19}
               [000465] ------------                 IL_OFFSET void   IL offset: 0x18f
N002 ( 14,  5) [000221] --CXG-------       t221 =    CALL      int    System.GC.get_MaxGeneration $305
                                                  /--*  t221   int    
               [000523] --CXG-------       t523 = *  PUTARG_REG int    REG rcx
                                                  /--*  t523   int    arg0 in rcx
N003 ( 28, 11) [000222] --CXG-------              *  CALL      void   System.GC.Collect $VN.Void

------------ BB21 [19B..1A6) -> BB23 (cond), preds={BB19} succs={BB22,BB23}
N001 (  3,  2) [000244] -c----------       t244 =    LCL_VAR   int   (AX) V19 tmp12         $385
N002 (  1,  1) [000194] -c----------       t194 =    CNS_INT   int    72 $5f
                                                  /--*  t244   int    
                                                  +--*  t194   int    
N003 (  5,  4) [000195] N---G--N-U--              *  NE        void   $350
N004 (  7,  6) [000196] ----G-------              *  JTRUE     void  

------------ BB22 [1A6..1AD) -> BB19 (always), preds={BB21} succs={BB19}
               [000466] ------------                 IL_OFFSET void   IL offset: 0x1a6
N001 ( 14,  5) [000220] --CXG-------                 CALL      void   System.Diagnostics.Debugger.Break $VN.Void

------------ BB23 [1AD..1B8) -> BB25 (cond), preds={BB21} succs={BB24,BB25}
N001 (  3,  2) [000248] -c----------       t248 =    LCL_VAR   int   (AX) V19 tmp12         $385
N002 (  1,  1) [000201] -c----------       t201 =    CNS_INT   int    82 $60
                                                  /--*  t248   int    
                                                  +--*  t201   int    
N003 (  5,  4) [000202] N---G--N-U--              *  NE        void   $351
N004 (  7,  6) [000203] ----G-------              *  JTRUE     void  

------------ BB24 [1B8..1C1) -> BB19 (always), preds={BB23} succs={BB19}
               [000467] ------------                 IL_OFFSET void   IL offset: 0x1b8
N001 (  1,  1) [000216] ------------       t216 =    LCL_VAR   ref    V00 this         u:1 $80
                                                  /--*  t216   ref    
N003 (  2,  2) [000387] -c----------       t387 = *  LEA(b+16) byref 
N005 (  1,  1) [000217] -c----------       t217 =    CNS_INT   int    0 $40
                                                  /--*  t387   byref  
                                                  +--*  t217   int    
               [000468] -A--GO------              *  STOREIND  bool  

------------ BB25 [1C1..1CC) -> BB19 (cond), preds={BB23} succs={BB26,BB19}
N001 (  3,  2) [000252] -c----------       t252 =    LCL_VAR   int   (AX) V19 tmp12         $385
N002 (  1,  1) [000208] -c----------       t208 =    CNS_INT   int    81 $61
                                                  /--*  t252   int    
                                                  +--*  t208   int    
N003 (  5,  4) [000209] N---G--N-U--              *  NE        void   $352
N004 (  7,  6) [000210] ----G-------              *  JTRUE     void  

------------ BB26 [1CC..1D4) (return), preds={BB25} succs={}
               [000469] ------------                 IL_OFFSET void   IL offset: 0x1cc
N001 (  1,  1) [000211] ------------       t211 =    LCL_VAR   ref    V00 this         u:1 (last use) $80
                                                  /--*  t211   ref    
N003 (  2,  2) [000389] -c----------       t389 = *  LEA(b+16) byref 
N005 (  1,  1) [000212] -c----------       t212 =    CNS_INT   int    0 $40
                                                  /--*  t389   byref  
                                                  +--*  t212   int    
               [000470] -A--GO------              *  STOREIND  bool  
               [000471] ------------                 IL_OFFSET void   IL offset: 0x1d3
N001 (  0,  0) [000215] ------------                 RETURN    void   $442

------------ BB27 [0CA..0CD) -> BB29 (cond), preds={} succs={BB28,BB29}
               [000472] ------------                 IL_OFFSET void   IL offset: 0xca
N001 (  3,  2) [000123] -c----------       t123 =    LCL_VAR   bool  (AX) V05 loc3          $381
N003 (  1,  1) [000124] -c----------       t124 =    CNS_INT   bool   0 $40
                                                  /--*  t123   bool   
                                                  +--*  t124   bool   
N004 (  6,  6) [000125] J---G--N-U--              *  EQ        void   $342
N005 (  8,  8) [000126] ----G-------              *  JTRUE     void  

------------ BB28 [0CD..0D3), preds={BB27} succs={BB29}
               [000473] ------------                 IL_OFFSET void   IL offset: 0xcd
N002 (  1,  1) [000128] ------------       t128 =    LCL_VAR   ref    V04 loc2         u:3 (last use) <l:$256, c:$b2>
                                                  /--*  t128   ref    
               [000524] ------------       t524 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t524   ref    arg0 in rcx
N003 ( 15,  7) [000129] --CXG-------              *  CALL      void   System.Threading.Monitor.Exit $VN.Void

------------ BB29 [0D3..0D4) (finret), preds={BB27,BB28} succs={}
               [000474] ------------                 IL_OFFSET void   IL offset: 0xd3
N001 (  0,  0) [000127] ------------                 RETFILT   void   $440

------------ BB30 [126..129) -> BB32 (cond), preds={BB13} succs={BB31,BB32}
               [000475] ------------                 IL_OFFSET void   IL offset: 0x126
N001 (  3,  2) [000223] -c----------       t223 =    LCL_VAR   bool  (AX) V05 loc3          $383
N003 (  1,  1) [000224] -c----------       t224 =    CNS_INT   bool   0 $40
                                                  /--*  t223   bool   
                                                  +--*  t224   bool   
N004 (  6,  6) [000225] J---G--N-U--              *  EQ        void   $34c
N005 (  8,  8) [000226] ----G-------              *  JTRUE     void  

------------ BB31 [129..12F), preds={BB30} succs={BB32}
               [000476] ------------                 IL_OFFSET void   IL offset: 0x129
N002 (  1,  1) [000228] ------------       t228 =    LCL_VAR   ref    V04 loc2         u:2 (last use) <l:$41a, c:$3df>
                                                  /--*  t228   ref    
               [000525] ------------       t525 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t525   ref    arg0 in rcx
N003 ( 15,  7) [000229] --CXG-------              *  CALL      void   System.Threading.Monitor.Exit $VN.Void

------------ BB32 [12F..130) (finret), preds={BB30,BB31} succs={BB14}
               [000477] ------------                 IL_OFFSET void   IL offset: 0x12f
N001 (  0,  0) [000227] ------------                 RETFILT   void   $441

-------------------------------------------------------------------------------------------------------------------
*************** In fgDebugCheckBBlist
Trees before Calculate stack level slots

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..072)                                     i hascall gcsafe newobj LIR 
BB02 [0001]  2       BB01,BB06             8     0 [072..07B)                                     i Loop gcsafe bwd bwd-target LIR 
BB03 [0002]  1  0    BB02                  8     0 [07B..0CA)                 T0      try { }     keep i try hascall gcsafe newobj bwd LIR 
BB04 [0038]  1       BB03                  8     0 [0CA..0CD)-> BB06 ( cond )                     keep i gcsafe bwd LIR cfb 
BB05 [0039]  1       BB04                  4     0 [0CD..0D4)                                     i hascall gcsafe bwd LIR 
BB06 [0006]  2       BB04,BB05             8     0 [0D4..0DD)-> BB02 ( cond )                     i gcsafe bwd LIR 
BB07 [0008]  1       BB06                  1       [0DD..0F9)                                     i hascall gcsafe LIR 
BB08 [0009]  2       BB07,BB12             8     1 [0F9..102)                                     i Loop gcsafe bwd bwd-target LIR 
BB09 [0010]  1  1    BB08                  8     1 [102..122)-> BB13 ( cond ) T1      try { }     keep i try hascall gcsafe bwd LIR 
BB10 [0041]  1       BB09                  8     1 [126..129)-> BB12 ( cond )                     keep i gcsafe bwd LIR cfb 
BB11 [0042]  1       BB10                  4     1 [129..130)                                     i hascall gcsafe bwd LIR 
BB12 [0016]  2       BB10,BB11             8     1 [130..139)-> BB08 (always)                     i hascall gcsafe bwd LIR 
BB13 [0030]  1       BB09                  1       [???..???)-> BB30 (callf )                     i internal gcsafe LIR 
BB14 [0031]  1       BB32                  1       [???..???)-> BB15 (ALWAYS)                     i internal gcsafe LIR KEEP 
BB15 [0017]  1       BB14                  1       [139..17D)                                     i hascall gcsafe LIR 
BB19 [0018]  5       BB15,BB20,BB22,BB24,BB25   8     5 [17D..18F)-> BB21 ( cond )                     i Loop hascall gcsafe bwd bwd-target LIR 
BB20 [0019]  1       BB19                  8     5 [18F..19B)-> BB19 (always)                     i hascall gcsafe bwd LIR 
BB21 [0020]  1       BB19                  1     4 [19B..1A6)-> BB23 ( cond )                     i gcsafe bwd LIR 
BB22 [0021]  1       BB21                  1     4 [1A6..1AD)-> BB19 (always)                     i hascall gcsafe bwd LIR 
BB23 [0022]  1       BB21                  1     3 [1AD..1B8)-> BB25 ( cond )                     i gcsafe bwd LIR 
BB24 [0023]  1       BB23                  1     3 [1B8..1C1)-> BB19 (always)                     i gcsafe bwd LIR 
BB25 [0024]  1       BB23                  1     2 [1C1..1CC)-> BB19 ( cond )                     i gcsafe bwd LIR 
BB26 [0025]  1       BB25                  1       [1CC..1D4)        (return)                     i gcsafe LIR 
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ funclets follow
BB27 [0003]  1     0                       0       [0CA..0CD)-> BB29 ( cond )    H0 F fault {     keep i rare flet bwd LIR 
BB28 [0004]  1     0 BB27                  0       [0CD..0D3)                    H0               i rare hascall bwd LIR 
BB29 [0005]  2     0 BB27,BB28             0       [0D3..0D4)        (finret)    H0   }           i rare bwd LIR 
BB30 [0013]  2     1 BB13                  1       [126..129)-> BB32 ( cond )    H1 F finally {   keep i gcsafe flet bwd LIR 
BB31 [0014]  1     1 BB30                  1       [129..12F)                    H1               i hascall gcsafe bwd LIR 
BB32 [0015]  2     1 BB30,BB31             1       [12F..130)        (finret)    H1   }           i gcsafe bwd LIR 
-----------------------------------------------------------------------------------------------------------------------------------------

------------ BB01 [000..072), preds={} succs={BB02}
               [000425] ------------                 IL_OFFSET void   IL offset: 0x0
N001 ( 14,  5) [000000] --CXG-------         t0 =    CALL      long   System.DateTime.get_Now $c0
                                                  /--*  t0     long   
N003 ( 18,  8) [000003] DA-XG-------              *  STORE_LCL_VAR struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  *    long   V02._dateData (offs=0x00) -> V17 tmp10        
               [000426] ------------                 IL_OFFSET void   IL offset: 0x6
N003 (  3,  2) [000004] -------N----         t4 =    LCL_VAR_ADDR byref  V02 loc0         
                                                  *    long   V02._dateData (offs=0x00) -> V17 tmp10        
                                                  /--*  t4     byref  
               [000478] ------------       t478 = *  PUTARG_REG byref  REG rcx
                                                  /--*  t478   byref  this in rcx
N005 ( 17, 10) [000006] --CXG-------         t6 = *  CALL      ref    System.DateTime.ToString $84
                                                  /--*  t6     ref    
N007 ( 17, 10) [000272] DA-XG-----L-              *  STORE_LCL_VAR ref    V21 tmp14        d:2
N009 (  1,  1) [000273] ------------       t273 =    LCL_VAR   ref    V21 tmp14        u:2 (last use) $84
                                                  /--*  t273   ref    
               [000479] ------------       t479 = *  PUTARG_REG ref    REG rcx
N010 (  2, 10) [000269] H-----------       t269 =    CNS_INT(h) long   0x750031F0 "	 Created list" $1c0
                                                  /--*  t269   long   
N011 (  4, 12) [000270] #---G-------       t270 = *  IND       ref    $88
                                                  /--*  t270   ref    
               [000480] ----G-------       t480 = *  PUTARG_REG ref    REG rdx
                                                  /--*  t479   ref    arg0 in rcx
                                                  +--*  t480   ref    arg1 in rdx
N012 ( 39, 30) [000008] --CXG-------         t8 = *  CALL      ref    System.String.Concat $89
                                                  /--*  t8     ref    
               [000481] --CXG-------       t481 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t481   ref    arg0 in rcx
N013 ( 53, 36) [000009] --CXG-------              *  CALL      void   System.Console.WriteLine $VN.Void
               [000427] ------------                 IL_OFFSET void   IL offset: 0x1c
N002 (  2, 10) [000011] H-----------        t11 =    CNS_INT(h) long   0x7ffdb3ee2350 method $1c1
                                                  /--*  t11    long   
               [000482] ------------       t482 = *  PUTARG_REG long   REG rcx
                                                  /--*  t482   long   arg0 in rcx
N003 ( 16, 16) [000012] --C---------        t12 = *  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST $240
                                                  /--*  t12    ref    
N005 ( 16, 16) [000014] DA----------              *  STORE_LCL_VAR ref    V08 tmp1         d:2
N002 (  1,  1) [000015] ------------        t15 =    LCL_VAR   ref    V08 tmp1         u:2 $240
                                                  /--*  t15    ref    
               [000483] ------------       t483 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t483   ref    this in rcx
N003 ( 15,  8) [000016] --CXG-------              *  CALL      void   FalseLeakRepro.List..ctor $VN.Void
               [000428] ------------                 IL_OFFSET void   IL offset: 0x22
N001 (  1,  1) [000010] ------------        t10 =    LCL_VAR   ref    V00 this         u:1 $80
                                                  /--*  t10    ref    
N003 (  2,  2) [000279] ------------       t279 = *  LEA(b+8)  byref 
N005 (  1,  1) [000017] ------------        t17 =    LCL_VAR   ref    V08 tmp1         u:2 (last use) $240
                                                  /--*  t279   byref  
                                                  +--*  t17    ref    
               [000429] -A-XG-------              *  STOREIND  ref   
               [000430] ------------                 IL_OFFSET void   IL offset: 0x27
N002 (  2, 10) [000023] H-----------        t23 =    CNS_INT(h) long   0x7ffdb3b058b8 token $1c3
                                                  /--*  t23    long   
               [000484] ------------       t484 = *  PUTARG_REG long   REG rcx
                                                  /--*  t484   long   arg0 in rcx
N003 ( 16, 16) [000024] --C---------        t24 = *  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST $243
                                                  /--*  t24    ref    
N005 ( 16, 16) [000026] DA----------              *  STORE_LCL_VAR ref    V09 tmp2         d:2
N001 (  1,  1) [000020] ------------        t20 =    LCL_VAR   ref    V00 this         u:1 $80
                                                  /--*  t20    ref    
N003 (  2,  2) [000284] -c----------       t284 = *  LEA(b+8)  byref 
                                                  /--*  t284   byref  
N004 (  4,  4) [000021] n---GO------        t21 = *  IND       ref    <l:$246, c:$245>
                                                  /--*  t21    ref    
N006 (  5,  5) [000282] -c----------       t282 = *  LEA(b+8)  byref 
                                                  /--*  t282   byref  
N007 (  7,  7) [000022] ---XGO------        t22 = *  IND       ref    <l:$250, c:$24f>
                                                  /--*  t22    ref    
N009 (  7,  7) [000030] DA-XGO------              *  STORE_LCL_VAR ref    V10 tmp3         d:2
N002 (  1,  1) [000027] ------------        t27 =    LCL_VAR   ref    V09 tmp2         u:2 $243
                                                  /--*  t27    ref    
               [000485] ------------       t485 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t485   ref    this in rcx
N003 ( 15,  8) [000028] --CXG-------              *  CALL      void   System.Object..ctor $VN.Void
               [000431] ------------                 IL_OFFSET void   IL offset: 0x37
N001 (  1,  1) [000031] ------------        t31 =    LCL_VAR   ref    V10 tmp3         u:2 (last use) <l:$248, c:$94>
                                                  /--*  t31    ref    
N003 (  2,  2) [000287] ------------       t287 = *  LEA(b+16) byref 
N005 (  1,  1) [000032] ------------        t32 =    LCL_VAR   ref    V09 tmp2         u:2 (last use) $243
                                                  /--*  t287   byref  
                                                  +--*  t32    ref    
               [000432] -A-XG-------              *  STOREIND  ref   
               [000433] ------------                 IL_OFFSET void   IL offset: 0x3c
N002 (  2, 10) [000037] H-----------        t37 =    CNS_INT(h) long   0x7ffdb3ee6200 token $1c6
                                                  /--*  t37    long   
               [000486] ------------       t486 = *  PUTARG_REG long   REG rcx
                                                  /--*  t486   long   arg0 in rcx
N003 ( 16, 16) [000038] --C---------        t38 = *  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST $253
                                                  /--*  t38    ref    
N005 ( 16, 16) [000040] DA----------              *  STORE_LCL_VAR ref    V11 tmp4         d:2
N004 (  1,  1) [000041] ------------        t41 =    LCL_VAR   ref    V11 tmp4         u:2 $253
                                                  /--*  t41    ref    
               [000487] ------------       t487 = *  PUTARG_REG ref    REG rcx
N005 (  1,  1) [000035] ------------        t35 =    LCL_VAR   ref    V00 this         u:1 $80
                                                  /--*  t35    ref    
               [000488] ------------       t488 = *  PUTARG_REG ref    REG rdx
N006 (  2, 10) [000036] H-----------        t36 =    CNS_INT(h) long   0x7ffdb3b213f8 ftn $1c7
                                                  /--*  t36    long   
               [000489] ------------       t489 = *  PUTARG_REG long   REG r8
                                                  /--*  t487   ref    this in rcx
                                                  +--*  t488   ref    arg1 in rdx
                                                  +--*  t489   long   arg2 in r8
N007 ( 18, 21) [000042] --CXG-------              *  CALL      void   System.MulticastDelegate.CtorClosed $VN.Void
               [000434] ------------                 IL_OFFSET void   IL offset: 0x48
N002 (  2, 10) [000044] H-----------        t44 =    CNS_INT(h) long   0x7ffdb3c84e80 token $1c8
                                                  /--*  t44    long   
               [000490] ------------       t490 = *  PUTARG_REG long   REG rcx
                                                  /--*  t490   long   arg0 in rcx
N003 ( 16, 16) [000045] --C---------        t45 = *  CALL help ref    HELPER.CORINFO_HELP_NEWFAST $254
                                                  /--*  t45    ref    
N005 ( 16, 16) [000047] DA----------              *  STORE_LCL_VAR ref    V12 tmp5         d:2
N003 (  1,  1) [000048] ------------        t48 =    LCL_VAR   ref    V12 tmp5         u:2 $254
                                                  /--*  t48    ref    
               [000491] ------------       t491 = *  PUTARG_REG ref    REG rcx
N004 (  1,  1) [000043] ------------        t43 =    LCL_VAR   ref    V11 tmp4         u:2 (last use) $253
                                                  /--*  t43    ref    
               [000492] ------------       t492 = *  PUTARG_REG ref    REG rdx
                                                  /--*  t491   ref    this in rcx
                                                  +--*  t492   ref    arg1 in rdx
N005 ( 16, 10) [000049] --CXG-------              *  CALL      void   System.Threading.Thread..ctor $VN.Void
               [000435] ------------                 IL_OFFSET void   IL offset: 0x4d
N002 (  1,  1) [000050] ------------        t50 =    LCL_VAR   ref    V12 tmp5         u:2 (last use) $254
                                                  /--*  t50    ref    
               [000493] ------------       t493 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t493   ref    this in rcx
N003 ( 15,  8) [000051] --CXG-------              *  CALL      void   System.Threading.Thread.Start $VN.Void
               [000436] ------------                 IL_OFFSET void   IL offset: 0x52
N001 ( 14,  5) [000052] --CXG-------        t52 =    CALL      long   System.DateTime.get_Now $c2
                                                  /--*  t52    long   
N003 ( 18,  8) [000055] DA-XG-------              *  STORE_LCL_VAR struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  *    long   V02._dateData (offs=0x00) -> V17 tmp10        
               [000437] ------------                 IL_OFFSET void   IL offset: 0x58
N003 (  3,  2) [000056] -------N----        t56 =    LCL_VAR_ADDR byref  V02 loc0         
                                                  *    long   V02._dateData (offs=0x00) -> V17 tmp10        
                                                  /--*  t56    byref  
               [000494] ------------       t494 = *  PUTARG_REG byref  REG rcx
                                                  /--*  t494   byref  this in rcx
N005 ( 17, 10) [000058] --CXG-------        t58 = *  CALL      ref    System.DateTime.ToString $a8
                                                  /--*  t58    ref    
N007 ( 17, 10) [000300] DA-XG-----L-              *  STORE_LCL_VAR ref    V22 tmp15        d:2
N009 (  1,  1) [000301] ------------       t301 =    LCL_VAR   ref    V22 tmp15        u:2 (last use) $a8
                                                  /--*  t301   ref    
               [000495] ------------       t495 = *  PUTARG_REG ref    REG rcx
N010 (  2, 10) [000297] H-----------       t297 =    CNS_INT(h) long   0x750031F8 "	 Consumer thread started, adding items..." $1c9
                                                  /--*  t297   long   
N011 (  4, 12) [000298] #---G-------       t298 = *  IND       ref    $ac
                                                  /--*  t298   ref    
               [000496] ----G-------       t496 = *  PUTARG_REG ref    REG rdx
                                                  /--*  t495   ref    arg0 in rcx
                                                  +--*  t496   ref    arg1 in rdx
N012 ( 39, 30) [000060] --CXG-------        t60 = *  CALL      ref    System.String.Concat $ad
                                                  /--*  t60    ref    
               [000497] --CXG-------       t497 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t497   ref    arg0 in rcx
N013 ( 53, 36) [000061] --CXG-------              *  CALL      void   System.Console.WriteLine $VN.Void
               [000438] ------------                 IL_OFFSET void   IL offset: 0x6e
N001 (  1,  1) [000062] ------------        t62 =    CNS_INT   int    0 $40
                                                  /--*  t62    int    
N003 (  1,  3) [000064] DA----------              *  STORE_LCL_VAR int    V03 loc1         d:2

------------ BB02 [072..07B), preds={BB01,BB06} succs={BB03}
               [000439] ------------                 IL_OFFSET void   IL offset: 0x72
N001 (  1,  1) [000069] ------------        t69 =    LCL_VAR   ref    V00 this         u:1 $80
                                                  /--*  t69    ref    
N003 (  2,  2) [000305] -c----------       t305 = *  LEA(b+8)  byref 
                                                  /--*  t305   byref  
N004 (  4,  4) [000070] n---GO------        t70 = *  IND       ref    <l:$258, c:$257>
                                                  /--*  t70    ref    
N006 (  8,  7) [000072] DA--GO------              *  STORE_LCL_VAR ref    V04 loc2         d:3
               [000440] ------------                 IL_OFFSET void   IL offset: 0x79
N001 (  1,  1) [000073] ------------        t73 =    CNS_INT   int    0 $40
                                                  /--*  t73    int    
N003 (  5,  4) [000075] DA--G-------              *  STORE_LCL_VAR int   (AX) V05 loc3         

------------ BB03 [07B..0CA), preds={BB02} succs={BB04}
               [000441] ------------                 IL_OFFSET void   IL offset: 0x7b
N003 (  3,  3) [000078] ------------        t78 =    LCL_VAR_ADDR long   V05 loc3          $206
                                                  /--*  t78    long   
               [000498] ------------       t498 = *  PUTARG_REG long   REG rdx
N004 (  1,  1) [000076] ------------        t76 =    LCL_VAR   ref    V04 loc2         u:3 <l:$256, c:$b2>
                                                  /--*  t76    ref    
               [000499] ------------       t499 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t498   long   arg1 in rdx
                                                  +--*  t499   ref    arg0 in rcx
N005 ( 18, 11) [000079] --CXG-------              *  CALL      void   System.Threading.Monitor.Enter $VN.Void
               [000442] ------------                 IL_OFFSET void   IL offset: 0x83
N002 (  2, 10) [000083] H-----------        t83 =    CNS_INT(h) long   0x7ffdb3ee58a8 method $1ca
                                                  /--*  t83    long   
               [000500] ------------       t500 = *  PUTARG_REG long   REG rcx
                                                  /--*  t500   long   arg0 in rcx
N003 ( 16, 16) [000084] --C---------        t84 = *  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST $259
                                                  /--*  t84    ref    
N005 ( 16, 16) [000086] DA----------              *  STORE_LCL_VAR ref    V13 tmp6         d:2
N001 (  1,  1) [000080] ------------        t80 =    LCL_VAR   ref    V00 this         u:1 $80
                                                  /--*  t80    ref    
N003 (  2,  2) [000312] -c----------       t312 = *  LEA(b+8)  byref 
                                                  /--*  t312   byref  
N004 (  4,  4) [000081] n---GO------        t81 = *  IND       ref    <l:$25d, c:$25c>
                                                  /--*  t81    ref    
N006 (  5,  5) [000310] -c----------       t310 = *  LEA(b+8)  byref 
                                                  /--*  t310   byref  
N007 (  7,  7) [000082] ---XGO------        t82 = *  IND       ref    <l:$267, c:$266>
                                                  /--*  t82    ref    
N009 (  7,  7) [000090] DA-XGO------              *  STORE_LCL_VAR ref    V14 tmp7         d:2
N002 (  1,  1) [000087] ------------        t87 =    LCL_VAR   ref    V13 tmp6         u:2 $259
                                                  /--*  t87    ref    
               [000501] ------------       t501 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t501   ref    this in rcx
N003 ( 15,  8) [000230] --CXG-------              *  CALL      void   System.Object..ctor $VN.Void
               [000443] ------------                 IL_OFFSET void   IL offset: 0x93
N001 (  1,  1) [000091] ------------        t91 =    LCL_VAR   ref    V14 tmp7         u:2 (last use) <l:$25f, c:$b9>
                                                  /--*  t91    ref    
N003 (  2,  2) [000315] ------------       t315 = *  LEA(b+8)  byref 
N005 (  1,  1) [000092] ------------        t92 =    LCL_VAR   ref    V13 tmp6         u:2 (last use) $259
                                                  /--*  t315   byref  
                                                  +--*  t92    ref    
               [000444] -A-XG-------              *  STOREIND  ref   
               [000445] ------------                 IL_OFFSET void   IL offset: 0x98
N001 (  1,  1) [000095] ------------        t95 =    LCL_VAR   ref    V00 this         u:1 $80
                                                  /--*  t95    ref    
N003 (  2,  2) [000319] -c----------       t319 = *  LEA(b+8)  byref 
                                                  /--*  t319   byref  
N004 (  4,  4) [000096] n---GO------        t96 = *  IND       ref    <l:$26d, c:$26c>
                                                  /--*  t96    ref    
N006 (  4,  4) [000414] DA--GO------              *  STORE_LCL_VAR ref    V28 cse1         d:1
N007 (  1,  1) [000415] ------------       t415 =    LCL_VAR   ref    V28 cse1         u:1 <l:$26d, c:$26c>
                                                  /--*  t415   ref    
N010 (  6,  6) [000317] ------------       t317 = *  LEA(b+8)  byref 
N012 (  1,  1) [000417] ------------       t417 =    LCL_VAR   ref    V28 cse1         u:1 (last use) <l:$26b, c:$bf>
                                                  /--*  t417   ref    
N014 (  2,  2) [000323] -c----------       t323 = *  LEA(b+8)  byref 
                                                  /--*  t323   byref  
N015 (  4,  4) [000099] ---XG-------        t99 = *  IND       ref    <l:$278, c:$277>
                                                  /--*  t99    ref    
N017 (  5,  5) [000321] -c----------       t321 = *  LEA(b+8)  byref 
                                                  /--*  t321   byref  
N018 (  7,  7) [000100] ---XG-------       t100 = *  IND       ref    <l:$403, c:$402>
                                                  /--*  t100   ref    
N020 (  7,  7) [000409] DA-XG-------              *  STORE_LCL_VAR ref    V27 cse0         d:1
N021 (  1,  1) [000410] ------------       t410 =    LCL_VAR   ref    V27 cse0         u:1 <l:$403, c:$402>
                                                  /--*  t317   byref  
                                                  +--*  t410   ref    
               [000446] -A-XGO------              *  STOREIND  ref   
               [000447] ------------                 IL_OFFSET void   IL offset: 0xb3
N002 (  2, 10) [000106] H-----------       t106 =    CNS_INT(h) long   0x7ffdb3b058b8 token $1c3
                                                  /--*  t106   long   
               [000502] ------------       t502 = *  PUTARG_REG long   REG rcx
                                                  /--*  t502   long   arg0 in rcx
N003 ( 16, 16) [000107] --C---------       t107 = *  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST $404
                                                  /--*  t107   ref    
N005 ( 16, 16) [000109] DA----------              *  STORE_LCL_VAR ref    V15 tmp8         d:2
N001 (  1,  1) [000412] ------------       t412 =    LCL_VAR   ref    V27 cse0         u:1 (last use) <l:$279, c:$3c4>
                                                  /--*  t412   ref    
N003 (  1,  3) [000113] DA--G-------              *  STORE_LCL_VAR ref    V16 tmp9         d:2
N002 (  1,  1) [000110] ------------       t110 =    LCL_VAR   ref    V15 tmp8         u:2 $404
                                                  /--*  t110   ref    
               [000503] ------------       t503 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t503   ref    this in rcx
N003 ( 15,  8) [000111] --CXG-------              *  CALL      void   System.Object..ctor $VN.Void
               [000448] ------------                 IL_OFFSET void   IL offset: 0xc3
N001 (  1,  1) [000114] ------------       t114 =    LCL_VAR   ref    V16 tmp9         u:2 (last use) <l:$279, c:$3ca>
                                                  /--*  t114   ref    
N003 (  2,  2) [000333] ------------       t333 = *  LEA(b+16) byref 
N005 (  1,  1) [000115] ------------       t115 =    LCL_VAR   ref    V15 tmp8         u:2 (last use) $404
                                                  /--*  t333   byref  
                                                  +--*  t115   ref    
               [000449] -A-XG-------              *  STOREIND  ref   

------------ BB04 [0CA..0CD) -> BB06 (cond), preds={BB03} succs={BB05,BB06}
N001 (  3,  2) [000256] -c----------       t256 =    LCL_VAR   bool  (AX) V05 loc3          $382
N003 (  1,  1) [000257] -c----------       t257 =    CNS_INT   bool   0 $40
                                                  /--*  t256   bool   
                                                  +--*  t257   bool   
N004 (  6,  6) [000255] J---G--N-U--              *  EQ        void   $344
N005 (  8,  8) [000254] ----G-------              *  JTRUE     void  

------------ BB05 [0CD..0D4), preds={BB04} succs={BB06}
N002 (  1,  1) [000259] ------------       t259 =    LCL_VAR   ref    V04 loc2         u:3 (last use) <l:$256, c:$b2>
                                                  /--*  t259   ref    
               [000504] ------------       t504 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t504   ref    arg0 in rcx
N003 ( 15,  7) [000258] --CXG-------              *  CALL      void   System.Threading.Monitor.Exit $VN.Void

------------ BB06 [0D4..0DD) -> BB02 (cond), preds={BB04,BB05} succs={BB07,BB02}
               [000450] ------------                 IL_OFFSET void   IL offset: 0xd4
N001 (  1,  1) [000118] ------------       t118 =    LCL_VAR   int    V03 loc1         u:3 (last use) $380
N002 (  1,  1) [000119] -c----------       t119 =    CNS_INT   int    1 $4e
                                                  /--*  t118   int    
                                                  +--*  t119   int    
N003 (  3,  3) [000120] ------------       t120 = *  ADD       int    $345
                                                  /--*  t120   int    
N005 (  3,  3) [000122] DA----------              *  STORE_LCL_VAR int    V03 loc1         d:4
               [000451] ------------                 IL_OFFSET void   IL offset: 0xd8
N001 (  1,  1) [000065] ------------        t65 =    LCL_VAR   int    V03 loc1         u:4 $345
N002 (  1,  1) [000066] -c----------        t66 =    CNS_INT   int    10 $43
                                                  /--*  t65    int    
                                                  +--*  t66    int    
N003 (  3,  3) [000067] J------N----              *  LT        void   $346
N004 (  5,  5) [000068] ------------              *  JTRUE     void  

------------ BB07 [0DD..0F9), preds={BB06} succs={BB08}
               [000452] ------------                 IL_OFFSET void   IL offset: 0xdd
N001 ( 14,  5) [000130] --CXG-------       t130 =    CALL      long   System.DateTime.get_Now $c4
                                                  /--*  t130   long   
N003 ( 18,  8) [000133] DA-XG-------              *  STORE_LCL_VAR struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  *    long   V02._dateData (offs=0x00) -> V17 tmp10        
               [000453] ------------                 IL_OFFSET void   IL offset: 0xe3
N003 (  3,  2) [000134] -------N----       t134 =    LCL_VAR_ADDR byref  V02 loc0         
                                                  *    long   V02._dateData (offs=0x00) -> V17 tmp10        
                                                  /--*  t134   byref  
               [000505] ------------       t505 = *  PUTARG_REG byref  REG rcx
                                                  /--*  t505   byref  this in rcx
N005 ( 17, 10) [000136] --CXG-------       t136 = *  CALL      ref    System.DateTime.ToString $3d5
                                                  /--*  t136   ref    
N007 ( 17, 10) [000342] DA-XG-----L-              *  STORE_LCL_VAR ref    V23 tmp16        d:2
N009 (  1,  1) [000343] ------------       t343 =    LCL_VAR   ref    V23 tmp16        u:2 (last use) $3d5
                                                  /--*  t343   ref    
               [000506] ------------       t506 = *  PUTARG_REG ref    REG rcx
N010 (  2, 10) [000339] H-----------       t339 =    CNS_INT(h) long   0x75003200 "	 Waiting for list processing to complete..." $1cf
                                                  /--*  t339   long   
N011 (  4, 12) [000340] #---G-------       t340 = *  IND       ref    $3d9
                                                  /--*  t340   ref    
               [000507] ----G-------       t507 = *  PUTARG_REG ref    REG rdx
                                                  /--*  t506   ref    arg0 in rcx
                                                  +--*  t507   ref    arg1 in rdx
N012 ( 39, 30) [000138] --CXG-------       t138 = *  CALL      ref    System.String.Concat $3da
                                                  /--*  t138   ref    
               [000508] --CXG-------       t508 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t508   ref    arg0 in rcx
N013 ( 53, 36) [000139] --CXG-------              *  CALL      void   System.Console.WriteLine $VN.Void

------------ BB08 [0F9..102), preds={BB07,BB12} succs={BB09}
               [000454] ------------                 IL_OFFSET void   IL offset: 0xf9
N001 (  1,  1) [000140] ------------       t140 =    LCL_VAR   ref    V00 this         u:1 $80
                                                  /--*  t140   ref    
N003 (  2,  2) [000347] -c----------       t347 = *  LEA(b+8)  byref 
                                                  /--*  t347   byref  
N004 (  4,  4) [000141] n---GO------       t141 = *  IND       ref    <l:$41c, c:$41b>
                                                  /--*  t141   ref    
N006 (  8,  7) [000143] DA--GO------              *  STORE_LCL_VAR ref    V04 loc2         d:2
               [000455] ------------                 IL_OFFSET void   IL offset: 0x100
N001 (  1,  1) [000144] ------------       t144 =    CNS_INT   int    0 $40
                                                  /--*  t144   int    
N003 (  5,  4) [000146] DA--G-------              *  STORE_LCL_VAR int   (AX) V05 loc3         

------------ BB09 [102..122) -> BB13 (cond), preds={BB08} succs={BB10,BB13}
               [000456] ------------                 IL_OFFSET void   IL offset: 0x102
N003 (  3,  3) [000149] ------------       t149 =    LCL_VAR_ADDR long   V05 loc3          $20a
                                                  /--*  t149   long   
               [000509] ------------       t509 = *  PUTARG_REG long   REG rdx
N004 (  1,  1) [000147] ------------       t147 =    LCL_VAR   ref    V04 loc2         u:2 <l:$41a, c:$3df>
                                                  /--*  t147   ref    
               [000510] ------------       t510 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t509   long   arg1 in rdx
                                                  +--*  t510   ref    arg0 in rcx
N005 ( 18, 11) [000150] --CXG-------              *  CALL      void   System.Threading.Monitor.Enter $VN.Void
               [000457] ------------                 IL_OFFSET void   IL offset: 0x10a
N001 (  1,  1) [000151] ------------       t151 =    LCL_VAR   ref    V00 this         u:1 $80
                                                  /--*  t151   ref    
N003 (  2,  2) [000353] -c----------       t353 = *  LEA(b+8)  byref 
                                                  /--*  t353   byref  
N004 (  4,  4) [000152] n---GO------       t152 = *  IND       ref    <l:$420, c:$41f>
                                                  /--*  t152   ref    
N006 (  4,  4) [000419] DA--GO------              *  STORE_LCL_VAR ref    V29 cse2         d:1
N007 (  1,  1) [000420] ------------       t420 =    LCL_VAR   ref    V29 cse2         u:1 <l:$420, c:$41f>
                                                  /--*  t420   ref    
N010 (  6,  6) [000351] -c----------       t351 = *  LEA(b+8)  byref 
                                                  /--*  t351   byref  
N011 (  8,  8) [000153] ---XGO------       t153 = *  IND       ref    <l:$42a, c:$429>
N012 (  1,  1) [000422] ------------       t422 =    LCL_VAR   ref    V29 cse2         u:1 (last use) <l:$41e, c:$3e3>
                                                  /--*  t422   ref    
N014 (  2,  2) [000355] -c----------       t355 = *  LEA(b+16) byref 
                                                  /--*  t355   byref  
N015 (  4,  4) [000156] -c-XG-------       t156 = *  IND       ref    <l:$435, c:$434>
                                                  /--*  t153   ref    
                                                  +--*  t156   ref    
N016 ( 13, 13) [000157] N--XGO-N-U--              *  EQ        void   <l:$34a, c:$349>
N017 ( 15, 15) [000158] ---XGO------              *  JTRUE     void  

------------ BB10 [126..129) -> BB12 (cond), preds={BB09} succs={BB11,BB12}
N001 (  3,  2) [000263] -c----------       t263 =    LCL_VAR   bool  (AX) V05 loc3          $384
N003 (  1,  1) [000264] -c----------       t264 =    CNS_INT   bool   0 $40
                                                  /--*  t263   bool   
                                                  +--*  t264   bool   
N004 (  6,  6) [000262] J---G--N-U--              *  EQ        void   $34e
N005 (  8,  8) [000261] ----G-------              *  JTRUE     void  

------------ BB11 [129..130), preds={BB10} succs={BB12}
N002 (  1,  1) [000266] ------------       t266 =    LCL_VAR   ref    V04 loc2         u:2 (last use) <l:$41a, c:$3df>
                                                  /--*  t266   ref    
               [000511] ------------       t511 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t511   ref    arg0 in rcx
N003 ( 15,  7) [000265] --CXG-------              *  CALL      void   System.Threading.Monitor.Exit $VN.Void

------------ BB12 [130..139) -> BB08 (always), preds={BB10,BB11} succs={BB08}
               [000458] ------------                 IL_OFFSET void   IL offset: 0x130
N002 (  1,  1) [000159] ------------       t159 =    CNS_INT   int    100 $5b
                                                  /--*  t159   int    
               [000512] ------------       t512 = *  PUTARG_REG int    REG rcx
                                                  /--*  t512   int    arg0 in rcx
N003 ( 15,  7) [000160] --CXG-------              *  CALL      void   System.Threading.Thread.Sleep $VN.Void

------------ BB13 [???..???) -> BB30 (callf), preds={BB09} succs={BB30}

------------ BB14 [???..???) -> BB15 (ALWAYS), preds={BB32} succs={BB15}

------------ BB15 [139..17D), preds={BB14} succs={BB19}
               [000459] ------------                 IL_OFFSET void   IL offset: 0x139
N001 ( 14,  5) [000161] --CXG-------       t161 =    CALL      long   System.DateTime.get_Now $c6
                                                  /--*  t161   long   
N003 ( 18,  8) [000164] DA-XG-------              *  STORE_LCL_VAR struct<System.DateTime, 8>(AX)(P) V02 loc0         
                                                  *    long   V02._dateData (offs=0x00) -> V17 tmp10        
               [000460] ------------                 IL_OFFSET void   IL offset: 0x13f
N003 (  3,  2) [000165] -------N----       t165 =    LCL_VAR_ADDR byref  V02 loc0         
                                                  *    long   V02._dateData (offs=0x00) -> V17 tmp10        
                                                  /--*  t165   byref  
               [000513] ------------       t513 = *  PUTARG_REG byref  REG rcx
                                                  /--*  t513   byref  this in rcx
N005 ( 17, 10) [000167] --CXG-------       t167 = *  CALL      ref    System.DateTime.ToString $3ef
                                                  /--*  t167   ref    
N007 ( 17, 10) [000367] DA-XG-----L-              *  STORE_LCL_VAR ref    V24 tmp17        d:2
N009 (  1,  1) [000368] ------------       t368 =    LCL_VAR   ref    V24 tmp17        u:2 (last use) $3ef
                                                  /--*  t368   ref    
               [000514] ------------       t514 = *  PUTARG_REG ref    REG rcx
N010 (  2, 10) [000364] H-----------       t364 =    CNS_INT(h) long   0x75003208 "	 Done.  Profiler is active, available options:" $1d3
                                                  /--*  t364   long   
N011 (  4, 12) [000365] #---G-------       t365 = *  IND       ref    $3f3
                                                  /--*  t365   ref    
               [000515] ----G-------       t515 = *  PUTARG_REG ref    REG rdx
                                                  /--*  t514   ref    arg0 in rcx
                                                  +--*  t515   ref    arg1 in rdx
N012 ( 39, 30) [000169] --CXG-------       t169 = *  CALL      ref    System.String.Concat $3f4
                                                  /--*  t169   ref    
               [000516] --CXG-------       t516 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t516   ref    arg0 in rcx
N013 ( 53, 36) [000170] --CXG-------              *  CALL      void   System.Console.WriteLine $VN.Void
               [000461] ------------                 IL_OFFSET void   IL offset: 0x155
N002 (  2, 10) [000371] H-----------       t371 =    CNS_INT(h) long   0x75003210 "   Q = quit" $1d4
                                                  /--*  t371   long   
N003 (  4, 12) [000372] #---G-------       t372 = *  IND       ref    $3f8
                                                  /--*  t372   ref    
               [000517] ----G-------       t517 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t517   ref    arg0 in rcx
N004 ( 18, 18) [000172] --CXG-------              *  CALL      void   System.Console.WriteLine $VN.Void
               [000462] ------------                 IL_OFFSET void   IL offset: 0x15f
N002 (  2, 10) [000374] H-----------       t374 =    CNS_INT(h) long   0x75003218 "   H = heap snapshot" $1d5
                                                  /--*  t374   long   
N003 (  4, 12) [000375] #---G-------       t375 = *  IND       ref    $3fb
                                                  /--*  t375   ref    
               [000518] ----G-------       t518 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t518   ref    arg0 in rcx
N004 ( 18, 18) [000174] --CXG-------              *  CALL      void   System.Console.WriteLine $VN.Void
               [000463] ------------                 IL_OFFSET void   IL offset: 0x169
N002 (  2, 10) [000377] H-----------       t377 =    CNS_INT(h) long   0x75003220 "   G = GC (max gen)" $1d6
                                                  /--*  t377   long   
N003 (  4, 12) [000378] #---G-------       t378 = *  IND       ref    $3fe
                                                  /--*  t378   ref    
               [000519] ----G-------       t519 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t519   ref    arg0 in rcx
N004 ( 18, 18) [000176] --CXG-------              *  CALL      void   System.Console.WriteLine $VN.Void
               [000464] ------------                 IL_OFFSET void   IL offset: 0x173
N002 (  2, 10) [000380] H-----------       t380 =    CNS_INT(h) long   0x75003228 "   R = clear the running flag to stop the consumer thread" $1d7
                                                  /--*  t380   long   
N003 (  4, 12) [000381] #---G-------       t381 = *  IND       ref    $4c1
                                                  /--*  t381   ref    
               [000520] ----G-------       t520 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t520   ref    arg0 in rcx
N004 ( 18, 18) [000178] --CXG-------              *  CALL      void   System.Console.WriteLine $VN.Void

------------ BB19 [17D..18F) -> BB21 (cond), preds={BB15,BB20,BB22,BB24,BB25} succs={BB20,BB21}
N003 (  3,  2) [000236] -------N----       t236 =    LCL_VAR_ADDR byref  V06 loc4         
                                                  *    ushort V06._keyChar (offs=0x00) -> V18 tmp11        
                                                  *    int    V06._key (offs=0x04) -> V19 tmp12        
                                                  *    int    V06._mods (offs=0x08) -> V20 tmp13        
                                                  /--*  t236   byref  
               [000521] ------------       t521 = *  PUTARG_REG byref  REG rcx
N005 (  1,  1) [000232] ------------       t232 =    CNS_INT   int    0 $40
                                                  /--*  t232   int    
               [000522] ------------       t522 = *  PUTARG_REG int    REG rdx
                                                  /--*  t521   byref  arg0 in rcx
                                                  +--*  t522   int    arg1 in rdx
N006 ( 18, 11) [000233] S-CXG-------              *  CALL      void   System.ConsolePal.ReadKey $VN.Void
N001 (  3,  2) [000240] -c----------       t240 =    LCL_VAR   int   (AX) V19 tmp12         $385
N002 (  1,  1) [000187] -c----------       t187 =    CNS_INT   int    71 $5e
                                                  /--*  t240   int    
                                                  +--*  t187   int    
N003 (  5,  4) [000188] N---G--N-U--              *  NE        void   $34f
N004 (  7,  6) [000189] ----G-------              *  JTRUE     void  

------------ BB20 [18F..19B) -> BB19 (always), preds={BB19} succs={BB19}
               [000465] ------------                 IL_OFFSET void   IL offset: 0x18f
N002 ( 14,  5) [000221] --CXG-------       t221 =    CALL      int    System.GC.get_MaxGeneration $305
                                                  /--*  t221   int    
               [000523] --CXG-------       t523 = *  PUTARG_REG int    REG rcx
                                                  /--*  t523   int    arg0 in rcx
N003 ( 28, 11) [000222] --CXG-------              *  CALL      void   System.GC.Collect $VN.Void

------------ BB21 [19B..1A6) -> BB23 (cond), preds={BB19} succs={BB22,BB23}
N001 (  3,  2) [000244] -c----------       t244 =    LCL_VAR   int   (AX) V19 tmp12         $385
N002 (  1,  1) [000194] -c----------       t194 =    CNS_INT   int    72 $5f
                                                  /--*  t244   int    
                                                  +--*  t194   int    
N003 (  5,  4) [000195] N---G--N-U--              *  NE        void   $350
N004 (  7,  6) [000196] ----G-------              *  JTRUE     void  

------------ BB22 [1A6..1AD) -> BB19 (always), preds={BB21} succs={BB19}
               [000466] ------------                 IL_OFFSET void   IL offset: 0x1a6
N001 ( 14,  5) [000220] --CXG-------                 CALL      void   System.Diagnostics.Debugger.Break $VN.Void

------------ BB23 [1AD..1B8) -> BB25 (cond), preds={BB21} succs={BB24,BB25}
N001 (  3,  2) [000248] -c----------       t248 =    LCL_VAR   int   (AX) V19 tmp12         $385
N002 (  1,  1) [000201] -c----------       t201 =    CNS_INT   int    82 $60
                                                  /--*  t248   int    
                                                  +--*  t201   int    
N003 (  5,  4) [000202] N---G--N-U--              *  NE        void   $351
N004 (  7,  6) [000203] ----G-------              *  JTRUE     void  

------------ BB24 [1B8..1C1) -> BB19 (always), preds={BB23} succs={BB19}
               [000467] ------------                 IL_OFFSET void   IL offset: 0x1b8
N001 (  1,  1) [000216] ------------       t216 =    LCL_VAR   ref    V00 this         u:1 $80
                                                  /--*  t216   ref    
N003 (  2,  2) [000387] -c----------       t387 = *  LEA(b+16) byref 
N005 (  1,  1) [000217] -c----------       t217 =    CNS_INT   int    0 $40
                                                  /--*  t387   byref  
                                                  +--*  t217   int    
               [000468] -A--GO------              *  STOREIND  bool  

------------ BB25 [1C1..1CC) -> BB19 (cond), preds={BB23} succs={BB26,BB19}
N001 (  3,  2) [000252] -c----------       t252 =    LCL_VAR   int   (AX) V19 tmp12         $385
N002 (  1,  1) [000208] -c----------       t208 =    CNS_INT   int    81 $61
                                                  /--*  t252   int    
                                                  +--*  t208   int    
N003 (  5,  4) [000209] N---G--N-U--              *  NE        void   $352
N004 (  7,  6) [000210] ----G-------              *  JTRUE     void  

------------ BB26 [1CC..1D4) (return), preds={BB25} succs={}
               [000469] ------------                 IL_OFFSET void   IL offset: 0x1cc
N001 (  1,  1) [000211] ------------       t211 =    LCL_VAR   ref    V00 this         u:1 (last use) $80
                                                  /--*  t211   ref    
N003 (  2,  2) [000389] -c----------       t389 = *  LEA(b+16) byref 
N005 (  1,  1) [000212] -c----------       t212 =    CNS_INT   int    0 $40
                                                  /--*  t389   byref  
                                                  +--*  t212   int    
               [000470] -A--GO------              *  STOREIND  bool  
               [000471] ------------                 IL_OFFSET void   IL offset: 0x1d3
N001 (  0,  0) [000215] ------------                 RETURN    void   $442

------------ BB27 [0CA..0CD) -> BB29 (cond), preds={} succs={BB28,BB29}
               [000472] ------------                 IL_OFFSET void   IL offset: 0xca
N001 (  3,  2) [000123] -c----------       t123 =    LCL_VAR   bool  (AX) V05 loc3          $381
N003 (  1,  1) [000124] -c----------       t124 =    CNS_INT   bool   0 $40
                                                  /--*  t123   bool   
                                                  +--*  t124   bool   
N004 (  6,  6) [000125] J---G--N-U--              *  EQ        void   $342
N005 (  8,  8) [000126] ----G-------              *  JTRUE     void  

------------ BB28 [0CD..0D3), preds={BB27} succs={BB29}
               [000473] ------------                 IL_OFFSET void   IL offset: 0xcd
N002 (  1,  1) [000128] ------------       t128 =    LCL_VAR   ref    V04 loc2         u:3 (last use) <l:$256, c:$b2>
                                                  /--*  t128   ref    
               [000524] ------------       t524 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t524   ref    arg0 in rcx
N003 ( 15,  7) [000129] --CXG-------              *  CALL      void   System.Threading.Monitor.Exit $VN.Void

------------ BB29 [0D3..0D4) (finret), preds={BB27,BB28} succs={}
               [000474] ------------                 IL_OFFSET void   IL offset: 0xd3
N001 (  0,  0) [000127] ------------                 RETFILT   void   $440

------------ BB30 [126..129) -> BB32 (cond), preds={BB13} succs={BB31,BB32}
               [000475] ------------                 IL_OFFSET void   IL offset: 0x126
N001 (  3,  2) [000223] -c----------       t223 =    LCL_VAR   bool  (AX) V05 loc3          $383
N003 (  1,  1) [000224] -c----------       t224 =    CNS_INT   bool   0 $40
                                                  /--*  t223   bool   
                                                  +--*  t224   bool   
N004 (  6,  6) [000225] J---G--N-U--              *  EQ        void   $34c
N005 (  8,  8) [000226] ----G-------              *  JTRUE     void  

------------ BB31 [129..12F), preds={BB30} succs={BB32}
               [000476] ------------                 IL_OFFSET void   IL offset: 0x129
N002 (  1,  1) [000228] ------------       t228 =    LCL_VAR   ref    V04 loc2         u:2 (last use) <l:$41a, c:$3df>
                                                  /--*  t228   ref    
               [000525] ------------       t525 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t525   ref    arg0 in rcx
N003 ( 15,  7) [000229] --CXG-------              *  CALL      void   System.Threading.Monitor.Exit $VN.Void

------------ BB32 [12F..130) (finret), preds={BB30,BB31} succs={BB14}
               [000477] ------------                 IL_OFFSET void   IL offset: 0x12f
N001 (  0,  0) [000227] ------------                 RETFILT   void   $441

-------------------------------------------------------------------------------------------------------------------

*************** Starting PHASE Calculate stack level slots

*************** Finishing PHASE Calculate stack level slots [no changes]

*************** Starting PHASE Linear scan register alloc
Clearing modified regs.

buildIntervals ========

-----------------
LIVENESS:
-----------------
BB01 use def in out
{V00}
{V03 V08 V09 V10 V11 V12 V21 V22}
{V00}
{V00 V03}
BB02 use def in out
{V00}
{V04}
{V00 V03}
{V00 V03 V04}
BB03 use def in out
{V00 V04}
{V13 V14 V15 V16 V27 V28}
{V00 V03 V04}
{V00 V03 V04}
BB04 use def in out
{}
{}
{V00 V03 V04}
{V00 V03 V04}
BB05 use def in out
{V04}
{}
{V00 V03 V04}
{V00 V03}
BB06 use def in out
{V03}
{V03}
{V00 V03}
{V00 V03}
BB07 use def in out
{}
{V23}
{V00}
{V00}
BB08 use def in out
{V00}
{V04}
{V00}
{V00 V04}
BB09 use def in out
{V00 V04}
{V29}
{V00 V04}
{V00 V04}
BB10 use def in out
{}
{}
{V00 V04}
{V00 V04}
BB11 use def in out
{V04}
{}
{V00 V04}
{V00}
BB12 use def in out
{}
{}
{V00}
{V00}
BB13 use def in out
{}
{}
{V00 V04}
{V00 V04}
BB14 use def in out
{}
{}
{V00}
{V00}
BB15 use def in out
{}
{V24}
{V00}
{V00}
BB19 use def in out
{}
{}
{V00}
{V00}
BB20 use def in out
{}
{}
{V00}
{V00}
BB21 use def in out
{}
{}
{V00}
{V00}
BB22 use def in out
{}
{}
{V00}
{V00}
BB23 use def in out
{}
{}
{V00}
{V00}
BB24 use def in out
{V00}
{}
{V00}
{V00}
BB25 use def in out
{}
{}
{V00}
{V00}
BB26 use def in out
{V00}
{}
{V00}
{}
BB27 use def in out
{}
{}
{V04}
{V04}
BB28 use def in out
{V04}
{}
{V04}
{}
BB29 use def in out
{}
{}
{}
{}
BB30 use def in out
{}
{}
{V00 V04}
{V00 V04}
BB31 use def in out
{V04}
{}
{V00 V04}
{V00}
BB32 use def in out
{}
{}
{V00}
{V00}
EH Vars: {V00 V04}
Finally Vars: {V00}

Interval  0: ref RefPositions {} physReg:NA Preferences=[allInt]
  Interval  0: (V00) ref (SPILLED) (writeThru) RefPositions {} physReg:NA Preferences=[allInt]
Interval  1: int RefPositions {} physReg:NA Preferences=[allInt]
  Interval  1: (V03) int RefPositions {} physReg:NA Preferences=[allInt]
Interval  2: ref RefPositions {} physReg:NA Preferences=[allInt]
  Interval  2: (V08) ref RefPositions {} physReg:NA Preferences=[allInt]
Interval  3: ref RefPositions {} physReg:NA Preferences=[allInt]
  Interval  3: (V09) ref RefPositions {} physReg:NA Preferences=[allInt]
Interval  4: ref RefPositions {} physReg:NA Preferences=[allInt]
  Interval  4: (V10) ref RefPositions {} physReg:NA Preferences=[allInt]
Interval  5: ref RefPositions {} physReg:NA Preferences=[allInt]
  Interval  5: (V11) ref RefPositions {} physReg:NA Preferences=[allInt]
Interval  6: ref RefPositions {} physReg:NA Preferences=[allInt]
  Interval  6: (V12) ref RefPositions {} physReg:NA Preferences=[allInt]
Interval  7: ref RefPositions {} physReg:NA Preferences=[allInt]
  Interval  7: (V13) ref RefPositions {} physReg:NA Preferences=[allInt]
Interval  8: ref RefPositions {} physReg:NA Preferences=[allInt]
  Interval  8: (V14) ref RefPositions {} physReg:NA Preferences=[allInt]
Interval  9: ref RefPositions {} physReg:NA Preferences=[allInt]
  Interval  9: (V15) ref RefPositions {} physReg:NA Preferences=[allInt]
Interval 10: ref RefPositions {} physReg:NA Preferences=[allInt]
  Interval 10: (V16) ref RefPositions {} physReg:NA Preferences=[allInt]
Interval 11: ref RefPositions {} physReg:NA Preferences=[allInt]
  Interval 11: (V21) ref RefPositions {} physReg:NA Preferences=[allInt]
Interval 12: ref RefPositions {} physReg:NA Preferences=[allInt]
  Interval 12: (V22) ref RefPositions {} physReg:NA Preferences=[allInt]
Interval 13: ref RefPositions {} physReg:NA Preferences=[allInt]
  Interval 13: (V23) ref RefPositions {} physReg:NA Preferences=[allInt]
Interval 14: ref RefPositions {} physReg:NA Preferences=[allInt]
  Interval 14: (V24) ref RefPositions {} physReg:NA Preferences=[allInt]
Interval 15: ref RefPositions {} physReg:NA Preferences=[allInt]
  Interval 15: (V27) ref RefPositions {} physReg:NA Preferences=[allInt]
Interval 16: ref RefPositions {} physReg:NA Preferences=[allInt]
  Interval 16: (V28) ref RefPositions {} physReg:NA Preferences=[allInt]
Interval 17: ref RefPositions {} physReg:NA Preferences=[allInt]
  Interval 17: (V29) ref RefPositions {} physReg:NA Preferences=[allInt]

FP callee save candidate vars: None

floatVarCount = 0; hasLoops = 1, singleExit = 1
TUPLE STYLE DUMP BEFORE LSRA

New BlockSet epoch 6, # of blocks (including unused BB00): 34, bitset array size: 1 (short)
Start LSRA Block Sequence: 
Current block: BB01
	Succ block: BB02, Criteria: weight, Worklist: [BB02 ]
Current block: BB02
	Succ block: BB03, Criteria: weight, Worklist: [BB03 ]
Current block: BB03
	Succ block: BB04, Criteria: bbNum, Worklist: [BB04 ]
Current block: BB04
	Succ block: BB05, Criteria: bbNum, Worklist: [BB05 ]
	Succ block: BB06, Criteria: bbNum, Worklist: [BB05 BB06 ]
Current block: BB05
Current block: BB06
	Succ block: BB07, Criteria: bbNum, Worklist: [BB07 ]
Current block: BB07
	Succ block: BB08, Criteria: bbNum, Worklist: [BB08 ]
Current block: BB08
	Succ block: BB09, Criteria: bbNum, Worklist: [BB09 ]
Current block: BB09
	Succ block: BB10, Criteria: bbNum, Worklist: [BB10 ]
	Succ block: BB13, Criteria: bbNum, Worklist: [BB10 BB13 ]
Current block: BB10
	Succ block: BB11, Criteria: bbNum, Worklist: [BB11 BB13 ]
	Succ block: BB12, Criteria: bbNum, Worklist: [BB11 BB12 BB13 ]
Current block: BB11
Current block: BB12
Current block: BB13
	Succ block: BB30, Criteria: bbNum, Worklist: [BB30 ]
Current block: BB30
	Succ block: BB31, Criteria: bbNum, Worklist: [BB31 ]
	Succ block: BB32, Criteria: bbNum, Worklist: [BB31 BB32 ]
Current block: BB31
Current block: BB32
	Succ block: BB14, Criteria: bbNum, Worklist: [BB14 ]
Current block: BB14
	Succ block: BB15, Criteria: bbNum, Worklist: [BB15 ]
Current block: BB15
	Succ block: BB19, Criteria: bbNum, Worklist: [BB19 ]
Current block: BB19
	Succ block: BB20, Criteria: bbNum, Worklist: [BB20 ]
	Succ block: BB21, Criteria: bbNum, Worklist: [BB20 BB21 ]
Current block: BB20
Current block: BB21
	Succ block: BB22, Criteria: bbNum, Worklist: [BB22 ]
	Succ block: BB23, Criteria: bbNum, Worklist: [BB22 BB23 ]
Current block: BB22
Current block: BB23
	Succ block: BB24, Criteria: bbNum, Worklist: [BB24 ]
	Succ block: BB25, Criteria: bbNum, Worklist: [BB24 BB25 ]
Current block: BB24
Current block: BB25
	Succ block: BB26, Criteria: bbNum, Worklist: [BB26 ]
Current block: BB26
	Unvisited block: BB27, Criteria: weight, Worklist: [BB27 ]
	Unvisited block: BB28, Criteria: weight, Worklist: [BB27 BB28 ]
	Unvisited block: BB29, Criteria: weight, Worklist: [BB27 BB28 BB29 ]
Current block: BB27
Current block: BB28
Current block: BB29
Final LSRA Block Sequence: 
BB01(  1   ) 
BB02(  8   ) 
BB03(  8   ) 
BB04(  8   ) 
BB05(  4   ) 
BB06(  8   ) 
BB07(  1   ) 
BB08(  8   ) 
BB09(  8   ) 
BB10(  8   ) 
BB11(  4   ) 
BB12(  8   ) 
BB13(  1   ) 
BB30(  1   )  EH-in
BB31(  1   ) 
BB32(  1   )  EH-out
BB14(  1   )  EH-in EH-out
BB15(  1   )  EH-in
BB19(  8   ) 
BB20(  8   ) 
BB21(  1   ) 
BB22(  1   ) 
BB23(  1   ) 
BB24(  1   ) 
BB25(  1   ) 
BB26(  1   ) 
BB27(  0   )  EH-in
BB28(  0   ) 
BB29(  0   )  EH-out

BB01 [000..072), preds={} succs={BB02}
=====
  N000.                    IL_OFFSET IL offset: 0x0
  N001. t0              =  CALL     
  N003.                    V02 MEM; t0
  N000.                    IL_OFFSET IL offset: 0x6
  N003. t4              =  LCL_VAR_ADDR V02 loc0         
                                                      long   V02._dateData (offs=0x00) -> V17 tmp10        
  N000. t478            =  PUTARG_REG; t4
  N005. t6              =  CALL     ; t478
  N007.                    V21(t272); t6
  N009.                    V21(t273*)
  N000. t479            =  PUTARG_REG; t273*
  N010. t269            =  CNS_INT(h) 0x750031F0 "	 Created list"
  N011. t270            =  IND      ; t269
  N000. t480            =  PUTARG_REG; t270
  N012. t8              =  CALL     ; t479,t480
  N000. t481            =  PUTARG_REG; t8
  N013.                    CALL     ; t481
  N000.                    IL_OFFSET IL offset: 0x1c
  N002. t11             =  CNS_INT(h) 0x7ffdb3ee2350 method
  N000. t482            =  PUTARG_REG; t11
  N003. t12             =  CALL help; t482
  N005.                    V08(t14); t12
  N002.                    V08(t15)
  N000. t483            =  PUTARG_REG; t15
  N003.                    CALL     ; t483
  N000.                    IL_OFFSET IL offset: 0x22
  N001.                    V00(t10)
  N003. t279            =  LEA(b+8) ; t10
  N005.                    V08(t17*)
  N000.                    STOREIND ; t279,t17*
  N000.                    IL_OFFSET IL offset: 0x27
  N002. t23             =  CNS_INT(h) 0x7ffdb3b058b8 token
  N000. t484            =  PUTARG_REG; t23
  N003. t24             =  CALL help; t484
  N005.                    V09(t26); t24
  N001.                    V00(t20)
  N003. t284            =  LEA(b+8) ; t20
  N004. t21             =  IND      ; t284
  N006. t282            =  LEA(b+8) ; t21
  N007. t22             =  IND      ; t282
  N009.                    V10(t30); t22
  N002.                    V09(t27)
  N000. t485            =  PUTARG_REG; t27
  N003.                    CALL     ; t485
  N000.                    IL_OFFSET IL offset: 0x37
  N001.                    V10(t31*)
  N003. t287            =  LEA(b+16); t31*
  N005.                    V09(t32*)
  N000.                    STOREIND ; t287,t32*
  N000.                    IL_OFFSET IL offset: 0x3c
  N002. t37             =  CNS_INT(h) 0x7ffdb3ee6200 token
  N000. t486            =  PUTARG_REG; t37
  N003. t38             =  CALL help; t486
  N005.                    V11(t40); t38
  N004.                    V11(t41)
  N000. t487            =  PUTARG_REG; t41
  N005.                    V00(t35)
  N000. t488            =  PUTARG_REG; t35
  N006. t36             =  CNS_INT(h) 0x7ffdb3b213f8 ftn
  N000. t489            =  PUTARG_REG; t36
  N007.                    CALL     ; t487,t488,t489
  N000.                    IL_OFFSET IL offset: 0x48
  N002. t44             =  CNS_INT(h) 0x7ffdb3c84e80 token
  N000. t490            =  PUTARG_REG; t44
  N003. t45             =  CALL help; t490
  N005.                    V12(t47); t45
  N003.                    V12(t48)
  N000. t491            =  PUTARG_REG; t48
  N004.                    V11(t43*)
  N000. t492            =  PUTARG_REG; t43*
  N005.                    CALL     ; t491,t492
  N000.                    IL_OFFSET IL offset: 0x4d
  N002.                    V12(t50*)
  N000. t493            =  PUTARG_REG; t50*
  N003.                    CALL     ; t493
  N000.                    IL_OFFSET IL offset: 0x52
  N001. t52             =  CALL     
  N003.                    V02 MEM; t52
  N000.                    IL_OFFSET IL offset: 0x58
  N003. t56             =  LCL_VAR_ADDR V02 loc0         
                                                      long   V02._dateData (offs=0x00) -> V17 tmp10        
  N000. t494            =  PUTARG_REG; t56
  N005. t58             =  CALL     ; t494
  N007.                    V22(t300); t58
  N009.                    V22(t301*)
  N000. t495            =  PUTARG_REG; t301*
  N010. t297            =  CNS_INT(h) 0x750031F8 "	 Consumer thread started, adding items..."
  N011. t298            =  IND      ; t297
  N000. t496            =  PUTARG_REG; t298
  N012. t60             =  CALL     ; t495,t496
  N000. t497            =  PUTARG_REG; t60
  N013.                    CALL     ; t497
  N000.                    IL_OFFSET IL offset: 0x6e
  N001. t62             =  CNS_INT   0
  N003.                    V03(t64); t62

BB02 [072..07B), preds={BB01,BB06} succs={BB03}
=====
  N000.                    IL_OFFSET IL offset: 0x72
  N001.                    V00(t69)
  N003. t305            =  LEA(b+8) ; t69
  N004. t70             =  IND      ; t305
  N006.                    V04 MEM; t70
  N000.                    IL_OFFSET IL offset: 0x79
  N001. t73             =  CNS_INT   0
  N003.                    V05 MEM; t73

BB03 [07B..0CA), preds={BB02} succs={BB04}
=====
  N000.                    IL_OFFSET IL offset: 0x7b
  N003. t78             =  LCL_VAR_ADDR V05 loc3         
  N000. t498            =  PUTARG_REG; t78
  N004. t76             =  V04 MEM
  N000. t499            =  PUTARG_REG; t76
  N005.                    CALL     ; t498,t499
  N000.                    IL_OFFSET IL offset: 0x83
  N002. t83             =  CNS_INT(h) 0x7ffdb3ee58a8 method
  N000. t500            =  PUTARG_REG; t83
  N003. t84             =  CALL help; t500
  N005.                    V13(t86); t84
  N001.                    V00(t80)
  N003. t312            =  LEA(b+8) ; t80
  N004. t81             =  IND      ; t312
  N006. t310            =  LEA(b+8) ; t81
  N007. t82             =  IND      ; t310
  N009.                    V14(t90); t82
  N002.                    V13(t87)
  N000. t501            =  PUTARG_REG; t87
  N003.                    CALL     ; t501
  N000.                    IL_OFFSET IL offset: 0x93
  N001.                    V14(t91*)
  N003. t315            =  LEA(b+8) ; t91*
  N005.                    V13(t92*)
  N000.                    STOREIND ; t315,t92*
  N000.                    IL_OFFSET IL offset: 0x98
  N001.                    V00(t95)
  N003. t319            =  LEA(b+8) ; t95
  N004. t96             =  IND      ; t319
  N006.                    V28(t414); t96
  N007.                    V28(t415)
  N010. t317            =  LEA(b+8) ; t415
  N012.                    V28(t417*)
  N014. t323            =  LEA(b+8) ; t417*
  N015. t99             =  IND      ; t323
  N017. t321            =  LEA(b+8) ; t99
  N018. t100            =  IND      ; t321
  N020.                    V27(t409); t100
  N021.                    V27(t410)
  N000.                    STOREIND ; t317,t410
  N000.                    IL_OFFSET IL offset: 0xb3
  N002. t106            =  CNS_INT(h) 0x7ffdb3b058b8 token
  N000. t502            =  PUTARG_REG; t106
  N003. t107            =  CALL help; t502
  N005.                    V15(t109); t107
  N001.                    V27(t412*)
  N003.                    V16(t113); t412*
  N002.                    V15(t110)
  N000. t503            =  PUTARG_REG; t110
  N003.                    CALL     ; t503
  N000.                    IL_OFFSET IL offset: 0xc3
  N001.                    V16(t114*)
  N003. t333            =  LEA(b+16); t114*
  N005.                    V15(t115*)
  N000.                    STOREIND ; t333,t115*

BB04 [0CA..0CD) -> BB06 (cond), preds={BB03} succs={BB05,BB06}
=====
  N001.                    V05 MEM
  N003.                    CNS_INT   0
  N004.                    EQ       
  N005.                    JTRUE    

BB05 [0CD..0D4), preds={BB04} succs={BB06}
=====
  N002. t259*           =  V04 MEM
  N000. t504            =  PUTARG_REG; t259*
  N003.                    CALL     ; t504

BB06 [0D4..0DD) -> BB02 (cond), preds={BB04,BB05} succs={BB07,BB02}
=====
  N000.                    IL_OFFSET IL offset: 0xd4
  N001.                    V03(t118*)
  N002.                    CNS_INT   1
  N003. t120            =  ADD      ; t118*
  N005.                    V03(t122); t120
  N000.                    IL_OFFSET IL offset: 0xd8
  N001.                    V03(t65)
  N002.                    CNS_INT   10
  N003.                    LT       ; t65
  N004.                    JTRUE    

BB07 [0DD..0F9), preds={BB06} succs={BB08}
=====
  N000.                    IL_OFFSET IL offset: 0xdd
  N001. t130            =  CALL     
  N003.                    V02 MEM; t130
  N000.                    IL_OFFSET IL offset: 0xe3
  N003. t134            =  LCL_VAR_ADDR V02 loc0         
                                                      long   V02._dateData (offs=0x00) -> V17 tmp10        
  N000. t505            =  PUTARG_REG; t134
  N005. t136            =  CALL     ; t505
  N007.                    V23(t342); t136
  N009.                    V23(t343*)
  N000. t506            =  PUTARG_REG; t343*
  N010. t339            =  CNS_INT(h) 0x75003200 "	 Waiting for list processing to complete..."
  N011. t340            =  IND      ; t339
  N000. t507            =  PUTARG_REG; t340
  N012. t138            =  CALL     ; t506,t507
  N000. t508            =  PUTARG_REG; t138
  N013.                    CALL     ; t508

BB08 [0F9..102), preds={BB07,BB12} succs={BB09}
=====
  N000.                    IL_OFFSET IL offset: 0xf9
  N001.                    V00(t140)
  N003. t347            =  LEA(b+8) ; t140
  N004. t141            =  IND      ; t347
  N006.                    V04 MEM; t141
  N000.                    IL_OFFSET IL offset: 0x100
  N001. t144            =  CNS_INT   0
  N003.                    V05 MEM; t144

BB09 [102..122) -> BB13 (cond), preds={BB08} succs={BB10,BB13}
=====
  N000.                    IL_OFFSET IL offset: 0x102
  N003. t149            =  LCL_VAR_ADDR V05 loc3         
  N000. t509            =  PUTARG_REG; t149
  N004. t147            =  V04 MEM
  N000. t510            =  PUTARG_REG; t147
  N005.                    CALL     ; t509,t510
  N000.                    IL_OFFSET IL offset: 0x10a
  N001.                    V00(t151)
  N003. t353            =  LEA(b+8) ; t151
  N004. t152            =  IND      ; t353
  N006.                    V29(t419); t152
  N007.                    V29(t420)
  N010. t351            =  LEA(b+8) ; t420
  N011. t153            =  IND      ; t351
  N012.                    V29(t422*)
  N014. t355            =  LEA(b+16); t422*
  N015. t156            =  IND      ; t355
  N016.                    EQ       ; t153,t156
  N017.                    JTRUE    

BB10 [126..129) -> BB12 (cond), preds={BB09} succs={BB11,BB12}
=====
  N001.                    V05 MEM
  N003.                    CNS_INT   0
  N004.                    EQ       
  N005.                    JTRUE    

BB11 [129..130), preds={BB10} succs={BB12}
=====
  N002. t266*           =  V04 MEM
  N000. t511            =  PUTARG_REG; t266*
  N003.                    CALL     ; t511

BB12 [130..139) -> BB08 (always), preds={BB10,BB11} succs={BB08}
=====
  N000.                    IL_OFFSET IL offset: 0x130
  N002. t159            =  CNS_INT   100
  N000. t512            =  PUTARG_REG; t159
  N003.                    CALL     ; t512

BB13 [???..???) -> BB30 (callf), preds={BB09} succs={BB30}
=====

BB30 [126..129) -> BB32 (cond), preds={BB13} succs={BB31,BB32}
=====
  N000.                    IL_OFFSET IL offset: 0x126
  N001.                    V05 MEM
  N003.                    CNS_INT   0
  N004.                    EQ       
  N005.                    JTRUE    

BB31 [129..12F), preds={BB30} succs={BB32}
=====
  N000.                    IL_OFFSET IL offset: 0x129
  N002. t228*           =  V04 MEM
  N000. t525            =  PUTARG_REG; t228*
  N003.                    CALL     ; t525

BB32 [12F..130) (finret), preds={BB30,BB31} succs={BB14}
=====
  N000.                    IL_OFFSET IL offset: 0x12f
  N001.                    RETFILT  

BB14 [???..???) -> BB15 (ALWAYS), preds={BB32} succs={BB15}
=====

BB15 [139..17D), preds={BB14} succs={BB19}
=====
  N000.                    IL_OFFSET IL offset: 0x139
  N001. t161            =  CALL     
  N003.                    V02 MEM; t161
  N000.                    IL_OFFSET IL offset: 0x13f
  N003. t165            =  LCL_VAR_ADDR V02 loc0         
                                                      long   V02._dateData (offs=0x00) -> V17 tmp10        
  N000. t513            =  PUTARG_REG; t165
  N005. t167            =  CALL     ; t513
  N007.                    V24(t367); t167
  N009.                    V24(t368*)
  N000. t514            =  PUTARG_REG; t368*
  N010. t364            =  CNS_INT(h) 0x75003208 "	 Done.  Profiler is active, available options:"
  N011. t365            =  IND      ; t364
  N000. t515            =  PUTARG_REG; t365
  N012. t169            =  CALL     ; t514,t515
  N000. t516            =  PUTARG_REG; t169
  N013.                    CALL     ; t516
  N000.                    IL_OFFSET IL offset: 0x155
  N002. t371            =  CNS_INT(h) 0x75003210 "   Q = quit"
  N003. t372            =  IND      ; t371
  N000. t517            =  PUTARG_REG; t372
  N004.                    CALL     ; t517
  N000.                    IL_OFFSET IL offset: 0x15f
  N002. t374            =  CNS_INT(h) 0x75003218 "   H = heap snapshot"
  N003. t375            =  IND      ; t374
  N000. t518            =  PUTARG_REG; t375
  N004.                    CALL     ; t518
  N000.                    IL_OFFSET IL offset: 0x169
  N002. t377            =  CNS_INT(h) 0x75003220 "   G = GC (max gen)"
  N003. t378            =  IND      ; t377
  N000. t519            =  PUTARG_REG; t378
  N004.                    CALL     ; t519
  N000.                    IL_OFFSET IL offset: 0x173
  N002. t380            =  CNS_INT(h) 0x75003228 "   R = clear the running flag to stop the consumer thread"
  N003. t381            =  IND      ; t380
  N000. t520            =  PUTARG_REG; t381
  N004.                    CALL     ; t520

BB19 [17D..18F) -> BB21 (cond), preds={BB15,BB20,BB22,BB24,BB25} succs={BB20,BB21}
=====
  N003. t236            =  LCL_VAR_ADDR V06 loc4         
                                                      ushort V06._keyChar (offs=0x00) -> V18 tmp11        
                                                      int    V06._key (offs=0x04) -> V19 tmp12        
                                                      int    V06._mods (offs=0x08) -> V20 tmp13        
  N000. t521            =  PUTARG_REG; t236
  N005. t232            =  CNS_INT   0
  N000. t522            =  PUTARG_REG; t232
  N006.                    CALL     ; t521,t522
  N001.                    V19 MEM
  N002.                    CNS_INT   71
  N003.                    NE       
  N004.                    JTRUE    

BB20 [18F..19B) -> BB19 (always), preds={BB19} succs={BB19}
=====
  N000.                    IL_OFFSET IL offset: 0x18f
  N002. t221            =  CALL     
  N000. t523            =  PUTARG_REG; t221
  N003.                    CALL     ; t523

BB21 [19B..1A6) -> BB23 (cond), preds={BB19} succs={BB22,BB23}
=====
  N001.                    V19 MEM
  N002.                    CNS_INT   72
  N003.                    NE       
  N004.                    JTRUE    

BB22 [1A6..1AD) -> BB19 (always), preds={BB21} succs={BB19}
=====
  N000.                    IL_OFFSET IL offset: 0x1a6
  N001.                    CALL     

BB23 [1AD..1B8) -> BB25 (cond), preds={BB21} succs={BB24,BB25}
=====
  N001.                    V19 MEM
  N002.                    CNS_INT   82
  N003.                    NE       
  N004.                    JTRUE    

BB24 [1B8..1C1) -> BB19 (always), preds={BB23} succs={BB19}
=====
  N000.                    IL_OFFSET IL offset: 0x1b8
  N001.                    V00(t216)
  N003. t387            =  LEA(b+16); t216
  N005.                    CNS_INT   0
  N000.                    STOREIND ; t387

BB25 [1C1..1CC) -> BB19 (cond), preds={BB23} succs={BB26,BB19}
=====
  N001.                    V19 MEM
  N002.                    CNS_INT   81
  N003.                    NE       
  N004.                    JTRUE    

BB26 [1CC..1D4) (return), preds={BB25} succs={}
=====
  N000.                    IL_OFFSET IL offset: 0x1cc
  N001.                    V00(t211*)
  N003. t389            =  LEA(b+16); t211*
  N005.                    CNS_INT   0
  N000.                    STOREIND ; t389
  N000.                    IL_OFFSET IL offset: 0x1d3
  N001.                    RETURN   

BB27 [0CA..0CD) -> BB29 (cond), preds={} succs={BB28,BB29}
=====
  N000.                    IL_OFFSET IL offset: 0xca
  N001.                    V05 MEM
  N003.                    CNS_INT   0
  N004.                    EQ       
  N005.                    JTRUE    

BB28 [0CD..0D3), preds={BB27} succs={BB29}
=====
  N000.                    IL_OFFSET IL offset: 0xcd
  N002. t128*           =  V04 MEM
  N000. t524            =  PUTARG_REG; t128*
  N003.                    CALL     ; t524

BB29 [0D3..0D4) (finret), preds={BB27,BB28} succs={}
=====
  N000.                    IL_OFFSET IL offset: 0xd3
  N001.                    RETFILT  




buildIntervals second part ========
Int arg V00 in reg rcx
<RefPosition #0   @0   RefTypeParamDef <Ivl:0 V00>  BB00 regmask=[rcx] minReg=1 fixed wt=100.00>
Int arg V01 in reg rdx

NEW BLOCK BB01
<RefPosition #1   @1   RefTypeBB  BB01 regmask=[] minReg=1 wt=100.00>

DefList: {  }
N003 (???,???) [000425] ------------              *  IL_OFFSET void   IL offset: 0x0 REG NA

DefList: {  }
N005 ( 14,  5) [000000] --CXG-------              *  CALL      long   System.DateTime.get_Now REG NA $c0
<RefPosition #2   @6   RefTypeKill <Reg:rax>  BB01 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #3   @6   RefTypeKill <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #4   @6   RefTypeKill <Reg:rdx>  BB01 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #5   @6   RefTypeKill <Reg:r8 >  BB01 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #6   @6   RefTypeKill <Reg:r9 >  BB01 regmask=[r9] minReg=1 wt=100.00>
<RefPosition #7   @6   RefTypeKill <Reg:r10>  BB01 regmask=[r10] minReg=1 wt=100.00>
<RefPosition #8   @6   RefTypeKill <Reg:r11>  BB01 regmask=[r11] minReg=1 wt=100.00>
Interval 18: long RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #9   @6   RefTypeFixedReg <Reg:rax>  BB01 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #10  @6   RefTypeDef <Ivl:18> CALL BB01 regmask=[rax] minReg=1 fixed wt=400.00>

DefList: { N005.t0. CALL }
N007 ( 18,  8) [000003] DA-XG-------              *  STORE_LCL_VAR struct<System.DateTime, 8>(AX)(P) V02 loc0          NA
                                                  *    long   V02._dateData (offs=0x00) -> V17 tmp10         REG NA
<RefPosition #11  @7   RefTypeUse <Ivl:18>  BB01 regmask=[allIntButFP] minReg=1 last wt=100.00>

DefList: {  }
N009 (???,???) [000426] ------------              *  IL_OFFSET void   IL offset: 0x6 REG NA

DefList: {  }
N011 (  3,  2) [000004] -------N----              *  LCL_VAR_ADDR byref  V02 loc0          NA
                                                  *    long   V02._dateData (offs=0x00) -> V17 tmp10         REG NA
Interval 19: byref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #12  @12  RefTypeDef <Ivl:19> LCL_VAR_ADDR BB01 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N011.t4. LCL_VAR_ADDR }
N013 (???,???) [000478] ------------              *  PUTARG_REG byref  REG rcx
<RefPosition #13  @13  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #14  @13  RefTypeUse <Ivl:19>  BB01 regmask=[rcx] minReg=1 last fixed wt=100.00>
Interval 20: byref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #15  @14  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #16  @14  RefTypeDef <Ivl:20> PUTARG_REG BB01 regmask=[rcx] minReg=1 fixed wt=400.00>

DefList: { N013.t478. PUTARG_REG }
N015 ( 17, 10) [000006] --CXG-------              *  CALL      ref    System.DateTime.ToString REG NA $84
<RefPosition #17  @15  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #18  @15  RefTypeUse <Ivl:20>  BB01 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #19  @16  RefTypeKill <Reg:rax>  BB01 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #20  @16  RefTypeKill <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #21  @16  RefTypeKill <Reg:rdx>  BB01 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #22  @16  RefTypeKill <Reg:r8 >  BB01 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #23  @16  RefTypeKill <Reg:r9 >  BB01 regmask=[r9] minReg=1 wt=100.00>
<RefPosition #24  @16  RefTypeKill <Reg:r10>  BB01 regmask=[r10] minReg=1 wt=100.00>
<RefPosition #25  @16  RefTypeKill <Reg:r11>  BB01 regmask=[r11] minReg=1 wt=100.00>
Interval 21: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #26  @16  RefTypeFixedReg <Reg:rax>  BB01 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #27  @16  RefTypeDef <Ivl:21> CALL BB01 regmask=[rax] minReg=1 fixed wt=400.00>

DefList: { N015.t6. CALL }
N017 ( 17, 10) [000272] DA-XG-----L-              *  STORE_LCL_VAR ref    V21 tmp14        d:2 NA REG NA
<RefPosition #28  @17  RefTypeUse <Ivl:21>  BB01 regmask=[allIntButFP] minReg=1 last wt=100.00>
Assigning related <V21/L11> to <I21>
<RefPosition #29  @18  RefTypeDef <Ivl:11 V21> STORE_LCL_VAR BB01 regmask=[allIntButFP] minReg=1 last wt=400.00>

DefList: {  }
N019 (  1,  1) [000273] ------------              *  LCL_VAR   ref    V21 tmp14        u:2 NA (last use) REG NA $84

DefList: {  }
N021 (???,???) [000479] ------------              *  PUTARG_REG ref    REG rcx
<RefPosition #30  @21  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #31  @21  RefTypeUse <Ivl:11 V21> LCL_VAR BB01 regmask=[rcx] minReg=1 last fixed wt=400.00>
Interval 22: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #32  @22  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #33  @22  RefTypeDef <Ivl:22> PUTARG_REG BB01 regmask=[rcx] minReg=1 fixed wt=400.00>

DefList: { N021.t479. PUTARG_REG }
N023 (  2, 10) [000269] H-----------              *  CNS_INT(h) long   0x750031F0 "	 Created list" REG NA $1c0
Interval 23: long RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #34  @24  RefTypeDef <Ivl:23> CNS_INT BB01 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N021.t479. PUTARG_REG; N023.t269. CNS_INT }
N025 (  4, 12) [000270] #---G-------              *  IND       ref    REG NA $88
<RefPosition #35  @25  RefTypeUse <Ivl:23>  BB01 regmask=[allIntButFP] minReg=1 last wt=100.00>
Interval 24: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #36  @26  RefTypeDef <Ivl:24> IND BB01 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N021.t479. PUTARG_REG; N025.t270. IND }
N027 (???,???) [000480] ----G-------              *  PUTARG_REG ref    REG rdx
<RefPosition #37  @27  RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #38  @27  RefTypeUse <Ivl:24>  BB01 regmask=[rdx] minReg=1 last fixed wt=100.00>
Interval 25: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #39  @28  RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #40  @28  RefTypeDef <Ivl:25> PUTARG_REG BB01 regmask=[rdx] minReg=1 fixed wt=400.00>

DefList: { N021.t479. PUTARG_REG; N027.t480. PUTARG_REG }
N029 ( 39, 30) [000008] --CXG-------              *  CALL      ref    System.String.Concat REG NA $89
<RefPosition #41  @29  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #42  @29  RefTypeUse <Ivl:22>  BB01 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #43  @29  RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #44  @29  RefTypeUse <Ivl:25>  BB01 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #45  @30  RefTypeKill <Reg:rax>  BB01 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #46  @30  RefTypeKill <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #47  @30  RefTypeKill <Reg:rdx>  BB01 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #48  @30  RefTypeKill <Reg:r8 >  BB01 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #49  @30  RefTypeKill <Reg:r9 >  BB01 regmask=[r9] minReg=1 wt=100.00>
<RefPosition #50  @30  RefTypeKill <Reg:r10>  BB01 regmask=[r10] minReg=1 wt=100.00>
<RefPosition #51  @30  RefTypeKill <Reg:r11>  BB01 regmask=[r11] minReg=1 wt=100.00>
Interval 26: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #52  @30  RefTypeFixedReg <Reg:rax>  BB01 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #53  @30  RefTypeDef <Ivl:26> CALL BB01 regmask=[rax] minReg=1 fixed wt=400.00>

DefList: { N029.t8. CALL }
N031 (???,???) [000481] --CXG-------              *  PUTARG_REG ref    REG rcx
<RefPosition #54  @31  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #55  @31  RefTypeUse <Ivl:26>  BB01 regmask=[rcx] minReg=1 last fixed wt=100.00>
Interval 27: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #56  @32  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #57  @32  RefTypeDef <Ivl:27> PUTARG_REG BB01 regmask=[rcx] minReg=1 fixed wt=400.00>

DefList: { N031.t481. PUTARG_REG }
N033 ( 53, 36) [000009] --CXG-------              *  CALL      void   System.Console.WriteLine REG NA $VN.Void
<RefPosition #58  @33  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #59  @33  RefTypeUse <Ivl:27>  BB01 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #60  @34  RefTypeKill <Reg:rax>  BB01 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #61  @34  RefTypeKill <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #62  @34  RefTypeKill <Reg:rdx>  BB01 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #63  @34  RefTypeKill <Reg:r8 >  BB01 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #64  @34  RefTypeKill <Reg:r9 >  BB01 regmask=[r9] minReg=1 wt=100.00>
<RefPosition #65  @34  RefTypeKill <Reg:r10>  BB01 regmask=[r10] minReg=1 wt=100.00>
<RefPosition #66  @34  RefTypeKill <Reg:r11>  BB01 regmask=[r11] minReg=1 wt=100.00>

DefList: {  }
N035 (???,???) [000427] ------------              *  IL_OFFSET void   IL offset: 0x1c REG NA

DefList: {  }
N037 (  2, 10) [000011] H-----------              *  CNS_INT(h) long   0x7ffdb3ee2350 method REG NA $1c1
Interval 28: long RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #67  @38  RefTypeDef <Ivl:28> CNS_INT BB01 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N037.t11. CNS_INT }
N039 (???,???) [000482] ------------              *  PUTARG_REG long   REG rcx
<RefPosition #68  @39  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #69  @39  RefTypeUse <Ivl:28>  BB01 regmask=[rcx] minReg=1 last fixed wt=100.00>
Interval 29: long RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #70  @40  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #71  @40  RefTypeDef <Ivl:29> PUTARG_REG BB01 regmask=[rcx] minReg=1 fixed wt=400.00>

DefList: { N039.t482. PUTARG_REG }
N041 ( 16, 16) [000012] --C---------              *  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST REG NA $240
<RefPosition #72  @41  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #73  @41  RefTypeUse <Ivl:29>  BB01 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #74  @42  RefTypeKill <Reg:rax>  BB01 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #75  @42  RefTypeKill <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #76  @42  RefTypeKill <Reg:rdx>  BB01 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #77  @42  RefTypeKill <Reg:r8 >  BB01 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #78  @42  RefTypeKill <Reg:r9 >  BB01 regmask=[r9] minReg=1 wt=100.00>
<RefPosition #79  @42  RefTypeKill <Reg:r10>  BB01 regmask=[r10] minReg=1 wt=100.00>
<RefPosition #80  @42  RefTypeKill <Reg:r11>  BB01 regmask=[r11] minReg=1 wt=100.00>
Interval 30: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #81  @42  RefTypeFixedReg <Reg:rax>  BB01 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #82  @42  RefTypeDef <Ivl:30> CALL BB01 regmask=[rax] minReg=1 fixed wt=400.00>

DefList: { N041.t12. CALL }
N043 ( 16, 16) [000014] DA----------              *  STORE_LCL_VAR ref    V08 tmp1         d:2 NA REG NA
<RefPosition #83  @43  RefTypeUse <Ivl:30>  BB01 regmask=[allIntButFP] minReg=1 last wt=100.00>
Assigning related <V08/L2> to <I30>
<RefPosition #84  @44  RefTypeDef <Ivl:2 V08> STORE_LCL_VAR BB01 regmask=[allIntButFP] minReg=1 last wt=600.00>

DefList: {  }
N045 (  1,  1) [000015] ------------              *  LCL_VAR   ref    V08 tmp1         u:2 NA REG NA $240

DefList: {  }
N047 (???,???) [000483] ------------              *  PUTARG_REG ref    REG rcx
<RefPosition #85  @47  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #86  @47  RefTypeUse <Ivl:2 V08> LCL_VAR BB01 regmask=[rcx] minReg=1 last fixed wt=600.00>
Setting putarg_reg as a pass-through of a non-last use lclVar
Interval 31: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #87  @48  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #88  @48  RefTypeDef <Ivl:31> PUTARG_REG BB01 regmask=[rcx] minReg=1 fixed wt=400.00>
Assigning related <V08/L2> to <I31>

DefList: { N047.t483. PUTARG_REG }
N049 ( 15,  8) [000016] --CXG-------              *  CALL      void   FalseLeakRepro.List..ctor REG NA $VN.Void
<RefPosition #89  @49  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #90  @49  RefTypeUse <Ivl:31>  BB01 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #91  @50  RefTypeKill <Reg:rax>  BB01 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #92  @50  RefTypeKill <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #93  @50  RefTypeKill <Reg:rdx>  BB01 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #94  @50  RefTypeKill <Reg:r8 >  BB01 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #95  @50  RefTypeKill <Reg:r9 >  BB01 regmask=[r9] minReg=1 wt=100.00>
<RefPosition #96  @50  RefTypeKill <Reg:r10>  BB01 regmask=[r10] minReg=1 wt=100.00>
<RefPosition #97  @50  RefTypeKill <Reg:r11>  BB01 regmask=[r11] minReg=1 wt=100.00>

DefList: {  }
N051 (???,???) [000428] ------------              *  IL_OFFSET void   IL offset: 0x22 REG NA

DefList: {  }
N053 (  1,  1) [000010] ------------              *  LCL_VAR   ref    V00 this         u:1 NA REG NA $80

DefList: {  }
N055 (  2,  2) [000279] ------------              *  LEA(b+8)  byref  REG NA
<RefPosition #98  @55  RefTypeUse <Ivl:0 V00> LCL_VAR BB01 regmask=[allIntButFP] minReg=1 last wt=2350.00>
Interval 32: byref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #99  @56  RefTypeDef <Ivl:32> LEA BB01 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N055.t279. LEA }
N057 (  1,  1) [000017] ------------              *  LCL_VAR   ref    V08 tmp1         u:2 NA (last use) REG NA $240

DefList: { N055.t279. LEA }
N059 (???,???) [000429] -A-XG-------              *  STOREIND  ref    REG NA
<RefPosition #100 @59  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #101 @59  RefTypeUse <Ivl:32>  BB01 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #102 @59  RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #103 @59  RefTypeUse <Ivl:2 V08> LCL_VAR BB01 regmask=[rdx] minReg=1 last fixed wt=600.00>
<RefPosition #104 @60  RefTypeKill <Reg:rax>  BB01 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #105 @60  RefTypeKill <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #106 @60  RefTypeKill <Reg:rdx>  BB01 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #107 @60  RefTypeKill <Reg:r8 >  BB01 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #108 @60  RefTypeKill <Reg:r9 >  BB01 regmask=[r9] minReg=1 wt=100.00>
<RefPosition #109 @60  RefTypeKill <Reg:r10>  BB01 regmask=[r10] minReg=1 wt=100.00>
<RefPosition #110 @60  RefTypeKill <Reg:r11>  BB01 regmask=[r11] minReg=1 wt=100.00>
<RefPosition #111 @60  RefTypeKill <Reg:mm0>  BB01 regmask=[mm0] minReg=1 wt=100.00>
<RefPosition #112 @60  RefTypeKill <Reg:mm1>  BB01 regmask=[mm1] minReg=1 wt=100.00>
<RefPosition #113 @60  RefTypeKill <Reg:mm2>  BB01 regmask=[mm2] minReg=1 wt=100.00>
<RefPosition #114 @60  RefTypeKill <Reg:mm3>  BB01 regmask=[mm3] minReg=1 wt=100.00>
<RefPosition #115 @60  RefTypeKill <Reg:mm4>  BB01 regmask=[mm4] minReg=1 wt=100.00>
<RefPosition #116 @60  RefTypeKill <Reg:mm5>  BB01 regmask=[mm5] minReg=1 wt=100.00>

DefList: {  }
N061 (???,???) [000430] ------------              *  IL_OFFSET void   IL offset: 0x27 REG NA

DefList: {  }
N063 (  2, 10) [000023] H-----------              *  CNS_INT(h) long   0x7ffdb3b058b8 token REG NA $1c3
Interval 33: long RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #117 @64  RefTypeDef <Ivl:33> CNS_INT BB01 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N063.t23. CNS_INT }
N065 (???,???) [000484] ------------              *  PUTARG_REG long   REG rcx
<RefPosition #118 @65  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #119 @65  RefTypeUse <Ivl:33>  BB01 regmask=[rcx] minReg=1 last fixed wt=100.00>
Interval 34: long RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #120 @66  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #121 @66  RefTypeDef <Ivl:34> PUTARG_REG BB01 regmask=[rcx] minReg=1 fixed wt=400.00>

DefList: { N065.t484. PUTARG_REG }
N067 ( 16, 16) [000024] --C---------              *  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST REG NA $243
<RefPosition #122 @67  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #123 @67  RefTypeUse <Ivl:34>  BB01 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #124 @68  RefTypeKill <Reg:rax>  BB01 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #125 @68  RefTypeKill <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #126 @68  RefTypeKill <Reg:rdx>  BB01 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #127 @68  RefTypeKill <Reg:r8 >  BB01 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #128 @68  RefTypeKill <Reg:r9 >  BB01 regmask=[r9] minReg=1 wt=100.00>
<RefPosition #129 @68  RefTypeKill <Reg:r10>  BB01 regmask=[r10] minReg=1 wt=100.00>
<RefPosition #130 @68  RefTypeKill <Reg:r11>  BB01 regmask=[r11] minReg=1 wt=100.00>
Interval 35: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #131 @68  RefTypeFixedReg <Reg:rax>  BB01 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #132 @68  RefTypeDef <Ivl:35> CALL BB01 regmask=[rax] minReg=1 fixed wt=400.00>

DefList: { N067.t24. CALL }
N069 ( 16, 16) [000026] DA----------              *  STORE_LCL_VAR ref    V09 tmp2         d:2 NA REG NA
<RefPosition #133 @69  RefTypeUse <Ivl:35>  BB01 regmask=[allIntButFP] minReg=1 last wt=100.00>
Assigning related <V09/L3> to <I35>
<RefPosition #134 @70  RefTypeDef <Ivl:3 V09> STORE_LCL_VAR BB01 regmask=[allIntButFP] minReg=1 last wt=600.00>

DefList: {  }
N071 (  1,  1) [000020] ------------              *  LCL_VAR   ref    V00 this         u:1 NA REG NA $80

DefList: {  }
N073 (  2,  2) [000284] -c----------              *  LEA(b+8)  byref  REG NA
Contained
DefList: {  }
N075 (  4,  4) [000021] n---GO------              *  IND       ref    REG NA <l:$246, c:$245>
<RefPosition #135 @75  RefTypeUse <Ivl:0 V00> LCL_VAR BB01 regmask=[allIntButFP] minReg=1 last wt=2350.00>
Interval 36: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #136 @76  RefTypeDef <Ivl:36> IND BB01 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N075.t21. IND }
N077 (  5,  5) [000282] -c----------              *  LEA(b+8)  byref  REG NA
Contained
DefList: { N075.t21. IND }
N079 (  7,  7) [000022] ---XGO------              *  IND       ref    REG NA <l:$250, c:$24f>
<RefPosition #137 @79  RefTypeUse <Ivl:36>  BB01 regmask=[allIntButFP] minReg=1 last wt=100.00>
Interval 37: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #138 @80  RefTypeDef <Ivl:37> IND BB01 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N079.t22. IND }
N081 (  7,  7) [000030] DA-XGO------              *  STORE_LCL_VAR ref    V10 tmp3         d:2 NA REG NA
<RefPosition #139 @81  RefTypeUse <Ivl:37>  BB01 regmask=[allIntButFP] minReg=1 last wt=100.00>
Assigning related <V10/L4> to <I37>
<RefPosition #140 @82  RefTypeDef <Ivl:4 V10> STORE_LCL_VAR BB01 regmask=[allIntButFP] minReg=1 last wt=400.00>

DefList: {  }
N083 (  1,  1) [000027] ------------              *  LCL_VAR   ref    V09 tmp2         u:2 NA REG NA $243

DefList: {  }
N085 (???,???) [000485] ------------              *  PUTARG_REG ref    REG rcx
<RefPosition #141 @85  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #142 @85  RefTypeUse <Ivl:3 V09> LCL_VAR BB01 regmask=[rcx] minReg=1 last fixed wt=600.00>
Setting putarg_reg as a pass-through of a non-last use lclVar
Interval 38: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #143 @86  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #144 @86  RefTypeDef <Ivl:38> PUTARG_REG BB01 regmask=[rcx] minReg=1 fixed wt=400.00>
Assigning related <V09/L3> to <I38>

DefList: { N085.t485. PUTARG_REG }
N087 ( 15,  8) [000028] --CXG-------              *  CALL      void   System.Object..ctor REG NA $VN.Void
<RefPosition #145 @87  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #146 @87  RefTypeUse <Ivl:38>  BB01 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #147 @88  RefTypeKill <Reg:rax>  BB01 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #148 @88  RefTypeKill <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #149 @88  RefTypeKill <Reg:rdx>  BB01 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #150 @88  RefTypeKill <Reg:r8 >  BB01 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #151 @88  RefTypeKill <Reg:r9 >  BB01 regmask=[r9] minReg=1 wt=100.00>
<RefPosition #152 @88  RefTypeKill <Reg:r10>  BB01 regmask=[r10] minReg=1 wt=100.00>
<RefPosition #153 @88  RefTypeKill <Reg:r11>  BB01 regmask=[r11] minReg=1 wt=100.00>

DefList: {  }
N089 (???,???) [000431] ------------              *  IL_OFFSET void   IL offset: 0x37 REG NA

DefList: {  }
N091 (  1,  1) [000031] ------------              *  LCL_VAR   ref    V10 tmp3         u:2 NA (last use) REG NA <l:$248, c:$94>

DefList: {  }
N093 (  2,  2) [000287] ------------              *  LEA(b+16) byref  REG NA
<RefPosition #154 @93  RefTypeUse <Ivl:4 V10> LCL_VAR BB01 regmask=[allIntButFP] minReg=1 last wt=400.00>
Interval 39: byref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #155 @94  RefTypeDef <Ivl:39> LEA BB01 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N093.t287. LEA }
N095 (  1,  1) [000032] ------------              *  LCL_VAR   ref    V09 tmp2         u:2 NA (last use) REG NA $243

DefList: { N093.t287. LEA }
N097 (???,???) [000432] -A-XG-------              *  STOREIND  ref    REG NA
<RefPosition #156 @97  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #157 @97  RefTypeUse <Ivl:39>  BB01 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #158 @97  RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #159 @97  RefTypeUse <Ivl:3 V09> LCL_VAR BB01 regmask=[rdx] minReg=1 last fixed wt=600.00>
<RefPosition #160 @98  RefTypeKill <Reg:rax>  BB01 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #161 @98  RefTypeKill <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #162 @98  RefTypeKill <Reg:rdx>  BB01 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #163 @98  RefTypeKill <Reg:r8 >  BB01 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #164 @98  RefTypeKill <Reg:r9 >  BB01 regmask=[r9] minReg=1 wt=100.00>
<RefPosition #165 @98  RefTypeKill <Reg:r10>  BB01 regmask=[r10] minReg=1 wt=100.00>
<RefPosition #166 @98  RefTypeKill <Reg:r11>  BB01 regmask=[r11] minReg=1 wt=100.00>
<RefPosition #167 @98  RefTypeKill <Reg:mm0>  BB01 regmask=[mm0] minReg=1 wt=100.00>
<RefPosition #168 @98  RefTypeKill <Reg:mm1>  BB01 regmask=[mm1] minReg=1 wt=100.00>
<RefPosition #169 @98  RefTypeKill <Reg:mm2>  BB01 regmask=[mm2] minReg=1 wt=100.00>
<RefPosition #170 @98  RefTypeKill <Reg:mm3>  BB01 regmask=[mm3] minReg=1 wt=100.00>
<RefPosition #171 @98  RefTypeKill <Reg:mm4>  BB01 regmask=[mm4] minReg=1 wt=100.00>
<RefPosition #172 @98  RefTypeKill <Reg:mm5>  BB01 regmask=[mm5] minReg=1 wt=100.00>

DefList: {  }
N099 (???,???) [000433] ------------              *  IL_OFFSET void   IL offset: 0x3c REG NA

DefList: {  }
N101 (  2, 10) [000037] H-----------              *  CNS_INT(h) long   0x7ffdb3ee6200 token REG NA $1c6
Interval 40: long RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #173 @102 RefTypeDef <Ivl:40> CNS_INT BB01 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N101.t37. CNS_INT }
N103 (???,???) [000486] ------------              *  PUTARG_REG long   REG rcx
<RefPosition #174 @103 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #175 @103 RefTypeUse <Ivl:40>  BB01 regmask=[rcx] minReg=1 last fixed wt=100.00>
Interval 41: long RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #176 @104 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #177 @104 RefTypeDef <Ivl:41> PUTARG_REG BB01 regmask=[rcx] minReg=1 fixed wt=400.00>

DefList: { N103.t486. PUTARG_REG }
N105 ( 16, 16) [000038] --C---------              *  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST REG NA $253
<RefPosition #178 @105 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #179 @105 RefTypeUse <Ivl:41>  BB01 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #180 @106 RefTypeKill <Reg:rax>  BB01 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #181 @106 RefTypeKill <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #182 @106 RefTypeKill <Reg:rdx>  BB01 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #183 @106 RefTypeKill <Reg:r8 >  BB01 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #184 @106 RefTypeKill <Reg:r9 >  BB01 regmask=[r9] minReg=1 wt=100.00>
<RefPosition #185 @106 RefTypeKill <Reg:r10>  BB01 regmask=[r10] minReg=1 wt=100.00>
<RefPosition #186 @106 RefTypeKill <Reg:r11>  BB01 regmask=[r11] minReg=1 wt=100.00>
Interval 42: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #187 @106 RefTypeFixedReg <Reg:rax>  BB01 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #188 @106 RefTypeDef <Ivl:42> CALL BB01 regmask=[rax] minReg=1 fixed wt=400.00>

DefList: { N105.t38. CALL }
N107 ( 16, 16) [000040] DA----------              *  STORE_LCL_VAR ref    V11 tmp4         d:2 NA REG NA
<RefPosition #189 @107 RefTypeUse <Ivl:42>  BB01 regmask=[allIntButFP] minReg=1 last wt=100.00>
Assigning related <V11/L5> to <I42>
<RefPosition #190 @108 RefTypeDef <Ivl:5 V11> STORE_LCL_VAR BB01 regmask=[allIntButFP] minReg=1 last wt=600.00>

DefList: {  }
N109 (  1,  1) [000041] ------------              *  LCL_VAR   ref    V11 tmp4         u:2 NA REG NA $253

DefList: {  }
N111 (???,???) [000487] ------------              *  PUTARG_REG ref    REG rcx
<RefPosition #191 @111 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #192 @111 RefTypeUse <Ivl:5 V11> LCL_VAR BB01 regmask=[rcx] minReg=1 last fixed wt=600.00>
Setting putarg_reg as a pass-through of a non-last use lclVar
Interval 43: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #193 @112 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #194 @112 RefTypeDef <Ivl:43> PUTARG_REG BB01 regmask=[rcx] minReg=1 fixed wt=400.00>
Assigning related <V11/L5> to <I43>

DefList: { N111.t487. PUTARG_REG }
N113 (  1,  1) [000035] ------------              *  LCL_VAR   ref    V00 this         u:1 NA REG NA $80

DefList: { N111.t487. PUTARG_REG }
N115 (???,???) [000488] ------------              *  PUTARG_REG ref    REG rdx
<RefPosition #195 @115 RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #196 @115 RefTypeUse <Ivl:0 V00> LCL_VAR BB01 regmask=[rdx] minReg=1 last fixed wt=2350.00>
Setting putarg_reg as a pass-through of a non-last use lclVar
Interval 44: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #197 @116 RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #198 @116 RefTypeDef <Ivl:44> PUTARG_REG BB01 regmask=[rdx] minReg=1 fixed wt=400.00>
Assigning related <V00/L0> to <I44>

DefList: { N111.t487. PUTARG_REG; N115.t488. PUTARG_REG }
N117 (  2, 10) [000036] H-----------              *  CNS_INT(h) long   0x7ffdb3b213f8 ftn REG NA $1c7
Interval 45: long RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #199 @118 RefTypeDef <Ivl:45> CNS_INT BB01 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N111.t487. PUTARG_REG; N115.t488. PUTARG_REG; N117.t36. CNS_INT }
N119 (???,???) [000489] ------------              *  PUTARG_REG long   REG r8
<RefPosition #200 @119 RefTypeFixedReg <Reg:r8 >  BB01 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #201 @119 RefTypeUse <Ivl:45>  BB01 regmask=[r8] minReg=1 last fixed wt=100.00>
Interval 46: long RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #202 @120 RefTypeFixedReg <Reg:r8 >  BB01 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #203 @120 RefTypeDef <Ivl:46> PUTARG_REG BB01 regmask=[r8] minReg=1 fixed wt=400.00>

DefList: { N111.t487. PUTARG_REG; N115.t488. PUTARG_REG; N119.t489. PUTARG_REG }
N121 ( 18, 21) [000042] --CXG-------              *  CALL      void   System.MulticastDelegate.CtorClosed REG NA $VN.Void
<RefPosition #204 @121 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #205 @121 RefTypeUse <Ivl:43>  BB01 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #206 @121 RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #207 @121 RefTypeUse <Ivl:44>  BB01 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #208 @121 RefTypeFixedReg <Reg:r8 >  BB01 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #209 @121 RefTypeUse <Ivl:46>  BB01 regmask=[r8] minReg=1 last fixed wt=100.00>
<RefPosition #210 @122 RefTypeKill <Reg:rax>  BB01 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #211 @122 RefTypeKill <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #212 @122 RefTypeKill <Reg:rdx>  BB01 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #213 @122 RefTypeKill <Reg:r8 >  BB01 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #214 @122 RefTypeKill <Reg:r9 >  BB01 regmask=[r9] minReg=1 wt=100.00>
<RefPosition #215 @122 RefTypeKill <Reg:r10>  BB01 regmask=[r10] minReg=1 wt=100.00>
<RefPosition #216 @122 RefTypeKill <Reg:r11>  BB01 regmask=[r11] minReg=1 wt=100.00>

DefList: {  }
N123 (???,???) [000434] ------------              *  IL_OFFSET void   IL offset: 0x48 REG NA

DefList: {  }
N125 (  2, 10) [000044] H-----------              *  CNS_INT(h) long   0x7ffdb3c84e80 token REG NA $1c8
Interval 47: long RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #217 @126 RefTypeDef <Ivl:47> CNS_INT BB01 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N125.t44. CNS_INT }
N127 (???,???) [000490] ------------              *  PUTARG_REG long   REG rcx
<RefPosition #218 @127 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #219 @127 RefTypeUse <Ivl:47>  BB01 regmask=[rcx] minReg=1 last fixed wt=100.00>
Interval 48: long RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #220 @128 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #221 @128 RefTypeDef <Ivl:48> PUTARG_REG BB01 regmask=[rcx] minReg=1 fixed wt=400.00>

DefList: { N127.t490. PUTARG_REG }
N129 ( 16, 16) [000045] --C---------              *  CALL help ref    HELPER.CORINFO_HELP_NEWFAST REG NA $254
<RefPosition #222 @129 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #223 @129 RefTypeUse <Ivl:48>  BB01 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #224 @130 RefTypeKill <Reg:rax>  BB01 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #225 @130 RefTypeKill <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #226 @130 RefTypeKill <Reg:rdx>  BB01 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #227 @130 RefTypeKill <Reg:r8 >  BB01 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #228 @130 RefTypeKill <Reg:r9 >  BB01 regmask=[r9] minReg=1 wt=100.00>
<RefPosition #229 @130 RefTypeKill <Reg:r10>  BB01 regmask=[r10] minReg=1 wt=100.00>
<RefPosition #230 @130 RefTypeKill <Reg:r11>  BB01 regmask=[r11] minReg=1 wt=100.00>
Interval 49: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #231 @130 RefTypeFixedReg <Reg:rax>  BB01 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #232 @130 RefTypeDef <Ivl:49> CALL BB01 regmask=[rax] minReg=1 fixed wt=400.00>

DefList: { N129.t45. CALL }
N131 ( 16, 16) [000047] DA----------              *  STORE_LCL_VAR ref    V12 tmp5         d:2 NA REG NA
<RefPosition #233 @131 RefTypeUse <Ivl:49>  BB01 regmask=[allIntButFP] minReg=1 last wt=100.00>
Assigning related <V12/L6> to <I49>
<RefPosition #234 @132 RefTypeDef <Ivl:6 V12> STORE_LCL_VAR BB01 regmask=[allIntButFP] minReg=1 last wt=600.00>

DefList: {  }
N133 (  1,  1) [000048] ------------              *  LCL_VAR   ref    V12 tmp5         u:2 NA REG NA $254

DefList: {  }
N135 (???,???) [000491] ------------              *  PUTARG_REG ref    REG rcx
<RefPosition #235 @135 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #236 @135 RefTypeUse <Ivl:6 V12> LCL_VAR BB01 regmask=[rcx] minReg=1 last fixed wt=600.00>
Setting putarg_reg as a pass-through of a non-last use lclVar
Interval 50: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #237 @136 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #238 @136 RefTypeDef <Ivl:50> PUTARG_REG BB01 regmask=[rcx] minReg=1 fixed wt=400.00>
Assigning related <V12/L6> to <I50>

DefList: { N135.t491. PUTARG_REG }
N137 (  1,  1) [000043] ------------              *  LCL_VAR   ref    V11 tmp4         u:2 NA (last use) REG NA $253

DefList: { N135.t491. PUTARG_REG }
N139 (???,???) [000492] ------------              *  PUTARG_REG ref    REG rdx
<RefPosition #239 @139 RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #240 @139 RefTypeUse <Ivl:5 V11> LCL_VAR BB01 regmask=[rdx] minReg=1 last fixed wt=600.00>
Interval 51: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #241 @140 RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #242 @140 RefTypeDef <Ivl:51> PUTARG_REG BB01 regmask=[rdx] minReg=1 fixed wt=400.00>

DefList: { N135.t491. PUTARG_REG; N139.t492. PUTARG_REG }
N141 ( 16, 10) [000049] --CXG-------              *  CALL      void   System.Threading.Thread..ctor REG NA $VN.Void
<RefPosition #243 @141 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #244 @141 RefTypeUse <Ivl:50>  BB01 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #245 @141 RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #246 @141 RefTypeUse <Ivl:51>  BB01 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #247 @142 RefTypeKill <Reg:rax>  BB01 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #248 @142 RefTypeKill <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #249 @142 RefTypeKill <Reg:rdx>  BB01 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #250 @142 RefTypeKill <Reg:r8 >  BB01 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #251 @142 RefTypeKill <Reg:r9 >  BB01 regmask=[r9] minReg=1 wt=100.00>
<RefPosition #252 @142 RefTypeKill <Reg:r10>  BB01 regmask=[r10] minReg=1 wt=100.00>
<RefPosition #253 @142 RefTypeKill <Reg:r11>  BB01 regmask=[r11] minReg=1 wt=100.00>

DefList: {  }
N143 (???,???) [000435] ------------              *  IL_OFFSET void   IL offset: 0x4d REG NA

DefList: {  }
N145 (  1,  1) [000050] ------------              *  LCL_VAR   ref    V12 tmp5         u:2 NA (last use) REG NA $254

DefList: {  }
N147 (???,???) [000493] ------------              *  PUTARG_REG ref    REG rcx
<RefPosition #254 @147 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #255 @147 RefTypeUse <Ivl:6 V12> LCL_VAR BB01 regmask=[rcx] minReg=1 last fixed wt=600.00>
Interval 52: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #256 @148 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #257 @148 RefTypeDef <Ivl:52> PUTARG_REG BB01 regmask=[rcx] minReg=1 fixed wt=400.00>

DefList: { N147.t493. PUTARG_REG }
N149 ( 15,  8) [000051] --CXG-------              *  CALL      void   System.Threading.Thread.Start REG NA $VN.Void
<RefPosition #258 @149 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #259 @149 RefTypeUse <Ivl:52>  BB01 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #260 @150 RefTypeKill <Reg:rax>  BB01 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #261 @150 RefTypeKill <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #262 @150 RefTypeKill <Reg:rdx>  BB01 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #263 @150 RefTypeKill <Reg:r8 >  BB01 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #264 @150 RefTypeKill <Reg:r9 >  BB01 regmask=[r9] minReg=1 wt=100.00>
<RefPosition #265 @150 RefTypeKill <Reg:r10>  BB01 regmask=[r10] minReg=1 wt=100.00>
<RefPosition #266 @150 RefTypeKill <Reg:r11>  BB01 regmask=[r11] minReg=1 wt=100.00>

DefList: {  }
N151 (???,???) [000436] ------------              *  IL_OFFSET void   IL offset: 0x52 REG NA

DefList: {  }
N153 ( 14,  5) [000052] --CXG-------              *  CALL      long   System.DateTime.get_Now REG NA $c2
<RefPosition #267 @154 RefTypeKill <Reg:rax>  BB01 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #268 @154 RefTypeKill <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #269 @154 RefTypeKill <Reg:rdx>  BB01 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #270 @154 RefTypeKill <Reg:r8 >  BB01 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #271 @154 RefTypeKill <Reg:r9 >  BB01 regmask=[r9] minReg=1 wt=100.00>
<RefPosition #272 @154 RefTypeKill <Reg:r10>  BB01 regmask=[r10] minReg=1 wt=100.00>
<RefPosition #273 @154 RefTypeKill <Reg:r11>  BB01 regmask=[r11] minReg=1 wt=100.00>
Interval 53: long RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #274 @154 RefTypeFixedReg <Reg:rax>  BB01 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #275 @154 RefTypeDef <Ivl:53> CALL BB01 regmask=[rax] minReg=1 fixed wt=400.00>

DefList: { N153.t52. CALL }
N155 ( 18,  8) [000055] DA-XG-------              *  STORE_LCL_VAR struct<System.DateTime, 8>(AX)(P) V02 loc0          NA
                                                  *    long   V02._dateData (offs=0x00) -> V17 tmp10         REG NA
<RefPosition #276 @155 RefTypeUse <Ivl:53>  BB01 regmask=[allIntButFP] minReg=1 last wt=100.00>

DefList: {  }
N157 (???,???) [000437] ------------              *  IL_OFFSET void   IL offset: 0x58 REG NA

DefList: {  }
N159 (  3,  2) [000056] -------N----              *  LCL_VAR_ADDR byref  V02 loc0          NA
                                                  *    long   V02._dateData (offs=0x00) -> V17 tmp10         REG NA
Interval 54: byref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #277 @160 RefTypeDef <Ivl:54> LCL_VAR_ADDR BB01 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N159.t56. LCL_VAR_ADDR }
N161 (???,???) [000494] ------------              *  PUTARG_REG byref  REG rcx
<RefPosition #278 @161 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #279 @161 RefTypeUse <Ivl:54>  BB01 regmask=[rcx] minReg=1 last fixed wt=100.00>
Interval 55: byref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #280 @162 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #281 @162 RefTypeDef <Ivl:55> PUTARG_REG BB01 regmask=[rcx] minReg=1 fixed wt=400.00>

DefList: { N161.t494. PUTARG_REG }
N163 ( 17, 10) [000058] --CXG-------              *  CALL      ref    System.DateTime.ToString REG NA $a8
<RefPosition #282 @163 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #283 @163 RefTypeUse <Ivl:55>  BB01 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #284 @164 RefTypeKill <Reg:rax>  BB01 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #285 @164 RefTypeKill <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #286 @164 RefTypeKill <Reg:rdx>  BB01 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #287 @164 RefTypeKill <Reg:r8 >  BB01 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #288 @164 RefTypeKill <Reg:r9 >  BB01 regmask=[r9] minReg=1 wt=100.00>
<RefPosition #289 @164 RefTypeKill <Reg:r10>  BB01 regmask=[r10] minReg=1 wt=100.00>
<RefPosition #290 @164 RefTypeKill <Reg:r11>  BB01 regmask=[r11] minReg=1 wt=100.00>
Interval 56: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #291 @164 RefTypeFixedReg <Reg:rax>  BB01 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #292 @164 RefTypeDef <Ivl:56> CALL BB01 regmask=[rax] minReg=1 fixed wt=400.00>

DefList: { N163.t58. CALL }
N165 ( 17, 10) [000300] DA-XG-----L-              *  STORE_LCL_VAR ref    V22 tmp15        d:2 NA REG NA
<RefPosition #293 @165 RefTypeUse <Ivl:56>  BB01 regmask=[allIntButFP] minReg=1 last wt=100.00>
Assigning related <V22/L12> to <I56>
<RefPosition #294 @166 RefTypeDef <Ivl:12 V22> STORE_LCL_VAR BB01 regmask=[allIntButFP] minReg=1 last wt=400.00>

DefList: {  }
N167 (  1,  1) [000301] ------------              *  LCL_VAR   ref    V22 tmp15        u:2 NA (last use) REG NA $a8

DefList: {  }
N169 (???,???) [000495] ------------              *  PUTARG_REG ref    REG rcx
<RefPosition #295 @169 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #296 @169 RefTypeUse <Ivl:12 V22> LCL_VAR BB01 regmask=[rcx] minReg=1 last fixed wt=400.00>
Interval 57: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #297 @170 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #298 @170 RefTypeDef <Ivl:57> PUTARG_REG BB01 regmask=[rcx] minReg=1 fixed wt=400.00>

DefList: { N169.t495. PUTARG_REG }
N171 (  2, 10) [000297] H-----------              *  CNS_INT(h) long   0x750031F8 "	 Consumer thread started, adding items..." REG NA $1c9
Interval 58: long RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #299 @172 RefTypeDef <Ivl:58> CNS_INT BB01 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N169.t495. PUTARG_REG; N171.t297. CNS_INT }
N173 (  4, 12) [000298] #---G-------              *  IND       ref    REG NA $ac
<RefPosition #300 @173 RefTypeUse <Ivl:58>  BB01 regmask=[allIntButFP] minReg=1 last wt=100.00>
Interval 59: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #301 @174 RefTypeDef <Ivl:59> IND BB01 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N169.t495. PUTARG_REG; N173.t298. IND }
N175 (???,???) [000496] ----G-------              *  PUTARG_REG ref    REG rdx
<RefPosition #302 @175 RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #303 @175 RefTypeUse <Ivl:59>  BB01 regmask=[rdx] minReg=1 last fixed wt=100.00>
Interval 60: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #304 @176 RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #305 @176 RefTypeDef <Ivl:60> PUTARG_REG BB01 regmask=[rdx] minReg=1 fixed wt=400.00>

DefList: { N169.t495. PUTARG_REG; N175.t496. PUTARG_REG }
N177 ( 39, 30) [000060] --CXG-------              *  CALL      ref    System.String.Concat REG NA $ad
<RefPosition #306 @177 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #307 @177 RefTypeUse <Ivl:57>  BB01 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #308 @177 RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #309 @177 RefTypeUse <Ivl:60>  BB01 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #310 @178 RefTypeKill <Reg:rax>  BB01 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #311 @178 RefTypeKill <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #312 @178 RefTypeKill <Reg:rdx>  BB01 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #313 @178 RefTypeKill <Reg:r8 >  BB01 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #314 @178 RefTypeKill <Reg:r9 >  BB01 regmask=[r9] minReg=1 wt=100.00>
<RefPosition #315 @178 RefTypeKill <Reg:r10>  BB01 regmask=[r10] minReg=1 wt=100.00>
<RefPosition #316 @178 RefTypeKill <Reg:r11>  BB01 regmask=[r11] minReg=1 wt=100.00>
Interval 61: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #317 @178 RefTypeFixedReg <Reg:rax>  BB01 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #318 @178 RefTypeDef <Ivl:61> CALL BB01 regmask=[rax] minReg=1 fixed wt=400.00>

DefList: { N177.t60. CALL }
N179 (???,???) [000497] --CXG-------              *  PUTARG_REG ref    REG rcx
<RefPosition #319 @179 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #320 @179 RefTypeUse <Ivl:61>  BB01 regmask=[rcx] minReg=1 last fixed wt=100.00>
Interval 62: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #321 @180 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #322 @180 RefTypeDef <Ivl:62> PUTARG_REG BB01 regmask=[rcx] minReg=1 fixed wt=400.00>

DefList: { N179.t497. PUTARG_REG }
N181 ( 53, 36) [000061] --CXG-------              *  CALL      void   System.Console.WriteLine REG NA $VN.Void
<RefPosition #323 @181 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #324 @181 RefTypeUse <Ivl:62>  BB01 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #325 @182 RefTypeKill <Reg:rax>  BB01 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #326 @182 RefTypeKill <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #327 @182 RefTypeKill <Reg:rdx>  BB01 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #328 @182 RefTypeKill <Reg:r8 >  BB01 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #329 @182 RefTypeKill <Reg:r9 >  BB01 regmask=[r9] minReg=1 wt=100.00>
<RefPosition #330 @182 RefTypeKill <Reg:r10>  BB01 regmask=[r10] minReg=1 wt=100.00>
<RefPosition #331 @182 RefTypeKill <Reg:r11>  BB01 regmask=[r11] minReg=1 wt=100.00>

DefList: {  }
N183 (???,???) [000438] ------------              *  IL_OFFSET void   IL offset: 0x6e REG NA

DefList: {  }
N185 (  1,  1) [000062] ------------              *  CNS_INT   int    0 REG NA $40
Interval 63: int RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #332 @186 RefTypeDef <Ivl:63> CNS_INT BB01 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N185.t62. CNS_INT }
N187 (  1,  3) [000064] DA----------              *  STORE_LCL_VAR int    V03 loc1         d:2 NA REG NA
<RefPosition #333 @187 RefTypeUse <Ivl:63>  BB01 regmask=[allIntButFP] minReg=1 last wt=100.00>
Assigning related <V03/L1> to <I63>
<RefPosition #334 @188 RefTypeDef <Ivl:1 V03> STORE_LCL_VAR BB01 regmask=[allIntButFP] minReg=1 last wt=2500.00>



CHECKING LAST USES for BB01, liveout={V00 V03}
==============================
use: {V00}
def: {V03 V08 V09 V10 V11 V12 V21 V22}

NEW BLOCK BB02


Setting BB01 as the predecessor for determining incoming variable registers of BB02
<RefPosition #335 @189 RefTypeBB  BB02 regmask=[] minReg=1 wt=800.00>

DefList: {  }
N191 (???,???) [000439] ------------              *  IL_OFFSET void   IL offset: 0x72 REG NA

DefList: {  }
N193 (  1,  1) [000069] ------------              *  LCL_VAR   ref    V00 this         u:1 NA REG NA $80

DefList: {  }
N195 (  2,  2) [000305] -c----------              *  LEA(b+8)  byref  REG NA
Contained
DefList: {  }
N197 (  4,  4) [000070] n---GO------              *  IND       ref    REG NA <l:$258, c:$257>
<RefPosition #336 @197 RefTypeUse <Ivl:0 V00> LCL_VAR BB02 regmask=[allIntButFP] minReg=1 last wt=2350.00>
Interval 64: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #337 @198 RefTypeDef <Ivl:64> IND BB02 regmask=[allIntButFP] minReg=1 wt=3200.00>

DefList: { N197.t70. IND }
N199 (  8,  7) [000072] DA--GO------              *  STORE_LCL_VAR ref    V04 loc2         d:3 NA REG NA
<RefPosition #338 @199 RefTypeUse <Ivl:64>  BB02 regmask=[allIntButFP] minReg=1 last wt=800.00>

DefList: {  }
N201 (???,???) [000440] ------------              *  IL_OFFSET void   IL offset: 0x79 REG NA

DefList: {  }
N203 (  1,  1) [000073] ------------              *  CNS_INT   int    0 REG NA $40
Interval 65: int RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #339 @204 RefTypeDef <Ivl:65> CNS_INT BB02 regmask=[allIntButFP] minReg=1 wt=3200.00>

DefList: { N203.t73. CNS_INT }
N205 (  5,  4) [000075] DA--G-------              *  STORE_LCL_VAR int   (AX) V05 loc3          NA REG NA
<RefPosition #340 @205 RefTypeUse <Ivl:65>  BB02 regmask=[allIntButFP] minReg=1 last wt=800.00>



CHECKING LAST USES for BB02, liveout={V00 V03 V04}
==============================
use: {V00}
def: {V04}

NEW BLOCK BB03


Setting BB02 as the predecessor for determining incoming variable registers of BB03
<RefPosition #341 @207 RefTypeBB  BB03 regmask=[] minReg=1 wt=800.00>

DefList: {  }
N209 (???,???) [000441] ------------              *  IL_OFFSET void   IL offset: 0x7b REG NA

DefList: {  }
N211 (  3,  3) [000078] ------------              *  LCL_VAR_ADDR long   V05 loc3          NA REG NA $206
Interval 66: long RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #342 @212 RefTypeDef <Ivl:66> LCL_VAR_ADDR BB03 regmask=[allIntButFP] minReg=1 wt=3200.00>

DefList: { N211.t78. LCL_VAR_ADDR }
N213 (???,???) [000498] ------------              *  PUTARG_REG long   REG rdx
<RefPosition #343 @213 RefTypeFixedReg <Reg:rdx>  BB03 regmask=[rdx] minReg=1 wt=800.00>
<RefPosition #344 @213 RefTypeUse <Ivl:66>  BB03 regmask=[rdx] minReg=1 last fixed wt=800.00>
Interval 67: long RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #345 @214 RefTypeFixedReg <Reg:rdx>  BB03 regmask=[rdx] minReg=1 wt=800.00>
<RefPosition #346 @214 RefTypeDef <Ivl:67> PUTARG_REG BB03 regmask=[rdx] minReg=1 fixed wt=3200.00>

DefList: { N213.t498. PUTARG_REG }
N215 (  1,  1) [000076] ------------              *  LCL_VAR   ref    V04 loc2         u:3 NA REG NA <l:$256, c:$b2>
Interval 68: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #347 @216 RefTypeDef <Ivl:68> LCL_VAR BB03 regmask=[allIntButFP] minReg=1 wt=3200.00>

DefList: { N213.t498. PUTARG_REG; N215.t76. LCL_VAR }
N217 (???,???) [000499] ------------              *  PUTARG_REG ref    REG rcx
<RefPosition #348 @217 RefTypeFixedReg <Reg:rcx>  BB03 regmask=[rcx] minReg=1 wt=800.00>
<RefPosition #349 @217 RefTypeUse <Ivl:68>  BB03 regmask=[rcx] minReg=1 last fixed wt=800.00>
Interval 69: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #350 @218 RefTypeFixedReg <Reg:rcx>  BB03 regmask=[rcx] minReg=1 wt=800.00>
<RefPosition #351 @218 RefTypeDef <Ivl:69> PUTARG_REG BB03 regmask=[rcx] minReg=1 fixed wt=3200.00>

DefList: { N213.t498. PUTARG_REG; N217.t499. PUTARG_REG }
N219 ( 18, 11) [000079] --CXG-------              *  CALL      void   System.Threading.Monitor.Enter REG NA $VN.Void
<RefPosition #352 @219 RefTypeFixedReg <Reg:rdx>  BB03 regmask=[rdx] minReg=1 wt=800.00>
<RefPosition #353 @219 RefTypeUse <Ivl:67>  BB03 regmask=[rdx] minReg=1 last fixed wt=800.00>
<RefPosition #354 @219 RefTypeFixedReg <Reg:rcx>  BB03 regmask=[rcx] minReg=1 wt=800.00>
<RefPosition #355 @219 RefTypeUse <Ivl:69>  BB03 regmask=[rcx] minReg=1 last fixed wt=800.00>
<RefPosition #356 @220 RefTypeKill <Reg:rax>  BB03 regmask=[rax] minReg=1 wt=800.00>
<RefPosition #357 @220 RefTypeKill <Reg:rcx>  BB03 regmask=[rcx] minReg=1 wt=800.00>
<RefPosition #358 @220 RefTypeKill <Reg:rdx>  BB03 regmask=[rdx] minReg=1 wt=800.00>
<RefPosition #359 @220 RefTypeKill <Reg:r8 >  BB03 regmask=[r8] minReg=1 wt=800.00>
<RefPosition #360 @220 RefTypeKill <Reg:r9 >  BB03 regmask=[r9] minReg=1 wt=800.00>
<RefPosition #361 @220 RefTypeKill <Reg:r10>  BB03 regmask=[r10] minReg=1 wt=800.00>
<RefPosition #362 @220 RefTypeKill <Reg:r11>  BB03 regmask=[r11] minReg=1 wt=800.00>

DefList: {  }
N221 (???,???) [000442] ------------              *  IL_OFFSET void   IL offset: 0x83 REG NA

DefList: {  }
N223 (  2, 10) [000083] H-----------              *  CNS_INT(h) long   0x7ffdb3ee58a8 method REG NA $1ca
Interval 70: long RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #363 @224 RefTypeDef <Ivl:70> CNS_INT BB03 regmask=[allIntButFP] minReg=1 wt=3200.00>

DefList: { N223.t83. CNS_INT }
N225 (???,???) [000500] ------------              *  PUTARG_REG long   REG rcx
<RefPosition #364 @225 RefTypeFixedReg <Reg:rcx>  BB03 regmask=[rcx] minReg=1 wt=800.00>
<RefPosition #365 @225 RefTypeUse <Ivl:70>  BB03 regmask=[rcx] minReg=1 last fixed wt=800.00>
Interval 71: long RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #366 @226 RefTypeFixedReg <Reg:rcx>  BB03 regmask=[rcx] minReg=1 wt=800.00>
<RefPosition #367 @226 RefTypeDef <Ivl:71> PUTARG_REG BB03 regmask=[rcx] minReg=1 fixed wt=3200.00>

DefList: { N225.t500. PUTARG_REG }
N227 ( 16, 16) [000084] --C---------              *  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST REG NA $259
<RefPosition #368 @227 RefTypeFixedReg <Reg:rcx>  BB03 regmask=[rcx] minReg=1 wt=800.00>
<RefPosition #369 @227 RefTypeUse <Ivl:71>  BB03 regmask=[rcx] minReg=1 last fixed wt=800.00>
<RefPosition #370 @228 RefTypeKill <Reg:rax>  BB03 regmask=[rax] minReg=1 wt=800.00>
<RefPosition #371 @228 RefTypeKill <Reg:rcx>  BB03 regmask=[rcx] minReg=1 wt=800.00>
<RefPosition #372 @228 RefTypeKill <Reg:rdx>  BB03 regmask=[rdx] minReg=1 wt=800.00>
<RefPosition #373 @228 RefTypeKill <Reg:r8 >  BB03 regmask=[r8] minReg=1 wt=800.00>
<RefPosition #374 @228 RefTypeKill <Reg:r9 >  BB03 regmask=[r9] minReg=1 wt=800.00>
<RefPosition #375 @228 RefTypeKill <Reg:r10>  BB03 regmask=[r10] minReg=1 wt=800.00>
<RefPosition #376 @228 RefTypeKill <Reg:r11>  BB03 regmask=[r11] minReg=1 wt=800.00>
Interval 72: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #377 @228 RefTypeFixedReg <Reg:rax>  BB03 regmask=[rax] minReg=1 wt=800.00>
<RefPosition #378 @228 RefTypeDef <Ivl:72> CALL BB03 regmask=[rax] minReg=1 fixed wt=3200.00>

DefList: { N227.t84. CALL }
N229 ( 16, 16) [000086] DA----------              *  STORE_LCL_VAR ref    V13 tmp6         d:2 NA REG NA
<RefPosition #379 @229 RefTypeUse <Ivl:72>  BB03 regmask=[allIntButFP] minReg=1 last wt=800.00>
Assigning related <V13/L7> to <I72>
<RefPosition #380 @230 RefTypeDef <Ivl:7 V13> STORE_LCL_VAR BB03 regmask=[allIntButFP] minReg=1 last wt=4800.00>

DefList: {  }
N231 (  1,  1) [000080] ------------              *  LCL_VAR   ref    V00 this         u:1 NA REG NA $80

DefList: {  }
N233 (  2,  2) [000312] -c----------              *  LEA(b+8)  byref  REG NA
Contained
DefList: {  }
N235 (  4,  4) [000081] n---GO------              *  IND       ref    REG NA <l:$25d, c:$25c>
<RefPosition #381 @235 RefTypeUse <Ivl:0 V00> LCL_VAR BB03 regmask=[allIntButFP] minReg=1 last wt=2350.00>
Interval 73: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #382 @236 RefTypeDef <Ivl:73> IND BB03 regmask=[allIntButFP] minReg=1 wt=3200.00>

DefList: { N235.t81. IND }
N237 (  5,  5) [000310] -c----------              *  LEA(b+8)  byref  REG NA
Contained
DefList: { N235.t81. IND }
N239 (  7,  7) [000082] ---XGO------              *  IND       ref    REG NA <l:$267, c:$266>
<RefPosition #383 @239 RefTypeUse <Ivl:73>  BB03 regmask=[allIntButFP] minReg=1 last wt=800.00>
Interval 74: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #384 @240 RefTypeDef <Ivl:74> IND BB03 regmask=[allIntButFP] minReg=1 wt=3200.00>

DefList: { N239.t82. IND }
N241 (  7,  7) [000090] DA-XGO------              *  STORE_LCL_VAR ref    V14 tmp7         d:2 NA REG NA
<RefPosition #385 @241 RefTypeUse <Ivl:74>  BB03 regmask=[allIntButFP] minReg=1 last wt=800.00>
Assigning related <V14/L8> to <I74>
<RefPosition #386 @242 RefTypeDef <Ivl:8 V14> STORE_LCL_VAR BB03 regmask=[allIntButFP] minReg=1 last wt=3200.00>

DefList: {  }
N243 (  1,  1) [000087] ------------              *  LCL_VAR   ref    V13 tmp6         u:2 NA REG NA $259

DefList: {  }
N245 (???,???) [000501] ------------              *  PUTARG_REG ref    REG rcx
<RefPosition #387 @245 RefTypeFixedReg <Reg:rcx>  BB03 regmask=[rcx] minReg=1 wt=800.00>
<RefPosition #388 @245 RefTypeUse <Ivl:7 V13> LCL_VAR BB03 regmask=[rcx] minReg=1 last fixed wt=4800.00>
Setting putarg_reg as a pass-through of a non-last use lclVar
Interval 75: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #389 @246 RefTypeFixedReg <Reg:rcx>  BB03 regmask=[rcx] minReg=1 wt=800.00>
<RefPosition #390 @246 RefTypeDef <Ivl:75> PUTARG_REG BB03 regmask=[rcx] minReg=1 fixed wt=3200.00>
Assigning related <V13/L7> to <I75>

DefList: { N245.t501. PUTARG_REG }
N247 ( 15,  8) [000230] --CXG-------              *  CALL      void   System.Object..ctor REG NA $VN.Void
<RefPosition #391 @247 RefTypeFixedReg <Reg:rcx>  BB03 regmask=[rcx] minReg=1 wt=800.00>
<RefPosition #392 @247 RefTypeUse <Ivl:75>  BB03 regmask=[rcx] minReg=1 last fixed wt=800.00>
<RefPosition #393 @248 RefTypeKill <Reg:rax>  BB03 regmask=[rax] minReg=1 wt=800.00>
<RefPosition #394 @248 RefTypeKill <Reg:rcx>  BB03 regmask=[rcx] minReg=1 wt=800.00>
<RefPosition #395 @248 RefTypeKill <Reg:rdx>  BB03 regmask=[rdx] minReg=1 wt=800.00>
<RefPosition #396 @248 RefTypeKill <Reg:r8 >  BB03 regmask=[r8] minReg=1 wt=800.00>
<RefPosition #397 @248 RefTypeKill <Reg:r9 >  BB03 regmask=[r9] minReg=1 wt=800.00>
<RefPosition #398 @248 RefTypeKill <Reg:r10>  BB03 regmask=[r10] minReg=1 wt=800.00>
<RefPosition #399 @248 RefTypeKill <Reg:r11>  BB03 regmask=[r11] minReg=1 wt=800.00>

DefList: {  }
N249 (???,???) [000443] ------------              *  IL_OFFSET void   IL offset: 0x93 REG NA

DefList: {  }
N251 (  1,  1) [000091] ------------              *  LCL_VAR   ref    V14 tmp7         u:2 NA (last use) REG NA <l:$25f, c:$b9>

DefList: {  }
N253 (  2,  2) [000315] ------------              *  LEA(b+8)  byref  REG NA
<RefPosition #400 @253 RefTypeUse <Ivl:8 V14> LCL_VAR BB03 regmask=[allIntButFP] minReg=1 last wt=3200.00>
Interval 76: byref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #401 @254 RefTypeDef <Ivl:76> LEA BB03 regmask=[allIntButFP] minReg=1 wt=3200.00>

DefList: { N253.t315. LEA }
N255 (  1,  1) [000092] ------------              *  LCL_VAR   ref    V13 tmp6         u:2 NA (last use) REG NA $259

DefList: { N253.t315. LEA }
N257 (???,???) [000444] -A-XG-------              *  STOREIND  ref    REG NA
<RefPosition #402 @257 RefTypeFixedReg <Reg:rcx>  BB03 regmask=[rcx] minReg=1 wt=800.00>
<RefPosition #403 @257 RefTypeUse <Ivl:76>  BB03 regmask=[rcx] minReg=1 last fixed wt=800.00>
<RefPosition #404 @257 RefTypeFixedReg <Reg:rdx>  BB03 regmask=[rdx] minReg=1 wt=800.00>
<RefPosition #405 @257 RefTypeUse <Ivl:7 V13> LCL_VAR BB03 regmask=[rdx] minReg=1 last fixed wt=4800.00>
<RefPosition #406 @258 RefTypeKill <Reg:rax>  BB03 regmask=[rax] minReg=1 wt=800.00>
<RefPosition #407 @258 RefTypeKill <Reg:rcx>  BB03 regmask=[rcx] minReg=1 wt=800.00>
<RefPosition #408 @258 RefTypeKill <Reg:rdx>  BB03 regmask=[rdx] minReg=1 wt=800.00>
<RefPosition #409 @258 RefTypeKill <Reg:r8 >  BB03 regmask=[r8] minReg=1 wt=800.00>
<RefPosition #410 @258 RefTypeKill <Reg:r9 >  BB03 regmask=[r9] minReg=1 wt=800.00>
<RefPosition #411 @258 RefTypeKill <Reg:r10>  BB03 regmask=[r10] minReg=1 wt=800.00>
<RefPosition #412 @258 RefTypeKill <Reg:r11>  BB03 regmask=[r11] minReg=1 wt=800.00>
<RefPosition #413 @258 RefTypeKill <Reg:mm0>  BB03 regmask=[mm0] minReg=1 wt=800.00>
<RefPosition #414 @258 RefTypeKill <Reg:mm1>  BB03 regmask=[mm1] minReg=1 wt=800.00>
<RefPosition #415 @258 RefTypeKill <Reg:mm2>  BB03 regmask=[mm2] minReg=1 wt=800.00>
<RefPosition #416 @258 RefTypeKill <Reg:mm3>  BB03 regmask=[mm3] minReg=1 wt=800.00>
<RefPosition #417 @258 RefTypeKill <Reg:mm4>  BB03 regmask=[mm4] minReg=1 wt=800.00>
<RefPosition #418 @258 RefTypeKill <Reg:mm5>  BB03 regmask=[mm5] minReg=1 wt=800.00>

DefList: {  }
N259 (???,???) [000445] ------------              *  IL_OFFSET void   IL offset: 0x98 REG NA

DefList: {  }
N261 (  1,  1) [000095] ------------              *  LCL_VAR   ref    V00 this         u:1 NA REG NA $80

DefList: {  }
N263 (  2,  2) [000319] -c----------              *  LEA(b+8)  byref  REG NA
Contained
DefList: {  }
N265 (  4,  4) [000096] n---GO------              *  IND       ref    REG NA <l:$26d, c:$26c>
<RefPosition #419 @265 RefTypeUse <Ivl:0 V00> LCL_VAR BB03 regmask=[allIntButFP] minReg=1 last wt=2350.00>
Interval 77: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #420 @266 RefTypeDef <Ivl:77> IND BB03 regmask=[allIntButFP] minReg=1 wt=3200.00>

DefList: { N265.t96. IND }
N267 (  4,  4) [000414] DA--GO------              *  STORE_LCL_VAR ref    V28 cse1         d:1 NA REG NA
<RefPosition #421 @267 RefTypeUse <Ivl:77>  BB03 regmask=[allIntButFP] minReg=1 last wt=800.00>
Assigning related <V28/L16> to <I77>
<RefPosition #422 @268 RefTypeDef <Ivl:16 V28> STORE_LCL_VAR BB03 regmask=[allIntButFP] minReg=1 last wt=2400.00>

DefList: {  }
N269 (  1,  1) [000415] ------------              *  LCL_VAR   ref    V28 cse1         u:1 NA REG NA <l:$26d, c:$26c>

DefList: {  }
N271 (  6,  6) [000317] ------------              *  LEA(b+8)  byref  REG NA
<RefPosition #423 @271 RefTypeUse <Ivl:16 V28> LCL_VAR BB03 regmask=[allIntButFP] minReg=1 last wt=2400.00>
Interval 78: byref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #424 @272 RefTypeDef <Ivl:78> LEA BB03 regmask=[allIntButFP] minReg=1 wt=3200.00>

DefList: { N271.t317. LEA }
N273 (  1,  1) [000417] ------------              *  LCL_VAR   ref    V28 cse1         u:1 NA (last use) REG NA <l:$26b, c:$bf>

DefList: { N271.t317. LEA }
N275 (  2,  2) [000323] -c----------              *  LEA(b+8)  byref  REG NA
Contained
DefList: { N271.t317. LEA }
N277 (  4,  4) [000099] ---XG-------              *  IND       ref    REG NA <l:$278, c:$277>
<RefPosition #425 @277 RefTypeUse <Ivl:16 V28> LCL_VAR BB03 regmask=[allIntButFP] minReg=1 last wt=2400.00>
Interval 79: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #426 @278 RefTypeDef <Ivl:79> IND BB03 regmask=[allIntButFP] minReg=1 wt=3200.00>

DefList: { N271.t317. LEA; N277.t99. IND }
N279 (  5,  5) [000321] -c----------              *  LEA(b+8)  byref  REG NA
Contained
DefList: { N271.t317. LEA; N277.t99. IND }
N281 (  7,  7) [000100] ---XG-------              *  IND       ref    REG NA <l:$403, c:$402>
<RefPosition #427 @281 RefTypeUse <Ivl:79>  BB03 regmask=[allIntButFP] minReg=1 last wt=800.00>
Interval 80: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #428 @282 RefTypeDef <Ivl:80> IND BB03 regmask=[allIntButFP] minReg=1 wt=3200.00>

DefList: { N271.t317. LEA; N281.t100. IND }
N283 (  7,  7) [000409] DA-XG-------              *  STORE_LCL_VAR ref    V27 cse0         d:1 NA REG NA
<RefPosition #429 @283 RefTypeUse <Ivl:80>  BB03 regmask=[allIntButFP] minReg=1 last wt=800.00>
Assigning related <V27/L15> to <I80>
<RefPosition #430 @284 RefTypeDef <Ivl:15 V27> STORE_LCL_VAR BB03 regmask=[allIntButFP] minReg=1 last wt=2400.00>

DefList: { N271.t317. LEA }
N285 (  1,  1) [000410] ------------              *  LCL_VAR   ref    V27 cse0         u:1 NA REG NA <l:$403, c:$402>

DefList: { N271.t317. LEA }
N287 (???,???) [000446] -A-XGO------              *  STOREIND  ref    REG NA
<RefPosition #431 @287 RefTypeFixedReg <Reg:rcx>  BB03 regmask=[rcx] minReg=1 wt=800.00>
<RefPosition #432 @287 RefTypeUse <Ivl:78>  BB03 regmask=[rcx] minReg=1 last fixed wt=800.00>
<RefPosition #433 @287 RefTypeFixedReg <Reg:rdx>  BB03 regmask=[rdx] minReg=1 wt=800.00>
<RefPosition #434 @287 RefTypeUse <Ivl:15 V27> LCL_VAR BB03 regmask=[rdx] minReg=1 last fixed wt=2400.00>
<RefPosition #435 @288 RefTypeKill <Reg:rax>  BB03 regmask=[rax] minReg=1 wt=800.00>
<RefPosition #436 @288 RefTypeKill <Reg:rcx>  BB03 regmask=[rcx] minReg=1 wt=800.00>
<RefPosition #437 @288 RefTypeKill <Reg:rdx>  BB03 regmask=[rdx] minReg=1 wt=800.00>
<RefPosition #438 @288 RefTypeKill <Reg:r8 >  BB03 regmask=[r8] minReg=1 wt=800.00>
<RefPosition #439 @288 RefTypeKill <Reg:r9 >  BB03 regmask=[r9] minReg=1 wt=800.00>
<RefPosition #440 @288 RefTypeKill <Reg:r10>  BB03 regmask=[r10] minReg=1 wt=800.00>
<RefPosition #441 @288 RefTypeKill <Reg:r11>  BB03 regmask=[r11] minReg=1 wt=800.00>
<RefPosition #442 @288 RefTypeKill <Reg:mm0>  BB03 regmask=[mm0] minReg=1 wt=800.00>
<RefPosition #443 @288 RefTypeKill <Reg:mm1>  BB03 regmask=[mm1] minReg=1 wt=800.00>
<RefPosition #444 @288 RefTypeKill <Reg:mm2>  BB03 regmask=[mm2] minReg=1 wt=800.00>
<RefPosition #445 @288 RefTypeKill <Reg:mm3>  BB03 regmask=[mm3] minReg=1 wt=800.00>
<RefPosition #446 @288 RefTypeKill <Reg:mm4>  BB03 regmask=[mm4] minReg=1 wt=800.00>
<RefPosition #447 @288 RefTypeKill <Reg:mm5>  BB03 regmask=[mm5] minReg=1 wt=800.00>

DefList: {  }
N289 (???,???) [000447] ------------              *  IL_OFFSET void   IL offset: 0xb3 REG NA

DefList: {  }
N291 (  2, 10) [000106] H-----------              *  CNS_INT(h) long   0x7ffdb3b058b8 token REG NA $1c3
Interval 81: long RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #448 @292 RefTypeDef <Ivl:81> CNS_INT BB03 regmask=[allIntButFP] minReg=1 wt=3200.00>

DefList: { N291.t106. CNS_INT }
N293 (???,???) [000502] ------------              *  PUTARG_REG long   REG rcx
<RefPosition #449 @293 RefTypeFixedReg <Reg:rcx>  BB03 regmask=[rcx] minReg=1 wt=800.00>
<RefPosition #450 @293 RefTypeUse <Ivl:81>  BB03 regmask=[rcx] minReg=1 last fixed wt=800.00>
Interval 82: long RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #451 @294 RefTypeFixedReg <Reg:rcx>  BB03 regmask=[rcx] minReg=1 wt=800.00>
<RefPosition #452 @294 RefTypeDef <Ivl:82> PUTARG_REG BB03 regmask=[rcx] minReg=1 fixed wt=3200.00>

DefList: { N293.t502. PUTARG_REG }
N295 ( 16, 16) [000107] --C---------              *  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST REG NA $404
<RefPosition #453 @295 RefTypeFixedReg <Reg:rcx>  BB03 regmask=[rcx] minReg=1 wt=800.00>
<RefPosition #454 @295 RefTypeUse <Ivl:82>  BB03 regmask=[rcx] minReg=1 last fixed wt=800.00>
<RefPosition #455 @296 RefTypeKill <Reg:rax>  BB03 regmask=[rax] minReg=1 wt=800.00>
<RefPosition #456 @296 RefTypeKill <Reg:rcx>  BB03 regmask=[rcx] minReg=1 wt=800.00>
<RefPosition #457 @296 RefTypeKill <Reg:rdx>  BB03 regmask=[rdx] minReg=1 wt=800.00>
<RefPosition #458 @296 RefTypeKill <Reg:r8 >  BB03 regmask=[r8] minReg=1 wt=800.00>
<RefPosition #459 @296 RefTypeKill <Reg:r9 >  BB03 regmask=[r9] minReg=1 wt=800.00>
<RefPosition #460 @296 RefTypeKill <Reg:r10>  BB03 regmask=[r10] minReg=1 wt=800.00>
<RefPosition #461 @296 RefTypeKill <Reg:r11>  BB03 regmask=[r11] minReg=1 wt=800.00>
Interval 83: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #462 @296 RefTypeFixedReg <Reg:rax>  BB03 regmask=[rax] minReg=1 wt=800.00>
<RefPosition #463 @296 RefTypeDef <Ivl:83> CALL BB03 regmask=[rax] minReg=1 fixed wt=3200.00>

DefList: { N295.t107. CALL }
N297 ( 16, 16) [000109] DA----------              *  STORE_LCL_VAR ref    V15 tmp8         d:2 NA REG NA
<RefPosition #464 @297 RefTypeUse <Ivl:83>  BB03 regmask=[allIntButFP] minReg=1 last wt=800.00>
Assigning related <V15/L9> to <I83>
<RefPosition #465 @298 RefTypeDef <Ivl:9 V15> STORE_LCL_VAR BB03 regmask=[allIntButFP] minReg=1 last wt=4800.00>

DefList: {  }
N299 (  1,  1) [000412] ------------              *  LCL_VAR   ref    V27 cse0         u:1 NA (last use) REG NA <l:$279, c:$3c4>

DefList: {  }
N301 (  1,  3) [000113] DA--G-------              *  STORE_LCL_VAR ref    V16 tmp9         d:2 NA REG NA
<RefPosition #466 @301 RefTypeUse <Ivl:15 V27> LCL_VAR BB03 regmask=[allIntButFP] minReg=1 last wt=2400.00>
Assigning related <V16/L10> to <V27/L15>
<RefPosition #467 @302 RefTypeDef <Ivl:10 V16> STORE_LCL_VAR BB03 regmask=[allIntButFP] minReg=1 last wt=3200.00>

DefList: {  }
N303 (  1,  1) [000110] ------------              *  LCL_VAR   ref    V15 tmp8         u:2 NA REG NA $404

DefList: {  }
N305 (???,???) [000503] ------------              *  PUTARG_REG ref    REG rcx
<RefPosition #468 @305 RefTypeFixedReg <Reg:rcx>  BB03 regmask=[rcx] minReg=1 wt=800.00>
<RefPosition #469 @305 RefTypeUse <Ivl:9 V15> LCL_VAR BB03 regmask=[rcx] minReg=1 last fixed wt=4800.00>
Setting putarg_reg as a pass-through of a non-last use lclVar
Interval 84: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #470 @306 RefTypeFixedReg <Reg:rcx>  BB03 regmask=[rcx] minReg=1 wt=800.00>
<RefPosition #471 @306 RefTypeDef <Ivl:84> PUTARG_REG BB03 regmask=[rcx] minReg=1 fixed wt=3200.00>
Assigning related <V15/L9> to <I84>

DefList: { N305.t503. PUTARG_REG }
N307 ( 15,  8) [000111] --CXG-------              *  CALL      void   System.Object..ctor REG NA $VN.Void
<RefPosition #472 @307 RefTypeFixedReg <Reg:rcx>  BB03 regmask=[rcx] minReg=1 wt=800.00>
<RefPosition #473 @307 RefTypeUse <Ivl:84>  BB03 regmask=[rcx] minReg=1 last fixed wt=800.00>
<RefPosition #474 @308 RefTypeKill <Reg:rax>  BB03 regmask=[rax] minReg=1 wt=800.00>
<RefPosition #475 @308 RefTypeKill <Reg:rcx>  BB03 regmask=[rcx] minReg=1 wt=800.00>
<RefPosition #476 @308 RefTypeKill <Reg:rdx>  BB03 regmask=[rdx] minReg=1 wt=800.00>
<RefPosition #477 @308 RefTypeKill <Reg:r8 >  BB03 regmask=[r8] minReg=1 wt=800.00>
<RefPosition #478 @308 RefTypeKill <Reg:r9 >  BB03 regmask=[r9] minReg=1 wt=800.00>
<RefPosition #479 @308 RefTypeKill <Reg:r10>  BB03 regmask=[r10] minReg=1 wt=800.00>
<RefPosition #480 @308 RefTypeKill <Reg:r11>  BB03 regmask=[r11] minReg=1 wt=800.00>

DefList: {  }
N309 (???,???) [000448] ------------              *  IL_OFFSET void   IL offset: 0xc3 REG NA

DefList: {  }
N311 (  1,  1) [000114] ------------              *  LCL_VAR   ref    V16 tmp9         u:2 NA (last use) REG NA <l:$279, c:$3ca>

DefList: {  }
N313 (  2,  2) [000333] ------------              *  LEA(b+16) byref  REG NA
<RefPosition #481 @313 RefTypeUse <Ivl:10 V16> LCL_VAR BB03 regmask=[allIntButFP] minReg=1 last wt=3200.00>
Interval 85: byref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #482 @314 RefTypeDef <Ivl:85> LEA BB03 regmask=[allIntButFP] minReg=1 wt=3200.00>

DefList: { N313.t333. LEA }
N315 (  1,  1) [000115] ------------              *  LCL_VAR   ref    V15 tmp8         u:2 NA (last use) REG NA $404

DefList: { N313.t333. LEA }
N317 (???,???) [000449] -A-XG-------              *  STOREIND  ref    REG NA
<RefPosition #483 @317 RefTypeFixedReg <Reg:rcx>  BB03 regmask=[rcx] minReg=1 wt=800.00>
<RefPosition #484 @317 RefTypeUse <Ivl:85>  BB03 regmask=[rcx] minReg=1 last fixed wt=800.00>
<RefPosition #485 @317 RefTypeFixedReg <Reg:rdx>  BB03 regmask=[rdx] minReg=1 wt=800.00>
<RefPosition #486 @317 RefTypeUse <Ivl:9 V15> LCL_VAR BB03 regmask=[rdx] minReg=1 last fixed wt=4800.00>
<RefPosition #487 @318 RefTypeKill <Reg:rax>  BB03 regmask=[rax] minReg=1 wt=800.00>
<RefPosition #488 @318 RefTypeKill <Reg:rcx>  BB03 regmask=[rcx] minReg=1 wt=800.00>
<RefPosition #489 @318 RefTypeKill <Reg:rdx>  BB03 regmask=[rdx] minReg=1 wt=800.00>
<RefPosition #490 @318 RefTypeKill <Reg:r8 >  BB03 regmask=[r8] minReg=1 wt=800.00>
<RefPosition #491 @318 RefTypeKill <Reg:r9 >  BB03 regmask=[r9] minReg=1 wt=800.00>
<RefPosition #492 @318 RefTypeKill <Reg:r10>  BB03 regmask=[r10] minReg=1 wt=800.00>
<RefPosition #493 @318 RefTypeKill <Reg:r11>  BB03 regmask=[r11] minReg=1 wt=800.00>
<RefPosition #494 @318 RefTypeKill <Reg:mm0>  BB03 regmask=[mm0] minReg=1 wt=800.00>
<RefPosition #495 @318 RefTypeKill <Reg:mm1>  BB03 regmask=[mm1] minReg=1 wt=800.00>
<RefPosition #496 @318 RefTypeKill <Reg:mm2>  BB03 regmask=[mm2] minReg=1 wt=800.00>
<RefPosition #497 @318 RefTypeKill <Reg:mm3>  BB03 regmask=[mm3] minReg=1 wt=800.00>
<RefPosition #498 @318 RefTypeKill <Reg:mm4>  BB03 regmask=[mm4] minReg=1 wt=800.00>
<RefPosition #499 @318 RefTypeKill <Reg:mm5>  BB03 regmask=[mm5] minReg=1 wt=800.00>



CHECKING LAST USES for BB03, liveout={V00 V03 V04}
==============================
use: {V00 V04}
def: {V13 V14 V15 V16 V27 V28}

NEW BLOCK BB04


Setting BB03 as the predecessor for determining incoming variable registers of BB04
<RefPosition #500 @319 RefTypeBB  BB04 regmask=[] minReg=1 wt=800.00>

DefList: {  }
N321 (  3,  2) [000256] -c----------              *  LCL_VAR   bool  (AX) V05 loc3          NA REG NA $382
Contained
DefList: {  }
N323 (  1,  1) [000257] -c----------              *  CNS_INT   bool   0 REG NA $40
Contained
DefList: {  }
N325 (  6,  6) [000255] J---G--N-U--              *  EQ        void   REG NA $344

DefList: {  }
N327 (  8,  8) [000254] ----G-------              *  JTRUE     void   REG NA



CHECKING LAST USES for BB04, liveout={V00 V03 V04}
==============================
use: {}
def: {}

NEW BLOCK BB05


Setting BB04 as the predecessor for determining incoming variable registers of BB05
<RefPosition #501 @329 RefTypeBB  BB05 regmask=[] minReg=1 wt=400.00>

DefList: {  }
N331 (  1,  1) [000259] ------------              *  LCL_VAR   ref    V04 loc2         u:3 NA (last use) REG NA <l:$256, c:$b2>
Interval 86: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #502 @332 RefTypeDef <Ivl:86> LCL_VAR BB05 regmask=[allIntButFP] minReg=1 wt=1600.00>

DefList: { N331.t259. LCL_VAR }
N333 (???,???) [000504] ------------              *  PUTARG_REG ref    REG rcx
<RefPosition #503 @333 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #504 @333 RefTypeUse <Ivl:86>  BB05 regmask=[rcx] minReg=1 last fixed wt=400.00>
Interval 87: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #505 @334 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #506 @334 RefTypeDef <Ivl:87> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=1600.00>

DefList: { N333.t504. PUTARG_REG }
N335 ( 15,  7) [000258] --CXG-------              *  CALL      void   System.Threading.Monitor.Exit REG NA $VN.Void
<RefPosition #507 @335 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #508 @335 RefTypeUse <Ivl:87>  BB05 regmask=[rcx] minReg=1 last fixed wt=400.00>
<RefPosition #509 @336 RefTypeKill <Reg:rax>  BB05 regmask=[rax] minReg=1 wt=400.00>
<RefPosition #510 @336 RefTypeKill <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #511 @336 RefTypeKill <Reg:rdx>  BB05 regmask=[rdx] minReg=1 wt=400.00>
<RefPosition #512 @336 RefTypeKill <Reg:r8 >  BB05 regmask=[r8] minReg=1 wt=400.00>
<RefPosition #513 @336 RefTypeKill <Reg:r9 >  BB05 regmask=[r9] minReg=1 wt=400.00>
<RefPosition #514 @336 RefTypeKill <Reg:r10>  BB05 regmask=[r10] minReg=1 wt=400.00>
<RefPosition #515 @336 RefTypeKill <Reg:r11>  BB05 regmask=[r11] minReg=1 wt=400.00>



CHECKING LAST USES for BB05, liveout={V00 V03}
==============================
use: {V04}
def: {}

NEW BLOCK BB06


Setting BB04 as the predecessor for determining incoming variable registers of BB06
<RefPosition #516 @337 RefTypeBB  BB06 regmask=[] minReg=1 wt=800.00>

DefList: {  }
N339 (???,???) [000450] ------------              *  IL_OFFSET void   IL offset: 0xd4 REG NA

DefList: {  }
N341 (  1,  1) [000118] ------------              *  LCL_VAR   int    V03 loc1         u:3 NA (last use) REG NA $380

DefList: {  }
N343 (  1,  1) [000119] -c----------              *  CNS_INT   int    1 REG NA $4e
Contained
DefList: {  }
N345 (  3,  3) [000120] ------------              *  ADD       int    REG NA $345
<RefPosition #517 @345 RefTypeUse <Ivl:1 V03> LCL_VAR BB06 regmask=[allIntButFP] minReg=1 last wt=2500.00>
Interval 88: int RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #518 @346 RefTypeDef <Ivl:88> ADD BB06 regmask=[allIntButFP] minReg=1 wt=3200.00>
Assigning related <I88> to <V03/L1>

DefList: { N345.t120. ADD }
N347 (  3,  3) [000122] DA----------              *  STORE_LCL_VAR int    V03 loc1         d:4 NA REG NA
<RefPosition #519 @347 RefTypeUse <Ivl:88>  BB06 regmask=[allIntButFP] minReg=1 last wt=800.00>
Assigning related <V03/L1> to <I88>
<RefPosition #520 @348 RefTypeDef <Ivl:1 V03> STORE_LCL_VAR BB06 regmask=[allIntButFP] minReg=1 last wt=2500.00>

DefList: {  }
N349 (???,???) [000451] ------------              *  IL_OFFSET void   IL offset: 0xd8 REG NA

DefList: {  }
N351 (  1,  1) [000065] ------------              *  LCL_VAR   int    V03 loc1         u:4 NA REG NA $345

DefList: {  }
N353 (  1,  1) [000066] -c----------              *  CNS_INT   int    10 REG NA $43
Contained
DefList: {  }
N355 (  3,  3) [000067] J------N----              *  LT        void   REG NA $346
<RefPosition #521 @355 RefTypeUse <Ivl:1 V03> LCL_VAR BB06 regmask=[allIntButFP] minReg=1 last wt=2500.00>

DefList: {  }
N357 (  5,  5) [000068] ------------              *  JTRUE     void   REG NA

Exposed uses:<RefPosition #522 @359 RefTypeExpUse <Ivl:1 V03>  BB06 regmask=[allIntButFP] minReg=1 wt=800.00>
 V03


CHECKING LAST USES for BB06, liveout={V00 V03}
==============================
use: {V03}
def: {V03}

NEW BLOCK BB07


Setting BB01 as the predecessor for determining incoming variable registers of BB07
<RefPosition #523 @359 RefTypeBB  BB07 regmask=[] minReg=1 wt=100.00>

DefList: {  }
N361 (???,???) [000452] ------------              *  IL_OFFSET void   IL offset: 0xdd REG NA

DefList: {  }
N363 ( 14,  5) [000130] --CXG-------              *  CALL      long   System.DateTime.get_Now REG NA $c4
<RefPosition #524 @364 RefTypeKill <Reg:rax>  BB07 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #525 @364 RefTypeKill <Reg:rcx>  BB07 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #526 @364 RefTypeKill <Reg:rdx>  BB07 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #527 @364 RefTypeKill <Reg:r8 >  BB07 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #528 @364 RefTypeKill <Reg:r9 >  BB07 regmask=[r9] minReg=1 wt=100.00>
<RefPosition #529 @364 RefTypeKill <Reg:r10>  BB07 regmask=[r10] minReg=1 wt=100.00>
<RefPosition #530 @364 RefTypeKill <Reg:r11>  BB07 regmask=[r11] minReg=1 wt=100.00>
Interval 89: long RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #531 @364 RefTypeFixedReg <Reg:rax>  BB07 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #532 @364 RefTypeDef <Ivl:89> CALL BB07 regmask=[rax] minReg=1 fixed wt=400.00>

DefList: { N363.t130. CALL }
N365 ( 18,  8) [000133] DA-XG-------              *  STORE_LCL_VAR struct<System.DateTime, 8>(AX)(P) V02 loc0          NA
                                                  *    long   V02._dateData (offs=0x00) -> V17 tmp10         REG NA
<RefPosition #533 @365 RefTypeUse <Ivl:89>  BB07 regmask=[allIntButFP] minReg=1 last wt=100.00>

DefList: {  }
N367 (???,???) [000453] ------------              *  IL_OFFSET void   IL offset: 0xe3 REG NA

DefList: {  }
N369 (  3,  2) [000134] -------N----              *  LCL_VAR_ADDR byref  V02 loc0          NA
                                                  *    long   V02._dateData (offs=0x00) -> V17 tmp10         REG NA
Interval 90: byref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #534 @370 RefTypeDef <Ivl:90> LCL_VAR_ADDR BB07 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N369.t134. LCL_VAR_ADDR }
N371 (???,???) [000505] ------------              *  PUTARG_REG byref  REG rcx
<RefPosition #535 @371 RefTypeFixedReg <Reg:rcx>  BB07 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #536 @371 RefTypeUse <Ivl:90>  BB07 regmask=[rcx] minReg=1 last fixed wt=100.00>
Interval 91: byref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #537 @372 RefTypeFixedReg <Reg:rcx>  BB07 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #538 @372 RefTypeDef <Ivl:91> PUTARG_REG BB07 regmask=[rcx] minReg=1 fixed wt=400.00>

DefList: { N371.t505. PUTARG_REG }
N373 ( 17, 10) [000136] --CXG-------              *  CALL      ref    System.DateTime.ToString REG NA $3d5
<RefPosition #539 @373 RefTypeFixedReg <Reg:rcx>  BB07 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #540 @373 RefTypeUse <Ivl:91>  BB07 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #541 @374 RefTypeKill <Reg:rax>  BB07 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #542 @374 RefTypeKill <Reg:rcx>  BB07 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #543 @374 RefTypeKill <Reg:rdx>  BB07 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #544 @374 RefTypeKill <Reg:r8 >  BB07 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #545 @374 RefTypeKill <Reg:r9 >  BB07 regmask=[r9] minReg=1 wt=100.00>
<RefPosition #546 @374 RefTypeKill <Reg:r10>  BB07 regmask=[r10] minReg=1 wt=100.00>
<RefPosition #547 @374 RefTypeKill <Reg:r11>  BB07 regmask=[r11] minReg=1 wt=100.00>
Interval 92: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #548 @374 RefTypeFixedReg <Reg:rax>  BB07 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #549 @374 RefTypeDef <Ivl:92> CALL BB07 regmask=[rax] minReg=1 fixed wt=400.00>

DefList: { N373.t136. CALL }
N375 ( 17, 10) [000342] DA-XG-----L-              *  STORE_LCL_VAR ref    V23 tmp16        d:2 NA REG NA
<RefPosition #550 @375 RefTypeUse <Ivl:92>  BB07 regmask=[allIntButFP] minReg=1 last wt=100.00>
Assigning related <V23/L13> to <I92>
<RefPosition #551 @376 RefTypeDef <Ivl:13 V23> STORE_LCL_VAR BB07 regmask=[allIntButFP] minReg=1 last wt=400.00>

DefList: {  }
N377 (  1,  1) [000343] ------------              *  LCL_VAR   ref    V23 tmp16        u:2 NA (last use) REG NA $3d5

DefList: {  }
N379 (???,???) [000506] ------------              *  PUTARG_REG ref    REG rcx
<RefPosition #552 @379 RefTypeFixedReg <Reg:rcx>  BB07 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #553 @379 RefTypeUse <Ivl:13 V23> LCL_VAR BB07 regmask=[rcx] minReg=1 last fixed wt=400.00>
Interval 93: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #554 @380 RefTypeFixedReg <Reg:rcx>  BB07 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #555 @380 RefTypeDef <Ivl:93> PUTARG_REG BB07 regmask=[rcx] minReg=1 fixed wt=400.00>

DefList: { N379.t506. PUTARG_REG }
N381 (  2, 10) [000339] H-----------              *  CNS_INT(h) long   0x75003200 "	 Waiting for list processing to complete..." REG NA $1cf
Interval 94: long RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #556 @382 RefTypeDef <Ivl:94> CNS_INT BB07 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N379.t506. PUTARG_REG; N381.t339. CNS_INT }
N383 (  4, 12) [000340] #---G-------              *  IND       ref    REG NA $3d9
<RefPosition #557 @383 RefTypeUse <Ivl:94>  BB07 regmask=[allIntButFP] minReg=1 last wt=100.00>
Interval 95: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #558 @384 RefTypeDef <Ivl:95> IND BB07 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N379.t506. PUTARG_REG; N383.t340. IND }
N385 (???,???) [000507] ----G-------              *  PUTARG_REG ref    REG rdx
<RefPosition #559 @385 RefTypeFixedReg <Reg:rdx>  BB07 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #560 @385 RefTypeUse <Ivl:95>  BB07 regmask=[rdx] minReg=1 last fixed wt=100.00>
Interval 96: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #561 @386 RefTypeFixedReg <Reg:rdx>  BB07 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #562 @386 RefTypeDef <Ivl:96> PUTARG_REG BB07 regmask=[rdx] minReg=1 fixed wt=400.00>

DefList: { N379.t506. PUTARG_REG; N385.t507. PUTARG_REG }
N387 ( 39, 30) [000138] --CXG-------              *  CALL      ref    System.String.Concat REG NA $3da
<RefPosition #563 @387 RefTypeFixedReg <Reg:rcx>  BB07 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #564 @387 RefTypeUse <Ivl:93>  BB07 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #565 @387 RefTypeFixedReg <Reg:rdx>  BB07 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #566 @387 RefTypeUse <Ivl:96>  BB07 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #567 @388 RefTypeKill <Reg:rax>  BB07 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #568 @388 RefTypeKill <Reg:rcx>  BB07 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #569 @388 RefTypeKill <Reg:rdx>  BB07 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #570 @388 RefTypeKill <Reg:r8 >  BB07 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #571 @388 RefTypeKill <Reg:r9 >  BB07 regmask=[r9] minReg=1 wt=100.00>
<RefPosition #572 @388 RefTypeKill <Reg:r10>  BB07 regmask=[r10] minReg=1 wt=100.00>
<RefPosition #573 @388 RefTypeKill <Reg:r11>  BB07 regmask=[r11] minReg=1 wt=100.00>
Interval 97: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #574 @388 RefTypeFixedReg <Reg:rax>  BB07 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #575 @388 RefTypeDef <Ivl:97> CALL BB07 regmask=[rax] minReg=1 fixed wt=400.00>

DefList: { N387.t138. CALL }
N389 (???,???) [000508] --CXG-------              *  PUTARG_REG ref    REG rcx
<RefPosition #576 @389 RefTypeFixedReg <Reg:rcx>  BB07 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #577 @389 RefTypeUse <Ivl:97>  BB07 regmask=[rcx] minReg=1 last fixed wt=100.00>
Interval 98: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #578 @390 RefTypeFixedReg <Reg:rcx>  BB07 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #579 @390 RefTypeDef <Ivl:98> PUTARG_REG BB07 regmask=[rcx] minReg=1 fixed wt=400.00>

DefList: { N389.t508. PUTARG_REG }
N391 ( 53, 36) [000139] --CXG-------              *  CALL      void   System.Console.WriteLine REG NA $VN.Void
<RefPosition #580 @391 RefTypeFixedReg <Reg:rcx>  BB07 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #581 @391 RefTypeUse <Ivl:98>  BB07 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #582 @392 RefTypeKill <Reg:rax>  BB07 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #583 @392 RefTypeKill <Reg:rcx>  BB07 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #584 @392 RefTypeKill <Reg:rdx>  BB07 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #585 @392 RefTypeKill <Reg:r8 >  BB07 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #586 @392 RefTypeKill <Reg:r9 >  BB07 regmask=[r9] minReg=1 wt=100.00>
<RefPosition #587 @392 RefTypeKill <Reg:r10>  BB07 regmask=[r10] minReg=1 wt=100.00>
<RefPosition #588 @392 RefTypeKill <Reg:r11>  BB07 regmask=[r11] minReg=1 wt=100.00>



CHECKING LAST USES for BB07, liveout={V00}
==============================
use: {}
def: {V23}

NEW BLOCK BB08


Setting BB07 as the predecessor for determining incoming variable registers of BB08
<RefPosition #589 @393 RefTypeBB  BB08 regmask=[] minReg=1 wt=800.00>

DefList: {  }
N395 (???,???) [000454] ------------              *  IL_OFFSET void   IL offset: 0xf9 REG NA

DefList: {  }
N397 (  1,  1) [000140] ------------              *  LCL_VAR   ref    V00 this         u:1 NA REG NA $80

DefList: {  }
N399 (  2,  2) [000347] -c----------              *  LEA(b+8)  byref  REG NA
Contained
DefList: {  }
N401 (  4,  4) [000141] n---GO------              *  IND       ref    REG NA <l:$41c, c:$41b>
<RefPosition #590 @401 RefTypeUse <Ivl:0 V00> LCL_VAR BB08 regmask=[allIntButFP] minReg=1 last wt=2350.00>
Interval 99: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #591 @402 RefTypeDef <Ivl:99> IND BB08 regmask=[allIntButFP] minReg=1 wt=3200.00>

DefList: { N401.t141. IND }
N403 (  8,  7) [000143] DA--GO------              *  STORE_LCL_VAR ref    V04 loc2         d:2 NA REG NA
<RefPosition #592 @403 RefTypeUse <Ivl:99>  BB08 regmask=[allIntButFP] minReg=1 last wt=800.00>

DefList: {  }
N405 (???,???) [000455] ------------              *  IL_OFFSET void   IL offset: 0x100 REG NA

DefList: {  }
N407 (  1,  1) [000144] ------------              *  CNS_INT   int    0 REG NA $40
Interval 100: int RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #593 @408 RefTypeDef <Ivl:100> CNS_INT BB08 regmask=[allIntButFP] minReg=1 wt=3200.00>

DefList: { N407.t144. CNS_INT }
N409 (  5,  4) [000146] DA--G-------              *  STORE_LCL_VAR int   (AX) V05 loc3          NA REG NA
<RefPosition #594 @409 RefTypeUse <Ivl:100>  BB08 regmask=[allIntButFP] minReg=1 last wt=800.00>



CHECKING LAST USES for BB08, liveout={V00 V04}
==============================
use: {V00}
def: {V04}

NEW BLOCK BB09


Setting BB08 as the predecessor for determining incoming variable registers of BB09
<RefPosition #595 @411 RefTypeBB  BB09 regmask=[] minReg=1 wt=800.00>

DefList: {  }
N413 (???,???) [000456] ------------              *  IL_OFFSET void   IL offset: 0x102 REG NA

DefList: {  }
N415 (  3,  3) [000149] ------------              *  LCL_VAR_ADDR long   V05 loc3          NA REG NA $20a
Interval 101: long RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #596 @416 RefTypeDef <Ivl:101> LCL_VAR_ADDR BB09 regmask=[allIntButFP] minReg=1 wt=3200.00>

DefList: { N415.t149. LCL_VAR_ADDR }
N417 (???,???) [000509] ------------              *  PUTARG_REG long   REG rdx
<RefPosition #597 @417 RefTypeFixedReg <Reg:rdx>  BB09 regmask=[rdx] minReg=1 wt=800.00>
<RefPosition #598 @417 RefTypeUse <Ivl:101>  BB09 regmask=[rdx] minReg=1 last fixed wt=800.00>
Interval 102: long RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #599 @418 RefTypeFixedReg <Reg:rdx>  BB09 regmask=[rdx] minReg=1 wt=800.00>
<RefPosition #600 @418 RefTypeDef <Ivl:102> PUTARG_REG BB09 regmask=[rdx] minReg=1 fixed wt=3200.00>

DefList: { N417.t509. PUTARG_REG }
N419 (  1,  1) [000147] ------------              *  LCL_VAR   ref    V04 loc2         u:2 NA REG NA <l:$41a, c:$3df>
Interval 103: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #601 @420 RefTypeDef <Ivl:103> LCL_VAR BB09 regmask=[allIntButFP] minReg=1 wt=3200.00>

DefList: { N417.t509. PUTARG_REG; N419.t147. LCL_VAR }
N421 (???,???) [000510] ------------              *  PUTARG_REG ref    REG rcx
<RefPosition #602 @421 RefTypeFixedReg <Reg:rcx>  BB09 regmask=[rcx] minReg=1 wt=800.00>
<RefPosition #603 @421 RefTypeUse <Ivl:103>  BB09 regmask=[rcx] minReg=1 last fixed wt=800.00>
Interval 104: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #604 @422 RefTypeFixedReg <Reg:rcx>  BB09 regmask=[rcx] minReg=1 wt=800.00>
<RefPosition #605 @422 RefTypeDef <Ivl:104> PUTARG_REG BB09 regmask=[rcx] minReg=1 fixed wt=3200.00>

DefList: { N417.t509. PUTARG_REG; N421.t510. PUTARG_REG }
N423 ( 18, 11) [000150] --CXG-------              *  CALL      void   System.Threading.Monitor.Enter REG NA $VN.Void
<RefPosition #606 @423 RefTypeFixedReg <Reg:rdx>  BB09 regmask=[rdx] minReg=1 wt=800.00>
<RefPosition #607 @423 RefTypeUse <Ivl:102>  BB09 regmask=[rdx] minReg=1 last fixed wt=800.00>
<RefPosition #608 @423 RefTypeFixedReg <Reg:rcx>  BB09 regmask=[rcx] minReg=1 wt=800.00>
<RefPosition #609 @423 RefTypeUse <Ivl:104>  BB09 regmask=[rcx] minReg=1 last fixed wt=800.00>
<RefPosition #610 @424 RefTypeKill <Reg:rax>  BB09 regmask=[rax] minReg=1 wt=800.00>
<RefPosition #611 @424 RefTypeKill <Reg:rcx>  BB09 regmask=[rcx] minReg=1 wt=800.00>
<RefPosition #612 @424 RefTypeKill <Reg:rdx>  BB09 regmask=[rdx] minReg=1 wt=800.00>
<RefPosition #613 @424 RefTypeKill <Reg:r8 >  BB09 regmask=[r8] minReg=1 wt=800.00>
<RefPosition #614 @424 RefTypeKill <Reg:r9 >  BB09 regmask=[r9] minReg=1 wt=800.00>
<RefPosition #615 @424 RefTypeKill <Reg:r10>  BB09 regmask=[r10] minReg=1 wt=800.00>
<RefPosition #616 @424 RefTypeKill <Reg:r11>  BB09 regmask=[r11] minReg=1 wt=800.00>

DefList: {  }
N425 (???,???) [000457] ------------              *  IL_OFFSET void   IL offset: 0x10a REG NA

DefList: {  }
N427 (  1,  1) [000151] ------------              *  LCL_VAR   ref    V00 this         u:1 NA REG NA $80

DefList: {  }
N429 (  2,  2) [000353] -c----------              *  LEA(b+8)  byref  REG NA
Contained
DefList: {  }
N431 (  4,  4) [000152] n---GO------              *  IND       ref    REG NA <l:$420, c:$41f>
<RefPosition #617 @431 RefTypeUse <Ivl:0 V00> LCL_VAR BB09 regmask=[allIntButFP] minReg=1 last wt=2350.00>
Interval 105: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #618 @432 RefTypeDef <Ivl:105> IND BB09 regmask=[allIntButFP] minReg=1 wt=3200.00>

DefList: { N431.t152. IND }
N433 (  4,  4) [000419] DA--GO------              *  STORE_LCL_VAR ref    V29 cse2         d:1 NA REG NA
<RefPosition #619 @433 RefTypeUse <Ivl:105>  BB09 regmask=[allIntButFP] minReg=1 last wt=800.00>
Assigning related <V29/L17> to <I105>
<RefPosition #620 @434 RefTypeDef <Ivl:17 V29> STORE_LCL_VAR BB09 regmask=[allIntButFP] minReg=1 last wt=2400.00>

DefList: {  }
N435 (  1,  1) [000420] ------------              *  LCL_VAR   ref    V29 cse2         u:1 NA REG NA <l:$420, c:$41f>

DefList: {  }
N437 (  6,  6) [000351] -c----------              *  LEA(b+8)  byref  REG NA
Contained
DefList: {  }
N439 (  8,  8) [000153] ---XGO------              *  IND       ref    REG NA <l:$42a, c:$429>
<RefPosition #621 @439 RefTypeUse <Ivl:17 V29> LCL_VAR BB09 regmask=[allIntButFP] minReg=1 last wt=2400.00>
Interval 106: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #622 @440 RefTypeDef <Ivl:106> IND BB09 regmask=[allIntButFP] minReg=1 wt=3200.00>

DefList: { N439.t153. IND }
N441 (  1,  1) [000422] ------------              *  LCL_VAR   ref    V29 cse2         u:1 NA (last use) REG NA <l:$41e, c:$3e3>

DefList: { N439.t153. IND }
N443 (  2,  2) [000355] -c----------              *  LEA(b+16) byref  REG NA
Contained
DefList: { N439.t153. IND }
N445 (  4,  4) [000156] -c-XG-------              *  IND       ref    REG NA <l:$435, c:$434>
Contained
DefList: { N439.t153. IND }
N447 ( 13, 13) [000157] N--XGO-N-U--              *  EQ        void   REG NA <l:$34a, c:$349>
<RefPosition #623 @447 RefTypeUse <Ivl:106>  BB09 regmask=[allIntButFP] minReg=1 last wt=800.00>
<RefPosition #624 @447 RefTypeUse <Ivl:17 V29> LCL_VAR BB09 regmask=[allIntButFP] minReg=1 last wt=2400.00>

DefList: {  }
N449 ( 15, 15) [000158] ---XGO------              *  JTRUE     void   REG NA



CHECKING LAST USES for BB09, liveout={V00 V04}
==============================
use: {V00 V04}
def: {V29}

NEW BLOCK BB10


Setting BB09 as the predecessor for determining incoming variable registers of BB10
<RefPosition #625 @451 RefTypeBB  BB10 regmask=[] minReg=1 wt=800.00>

DefList: {  }
N453 (  3,  2) [000263] -c----------              *  LCL_VAR   bool  (AX) V05 loc3          NA REG NA $384
Contained
DefList: {  }
N455 (  1,  1) [000264] -c----------              *  CNS_INT   bool   0 REG NA $40
Contained
DefList: {  }
N457 (  6,  6) [000262] J---G--N-U--              *  EQ        void   REG NA $34e

DefList: {  }
N459 (  8,  8) [000261] ----G-------              *  JTRUE     void   REG NA



CHECKING LAST USES for BB10, liveout={V00 V04}
==============================
use: {}
def: {}

NEW BLOCK BB11


Setting BB10 as the predecessor for determining incoming variable registers of BB11
<RefPosition #626 @461 RefTypeBB  BB11 regmask=[] minReg=1 wt=400.00>

DefList: {  }
N463 (  1,  1) [000266] ------------              *  LCL_VAR   ref    V04 loc2         u:2 NA (last use) REG NA <l:$41a, c:$3df>
Interval 107: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #627 @464 RefTypeDef <Ivl:107> LCL_VAR BB11 regmask=[allIntButFP] minReg=1 wt=1600.00>

DefList: { N463.t266. LCL_VAR }
N465 (???,???) [000511] ------------              *  PUTARG_REG ref    REG rcx
<RefPosition #628 @465 RefTypeFixedReg <Reg:rcx>  BB11 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #629 @465 RefTypeUse <Ivl:107>  BB11 regmask=[rcx] minReg=1 last fixed wt=400.00>
Interval 108: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #630 @466 RefTypeFixedReg <Reg:rcx>  BB11 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #631 @466 RefTypeDef <Ivl:108> PUTARG_REG BB11 regmask=[rcx] minReg=1 fixed wt=1600.00>

DefList: { N465.t511. PUTARG_REG }
N467 ( 15,  7) [000265] --CXG-------              *  CALL      void   System.Threading.Monitor.Exit REG NA $VN.Void
<RefPosition #632 @467 RefTypeFixedReg <Reg:rcx>  BB11 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #633 @467 RefTypeUse <Ivl:108>  BB11 regmask=[rcx] minReg=1 last fixed wt=400.00>
<RefPosition #634 @468 RefTypeKill <Reg:rax>  BB11 regmask=[rax] minReg=1 wt=400.00>
<RefPosition #635 @468 RefTypeKill <Reg:rcx>  BB11 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #636 @468 RefTypeKill <Reg:rdx>  BB11 regmask=[rdx] minReg=1 wt=400.00>
<RefPosition #637 @468 RefTypeKill <Reg:r8 >  BB11 regmask=[r8] minReg=1 wt=400.00>
<RefPosition #638 @468 RefTypeKill <Reg:r9 >  BB11 regmask=[r9] minReg=1 wt=400.00>
<RefPosition #639 @468 RefTypeKill <Reg:r10>  BB11 regmask=[r10] minReg=1 wt=400.00>
<RefPosition #640 @468 RefTypeKill <Reg:r11>  BB11 regmask=[r11] minReg=1 wt=400.00>



CHECKING LAST USES for BB11, liveout={V00}
==============================
use: {V04}
def: {}

NEW BLOCK BB12


Setting BB10 as the predecessor for determining incoming variable registers of BB12
<RefPosition #641 @469 RefTypeBB  BB12 regmask=[] minReg=1 wt=800.00>

DefList: {  }
N471 (???,???) [000458] ------------              *  IL_OFFSET void   IL offset: 0x130 REG NA

DefList: {  }
N473 (  1,  1) [000159] ------------              *  CNS_INT   int    100 REG NA $5b
Interval 109: int RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #642 @474 RefTypeDef <Ivl:109> CNS_INT BB12 regmask=[allIntButFP] minReg=1 wt=3200.00>

DefList: { N473.t159. CNS_INT }
N475 (???,???) [000512] ------------              *  PUTARG_REG int    REG rcx
<RefPosition #643 @475 RefTypeFixedReg <Reg:rcx>  BB12 regmask=[rcx] minReg=1 wt=800.00>
<RefPosition #644 @475 RefTypeUse <Ivl:109>  BB12 regmask=[rcx] minReg=1 last fixed wt=800.00>
Interval 110: int RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #645 @476 RefTypeFixedReg <Reg:rcx>  BB12 regmask=[rcx] minReg=1 wt=800.00>
<RefPosition #646 @476 RefTypeDef <Ivl:110> PUTARG_REG BB12 regmask=[rcx] minReg=1 fixed wt=3200.00>

DefList: { N475.t512. PUTARG_REG }
N477 ( 15,  7) [000160] --CXG-------              *  CALL      void   System.Threading.Thread.Sleep REG NA $VN.Void
<RefPosition #647 @477 RefTypeFixedReg <Reg:rcx>  BB12 regmask=[rcx] minReg=1 wt=800.00>
<RefPosition #648 @477 RefTypeUse <Ivl:110>  BB12 regmask=[rcx] minReg=1 last fixed wt=800.00>
<RefPosition #649 @478 RefTypeKill <Reg:rax>  BB12 regmask=[rax] minReg=1 wt=800.00>
<RefPosition #650 @478 RefTypeKill <Reg:rcx>  BB12 regmask=[rcx] minReg=1 wt=800.00>
<RefPosition #651 @478 RefTypeKill <Reg:rdx>  BB12 regmask=[rdx] minReg=1 wt=800.00>
<RefPosition #652 @478 RefTypeKill <Reg:r8 >  BB12 regmask=[r8] minReg=1 wt=800.00>
<RefPosition #653 @478 RefTypeKill <Reg:r9 >  BB12 regmask=[r9] minReg=1 wt=800.00>
<RefPosition #654 @478 RefTypeKill <Reg:r10>  BB12 regmask=[r10] minReg=1 wt=800.00>
<RefPosition #655 @478 RefTypeKill <Reg:r11>  BB12 regmask=[r11] minReg=1 wt=800.00>



CHECKING LAST USES for BB12, liveout={V00}
==============================
use: {}
def: {}

NEW BLOCK BB13


Setting BB09 as the predecessor for determining incoming variable registers of BB13
<RefPosition #656 @479 RefTypeBB  BB13 regmask=[] minReg=1 wt=100.00>



CHECKING LAST USES for BB13, liveout={V00 V04}
==============================
use: {}
def: {}

NEW BLOCK BB30


Incoming EH boundary; <RefPosition #657 @481 RefTypeBB  BB30 regmask=[] minReg=1 wt=100.00>

DefList: {  }
N483 (???,???) [000475] ------------              *  IL_OFFSET void   IL offset: 0x126 REG NA

DefList: {  }
N485 (  3,  2) [000223] -c----------              *  LCL_VAR   bool  (AX) V05 loc3          NA REG NA $383
Contained
DefList: {  }
N487 (  1,  1) [000224] -c----------              *  CNS_INT   bool   0 REG NA $40
Contained
DefList: {  }
N489 (  6,  6) [000225] J---G--N-U--              *  EQ        void   REG NA $34c

DefList: {  }
N491 (  8,  8) [000226] ----G-------              *  JTRUE     void   REG NA



CHECKING LAST USES for BB30, liveout={V00 V04}
==============================
use: {}
def: {}

NEW BLOCK BB31


Setting BB30 as the predecessor for determining incoming variable registers of BB31
<RefPosition #658 @493 RefTypeBB  BB31 regmask=[] minReg=1 wt=100.00>

DefList: {  }
N495 (???,???) [000476] ------------              *  IL_OFFSET void   IL offset: 0x129 REG NA

DefList: {  }
N497 (  1,  1) [000228] ------------              *  LCL_VAR   ref    V04 loc2         u:2 NA (last use) REG NA <l:$41a, c:$3df>
Interval 111: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #659 @498 RefTypeDef <Ivl:111> LCL_VAR BB31 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N497.t228. LCL_VAR }
N499 (???,???) [000525] ------------              *  PUTARG_REG ref    REG rcx
<RefPosition #660 @499 RefTypeFixedReg <Reg:rcx>  BB31 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #661 @499 RefTypeUse <Ivl:111>  BB31 regmask=[rcx] minReg=1 last fixed wt=100.00>
Interval 112: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #662 @500 RefTypeFixedReg <Reg:rcx>  BB31 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #663 @500 RefTypeDef <Ivl:112> PUTARG_REG BB31 regmask=[rcx] minReg=1 fixed wt=400.00>

DefList: { N499.t525. PUTARG_REG }
N501 ( 15,  7) [000229] --CXG-------              *  CALL      void   System.Threading.Monitor.Exit REG NA $VN.Void
<RefPosition #664 @501 RefTypeFixedReg <Reg:rcx>  BB31 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #665 @501 RefTypeUse <Ivl:112>  BB31 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #666 @502 RefTypeKill <Reg:rax>  BB31 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #667 @502 RefTypeKill <Reg:rcx>  BB31 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #668 @502 RefTypeKill <Reg:rdx>  BB31 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #669 @502 RefTypeKill <Reg:r8 >  BB31 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #670 @502 RefTypeKill <Reg:r9 >  BB31 regmask=[r9] minReg=1 wt=100.00>
<RefPosition #671 @502 RefTypeKill <Reg:r10>  BB31 regmask=[r10] minReg=1 wt=100.00>
<RefPosition #672 @502 RefTypeKill <Reg:r11>  BB31 regmask=[r11] minReg=1 wt=100.00>



CHECKING LAST USES for BB31, liveout={V00}
==============================
use: {V04}
def: {}

NEW BLOCK BB32


Setting BB30 as the predecessor for determining incoming variable registers of BB32
<RefPosition #673 @503 RefTypeBB  BB32 regmask=[] minReg=1 wt=100.00>

DefList: {  }
N505 (???,???) [000477] ------------              *  IL_OFFSET void   IL offset: 0x12f REG NA

DefList: {  }
N507 (  0,  0) [000227] ------------              *  RETFILT   void   REG NA $441



CHECKING LAST USES for BB32, liveout={V00}
==============================
use: {}
def: {}

NEW BLOCK BB14


Incoming EH boundary; <RefPosition #674 @509 RefTypeBB  BB14 regmask=[] minReg=1 wt=100.00>



CHECKING LAST USES for BB14, liveout={V00}
==============================
use: {}
def: {}

NEW BLOCK BB15


Incoming EH boundary; <RefPosition #675 @511 RefTypeBB  BB15 regmask=[] minReg=1 wt=100.00>

DefList: {  }
N513 (???,???) [000459] ------------              *  IL_OFFSET void   IL offset: 0x139 REG NA

DefList: {  }
N515 ( 14,  5) [000161] --CXG-------              *  CALL      long   System.DateTime.get_Now REG NA $c6
<RefPosition #676 @516 RefTypeKill <Reg:rax>  BB15 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #677 @516 RefTypeKill <Reg:rcx>  BB15 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #678 @516 RefTypeKill <Reg:rdx>  BB15 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #679 @516 RefTypeKill <Reg:r8 >  BB15 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #680 @516 RefTypeKill <Reg:r9 >  BB15 regmask=[r9] minReg=1 wt=100.00>
<RefPosition #681 @516 RefTypeKill <Reg:r10>  BB15 regmask=[r10] minReg=1 wt=100.00>
<RefPosition #682 @516 RefTypeKill <Reg:r11>  BB15 regmask=[r11] minReg=1 wt=100.00>
Interval 113: long RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #683 @516 RefTypeFixedReg <Reg:rax>  BB15 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #684 @516 RefTypeDef <Ivl:113> CALL BB15 regmask=[rax] minReg=1 fixed wt=400.00>

DefList: { N515.t161. CALL }
N517 ( 18,  8) [000164] DA-XG-------              *  STORE_LCL_VAR struct<System.DateTime, 8>(AX)(P) V02 loc0          NA
                                                  *    long   V02._dateData (offs=0x00) -> V17 tmp10         REG NA
<RefPosition #685 @517 RefTypeUse <Ivl:113>  BB15 regmask=[allIntButFP] minReg=1 last wt=100.00>

DefList: {  }
N519 (???,???) [000460] ------------              *  IL_OFFSET void   IL offset: 0x13f REG NA

DefList: {  }
N521 (  3,  2) [000165] -------N----              *  LCL_VAR_ADDR byref  V02 loc0          NA
                                                  *    long   V02._dateData (offs=0x00) -> V17 tmp10         REG NA
Interval 114: byref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #686 @522 RefTypeDef <Ivl:114> LCL_VAR_ADDR BB15 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N521.t165. LCL_VAR_ADDR }
N523 (???,???) [000513] ------------              *  PUTARG_REG byref  REG rcx
<RefPosition #687 @523 RefTypeFixedReg <Reg:rcx>  BB15 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #688 @523 RefTypeUse <Ivl:114>  BB15 regmask=[rcx] minReg=1 last fixed wt=100.00>
Interval 115: byref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #689 @524 RefTypeFixedReg <Reg:rcx>  BB15 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #690 @524 RefTypeDef <Ivl:115> PUTARG_REG BB15 regmask=[rcx] minReg=1 fixed wt=400.00>

DefList: { N523.t513. PUTARG_REG }
N525 ( 17, 10) [000167] --CXG-------              *  CALL      ref    System.DateTime.ToString REG NA $3ef
<RefPosition #691 @525 RefTypeFixedReg <Reg:rcx>  BB15 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #692 @525 RefTypeUse <Ivl:115>  BB15 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #693 @526 RefTypeKill <Reg:rax>  BB15 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #694 @526 RefTypeKill <Reg:rcx>  BB15 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #695 @526 RefTypeKill <Reg:rdx>  BB15 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #696 @526 RefTypeKill <Reg:r8 >  BB15 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #697 @526 RefTypeKill <Reg:r9 >  BB15 regmask=[r9] minReg=1 wt=100.00>
<RefPosition #698 @526 RefTypeKill <Reg:r10>  BB15 regmask=[r10] minReg=1 wt=100.00>
<RefPosition #699 @526 RefTypeKill <Reg:r11>  BB15 regmask=[r11] minReg=1 wt=100.00>
Interval 116: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #700 @526 RefTypeFixedReg <Reg:rax>  BB15 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #701 @526 RefTypeDef <Ivl:116> CALL BB15 regmask=[rax] minReg=1 fixed wt=400.00>

DefList: { N525.t167. CALL }
N527 ( 17, 10) [000367] DA-XG-----L-              *  STORE_LCL_VAR ref    V24 tmp17        d:2 NA REG NA
<RefPosition #702 @527 RefTypeUse <Ivl:116>  BB15 regmask=[allIntButFP] minReg=1 last wt=100.00>
Assigning related <V24/L14> to <I116>
<RefPosition #703 @528 RefTypeDef <Ivl:14 V24> STORE_LCL_VAR BB15 regmask=[allIntButFP] minReg=1 last wt=400.00>

DefList: {  }
N529 (  1,  1) [000368] ------------              *  LCL_VAR   ref    V24 tmp17        u:2 NA (last use) REG NA $3ef

DefList: {  }
N531 (???,???) [000514] ------------              *  PUTARG_REG ref    REG rcx
<RefPosition #704 @531 RefTypeFixedReg <Reg:rcx>  BB15 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #705 @531 RefTypeUse <Ivl:14 V24> LCL_VAR BB15 regmask=[rcx] minReg=1 last fixed wt=400.00>
Interval 117: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #706 @532 RefTypeFixedReg <Reg:rcx>  BB15 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #707 @532 RefTypeDef <Ivl:117> PUTARG_REG BB15 regmask=[rcx] minReg=1 fixed wt=400.00>

DefList: { N531.t514. PUTARG_REG }
N533 (  2, 10) [000364] H-----------              *  CNS_INT(h) long   0x75003208 "	 Done.  Profiler is active, available options:" REG NA $1d3
Interval 118: long RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #708 @534 RefTypeDef <Ivl:118> CNS_INT BB15 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N531.t514. PUTARG_REG; N533.t364. CNS_INT }
N535 (  4, 12) [000365] #---G-------              *  IND       ref    REG NA $3f3
<RefPosition #709 @535 RefTypeUse <Ivl:118>  BB15 regmask=[allIntButFP] minReg=1 last wt=100.00>
Interval 119: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #710 @536 RefTypeDef <Ivl:119> IND BB15 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N531.t514. PUTARG_REG; N535.t365. IND }
N537 (???,???) [000515] ----G-------              *  PUTARG_REG ref    REG rdx
<RefPosition #711 @537 RefTypeFixedReg <Reg:rdx>  BB15 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #712 @537 RefTypeUse <Ivl:119>  BB15 regmask=[rdx] minReg=1 last fixed wt=100.00>
Interval 120: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #713 @538 RefTypeFixedReg <Reg:rdx>  BB15 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #714 @538 RefTypeDef <Ivl:120> PUTARG_REG BB15 regmask=[rdx] minReg=1 fixed wt=400.00>

DefList: { N531.t514. PUTARG_REG; N537.t515. PUTARG_REG }
N539 ( 39, 30) [000169] --CXG-------              *  CALL      ref    System.String.Concat REG NA $3f4
<RefPosition #715 @539 RefTypeFixedReg <Reg:rcx>  BB15 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #716 @539 RefTypeUse <Ivl:117>  BB15 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #717 @539 RefTypeFixedReg <Reg:rdx>  BB15 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #718 @539 RefTypeUse <Ivl:120>  BB15 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #719 @540 RefTypeKill <Reg:rax>  BB15 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #720 @540 RefTypeKill <Reg:rcx>  BB15 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #721 @540 RefTypeKill <Reg:rdx>  BB15 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #722 @540 RefTypeKill <Reg:r8 >  BB15 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #723 @540 RefTypeKill <Reg:r9 >  BB15 regmask=[r9] minReg=1 wt=100.00>
<RefPosition #724 @540 RefTypeKill <Reg:r10>  BB15 regmask=[r10] minReg=1 wt=100.00>
<RefPosition #725 @540 RefTypeKill <Reg:r11>  BB15 regmask=[r11] minReg=1 wt=100.00>
Interval 121: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #726 @540 RefTypeFixedReg <Reg:rax>  BB15 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #727 @540 RefTypeDef <Ivl:121> CALL BB15 regmask=[rax] minReg=1 fixed wt=400.00>

DefList: { N539.t169. CALL }
N541 (???,???) [000516] --CXG-------              *  PUTARG_REG ref    REG rcx
<RefPosition #728 @541 RefTypeFixedReg <Reg:rcx>  BB15 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #729 @541 RefTypeUse <Ivl:121>  BB15 regmask=[rcx] minReg=1 last fixed wt=100.00>
Interval 122: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #730 @542 RefTypeFixedReg <Reg:rcx>  BB15 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #731 @542 RefTypeDef <Ivl:122> PUTARG_REG BB15 regmask=[rcx] minReg=1 fixed wt=400.00>

DefList: { N541.t516. PUTARG_REG }
N543 ( 53, 36) [000170] --CXG-------              *  CALL      void   System.Console.WriteLine REG NA $VN.Void
<RefPosition #732 @543 RefTypeFixedReg <Reg:rcx>  BB15 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #733 @543 RefTypeUse <Ivl:122>  BB15 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #734 @544 RefTypeKill <Reg:rax>  BB15 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #735 @544 RefTypeKill <Reg:rcx>  BB15 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #736 @544 RefTypeKill <Reg:rdx>  BB15 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #737 @544 RefTypeKill <Reg:r8 >  BB15 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #738 @544 RefTypeKill <Reg:r9 >  BB15 regmask=[r9] minReg=1 wt=100.00>
<RefPosition #739 @544 RefTypeKill <Reg:r10>  BB15 regmask=[r10] minReg=1 wt=100.00>
<RefPosition #740 @544 RefTypeKill <Reg:r11>  BB15 regmask=[r11] minReg=1 wt=100.00>

DefList: {  }
N545 (???,???) [000461] ------------              *  IL_OFFSET void   IL offset: 0x155 REG NA

DefList: {  }
N547 (  2, 10) [000371] H-----------              *  CNS_INT(h) long   0x75003210 "   Q = quit" REG NA $1d4
Interval 123: long RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #741 @548 RefTypeDef <Ivl:123> CNS_INT BB15 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N547.t371. CNS_INT }
N549 (  4, 12) [000372] #---G-------              *  IND       ref    REG NA $3f8
<RefPosition #742 @549 RefTypeUse <Ivl:123>  BB15 regmask=[allIntButFP] minReg=1 last wt=100.00>
Interval 124: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #743 @550 RefTypeDef <Ivl:124> IND BB15 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N549.t372. IND }
N551 (???,???) [000517] ----G-------              *  PUTARG_REG ref    REG rcx
<RefPosition #744 @551 RefTypeFixedReg <Reg:rcx>  BB15 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #745 @551 RefTypeUse <Ivl:124>  BB15 regmask=[rcx] minReg=1 last fixed wt=100.00>
Interval 125: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #746 @552 RefTypeFixedReg <Reg:rcx>  BB15 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #747 @552 RefTypeDef <Ivl:125> PUTARG_REG BB15 regmask=[rcx] minReg=1 fixed wt=400.00>

DefList: { N551.t517. PUTARG_REG }
N553 ( 18, 18) [000172] --CXG-------              *  CALL      void   System.Console.WriteLine REG NA $VN.Void
<RefPosition #748 @553 RefTypeFixedReg <Reg:rcx>  BB15 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #749 @553 RefTypeUse <Ivl:125>  BB15 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #750 @554 RefTypeKill <Reg:rax>  BB15 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #751 @554 RefTypeKill <Reg:rcx>  BB15 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #752 @554 RefTypeKill <Reg:rdx>  BB15 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #753 @554 RefTypeKill <Reg:r8 >  BB15 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #754 @554 RefTypeKill <Reg:r9 >  BB15 regmask=[r9] minReg=1 wt=100.00>
<RefPosition #755 @554 RefTypeKill <Reg:r10>  BB15 regmask=[r10] minReg=1 wt=100.00>
<RefPosition #756 @554 RefTypeKill <Reg:r11>  BB15 regmask=[r11] minReg=1 wt=100.00>

DefList: {  }
N555 (???,???) [000462] ------------              *  IL_OFFSET void   IL offset: 0x15f REG NA

DefList: {  }
N557 (  2, 10) [000374] H-----------              *  CNS_INT(h) long   0x75003218 "   H = heap snapshot" REG NA $1d5
Interval 126: long RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #757 @558 RefTypeDef <Ivl:126> CNS_INT BB15 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N557.t374. CNS_INT }
N559 (  4, 12) [000375] #---G-------              *  IND       ref    REG NA $3fb
<RefPosition #758 @559 RefTypeUse <Ivl:126>  BB15 regmask=[allIntButFP] minReg=1 last wt=100.00>
Interval 127: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #759 @560 RefTypeDef <Ivl:127> IND BB15 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N559.t375. IND }
N561 (???,???) [000518] ----G-------              *  PUTARG_REG ref    REG rcx
<RefPosition #760 @561 RefTypeFixedReg <Reg:rcx>  BB15 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #761 @561 RefTypeUse <Ivl:127>  BB15 regmask=[rcx] minReg=1 last fixed wt=100.00>
Interval 128: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #762 @562 RefTypeFixedReg <Reg:rcx>  BB15 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #763 @562 RefTypeDef <Ivl:128> PUTARG_REG BB15 regmask=[rcx] minReg=1 fixed wt=400.00>

DefList: { N561.t518. PUTARG_REG }
N563 ( 18, 18) [000174] --CXG-------              *  CALL      void   System.Console.WriteLine REG NA $VN.Void
<RefPosition #764 @563 RefTypeFixedReg <Reg:rcx>  BB15 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #765 @563 RefTypeUse <Ivl:128>  BB15 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #766 @564 RefTypeKill <Reg:rax>  BB15 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #767 @564 RefTypeKill <Reg:rcx>  BB15 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #768 @564 RefTypeKill <Reg:rdx>  BB15 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #769 @564 RefTypeKill <Reg:r8 >  BB15 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #770 @564 RefTypeKill <Reg:r9 >  BB15 regmask=[r9] minReg=1 wt=100.00>
<RefPosition #771 @564 RefTypeKill <Reg:r10>  BB15 regmask=[r10] minReg=1 wt=100.00>
<RefPosition #772 @564 RefTypeKill <Reg:r11>  BB15 regmask=[r11] minReg=1 wt=100.00>

DefList: {  }
N565 (???,???) [000463] ------------              *  IL_OFFSET void   IL offset: 0x169 REG NA

DefList: {  }
N567 (  2, 10) [000377] H-----------              *  CNS_INT(h) long   0x75003220 "   G = GC (max gen)" REG NA $1d6
Interval 129: long RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #773 @568 RefTypeDef <Ivl:129> CNS_INT BB15 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N567.t377. CNS_INT }
N569 (  4, 12) [000378] #---G-------              *  IND       ref    REG NA $3fe
<RefPosition #774 @569 RefTypeUse <Ivl:129>  BB15 regmask=[allIntButFP] minReg=1 last wt=100.00>
Interval 130: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #775 @570 RefTypeDef <Ivl:130> IND BB15 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N569.t378. IND }
N571 (???,???) [000519] ----G-------              *  PUTARG_REG ref    REG rcx
<RefPosition #776 @571 RefTypeFixedReg <Reg:rcx>  BB15 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #777 @571 RefTypeUse <Ivl:130>  BB15 regmask=[rcx] minReg=1 last fixed wt=100.00>
Interval 131: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #778 @572 RefTypeFixedReg <Reg:rcx>  BB15 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #779 @572 RefTypeDef <Ivl:131> PUTARG_REG BB15 regmask=[rcx] minReg=1 fixed wt=400.00>

DefList: { N571.t519. PUTARG_REG }
N573 ( 18, 18) [000176] --CXG-------              *  CALL      void   System.Console.WriteLine REG NA $VN.Void
<RefPosition #780 @573 RefTypeFixedReg <Reg:rcx>  BB15 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #781 @573 RefTypeUse <Ivl:131>  BB15 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #782 @574 RefTypeKill <Reg:rax>  BB15 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #783 @574 RefTypeKill <Reg:rcx>  BB15 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #784 @574 RefTypeKill <Reg:rdx>  BB15 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #785 @574 RefTypeKill <Reg:r8 >  BB15 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #786 @574 RefTypeKill <Reg:r9 >  BB15 regmask=[r9] minReg=1 wt=100.00>
<RefPosition #787 @574 RefTypeKill <Reg:r10>  BB15 regmask=[r10] minReg=1 wt=100.00>
<RefPosition #788 @574 RefTypeKill <Reg:r11>  BB15 regmask=[r11] minReg=1 wt=100.00>

DefList: {  }
N575 (???,???) [000464] ------------              *  IL_OFFSET void   IL offset: 0x173 REG NA

DefList: {  }
N577 (  2, 10) [000380] H-----------              *  CNS_INT(h) long   0x75003228 "   R = clear the running flag to stop the consumer thread" REG NA $1d7
Interval 132: long RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #789 @578 RefTypeDef <Ivl:132> CNS_INT BB15 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N577.t380. CNS_INT }
N579 (  4, 12) [000381] #---G-------              *  IND       ref    REG NA $4c1
<RefPosition #790 @579 RefTypeUse <Ivl:132>  BB15 regmask=[allIntButFP] minReg=1 last wt=100.00>
Interval 133: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #791 @580 RefTypeDef <Ivl:133> IND BB15 regmask=[allIntButFP] minReg=1 wt=400.00>

DefList: { N579.t381. IND }
N581 (???,???) [000520] ----G-------              *  PUTARG_REG ref    REG rcx
<RefPosition #792 @581 RefTypeFixedReg <Reg:rcx>  BB15 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #793 @581 RefTypeUse <Ivl:133>  BB15 regmask=[rcx] minReg=1 last fixed wt=100.00>
Interval 134: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #794 @582 RefTypeFixedReg <Reg:rcx>  BB15 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #795 @582 RefTypeDef <Ivl:134> PUTARG_REG BB15 regmask=[rcx] minReg=1 fixed wt=400.00>

DefList: { N581.t520. PUTARG_REG }
N583 ( 18, 18) [000178] --CXG-------              *  CALL      void   System.Console.WriteLine REG NA $VN.Void
<RefPosition #796 @583 RefTypeFixedReg <Reg:rcx>  BB15 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #797 @583 RefTypeUse <Ivl:134>  BB15 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #798 @584 RefTypeKill <Reg:rax>  BB15 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #799 @584 RefTypeKill <Reg:rcx>  BB15 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #800 @584 RefTypeKill <Reg:rdx>  BB15 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #801 @584 RefTypeKill <Reg:r8 >  BB15 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #802 @584 RefTypeKill <Reg:r9 >  BB15 regmask=[r9] minReg=1 wt=100.00>
<RefPosition #803 @584 RefTypeKill <Reg:r10>  BB15 regmask=[r10] minReg=1 wt=100.00>
<RefPosition #804 @584 RefTypeKill <Reg:r11>  BB15 regmask=[r11] minReg=1 wt=100.00>



CHECKING LAST USES for BB15, liveout={V00}
==============================
use: {}
def: {V24}

NEW BLOCK BB19


Setting BB15 as the predecessor for determining incoming variable registers of BB19
<RefPosition #805 @585 RefTypeBB  BB19 regmask=[] minReg=1 wt=800.00>

DefList: {  }
N587 (  3,  2) [000236] -------N----              *  LCL_VAR_ADDR byref  V06 loc4          NA
                                                  *    ushort V06._keyChar (offs=0x00) -> V18 tmp11        
                                                  *    int    V06._key (offs=0x04) -> V19 tmp12        
                                                  *    int    V06._mods (offs=0x08) -> V20 tmp13         REG NA
Interval 135: byref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #806 @588 RefTypeDef <Ivl:135> LCL_VAR_ADDR BB19 regmask=[allIntButFP] minReg=1 wt=3200.00>

DefList: { N587.t236. LCL_VAR_ADDR }
N589 (???,???) [000521] ------------              *  PUTARG_REG byref  REG rcx
<RefPosition #807 @589 RefTypeFixedReg <Reg:rcx>  BB19 regmask=[rcx] minReg=1 wt=800.00>
<RefPosition #808 @589 RefTypeUse <Ivl:135>  BB19 regmask=[rcx] minReg=1 last fixed wt=800.00>
Interval 136: byref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #809 @590 RefTypeFixedReg <Reg:rcx>  BB19 regmask=[rcx] minReg=1 wt=800.00>
<RefPosition #810 @590 RefTypeDef <Ivl:136> PUTARG_REG BB19 regmask=[rcx] minReg=1 fixed wt=3200.00>

DefList: { N589.t521. PUTARG_REG }
N591 (  1,  1) [000232] ------------              *  CNS_INT   int    0 REG NA $40
Interval 137: int RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #811 @592 RefTypeDef <Ivl:137> CNS_INT BB19 regmask=[allIntButFP] minReg=1 wt=3200.00>

DefList: { N589.t521. PUTARG_REG; N591.t232. CNS_INT }
N593 (???,???) [000522] ------------              *  PUTARG_REG int    REG rdx
<RefPosition #812 @593 RefTypeFixedReg <Reg:rdx>  BB19 regmask=[rdx] minReg=1 wt=800.00>
<RefPosition #813 @593 RefTypeUse <Ivl:137>  BB19 regmask=[rdx] minReg=1 last fixed wt=800.00>
Interval 138: int RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #814 @594 RefTypeFixedReg <Reg:rdx>  BB19 regmask=[rdx] minReg=1 wt=800.00>
<RefPosition #815 @594 RefTypeDef <Ivl:138> PUTARG_REG BB19 regmask=[rdx] minReg=1 fixed wt=3200.00>

DefList: { N589.t521. PUTARG_REG; N593.t522. PUTARG_REG }
N595 ( 18, 11) [000233] S-CXG-------              *  CALL      void   System.ConsolePal.ReadKey REG NA $VN.Void
<RefPosition #816 @595 RefTypeFixedReg <Reg:rcx>  BB19 regmask=[rcx] minReg=1 wt=800.00>
<RefPosition #817 @595 RefTypeUse <Ivl:136>  BB19 regmask=[rcx] minReg=1 last fixed wt=800.00>
<RefPosition #818 @595 RefTypeFixedReg <Reg:rdx>  BB19 regmask=[rdx] minReg=1 wt=800.00>
<RefPosition #819 @595 RefTypeUse <Ivl:138>  BB19 regmask=[rdx] minReg=1 last fixed wt=800.00>
<RefPosition #820 @596 RefTypeKill <Reg:rax>  BB19 regmask=[rax] minReg=1 wt=800.00>
<RefPosition #821 @596 RefTypeKill <Reg:rcx>  BB19 regmask=[rcx] minReg=1 wt=800.00>
<RefPosition #822 @596 RefTypeKill <Reg:rdx>  BB19 regmask=[rdx] minReg=1 wt=800.00>
<RefPosition #823 @596 RefTypeKill <Reg:r8 >  BB19 regmask=[r8] minReg=1 wt=800.00>
<RefPosition #824 @596 RefTypeKill <Reg:r9 >  BB19 regmask=[r9] minReg=1 wt=800.00>
<RefPosition #825 @596 RefTypeKill <Reg:r10>  BB19 regmask=[r10] minReg=1 wt=800.00>
<RefPosition #826 @596 RefTypeKill <Reg:r11>  BB19 regmask=[r11] minReg=1 wt=800.00>

DefList: {  }
N597 (  3,  2) [000240] -c----------              *  LCL_VAR   int   (AX) V19 tmp12         NA REG NA $385
Contained
DefList: {  }
N599 (  1,  1) [000187] -c----------              *  CNS_INT   int    71 REG NA $5e
Contained
DefList: {  }
N601 (  5,  4) [000188] N---G--N-U--              *  NE        void   REG NA $34f

DefList: {  }
N603 (  7,  6) [000189] ----G-------              *  JTRUE     void   REG NA



CHECKING LAST USES for BB19, liveout={V00}
==============================
use: {}
def: {}

NEW BLOCK BB20


Setting BB19 as the predecessor for determining incoming variable registers of BB20
<RefPosition #827 @605 RefTypeBB  BB20 regmask=[] minReg=1 wt=800.00>

DefList: {  }
N607 (???,???) [000465] ------------              *  IL_OFFSET void   IL offset: 0x18f REG NA

DefList: {  }
N609 ( 14,  5) [000221] --CXG-------              *  CALL      int    System.GC.get_MaxGeneration REG NA $305
<RefPosition #828 @610 RefTypeKill <Reg:rax>  BB20 regmask=[rax] minReg=1 wt=800.00>
<RefPosition #829 @610 RefTypeKill <Reg:rcx>  BB20 regmask=[rcx] minReg=1 wt=800.00>
<RefPosition #830 @610 RefTypeKill <Reg:rdx>  BB20 regmask=[rdx] minReg=1 wt=800.00>
<RefPosition #831 @610 RefTypeKill <Reg:r8 >  BB20 regmask=[r8] minReg=1 wt=800.00>
<RefPosition #832 @610 RefTypeKill <Reg:r9 >  BB20 regmask=[r9] minReg=1 wt=800.00>
<RefPosition #833 @610 RefTypeKill <Reg:r10>  BB20 regmask=[r10] minReg=1 wt=800.00>
<RefPosition #834 @610 RefTypeKill <Reg:r11>  BB20 regmask=[r11] minReg=1 wt=800.00>
Interval 139: int RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #835 @610 RefTypeFixedReg <Reg:rax>  BB20 regmask=[rax] minReg=1 wt=800.00>
<RefPosition #836 @610 RefTypeDef <Ivl:139> CALL BB20 regmask=[rax] minReg=1 fixed wt=3200.00>

DefList: { N609.t221. CALL }
N611 (???,???) [000523] --CXG-------              *  PUTARG_REG int    REG rcx
<RefPosition #837 @611 RefTypeFixedReg <Reg:rcx>  BB20 regmask=[rcx] minReg=1 wt=800.00>
<RefPosition #838 @611 RefTypeUse <Ivl:139>  BB20 regmask=[rcx] minReg=1 last fixed wt=800.00>
Interval 140: int RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #839 @612 RefTypeFixedReg <Reg:rcx>  BB20 regmask=[rcx] minReg=1 wt=800.00>
<RefPosition #840 @612 RefTypeDef <Ivl:140> PUTARG_REG BB20 regmask=[rcx] minReg=1 fixed wt=3200.00>

DefList: { N611.t523. PUTARG_REG }
N613 ( 28, 11) [000222] --CXG-------              *  CALL      void   System.GC.Collect REG NA $VN.Void
<RefPosition #841 @613 RefTypeFixedReg <Reg:rcx>  BB20 regmask=[rcx] minReg=1 wt=800.00>
<RefPosition #842 @613 RefTypeUse <Ivl:140>  BB20 regmask=[rcx] minReg=1 last fixed wt=800.00>
<RefPosition #843 @614 RefTypeKill <Reg:rax>  BB20 regmask=[rax] minReg=1 wt=800.00>
<RefPosition #844 @614 RefTypeKill <Reg:rcx>  BB20 regmask=[rcx] minReg=1 wt=800.00>
<RefPosition #845 @614 RefTypeKill <Reg:rdx>  BB20 regmask=[rdx] minReg=1 wt=800.00>
<RefPosition #846 @614 RefTypeKill <Reg:r8 >  BB20 regmask=[r8] minReg=1 wt=800.00>
<RefPosition #847 @614 RefTypeKill <Reg:r9 >  BB20 regmask=[r9] minReg=1 wt=800.00>
<RefPosition #848 @614 RefTypeKill <Reg:r10>  BB20 regmask=[r10] minReg=1 wt=800.00>
<RefPosition #849 @614 RefTypeKill <Reg:r11>  BB20 regmask=[r11] minReg=1 wt=800.00>



CHECKING LAST USES for BB20, liveout={V00}
==============================
use: {}
def: {}

NEW BLOCK BB21


Setting BB19 as the predecessor for determining incoming variable registers of BB21
<RefPosition #850 @615 RefTypeBB  BB21 regmask=[] minReg=1 wt=100.00>

DefList: {  }
N617 (  3,  2) [000244] -c----------              *  LCL_VAR   int   (AX) V19 tmp12         NA REG NA $385
Contained
DefList: {  }
N619 (  1,  1) [000194] -c----------              *  CNS_INT   int    72 REG NA $5f
Contained
DefList: {  }
N621 (  5,  4) [000195] N---G--N-U--              *  NE        void   REG NA $350

DefList: {  }
N623 (  7,  6) [000196] ----G-------              *  JTRUE     void   REG NA



CHECKING LAST USES for BB21, liveout={V00}
==============================
use: {}
def: {}

NEW BLOCK BB22


Setting BB21 as the predecessor for determining incoming variable registers of BB22
<RefPosition #851 @625 RefTypeBB  BB22 regmask=[] minReg=1 wt=100.00>

DefList: {  }
N627 (???,???) [000466] ------------              *  IL_OFFSET void   IL offset: 0x1a6 REG NA

DefList: {  }
N629 ( 14,  5) [000220] --CXG-------              *  CALL      void   System.Diagnostics.Debugger.Break REG NA $VN.Void
<RefPosition #852 @630 RefTypeKill <Reg:rax>  BB22 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #853 @630 RefTypeKill <Reg:rcx>  BB22 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #854 @630 RefTypeKill <Reg:rdx>  BB22 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #855 @630 RefTypeKill <Reg:r8 >  BB22 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #856 @630 RefTypeKill <Reg:r9 >  BB22 regmask=[r9] minReg=1 wt=100.00>
<RefPosition #857 @630 RefTypeKill <Reg:r10>  BB22 regmask=[r10] minReg=1 wt=100.00>
<RefPosition #858 @630 RefTypeKill <Reg:r11>  BB22 regmask=[r11] minReg=1 wt=100.00>



CHECKING LAST USES for BB22, liveout={V00}
==============================
use: {}
def: {}

NEW BLOCK BB23


Setting BB21 as the predecessor for determining incoming variable registers of BB23
<RefPosition #859 @631 RefTypeBB  BB23 regmask=[] minReg=1 wt=100.00>

DefList: {  }
N633 (  3,  2) [000248] -c----------              *  LCL_VAR   int   (AX) V19 tmp12         NA REG NA $385
Contained
DefList: {  }
N635 (  1,  1) [000201] -c----------              *  CNS_INT   int    82 REG NA $60
Contained
DefList: {  }
N637 (  5,  4) [000202] N---G--N-U--              *  NE        void   REG NA $351

DefList: {  }
N639 (  7,  6) [000203] ----G-------              *  JTRUE     void   REG NA



CHECKING LAST USES for BB23, liveout={V00}
==============================
use: {}
def: {}

NEW BLOCK BB24


Setting BB23 as the predecessor for determining incoming variable registers of BB24
<RefPosition #860 @641 RefTypeBB  BB24 regmask=[] minReg=1 wt=100.00>

DefList: {  }
N643 (???,???) [000467] ------------              *  IL_OFFSET void   IL offset: 0x1b8 REG NA

DefList: {  }
N645 (  1,  1) [000216] ------------              *  LCL_VAR   ref    V00 this         u:1 NA REG NA $80

DefList: {  }
N647 (  2,  2) [000387] -c----------              *  LEA(b+16) byref  REG NA
Contained
DefList: {  }
N649 (  1,  1) [000217] -c----------              *  CNS_INT   int    0 REG NA $40
Contained
DefList: {  }
N651 (???,???) [000468] -A--GO------              *  STOREIND  bool   REG NA
<RefPosition #861 @651 RefTypeUse <Ivl:0 V00> LCL_VAR BB24 regmask=[allIntButFP] minReg=1 last wt=2350.00>



CHECKING LAST USES for BB24, liveout={V00}
==============================
use: {V00}
def: {}

NEW BLOCK BB25


Setting BB23 as the predecessor for determining incoming variable registers of BB25
<RefPosition #862 @653 RefTypeBB  BB25 regmask=[] minReg=1 wt=100.00>

DefList: {  }
N655 (  3,  2) [000252] -c----------              *  LCL_VAR   int   (AX) V19 tmp12         NA REG NA $385
Contained
DefList: {  }
N657 (  1,  1) [000208] -c----------              *  CNS_INT   int    81 REG NA $61
Contained
DefList: {  }
N659 (  5,  4) [000209] N---G--N-U--              *  NE        void   REG NA $352

DefList: {  }
N661 (  7,  6) [000210] ----G-------              *  JTRUE     void   REG NA



CHECKING LAST USES for BB25, liveout={V00}
==============================
use: {}
def: {}

NEW BLOCK BB26


Setting BB15 as the predecessor for determining incoming variable registers of BB26
<RefPosition #863 @663 RefTypeBB  BB26 regmask=[] minReg=1 wt=100.00>

DefList: {  }
N665 (???,???) [000469] ------------              *  IL_OFFSET void   IL offset: 0x1cc REG NA

DefList: {  }
N667 (  1,  1) [000211] ------------              *  LCL_VAR   ref    V00 this         u:1 NA (last use) REG NA $80

DefList: {  }
N669 (  2,  2) [000389] -c----------              *  LEA(b+16) byref  REG NA
Contained
DefList: {  }
N671 (  1,  1) [000212] -c----------              *  CNS_INT   int    0 REG NA $40
Contained
DefList: {  }
N673 (???,???) [000470] -A--GO------              *  STOREIND  bool   REG NA
<RefPosition #864 @673 RefTypeUse <Ivl:0 V00> LCL_VAR BB26 regmask=[allIntButFP] minReg=1 last wt=2350.00>

DefList: {  }
N675 (???,???) [000471] ------------              *  IL_OFFSET void   IL offset: 0x1d3 REG NA

DefList: {  }
N677 (  0,  0) [000215] ------------              *  RETURN    void   REG NA $442



CHECKING LAST USES for BB26, liveout={}
==============================
use: {V00}
def: {}

NEW BLOCK BB27


Incoming EH boundary; <RefPosition #865 @679 RefTypeBB  BB27 regmask=[] minReg=1 wt=0.00>

firstColdLoc = 681
DefList: {  }
N681 (???,???) [000472] ------------              *  IL_OFFSET void   IL offset: 0xca REG NA

DefList: {  }
N683 (  3,  2) [000123] -c----------              *  LCL_VAR   bool  (AX) V05 loc3          NA REG NA $381
Contained
DefList: {  }
N685 (  1,  1) [000124] -c----------              *  CNS_INT   bool   0 REG NA $40
Contained
DefList: {  }
N687 (  6,  6) [000125] J---G--N-U--              *  EQ        void   REG NA $342

DefList: {  }
N689 (  8,  8) [000126] ----G-------              *  JTRUE     void   REG NA



CHECKING LAST USES for BB27, liveout={V04}
==============================
use: {}
def: {}

NEW BLOCK BB28


Setting BB27 as the predecessor for determining incoming variable registers of BB28
<RefPosition #866 @691 RefTypeBB  BB28 regmask=[] minReg=1 wt=0.00>

DefList: {  }
N693 (???,???) [000473] ------------              *  IL_OFFSET void   IL offset: 0xcd REG NA

DefList: {  }
N695 (  1,  1) [000128] ------------              *  LCL_VAR   ref    V04 loc2         u:3 NA (last use) REG NA <l:$256, c:$b2>
Interval 141: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #867 @696 RefTypeDef <Ivl:141> LCL_VAR BB28 regmask=[allIntButFP] minReg=1 wt=0.00>

DefList: { N695.t128. LCL_VAR }
N697 (???,???) [000524] ------------              *  PUTARG_REG ref    REG rcx
<RefPosition #868 @697 RefTypeFixedReg <Reg:rcx>  BB28 regmask=[rcx] minReg=1 wt=0.00>
<RefPosition #869 @697 RefTypeUse <Ivl:141>  BB28 regmask=[rcx] minReg=1 last fixed wt=0.00>
Interval 142: ref RefPositions {} physReg:NA Preferences=[allIntButFP]
<RefPosition #870 @698 RefTypeFixedReg <Reg:rcx>  BB28 regmask=[rcx] minReg=1 wt=0.00>
<RefPosition #871 @698 RefTypeDef <Ivl:142> PUTARG_REG BB28 regmask=[rcx] minReg=1 fixed wt=0.00>

DefList: { N697.t524. PUTARG_REG }
N699 ( 15,  7) [000129] --CXG-------              *  CALL      void   System.Threading.Monitor.Exit REG NA $VN.Void
<RefPosition #872 @699 RefTypeFixedReg <Reg:rcx>  BB28 regmask=[rcx] minReg=1 wt=0.00>
<RefPosition #873 @699 RefTypeUse <Ivl:142>  BB28 regmask=[rcx] minReg=1 last fixed wt=0.00>
<RefPosition #874 @700 RefTypeKill <Reg:rax>  BB28 regmask=[rax] minReg=1 wt=0.00>
<RefPosition #875 @700 RefTypeKill <Reg:rcx>  BB28 regmask=[rcx] minReg=1 wt=0.00>
<RefPosition #876 @700 RefTypeKill <Reg:rdx>  BB28 regmask=[rdx] minReg=1 wt=0.00>
<RefPosition #877 @700 RefTypeKill <Reg:r8 >  BB28 regmask=[r8] minReg=1 wt=0.00>
<RefPosition #878 @700 RefTypeKill <Reg:r9 >  BB28 regmask=[r9] minReg=1 wt=0.00>
<RefPosition #879 @700 RefTypeKill <Reg:r10>  BB28 regmask=[r10] minReg=1 wt=0.00>
<RefPosition #880 @700 RefTypeKill <Reg:r11>  BB28 regmask=[r11] minReg=1 wt=0.00>



CHECKING LAST USES for BB28, liveout={}
==============================
use: {V04}
def: {}

NEW BLOCK BB29


Setting BB27 as the predecessor for determining incoming variable registers of BB29
<RefPosition #881 @701 RefTypeBB  BB29 regmask=[] minReg=1 wt=0.00>

DefList: {  }
N703 (???,???) [000474] ------------              *  IL_OFFSET void   IL offset: 0xd3 REG NA

DefList: {  }
N705 (  0,  0) [000127] ------------              *  RETFILT   void   REG NA $440



CHECKING LAST USES for BB29, liveout={}
==============================
use: {}
def: {}

Linear scan intervals BEFORE VALIDATING INTERVALS:
Interval  0: (V00) ref (SPILLED) (writeThru) RefPositions {#0@0 #98@55 #135@75 #196@115 #336@197 #381@235 #419@265 #590@401 #617@431 #861@651 #864@673} physReg:rcx Preferences=[rcx rdx rbx rbp rsi rdi r12-r15]
Interval  1: (V03) int RefPositions {#334@188 #517@345 #520@348 #521@355 #522@359} physReg:NA Preferences=[rbx rsi rdi r12-r15] RelatedInterval <I88>
Interval  2: (V08) ref RefPositions {#84@44 #86@47 #103@59} physReg:NA Preferences=[rbx rsi rdi r12-r15]
Interval  3: (V09) ref RefPositions {#134@70 #142@85 #159@97} physReg:NA Preferences=[rbx rsi rdi r12-r15]
Interval  4: (V10) ref RefPositions {#140@82 #154@93} physReg:NA Preferences=[rbx rsi rdi r12-r15]
Interval  5: (V11) ref RefPositions {#190@108 #192@111 #240@139} physReg:NA Preferences=[rbx rsi rdi r12-r15]
Interval  6: (V12) ref RefPositions {#234@132 #236@135 #255@147} physReg:NA Preferences=[rbx rsi rdi r12-r15]
Interval  7: (V13) ref RefPositions {#380@230 #388@245 #405@257} physReg:NA Preferences=[rbx rsi rdi r12-r15]
Interval  8: (V14) ref RefPositions {#386@242 #400@253} physReg:NA Preferences=[rbx rsi rdi r12-r15]
Interval  9: (V15) ref RefPositions {#465@298 #469@305 #486@317} physReg:NA Preferences=[rbx rsi rdi r12-r15]
Interval 10: (V16) ref RefPositions {#467@302 #481@313} physReg:NA Preferences=[rbx rsi rdi r12-r15]
Interval 11: (V21) ref RefPositions {#29@18 #31@21} physReg:NA Preferences=[rcx]
Interval 12: (V22) ref RefPositions {#294@166 #296@169} physReg:NA Preferences=[rcx]
Interval 13: (V23) ref RefPositions {#551@376 #553@379} physReg:NA Preferences=[rcx]
Interval 14: (V24) ref RefPositions {#703@528 #705@531} physReg:NA Preferences=[rcx]
Interval 15: (V27) ref RefPositions {#430@284 #434@287 #466@301} physReg:NA Preferences=[rbx rsi rdi r12-r15] RelatedInterval <V16/L10>
Interval 16: (V28) ref RefPositions {#422@268 #423@271 #425@277} physReg:NA Preferences=[allIntButFP]
Interval 17: (V29) ref RefPositions {#620@434 #621@439 #624@447} physReg:NA Preferences=[allIntButFP]
Interval 18: long RefPositions {#10@6 #11@7} physReg:NA Preferences=[rax]
Interval 19: byref RefPositions {#12@12 #14@13} physReg:NA Preferences=[rcx]
Interval 20: byref RefPositions {#16@14 #18@15} physReg:NA Preferences=[rcx]
Interval 21: ref RefPositions {#27@16 #28@17} physReg:NA Preferences=[rax] RelatedInterval <V21/L11>
Interval 22: ref RefPositions {#33@22 #42@29} physReg:NA Preferences=[rcx]
Interval 23: long (constant) RefPositions {#34@24 #35@25} physReg:NA Preferences=[allIntButFP]
Interval 24: ref RefPositions {#36@26 #38@27} physReg:NA Preferences=[rdx]
Interval 25: ref RefPositions {#40@28 #44@29} physReg:NA Preferences=[rdx]
Interval 26: ref (def-use conflict) RefPositions {#53@30 #55@31} physReg:NA Preferences=[rax rcx]
Interval 27: ref RefPositions {#57@32 #59@33} physReg:NA Preferences=[rcx]
Interval 28: long (constant) RefPositions {#67@38 #69@39} physReg:NA Preferences=[rcx]
Interval 29: long RefPositions {#71@40 #73@41} physReg:NA Preferences=[rcx]
Interval 30: ref RefPositions {#82@42 #83@43} physReg:NA Preferences=[rax] RelatedInterval <V08/L2>
Interval 31: ref (specialPutArg) RefPositions {#88@48 #90@49} physReg:NA Preferences=[rcx] RelatedInterval <V08/L2>
Interval 32: byref RefPositions {#99@56 #101@59} physReg:NA Preferences=[rcx]
Interval 33: long (constant) RefPositions {#117@64 #119@65} physReg:NA Preferences=[rcx]
Interval 34: long RefPositions {#121@66 #123@67} physReg:NA Preferences=[rcx]
Interval 35: ref RefPositions {#132@68 #133@69} physReg:NA Preferences=[rax] RelatedInterval <V09/L3>
Interval 36: ref RefPositions {#136@76 #137@79} physReg:NA Preferences=[allIntButFP]
Interval 37: ref RefPositions {#138@80 #139@81} physReg:NA Preferences=[allIntButFP] RelatedInterval <V10/L4>
Interval 38: ref (specialPutArg) RefPositions {#144@86 #146@87} physReg:NA Preferences=[rcx] RelatedInterval <V09/L3>
Interval 39: byref RefPositions {#155@94 #157@97} physReg:NA Preferences=[rcx]
Interval 40: long (constant) RefPositions {#173@102 #175@103} physReg:NA Preferences=[rcx]
Interval 41: long RefPositions {#177@104 #179@105} physReg:NA Preferences=[rcx]
Interval 42: ref RefPositions {#188@106 #189@107} physReg:NA Preferences=[rax] RelatedInterval <V11/L5>
Interval 43: ref (specialPutArg) RefPositions {#194@112 #205@121} physReg:NA Preferences=[rcx] RelatedInterval <V11/L5>
Interval 44: ref (specialPutArg) RefPositions {#198@116 #207@121} physReg:NA Preferences=[rdx] RelatedInterval <V00/L0>
Interval 45: long (constant) RefPositions {#199@118 #201@119} physReg:NA Preferences=[r8]
Interval 46: long RefPositions {#203@120 #209@121} physReg:NA Preferences=[r8]
Interval 47: long (constant) RefPositions {#217@126 #219@127} physReg:NA Preferences=[rcx]
Interval 48: long RefPositions {#221@128 #223@129} physReg:NA Preferences=[rcx]
Interval 49: ref RefPositions {#232@130 #233@131} physReg:NA Preferences=[rax] RelatedInterval <V12/L6>
Interval 50: ref (specialPutArg) RefPositions {#238@136 #244@141} physReg:NA Preferences=[rcx] RelatedInterval <V12/L6>
Interval 51: ref RefPositions {#242@140 #246@141} physReg:NA Preferences=[rdx]
Interval 52: ref RefPositions {#257@148 #259@149} physReg:NA Preferences=[rcx]
Interval 53: long RefPositions {#275@154 #276@155} physReg:NA Preferences=[rax]
Interval 54: byref RefPositions {#277@160 #279@161} physReg:NA Preferences=[rcx]
Interval 55: byref RefPositions {#281@162 #283@163} physReg:NA Preferences=[rcx]
Interval 56: ref RefPositions {#292@164 #293@165} physReg:NA Preferences=[rax] RelatedInterval <V22/L12>
Interval 57: ref RefPositions {#298@170 #307@177} physReg:NA Preferences=[rcx]
Interval 58: long (constant) RefPositions {#299@172 #300@173} physReg:NA Preferences=[allIntButFP]
Interval 59: ref RefPositions {#301@174 #303@175} physReg:NA Preferences=[rdx]
Interval 60: ref RefPositions {#305@176 #309@177} physReg:NA Preferences=[rdx]
Interval 61: ref (def-use conflict) RefPositions {#318@178 #320@179} physReg:NA Preferences=[rax rcx]
Interval 62: ref RefPositions {#322@180 #324@181} physReg:NA Preferences=[rcx]
Interval 63: int (constant) RefPositions {#332@186 #333@187} physReg:NA Preferences=[allIntButFP] RelatedInterval <V03/L1>
Interval 64: ref RefPositions {#337@198 #338@199} physReg:NA Preferences=[allIntButFP]
Interval 65: int (constant) RefPositions {#339@204 #340@205} physReg:NA Preferences=[allIntButFP]
Interval 66: long RefPositions {#342@212 #344@213} physReg:NA Preferences=[rdx]
Interval 67: long RefPositions {#346@214 #353@219} physReg:NA Preferences=[rdx]
Interval 68: ref RefPositions {#347@216 #349@217} physReg:NA Preferences=[rcx]
Interval 69: ref RefPositions {#351@218 #355@219} physReg:NA Preferences=[rcx]
Interval 70: long (constant) RefPositions {#363@224 #365@225} physReg:NA Preferences=[rcx]
Interval 71: long RefPositions {#367@226 #369@227} physReg:NA Preferences=[rcx]
Interval 72: ref RefPositions {#378@228 #379@229} physReg:NA Preferences=[rax] RelatedInterval <V13/L7>
Interval 73: ref RefPositions {#382@236 #383@239} physReg:NA Preferences=[allIntButFP]
Interval 74: ref RefPositions {#384@240 #385@241} physReg:NA Preferences=[allIntButFP] RelatedInterval <V14/L8>
Interval 75: ref (specialPutArg) RefPositions {#390@246 #392@247} physReg:NA Preferences=[rcx] RelatedInterval <V13/L7>
Interval 76: byref RefPositions {#401@254 #403@257} physReg:NA Preferences=[rcx]
Interval 77: ref RefPositions {#420@266 #421@267} physReg:NA Preferences=[allIntButFP] RelatedInterval <V28/L16>
Interval 78: byref RefPositions {#424@272 #432@287} physReg:NA Preferences=[rcx]
Interval 79: ref RefPositions {#426@278 #427@281} physReg:NA Preferences=[allIntButFP]
Interval 80: ref RefPositions {#428@282 #429@283} physReg:NA Preferences=[allIntButFP] RelatedInterval <V27/L15>
Interval 81: long (constant) RefPositions {#448@292 #450@293} physReg:NA Preferences=[rcx]
Interval 82: long RefPositions {#452@294 #454@295} physReg:NA Preferences=[rcx]
Interval 83: ref RefPositions {#463@296 #464@297} physReg:NA Preferences=[rax] RelatedInterval <V15/L9>
Interval 84: ref (specialPutArg) RefPositions {#471@306 #473@307} physReg:NA Preferences=[rcx] RelatedInterval <V15/L9>
Interval 85: byref RefPositions {#482@314 #484@317} physReg:NA Preferences=[rcx]
Interval 86: ref RefPositions {#502@332 #504@333} physReg:NA Preferences=[rcx]
Interval 87: ref RefPositions {#506@334 #508@335} physReg:NA Preferences=[rcx]
Interval 88: int RefPositions {#518@346 #519@347} physReg:NA Preferences=[allIntButFP] RelatedInterval <V03/L1>
Interval 89: long RefPositions {#532@364 #533@365} physReg:NA Preferences=[rax]
Interval 90: byref RefPositions {#534@370 #536@371} physReg:NA Preferences=[rcx]
Interval 91: byref RefPositions {#538@372 #540@373} physReg:NA Preferences=[rcx]
Interval 92: ref RefPositions {#549@374 #550@375} physReg:NA Preferences=[rax] RelatedInterval <V23/L13>
Interval 93: ref RefPositions {#555@380 #564@387} physReg:NA Preferences=[rcx]
Interval 94: long (constant) RefPositions {#556@382 #557@383} physReg:NA Preferences=[allIntButFP]
Interval 95: ref RefPositions {#558@384 #560@385} physReg:NA Preferences=[rdx]
Interval 96: ref RefPositions {#562@386 #566@387} physReg:NA Preferences=[rdx]
Interval 97: ref (def-use conflict) RefPositions {#575@388 #577@389} physReg:NA Preferences=[rax rcx]
Interval 98: ref RefPositions {#579@390 #581@391} physReg:NA Preferences=[rcx]
Interval 99: ref RefPositions {#591@402 #592@403} physReg:NA Preferences=[allIntButFP]
Interval 100: int (constant) RefPositions {#593@408 #594@409} physReg:NA Preferences=[allIntButFP]
Interval 101: long RefPositions {#596@416 #598@417} physReg:NA Preferences=[rdx]
Interval 102: long RefPositions {#600@418 #607@423} physReg:NA Preferences=[rdx]
Interval 103: ref RefPositions {#601@420 #603@421} physReg:NA Preferences=[rcx]
Interval 104: ref RefPositions {#605@422 #609@423} physReg:NA Preferences=[rcx]
Interval 105: ref RefPositions {#618@432 #619@433} physReg:NA Preferences=[allIntButFP] RelatedInterval <V29/L17>
Interval 106: ref RefPositions {#622@440 #623@447} physReg:NA Preferences=[allIntButFP]
Interval 107: ref RefPositions {#627@464 #629@465} physReg:NA Preferences=[rcx]
Interval 108: ref RefPositions {#631@466 #633@467} physReg:NA Preferences=[rcx]
Interval 109: int (constant) RefPositions {#642@474 #644@475} physReg:NA Preferences=[rcx]
Interval 110: int RefPositions {#646@476 #648@477} physReg:NA Preferences=[rcx]
Interval 111: ref RefPositions {#659@498 #661@499} physReg:NA Preferences=[rcx]
Interval 112: ref RefPositions {#663@500 #665@501} physReg:NA Preferences=[rcx]
Interval 113: long RefPositions {#684@516 #685@517} physReg:NA Preferences=[rax]
Interval 114: byref RefPositions {#686@522 #688@523} physReg:NA Preferences=[rcx]
Interval 115: byref RefPositions {#690@524 #692@525} physReg:NA Preferences=[rcx]
Interval 116: ref RefPositions {#701@526 #702@527} physReg:NA Preferences=[rax] RelatedInterval <V24/L14>
Interval 117: ref RefPositions {#707@532 #716@539} physReg:NA Preferences=[rcx]
Interval 118: long (constant) RefPositions {#708@534 #709@535} physReg:NA Preferences=[allIntButFP]
Interval 119: ref RefPositions {#710@536 #712@537} physReg:NA Preferences=[rdx]
Interval 120: ref RefPositions {#714@538 #718@539} physReg:NA Preferences=[rdx]
Interval 121: ref (def-use conflict) RefPositions {#727@540 #729@541} physReg:NA Preferences=[rax rcx]
Interval 122: ref RefPositions {#731@542 #733@543} physReg:NA Preferences=[rcx]
Interval 123: long (constant) RefPositions {#741@548 #742@549} physReg:NA Preferences=[allIntButFP]
Interval 124: ref RefPositions {#743@550 #745@551} physReg:NA Preferences=[rcx]
Interval 125: ref RefPositions {#747@552 #749@553} physReg:NA Preferences=[rcx]
Interval 126: long (constant) RefPositions {#757@558 #758@559} physReg:NA Preferences=[allIntButFP]
Interval 127: ref RefPositions {#759@560 #761@561} physReg:NA Preferences=[rcx]
Interval 128: ref RefPositions {#763@562 #765@563} physReg:NA Preferences=[rcx]
Interval 129: long (constant) RefPositions {#773@568 #774@569} physReg:NA Preferences=[allIntButFP]
Interval 130: ref RefPositions {#775@570 #777@571} physReg:NA Preferences=[rcx]
Interval 131: ref RefPositions {#779@572 #781@573} physReg:NA Preferences=[rcx]
Interval 132: long (constant) RefPositions {#789@578 #790@579} physReg:NA Preferences=[allIntButFP]
Interval 133: ref RefPositions {#791@580 #793@581} physReg:NA Preferences=[rcx]
Interval 134: ref RefPositions {#795@582 #797@583} physReg:NA Preferences=[rcx]
Interval 135: byref RefPositions {#806@588 #808@589} physReg:NA Preferences=[rcx]
Interval 136: byref RefPositions {#810@590 #817@595} physReg:NA Preferences=[rcx]
Interval 137: int (constant) RefPositions {#811@592 #813@593} physReg:NA Preferences=[rdx]
Interval 138: int RefPositions {#815@594 #819@595} physReg:NA Preferences=[rdx]
Interval 139: int (def-use conflict) RefPositions {#836@610 #838@611} physReg:NA Preferences=[rax rcx]
Interval 140: int RefPositions {#840@612 #842@613} physReg:NA Preferences=[rcx]
Interval 141: ref RefPositions {#867@696 #869@697} physReg:NA Preferences=[rcx]
Interval 142: ref RefPositions {#871@698 #873@699} physReg:NA Preferences=[rcx]

------------
REFPOSITIONS BEFORE VALIDATING INTERVALS: 
------------
<RefPosition #0   @0   RefTypeParamDef <Ivl:0 V00>  BB00 regmask=[rcx] minReg=1 fixed regOptional wt=100.00>
<RefPosition #1   @1   RefTypeBB  BB01 regmask=[] minReg=1 wt=100.00>
<RefPosition #2   @6   RefTypeKill <Reg:rax>  BB01 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #3   @6   RefTypeKill <Reg:rcx>  BB01 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #4   @6   RefTypeKill <Reg:rdx>  BB01 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #5   @6   RefTypeKill <Reg:r8 >  BB01 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #6   @6   RefTypeKill <Reg:r9 >  BB01 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #7   @6   RefTypeKill <Reg:r10>  BB01 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #8   @6   RefTypeKill <Reg:r11>  BB01 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #9   @6   RefTypeFixedReg <Reg:rax>  BB01 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #10  @6   RefTypeDef <Ivl:18> CALL BB01 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #11  @7   RefTypeUse <Ivl:18>  BB01 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #12  @12  RefTypeDef <Ivl:19> LCL_VAR_ADDR BB01 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #13  @13  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #14  @13  RefTypeUse <Ivl:19>  BB01 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #15  @14  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #16  @14  RefTypeDef <Ivl:20> PUTARG_REG BB01 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #17  @15  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #18  @15  RefTypeUse <Ivl:20>  BB01 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #19  @16  RefTypeKill <Reg:rax>  BB01 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #20  @16  RefTypeKill <Reg:rcx>  BB01 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #21  @16  RefTypeKill <Reg:rdx>  BB01 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #22  @16  RefTypeKill <Reg:r8 >  BB01 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #23  @16  RefTypeKill <Reg:r9 >  BB01 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #24  @16  RefTypeKill <Reg:r10>  BB01 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #25  @16  RefTypeKill <Reg:r11>  BB01 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #26  @16  RefTypeFixedReg <Reg:rax>  BB01 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #27  @16  RefTypeDef <Ivl:21> CALL BB01 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #28  @17  RefTypeUse <Ivl:21>  BB01 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #29  @18  RefTypeDef <Ivl:11 V21> STORE_LCL_VAR BB01 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #30  @21  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #31  @21  RefTypeUse <Ivl:11 V21> LCL_VAR BB01 regmask=[rcx] minReg=1 last fixed wt=400.00>
<RefPosition #32  @22  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #33  @22  RefTypeDef <Ivl:22> PUTARG_REG BB01 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #34  @24  RefTypeDef <Ivl:23> CNS_INT BB01 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #35  @25  RefTypeUse <Ivl:23>  BB01 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #36  @26  RefTypeDef <Ivl:24> IND BB01 regmask=[rdx] minReg=1 wt=400.00>
<RefPosition #37  @27  RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #38  @27  RefTypeUse <Ivl:24>  BB01 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #39  @28  RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #40  @28  RefTypeDef <Ivl:25> PUTARG_REG BB01 regmask=[rdx] minReg=1 fixed wt=400.00>
<RefPosition #41  @29  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #42  @29  RefTypeUse <Ivl:22>  BB01 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #43  @29  RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #44  @29  RefTypeUse <Ivl:25>  BB01 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #45  @30  RefTypeKill <Reg:rax>  BB01 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #46  @30  RefTypeKill <Reg:rcx>  BB01 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #47  @30  RefTypeKill <Reg:rdx>  BB01 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #48  @30  RefTypeKill <Reg:r8 >  BB01 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #49  @30  RefTypeKill <Reg:r9 >  BB01 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #50  @30  RefTypeKill <Reg:r10>  BB01 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #51  @30  RefTypeKill <Reg:r11>  BB01 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #52  @30  RefTypeFixedReg <Reg:rax>  BB01 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #53  @30  RefTypeDef <Ivl:26> CALL BB01 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #54  @31  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #55  @31  RefTypeUse <Ivl:26>  BB01 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #56  @32  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #57  @32  RefTypeDef <Ivl:27> PUTARG_REG BB01 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #58  @33  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #59  @33  RefTypeUse <Ivl:27>  BB01 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #60  @34  RefTypeKill <Reg:rax>  BB01 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #61  @34  RefTypeKill <Reg:rcx>  BB01 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #62  @34  RefTypeKill <Reg:rdx>  BB01 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #63  @34  RefTypeKill <Reg:r8 >  BB01 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #64  @34  RefTypeKill <Reg:r9 >  BB01 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #65  @34  RefTypeKill <Reg:r10>  BB01 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #66  @34  RefTypeKill <Reg:r11>  BB01 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #67  @38  RefTypeDef <Ivl:28> CNS_INT BB01 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #68  @39  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #69  @39  RefTypeUse <Ivl:28>  BB01 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #70  @40  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #71  @40  RefTypeDef <Ivl:29> PUTARG_REG BB01 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #72  @41  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #73  @41  RefTypeUse <Ivl:29>  BB01 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #74  @42  RefTypeKill <Reg:rax>  BB01 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #75  @42  RefTypeKill <Reg:rcx>  BB01 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #76  @42  RefTypeKill <Reg:rdx>  BB01 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #77  @42  RefTypeKill <Reg:r8 >  BB01 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #78  @42  RefTypeKill <Reg:r9 >  BB01 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #79  @42  RefTypeKill <Reg:r10>  BB01 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #80  @42  RefTypeKill <Reg:r11>  BB01 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #81  @42  RefTypeFixedReg <Reg:rax>  BB01 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #82  @42  RefTypeDef <Ivl:30> CALL BB01 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #83  @43  RefTypeUse <Ivl:30>  BB01 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #84  @44  RefTypeDef <Ivl:2 V08> STORE_LCL_VAR BB01 regmask=[allIntButFP] minReg=1 wt=600.00>
<RefPosition #85  @47  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #86  @47  RefTypeUse <Ivl:2 V08> LCL_VAR BB01 regmask=[rcx] minReg=1 fixed wt=600.00>
<RefPosition #87  @48  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #88  @48  RefTypeDef <Ivl:31> PUTARG_REG BB01 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #89  @49  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #90  @49  RefTypeUse <Ivl:31>  BB01 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #91  @50  RefTypeKill <Reg:rax>  BB01 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #92  @50  RefTypeKill <Reg:rcx>  BB01 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #93  @50  RefTypeKill <Reg:rdx>  BB01 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #94  @50  RefTypeKill <Reg:r8 >  BB01 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #95  @50  RefTypeKill <Reg:r9 >  BB01 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #96  @50  RefTypeKill <Reg:r10>  BB01 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #97  @50  RefTypeKill <Reg:r11>  BB01 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #98  @55  RefTypeUse <Ivl:0 V00> LCL_VAR BB01 regmask=[allIntButFP] minReg=1 wt=2350.00>
<RefPosition #99  @56  RefTypeDef <Ivl:32> LEA BB01 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #100 @59  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #101 @59  RefTypeUse <Ivl:32>  BB01 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #102 @59  RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #103 @59  RefTypeUse <Ivl:2 V08> LCL_VAR BB01 regmask=[rdx] minReg=1 last fixed wt=600.00>
<RefPosition #104 @60  RefTypeKill <Reg:rax>  BB01 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #105 @60  RefTypeKill <Reg:rcx>  BB01 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #106 @60  RefTypeKill <Reg:rdx>  BB01 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #107 @60  RefTypeKill <Reg:r8 >  BB01 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #108 @60  RefTypeKill <Reg:r9 >  BB01 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #109 @60  RefTypeKill <Reg:r10>  BB01 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #110 @60  RefTypeKill <Reg:r11>  BB01 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #111 @60  RefTypeKill <Reg:mm0>  BB01 regmask=[mm0] minReg=1 last wt=100.00>
<RefPosition #112 @60  RefTypeKill <Reg:mm1>  BB01 regmask=[mm1] minReg=1 last wt=100.00>
<RefPosition #113 @60  RefTypeKill <Reg:mm2>  BB01 regmask=[mm2] minReg=1 last wt=100.00>
<RefPosition #114 @60  RefTypeKill <Reg:mm3>  BB01 regmask=[mm3] minReg=1 last wt=100.00>
<RefPosition #115 @60  RefTypeKill <Reg:mm4>  BB01 regmask=[mm4] minReg=1 last wt=100.00>
<RefPosition #116 @60  RefTypeKill <Reg:mm5>  BB01 regmask=[mm5] minReg=1 last wt=100.00>
<RefPosition #117 @64  RefTypeDef <Ivl:33> CNS_INT BB01 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #118 @65  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #119 @65  RefTypeUse <Ivl:33>  BB01 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #120 @66  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #121 @66  RefTypeDef <Ivl:34> PUTARG_REG BB01 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #122 @67  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #123 @67  RefTypeUse <Ivl:34>  BB01 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #124 @68  RefTypeKill <Reg:rax>  BB01 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #125 @68  RefTypeKill <Reg:rcx>  BB01 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #126 @68  RefTypeKill <Reg:rdx>  BB01 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #127 @68  RefTypeKill <Reg:r8 >  BB01 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #128 @68  RefTypeKill <Reg:r9 >  BB01 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #129 @68  RefTypeKill <Reg:r10>  BB01 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #130 @68  RefTypeKill <Reg:r11>  BB01 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #131 @68  RefTypeFixedReg <Reg:rax>  BB01 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #132 @68  RefTypeDef <Ivl:35> CALL BB01 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #133 @69  RefTypeUse <Ivl:35>  BB01 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #134 @70  RefTypeDef <Ivl:3 V09> STORE_LCL_VAR BB01 regmask=[allIntButFP] minReg=1 wt=600.00>
<RefPosition #135 @75  RefTypeUse <Ivl:0 V00> LCL_VAR BB01 regmask=[allIntButFP] minReg=1 wt=2350.00>
<RefPosition #136 @76  RefTypeDef <Ivl:36> IND BB01 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #137 @79  RefTypeUse <Ivl:36>  BB01 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #138 @80  RefTypeDef <Ivl:37> IND BB01 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #139 @81  RefTypeUse <Ivl:37>  BB01 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #140 @82  RefTypeDef <Ivl:4 V10> STORE_LCL_VAR BB01 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #141 @85  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #142 @85  RefTypeUse <Ivl:3 V09> LCL_VAR BB01 regmask=[rcx] minReg=1 fixed wt=600.00>
<RefPosition #143 @86  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #144 @86  RefTypeDef <Ivl:38> PUTARG_REG BB01 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #145 @87  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #146 @87  RefTypeUse <Ivl:38>  BB01 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #147 @88  RefTypeKill <Reg:rax>  BB01 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #148 @88  RefTypeKill <Reg:rcx>  BB01 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #149 @88  RefTypeKill <Reg:rdx>  BB01 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #150 @88  RefTypeKill <Reg:r8 >  BB01 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #151 @88  RefTypeKill <Reg:r9 >  BB01 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #152 @88  RefTypeKill <Reg:r10>  BB01 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #153 @88  RefTypeKill <Reg:r11>  BB01 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #154 @93  RefTypeUse <Ivl:4 V10> LCL_VAR BB01 regmask=[allIntButFP] minReg=1 last wt=400.00>
<RefPosition #155 @94  RefTypeDef <Ivl:39> LEA BB01 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #156 @97  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #157 @97  RefTypeUse <Ivl:39>  BB01 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #158 @97  RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #159 @97  RefTypeUse <Ivl:3 V09> LCL_VAR BB01 regmask=[rdx] minReg=1 last fixed wt=600.00>
<RefPosition #160 @98  RefTypeKill <Reg:rax>  BB01 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #161 @98  RefTypeKill <Reg:rcx>  BB01 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #162 @98  RefTypeKill <Reg:rdx>  BB01 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #163 @98  RefTypeKill <Reg:r8 >  BB01 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #164 @98  RefTypeKill <Reg:r9 >  BB01 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #165 @98  RefTypeKill <Reg:r10>  BB01 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #166 @98  RefTypeKill <Reg:r11>  BB01 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #167 @98  RefTypeKill <Reg:mm0>  BB01 regmask=[mm0] minReg=1 last wt=100.00>
<RefPosition #168 @98  RefTypeKill <Reg:mm1>  BB01 regmask=[mm1] minReg=1 last wt=100.00>
<RefPosition #169 @98  RefTypeKill <Reg:mm2>  BB01 regmask=[mm2] minReg=1 last wt=100.00>
<RefPosition #170 @98  RefTypeKill <Reg:mm3>  BB01 regmask=[mm3] minReg=1 last wt=100.00>
<RefPosition #171 @98  RefTypeKill <Reg:mm4>  BB01 regmask=[mm4] minReg=1 last wt=100.00>
<RefPosition #172 @98  RefTypeKill <Reg:mm5>  BB01 regmask=[mm5] minReg=1 last wt=100.00>
<RefPosition #173 @102 RefTypeDef <Ivl:40> CNS_INT BB01 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #174 @103 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #175 @103 RefTypeUse <Ivl:40>  BB01 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #176 @104 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #177 @104 RefTypeDef <Ivl:41> PUTARG_REG BB01 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #178 @105 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #179 @105 RefTypeUse <Ivl:41>  BB01 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #180 @106 RefTypeKill <Reg:rax>  BB01 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #181 @106 RefTypeKill <Reg:rcx>  BB01 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #182 @106 RefTypeKill <Reg:rdx>  BB01 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #183 @106 RefTypeKill <Reg:r8 >  BB01 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #184 @106 RefTypeKill <Reg:r9 >  BB01 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #185 @106 RefTypeKill <Reg:r10>  BB01 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #186 @106 RefTypeKill <Reg:r11>  BB01 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #187 @106 RefTypeFixedReg <Reg:rax>  BB01 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #188 @106 RefTypeDef <Ivl:42> CALL BB01 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #189 @107 RefTypeUse <Ivl:42>  BB01 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #190 @108 RefTypeDef <Ivl:5 V11> STORE_LCL_VAR BB01 regmask=[allIntButFP] minReg=1 wt=600.00>
<RefPosition #191 @111 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #192 @111 RefTypeUse <Ivl:5 V11> LCL_VAR BB01 regmask=[rcx] minReg=1 fixed wt=600.00>
<RefPosition #193 @112 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #194 @112 RefTypeDef <Ivl:43> PUTARG_REG BB01 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #195 @115 RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #196 @115 RefTypeUse <Ivl:0 V00> LCL_VAR BB01 regmask=[rdx] minReg=1 fixed wt=2350.00>
<RefPosition #197 @116 RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #198 @116 RefTypeDef <Ivl:44> PUTARG_REG BB01 regmask=[rdx] minReg=1 fixed wt=400.00>
<RefPosition #199 @118 RefTypeDef <Ivl:45> CNS_INT BB01 regmask=[r8] minReg=1 wt=400.00>
<RefPosition #200 @119 RefTypeFixedReg <Reg:r8 >  BB01 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #201 @119 RefTypeUse <Ivl:45>  BB01 regmask=[r8] minReg=1 last fixed wt=100.00>
<RefPosition #202 @120 RefTypeFixedReg <Reg:r8 >  BB01 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #203 @120 RefTypeDef <Ivl:46> PUTARG_REG BB01 regmask=[r8] minReg=1 fixed wt=400.00>
<RefPosition #204 @121 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #205 @121 RefTypeUse <Ivl:43>  BB01 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #206 @121 RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #207 @121 RefTypeUse <Ivl:44>  BB01 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #208 @121 RefTypeFixedReg <Reg:r8 >  BB01 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #209 @121 RefTypeUse <Ivl:46>  BB01 regmask=[r8] minReg=1 last fixed wt=100.00>
<RefPosition #210 @122 RefTypeKill <Reg:rax>  BB01 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #211 @122 RefTypeKill <Reg:rcx>  BB01 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #212 @122 RefTypeKill <Reg:rdx>  BB01 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #213 @122 RefTypeKill <Reg:r8 >  BB01 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #214 @122 RefTypeKill <Reg:r9 >  BB01 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #215 @122 RefTypeKill <Reg:r10>  BB01 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #216 @122 RefTypeKill <Reg:r11>  BB01 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #217 @126 RefTypeDef <Ivl:47> CNS_INT BB01 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #218 @127 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #219 @127 RefTypeUse <Ivl:47>  BB01 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #220 @128 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #221 @128 RefTypeDef <Ivl:48> PUTARG_REG BB01 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #222 @129 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #223 @129 RefTypeUse <Ivl:48>  BB01 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #224 @130 RefTypeKill <Reg:rax>  BB01 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #225 @130 RefTypeKill <Reg:rcx>  BB01 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #226 @130 RefTypeKill <Reg:rdx>  BB01 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #227 @130 RefTypeKill <Reg:r8 >  BB01 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #228 @130 RefTypeKill <Reg:r9 >  BB01 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #229 @130 RefTypeKill <Reg:r10>  BB01 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #230 @130 RefTypeKill <Reg:r11>  BB01 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #231 @130 RefTypeFixedReg <Reg:rax>  BB01 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #232 @130 RefTypeDef <Ivl:49> CALL BB01 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #233 @131 RefTypeUse <Ivl:49>  BB01 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #234 @132 RefTypeDef <Ivl:6 V12> STORE_LCL_VAR BB01 regmask=[allIntButFP] minReg=1 wt=600.00>
<RefPosition #235 @135 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #236 @135 RefTypeUse <Ivl:6 V12> LCL_VAR BB01 regmask=[rcx] minReg=1 fixed wt=600.00>
<RefPosition #237 @136 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #238 @136 RefTypeDef <Ivl:50> PUTARG_REG BB01 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #239 @139 RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #240 @139 RefTypeUse <Ivl:5 V11> LCL_VAR BB01 regmask=[rdx] minReg=1 last fixed wt=600.00>
<RefPosition #241 @140 RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #242 @140 RefTypeDef <Ivl:51> PUTARG_REG BB01 regmask=[rdx] minReg=1 fixed wt=400.00>
<RefPosition #243 @141 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #244 @141 RefTypeUse <Ivl:50>  BB01 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #245 @141 RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #246 @141 RefTypeUse <Ivl:51>  BB01 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #247 @142 RefTypeKill <Reg:rax>  BB01 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #248 @142 RefTypeKill <Reg:rcx>  BB01 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #249 @142 RefTypeKill <Reg:rdx>  BB01 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #250 @142 RefTypeKill <Reg:r8 >  BB01 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #251 @142 RefTypeKill <Reg:r9 >  BB01 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #252 @142 RefTypeKill <Reg:r10>  BB01 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #253 @142 RefTypeKill <Reg:r11>  BB01 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #254 @147 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #255 @147 RefTypeUse <Ivl:6 V12> LCL_VAR BB01 regmask=[rcx] minReg=1 last fixed wt=600.00>
<RefPosition #256 @148 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #257 @148 RefTypeDef <Ivl:52> PUTARG_REG BB01 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #258 @149 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #259 @149 RefTypeUse <Ivl:52>  BB01 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #260 @150 RefTypeKill <Reg:rax>  BB01 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #261 @150 RefTypeKill <Reg:rcx>  BB01 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #262 @150 RefTypeKill <Reg:rdx>  BB01 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #263 @150 RefTypeKill <Reg:r8 >  BB01 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #264 @150 RefTypeKill <Reg:r9 >  BB01 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #265 @150 RefTypeKill <Reg:r10>  BB01 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #266 @150 RefTypeKill <Reg:r11>  BB01 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #267 @154 RefTypeKill <Reg:rax>  BB01 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #268 @154 RefTypeKill <Reg:rcx>  BB01 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #269 @154 RefTypeKill <Reg:rdx>  BB01 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #270 @154 RefTypeKill <Reg:r8 >  BB01 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #271 @154 RefTypeKill <Reg:r9 >  BB01 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #272 @154 RefTypeKill <Reg:r10>  BB01 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #273 @154 RefTypeKill <Reg:r11>  BB01 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #274 @154 RefTypeFixedReg <Reg:rax>  BB01 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #275 @154 RefTypeDef <Ivl:53> CALL BB01 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #276 @155 RefTypeUse <Ivl:53>  BB01 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #277 @160 RefTypeDef <Ivl:54> LCL_VAR_ADDR BB01 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #278 @161 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #279 @161 RefTypeUse <Ivl:54>  BB01 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #280 @162 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #281 @162 RefTypeDef <Ivl:55> PUTARG_REG BB01 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #282 @163 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #283 @163 RefTypeUse <Ivl:55>  BB01 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #284 @164 RefTypeKill <Reg:rax>  BB01 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #285 @164 RefTypeKill <Reg:rcx>  BB01 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #286 @164 RefTypeKill <Reg:rdx>  BB01 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #287 @164 RefTypeKill <Reg:r8 >  BB01 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #288 @164 RefTypeKill <Reg:r9 >  BB01 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #289 @164 RefTypeKill <Reg:r10>  BB01 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #290 @164 RefTypeKill <Reg:r11>  BB01 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #291 @164 RefTypeFixedReg <Reg:rax>  BB01 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #292 @164 RefTypeDef <Ivl:56> CALL BB01 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #293 @165 RefTypeUse <Ivl:56>  BB01 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #294 @166 RefTypeDef <Ivl:12 V22> STORE_LCL_VAR BB01 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #295 @169 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #296 @169 RefTypeUse <Ivl:12 V22> LCL_VAR BB01 regmask=[rcx] minReg=1 last fixed wt=400.00>
<RefPosition #297 @170 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #298 @170 RefTypeDef <Ivl:57> PUTARG_REG BB01 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #299 @172 RefTypeDef <Ivl:58> CNS_INT BB01 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #300 @173 RefTypeUse <Ivl:58>  BB01 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #301 @174 RefTypeDef <Ivl:59> IND BB01 regmask=[rdx] minReg=1 wt=400.00>
<RefPosition #302 @175 RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #303 @175 RefTypeUse <Ivl:59>  BB01 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #304 @176 RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #305 @176 RefTypeDef <Ivl:60> PUTARG_REG BB01 regmask=[rdx] minReg=1 fixed wt=400.00>
<RefPosition #306 @177 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #307 @177 RefTypeUse <Ivl:57>  BB01 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #308 @177 RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #309 @177 RefTypeUse <Ivl:60>  BB01 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #310 @178 RefTypeKill <Reg:rax>  BB01 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #311 @178 RefTypeKill <Reg:rcx>  BB01 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #312 @178 RefTypeKill <Reg:rdx>  BB01 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #313 @178 RefTypeKill <Reg:r8 >  BB01 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #314 @178 RefTypeKill <Reg:r9 >  BB01 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #315 @178 RefTypeKill <Reg:r10>  BB01 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #316 @178 RefTypeKill <Reg:r11>  BB01 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #317 @178 RefTypeFixedReg <Reg:rax>  BB01 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #318 @178 RefTypeDef <Ivl:61> CALL BB01 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #319 @179 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #320 @179 RefTypeUse <Ivl:61>  BB01 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #321 @180 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #322 @180 RefTypeDef <Ivl:62> PUTARG_REG BB01 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #323 @181 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #324 @181 RefTypeUse <Ivl:62>  BB01 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #325 @182 RefTypeKill <Reg:rax>  BB01 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #326 @182 RefTypeKill <Reg:rcx>  BB01 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #327 @182 RefTypeKill <Reg:rdx>  BB01 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #328 @182 RefTypeKill <Reg:r8 >  BB01 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #329 @182 RefTypeKill <Reg:r9 >  BB01 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #330 @182 RefTypeKill <Reg:r10>  BB01 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #331 @182 RefTypeKill <Reg:r11>  BB01 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #332 @186 RefTypeDef <Ivl:63> CNS_INT BB01 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #333 @187 RefTypeUse <Ivl:63>  BB01 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #334 @188 RefTypeDef <Ivl:1 V03> STORE_LCL_VAR BB01 regmask=[allIntButFP] minReg=1 wt=2500.00>
<RefPosition #335 @189 RefTypeBB  BB02 regmask=[] minReg=1 wt=800.00>
<RefPosition #336 @197 RefTypeUse <Ivl:0 V00> LCL_VAR BB02 regmask=[allIntButFP] minReg=1 wt=2350.00>
<RefPosition #337 @198 RefTypeDef <Ivl:64> IND BB02 regmask=[allIntButFP] minReg=1 wt=3200.00>
<RefPosition #338 @199 RefTypeUse <Ivl:64>  BB02 regmask=[allIntButFP] minReg=1 last wt=800.00>
<RefPosition #339 @204 RefTypeDef <Ivl:65> CNS_INT BB02 regmask=[allIntButFP] minReg=1 wt=3200.00>
<RefPosition #340 @205 RefTypeUse <Ivl:65>  BB02 regmask=[allIntButFP] minReg=1 last wt=800.00>
<RefPosition #341 @207 RefTypeBB  BB03 regmask=[] minReg=1 wt=800.00>
<RefPosition #342 @212 RefTypeDef <Ivl:66> LCL_VAR_ADDR BB03 regmask=[rdx] minReg=1 wt=3200.00>
<RefPosition #343 @213 RefTypeFixedReg <Reg:rdx>  BB03 regmask=[rdx] minReg=1 wt=800.00>
<RefPosition #344 @213 RefTypeUse <Ivl:66>  BB03 regmask=[rdx] minReg=1 last fixed wt=800.00>
<RefPosition #345 @214 RefTypeFixedReg <Reg:rdx>  BB03 regmask=[rdx] minReg=1 wt=800.00>
<RefPosition #346 @214 RefTypeDef <Ivl:67> PUTARG_REG BB03 regmask=[rdx] minReg=1 fixed wt=3200.00>
<RefPosition #347 @216 RefTypeDef <Ivl:68> LCL_VAR BB03 regmask=[rcx] minReg=1 wt=3200.00>
<RefPosition #348 @217 RefTypeFixedReg <Reg:rcx>  BB03 regmask=[rcx] minReg=1 wt=800.00>
<RefPosition #349 @217 RefTypeUse <Ivl:68>  BB03 regmask=[rcx] minReg=1 last fixed wt=800.00>
<RefPosition #350 @218 RefTypeFixedReg <Reg:rcx>  BB03 regmask=[rcx] minReg=1 wt=800.00>
<RefPosition #351 @218 RefTypeDef <Ivl:69> PUTARG_REG BB03 regmask=[rcx] minReg=1 fixed wt=3200.00>
<RefPosition #352 @219 RefTypeFixedReg <Reg:rdx>  BB03 regmask=[rdx] minReg=1 wt=800.00>
<RefPosition #353 @219 RefTypeUse <Ivl:67>  BB03 regmask=[rdx] minReg=1 last fixed wt=800.00>
<RefPosition #354 @219 RefTypeFixedReg <Reg:rcx>  BB03 regmask=[rcx] minReg=1 wt=800.00>
<RefPosition #355 @219 RefTypeUse <Ivl:69>  BB03 regmask=[rcx] minReg=1 last fixed wt=800.00>
<RefPosition #356 @220 RefTypeKill <Reg:rax>  BB03 regmask=[rax] minReg=1 last wt=800.00>
<RefPosition #357 @220 RefTypeKill <Reg:rcx>  BB03 regmask=[rcx] minReg=1 last wt=800.00>
<RefPosition #358 @220 RefTypeKill <Reg:rdx>  BB03 regmask=[rdx] minReg=1 last wt=800.00>
<RefPosition #359 @220 RefTypeKill <Reg:r8 >  BB03 regmask=[r8] minReg=1 last wt=800.00>
<RefPosition #360 @220 RefTypeKill <Reg:r9 >  BB03 regmask=[r9] minReg=1 last wt=800.00>
<RefPosition #361 @220 RefTypeKill <Reg:r10>  BB03 regmask=[r10] minReg=1 last wt=800.00>
<RefPosition #362 @220 RefTypeKill <Reg:r11>  BB03 regmask=[r11] minReg=1 last wt=800.00>
<RefPosition #363 @224 RefTypeDef <Ivl:70> CNS_INT BB03 regmask=[rcx] minReg=1 wt=3200.00>
<RefPosition #364 @225 RefTypeFixedReg <Reg:rcx>  BB03 regmask=[rcx] minReg=1 wt=800.00>
<RefPosition #365 @225 RefTypeUse <Ivl:70>  BB03 regmask=[rcx] minReg=1 last fixed wt=800.00>
<RefPosition #366 @226 RefTypeFixedReg <Reg:rcx>  BB03 regmask=[rcx] minReg=1 wt=800.00>
<RefPosition #367 @226 RefTypeDef <Ivl:71> PUTARG_REG BB03 regmask=[rcx] minReg=1 fixed wt=3200.00>
<RefPosition #368 @227 RefTypeFixedReg <Reg:rcx>  BB03 regmask=[rcx] minReg=1 wt=800.00>
<RefPosition #369 @227 RefTypeUse <Ivl:71>  BB03 regmask=[rcx] minReg=1 last fixed wt=800.00>
<RefPosition #370 @228 RefTypeKill <Reg:rax>  BB03 regmask=[rax] minReg=1 last wt=800.00>
<RefPosition #371 @228 RefTypeKill <Reg:rcx>  BB03 regmask=[rcx] minReg=1 last wt=800.00>
<RefPosition #372 @228 RefTypeKill <Reg:rdx>  BB03 regmask=[rdx] minReg=1 last wt=800.00>
<RefPosition #373 @228 RefTypeKill <Reg:r8 >  BB03 regmask=[r8] minReg=1 last wt=800.00>
<RefPosition #374 @228 RefTypeKill <Reg:r9 >  BB03 regmask=[r9] minReg=1 last wt=800.00>
<RefPosition #375 @228 RefTypeKill <Reg:r10>  BB03 regmask=[r10] minReg=1 last wt=800.00>
<RefPosition #376 @228 RefTypeKill <Reg:r11>  BB03 regmask=[r11] minReg=1 last wt=800.00>
<RefPosition #377 @228 RefTypeFixedReg <Reg:rax>  BB03 regmask=[rax] minReg=1 wt=800.00>
<RefPosition #378 @228 RefTypeDef <Ivl:72> CALL BB03 regmask=[rax] minReg=1 fixed wt=3200.00>
<RefPosition #379 @229 RefTypeUse <Ivl:72>  BB03 regmask=[allIntButFP] minReg=1 last wt=800.00>
<RefPosition #380 @230 RefTypeDef <Ivl:7 V13> STORE_LCL_VAR BB03 regmask=[allIntButFP] minReg=1 wt=4800.00>
<RefPosition #381 @235 RefTypeUse <Ivl:0 V00> LCL_VAR BB03 regmask=[allIntButFP] minReg=1 wt=2350.00>
<RefPosition #382 @236 RefTypeDef <Ivl:73> IND BB03 regmask=[allIntButFP] minReg=1 wt=3200.00>
<RefPosition #383 @239 RefTypeUse <Ivl:73>  BB03 regmask=[allIntButFP] minReg=1 last wt=800.00>
<RefPosition #384 @240 RefTypeDef <Ivl:74> IND BB03 regmask=[allIntButFP] minReg=1 wt=3200.00>
<RefPosition #385 @241 RefTypeUse <Ivl:74>  BB03 regmask=[allIntButFP] minReg=1 last wt=800.00>
<RefPosition #386 @242 RefTypeDef <Ivl:8 V14> STORE_LCL_VAR BB03 regmask=[allIntButFP] minReg=1 wt=3200.00>
<RefPosition #387 @245 RefTypeFixedReg <Reg:rcx>  BB03 regmask=[rcx] minReg=1 wt=800.00>
<RefPosition #388 @245 RefTypeUse <Ivl:7 V13> LCL_VAR BB03 regmask=[rcx] minReg=1 fixed wt=4800.00>
<RefPosition #389 @246 RefTypeFixedReg <Reg:rcx>  BB03 regmask=[rcx] minReg=1 wt=800.00>
<RefPosition #390 @246 RefTypeDef <Ivl:75> PUTARG_REG BB03 regmask=[rcx] minReg=1 fixed wt=3200.00>
<RefPosition #391 @247 RefTypeFixedReg <Reg:rcx>  BB03 regmask=[rcx] minReg=1 wt=800.00>
<RefPosition #392 @247 RefTypeUse <Ivl:75>  BB03 regmask=[rcx] minReg=1 last fixed wt=800.00>
<RefPosition #393 @248 RefTypeKill <Reg:rax>  BB03 regmask=[rax] minReg=1 last wt=800.00>
<RefPosition #394 @248 RefTypeKill <Reg:rcx>  BB03 regmask=[rcx] minReg=1 last wt=800.00>
<RefPosition #395 @248 RefTypeKill <Reg:rdx>  BB03 regmask=[rdx] minReg=1 last wt=800.00>
<RefPosition #396 @248 RefTypeKill <Reg:r8 >  BB03 regmask=[r8] minReg=1 last wt=800.00>
<RefPosition #397 @248 RefTypeKill <Reg:r9 >  BB03 regmask=[r9] minReg=1 last wt=800.00>
<RefPosition #398 @248 RefTypeKill <Reg:r10>  BB03 regmask=[r10] minReg=1 last wt=800.00>
<RefPosition #399 @248 RefTypeKill <Reg:r11>  BB03 regmask=[r11] minReg=1 last wt=800.00>
<RefPosition #400 @253 RefTypeUse <Ivl:8 V14> LCL_VAR BB03 regmask=[allIntButFP] minReg=1 last wt=3200.00>
<RefPosition #401 @254 RefTypeDef <Ivl:76> LEA BB03 regmask=[rcx] minReg=1 wt=3200.00>
<RefPosition #402 @257 RefTypeFixedReg <Reg:rcx>  BB03 regmask=[rcx] minReg=1 wt=800.00>
<RefPosition #403 @257 RefTypeUse <Ivl:76>  BB03 regmask=[rcx] minReg=1 last fixed wt=800.00>
<RefPosition #404 @257 RefTypeFixedReg <Reg:rdx>  BB03 regmask=[rdx] minReg=1 wt=800.00>
<RefPosition #405 @257 RefTypeUse <Ivl:7 V13> LCL_VAR BB03 regmask=[rdx] minReg=1 last fixed wt=4800.00>
<RefPosition #406 @258 RefTypeKill <Reg:rax>  BB03 regmask=[rax] minReg=1 last wt=800.00>
<RefPosition #407 @258 RefTypeKill <Reg:rcx>  BB03 regmask=[rcx] minReg=1 last wt=800.00>
<RefPosition #408 @258 RefTypeKill <Reg:rdx>  BB03 regmask=[rdx] minReg=1 last wt=800.00>
<RefPosition #409 @258 RefTypeKill <Reg:r8 >  BB03 regmask=[r8] minReg=1 last wt=800.00>
<RefPosition #410 @258 RefTypeKill <Reg:r9 >  BB03 regmask=[r9] minReg=1 last wt=800.00>
<RefPosition #411 @258 RefTypeKill <Reg:r10>  BB03 regmask=[r10] minReg=1 last wt=800.00>
<RefPosition #412 @258 RefTypeKill <Reg:r11>  BB03 regmask=[r11] minReg=1 last wt=800.00>
<RefPosition #413 @258 RefTypeKill <Reg:mm0>  BB03 regmask=[mm0] minReg=1 last wt=800.00>
<RefPosition #414 @258 RefTypeKill <Reg:mm1>  BB03 regmask=[mm1] minReg=1 last wt=800.00>
<RefPosition #415 @258 RefTypeKill <Reg:mm2>  BB03 regmask=[mm2] minReg=1 last wt=800.00>
<RefPosition #416 @258 RefTypeKill <Reg:mm3>  BB03 regmask=[mm3] minReg=1 last wt=800.00>
<RefPosition #417 @258 RefTypeKill <Reg:mm4>  BB03 regmask=[mm4] minReg=1 last wt=800.00>
<RefPosition #418 @258 RefTypeKill <Reg:mm5>  BB03 regmask=[mm5] minReg=1 last wt=800.00>
<RefPosition #419 @265 RefTypeUse <Ivl:0 V00> LCL_VAR BB03 regmask=[allIntButFP] minReg=1 wt=2350.00>
<RefPosition #420 @266 RefTypeDef <Ivl:77> IND BB03 regmask=[allIntButFP] minReg=1 wt=3200.00>
<RefPosition #421 @267 RefTypeUse <Ivl:77>  BB03 regmask=[allIntButFP] minReg=1 last wt=800.00>
<RefPosition #422 @268 RefTypeDef <Ivl:16 V28> STORE_LCL_VAR BB03 regmask=[allIntButFP] minReg=1 wt=2400.00>
<RefPosition #423 @271 RefTypeUse <Ivl:16 V28> LCL_VAR BB03 regmask=[allIntButFP] minReg=1 wt=2400.00>
<RefPosition #424 @272 RefTypeDef <Ivl:78> LEA BB03 regmask=[rcx] minReg=1 wt=3200.00>
<RefPosition #425 @277 RefTypeUse <Ivl:16 V28> LCL_VAR BB03 regmask=[allIntButFP] minReg=1 last wt=2400.00>
<RefPosition #426 @278 RefTypeDef <Ivl:79> IND BB03 regmask=[allIntButFP] minReg=1 wt=3200.00>
<RefPosition #427 @281 RefTypeUse <Ivl:79>  BB03 regmask=[allIntButFP] minReg=1 last wt=800.00>
<RefPosition #428 @282 RefTypeDef <Ivl:80> IND BB03 regmask=[allIntButFP] minReg=1 wt=3200.00>
<RefPosition #429 @283 RefTypeUse <Ivl:80>  BB03 regmask=[allIntButFP] minReg=1 last wt=800.00>
<RefPosition #430 @284 RefTypeDef <Ivl:15 V27> STORE_LCL_VAR BB03 regmask=[allIntButFP] minReg=1 wt=2400.00>
<RefPosition #431 @287 RefTypeFixedReg <Reg:rcx>  BB03 regmask=[rcx] minReg=1 wt=800.00>
<RefPosition #432 @287 RefTypeUse <Ivl:78>  BB03 regmask=[rcx] minReg=1 last fixed wt=800.00>
<RefPosition #433 @287 RefTypeFixedReg <Reg:rdx>  BB03 regmask=[rdx] minReg=1 wt=800.00>
<RefPosition #434 @287 RefTypeUse <Ivl:15 V27> LCL_VAR BB03 regmask=[rdx] minReg=1 fixed wt=2400.00>
<RefPosition #435 @288 RefTypeKill <Reg:rax>  BB03 regmask=[rax] minReg=1 last wt=800.00>
<RefPosition #436 @288 RefTypeKill <Reg:rcx>  BB03 regmask=[rcx] minReg=1 last wt=800.00>
<RefPosition #437 @288 RefTypeKill <Reg:rdx>  BB03 regmask=[rdx] minReg=1 last wt=800.00>
<RefPosition #438 @288 RefTypeKill <Reg:r8 >  BB03 regmask=[r8] minReg=1 last wt=800.00>
<RefPosition #439 @288 RefTypeKill <Reg:r9 >  BB03 regmask=[r9] minReg=1 last wt=800.00>
<RefPosition #440 @288 RefTypeKill <Reg:r10>  BB03 regmask=[r10] minReg=1 last wt=800.00>
<RefPosition #441 @288 RefTypeKill <Reg:r11>  BB03 regmask=[r11] minReg=1 last wt=800.00>
<RefPosition #442 @288 RefTypeKill <Reg:mm0>  BB03 regmask=[mm0] minReg=1 last wt=800.00>
<RefPosition #443 @288 RefTypeKill <Reg:mm1>  BB03 regmask=[mm1] minReg=1 last wt=800.00>
<RefPosition #444 @288 RefTypeKill <Reg:mm2>  BB03 regmask=[mm2] minReg=1 last wt=800.00>
<RefPosition #445 @288 RefTypeKill <Reg:mm3>  BB03 regmask=[mm3] minReg=1 last wt=800.00>
<RefPosition #446 @288 RefTypeKill <Reg:mm4>  BB03 regmask=[mm4] minReg=1 last wt=800.00>
<RefPosition #447 @288 RefTypeKill <Reg:mm5>  BB03 regmask=[mm5] minReg=1 last wt=800.00>
<RefPosition #448 @292 RefTypeDef <Ivl:81> CNS_INT BB03 regmask=[rcx] minReg=1 wt=3200.00>
<RefPosition #449 @293 RefTypeFixedReg <Reg:rcx>  BB03 regmask=[rcx] minReg=1 wt=800.00>
<RefPosition #450 @293 RefTypeUse <Ivl:81>  BB03 regmask=[rcx] minReg=1 last fixed wt=800.00>
<RefPosition #451 @294 RefTypeFixedReg <Reg:rcx>  BB03 regmask=[rcx] minReg=1 wt=800.00>
<RefPosition #452 @294 RefTypeDef <Ivl:82> PUTARG_REG BB03 regmask=[rcx] minReg=1 fixed wt=3200.00>
<RefPosition #453 @295 RefTypeFixedReg <Reg:rcx>  BB03 regmask=[rcx] minReg=1 wt=800.00>
<RefPosition #454 @295 RefTypeUse <Ivl:82>  BB03 regmask=[rcx] minReg=1 last fixed wt=800.00>
<RefPosition #455 @296 RefTypeKill <Reg:rax>  BB03 regmask=[rax] minReg=1 last wt=800.00>
<RefPosition #456 @296 RefTypeKill <Reg:rcx>  BB03 regmask=[rcx] minReg=1 last wt=800.00>
<RefPosition #457 @296 RefTypeKill <Reg:rdx>  BB03 regmask=[rdx] minReg=1 last wt=800.00>
<RefPosition #458 @296 RefTypeKill <Reg:r8 >  BB03 regmask=[r8] minReg=1 last wt=800.00>
<RefPosition #459 @296 RefTypeKill <Reg:r9 >  BB03 regmask=[r9] minReg=1 last wt=800.00>
<RefPosition #460 @296 RefTypeKill <Reg:r10>  BB03 regmask=[r10] minReg=1 last wt=800.00>
<RefPosition #461 @296 RefTypeKill <Reg:r11>  BB03 regmask=[r11] minReg=1 last wt=800.00>
<RefPosition #462 @296 RefTypeFixedReg <Reg:rax>  BB03 regmask=[rax] minReg=1 wt=800.00>
<RefPosition #463 @296 RefTypeDef <Ivl:83> CALL BB03 regmask=[rax] minReg=1 fixed wt=3200.00>
<RefPosition #464 @297 RefTypeUse <Ivl:83>  BB03 regmask=[allIntButFP] minReg=1 last wt=800.00>
<RefPosition #465 @298 RefTypeDef <Ivl:9 V15> STORE_LCL_VAR BB03 regmask=[allIntButFP] minReg=1 wt=4800.00>
<RefPosition #466 @301 RefTypeUse <Ivl:15 V27> LCL_VAR BB03 regmask=[allIntButFP] minReg=1 last wt=2400.00>
<RefPosition #467 @302 RefTypeDef <Ivl:10 V16> STORE_LCL_VAR BB03 regmask=[allIntButFP] minReg=1 wt=3200.00>
<RefPosition #468 @305 RefTypeFixedReg <Reg:rcx>  BB03 regmask=[rcx] minReg=1 wt=800.00>
<RefPosition #469 @305 RefTypeUse <Ivl:9 V15> LCL_VAR BB03 regmask=[rcx] minReg=1 fixed wt=4800.00>
<RefPosition #470 @306 RefTypeFixedReg <Reg:rcx>  BB03 regmask=[rcx] minReg=1 wt=800.00>
<RefPosition #471 @306 RefTypeDef <Ivl:84> PUTARG_REG BB03 regmask=[rcx] minReg=1 fixed wt=3200.00>
<RefPosition #472 @307 RefTypeFixedReg <Reg:rcx>  BB03 regmask=[rcx] minReg=1 wt=800.00>
<RefPosition #473 @307 RefTypeUse <Ivl:84>  BB03 regmask=[rcx] minReg=1 last fixed wt=800.00>
<RefPosition #474 @308 RefTypeKill <Reg:rax>  BB03 regmask=[rax] minReg=1 last wt=800.00>
<RefPosition #475 @308 RefTypeKill <Reg:rcx>  BB03 regmask=[rcx] minReg=1 last wt=800.00>
<RefPosition #476 @308 RefTypeKill <Reg:rdx>  BB03 regmask=[rdx] minReg=1 last wt=800.00>
<RefPosition #477 @308 RefTypeKill <Reg:r8 >  BB03 regmask=[r8] minReg=1 last wt=800.00>
<RefPosition #478 @308 RefTypeKill <Reg:r9 >  BB03 regmask=[r9] minReg=1 last wt=800.00>
<RefPosition #479 @308 RefTypeKill <Reg:r10>  BB03 regmask=[r10] minReg=1 last wt=800.00>
<RefPosition #480 @308 RefTypeKill <Reg:r11>  BB03 regmask=[r11] minReg=1 last wt=800.00>
<RefPosition #481 @313 RefTypeUse <Ivl:10 V16> LCL_VAR BB03 regmask=[allIntButFP] minReg=1 last wt=3200.00>
<RefPosition #482 @314 RefTypeDef <Ivl:85> LEA BB03 regmask=[rcx] minReg=1 wt=3200.00>
<RefPosition #483 @317 RefTypeFixedReg <Reg:rcx>  BB03 regmask=[rcx] minReg=1 wt=800.00>
<RefPosition #484 @317 RefTypeUse <Ivl:85>  BB03 regmask=[rcx] minReg=1 last fixed wt=800.00>
<RefPosition #485 @317 RefTypeFixedReg <Reg:rdx>  BB03 regmask=[rdx] minReg=1 wt=800.00>
<RefPosition #486 @317 RefTypeUse <Ivl:9 V15> LCL_VAR BB03 regmask=[rdx] minReg=1 last fixed wt=4800.00>
<RefPosition #487 @318 RefTypeKill <Reg:rax>  BB03 regmask=[rax] minReg=1 last wt=800.00>
<RefPosition #488 @318 RefTypeKill <Reg:rcx>  BB03 regmask=[rcx] minReg=1 last wt=800.00>
<RefPosition #489 @318 RefTypeKill <Reg:rdx>  BB03 regmask=[rdx] minReg=1 last wt=800.00>
<RefPosition #490 @318 RefTypeKill <Reg:r8 >  BB03 regmask=[r8] minReg=1 last wt=800.00>
<RefPosition #491 @318 RefTypeKill <Reg:r9 >  BB03 regmask=[r9] minReg=1 last wt=800.00>
<RefPosition #492 @318 RefTypeKill <Reg:r10>  BB03 regmask=[r10] minReg=1 last wt=800.00>
<RefPosition #493 @318 RefTypeKill <Reg:r11>  BB03 regmask=[r11] minReg=1 last wt=800.00>
<RefPosition #494 @318 RefTypeKill <Reg:mm0>  BB03 regmask=[mm0] minReg=1 last wt=800.00>
<RefPosition #495 @318 RefTypeKill <Reg:mm1>  BB03 regmask=[mm1] minReg=1 last wt=800.00>
<RefPosition #496 @318 RefTypeKill <Reg:mm2>  BB03 regmask=[mm2] minReg=1 last wt=800.00>
<RefPosition #497 @318 RefTypeKill <Reg:mm3>  BB03 regmask=[mm3] minReg=1 last wt=800.00>
<RefPosition #498 @318 RefTypeKill <Reg:mm4>  BB03 regmask=[mm4] minReg=1 last wt=800.00>
<RefPosition #499 @318 RefTypeKill <Reg:mm5>  BB03 regmask=[mm5] minReg=1 last wt=800.00>
<RefPosition #500 @319 RefTypeBB  BB04 regmask=[] minReg=1 wt=800.00>
<RefPosition #501 @329 RefTypeBB  BB05 regmask=[] minReg=1 wt=400.00>
<RefPosition #502 @332 RefTypeDef <Ivl:86> LCL_VAR BB05 regmask=[rcx] minReg=1 wt=1600.00>
<RefPosition #503 @333 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #504 @333 RefTypeUse <Ivl:86>  BB05 regmask=[rcx] minReg=1 last fixed wt=400.00>
<RefPosition #505 @334 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #506 @334 RefTypeDef <Ivl:87> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=1600.00>
<RefPosition #507 @335 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #508 @335 RefTypeUse <Ivl:87>  BB05 regmask=[rcx] minReg=1 last fixed wt=400.00>
<RefPosition #509 @336 RefTypeKill <Reg:rax>  BB05 regmask=[rax] minReg=1 last wt=400.00>
<RefPosition #510 @336 RefTypeKill <Reg:rcx>  BB05 regmask=[rcx] minReg=1 last wt=400.00>
<RefPosition #511 @336 RefTypeKill <Reg:rdx>  BB05 regmask=[rdx] minReg=1 last wt=400.00>
<RefPosition #512 @336 RefTypeKill <Reg:r8 >  BB05 regmask=[r8] minReg=1 last wt=400.00>
<RefPosition #513 @336 RefTypeKill <Reg:r9 >  BB05 regmask=[r9] minReg=1 last wt=400.00>
<RefPosition #514 @336 RefTypeKill <Reg:r10>  BB05 regmask=[r10] minReg=1 last wt=400.00>
<RefPosition #515 @336 RefTypeKill <Reg:r11>  BB05 regmask=[r11] minReg=1 last wt=400.00>
<RefPosition #516 @337 RefTypeBB  BB06 regmask=[] minReg=1 wt=800.00>
<RefPosition #517 @345 RefTypeUse <Ivl:1 V03> LCL_VAR BB06 regmask=[allIntButFP] minReg=1 last wt=2500.00>
<RefPosition #518 @346 RefTypeDef <Ivl:88> ADD BB06 regmask=[allIntButFP] minReg=1 wt=3200.00>
<RefPosition #519 @347 RefTypeUse <Ivl:88>  BB06 regmask=[allIntButFP] minReg=1 last wt=800.00>
<RefPosition #520 @348 RefTypeDef <Ivl:1 V03> STORE_LCL_VAR BB06 regmask=[allIntButFP] minReg=1 wt=2500.00>
<RefPosition #521 @355 RefTypeUse <Ivl:1 V03> LCL_VAR BB06 regmask=[allIntButFP] minReg=1 regOptional wt=2500.00>
<RefPosition #522 @359 RefTypeExpUse <Ivl:1 V03>  BB06 regmask=[allIntButFP] minReg=1 regOptional wt=800.00>
<RefPosition #523 @359 RefTypeBB  BB07 regmask=[] minReg=1 wt=100.00>
<RefPosition #524 @364 RefTypeKill <Reg:rax>  BB07 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #525 @364 RefTypeKill <Reg:rcx>  BB07 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #526 @364 RefTypeKill <Reg:rdx>  BB07 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #527 @364 RefTypeKill <Reg:r8 >  BB07 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #528 @364 RefTypeKill <Reg:r9 >  BB07 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #529 @364 RefTypeKill <Reg:r10>  BB07 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #530 @364 RefTypeKill <Reg:r11>  BB07 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #531 @364 RefTypeFixedReg <Reg:rax>  BB07 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #532 @364 RefTypeDef <Ivl:89> CALL BB07 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #533 @365 RefTypeUse <Ivl:89>  BB07 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #534 @370 RefTypeDef <Ivl:90> LCL_VAR_ADDR BB07 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #535 @371 RefTypeFixedReg <Reg:rcx>  BB07 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #536 @371 RefTypeUse <Ivl:90>  BB07 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #537 @372 RefTypeFixedReg <Reg:rcx>  BB07 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #538 @372 RefTypeDef <Ivl:91> PUTARG_REG BB07 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #539 @373 RefTypeFixedReg <Reg:rcx>  BB07 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #540 @373 RefTypeUse <Ivl:91>  BB07 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #541 @374 RefTypeKill <Reg:rax>  BB07 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #542 @374 RefTypeKill <Reg:rcx>  BB07 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #543 @374 RefTypeKill <Reg:rdx>  BB07 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #544 @374 RefTypeKill <Reg:r8 >  BB07 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #545 @374 RefTypeKill <Reg:r9 >  BB07 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #546 @374 RefTypeKill <Reg:r10>  BB07 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #547 @374 RefTypeKill <Reg:r11>  BB07 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #548 @374 RefTypeFixedReg <Reg:rax>  BB07 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #549 @374 RefTypeDef <Ivl:92> CALL BB07 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #550 @375 RefTypeUse <Ivl:92>  BB07 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #551 @376 RefTypeDef <Ivl:13 V23> STORE_LCL_VAR BB07 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #552 @379 RefTypeFixedReg <Reg:rcx>  BB07 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #553 @379 RefTypeUse <Ivl:13 V23> LCL_VAR BB07 regmask=[rcx] minReg=1 last fixed wt=400.00>
<RefPosition #554 @380 RefTypeFixedReg <Reg:rcx>  BB07 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #555 @380 RefTypeDef <Ivl:93> PUTARG_REG BB07 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #556 @382 RefTypeDef <Ivl:94> CNS_INT BB07 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #557 @383 RefTypeUse <Ivl:94>  BB07 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #558 @384 RefTypeDef <Ivl:95> IND BB07 regmask=[rdx] minReg=1 wt=400.00>
<RefPosition #559 @385 RefTypeFixedReg <Reg:rdx>  BB07 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #560 @385 RefTypeUse <Ivl:95>  BB07 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #561 @386 RefTypeFixedReg <Reg:rdx>  BB07 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #562 @386 RefTypeDef <Ivl:96> PUTARG_REG BB07 regmask=[rdx] minReg=1 fixed wt=400.00>
<RefPosition #563 @387 RefTypeFixedReg <Reg:rcx>  BB07 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #564 @387 RefTypeUse <Ivl:93>  BB07 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #565 @387 RefTypeFixedReg <Reg:rdx>  BB07 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #566 @387 RefTypeUse <Ivl:96>  BB07 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #567 @388 RefTypeKill <Reg:rax>  BB07 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #568 @388 RefTypeKill <Reg:rcx>  BB07 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #569 @388 RefTypeKill <Reg:rdx>  BB07 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #570 @388 RefTypeKill <Reg:r8 >  BB07 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #571 @388 RefTypeKill <Reg:r9 >  BB07 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #572 @388 RefTypeKill <Reg:r10>  BB07 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #573 @388 RefTypeKill <Reg:r11>  BB07 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #574 @388 RefTypeFixedReg <Reg:rax>  BB07 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #575 @388 RefTypeDef <Ivl:97> CALL BB07 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #576 @389 RefTypeFixedReg <Reg:rcx>  BB07 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #577 @389 RefTypeUse <Ivl:97>  BB07 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #578 @390 RefTypeFixedReg <Reg:rcx>  BB07 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #579 @390 RefTypeDef <Ivl:98> PUTARG_REG BB07 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #580 @391 RefTypeFixedReg <Reg:rcx>  BB07 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #581 @391 RefTypeUse <Ivl:98>  BB07 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #582 @392 RefTypeKill <Reg:rax>  BB07 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #583 @392 RefTypeKill <Reg:rcx>  BB07 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #584 @392 RefTypeKill <Reg:rdx>  BB07 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #585 @392 RefTypeKill <Reg:r8 >  BB07 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #586 @392 RefTypeKill <Reg:r9 >  BB07 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #587 @392 RefTypeKill <Reg:r10>  BB07 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #588 @392 RefTypeKill <Reg:r11>  BB07 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #589 @393 RefTypeBB  BB08 regmask=[] minReg=1 wt=800.00>
<RefPosition #590 @401 RefTypeUse <Ivl:0 V00> LCL_VAR BB08 regmask=[allIntButFP] minReg=1 wt=2350.00>
<RefPosition #591 @402 RefTypeDef <Ivl:99> IND BB08 regmask=[allIntButFP] minReg=1 wt=3200.00>
<RefPosition #592 @403 RefTypeUse <Ivl:99>  BB08 regmask=[allIntButFP] minReg=1 last wt=800.00>
<RefPosition #593 @408 RefTypeDef <Ivl:100> CNS_INT BB08 regmask=[allIntButFP] minReg=1 wt=3200.00>
<RefPosition #594 @409 RefTypeUse <Ivl:100>  BB08 regmask=[allIntButFP] minReg=1 last wt=800.00>
<RefPosition #595 @411 RefTypeBB  BB09 regmask=[] minReg=1 wt=800.00>
<RefPosition #596 @416 RefTypeDef <Ivl:101> LCL_VAR_ADDR BB09 regmask=[rdx] minReg=1 wt=3200.00>
<RefPosition #597 @417 RefTypeFixedReg <Reg:rdx>  BB09 regmask=[rdx] minReg=1 wt=800.00>
<RefPosition #598 @417 RefTypeUse <Ivl:101>  BB09 regmask=[rdx] minReg=1 last fixed wt=800.00>
<RefPosition #599 @418 RefTypeFixedReg <Reg:rdx>  BB09 regmask=[rdx] minReg=1 wt=800.00>
<RefPosition #600 @418 RefTypeDef <Ivl:102> PUTARG_REG BB09 regmask=[rdx] minReg=1 fixed wt=3200.00>
<RefPosition #601 @420 RefTypeDef <Ivl:103> LCL_VAR BB09 regmask=[rcx] minReg=1 wt=3200.00>
<RefPosition #602 @421 RefTypeFixedReg <Reg:rcx>  BB09 regmask=[rcx] minReg=1 wt=800.00>
<RefPosition #603 @421 RefTypeUse <Ivl:103>  BB09 regmask=[rcx] minReg=1 last fixed wt=800.00>
<RefPosition #604 @422 RefTypeFixedReg <Reg:rcx>  BB09 regmask=[rcx] minReg=1 wt=800.00>
<RefPosition #605 @422 RefTypeDef <Ivl:104> PUTARG_REG BB09 regmask=[rcx] minReg=1 fixed wt=3200.00>
<RefPosition #606 @423 RefTypeFixedReg <Reg:rdx>  BB09 regmask=[rdx] minReg=1 wt=800.00>
<RefPosition #607 @423 RefTypeUse <Ivl:102>  BB09 regmask=[rdx] minReg=1 last fixed wt=800.00>
<RefPosition #608 @423 RefTypeFixedReg <Reg:rcx>  BB09 regmask=[rcx] minReg=1 wt=800.00>
<RefPosition #609 @423 RefTypeUse <Ivl:104>  BB09 regmask=[rcx] minReg=1 last fixed wt=800.00>
<RefPosition #610 @424 RefTypeKill <Reg:rax>  BB09 regmask=[rax] minReg=1 last wt=800.00>
<RefPosition #611 @424 RefTypeKill <Reg:rcx>  BB09 regmask=[rcx] minReg=1 last wt=800.00>
<RefPosition #612 @424 RefTypeKill <Reg:rdx>  BB09 regmask=[rdx] minReg=1 last wt=800.00>
<RefPosition #613 @424 RefTypeKill <Reg:r8 >  BB09 regmask=[r8] minReg=1 last wt=800.00>
<RefPosition #614 @424 RefTypeKill <Reg:r9 >  BB09 regmask=[r9] minReg=1 last wt=800.00>
<RefPosition #615 @424 RefTypeKill <Reg:r10>  BB09 regmask=[r10] minReg=1 last wt=800.00>
<RefPosition #616 @424 RefTypeKill <Reg:r11>  BB09 regmask=[r11] minReg=1 last wt=800.00>
<RefPosition #617 @431 RefTypeUse <Ivl:0 V00> LCL_VAR BB09 regmask=[allIntButFP] minReg=1 wt=2350.00>
<RefPosition #618 @432 RefTypeDef <Ivl:105> IND BB09 regmask=[allIntButFP] minReg=1 wt=3200.00>
<RefPosition #619 @433 RefTypeUse <Ivl:105>  BB09 regmask=[allIntButFP] minReg=1 last wt=800.00>
<RefPosition #620 @434 RefTypeDef <Ivl:17 V29> STORE_LCL_VAR BB09 regmask=[allIntButFP] minReg=1 wt=2400.00>
<RefPosition #621 @439 RefTypeUse <Ivl:17 V29> LCL_VAR BB09 regmask=[allIntButFP] minReg=1 wt=2400.00>
<RefPosition #622 @440 RefTypeDef <Ivl:106> IND BB09 regmask=[allIntButFP] minReg=1 wt=3200.00>
<RefPosition #623 @447 RefTypeUse <Ivl:106>  BB09 regmask=[allIntButFP] minReg=1 last wt=800.00>
<RefPosition #624 @447 RefTypeUse <Ivl:17 V29> LCL_VAR BB09 regmask=[allIntButFP] minReg=1 last wt=2400.00>
<RefPosition #625 @451 RefTypeBB  BB10 regmask=[] minReg=1 wt=800.00>
<RefPosition #626 @461 RefTypeBB  BB11 regmask=[] minReg=1 wt=400.00>
<RefPosition #627 @464 RefTypeDef <Ivl:107> LCL_VAR BB11 regmask=[rcx] minReg=1 wt=1600.00>
<RefPosition #628 @465 RefTypeFixedReg <Reg:rcx>  BB11 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #629 @465 RefTypeUse <Ivl:107>  BB11 regmask=[rcx] minReg=1 last fixed wt=400.00>
<RefPosition #630 @466 RefTypeFixedReg <Reg:rcx>  BB11 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #631 @466 RefTypeDef <Ivl:108> PUTARG_REG BB11 regmask=[rcx] minReg=1 fixed wt=1600.00>
<RefPosition #632 @467 RefTypeFixedReg <Reg:rcx>  BB11 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #633 @467 RefTypeUse <Ivl:108>  BB11 regmask=[rcx] minReg=1 last fixed wt=400.00>
<RefPosition #634 @468 RefTypeKill <Reg:rax>  BB11 regmask=[rax] minReg=1 last wt=400.00>
<RefPosition #635 @468 RefTypeKill <Reg:rcx>  BB11 regmask=[rcx] minReg=1 last wt=400.00>
<RefPosition #636 @468 RefTypeKill <Reg:rdx>  BB11 regmask=[rdx] minReg=1 last wt=400.00>
<RefPosition #637 @468 RefTypeKill <Reg:r8 >  BB11 regmask=[r8] minReg=1 last wt=400.00>
<RefPosition #638 @468 RefTypeKill <Reg:r9 >  BB11 regmask=[r9] minReg=1 last wt=400.00>
<RefPosition #639 @468 RefTypeKill <Reg:r10>  BB11 regmask=[r10] minReg=1 last wt=400.00>
<RefPosition #640 @468 RefTypeKill <Reg:r11>  BB11 regmask=[r11] minReg=1 last wt=400.00>
<RefPosition #641 @469 RefTypeBB  BB12 regmask=[] minReg=1 wt=800.00>
<RefPosition #642 @474 RefTypeDef <Ivl:109> CNS_INT BB12 regmask=[rcx] minReg=1 wt=3200.00>
<RefPosition #643 @475 RefTypeFixedReg <Reg:rcx>  BB12 regmask=[rcx] minReg=1 wt=800.00>
<RefPosition #644 @475 RefTypeUse <Ivl:109>  BB12 regmask=[rcx] minReg=1 last fixed wt=800.00>
<RefPosition #645 @476 RefTypeFixedReg <Reg:rcx>  BB12 regmask=[rcx] minReg=1 wt=800.00>
<RefPosition #646 @476 RefTypeDef <Ivl:110> PUTARG_REG BB12 regmask=[rcx] minReg=1 fixed wt=3200.00>
<RefPosition #647 @477 RefTypeFixedReg <Reg:rcx>  BB12 regmask=[rcx] minReg=1 wt=800.00>
<RefPosition #648 @477 RefTypeUse <Ivl:110>  BB12 regmask=[rcx] minReg=1 last fixed wt=800.00>
<RefPosition #649 @478 RefTypeKill <Reg:rax>  BB12 regmask=[rax] minReg=1 last wt=800.00>
<RefPosition #650 @478 RefTypeKill <Reg:rcx>  BB12 regmask=[rcx] minReg=1 last wt=800.00>
<RefPosition #651 @478 RefTypeKill <Reg:rdx>  BB12 regmask=[rdx] minReg=1 last wt=800.00>
<RefPosition #652 @478 RefTypeKill <Reg:r8 >  BB12 regmask=[r8] minReg=1 last wt=800.00>
<RefPosition #653 @478 RefTypeKill <Reg:r9 >  BB12 regmask=[r9] minReg=1 last wt=800.00>
<RefPosition #654 @478 RefTypeKill <Reg:r10>  BB12 regmask=[r10] minReg=1 last wt=800.00>
<RefPosition #655 @478 RefTypeKill <Reg:r11>  BB12 regmask=[r11] minReg=1 last wt=800.00>
<RefPosition #656 @479 RefTypeBB  BB13 regmask=[] minReg=1 wt=100.00>
<RefPosition #657 @481 RefTypeBB  BB30 regmask=[] minReg=1 wt=100.00>
<RefPosition #658 @493 RefTypeBB  BB31 regmask=[] minReg=1 wt=100.00>
<RefPosition #659 @498 RefTypeDef <Ivl:111> LCL_VAR BB31 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #660 @499 RefTypeFixedReg <Reg:rcx>  BB31 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #661 @499 RefTypeUse <Ivl:111>  BB31 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #662 @500 RefTypeFixedReg <Reg:rcx>  BB31 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #663 @500 RefTypeDef <Ivl:112> PUTARG_REG BB31 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #664 @501 RefTypeFixedReg <Reg:rcx>  BB31 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #665 @501 RefTypeUse <Ivl:112>  BB31 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #666 @502 RefTypeKill <Reg:rax>  BB31 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #667 @502 RefTypeKill <Reg:rcx>  BB31 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #668 @502 RefTypeKill <Reg:rdx>  BB31 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #669 @502 RefTypeKill <Reg:r8 >  BB31 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #670 @502 RefTypeKill <Reg:r9 >  BB31 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #671 @502 RefTypeKill <Reg:r10>  BB31 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #672 @502 RefTypeKill <Reg:r11>  BB31 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #673 @503 RefTypeBB  BB32 regmask=[] minReg=1 wt=100.00>
<RefPosition #674 @509 RefTypeBB  BB14 regmask=[] minReg=1 wt=100.00>
<RefPosition #675 @511 RefTypeBB  BB15 regmask=[] minReg=1 wt=100.00>
<RefPosition #676 @516 RefTypeKill <Reg:rax>  BB15 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #677 @516 RefTypeKill <Reg:rcx>  BB15 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #678 @516 RefTypeKill <Reg:rdx>  BB15 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #679 @516 RefTypeKill <Reg:r8 >  BB15 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #680 @516 RefTypeKill <Reg:r9 >  BB15 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #681 @516 RefTypeKill <Reg:r10>  BB15 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #682 @516 RefTypeKill <Reg:r11>  BB15 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #683 @516 RefTypeFixedReg <Reg:rax>  BB15 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #684 @516 RefTypeDef <Ivl:113> CALL BB15 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #685 @517 RefTypeUse <Ivl:113>  BB15 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #686 @522 RefTypeDef <Ivl:114> LCL_VAR_ADDR BB15 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #687 @523 RefTypeFixedReg <Reg:rcx>  BB15 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #688 @523 RefTypeUse <Ivl:114>  BB15 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #689 @524 RefTypeFixedReg <Reg:rcx>  BB15 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #690 @524 RefTypeDef <Ivl:115> PUTARG_REG BB15 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #691 @525 RefTypeFixedReg <Reg:rcx>  BB15 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #692 @525 RefTypeUse <Ivl:115>  BB15 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #693 @526 RefTypeKill <Reg:rax>  BB15 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #694 @526 RefTypeKill <Reg:rcx>  BB15 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #695 @526 RefTypeKill <Reg:rdx>  BB15 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #696 @526 RefTypeKill <Reg:r8 >  BB15 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #697 @526 RefTypeKill <Reg:r9 >  BB15 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #698 @526 RefTypeKill <Reg:r10>  BB15 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #699 @526 RefTypeKill <Reg:r11>  BB15 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #700 @526 RefTypeFixedReg <Reg:rax>  BB15 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #701 @526 RefTypeDef <Ivl:116> CALL BB15 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #702 @527 RefTypeUse <Ivl:116>  BB15 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #703 @528 RefTypeDef <Ivl:14 V24> STORE_LCL_VAR BB15 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #704 @531 RefTypeFixedReg <Reg:rcx>  BB15 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #705 @531 RefTypeUse <Ivl:14 V24> LCL_VAR BB15 regmask=[rcx] minReg=1 last fixed wt=400.00>
<RefPosition #706 @532 RefTypeFixedReg <Reg:rcx>  BB15 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #707 @532 RefTypeDef <Ivl:117> PUTARG_REG BB15 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #708 @534 RefTypeDef <Ivl:118> CNS_INT BB15 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #709 @535 RefTypeUse <Ivl:118>  BB15 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #710 @536 RefTypeDef <Ivl:119> IND BB15 regmask=[rdx] minReg=1 wt=400.00>
<RefPosition #711 @537 RefTypeFixedReg <Reg:rdx>  BB15 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #712 @537 RefTypeUse <Ivl:119>  BB15 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #713 @538 RefTypeFixedReg <Reg:rdx>  BB15 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #714 @538 RefTypeDef <Ivl:120> PUTARG_REG BB15 regmask=[rdx] minReg=1 fixed wt=400.00>
<RefPosition #715 @539 RefTypeFixedReg <Reg:rcx>  BB15 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #716 @539 RefTypeUse <Ivl:117>  BB15 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #717 @539 RefTypeFixedReg <Reg:rdx>  BB15 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #718 @539 RefTypeUse <Ivl:120>  BB15 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #719 @540 RefTypeKill <Reg:rax>  BB15 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #720 @540 RefTypeKill <Reg:rcx>  BB15 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #721 @540 RefTypeKill <Reg:rdx>  BB15 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #722 @540 RefTypeKill <Reg:r8 >  BB15 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #723 @540 RefTypeKill <Reg:r9 >  BB15 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #724 @540 RefTypeKill <Reg:r10>  BB15 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #725 @540 RefTypeKill <Reg:r11>  BB15 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #726 @540 RefTypeFixedReg <Reg:rax>  BB15 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #727 @540 RefTypeDef <Ivl:121> CALL BB15 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #728 @541 RefTypeFixedReg <Reg:rcx>  BB15 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #729 @541 RefTypeUse <Ivl:121>  BB15 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #730 @542 RefTypeFixedReg <Reg:rcx>  BB15 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #731 @542 RefTypeDef <Ivl:122> PUTARG_REG BB15 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #732 @543 RefTypeFixedReg <Reg:rcx>  BB15 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #733 @543 RefTypeUse <Ivl:122>  BB15 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #734 @544 RefTypeKill <Reg:rax>  BB15 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #735 @544 RefTypeKill <Reg:rcx>  BB15 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #736 @544 RefTypeKill <Reg:rdx>  BB15 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #737 @544 RefTypeKill <Reg:r8 >  BB15 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #738 @544 RefTypeKill <Reg:r9 >  BB15 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #739 @544 RefTypeKill <Reg:r10>  BB15 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #740 @544 RefTypeKill <Reg:r11>  BB15 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #741 @548 RefTypeDef <Ivl:123> CNS_INT BB15 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #742 @549 RefTypeUse <Ivl:123>  BB15 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #743 @550 RefTypeDef <Ivl:124> IND BB15 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #744 @551 RefTypeFixedReg <Reg:rcx>  BB15 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #745 @551 RefTypeUse <Ivl:124>  BB15 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #746 @552 RefTypeFixedReg <Reg:rcx>  BB15 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #747 @552 RefTypeDef <Ivl:125> PUTARG_REG BB15 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #748 @553 RefTypeFixedReg <Reg:rcx>  BB15 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #749 @553 RefTypeUse <Ivl:125>  BB15 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #750 @554 RefTypeKill <Reg:rax>  BB15 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #751 @554 RefTypeKill <Reg:rcx>  BB15 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #752 @554 RefTypeKill <Reg:rdx>  BB15 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #753 @554 RefTypeKill <Reg:r8 >  BB15 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #754 @554 RefTypeKill <Reg:r9 >  BB15 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #755 @554 RefTypeKill <Reg:r10>  BB15 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #756 @554 RefTypeKill <Reg:r11>  BB15 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #757 @558 RefTypeDef <Ivl:126> CNS_INT BB15 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #758 @559 RefTypeUse <Ivl:126>  BB15 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #759 @560 RefTypeDef <Ivl:127> IND BB15 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #760 @561 RefTypeFixedReg <Reg:rcx>  BB15 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #761 @561 RefTypeUse <Ivl:127>  BB15 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #762 @562 RefTypeFixedReg <Reg:rcx>  BB15 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #763 @562 RefTypeDef <Ivl:128> PUTARG_REG BB15 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #764 @563 RefTypeFixedReg <Reg:rcx>  BB15 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #765 @563 RefTypeUse <Ivl:128>  BB15 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #766 @564 RefTypeKill <Reg:rax>  BB15 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #767 @564 RefTypeKill <Reg:rcx>  BB15 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #768 @564 RefTypeKill <Reg:rdx>  BB15 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #769 @564 RefTypeKill <Reg:r8 >  BB15 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #770 @564 RefTypeKill <Reg:r9 >  BB15 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #771 @564 RefTypeKill <Reg:r10>  BB15 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #772 @564 RefTypeKill <Reg:r11>  BB15 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #773 @568 RefTypeDef <Ivl:129> CNS_INT BB15 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #774 @569 RefTypeUse <Ivl:129>  BB15 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #775 @570 RefTypeDef <Ivl:130> IND BB15 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #776 @571 RefTypeFixedReg <Reg:rcx>  BB15 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #777 @571 RefTypeUse <Ivl:130>  BB15 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #778 @572 RefTypeFixedReg <Reg:rcx>  BB15 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #779 @572 RefTypeDef <Ivl:131> PUTARG_REG BB15 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #780 @573 RefTypeFixedReg <Reg:rcx>  BB15 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #781 @573 RefTypeUse <Ivl:131>  BB15 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #782 @574 RefTypeKill <Reg:rax>  BB15 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #783 @574 RefTypeKill <Reg:rcx>  BB15 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #784 @574 RefTypeKill <Reg:rdx>  BB15 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #785 @574 RefTypeKill <Reg:r8 >  BB15 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #786 @574 RefTypeKill <Reg:r9 >  BB15 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #787 @574 RefTypeKill <Reg:r10>  BB15 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #788 @574 RefTypeKill <Reg:r11>  BB15 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #789 @578 RefTypeDef <Ivl:132> CNS_INT BB15 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #790 @579 RefTypeUse <Ivl:132>  BB15 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #791 @580 RefTypeDef <Ivl:133> IND BB15 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #792 @581 RefTypeFixedReg <Reg:rcx>  BB15 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #793 @581 RefTypeUse <Ivl:133>  BB15 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #794 @582 RefTypeFixedReg <Reg:rcx>  BB15 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #795 @582 RefTypeDef <Ivl:134> PUTARG_REG BB15 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #796 @583 RefTypeFixedReg <Reg:rcx>  BB15 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #797 @583 RefTypeUse <Ivl:134>  BB15 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #798 @584 RefTypeKill <Reg:rax>  BB15 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #799 @584 RefTypeKill <Reg:rcx>  BB15 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #800 @584 RefTypeKill <Reg:rdx>  BB15 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #801 @584 RefTypeKill <Reg:r8 >  BB15 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #802 @584 RefTypeKill <Reg:r9 >  BB15 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #803 @584 RefTypeKill <Reg:r10>  BB15 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #804 @584 RefTypeKill <Reg:r11>  BB15 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #805 @585 RefTypeBB  BB19 regmask=[] minReg=1 wt=800.00>
<RefPosition #806 @588 RefTypeDef <Ivl:135> LCL_VAR_ADDR BB19 regmask=[rcx] minReg=1 wt=3200.00>
<RefPosition #807 @589 RefTypeFixedReg <Reg:rcx>  BB19 regmask=[rcx] minReg=1 wt=800.00>
<RefPosition #808 @589 RefTypeUse <Ivl:135>  BB19 regmask=[rcx] minReg=1 last fixed wt=800.00>
<RefPosition #809 @590 RefTypeFixedReg <Reg:rcx>  BB19 regmask=[rcx] minReg=1 wt=800.00>
<RefPosition #810 @590 RefTypeDef <Ivl:136> PUTARG_REG BB19 regmask=[rcx] minReg=1 fixed wt=3200.00>
<RefPosition #811 @592 RefTypeDef <Ivl:137> CNS_INT BB19 regmask=[rdx] minReg=1 wt=3200.00>
<RefPosition #812 @593 RefTypeFixedReg <Reg:rdx>  BB19 regmask=[rdx] minReg=1 wt=800.00>
<RefPosition #813 @593 RefTypeUse <Ivl:137>  BB19 regmask=[rdx] minReg=1 last fixed wt=800.00>
<RefPosition #814 @594 RefTypeFixedReg <Reg:rdx>  BB19 regmask=[rdx] minReg=1 wt=800.00>
<RefPosition #815 @594 RefTypeDef <Ivl:138> PUTARG_REG BB19 regmask=[rdx] minReg=1 fixed wt=3200.00>
<RefPosition #816 @595 RefTypeFixedReg <Reg:rcx>  BB19 regmask=[rcx] minReg=1 wt=800.00>
<RefPosition #817 @595 RefTypeUse <Ivl:136>  BB19 regmask=[rcx] minReg=1 last fixed wt=800.00>
<RefPosition #818 @595 RefTypeFixedReg <Reg:rdx>  BB19 regmask=[rdx] minReg=1 wt=800.00>
<RefPosition #819 @595 RefTypeUse <Ivl:138>  BB19 regmask=[rdx] minReg=1 last fixed wt=800.00>
<RefPosition #820 @596 RefTypeKill <Reg:rax>  BB19 regmask=[rax] minReg=1 last wt=800.00>
<RefPosition #821 @596 RefTypeKill <Reg:rcx>  BB19 regmask=[rcx] minReg=1 last wt=800.00>
<RefPosition #822 @596 RefTypeKill <Reg:rdx>  BB19 regmask=[rdx] minReg=1 last wt=800.00>
<RefPosition #823 @596 RefTypeKill <Reg:r8 >  BB19 regmask=[r8] minReg=1 last wt=800.00>
<RefPosition #824 @596 RefTypeKill <Reg:r9 >  BB19 regmask=[r9] minReg=1 last wt=800.00>
<RefPosition #825 @596 RefTypeKill <Reg:r10>  BB19 regmask=[r10] minReg=1 last wt=800.00>
<RefPosition #826 @596 RefTypeKill <Reg:r11>  BB19 regmask=[r11] minReg=1 last wt=800.00>
<RefPosition #827 @605 RefTypeBB  BB20 regmask=[] minReg=1 wt=800.00>
<RefPosition #828 @610 RefTypeKill <Reg:rax>  BB20 regmask=[rax] minReg=1 last wt=800.00>
<RefPosition #829 @610 RefTypeKill <Reg:rcx>  BB20 regmask=[rcx] minReg=1 last wt=800.00>
<RefPosition #830 @610 RefTypeKill <Reg:rdx>  BB20 regmask=[rdx] minReg=1 last wt=800.00>
<RefPosition #831 @610 RefTypeKill <Reg:r8 >  BB20 regmask=[r8] minReg=1 last wt=800.00>
<RefPosition #832 @610 RefTypeKill <Reg:r9 >  BB20 regmask=[r9] minReg=1 last wt=800.00>
<RefPosition #833 @610 RefTypeKill <Reg:r10>  BB20 regmask=[r10] minReg=1 last wt=800.00>
<RefPosition #834 @610 RefTypeKill <Reg:r11>  BB20 regmask=[r11] minReg=1 last wt=800.00>
<RefPosition #835 @610 RefTypeFixedReg <Reg:rax>  BB20 regmask=[rax] minReg=1 wt=800.00>
<RefPosition #836 @610 RefTypeDef <Ivl:139> CALL BB20 regmask=[rax] minReg=1 fixed wt=3200.00>
<RefPosition #837 @611 RefTypeFixedReg <Reg:rcx>  BB20 regmask=[rcx] minReg=1 wt=800.00>
<RefPosition #838 @611 RefTypeUse <Ivl:139>  BB20 regmask=[rcx] minReg=1 last fixed wt=800.00>
<RefPosition #839 @612 RefTypeFixedReg <Reg:rcx>  BB20 regmask=[rcx] minReg=1 wt=800.00>
<RefPosition #840 @612 RefTypeDef <Ivl:140> PUTARG_REG BB20 regmask=[rcx] minReg=1 fixed wt=3200.00>
<RefPosition #841 @613 RefTypeFixedReg <Reg:rcx>  BB20 regmask=[rcx] minReg=1 wt=800.00>
<RefPosition #842 @613 RefTypeUse <Ivl:140>  BB20 regmask=[rcx] minReg=1 last fixed wt=800.00>
<RefPosition #843 @614 RefTypeKill <Reg:rax>  BB20 regmask=[rax] minReg=1 last wt=800.00>
<RefPosition #844 @614 RefTypeKill <Reg:rcx>  BB20 regmask=[rcx] minReg=1 last wt=800.00>
<RefPosition #845 @614 RefTypeKill <Reg:rdx>  BB20 regmask=[rdx] minReg=1 last wt=800.00>
<RefPosition #846 @614 RefTypeKill <Reg:r8 >  BB20 regmask=[r8] minReg=1 last wt=800.00>
<RefPosition #847 @614 RefTypeKill <Reg:r9 >  BB20 regmask=[r9] minReg=1 last wt=800.00>
<RefPosition #848 @614 RefTypeKill <Reg:r10>  BB20 regmask=[r10] minReg=1 last wt=800.00>
<RefPosition #849 @614 RefTypeKill <Reg:r11>  BB20 regmask=[r11] minReg=1 last wt=800.00>
<RefPosition #850 @615 RefTypeBB  BB21 regmask=[] minReg=1 wt=100.00>
<RefPosition #851 @625 RefTypeBB  BB22 regmask=[] minReg=1 wt=100.00>
<RefPosition #852 @630 RefTypeKill <Reg:rax>  BB22 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #853 @630 RefTypeKill <Reg:rcx>  BB22 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #854 @630 RefTypeKill <Reg:rdx>  BB22 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #855 @630 RefTypeKill <Reg:r8 >  BB22 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #856 @630 RefTypeKill <Reg:r9 >  BB22 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #857 @630 RefTypeKill <Reg:r10>  BB22 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #858 @630 RefTypeKill <Reg:r11>  BB22 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #859 @631 RefTypeBB  BB23 regmask=[] minReg=1 wt=100.00>
<RefPosition #860 @641 RefTypeBB  BB24 regmask=[] minReg=1 wt=100.00>
<RefPosition #861 @651 RefTypeUse <Ivl:0 V00> LCL_VAR BB24 regmask=[allIntButFP] minReg=1 wt=2350.00>
<RefPosition #862 @653 RefTypeBB  BB25 regmask=[] minReg=1 wt=100.00>
<RefPosition #863 @663 RefTypeBB  BB26 regmask=[] minReg=1 wt=100.00>
<RefPosition #864 @673 RefTypeUse <Ivl:0 V00> LCL_VAR BB26 regmask=[allIntButFP] minReg=1 last wt=2350.00>
<RefPosition #865 @679 RefTypeBB  BB27 regmask=[] minReg=1 wt=0.00>
<RefPosition #866 @691 RefTypeBB  BB28 regmask=[] minReg=1 wt=0.00>
<RefPosition #867 @696 RefTypeDef <Ivl:141> LCL_VAR BB28 regmask=[rcx] minReg=1 wt=0.00>
<RefPosition #868 @697 RefTypeFixedReg <Reg:rcx>  BB28 regmask=[rcx] minReg=1 wt=0.00>
<RefPosition #869 @697 RefTypeUse <Ivl:141>  BB28 regmask=[rcx] minReg=1 last fixed wt=0.00>
<RefPosition #870 @698 RefTypeFixedReg <Reg:rcx>  BB28 regmask=[rcx] minReg=1 wt=0.00>
<RefPosition #871 @698 RefTypeDef <Ivl:142> PUTARG_REG BB28 regmask=[rcx] minReg=1 fixed wt=0.00>
<RefPosition #872 @699 RefTypeFixedReg <Reg:rcx>  BB28 regmask=[rcx] minReg=1 wt=0.00>
<RefPosition #873 @699 RefTypeUse <Ivl:142>  BB28 regmask=[rcx] minReg=1 last fixed wt=0.00>
<RefPosition #874 @700 RefTypeKill <Reg:rax>  BB28 regmask=[rax] minReg=1 last wt=0.00>
<RefPosition #875 @700 RefTypeKill <Reg:rcx>  BB28 regmask=[rcx] minReg=1 last wt=0.00>
<RefPosition #876 @700 RefTypeKill <Reg:rdx>  BB28 regmask=[rdx] minReg=1 last wt=0.00>
<RefPosition #877 @700 RefTypeKill <Reg:r8 >  BB28 regmask=[r8] minReg=1 last wt=0.00>
<RefPosition #878 @700 RefTypeKill <Reg:r9 >  BB28 regmask=[r9] minReg=1 last wt=0.00>
<RefPosition #879 @700 RefTypeKill <Reg:r10>  BB28 regmask=[r10] minReg=1 last wt=0.00>
<RefPosition #880 @700 RefTypeKill <Reg:r11>  BB28 regmask=[r11] minReg=1 last wt=0.00>
<RefPosition #881 @701 RefTypeBB  BB29 regmask=[] minReg=1 wt=0.00>
-----------------
<RefPosition #0   @0   RefTypeParamDef <Ivl:0 V00>  BB00 regmask=[rcx] minReg=1 fixed regOptional wt=100.00>
<RefPosition #98  @55  RefTypeUse <Ivl:0 V00> LCL_VAR BB01 regmask=[allIntButFP] minReg=1 wt=2350.00>
<RefPosition #135 @75  RefTypeUse <Ivl:0 V00> LCL_VAR BB01 regmask=[allIntButFP] minReg=1 wt=2350.00>
<RefPosition #196 @115 RefTypeUse <Ivl:0 V00> LCL_VAR BB01 regmask=[rdx] minReg=1 fixed wt=2350.00>
<RefPosition #336 @197 RefTypeUse <Ivl:0 V00> LCL_VAR BB02 regmask=[allIntButFP] minReg=1 wt=2350.00>
<RefPosition #381 @235 RefTypeUse <Ivl:0 V00> LCL_VAR BB03 regmask=[allIntButFP] minReg=1 wt=2350.00>
<RefPosition #419 @265 RefTypeUse <Ivl:0 V00> LCL_VAR BB03 regmask=[allIntButFP] minReg=1 wt=2350.00>
<RefPosition #590 @401 RefTypeUse <Ivl:0 V00> LCL_VAR BB08 regmask=[allIntButFP] minReg=1 wt=2350.00>
<RefPosition #617 @431 RefTypeUse <Ivl:0 V00> LCL_VAR BB09 regmask=[allIntButFP] minReg=1 wt=2350.00>
<RefPosition #861 @651 RefTypeUse <Ivl:0 V00> LCL_VAR BB24 regmask=[allIntButFP] minReg=1 wt=2350.00>
<RefPosition #864 @673 RefTypeUse <Ivl:0 V00> LCL_VAR BB26 regmask=[allIntButFP] minReg=1 last wt=2350.00>
-----------------
<RefPosition #380 @230 RefTypeDef <Ivl:7 V13> STORE_LCL_VAR BB03 regmask=[allIntButFP] minReg=1 wt=4800.00>
<RefPosition #388 @245 RefTypeUse <Ivl:7 V13> LCL_VAR BB03 regmask=[rcx] minReg=1 fixed wt=4800.00>
<RefPosition #405 @257 RefTypeUse <Ivl:7 V13> LCL_VAR BB03 regmask=[rdx] minReg=1 last fixed wt=4800.00>
-----------------
<RefPosition #465 @298 RefTypeDef <Ivl:9 V15> STORE_LCL_VAR BB03 regmask=[allIntButFP] minReg=1 wt=4800.00>
<RefPosition #469 @305 RefTypeUse <Ivl:9 V15> LCL_VAR BB03 regmask=[rcx] minReg=1 fixed wt=4800.00>
<RefPosition #486 @317 RefTypeUse <Ivl:9 V15> LCL_VAR BB03 regmask=[rdx] minReg=1 last fixed wt=4800.00>
-----------------
<RefPosition #386 @242 RefTypeDef <Ivl:8 V14> STORE_LCL_VAR BB03 regmask=[allIntButFP] minReg=1 wt=3200.00>
<RefPosition #400 @253 RefTypeUse <Ivl:8 V14> LCL_VAR BB03 regmask=[allIntButFP] minReg=1 last wt=3200.00>
-----------------
<RefPosition #467 @302 RefTypeDef <Ivl:10 V16> STORE_LCL_VAR BB03 regmask=[allIntButFP] minReg=1 wt=3200.00>
<RefPosition #481 @313 RefTypeUse <Ivl:10 V16> LCL_VAR BB03 regmask=[allIntButFP] minReg=1 last wt=3200.00>
-----------------
<RefPosition #334 @188 RefTypeDef <Ivl:1 V03> STORE_LCL_VAR BB01 regmask=[allIntButFP] minReg=1 wt=2500.00>
<RefPosition #517 @345 RefTypeUse <Ivl:1 V03> LCL_VAR BB06 regmask=[allIntButFP] minReg=1 last wt=2500.00>
<RefPosition #520 @348 RefTypeDef <Ivl:1 V03> STORE_LCL_VAR BB06 regmask=[allIntButFP] minReg=1 wt=2500.00>
<RefPosition #521 @355 RefTypeUse <Ivl:1 V03> LCL_VAR BB06 regmask=[allIntButFP] minReg=1 regOptional wt=2500.00>
<RefPosition #522 @359 RefTypeExpUse <Ivl:1 V03>  BB06 regmask=[allIntButFP] minReg=1 regOptional wt=800.00>
-----------------
<RefPosition #430 @284 RefTypeDef <Ivl:15 V27> STORE_LCL_VAR BB03 regmask=[allIntButFP] minReg=1 wt=2400.00>
<RefPosition #434 @287 RefTypeUse <Ivl:15 V27> LCL_VAR BB03 regmask=[rdx] minReg=1 fixed wt=2400.00>
<RefPosition #466 @301 RefTypeUse <Ivl:15 V27> LCL_VAR BB03 regmask=[allIntButFP] minReg=1 last wt=2400.00>
-----------------
<RefPosition #422 @268 RefTypeDef <Ivl:16 V28> STORE_LCL_VAR BB03 regmask=[allIntButFP] minReg=1 wt=2400.00>
<RefPosition #423 @271 RefTypeUse <Ivl:16 V28> LCL_VAR BB03 regmask=[allIntButFP] minReg=1 wt=2400.00>
<RefPosition #425 @277 RefTypeUse <Ivl:16 V28> LCL_VAR BB03 regmask=[allIntButFP] minReg=1 last wt=2400.00>
-----------------
<RefPosition #620 @434 RefTypeDef <Ivl:17 V29> STORE_LCL_VAR BB09 regmask=[allIntButFP] minReg=1 wt=2400.00>
<RefPosition #621 @439 RefTypeUse <Ivl:17 V29> LCL_VAR BB09 regmask=[allIntButFP] minReg=1 wt=2400.00>
<RefPosition #624 @447 RefTypeUse <Ivl:17 V29> LCL_VAR BB09 regmask=[allIntButFP] minReg=1 last wt=2400.00>
-----------------
<RefPosition #84  @44  RefTypeDef <Ivl:2 V08> STORE_LCL_VAR BB01 regmask=[allIntButFP] minReg=1 wt=600.00>
<RefPosition #86  @47  RefTypeUse <Ivl:2 V08> LCL_VAR BB01 regmask=[rcx] minReg=1 fixed wt=600.00>
<RefPosition #103 @59  RefTypeUse <Ivl:2 V08> LCL_VAR BB01 regmask=[rdx] minReg=1 last fixed wt=600.00>
-----------------
<RefPosition #134 @70  RefTypeDef <Ivl:3 V09> STORE_LCL_VAR BB01 regmask=[allIntButFP] minReg=1 wt=600.00>
<RefPosition #142 @85  RefTypeUse <Ivl:3 V09> LCL_VAR BB01 regmask=[rcx] minReg=1 fixed wt=600.00>
<RefPosition #159 @97  RefTypeUse <Ivl:3 V09> LCL_VAR BB01 regmask=[rdx] minReg=1 last fixed wt=600.00>
-----------------
<RefPosition #190 @108 RefTypeDef <Ivl:5 V11> STORE_LCL_VAR BB01 regmask=[allIntButFP] minReg=1 wt=600.00>
<RefPosition #192 @111 RefTypeUse <Ivl:5 V11> LCL_VAR BB01 regmask=[rcx] minReg=1 fixed wt=600.00>
<RefPosition #240 @139 RefTypeUse <Ivl:5 V11> LCL_VAR BB01 regmask=[rdx] minReg=1 last fixed wt=600.00>
-----------------
<RefPosition #234 @132 RefTypeDef <Ivl:6 V12> STORE_LCL_VAR BB01 regmask=[allIntButFP] minReg=1 wt=600.00>
<RefPosition #236 @135 RefTypeUse <Ivl:6 V12> LCL_VAR BB01 regmask=[rcx] minReg=1 fixed wt=600.00>
<RefPosition #255 @147 RefTypeUse <Ivl:6 V12> LCL_VAR BB01 regmask=[rcx] minReg=1 last fixed wt=600.00>
-----------------
<RefPosition #140 @82  RefTypeDef <Ivl:4 V10> STORE_LCL_VAR BB01 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #154 @93  RefTypeUse <Ivl:4 V10> LCL_VAR BB01 regmask=[allIntButFP] minReg=1 last wt=400.00>
-----------------
<RefPosition #29  @18  RefTypeDef <Ivl:11 V21> STORE_LCL_VAR BB01 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #31  @21  RefTypeUse <Ivl:11 V21> LCL_VAR BB01 regmask=[rcx] minReg=1 last fixed wt=400.00>
-----------------
<RefPosition #294 @166 RefTypeDef <Ivl:12 V22> STORE_LCL_VAR BB01 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #296 @169 RefTypeUse <Ivl:12 V22> LCL_VAR BB01 regmask=[rcx] minReg=1 last fixed wt=400.00>
-----------------
<RefPosition #551 @376 RefTypeDef <Ivl:13 V23> STORE_LCL_VAR BB07 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #553 @379 RefTypeUse <Ivl:13 V23> LCL_VAR BB07 regmask=[rcx] minReg=1 last fixed wt=400.00>
-----------------
<RefPosition #703 @528 RefTypeDef <Ivl:14 V24> STORE_LCL_VAR BB15 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #705 @531 RefTypeUse <Ivl:14 V24> LCL_VAR BB15 regmask=[rcx] minReg=1 last fixed wt=400.00>
TUPLE STYLE DUMP WITH REF POSITIONS
Incoming Parameters:  V00
BB01 [000..072), preds={} succs={BB02}
=====
  N003.                    IL_OFFSET IL offset: 0x0
  N005.                    CALL     
        Kill: rax rcx rdx r8 r9 r10 r11 
        Def:<I18>(#10) rax
  N007.                    V02 MEM
                               Use:<I18>(#11) *
  N009.                    IL_OFFSET IL offset: 0x6
  N011.                    LCL_VAR_ADDR V02 loc0          NA
                                                      long   V02._dateData (offs=0x00) -> V17 tmp10        
        Def:<I19>(#12)
  N013.                    PUTARG_REG
                               Use:<I19>(#14) Fixed:rcx(#13) *
        Def:<I20>(#16) rcx
  N015.                    CALL     
                               Use:<I20>(#18) Fixed:rcx(#17) *
        Kill: rax rcx rdx r8 r9 r10 r11 
        Def:<I21>(#27) rax Pref:<V21/L11>
  N017.                    V21(L11)
                               Use:<I21>(#28) *
        Def:<V21/L11>(#29)
  N019.                    V21(L11)
  N021.                    PUTARG_REG
                               Use:<V21/L11>(#31) Fixed:rcx(#30) *
        Def:<I22>(#33) rcx
  N023.                    CNS_INT(h) 0x750031F0 "	 Created list"
        Def:<I23>(#34)
  N025.                    IND      
                               Use:<I23>(#35) *
        Def:<I24>(#36)
  N027.                    PUTARG_REG
                               Use:<I24>(#38) Fixed:rdx(#37) *
        Def:<I25>(#40) rdx
  N029.                    CALL     
                               Use:<I22>(#42) Fixed:rcx(#41) *
                               Use:<I25>(#44) Fixed:rdx(#43) *
        Kill: rax rcx rdx r8 r9 r10 r11 
        Def:<I26>(#53) rax
  N031.                    PUTARG_REG
                               Use:<I26>(#55) Fixed:rcx(#54) *
        Def:<I27>(#57) rcx
  N033.                    CALL     
                               Use:<I27>(#59) Fixed:rcx(#58) *
        Kill: rax rcx rdx r8 r9 r10 r11 
  N035.                    IL_OFFSET IL offset: 0x1c
  N037.                    CNS_INT(h) 0x7ffdb3ee2350 method
        Def:<I28>(#67)
  N039.                    PUTARG_REG
                               Use:<I28>(#69) Fixed:rcx(#68) *
        Def:<I29>(#71) rcx
  N041.                    CALL help
                               Use:<I29>(#73) Fixed:rcx(#72) *
        Kill: rax rcx rdx r8 r9 r10 r11 
        Def:<I30>(#82) rax Pref:<V08/L2>
  N043.                    V08(L2)
                               Use:<I30>(#83) *
        Def:<V08/L2>(#84)
  N045.                    V08(L2)
  N047.                    PUTARG_REG
                               Use:<V08/L2>(#86) Fixed:rcx(#85)
        Def:<I31>(#88) rcx Pref:<V08/L2>
  N049.                    CALL     
                               Use:<I31>(#90) Fixed:rcx(#89) *
        Kill: rax rcx rdx r8 r9 r10 r11 
  N051.                    IL_OFFSET IL offset: 0x22
  N053.                    V00(L0)
  N055.                    LEA(b+8) 
                               Use:<V00/L0>(#98)
        Def:<I32>(#99)
  N057.                    V08(L2)
  N059.                    STOREIND 
                               Use:<I32>(#101) Fixed:rcx(#100) *
                               Use:<V08/L2>(#103) Fixed:rdx(#102) *
        Kill: rax rcx rdx r8 r9 r10 r11 mm0 mm1 mm2 mm3 mm4 mm5 
  N061.                    IL_OFFSET IL offset: 0x27
  N063.                    CNS_INT(h) 0x7ffdb3b058b8 token
        Def:<I33>(#117)
  N065.                    PUTARG_REG
                               Use:<I33>(#119) Fixed:rcx(#118) *
        Def:<I34>(#121) rcx
  N067.                    CALL help
                               Use:<I34>(#123) Fixed:rcx(#122) *
        Kill: rax rcx rdx r8 r9 r10 r11 
        Def:<I35>(#132) rax Pref:<V09/L3>
  N069.                    V09(L3)
                               Use:<I35>(#133) *
        Def:<V09/L3>(#134)
  N071.                    V00(L0)
  N073.                    LEA(b+8) 
  N075.                    IND      
                               Use:<V00/L0>(#135)
        Def:<I36>(#136)
  N077.                    LEA(b+8) 
  N079.                    IND      
                               Use:<I36>(#137) *
        Def:<I37>(#138) Pref:<V10/L4>
  N081.                    V10(L4)
                               Use:<I37>(#139) *
        Def:<V10/L4>(#140)
  N083.                    V09(L3)
  N085.                    PUTARG_REG
                               Use:<V09/L3>(#142) Fixed:rcx(#141)
        Def:<I38>(#144) rcx Pref:<V09/L3>
  N087.                    CALL     
                               Use:<I38>(#146) Fixed:rcx(#145) *
        Kill: rax rcx rdx r8 r9 r10 r11 
  N089.                    IL_OFFSET IL offset: 0x37
  N091.                    V10(L4)
  N093.                    LEA(b+16)
                               Use:<V10/L4>(#154) *
        Def:<I39>(#155)
  N095.                    V09(L3)
  N097.                    STOREIND 
                               Use:<I39>(#157) Fixed:rcx(#156) *
                               Use:<V09/L3>(#159) Fixed:rdx(#158) *
        Kill: rax rcx rdx r8 r9 r10 r11 mm0 mm1 mm2 mm3 mm4 mm5 
  N099.                    IL_OFFSET IL offset: 0x3c
  N101.                    CNS_INT(h) 0x7ffdb3ee6200 token
        Def:<I40>(#173)
  N103.                    PUTARG_REG
                               Use:<I40>(#175) Fixed:rcx(#174) *
        Def:<I41>(#177) rcx
  N105.                    CALL help
                               Use:<I41>(#179) Fixed:rcx(#178) *
        Kill: rax rcx rdx r8 r9 r10 r11 
        Def:<I42>(#188) rax Pref:<V11/L5>
  N107.                    V11(L5)
                               Use:<I42>(#189) *
        Def:<V11/L5>(#190)
  N109.                    V11(L5)
  N111.                    PUTARG_REG
                               Use:<V11/L5>(#192) Fixed:rcx(#191)
        Def:<I43>(#194) rcx Pref:<V11/L5>
  N113.                    V00(L0)
  N115.                    PUTARG_REG
                               Use:<V00/L0>(#196) Fixed:rdx(#195)
        Def:<I44>(#198) rdx Pref:<V00/L0>
  N117.                    CNS_INT(h) 0x7ffdb3b213f8 ftn
        Def:<I45>(#199)
  N119.                    PUTARG_REG
                               Use:<I45>(#201) Fixed:r8(#200) *
        Def:<I46>(#203) r8
  N121.                    CALL     
                               Use:<I43>(#205) Fixed:rcx(#204) *
                               Use:<I44>(#207) Fixed:rdx(#206) *
                               Use:<I46>(#209) Fixed:r8(#208) *
        Kill: rax rcx rdx r8 r9 r10 r11 
  N123.                    IL_OFFSET IL offset: 0x48
  N125.                    CNS_INT(h) 0x7ffdb3c84e80 token
        Def:<I47>(#217)
  N127.                    PUTARG_REG
                               Use:<I47>(#219) Fixed:rcx(#218) *
        Def:<I48>(#221) rcx
  N129.                    CALL help
                               Use:<I48>(#223) Fixed:rcx(#222) *
        Kill: rax rcx rdx r8 r9 r10 r11 
        Def:<I49>(#232) rax Pref:<V12/L6>
  N131.                    V12(L6)
                               Use:<I49>(#233) *
        Def:<V12/L6>(#234)
  N133.                    V12(L6)
  N135.                    PUTARG_REG
                               Use:<V12/L6>(#236) Fixed:rcx(#235)
        Def:<I50>(#238) rcx Pref:<V12/L6>
  N137.                    V11(L5)
  N139.                    PUTARG_REG
                               Use:<V11/L5>(#240) Fixed:rdx(#239) *
        Def:<I51>(#242) rdx
  N141.                    CALL     
                               Use:<I50>(#244) Fixed:rcx(#243) *
                               Use:<I51>(#246) Fixed:rdx(#245) *
        Kill: rax rcx rdx r8 r9 r10 r11 
  N143.                    IL_OFFSET IL offset: 0x4d
  N145.                    V12(L6)
  N147.                    PUTARG_REG
                               Use:<V12/L6>(#255) Fixed:rcx(#254) *
        Def:<I52>(#257) rcx
  N149.                    CALL     
                               Use:<I52>(#259) Fixed:rcx(#258) *
        Kill: rax rcx rdx r8 r9 r10 r11 
  N151.                    IL_OFFSET IL offset: 0x52
  N153.                    CALL     
        Kill: rax rcx rdx r8 r9 r10 r11 
        Def:<I53>(#275) rax
  N155.                    V02 MEM
                               Use:<I53>(#276) *
  N157.                    IL_OFFSET IL offset: 0x58
  N159.                    LCL_VAR_ADDR V02 loc0          NA
                                                      long   V02._dateData (offs=0x00) -> V17 tmp10        
        Def:<I54>(#277)
  N161.                    PUTARG_REG
                               Use:<I54>(#279) Fixed:rcx(#278) *
        Def:<I55>(#281) rcx
  N163.                    CALL     
                               Use:<I55>(#283) Fixed:rcx(#282) *
        Kill: rax rcx rdx r8 r9 r10 r11 
        Def:<I56>(#292) rax Pref:<V22/L12>
  N165.                    V22(L12)
                               Use:<I56>(#293) *
        Def:<V22/L12>(#294)
  N167.                    V22(L12)
  N169.                    PUTARG_REG
                               Use:<V22/L12>(#296) Fixed:rcx(#295) *
        Def:<I57>(#298) rcx
  N171.                    CNS_INT(h) 0x750031F8 "	 Consumer thread started, adding items..."
        Def:<I58>(#299)
  N173.                    IND      
                               Use:<I58>(#300) *
        Def:<I59>(#301)
  N175.                    PUTARG_REG
                               Use:<I59>(#303) Fixed:rdx(#302) *
        Def:<I60>(#305) rdx
  N177.                    CALL     
                               Use:<I57>(#307) Fixed:rcx(#306) *
                               Use:<I60>(#309) Fixed:rdx(#308) *
        Kill: rax rcx rdx r8 r9 r10 r11 
        Def:<I61>(#318) rax
  N179.                    PUTARG_REG
                               Use:<I61>(#320) Fixed:rcx(#319) *
        Def:<I62>(#322) rcx
  N181.                    CALL     
                               Use:<I62>(#324) Fixed:rcx(#323) *
        Kill: rax rcx rdx r8 r9 r10 r11 
  N183.                    IL_OFFSET IL offset: 0x6e
  N185.                    CNS_INT   0
        Def:<I63>(#332) Pref:<V03/L1>
  N187.                    V03(L1)
                               Use:<I63>(#333) *
        Def:<V03/L1>(#334) Pref:<I88>

BB02 [072..07B), preds={BB01,BB06} succs={BB03}
=====
  N191.                    IL_OFFSET IL offset: 0x72
  N193.                    V00(L0)
  N195.                    LEA(b+8) 
  N197.                    IND      
                               Use:<V00/L0>(#336)
        Def:<I64>(#337)
  N199.                    V04 MEM
                               Use:<I64>(#338) *
  N201.                    IL_OFFSET IL offset: 0x79
  N203.                    CNS_INT   0
        Def:<I65>(#339)
  N205.                    V05 MEM
                               Use:<I65>(#340) *

BB03 [07B..0CA), preds={BB02} succs={BB04}
=====
  N209.                    IL_OFFSET IL offset: 0x7b
  N211.                    LCL_VAR_ADDR V05 loc3          NA
        Def:<I66>(#342)
  N213.                    PUTARG_REG
                               Use:<I66>(#344) Fixed:rdx(#343) *
        Def:<I67>(#346) rdx
  N215.                    V04 MEM
        Def:<I68>(#347)
  N217.                    PUTARG_REG
                               Use:<I68>(#349) Fixed:rcx(#348) *
        Def:<I69>(#351) rcx
  N219.                    CALL     
                               Use:<I67>(#353) Fixed:rdx(#352) *
                               Use:<I69>(#355) Fixed:rcx(#354) *
        Kill: rax rcx rdx r8 r9 r10 r11 
  N221.                    IL_OFFSET IL offset: 0x83
  N223.                    CNS_INT(h) 0x7ffdb3ee58a8 method
        Def:<I70>(#363)
  N225.                    PUTARG_REG
                               Use:<I70>(#365) Fixed:rcx(#364) *
        Def:<I71>(#367) rcx
  N227.                    CALL help
                               Use:<I71>(#369) Fixed:rcx(#368) *
        Kill: rax rcx rdx r8 r9 r10 r11 
        Def:<I72>(#378) rax Pref:<V13/L7>
  N229.                    V13(L7)
                               Use:<I72>(#379) *
        Def:<V13/L7>(#380)
  N231.                    V00(L0)
  N233.                    LEA(b+8) 
  N235.                    IND      
                               Use:<V00/L0>(#381)
        Def:<I73>(#382)
  N237.                    LEA(b+8) 
  N239.                    IND      
                               Use:<I73>(#383) *
        Def:<I74>(#384) Pref:<V14/L8>
  N241.                    V14(L8)
                               Use:<I74>(#385) *
        Def:<V14/L8>(#386)
  N243.                    V13(L7)
  N245.                    PUTARG_REG
                               Use:<V13/L7>(#388) Fixed:rcx(#387)
        Def:<I75>(#390) rcx Pref:<V13/L7>
  N247.                    CALL     
                               Use:<I75>(#392) Fixed:rcx(#391) *
        Kill: rax rcx rdx r8 r9 r10 r11 
  N249.                    IL_OFFSET IL offset: 0x93
  N251.                    V14(L8)
  N253.                    LEA(b+8) 
                               Use:<V14/L8>(#400) *
        Def:<I76>(#401)
  N255.                    V13(L7)
  N257.                    STOREIND 
                               Use:<I76>(#403) Fixed:rcx(#402) *
                               Use:<V13/L7>(#405) Fixed:rdx(#404) *
        Kill: rax rcx rdx r8 r9 r10 r11 mm0 mm1 mm2 mm3 mm4 mm5 
  N259.                    IL_OFFSET IL offset: 0x98
  N261.                    V00(L0)
  N263.                    LEA(b+8) 
  N265.                    IND      
                               Use:<V00/L0>(#419)
        Def:<I77>(#420) Pref:<V28/L16>
  N267.                    V28(L16)
                               Use:<I77>(#421) *
        Def:<V28/L16>(#422)
  N269.                    V28(L16)
  N271.                    LEA(b+8) 
                               Use:<V28/L16>(#423)
        Def:<I78>(#424)
  N273.                    V28(L16)
  N275.                    LEA(b+8) 
  N277.                    IND      
                               Use:<V28/L16>(#425) *
        Def:<I79>(#426)
  N279.                    LEA(b+8) 
  N281.                    IND      
                               Use:<I79>(#427) *
        Def:<I80>(#428) Pref:<V27/L15>
  N283.                    V27(L15)
                               Use:<I80>(#429) *
        Def:<V27/L15>(#430) Pref:<V16/L10>
  N285.                    V27(L15)
  N287.                    STOREIND 
                               Use:<I78>(#432) Fixed:rcx(#431) *
                               Use:<V27/L15>(#434) Fixed:rdx(#433)
        Kill: rax rcx rdx r8 r9 r10 r11 mm0 mm1 mm2 mm3 mm4 mm5 
  N289.                    IL_OFFSET IL offset: 0xb3
  N291.                    CNS_INT(h) 0x7ffdb3b058b8 token
        Def:<I81>(#448)
  N293.                    PUTARG_REG
                               Use:<I81>(#450) Fixed:rcx(#449) *
        Def:<I82>(#452) rcx
  N295.                    CALL help
                               Use:<I82>(#454) Fixed:rcx(#453) *
        Kill: rax rcx rdx r8 r9 r10 r11 
        Def:<I83>(#463) rax Pref:<V15/L9>
  N297.                    V15(L9)
                               Use:<I83>(#464) *
        Def:<V15/L9>(#465)
  N299.                    V27(L15)
  N301.                    V16(L10)
                               Use:<V27/L15>(#466) *
        Def:<V16/L10>(#467)
  N303.                    V15(L9)
  N305.                    PUTARG_REG
                               Use:<V15/L9>(#469) Fixed:rcx(#468)
        Def:<I84>(#471) rcx Pref:<V15/L9>
  N307.                    CALL     
                               Use:<I84>(#473) Fixed:rcx(#472) *
        Kill: rax rcx rdx r8 r9 r10 r11 
  N309.                    IL_OFFSET IL offset: 0xc3
  N311.                    V16(L10)
  N313.                    LEA(b+16)
                               Use:<V16/L10>(#481) *
        Def:<I85>(#482)
  N315.                    V15(L9)
  N317.                    STOREIND 
                               Use:<I85>(#484) Fixed:rcx(#483) *
                               Use:<V15/L9>(#486) Fixed:rdx(#485) *
        Kill: rax rcx rdx r8 r9 r10 r11 mm0 mm1 mm2 mm3 mm4 mm5 

BB04 [0CA..0CD) -> BB06 (cond), preds={BB03} succs={BB05,BB06}
=====
  N321.                    V05 MEM
  N323.                    CNS_INT   0
  N325.                    EQ       
  N327.                    JTRUE    

BB05 [0CD..0D4), preds={BB04} succs={BB06}
=====
  N331.                    V04 MEM
        Def:<I86>(#502)
  N333.                    PUTARG_REG
                               Use:<I86>(#504) Fixed:rcx(#503) *
        Def:<I87>(#506) rcx
  N335.                    CALL     
                               Use:<I87>(#508) Fixed:rcx(#507) *
        Kill: rax rcx rdx r8 r9 r10 r11 

BB06 [0D4..0DD) -> BB02 (cond), preds={BB04,BB05} succs={BB07,BB02}
=====
  N339.                    IL_OFFSET IL offset: 0xd4
  N341.                    V03(L1)
  N343.                    CNS_INT   1
  N345.                    ADD      
                               Use:<V03/L1>(#517) *
        Def:<I88>(#518) Pref:<V03/L1>
  N347.                    V03(L1)
                               Use:<I88>(#519) *
        Def:<V03/L1>(#520) Pref:<I88>
  N349.                    IL_OFFSET IL offset: 0xd8
  N351.                    V03(L1)
  N353.                    CNS_INT   10
  N355.                    LT       
                               Use:<V03/L1>(#521)
  N357.                    JTRUE    

  Exposed use of V03 at #522
BB07 [0DD..0F9), preds={BB06} succs={BB08}
=====
  N361.                    IL_OFFSET IL offset: 0xdd
  N363.                    CALL     
        Kill: rax rcx rdx r8 r9 r10 r11 
        Def:<I89>(#532) rax
  N365.                    V02 MEM
                               Use:<I89>(#533) *
  N367.                    IL_OFFSET IL offset: 0xe3
  N369.                    LCL_VAR_ADDR V02 loc0          NA
                                                      long   V02._dateData (offs=0x00) -> V17 tmp10        
        Def:<I90>(#534)
  N371.                    PUTARG_REG
                               Use:<I90>(#536) Fixed:rcx(#535) *
        Def:<I91>(#538) rcx
  N373.                    CALL     
                               Use:<I91>(#540) Fixed:rcx(#539) *
        Kill: rax rcx rdx r8 r9 r10 r11 
        Def:<I92>(#549) rax Pref:<V23/L13>
  N375.                    V23(L13)
                               Use:<I92>(#550) *
        Def:<V23/L13>(#551)
  N377.                    V23(L13)
  N379.                    PUTARG_REG
                               Use:<V23/L13>(#553) Fixed:rcx(#552) *
        Def:<I93>(#555) rcx
  N381.                    CNS_INT(h) 0x75003200 "	 Waiting for list processing to complete..."
        Def:<I94>(#556)
  N383.                    IND      
                               Use:<I94>(#557) *
        Def:<I95>(#558)
  N385.                    PUTARG_REG
                               Use:<I95>(#560) Fixed:rdx(#559) *
        Def:<I96>(#562) rdx
  N387.                    CALL     
                               Use:<I93>(#564) Fixed:rcx(#563) *
                               Use:<I96>(#566) Fixed:rdx(#565) *
        Kill: rax rcx rdx r8 r9 r10 r11 
        Def:<I97>(#575) rax
  N389.                    PUTARG_REG
                               Use:<I97>(#577) Fixed:rcx(#576) *
        Def:<I98>(#579) rcx
  N391.                    CALL     
                               Use:<I98>(#581) Fixed:rcx(#580) *
        Kill: rax rcx rdx r8 r9 r10 r11 

BB08 [0F9..102), preds={BB07,BB12} succs={BB09}
=====
  N395.                    IL_OFFSET IL offset: 0xf9
  N397.                    V00(L0)
  N399.                    LEA(b+8) 
  N401.                    IND      
                               Use:<V00/L0>(#590)
        Def:<I99>(#591)
  N403.                    V04 MEM
                               Use:<I99>(#592) *
  N405.                    IL_OFFSET IL offset: 0x100
  N407.                    CNS_INT   0
        Def:<I100>(#593)
  N409.                    V05 MEM
                               Use:<I100>(#594) *

BB09 [102..122) -> BB13 (cond), preds={BB08} succs={BB10,BB13}
=====
  N413.                    IL_OFFSET IL offset: 0x102
  N415.                    LCL_VAR_ADDR V05 loc3          NA
        Def:<I101>(#596)
  N417.                    PUTARG_REG
                               Use:<I101>(#598) Fixed:rdx(#597) *
        Def:<I102>(#600) rdx
  N419.                    V04 MEM
        Def:<I103>(#601)
  N421.                    PUTARG_REG
                               Use:<I103>(#603) Fixed:rcx(#602) *
        Def:<I104>(#605) rcx
  N423.                    CALL     
                               Use:<I102>(#607) Fixed:rdx(#606) *
                               Use:<I104>(#609) Fixed:rcx(#608) *
        Kill: rax rcx rdx r8 r9 r10 r11 
  N425.                    IL_OFFSET IL offset: 0x10a
  N427.                    V00(L0)
  N429.                    LEA(b+8) 
  N431.                    IND      
                               Use:<V00/L0>(#617)
        Def:<I105>(#618) Pref:<V29/L17>
  N433.                    V29(L17)
                               Use:<I105>(#619) *
        Def:<V29/L17>(#620)
  N435.                    V29(L17)
  N437.                    LEA(b+8) 
  N439.                    IND      
                               Use:<V29/L17>(#621)
        Def:<I106>(#622)
  N441.                    V29(L17)
  N443.                    LEA(b+16)
  N445.                    IND      
  N447.                    EQ       
                               Use:<I106>(#623) *
                               Use:<V29/L17>(#624) *
  N449.                    JTRUE    

BB10 [126..129) -> BB12 (cond), preds={BB09} succs={BB11,BB12}
=====
  N453.                    V05 MEM
  N455.                    CNS_INT   0
  N457.                    EQ       
  N459.                    JTRUE    

BB11 [129..130), preds={BB10} succs={BB12}
=====
  N463.                    V04 MEM
        Def:<I107>(#627)
  N465.                    PUTARG_REG
                               Use:<I107>(#629) Fixed:rcx(#628) *
        Def:<I108>(#631) rcx
  N467.                    CALL     
                               Use:<I108>(#633) Fixed:rcx(#632) *
        Kill: rax rcx rdx r8 r9 r10 r11 

BB12 [130..139) -> BB08 (always), preds={BB10,BB11} succs={BB08}
=====
  N471.                    IL_OFFSET IL offset: 0x130
  N473.                    CNS_INT   100
        Def:<I109>(#642)
  N475.                    PUTARG_REG
                               Use:<I109>(#644) Fixed:rcx(#643) *
        Def:<I110>(#646) rcx
  N477.                    CALL     
                               Use:<I110>(#648) Fixed:rcx(#647) *
        Kill: rax rcx rdx r8 r9 r10 r11 

BB13 [???..???) -> BB30 (callf), preds={BB09} succs={BB30}
=====

BB30 [126..129) -> BB32 (cond), preds={BB13} succs={BB31,BB32}
=====
  N483.                    IL_OFFSET IL offset: 0x126
  N485.                    V05 MEM
  N487.                    CNS_INT   0
  N489.                    EQ       
  N491.                    JTRUE    

BB31 [129..12F), preds={BB30} succs={BB32}
=====
  N495.                    IL_OFFSET IL offset: 0x129
  N497.                    V04 MEM
        Def:<I111>(#659)
  N499.                    PUTARG_REG
                               Use:<I111>(#661) Fixed:rcx(#660) *
        Def:<I112>(#663) rcx
  N501.                    CALL     
                               Use:<I112>(#665) Fixed:rcx(#664) *
        Kill: rax rcx rdx r8 r9 r10 r11 

BB32 [12F..130) (finret), preds={BB30,BB31} succs={BB14}
=====
  N505.                    IL_OFFSET IL offset: 0x12f
  N507.                    RETFILT  

BB14 [???..???) -> BB15 (ALWAYS), preds={BB32} succs={BB15}
=====

BB15 [139..17D), preds={BB14} succs={BB19}
=====
  N513.                    IL_OFFSET IL offset: 0x139
  N515.                    CALL     
        Kill: rax rcx rdx r8 r9 r10 r11 
        Def:<I113>(#684) rax
  N517.                    V02 MEM
                               Use:<I113>(#685) *
  N519.                    IL_OFFSET IL offset: 0x13f
  N521.                    LCL_VAR_ADDR V02 loc0          NA
                                                      long   V02._dateData (offs=0x00) -> V17 tmp10        
        Def:<I114>(#686)
  N523.                    PUTARG_REG
                               Use:<I114>(#688) Fixed:rcx(#687) *
        Def:<I115>(#690) rcx
  N525.                    CALL     
                               Use:<I115>(#692) Fixed:rcx(#691) *
        Kill: rax rcx rdx r8 r9 r10 r11 
        Def:<I116>(#701) rax Pref:<V24/L14>
  N527.                    V24(L14)
                               Use:<I116>(#702) *
        Def:<V24/L14>(#703)
  N529.                    V24(L14)
  N531.                    PUTARG_REG
                               Use:<V24/L14>(#705) Fixed:rcx(#704) *
        Def:<I117>(#707) rcx
  N533.                    CNS_INT(h) 0x75003208 "	 Done.  Profiler is active, available options:"
        Def:<I118>(#708)
  N535.                    IND      
                               Use:<I118>(#709) *
        Def:<I119>(#710)
  N537.                    PUTARG_REG
                               Use:<I119>(#712) Fixed:rdx(#711) *
        Def:<I120>(#714) rdx
  N539.                    CALL     
                               Use:<I117>(#716) Fixed:rcx(#715) *
                               Use:<I120>(#718) Fixed:rdx(#717) *
        Kill: rax rcx rdx r8 r9 r10 r11 
        Def:<I121>(#727) rax
  N541.                    PUTARG_REG
                               Use:<I121>(#729) Fixed:rcx(#728) *
        Def:<I122>(#731) rcx
  N543.                    CALL     
                               Use:<I122>(#733) Fixed:rcx(#732) *
        Kill: rax rcx rdx r8 r9 r10 r11 
  N545.                    IL_OFFSET IL offset: 0x155
  N547.                    CNS_INT(h) 0x75003210 "   Q = quit"
        Def:<I123>(#741)
  N549.                    IND      
                               Use:<I123>(#742) *
        Def:<I124>(#743)
  N551.                    PUTARG_REG
                               Use:<I124>(#745) Fixed:rcx(#744) *
        Def:<I125>(#747) rcx
  N553.                    CALL     
                               Use:<I125>(#749) Fixed:rcx(#748) *
        Kill: rax rcx rdx r8 r9 r10 r11 
  N555.                    IL_OFFSET IL offset: 0x15f
  N557.                    CNS_INT(h) 0x75003218 "   H = heap snapshot"
        Def:<I126>(#757)
  N559.                    IND      
                               Use:<I126>(#758) *
        Def:<I127>(#759)
  N561.                    PUTARG_REG
                               Use:<I127>(#761) Fixed:rcx(#760) *
        Def:<I128>(#763) rcx
  N563.                    CALL     
                               Use:<I128>(#765) Fixed:rcx(#764) *
        Kill: rax rcx rdx r8 r9 r10 r11 
  N565.                    IL_OFFSET IL offset: 0x169
  N567.                    CNS_INT(h) 0x75003220 "   G = GC (max gen)"
        Def:<I129>(#773)
  N569.                    IND      
                               Use:<I129>(#774) *
        Def:<I130>(#775)
  N571.                    PUTARG_REG
                               Use:<I130>(#777) Fixed:rcx(#776) *
        Def:<I131>(#779) rcx
  N573.                    CALL     
                               Use:<I131>(#781) Fixed:rcx(#780) *
        Kill: rax rcx rdx r8 r9 r10 r11 
  N575.                    IL_OFFSET IL offset: 0x173
  N577.                    CNS_INT(h) 0x75003228 "   R = clear the running flag to stop the consumer thread"
        Def:<I132>(#789)
  N579.                    IND      
                               Use:<I132>(#790) *
        Def:<I133>(#791)
  N581.                    PUTARG_REG
                               Use:<I133>(#793) Fixed:rcx(#792) *
        Def:<I134>(#795) rcx
  N583.                    CALL     
                               Use:<I134>(#797) Fixed:rcx(#796) *
        Kill: rax rcx rdx r8 r9 r10 r11 

BB19 [17D..18F) -> BB21 (cond), preds={BB15,BB20,BB22,BB24,BB25} succs={BB20,BB21}
=====
  N587.                    LCL_VAR_ADDR V06 loc4          NA
                                                      ushort V06._keyChar (offs=0x00) -> V18 tmp11        
                                                      int    V06._key (offs=0x04) -> V19 tmp12        
                                                      int    V06._mods (offs=0x08) -> V20 tmp13        
        Def:<I135>(#806)
  N589.                    PUTARG_REG
                               Use:<I135>(#808) Fixed:rcx(#807) *
        Def:<I136>(#810) rcx
  N591.                    CNS_INT   0
        Def:<I137>(#811)
  N593.                    PUTARG_REG
                               Use:<I137>(#813) Fixed:rdx(#812) *
        Def:<I138>(#815) rdx
  N595.                    CALL     
                               Use:<I136>(#817) Fixed:rcx(#816) *
                               Use:<I138>(#819) Fixed:rdx(#818) *
        Kill: rax rcx rdx r8 r9 r10 r11 
  N597.                    V19 MEM
  N599.                    CNS_INT   71
  N601.                    NE       
  N603.                    JTRUE    

BB20 [18F..19B) -> BB19 (always), preds={BB19} succs={BB19}
=====
  N607.                    IL_OFFSET IL offset: 0x18f
  N609.                    CALL     
        Kill: rax rcx rdx r8 r9 r10 r11 
        Def:<I139>(#836) rax
  N611.                    PUTARG_REG
                               Use:<I139>(#838) Fixed:rcx(#837) *
        Def:<I140>(#840) rcx
  N613.                    CALL     
                               Use:<I140>(#842) Fixed:rcx(#841) *
        Kill: rax rcx rdx r8 r9 r10 r11 

BB21 [19B..1A6) -> BB23 (cond), preds={BB19} succs={BB22,BB23}
=====
  N617.                    V19 MEM
  N619.                    CNS_INT   72
  N621.                    NE       
  N623.                    JTRUE    

BB22 [1A6..1AD) -> BB19 (always), preds={BB21} succs={BB19}
=====
  N627.                    IL_OFFSET IL offset: 0x1a6
  N629.                    CALL     
        Kill: rax rcx rdx r8 r9 r10 r11 

BB23 [1AD..1B8) -> BB25 (cond), preds={BB21} succs={BB24,BB25}
=====
  N633.                    V19 MEM
  N635.                    CNS_INT   82
  N637.                    NE       
  N639.                    JTRUE    

BB24 [1B8..1C1) -> BB19 (always), preds={BB23} succs={BB19}
=====
  N643.                    IL_OFFSET IL offset: 0x1b8
  N645.                    V00(L0)
  N647.                    LEA(b+16)
  N649.                    CNS_INT   0
  N651.                    STOREIND 
                               Use:<V00/L0>(#861)

BB25 [1C1..1CC) -> BB19 (cond), preds={BB23} succs={BB26,BB19}
=====
  N655.                    V19 MEM
  N657.                    CNS_INT   81
  N659.                    NE       
  N661.                    JTRUE    

BB26 [1CC..1D4) (return), preds={BB25} succs={}
=====
  N665.                    IL_OFFSET IL offset: 0x1cc
  N667.                    V00(L0)
  N669.                    LEA(b+16)
  N671.                    CNS_INT   0
  N673.                    STOREIND 
                               Use:<V00/L0>(#864) *
  N675.                    IL_OFFSET IL offset: 0x1d3
  N677.                    RETURN   

BB27 [0CA..0CD) -> BB29 (cond), preds={} succs={BB28,BB29}
=====
  N681.                    IL_OFFSET IL offset: 0xca
  N683.                    V05 MEM
  N685.                    CNS_INT   0
  N687.                    EQ       
  N689.                    JTRUE    

BB28 [0CD..0D3), preds={BB27} succs={BB29}
=====
  N693.                    IL_OFFSET IL offset: 0xcd
  N695.                    V04 MEM
        Def:<I141>(#867)
  N697.                    PUTARG_REG
                               Use:<I141>(#869) Fixed:rcx(#868) *
        Def:<I142>(#871) rcx
  N699.                    CALL     
                               Use:<I142>(#873) Fixed:rcx(#872) *
        Kill: rax rcx rdx r8 r9 r10 r11 

BB29 [0D3..0D4) (finret), preds={BB27,BB28} succs={}
=====
  N703.                    IL_OFFSET IL offset: 0xd3
  N705.                    RETFILT  




Linear scan intervals after buildIntervals:
Interval  0: (V00) ref (SPILLED) (writeThru) RefPositions {#0@0 #98@55 #135@75 #196@115 #336@197 #381@235 #419@265 #590@401 #617@431 #861@651 #864@673} physReg:rcx Preferences=[rcx rdx rbx rbp rsi rdi r12-r15]
Interval  1: (V03) int RefPositions {#334@188 #517@345 #520@348 #521@355 #522@359} physReg:NA Preferences=[rbx rsi rdi r12-r15] RelatedInterval <I88>
Interval  2: (V08) ref RefPositions {#84@44 #86@47 #103@59} physReg:NA Preferences=[rbx rsi rdi r12-r15]
Interval  3: (V09) ref RefPositions {#134@70 #142@85 #159@97} physReg:NA Preferences=[rbx rsi rdi r12-r15]
Interval  4: (V10) ref RefPositions {#140@82 #154@93} physReg:NA Preferences=[rbx rsi rdi r12-r15]
Interval  5: (V11) ref RefPositions {#190@108 #192@111 #240@139} physReg:NA Preferences=[rbx rsi rdi r12-r15]
Interval  6: (V12) ref RefPositions {#234@132 #236@135 #255@147} physReg:NA Preferences=[rbx rsi rdi r12-r15]
Interval  7: (V13) ref RefPositions {#380@230 #388@245 #405@257} physReg:NA Preferences=[rbx rsi rdi r12-r15]
Interval  8: (V14) ref RefPositions {#386@242 #400@253} physReg:NA Preferences=[rbx rsi rdi r12-r15]
Interval  9: (V15) ref RefPositions {#465@298 #469@305 #486@317} physReg:NA Preferences=[rbx rsi rdi r12-r15]
Interval 10: (V16) ref RefPositions {#467@302 #481@313} physReg:NA Preferences=[rbx rsi rdi r12-r15]
Interval 11: (V21) ref RefPositions {#29@18 #31@21} physReg:NA Preferences=[rcx]
Interval 12: (V22) ref RefPositions {#294@166 #296@169} physReg:NA Preferences=[rcx]
Interval 13: (V23) ref RefPositions {#551@376 #553@379} physReg:NA Preferences=[rcx]
Interval 14: (V24) ref RefPositions {#703@528 #705@531} physReg:NA Preferences=[rcx]
Interval 15: (V27) ref RefPositions {#430@284 #434@287 #466@301} physReg:NA Preferences=[rbx rsi rdi r12-r15] RelatedInterval <V16/L10>
Interval 16: (V28) ref RefPositions {#422@268 #423@271 #425@277} physReg:NA Preferences=[allIntButFP]
Interval 17: (V29) ref RefPositions {#620@434 #621@439 #624@447} physReg:NA Preferences=[allIntButFP]
Interval 18: long RefPositions {#10@6 #11@7} physReg:NA Preferences=[rax]
Interval 19: byref RefPositions {#12@12 #14@13} physReg:NA Preferences=[rcx]
Interval 20: byref RefPositions {#16@14 #18@15} physReg:NA Preferences=[rcx]
Interval 21: ref RefPositions {#27@16 #28@17} physReg:NA Preferences=[rax] RelatedInterval <V21/L11>
Interval 22: ref RefPositions {#33@22 #42@29} physReg:NA Preferences=[rcx]
Interval 23: long (constant) RefPositions {#34@24 #35@25} physReg:NA Preferences=[allIntButFP]
Interval 24: ref RefPositions {#36@26 #38@27} physReg:NA Preferences=[rdx]
Interval 25: ref RefPositions {#40@28 #44@29} physReg:NA Preferences=[rdx]
Interval 26: ref (def-use conflict) RefPositions {#53@30 #55@31} physReg:NA Preferences=[rax rcx]
Interval 27: ref RefPositions {#57@32 #59@33} physReg:NA Preferences=[rcx]
Interval 28: long (constant) RefPositions {#67@38 #69@39} physReg:NA Preferences=[rcx]
Interval 29: long RefPositions {#71@40 #73@41} physReg:NA Preferences=[rcx]
Interval 30: ref RefPositions {#82@42 #83@43} physReg:NA Preferences=[rax] RelatedInterval <V08/L2>
Interval 31: ref (specialPutArg) RefPositions {#88@48 #90@49} physReg:NA Preferences=[rcx] RelatedInterval <V08/L2>
Interval 32: byref RefPositions {#99@56 #101@59} physReg:NA Preferences=[rcx]
Interval 33: long (constant) RefPositions {#117@64 #119@65} physReg:NA Preferences=[rcx]
Interval 34: long RefPositions {#121@66 #123@67} physReg:NA Preferences=[rcx]
Interval 35: ref RefPositions {#132@68 #133@69} physReg:NA Preferences=[rax] RelatedInterval <V09/L3>
Interval 36: ref RefPositions {#136@76 #137@79} physReg:NA Preferences=[allIntButFP]
Interval 37: ref RefPositions {#138@80 #139@81} physReg:NA Preferences=[allIntButFP] RelatedInterval <V10/L4>
Interval 38: ref (specialPutArg) RefPositions {#144@86 #146@87} physReg:NA Preferences=[rcx] RelatedInterval <V09/L3>
Interval 39: byref RefPositions {#155@94 #157@97} physReg:NA Preferences=[rcx]
Interval 40: long (constant) RefPositions {#173@102 #175@103} physReg:NA Preferences=[rcx]
Interval 41: long RefPositions {#177@104 #179@105} physReg:NA Preferences=[rcx]
Interval 42: ref RefPositions {#188@106 #189@107} physReg:NA Preferences=[rax] RelatedInterval <V11/L5>
Interval 43: ref (specialPutArg) RefPositions {#194@112 #205@121} physReg:NA Preferences=[rcx] RelatedInterval <V11/L5>
Interval 44: ref (specialPutArg) RefPositions {#198@116 #207@121} physReg:NA Preferences=[rdx] RelatedInterval <V00/L0>
Interval 45: long (constant) RefPositions {#199@118 #201@119} physReg:NA Preferences=[r8]
Interval 46: long RefPositions {#203@120 #209@121} physReg:NA Preferences=[r8]
Interval 47: long (constant) RefPositions {#217@126 #219@127} physReg:NA Preferences=[rcx]
Interval 48: long RefPositions {#221@128 #223@129} physReg:NA Preferences=[rcx]
Interval 49: ref RefPositions {#232@130 #233@131} physReg:NA Preferences=[rax] RelatedInterval <V12/L6>
Interval 50: ref (specialPutArg) RefPositions {#238@136 #244@141} physReg:NA Preferences=[rcx] RelatedInterval <V12/L6>
Interval 51: ref RefPositions {#242@140 #246@141} physReg:NA Preferences=[rdx]
Interval 52: ref RefPositions {#257@148 #259@149} physReg:NA Preferences=[rcx]
Interval 53: long RefPositions {#275@154 #276@155} physReg:NA Preferences=[rax]
Interval 54: byref RefPositions {#277@160 #279@161} physReg:NA Preferences=[rcx]
Interval 55: byref RefPositions {#281@162 #283@163} physReg:NA Preferences=[rcx]
Interval 56: ref RefPositions {#292@164 #293@165} physReg:NA Preferences=[rax] RelatedInterval <V22/L12>
Interval 57: ref RefPositions {#298@170 #307@177} physReg:NA Preferences=[rcx]
Interval 58: long (constant) RefPositions {#299@172 #300@173} physReg:NA Preferences=[allIntButFP]
Interval 59: ref RefPositions {#301@174 #303@175} physReg:NA Preferences=[rdx]
Interval 60: ref RefPositions {#305@176 #309@177} physReg:NA Preferences=[rdx]
Interval 61: ref (def-use conflict) RefPositions {#318@178 #320@179} physReg:NA Preferences=[rax rcx]
Interval 62: ref RefPositions {#322@180 #324@181} physReg:NA Preferences=[rcx]
Interval 63: int (constant) RefPositions {#332@186 #333@187} physReg:NA Preferences=[allIntButFP] RelatedInterval <V03/L1>
Interval 64: ref RefPositions {#337@198 #338@199} physReg:NA Preferences=[allIntButFP]
Interval 65: int (constant) RefPositions {#339@204 #340@205} physReg:NA Preferences=[allIntButFP]
Interval 66: long RefPositions {#342@212 #344@213} physReg:NA Preferences=[rdx]
Interval 67: long RefPositions {#346@214 #353@219} physReg:NA Preferences=[rdx]
Interval 68: ref RefPositions {#347@216 #349@217} physReg:NA Preferences=[rcx]
Interval 69: ref RefPositions {#351@218 #355@219} physReg:NA Preferences=[rcx]
Interval 70: long (constant) RefPositions {#363@224 #365@225} physReg:NA Preferences=[rcx]
Interval 71: long RefPositions {#367@226 #369@227} physReg:NA Preferences=[rcx]
Interval 72: ref RefPositions {#378@228 #379@229} physReg:NA Preferences=[rax] RelatedInterval <V13/L7>
Interval 73: ref RefPositions {#382@236 #383@239} physReg:NA Preferences=[allIntButFP]
Interval 74: ref RefPositions {#384@240 #385@241} physReg:NA Preferences=[allIntButFP] RelatedInterval <V14/L8>
Interval 75: ref (specialPutArg) RefPositions {#390@246 #392@247} physReg:NA Preferences=[rcx] RelatedInterval <V13/L7>
Interval 76: byref RefPositions {#401@254 #403@257} physReg:NA Preferences=[rcx]
Interval 77: ref RefPositions {#420@266 #421@267} physReg:NA Preferences=[allIntButFP] RelatedInterval <V28/L16>
Interval 78: byref RefPositions {#424@272 #432@287} physReg:NA Preferences=[rcx]
Interval 79: ref RefPositions {#426@278 #427@281} physReg:NA Preferences=[allIntButFP]
Interval 80: ref RefPositions {#428@282 #429@283} physReg:NA Preferences=[allIntButFP] RelatedInterval <V27/L15>
Interval 81: long (constant) RefPositions {#448@292 #450@293} physReg:NA Preferences=[rcx]
Interval 82: long RefPositions {#452@294 #454@295} physReg:NA Preferences=[rcx]
Interval 83: ref RefPositions {#463@296 #464@297} physReg:NA Preferences=[rax] RelatedInterval <V15/L9>
Interval 84: ref (specialPutArg) RefPositions {#471@306 #473@307} physReg:NA Preferences=[rcx] RelatedInterval <V15/L9>
Interval 85: byref RefPositions {#482@314 #484@317} physReg:NA Preferences=[rcx]
Interval 86: ref RefPositions {#502@332 #504@333} physReg:NA Preferences=[rcx]
Interval 87: ref RefPositions {#506@334 #508@335} physReg:NA Preferences=[rcx]
Interval 88: int RefPositions {#518@346 #519@347} physReg:NA Preferences=[allIntButFP] RelatedInterval <V03/L1>
Interval 89: long RefPositions {#532@364 #533@365} physReg:NA Preferences=[rax]
Interval 90: byref RefPositions {#534@370 #536@371} physReg:NA Preferences=[rcx]
Interval 91: byref RefPositions {#538@372 #540@373} physReg:NA Preferences=[rcx]
Interval 92: ref RefPositions {#549@374 #550@375} physReg:NA Preferences=[rax] RelatedInterval <V23/L13>
Interval 93: ref RefPositions {#555@380 #564@387} physReg:NA Preferences=[rcx]
Interval 94: long (constant) RefPositions {#556@382 #557@383} physReg:NA Preferences=[allIntButFP]
Interval 95: ref RefPositions {#558@384 #560@385} physReg:NA Preferences=[rdx]
Interval 96: ref RefPositions {#562@386 #566@387} physReg:NA Preferences=[rdx]
Interval 97: ref (def-use conflict) RefPositions {#575@388 #577@389} physReg:NA Preferences=[rax rcx]
Interval 98: ref RefPositions {#579@390 #581@391} physReg:NA Preferences=[rcx]
Interval 99: ref RefPositions {#591@402 #592@403} physReg:NA Preferences=[allIntButFP]
Interval 100: int (constant) RefPositions {#593@408 #594@409} physReg:NA Preferences=[allIntButFP]
Interval 101: long RefPositions {#596@416 #598@417} physReg:NA Preferences=[rdx]
Interval 102: long RefPositions {#600@418 #607@423} physReg:NA Preferences=[rdx]
Interval 103: ref RefPositions {#601@420 #603@421} physReg:NA Preferences=[rcx]
Interval 104: ref RefPositions {#605@422 #609@423} physReg:NA Preferences=[rcx]
Interval 105: ref RefPositions {#618@432 #619@433} physReg:NA Preferences=[allIntButFP] RelatedInterval <V29/L17>
Interval 106: ref RefPositions {#622@440 #623@447} physReg:NA Preferences=[allIntButFP]
Interval 107: ref RefPositions {#627@464 #629@465} physReg:NA Preferences=[rcx]
Interval 108: ref RefPositions {#631@466 #633@467} physReg:NA Preferences=[rcx]
Interval 109: int (constant) RefPositions {#642@474 #644@475} physReg:NA Preferences=[rcx]
Interval 110: int RefPositions {#646@476 #648@477} physReg:NA Preferences=[rcx]
Interval 111: ref RefPositions {#659@498 #661@499} physReg:NA Preferences=[rcx]
Interval 112: ref RefPositions {#663@500 #665@501} physReg:NA Preferences=[rcx]
Interval 113: long RefPositions {#684@516 #685@517} physReg:NA Preferences=[rax]
Interval 114: byref RefPositions {#686@522 #688@523} physReg:NA Preferences=[rcx]
Interval 115: byref RefPositions {#690@524 #692@525} physReg:NA Preferences=[rcx]
Interval 116: ref RefPositions {#701@526 #702@527} physReg:NA Preferences=[rax] RelatedInterval <V24/L14>
Interval 117: ref RefPositions {#707@532 #716@539} physReg:NA Preferences=[rcx]
Interval 118: long (constant) RefPositions {#708@534 #709@535} physReg:NA Preferences=[allIntButFP]
Interval 119: ref RefPositions {#710@536 #712@537} physReg:NA Preferences=[rdx]
Interval 120: ref RefPositions {#714@538 #718@539} physReg:NA Preferences=[rdx]
Interval 121: ref (def-use conflict) RefPositions {#727@540 #729@541} physReg:NA Preferences=[rax rcx]
Interval 122: ref RefPositions {#731@542 #733@543} physReg:NA Preferences=[rcx]
Interval 123: long (constant) RefPositions {#741@548 #742@549} physReg:NA Preferences=[allIntButFP]
Interval 124: ref RefPositions {#743@550 #745@551} physReg:NA Preferences=[rcx]
Interval 125: ref RefPositions {#747@552 #749@553} physReg:NA Preferences=[rcx]
Interval 126: long (constant) RefPositions {#757@558 #758@559} physReg:NA Preferences=[allIntButFP]
Interval 127: ref RefPositions {#759@560 #761@561} physReg:NA Preferences=[rcx]
Interval 128: ref RefPositions {#763@562 #765@563} physReg:NA Preferences=[rcx]
Interval 129: long (constant) RefPositions {#773@568 #774@569} physReg:NA Preferences=[allIntButFP]
Interval 130: ref RefPositions {#775@570 #777@571} physReg:NA Preferences=[rcx]
Interval 131: ref RefPositions {#779@572 #781@573} physReg:NA Preferences=[rcx]
Interval 132: long (constant) RefPositions {#789@578 #790@579} physReg:NA Preferences=[allIntButFP]
Interval 133: ref RefPositions {#791@580 #793@581} physReg:NA Preferences=[rcx]
Interval 134: ref RefPositions {#795@582 #797@583} physReg:NA Preferences=[rcx]
Interval 135: byref RefPositions {#806@588 #808@589} physReg:NA Preferences=[rcx]
Interval 136: byref RefPositions {#810@590 #817@595} physReg:NA Preferences=[rcx]
Interval 137: int (constant) RefPositions {#811@592 #813@593} physReg:NA Preferences=[rdx]
Interval 138: int RefPositions {#815@594 #819@595} physReg:NA Preferences=[rdx]
Interval 139: int (def-use conflict) RefPositions {#836@610 #838@611} physReg:NA Preferences=[rax rcx]
Interval 140: int RefPositions {#840@612 #842@613} physReg:NA Preferences=[rcx]
Interval 141: ref RefPositions {#867@696 #869@697} physReg:NA Preferences=[rcx]
Interval 142: ref RefPositions {#871@698 #873@699} physReg:NA Preferences=[rcx]

*************** In LinearScan::allocateRegisters()

Linear scan intervals before allocateRegisters:
Interval  0: (V00) ref (SPILLED) (writeThru) RefPositions {#0@0 #98@55 #135@75 #196@115 #336@197 #381@235 #419@265 #590@401 #617@431 #861@651 #864@673} physReg:rcx Preferences=[rcx rdx rbx rbp rsi rdi r12-r15]
Interval  1: (V03) int RefPositions {#334@188 #517@345 #520@348 #521@355 #522@359} physReg:NA Preferences=[rbx rsi rdi r12-r15] RelatedInterval <I88>
Interval  2: (V08) ref RefPositions {#84@44 #86@47 #103@59} physReg:NA Preferences=[rbx rsi rdi r12-r15]
Interval  3: (V09) ref RefPositions {#134@70 #142@85 #159@97} physReg:NA Preferences=[rbx rsi rdi r12-r15]
Interval  4: (V10) ref RefPositions {#140@82 #154@93} physReg:NA Preferences=[rbx rsi rdi r12-r15]
Interval  5: (V11) ref RefPositions {#190@108 #192@111 #240@139} physReg:NA Preferences=[rbx rsi rdi r12-r15]
Interval  6: (V12) ref RefPositions {#234@132 #236@135 #255@147} physReg:NA Preferences=[rbx rsi rdi r12-r15]
Interval  7: (V13) ref RefPositions {#380@230 #388@245 #405@257} physReg:NA Preferences=[rbx rsi rdi r12-r15]
Interval  8: (V14) ref RefPositions {#386@242 #400@253} physReg:NA Preferences=[rbx rsi rdi r12-r15]
Interval  9: (V15) ref RefPositions {#465@298 #469@305 #486@317} physReg:NA Preferences=[rbx rsi rdi r12-r15]
Interval 10: (V16) ref RefPositions {#467@302 #481@313} physReg:NA Preferences=[rbx rsi rdi r12-r15]
Interval 11: (V21) ref RefPositions {#29@18 #31@21} physReg:NA Preferences=[rcx]
Interval 12: (V22) ref RefPositions {#294@166 #296@169} physReg:NA Preferences=[rcx]
Interval 13: (V23) ref RefPositions {#551@376 #553@379} physReg:NA Preferences=[rcx]
Interval 14: (V24) ref RefPositions {#703@528 #705@531} physReg:NA Preferences=[rcx]
Interval 15: (V27) ref RefPositions {#430@284 #434@287 #466@301} physReg:NA Preferences=[rbx rsi rdi r12-r15] RelatedInterval <V16/L10>
Interval 16: (V28) ref RefPositions {#422@268 #423@271 #425@277} physReg:NA Preferences=[allIntButFP]
Interval 17: (V29) ref RefPositions {#620@434 #621@439 #624@447} physReg:NA Preferences=[allIntButFP]
Interval 18: long RefPositions {#10@6 #11@7} physReg:NA Preferences=[rax]
Interval 19: byref RefPositions {#12@12 #14@13} physReg:NA Preferences=[rcx]
Interval 20: byref RefPositions {#16@14 #18@15} physReg:NA Preferences=[rcx]
Interval 21: ref RefPositions {#27@16 #28@17} physReg:NA Preferences=[rax] RelatedInterval <V21/L11>
Interval 22: ref RefPositions {#33@22 #42@29} physReg:NA Preferences=[rcx]
Interval 23: long (constant) RefPositions {#34@24 #35@25} physReg:NA Preferences=[allIntButFP]
Interval 24: ref RefPositions {#36@26 #38@27} physReg:NA Preferences=[rdx]
Interval 25: ref RefPositions {#40@28 #44@29} physReg:NA Preferences=[rdx]
Interval 26: ref (def-use conflict) RefPositions {#53@30 #55@31} physReg:NA Preferences=[rax rcx]
Interval 27: ref RefPositions {#57@32 #59@33} physReg:NA Preferences=[rcx]
Interval 28: long (constant) RefPositions {#67@38 #69@39} physReg:NA Preferences=[rcx]
Interval 29: long RefPositions {#71@40 #73@41} physReg:NA Preferences=[rcx]
Interval 30: ref RefPositions {#82@42 #83@43} physReg:NA Preferences=[rax] RelatedInterval <V08/L2>
Interval 31: ref (specialPutArg) RefPositions {#88@48 #90@49} physReg:NA Preferences=[rcx] RelatedInterval <V08/L2>
Interval 32: byref RefPositions {#99@56 #101@59} physReg:NA Preferences=[rcx]
Interval 33: long (constant) RefPositions {#117@64 #119@65} physReg:NA Preferences=[rcx]
Interval 34: long RefPositions {#121@66 #123@67} physReg:NA Preferences=[rcx]
Interval 35: ref RefPositions {#132@68 #133@69} physReg:NA Preferences=[rax] RelatedInterval <V09/L3>
Interval 36: ref RefPositions {#136@76 #137@79} physReg:NA Preferences=[allIntButFP]
Interval 37: ref RefPositions {#138@80 #139@81} physReg:NA Preferences=[allIntButFP] RelatedInterval <V10/L4>
Interval 38: ref (specialPutArg) RefPositions {#144@86 #146@87} physReg:NA Preferences=[rcx] RelatedInterval <V09/L3>
Interval 39: byref RefPositions {#155@94 #157@97} physReg:NA Preferences=[rcx]
Interval 40: long (constant) RefPositions {#173@102 #175@103} physReg:NA Preferences=[rcx]
Interval 41: long RefPositions {#177@104 #179@105} physReg:NA Preferences=[rcx]
Interval 42: ref RefPositions {#188@106 #189@107} physReg:NA Preferences=[rax] RelatedInterval <V11/L5>
Interval 43: ref (specialPutArg) RefPositions {#194@112 #205@121} physReg:NA Preferences=[rcx] RelatedInterval <V11/L5>
Interval 44: ref (specialPutArg) RefPositions {#198@116 #207@121} physReg:NA Preferences=[rdx] RelatedInterval <V00/L0>
Interval 45: long (constant) RefPositions {#199@118 #201@119} physReg:NA Preferences=[r8]
Interval 46: long RefPositions {#203@120 #209@121} physReg:NA Preferences=[r8]
Interval 47: long (constant) RefPositions {#217@126 #219@127} physReg:NA Preferences=[rcx]
Interval 48: long RefPositions {#221@128 #223@129} physReg:NA Preferences=[rcx]
Interval 49: ref RefPositions {#232@130 #233@131} physReg:NA Preferences=[rax] RelatedInterval <V12/L6>
Interval 50: ref (specialPutArg) RefPositions {#238@136 #244@141} physReg:NA Preferences=[rcx] RelatedInterval <V12/L6>
Interval 51: ref RefPositions {#242@140 #246@141} physReg:NA Preferences=[rdx]
Interval 52: ref RefPositions {#257@148 #259@149} physReg:NA Preferences=[rcx]
Interval 53: long RefPositions {#275@154 #276@155} physReg:NA Preferences=[rax]
Interval 54: byref RefPositions {#277@160 #279@161} physReg:NA Preferences=[rcx]
Interval 55: byref RefPositions {#281@162 #283@163} physReg:NA Preferences=[rcx]
Interval 56: ref RefPositions {#292@164 #293@165} physReg:NA Preferences=[rax] RelatedInterval <V22/L12>
Interval 57: ref RefPositions {#298@170 #307@177} physReg:NA Preferences=[rcx]
Interval 58: long (constant) RefPositions {#299@172 #300@173} physReg:NA Preferences=[allIntButFP]
Interval 59: ref RefPositions {#301@174 #303@175} physReg:NA Preferences=[rdx]
Interval 60: ref RefPositions {#305@176 #309@177} physReg:NA Preferences=[rdx]
Interval 61: ref (def-use conflict) RefPositions {#318@178 #320@179} physReg:NA Preferences=[rax rcx]
Interval 62: ref RefPositions {#322@180 #324@181} physReg:NA Preferences=[rcx]
Interval 63: int (constant) RefPositions {#332@186 #333@187} physReg:NA Preferences=[allIntButFP] RelatedInterval <V03/L1>
Interval 64: ref RefPositions {#337@198 #338@199} physReg:NA Preferences=[allIntButFP]
Interval 65: int (constant) RefPositions {#339@204 #340@205} physReg:NA Preferences=[allIntButFP]
Interval 66: long RefPositions {#342@212 #344@213} physReg:NA Preferences=[rdx]
Interval 67: long RefPositions {#346@214 #353@219} physReg:NA Preferences=[rdx]
Interval 68: ref RefPositions {#347@216 #349@217} physReg:NA Preferences=[rcx]
Interval 69: ref RefPositions {#351@218 #355@219} physReg:NA Preferences=[rcx]
Interval 70: long (constant) RefPositions {#363@224 #365@225} physReg:NA Preferences=[rcx]
Interval 71: long RefPositions {#367@226 #369@227} physReg:NA Preferences=[rcx]
Interval 72: ref RefPositions {#378@228 #379@229} physReg:NA Preferences=[rax] RelatedInterval <V13/L7>
Interval 73: ref RefPositions {#382@236 #383@239} physReg:NA Preferences=[allIntButFP]
Interval 74: ref RefPositions {#384@240 #385@241} physReg:NA Preferences=[allIntButFP] RelatedInterval <V14/L8>
Interval 75: ref (specialPutArg) RefPositions {#390@246 #392@247} physReg:NA Preferences=[rcx] RelatedInterval <V13/L7>
Interval 76: byref RefPositions {#401@254 #403@257} physReg:NA Preferences=[rcx]
Interval 77: ref RefPositions {#420@266 #421@267} physReg:NA Preferences=[allIntButFP] RelatedInterval <V28/L16>
Interval 78: byref RefPositions {#424@272 #432@287} physReg:NA Preferences=[rcx]
Interval 79: ref RefPositions {#426@278 #427@281} physReg:NA Preferences=[allIntButFP]
Interval 80: ref RefPositions {#428@282 #429@283} physReg:NA Preferences=[allIntButFP] RelatedInterval <V27/L15>
Interval 81: long (constant) RefPositions {#448@292 #450@293} physReg:NA Preferences=[rcx]
Interval 82: long RefPositions {#452@294 #454@295} physReg:NA Preferences=[rcx]
Interval 83: ref RefPositions {#463@296 #464@297} physReg:NA Preferences=[rax] RelatedInterval <V15/L9>
Interval 84: ref (specialPutArg) RefPositions {#471@306 #473@307} physReg:NA Preferences=[rcx] RelatedInterval <V15/L9>
Interval 85: byref RefPositions {#482@314 #484@317} physReg:NA Preferences=[rcx]
Interval 86: ref RefPositions {#502@332 #504@333} physReg:NA Preferences=[rcx]
Interval 87: ref RefPositions {#506@334 #508@335} physReg:NA Preferences=[rcx]
Interval 88: int RefPositions {#518@346 #519@347} physReg:NA Preferences=[allIntButFP] RelatedInterval <V03/L1>
Interval 89: long RefPositions {#532@364 #533@365} physReg:NA Preferences=[rax]
Interval 90: byref RefPositions {#534@370 #536@371} physReg:NA Preferences=[rcx]
Interval 91: byref RefPositions {#538@372 #540@373} physReg:NA Preferences=[rcx]
Interval 92: ref RefPositions {#549@374 #550@375} physReg:NA Preferences=[rax] RelatedInterval <V23/L13>
Interval 93: ref RefPositions {#555@380 #564@387} physReg:NA Preferences=[rcx]
Interval 94: long (constant) RefPositions {#556@382 #557@383} physReg:NA Preferences=[allIntButFP]
Interval 95: ref RefPositions {#558@384 #560@385} physReg:NA Preferences=[rdx]
Interval 96: ref RefPositions {#562@386 #566@387} physReg:NA Preferences=[rdx]
Interval 97: ref (def-use conflict) RefPositions {#575@388 #577@389} physReg:NA Preferences=[rax rcx]
Interval 98: ref RefPositions {#579@390 #581@391} physReg:NA Preferences=[rcx]
Interval 99: ref RefPositions {#591@402 #592@403} physReg:NA Preferences=[allIntButFP]
Interval 100: int (constant) RefPositions {#593@408 #594@409} physReg:NA Preferences=[allIntButFP]
Interval 101: long RefPositions {#596@416 #598@417} physReg:NA Preferences=[rdx]
Interval 102: long RefPositions {#600@418 #607@423} physReg:NA Preferences=[rdx]
Interval 103: ref RefPositions {#601@420 #603@421} physReg:NA Preferences=[rcx]
Interval 104: ref RefPositions {#605@422 #609@423} physReg:NA Preferences=[rcx]
Interval 105: ref RefPositions {#618@432 #619@433} physReg:NA Preferences=[allIntButFP] RelatedInterval <V29/L17>
Interval 106: ref RefPositions {#622@440 #623@447} physReg:NA Preferences=[allIntButFP]
Interval 107: ref RefPositions {#627@464 #629@465} physReg:NA Preferences=[rcx]
Interval 108: ref RefPositions {#631@466 #633@467} physReg:NA Preferences=[rcx]
Interval 109: int (constant) RefPositions {#642@474 #644@475} physReg:NA Preferences=[rcx]
Interval 110: int RefPositions {#646@476 #648@477} physReg:NA Preferences=[rcx]
Interval 111: ref RefPositions {#659@498 #661@499} physReg:NA Preferences=[rcx]
Interval 112: ref RefPositions {#663@500 #665@501} physReg:NA Preferences=[rcx]
Interval 113: long RefPositions {#684@516 #685@517} physReg:NA Preferences=[rax]
Interval 114: byref RefPositions {#686@522 #688@523} physReg:NA Preferences=[rcx]
Interval 115: byref RefPositions {#690@524 #692@525} physReg:NA Preferences=[rcx]
Interval 116: ref RefPositions {#701@526 #702@527} physReg:NA Preferences=[rax] RelatedInterval <V24/L14>
Interval 117: ref RefPositions {#707@532 #716@539} physReg:NA Preferences=[rcx]
Interval 118: long (constant) RefPositions {#708@534 #709@535} physReg:NA Preferences=[allIntButFP]
Interval 119: ref RefPositions {#710@536 #712@537} physReg:NA Preferences=[rdx]
Interval 120: ref RefPositions {#714@538 #718@539} physReg:NA Preferences=[rdx]
Interval 121: ref (def-use conflict) RefPositions {#727@540 #729@541} physReg:NA Preferences=[rax rcx]
Interval 122: ref RefPositions {#731@542 #733@543} physReg:NA Preferences=[rcx]
Interval 123: long (constant) RefPositions {#741@548 #742@549} physReg:NA Preferences=[allIntButFP]
Interval 124: ref RefPositions {#743@550 #745@551} physReg:NA Preferences=[rcx]
Interval 125: ref RefPositions {#747@552 #749@553} physReg:NA Preferences=[rcx]
Interval 126: long (constant) RefPositions {#757@558 #758@559} physReg:NA Preferences=[allIntButFP]
Interval 127: ref RefPositions {#759@560 #761@561} physReg:NA Preferences=[rcx]
Interval 128: ref RefPositions {#763@562 #765@563} physReg:NA Preferences=[rcx]
Interval 129: long (constant) RefPositions {#773@568 #774@569} physReg:NA Preferences=[allIntButFP]
Interval 130: ref RefPositions {#775@570 #777@571} physReg:NA Preferences=[rcx]
Interval 131: ref RefPositions {#779@572 #781@573} physReg:NA Preferences=[rcx]
Interval 132: long (constant) RefPositions {#789@578 #790@579} physReg:NA Preferences=[allIntButFP]
Interval 133: ref RefPositions {#791@580 #793@581} physReg:NA Preferences=[rcx]
Interval 134: ref RefPositions {#795@582 #797@583} physReg:NA Preferences=[rcx]
Interval 135: byref RefPositions {#806@588 #808@589} physReg:NA Preferences=[rcx]
Interval 136: byref RefPositions {#810@590 #817@595} physReg:NA Preferences=[rcx]
Interval 137: int (constant) RefPositions {#811@592 #813@593} physReg:NA Preferences=[rdx]
Interval 138: int RefPositions {#815@594 #819@595} physReg:NA Preferences=[rdx]
Interval 139: int (def-use conflict) RefPositions {#836@610 #838@611} physReg:NA Preferences=[rax rcx]
Interval 140: int RefPositions {#840@612 #842@613} physReg:NA Preferences=[rcx]
Interval 141: ref RefPositions {#867@696 #869@697} physReg:NA Preferences=[rcx]
Interval 142: ref RefPositions {#871@698 #873@699} physReg:NA Preferences=[rcx]

------------
REFPOSITIONS BEFORE ALLOCATION: 
------------
<RefPosition #0   @0   RefTypeParamDef <Ivl:0 V00>  BB00 regmask=[rcx] minReg=1 fixed regOptional wt=100.00>
<RefPosition #1   @1   RefTypeBB  BB01 regmask=[] minReg=1 wt=100.00>
<RefPosition #2   @6   RefTypeKill <Reg:rax>  BB01 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #3   @6   RefTypeKill <Reg:rcx>  BB01 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #4   @6   RefTypeKill <Reg:rdx>  BB01 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #5   @6   RefTypeKill <Reg:r8 >  BB01 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #6   @6   RefTypeKill <Reg:r9 >  BB01 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #7   @6   RefTypeKill <Reg:r10>  BB01 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #8   @6   RefTypeKill <Reg:r11>  BB01 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #9   @6   RefTypeFixedReg <Reg:rax>  BB01 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #10  @6   RefTypeDef <Ivl:18> CALL BB01 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #11  @7   RefTypeUse <Ivl:18>  BB01 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #12  @12  RefTypeDef <Ivl:19> LCL_VAR_ADDR BB01 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #13  @13  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #14  @13  RefTypeUse <Ivl:19>  BB01 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #15  @14  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #16  @14  RefTypeDef <Ivl:20> PUTARG_REG BB01 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #17  @15  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #18  @15  RefTypeUse <Ivl:20>  BB01 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #19  @16  RefTypeKill <Reg:rax>  BB01 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #20  @16  RefTypeKill <Reg:rcx>  BB01 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #21  @16  RefTypeKill <Reg:rdx>  BB01 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #22  @16  RefTypeKill <Reg:r8 >  BB01 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #23  @16  RefTypeKill <Reg:r9 >  BB01 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #24  @16  RefTypeKill <Reg:r10>  BB01 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #25  @16  RefTypeKill <Reg:r11>  BB01 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #26  @16  RefTypeFixedReg <Reg:rax>  BB01 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #27  @16  RefTypeDef <Ivl:21> CALL BB01 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #28  @17  RefTypeUse <Ivl:21>  BB01 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #29  @18  RefTypeDef <Ivl:11 V21> STORE_LCL_VAR BB01 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #30  @21  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #31  @21  RefTypeUse <Ivl:11 V21> LCL_VAR BB01 regmask=[rcx] minReg=1 last fixed wt=400.00>
<RefPosition #32  @22  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #33  @22  RefTypeDef <Ivl:22> PUTARG_REG BB01 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #34  @24  RefTypeDef <Ivl:23> CNS_INT BB01 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #35  @25  RefTypeUse <Ivl:23>  BB01 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #36  @26  RefTypeDef <Ivl:24> IND BB01 regmask=[rdx] minReg=1 wt=400.00>
<RefPosition #37  @27  RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #38  @27  RefTypeUse <Ivl:24>  BB01 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #39  @28  RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #40  @28  RefTypeDef <Ivl:25> PUTARG_REG BB01 regmask=[rdx] minReg=1 fixed wt=400.00>
<RefPosition #41  @29  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #42  @29  RefTypeUse <Ivl:22>  BB01 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #43  @29  RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #44  @29  RefTypeUse <Ivl:25>  BB01 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #45  @30  RefTypeKill <Reg:rax>  BB01 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #46  @30  RefTypeKill <Reg:rcx>  BB01 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #47  @30  RefTypeKill <Reg:rdx>  BB01 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #48  @30  RefTypeKill <Reg:r8 >  BB01 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #49  @30  RefTypeKill <Reg:r9 >  BB01 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #50  @30  RefTypeKill <Reg:r10>  BB01 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #51  @30  RefTypeKill <Reg:r11>  BB01 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #52  @30  RefTypeFixedReg <Reg:rax>  BB01 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #53  @30  RefTypeDef <Ivl:26> CALL BB01 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #54  @31  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #55  @31  RefTypeUse <Ivl:26>  BB01 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #56  @32  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #57  @32  RefTypeDef <Ivl:27> PUTARG_REG BB01 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #58  @33  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #59  @33  RefTypeUse <Ivl:27>  BB01 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #60  @34  RefTypeKill <Reg:rax>  BB01 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #61  @34  RefTypeKill <Reg:rcx>  BB01 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #62  @34  RefTypeKill <Reg:rdx>  BB01 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #63  @34  RefTypeKill <Reg:r8 >  BB01 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #64  @34  RefTypeKill <Reg:r9 >  BB01 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #65  @34  RefTypeKill <Reg:r10>  BB01 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #66  @34  RefTypeKill <Reg:r11>  BB01 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #67  @38  RefTypeDef <Ivl:28> CNS_INT BB01 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #68  @39  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #69  @39  RefTypeUse <Ivl:28>  BB01 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #70  @40  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #71  @40  RefTypeDef <Ivl:29> PUTARG_REG BB01 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #72  @41  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #73  @41  RefTypeUse <Ivl:29>  BB01 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #74  @42  RefTypeKill <Reg:rax>  BB01 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #75  @42  RefTypeKill <Reg:rcx>  BB01 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #76  @42  RefTypeKill <Reg:rdx>  BB01 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #77  @42  RefTypeKill <Reg:r8 >  BB01 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #78  @42  RefTypeKill <Reg:r9 >  BB01 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #79  @42  RefTypeKill <Reg:r10>  BB01 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #80  @42  RefTypeKill <Reg:r11>  BB01 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #81  @42  RefTypeFixedReg <Reg:rax>  BB01 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #82  @42  RefTypeDef <Ivl:30> CALL BB01 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #83  @43  RefTypeUse <Ivl:30>  BB01 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #84  @44  RefTypeDef <Ivl:2 V08> STORE_LCL_VAR BB01 regmask=[allIntButFP] minReg=1 wt=600.00>
<RefPosition #85  @47  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #86  @47  RefTypeUse <Ivl:2 V08> LCL_VAR BB01 regmask=[rcx] minReg=1 fixed wt=600.00>
<RefPosition #87  @48  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #88  @48  RefTypeDef <Ivl:31> PUTARG_REG BB01 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #89  @49  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #90  @49  RefTypeUse <Ivl:31>  BB01 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #91  @50  RefTypeKill <Reg:rax>  BB01 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #92  @50  RefTypeKill <Reg:rcx>  BB01 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #93  @50  RefTypeKill <Reg:rdx>  BB01 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #94  @50  RefTypeKill <Reg:r8 >  BB01 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #95  @50  RefTypeKill <Reg:r9 >  BB01 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #96  @50  RefTypeKill <Reg:r10>  BB01 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #97  @50  RefTypeKill <Reg:r11>  BB01 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #98  @55  RefTypeUse <Ivl:0 V00> LCL_VAR BB01 regmask=[allIntButFP] minReg=1 wt=2350.00>
<RefPosition #99  @56  RefTypeDef <Ivl:32> LEA BB01 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #100 @59  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #101 @59  RefTypeUse <Ivl:32>  BB01 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #102 @59  RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #103 @59  RefTypeUse <Ivl:2 V08> LCL_VAR BB01 regmask=[rdx] minReg=1 last fixed wt=600.00>
<RefPosition #104 @60  RefTypeKill <Reg:rax>  BB01 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #105 @60  RefTypeKill <Reg:rcx>  BB01 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #106 @60  RefTypeKill <Reg:rdx>  BB01 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #107 @60  RefTypeKill <Reg:r8 >  BB01 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #108 @60  RefTypeKill <Reg:r9 >  BB01 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #109 @60  RefTypeKill <Reg:r10>  BB01 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #110 @60  RefTypeKill <Reg:r11>  BB01 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #111 @60  RefTypeKill <Reg:mm0>  BB01 regmask=[mm0] minReg=1 last wt=100.00>
<RefPosition #112 @60  RefTypeKill <Reg:mm1>  BB01 regmask=[mm1] minReg=1 last wt=100.00>
<RefPosition #113 @60  RefTypeKill <Reg:mm2>  BB01 regmask=[mm2] minReg=1 last wt=100.00>
<RefPosition #114 @60  RefTypeKill <Reg:mm3>  BB01 regmask=[mm3] minReg=1 last wt=100.00>
<RefPosition #115 @60  RefTypeKill <Reg:mm4>  BB01 regmask=[mm4] minReg=1 last wt=100.00>
<RefPosition #116 @60  RefTypeKill <Reg:mm5>  BB01 regmask=[mm5] minReg=1 last wt=100.00>
<RefPosition #117 @64  RefTypeDef <Ivl:33> CNS_INT BB01 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #118 @65  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #119 @65  RefTypeUse <Ivl:33>  BB01 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #120 @66  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #121 @66  RefTypeDef <Ivl:34> PUTARG_REG BB01 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #122 @67  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #123 @67  RefTypeUse <Ivl:34>  BB01 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #124 @68  RefTypeKill <Reg:rax>  BB01 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #125 @68  RefTypeKill <Reg:rcx>  BB01 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #126 @68  RefTypeKill <Reg:rdx>  BB01 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #127 @68  RefTypeKill <Reg:r8 >  BB01 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #128 @68  RefTypeKill <Reg:r9 >  BB01 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #129 @68  RefTypeKill <Reg:r10>  BB01 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #130 @68  RefTypeKill <Reg:r11>  BB01 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #131 @68  RefTypeFixedReg <Reg:rax>  BB01 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #132 @68  RefTypeDef <Ivl:35> CALL BB01 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #133 @69  RefTypeUse <Ivl:35>  BB01 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #134 @70  RefTypeDef <Ivl:3 V09> STORE_LCL_VAR BB01 regmask=[allIntButFP] minReg=1 wt=600.00>
<RefPosition #135 @75  RefTypeUse <Ivl:0 V00> LCL_VAR BB01 regmask=[allIntButFP] minReg=1 wt=2350.00>
<RefPosition #136 @76  RefTypeDef <Ivl:36> IND BB01 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #137 @79  RefTypeUse <Ivl:36>  BB01 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #138 @80  RefTypeDef <Ivl:37> IND BB01 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #139 @81  RefTypeUse <Ivl:37>  BB01 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #140 @82  RefTypeDef <Ivl:4 V10> STORE_LCL_VAR BB01 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #141 @85  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #142 @85  RefTypeUse <Ivl:3 V09> LCL_VAR BB01 regmask=[rcx] minReg=1 fixed wt=600.00>
<RefPosition #143 @86  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #144 @86  RefTypeDef <Ivl:38> PUTARG_REG BB01 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #145 @87  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #146 @87  RefTypeUse <Ivl:38>  BB01 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #147 @88  RefTypeKill <Reg:rax>  BB01 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #148 @88  RefTypeKill <Reg:rcx>  BB01 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #149 @88  RefTypeKill <Reg:rdx>  BB01 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #150 @88  RefTypeKill <Reg:r8 >  BB01 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #151 @88  RefTypeKill <Reg:r9 >  BB01 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #152 @88  RefTypeKill <Reg:r10>  BB01 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #153 @88  RefTypeKill <Reg:r11>  BB01 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #154 @93  RefTypeUse <Ivl:4 V10> LCL_VAR BB01 regmask=[allIntButFP] minReg=1 last wt=400.00>
<RefPosition #155 @94  RefTypeDef <Ivl:39> LEA BB01 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #156 @97  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #157 @97  RefTypeUse <Ivl:39>  BB01 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #158 @97  RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #159 @97  RefTypeUse <Ivl:3 V09> LCL_VAR BB01 regmask=[rdx] minReg=1 last fixed wt=600.00>
<RefPosition #160 @98  RefTypeKill <Reg:rax>  BB01 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #161 @98  RefTypeKill <Reg:rcx>  BB01 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #162 @98  RefTypeKill <Reg:rdx>  BB01 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #163 @98  RefTypeKill <Reg:r8 >  BB01 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #164 @98  RefTypeKill <Reg:r9 >  BB01 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #165 @98  RefTypeKill <Reg:r10>  BB01 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #166 @98  RefTypeKill <Reg:r11>  BB01 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #167 @98  RefTypeKill <Reg:mm0>  BB01 regmask=[mm0] minReg=1 last wt=100.00>
<RefPosition #168 @98  RefTypeKill <Reg:mm1>  BB01 regmask=[mm1] minReg=1 last wt=100.00>
<RefPosition #169 @98  RefTypeKill <Reg:mm2>  BB01 regmask=[mm2] minReg=1 last wt=100.00>
<RefPosition #170 @98  RefTypeKill <Reg:mm3>  BB01 regmask=[mm3] minReg=1 last wt=100.00>
<RefPosition #171 @98  RefTypeKill <Reg:mm4>  BB01 regmask=[mm4] minReg=1 last wt=100.00>
<RefPosition #172 @98  RefTypeKill <Reg:mm5>  BB01 regmask=[mm5] minReg=1 last wt=100.00>
<RefPosition #173 @102 RefTypeDef <Ivl:40> CNS_INT BB01 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #174 @103 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #175 @103 RefTypeUse <Ivl:40>  BB01 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #176 @104 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #177 @104 RefTypeDef <Ivl:41> PUTARG_REG BB01 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #178 @105 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #179 @105 RefTypeUse <Ivl:41>  BB01 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #180 @106 RefTypeKill <Reg:rax>  BB01 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #181 @106 RefTypeKill <Reg:rcx>  BB01 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #182 @106 RefTypeKill <Reg:rdx>  BB01 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #183 @106 RefTypeKill <Reg:r8 >  BB01 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #184 @106 RefTypeKill <Reg:r9 >  BB01 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #185 @106 RefTypeKill <Reg:r10>  BB01 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #186 @106 RefTypeKill <Reg:r11>  BB01 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #187 @106 RefTypeFixedReg <Reg:rax>  BB01 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #188 @106 RefTypeDef <Ivl:42> CALL BB01 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #189 @107 RefTypeUse <Ivl:42>  BB01 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #190 @108 RefTypeDef <Ivl:5 V11> STORE_LCL_VAR BB01 regmask=[allIntButFP] minReg=1 wt=600.00>
<RefPosition #191 @111 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #192 @111 RefTypeUse <Ivl:5 V11> LCL_VAR BB01 regmask=[rcx] minReg=1 fixed wt=600.00>
<RefPosition #193 @112 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #194 @112 RefTypeDef <Ivl:43> PUTARG_REG BB01 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #195 @115 RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #196 @115 RefTypeUse <Ivl:0 V00> LCL_VAR BB01 regmask=[rdx] minReg=1 fixed wt=2350.00>
<RefPosition #197 @116 RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #198 @116 RefTypeDef <Ivl:44> PUTARG_REG BB01 regmask=[rdx] minReg=1 fixed wt=400.00>
<RefPosition #199 @118 RefTypeDef <Ivl:45> CNS_INT BB01 regmask=[r8] minReg=1 wt=400.00>
<RefPosition #200 @119 RefTypeFixedReg <Reg:r8 >  BB01 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #201 @119 RefTypeUse <Ivl:45>  BB01 regmask=[r8] minReg=1 last fixed wt=100.00>
<RefPosition #202 @120 RefTypeFixedReg <Reg:r8 >  BB01 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #203 @120 RefTypeDef <Ivl:46> PUTARG_REG BB01 regmask=[r8] minReg=1 fixed wt=400.00>
<RefPosition #204 @121 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #205 @121 RefTypeUse <Ivl:43>  BB01 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #206 @121 RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #207 @121 RefTypeUse <Ivl:44>  BB01 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #208 @121 RefTypeFixedReg <Reg:r8 >  BB01 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #209 @121 RefTypeUse <Ivl:46>  BB01 regmask=[r8] minReg=1 last fixed wt=100.00>
<RefPosition #210 @122 RefTypeKill <Reg:rax>  BB01 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #211 @122 RefTypeKill <Reg:rcx>  BB01 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #212 @122 RefTypeKill <Reg:rdx>  BB01 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #213 @122 RefTypeKill <Reg:r8 >  BB01 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #214 @122 RefTypeKill <Reg:r9 >  BB01 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #215 @122 RefTypeKill <Reg:r10>  BB01 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #216 @122 RefTypeKill <Reg:r11>  BB01 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #217 @126 RefTypeDef <Ivl:47> CNS_INT BB01 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #218 @127 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #219 @127 RefTypeUse <Ivl:47>  BB01 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #220 @128 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #221 @128 RefTypeDef <Ivl:48> PUTARG_REG BB01 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #222 @129 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #223 @129 RefTypeUse <Ivl:48>  BB01 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #224 @130 RefTypeKill <Reg:rax>  BB01 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #225 @130 RefTypeKill <Reg:rcx>  BB01 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #226 @130 RefTypeKill <Reg:rdx>  BB01 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #227 @130 RefTypeKill <Reg:r8 >  BB01 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #228 @130 RefTypeKill <Reg:r9 >  BB01 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #229 @130 RefTypeKill <Reg:r10>  BB01 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #230 @130 RefTypeKill <Reg:r11>  BB01 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #231 @130 RefTypeFixedReg <Reg:rax>  BB01 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #232 @130 RefTypeDef <Ivl:49> CALL BB01 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #233 @131 RefTypeUse <Ivl:49>  BB01 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #234 @132 RefTypeDef <Ivl:6 V12> STORE_LCL_VAR BB01 regmask=[allIntButFP] minReg=1 wt=600.00>
<RefPosition #235 @135 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #236 @135 RefTypeUse <Ivl:6 V12> LCL_VAR BB01 regmask=[rcx] minReg=1 fixed wt=600.00>
<RefPosition #237 @136 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #238 @136 RefTypeDef <Ivl:50> PUTARG_REG BB01 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #239 @139 RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #240 @139 RefTypeUse <Ivl:5 V11> LCL_VAR BB01 regmask=[rdx] minReg=1 last fixed wt=600.00>
<RefPosition #241 @140 RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #242 @140 RefTypeDef <Ivl:51> PUTARG_REG BB01 regmask=[rdx] minReg=1 fixed wt=400.00>
<RefPosition #243 @141 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #244 @141 RefTypeUse <Ivl:50>  BB01 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #245 @141 RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #246 @141 RefTypeUse <Ivl:51>  BB01 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #247 @142 RefTypeKill <Reg:rax>  BB01 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #248 @142 RefTypeKill <Reg:rcx>  BB01 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #249 @142 RefTypeKill <Reg:rdx>  BB01 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #250 @142 RefTypeKill <Reg:r8 >  BB01 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #251 @142 RefTypeKill <Reg:r9 >  BB01 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #252 @142 RefTypeKill <Reg:r10>  BB01 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #253 @142 RefTypeKill <Reg:r11>  BB01 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #254 @147 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #255 @147 RefTypeUse <Ivl:6 V12> LCL_VAR BB01 regmask=[rcx] minReg=1 last fixed wt=600.00>
<RefPosition #256 @148 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #257 @148 RefTypeDef <Ivl:52> PUTARG_REG BB01 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #258 @149 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #259 @149 RefTypeUse <Ivl:52>  BB01 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #260 @150 RefTypeKill <Reg:rax>  BB01 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #261 @150 RefTypeKill <Reg:rcx>  BB01 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #262 @150 RefTypeKill <Reg:rdx>  BB01 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #263 @150 RefTypeKill <Reg:r8 >  BB01 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #264 @150 RefTypeKill <Reg:r9 >  BB01 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #265 @150 RefTypeKill <Reg:r10>  BB01 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #266 @150 RefTypeKill <Reg:r11>  BB01 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #267 @154 RefTypeKill <Reg:rax>  BB01 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #268 @154 RefTypeKill <Reg:rcx>  BB01 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #269 @154 RefTypeKill <Reg:rdx>  BB01 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #270 @154 RefTypeKill <Reg:r8 >  BB01 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #271 @154 RefTypeKill <Reg:r9 >  BB01 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #272 @154 RefTypeKill <Reg:r10>  BB01 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #273 @154 RefTypeKill <Reg:r11>  BB01 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #274 @154 RefTypeFixedReg <Reg:rax>  BB01 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #275 @154 RefTypeDef <Ivl:53> CALL BB01 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #276 @155 RefTypeUse <Ivl:53>  BB01 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #277 @160 RefTypeDef <Ivl:54> LCL_VAR_ADDR BB01 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #278 @161 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #279 @161 RefTypeUse <Ivl:54>  BB01 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #280 @162 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #281 @162 RefTypeDef <Ivl:55> PUTARG_REG BB01 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #282 @163 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #283 @163 RefTypeUse <Ivl:55>  BB01 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #284 @164 RefTypeKill <Reg:rax>  BB01 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #285 @164 RefTypeKill <Reg:rcx>  BB01 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #286 @164 RefTypeKill <Reg:rdx>  BB01 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #287 @164 RefTypeKill <Reg:r8 >  BB01 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #288 @164 RefTypeKill <Reg:r9 >  BB01 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #289 @164 RefTypeKill <Reg:r10>  BB01 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #290 @164 RefTypeKill <Reg:r11>  BB01 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #291 @164 RefTypeFixedReg <Reg:rax>  BB01 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #292 @164 RefTypeDef <Ivl:56> CALL BB01 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #293 @165 RefTypeUse <Ivl:56>  BB01 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #294 @166 RefTypeDef <Ivl:12 V22> STORE_LCL_VAR BB01 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #295 @169 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #296 @169 RefTypeUse <Ivl:12 V22> LCL_VAR BB01 regmask=[rcx] minReg=1 last fixed wt=400.00>
<RefPosition #297 @170 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #298 @170 RefTypeDef <Ivl:57> PUTARG_REG BB01 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #299 @172 RefTypeDef <Ivl:58> CNS_INT BB01 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #300 @173 RefTypeUse <Ivl:58>  BB01 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #301 @174 RefTypeDef <Ivl:59> IND BB01 regmask=[rdx] minReg=1 wt=400.00>
<RefPosition #302 @175 RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #303 @175 RefTypeUse <Ivl:59>  BB01 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #304 @176 RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #305 @176 RefTypeDef <Ivl:60> PUTARG_REG BB01 regmask=[rdx] minReg=1 fixed wt=400.00>
<RefPosition #306 @177 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #307 @177 RefTypeUse <Ivl:57>  BB01 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #308 @177 RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #309 @177 RefTypeUse <Ivl:60>  BB01 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #310 @178 RefTypeKill <Reg:rax>  BB01 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #311 @178 RefTypeKill <Reg:rcx>  BB01 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #312 @178 RefTypeKill <Reg:rdx>  BB01 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #313 @178 RefTypeKill <Reg:r8 >  BB01 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #314 @178 RefTypeKill <Reg:r9 >  BB01 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #315 @178 RefTypeKill <Reg:r10>  BB01 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #316 @178 RefTypeKill <Reg:r11>  BB01 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #317 @178 RefTypeFixedReg <Reg:rax>  BB01 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #318 @178 RefTypeDef <Ivl:61> CALL BB01 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #319 @179 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #320 @179 RefTypeUse <Ivl:61>  BB01 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #321 @180 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #322 @180 RefTypeDef <Ivl:62> PUTARG_REG BB01 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #323 @181 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #324 @181 RefTypeUse <Ivl:62>  BB01 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #325 @182 RefTypeKill <Reg:rax>  BB01 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #326 @182 RefTypeKill <Reg:rcx>  BB01 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #327 @182 RefTypeKill <Reg:rdx>  BB01 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #328 @182 RefTypeKill <Reg:r8 >  BB01 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #329 @182 RefTypeKill <Reg:r9 >  BB01 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #330 @182 RefTypeKill <Reg:r10>  BB01 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #331 @182 RefTypeKill <Reg:r11>  BB01 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #332 @186 RefTypeDef <Ivl:63> CNS_INT BB01 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #333 @187 RefTypeUse <Ivl:63>  BB01 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #334 @188 RefTypeDef <Ivl:1 V03> STORE_LCL_VAR BB01 regmask=[allIntButFP] minReg=1 wt=2500.00>
<RefPosition #335 @189 RefTypeBB  BB02 regmask=[] minReg=1 wt=800.00>
<RefPosition #336 @197 RefTypeUse <Ivl:0 V00> LCL_VAR BB02 regmask=[allIntButFP] minReg=1 wt=2350.00>
<RefPosition #337 @198 RefTypeDef <Ivl:64> IND BB02 regmask=[allIntButFP] minReg=1 wt=3200.00>
<RefPosition #338 @199 RefTypeUse <Ivl:64>  BB02 regmask=[allIntButFP] minReg=1 last wt=800.00>
<RefPosition #339 @204 RefTypeDef <Ivl:65> CNS_INT BB02 regmask=[allIntButFP] minReg=1 wt=3200.00>
<RefPosition #340 @205 RefTypeUse <Ivl:65>  BB02 regmask=[allIntButFP] minReg=1 last wt=800.00>
<RefPosition #341 @207 RefTypeBB  BB03 regmask=[] minReg=1 wt=800.00>
<RefPosition #342 @212 RefTypeDef <Ivl:66> LCL_VAR_ADDR BB03 regmask=[rdx] minReg=1 wt=3200.00>
<RefPosition #343 @213 RefTypeFixedReg <Reg:rdx>  BB03 regmask=[rdx] minReg=1 wt=800.00>
<RefPosition #344 @213 RefTypeUse <Ivl:66>  BB03 regmask=[rdx] minReg=1 last fixed wt=800.00>
<RefPosition #345 @214 RefTypeFixedReg <Reg:rdx>  BB03 regmask=[rdx] minReg=1 wt=800.00>
<RefPosition #346 @214 RefTypeDef <Ivl:67> PUTARG_REG BB03 regmask=[rdx] minReg=1 fixed wt=3200.00>
<RefPosition #347 @216 RefTypeDef <Ivl:68> LCL_VAR BB03 regmask=[rcx] minReg=1 wt=3200.00>
<RefPosition #348 @217 RefTypeFixedReg <Reg:rcx>  BB03 regmask=[rcx] minReg=1 wt=800.00>
<RefPosition #349 @217 RefTypeUse <Ivl:68>  BB03 regmask=[rcx] minReg=1 last fixed wt=800.00>
<RefPosition #350 @218 RefTypeFixedReg <Reg:rcx>  BB03 regmask=[rcx] minReg=1 wt=800.00>
<RefPosition #351 @218 RefTypeDef <Ivl:69> PUTARG_REG BB03 regmask=[rcx] minReg=1 fixed wt=3200.00>
<RefPosition #352 @219 RefTypeFixedReg <Reg:rdx>  BB03 regmask=[rdx] minReg=1 wt=800.00>
<RefPosition #353 @219 RefTypeUse <Ivl:67>  BB03 regmask=[rdx] minReg=1 last fixed wt=800.00>
<RefPosition #354 @219 RefTypeFixedReg <Reg:rcx>  BB03 regmask=[rcx] minReg=1 wt=800.00>
<RefPosition #355 @219 RefTypeUse <Ivl:69>  BB03 regmask=[rcx] minReg=1 last fixed wt=800.00>
<RefPosition #356 @220 RefTypeKill <Reg:rax>  BB03 regmask=[rax] minReg=1 last wt=800.00>
<RefPosition #357 @220 RefTypeKill <Reg:rcx>  BB03 regmask=[rcx] minReg=1 last wt=800.00>
<RefPosition #358 @220 RefTypeKill <Reg:rdx>  BB03 regmask=[rdx] minReg=1 last wt=800.00>
<RefPosition #359 @220 RefTypeKill <Reg:r8 >  BB03 regmask=[r8] minReg=1 last wt=800.00>
<RefPosition #360 @220 RefTypeKill <Reg:r9 >  BB03 regmask=[r9] minReg=1 last wt=800.00>
<RefPosition #361 @220 RefTypeKill <Reg:r10>  BB03 regmask=[r10] minReg=1 last wt=800.00>
<RefPosition #362 @220 RefTypeKill <Reg:r11>  BB03 regmask=[r11] minReg=1 last wt=800.00>
<RefPosition #363 @224 RefTypeDef <Ivl:70> CNS_INT BB03 regmask=[rcx] minReg=1 wt=3200.00>
<RefPosition #364 @225 RefTypeFixedReg <Reg:rcx>  BB03 regmask=[rcx] minReg=1 wt=800.00>
<RefPosition #365 @225 RefTypeUse <Ivl:70>  BB03 regmask=[rcx] minReg=1 last fixed wt=800.00>
<RefPosition #366 @226 RefTypeFixedReg <Reg:rcx>  BB03 regmask=[rcx] minReg=1 wt=800.00>
<RefPosition #367 @226 RefTypeDef <Ivl:71> PUTARG_REG BB03 regmask=[rcx] minReg=1 fixed wt=3200.00>
<RefPosition #368 @227 RefTypeFixedReg <Reg:rcx>  BB03 regmask=[rcx] minReg=1 wt=800.00>
<RefPosition #369 @227 RefTypeUse <Ivl:71>  BB03 regmask=[rcx] minReg=1 last fixed wt=800.00>
<RefPosition #370 @228 RefTypeKill <Reg:rax>  BB03 regmask=[rax] minReg=1 last wt=800.00>
<RefPosition #371 @228 RefTypeKill <Reg:rcx>  BB03 regmask=[rcx] minReg=1 last wt=800.00>
<RefPosition #372 @228 RefTypeKill <Reg:rdx>  BB03 regmask=[rdx] minReg=1 last wt=800.00>
<RefPosition #373 @228 RefTypeKill <Reg:r8 >  BB03 regmask=[r8] minReg=1 last wt=800.00>
<RefPosition #374 @228 RefTypeKill <Reg:r9 >  BB03 regmask=[r9] minReg=1 last wt=800.00>
<RefPosition #375 @228 RefTypeKill <Reg:r10>  BB03 regmask=[r10] minReg=1 last wt=800.00>
<RefPosition #376 @228 RefTypeKill <Reg:r11>  BB03 regmask=[r11] minReg=1 last wt=800.00>
<RefPosition #377 @228 RefTypeFixedReg <Reg:rax>  BB03 regmask=[rax] minReg=1 wt=800.00>
<RefPosition #378 @228 RefTypeDef <Ivl:72> CALL BB03 regmask=[rax] minReg=1 fixed wt=3200.00>
<RefPosition #379 @229 RefTypeUse <Ivl:72>  BB03 regmask=[allIntButFP] minReg=1 last wt=800.00>
<RefPosition #380 @230 RefTypeDef <Ivl:7 V13> STORE_LCL_VAR BB03 regmask=[allIntButFP] minReg=1 wt=4800.00>
<RefPosition #381 @235 RefTypeUse <Ivl:0 V00> LCL_VAR BB03 regmask=[allIntButFP] minReg=1 wt=2350.00>
<RefPosition #382 @236 RefTypeDef <Ivl:73> IND BB03 regmask=[allIntButFP] minReg=1 wt=3200.00>
<RefPosition #383 @239 RefTypeUse <Ivl:73>  BB03 regmask=[allIntButFP] minReg=1 last wt=800.00>
<RefPosition #384 @240 RefTypeDef <Ivl:74> IND BB03 regmask=[allIntButFP] minReg=1 wt=3200.00>
<RefPosition #385 @241 RefTypeUse <Ivl:74>  BB03 regmask=[allIntButFP] minReg=1 last wt=800.00>
<RefPosition #386 @242 RefTypeDef <Ivl:8 V14> STORE_LCL_VAR BB03 regmask=[allIntButFP] minReg=1 wt=3200.00>
<RefPosition #387 @245 RefTypeFixedReg <Reg:rcx>  BB03 regmask=[rcx] minReg=1 wt=800.00>
<RefPosition #388 @245 RefTypeUse <Ivl:7 V13> LCL_VAR BB03 regmask=[rcx] minReg=1 fixed wt=4800.00>
<RefPosition #389 @246 RefTypeFixedReg <Reg:rcx>  BB03 regmask=[rcx] minReg=1 wt=800.00>
<RefPosition #390 @246 RefTypeDef <Ivl:75> PUTARG_REG BB03 regmask=[rcx] minReg=1 fixed wt=3200.00>
<RefPosition #391 @247 RefTypeFixedReg <Reg:rcx>  BB03 regmask=[rcx] minReg=1 wt=800.00>
<RefPosition #392 @247 RefTypeUse <Ivl:75>  BB03 regmask=[rcx] minReg=1 last fixed wt=800.00>
<RefPosition #393 @248 RefTypeKill <Reg:rax>  BB03 regmask=[rax] minReg=1 last wt=800.00>
<RefPosition #394 @248 RefTypeKill <Reg:rcx>  BB03 regmask=[rcx] minReg=1 last wt=800.00>
<RefPosition #395 @248 RefTypeKill <Reg:rdx>  BB03 regmask=[rdx] minReg=1 last wt=800.00>
<RefPosition #396 @248 RefTypeKill <Reg:r8 >  BB03 regmask=[r8] minReg=1 last wt=800.00>
<RefPosition #397 @248 RefTypeKill <Reg:r9 >  BB03 regmask=[r9] minReg=1 last wt=800.00>
<RefPosition #398 @248 RefTypeKill <Reg:r10>  BB03 regmask=[r10] minReg=1 last wt=800.00>
<RefPosition #399 @248 RefTypeKill <Reg:r11>  BB03 regmask=[r11] minReg=1 last wt=800.00>
<RefPosition #400 @253 RefTypeUse <Ivl:8 V14> LCL_VAR BB03 regmask=[allIntButFP] minReg=1 last wt=3200.00>
<RefPosition #401 @254 RefTypeDef <Ivl:76> LEA BB03 regmask=[rcx] minReg=1 wt=3200.00>
<RefPosition #402 @257 RefTypeFixedReg <Reg:rcx>  BB03 regmask=[rcx] minReg=1 wt=800.00>
<RefPosition #403 @257 RefTypeUse <Ivl:76>  BB03 regmask=[rcx] minReg=1 last fixed wt=800.00>
<RefPosition #404 @257 RefTypeFixedReg <Reg:rdx>  BB03 regmask=[rdx] minReg=1 wt=800.00>
<RefPosition #405 @257 RefTypeUse <Ivl:7 V13> LCL_VAR BB03 regmask=[rdx] minReg=1 last fixed wt=4800.00>
<RefPosition #406 @258 RefTypeKill <Reg:rax>  BB03 regmask=[rax] minReg=1 last wt=800.00>
<RefPosition #407 @258 RefTypeKill <Reg:rcx>  BB03 regmask=[rcx] minReg=1 last wt=800.00>
<RefPosition #408 @258 RefTypeKill <Reg:rdx>  BB03 regmask=[rdx] minReg=1 last wt=800.00>
<RefPosition #409 @258 RefTypeKill <Reg:r8 >  BB03 regmask=[r8] minReg=1 last wt=800.00>
<RefPosition #410 @258 RefTypeKill <Reg:r9 >  BB03 regmask=[r9] minReg=1 last wt=800.00>
<RefPosition #411 @258 RefTypeKill <Reg:r10>  BB03 regmask=[r10] minReg=1 last wt=800.00>
<RefPosition #412 @258 RefTypeKill <Reg:r11>  BB03 regmask=[r11] minReg=1 last wt=800.00>
<RefPosition #413 @258 RefTypeKill <Reg:mm0>  BB03 regmask=[mm0] minReg=1 last wt=800.00>
<RefPosition #414 @258 RefTypeKill <Reg:mm1>  BB03 regmask=[mm1] minReg=1 last wt=800.00>
<RefPosition #415 @258 RefTypeKill <Reg:mm2>  BB03 regmask=[mm2] minReg=1 last wt=800.00>
<RefPosition #416 @258 RefTypeKill <Reg:mm3>  BB03 regmask=[mm3] minReg=1 last wt=800.00>
<RefPosition #417 @258 RefTypeKill <Reg:mm4>  BB03 regmask=[mm4] minReg=1 last wt=800.00>
<RefPosition #418 @258 RefTypeKill <Reg:mm5>  BB03 regmask=[mm5] minReg=1 last wt=800.00>
<RefPosition #419 @265 RefTypeUse <Ivl:0 V00> LCL_VAR BB03 regmask=[allIntButFP] minReg=1 wt=2350.00>
<RefPosition #420 @266 RefTypeDef <Ivl:77> IND BB03 regmask=[allIntButFP] minReg=1 wt=3200.00>
<RefPosition #421 @267 RefTypeUse <Ivl:77>  BB03 regmask=[allIntButFP] minReg=1 last wt=800.00>
<RefPosition #422 @268 RefTypeDef <Ivl:16 V28> STORE_LCL_VAR BB03 regmask=[allIntButFP] minReg=1 wt=2400.00>
<RefPosition #423 @271 RefTypeUse <Ivl:16 V28> LCL_VAR BB03 regmask=[allIntButFP] minReg=1 wt=2400.00>
<RefPosition #424 @272 RefTypeDef <Ivl:78> LEA BB03 regmask=[rcx] minReg=1 wt=3200.00>
<RefPosition #425 @277 RefTypeUse <Ivl:16 V28> LCL_VAR BB03 regmask=[allIntButFP] minReg=1 last wt=2400.00>
<RefPosition #426 @278 RefTypeDef <Ivl:79> IND BB03 regmask=[allIntButFP] minReg=1 wt=3200.00>
<RefPosition #427 @281 RefTypeUse <Ivl:79>  BB03 regmask=[allIntButFP] minReg=1 last wt=800.00>
<RefPosition #428 @282 RefTypeDef <Ivl:80> IND BB03 regmask=[allIntButFP] minReg=1 wt=3200.00>
<RefPosition #429 @283 RefTypeUse <Ivl:80>  BB03 regmask=[allIntButFP] minReg=1 last wt=800.00>
<RefPosition #430 @284 RefTypeDef <Ivl:15 V27> STORE_LCL_VAR BB03 regmask=[allIntButFP] minReg=1 wt=2400.00>
<RefPosition #431 @287 RefTypeFixedReg <Reg:rcx>  BB03 regmask=[rcx] minReg=1 wt=800.00>
<RefPosition #432 @287 RefTypeUse <Ivl:78>  BB03 regmask=[rcx] minReg=1 last fixed wt=800.00>
<RefPosition #433 @287 RefTypeFixedReg <Reg:rdx>  BB03 regmask=[rdx] minReg=1 wt=800.00>
<RefPosition #434 @287 RefTypeUse <Ivl:15 V27> LCL_VAR BB03 regmask=[rdx] minReg=1 fixed wt=2400.00>
<RefPosition #435 @288 RefTypeKill <Reg:rax>  BB03 regmask=[rax] minReg=1 last wt=800.00>
<RefPosition #436 @288 RefTypeKill <Reg:rcx>  BB03 regmask=[rcx] minReg=1 last wt=800.00>
<RefPosition #437 @288 RefTypeKill <Reg:rdx>  BB03 regmask=[rdx] minReg=1 last wt=800.00>
<RefPosition #438 @288 RefTypeKill <Reg:r8 >  BB03 regmask=[r8] minReg=1 last wt=800.00>
<RefPosition #439 @288 RefTypeKill <Reg:r9 >  BB03 regmask=[r9] minReg=1 last wt=800.00>
<RefPosition #440 @288 RefTypeKill <Reg:r10>  BB03 regmask=[r10] minReg=1 last wt=800.00>
<RefPosition #441 @288 RefTypeKill <Reg:r11>  BB03 regmask=[r11] minReg=1 last wt=800.00>
<RefPosition #442 @288 RefTypeKill <Reg:mm0>  BB03 regmask=[mm0] minReg=1 last wt=800.00>
<RefPosition #443 @288 RefTypeKill <Reg:mm1>  BB03 regmask=[mm1] minReg=1 last wt=800.00>
<RefPosition #444 @288 RefTypeKill <Reg:mm2>  BB03 regmask=[mm2] minReg=1 last wt=800.00>
<RefPosition #445 @288 RefTypeKill <Reg:mm3>  BB03 regmask=[mm3] minReg=1 last wt=800.00>
<RefPosition #446 @288 RefTypeKill <Reg:mm4>  BB03 regmask=[mm4] minReg=1 last wt=800.00>
<RefPosition #447 @288 RefTypeKill <Reg:mm5>  BB03 regmask=[mm5] minReg=1 last wt=800.00>
<RefPosition #448 @292 RefTypeDef <Ivl:81> CNS_INT BB03 regmask=[rcx] minReg=1 wt=3200.00>
<RefPosition #449 @293 RefTypeFixedReg <Reg:rcx>  BB03 regmask=[rcx] minReg=1 wt=800.00>
<RefPosition #450 @293 RefTypeUse <Ivl:81>  BB03 regmask=[rcx] minReg=1 last fixed wt=800.00>
<RefPosition #451 @294 RefTypeFixedReg <Reg:rcx>  BB03 regmask=[rcx] minReg=1 wt=800.00>
<RefPosition #452 @294 RefTypeDef <Ivl:82> PUTARG_REG BB03 regmask=[rcx] minReg=1 fixed wt=3200.00>
<RefPosition #453 @295 RefTypeFixedReg <Reg:rcx>  BB03 regmask=[rcx] minReg=1 wt=800.00>
<RefPosition #454 @295 RefTypeUse <Ivl:82>  BB03 regmask=[rcx] minReg=1 last fixed wt=800.00>
<RefPosition #455 @296 RefTypeKill <Reg:rax>  BB03 regmask=[rax] minReg=1 last wt=800.00>
<RefPosition #456 @296 RefTypeKill <Reg:rcx>  BB03 regmask=[rcx] minReg=1 last wt=800.00>
<RefPosition #457 @296 RefTypeKill <Reg:rdx>  BB03 regmask=[rdx] minReg=1 last wt=800.00>
<RefPosition #458 @296 RefTypeKill <Reg:r8 >  BB03 regmask=[r8] minReg=1 last wt=800.00>
<RefPosition #459 @296 RefTypeKill <Reg:r9 >  BB03 regmask=[r9] minReg=1 last wt=800.00>
<RefPosition #460 @296 RefTypeKill <Reg:r10>  BB03 regmask=[r10] minReg=1 last wt=800.00>
<RefPosition #461 @296 RefTypeKill <Reg:r11>  BB03 regmask=[r11] minReg=1 last wt=800.00>
<RefPosition #462 @296 RefTypeFixedReg <Reg:rax>  BB03 regmask=[rax] minReg=1 wt=800.00>
<RefPosition #463 @296 RefTypeDef <Ivl:83> CALL BB03 regmask=[rax] minReg=1 fixed wt=3200.00>
<RefPosition #464 @297 RefTypeUse <Ivl:83>  BB03 regmask=[allIntButFP] minReg=1 last wt=800.00>
<RefPosition #465 @298 RefTypeDef <Ivl:9 V15> STORE_LCL_VAR BB03 regmask=[allIntButFP] minReg=1 wt=4800.00>
<RefPosition #466 @301 RefTypeUse <Ivl:15 V27> LCL_VAR BB03 regmask=[allIntButFP] minReg=1 last wt=2400.00>
<RefPosition #467 @302 RefTypeDef <Ivl:10 V16> STORE_LCL_VAR BB03 regmask=[allIntButFP] minReg=1 wt=3200.00>
<RefPosition #468 @305 RefTypeFixedReg <Reg:rcx>  BB03 regmask=[rcx] minReg=1 wt=800.00>
<RefPosition #469 @305 RefTypeUse <Ivl:9 V15> LCL_VAR BB03 regmask=[rcx] minReg=1 fixed wt=4800.00>
<RefPosition #470 @306 RefTypeFixedReg <Reg:rcx>  BB03 regmask=[rcx] minReg=1 wt=800.00>
<RefPosition #471 @306 RefTypeDef <Ivl:84> PUTARG_REG BB03 regmask=[rcx] minReg=1 fixed wt=3200.00>
<RefPosition #472 @307 RefTypeFixedReg <Reg:rcx>  BB03 regmask=[rcx] minReg=1 wt=800.00>
<RefPosition #473 @307 RefTypeUse <Ivl:84>  BB03 regmask=[rcx] minReg=1 last fixed wt=800.00>
<RefPosition #474 @308 RefTypeKill <Reg:rax>  BB03 regmask=[rax] minReg=1 last wt=800.00>
<RefPosition #475 @308 RefTypeKill <Reg:rcx>  BB03 regmask=[rcx] minReg=1 last wt=800.00>
<RefPosition #476 @308 RefTypeKill <Reg:rdx>  BB03 regmask=[rdx] minReg=1 last wt=800.00>
<RefPosition #477 @308 RefTypeKill <Reg:r8 >  BB03 regmask=[r8] minReg=1 last wt=800.00>
<RefPosition #478 @308 RefTypeKill <Reg:r9 >  BB03 regmask=[r9] minReg=1 last wt=800.00>
<RefPosition #479 @308 RefTypeKill <Reg:r10>  BB03 regmask=[r10] minReg=1 last wt=800.00>
<RefPosition #480 @308 RefTypeKill <Reg:r11>  BB03 regmask=[r11] minReg=1 last wt=800.00>
<RefPosition #481 @313 RefTypeUse <Ivl:10 V16> LCL_VAR BB03 regmask=[allIntButFP] minReg=1 last wt=3200.00>
<RefPosition #482 @314 RefTypeDef <Ivl:85> LEA BB03 regmask=[rcx] minReg=1 wt=3200.00>
<RefPosition #483 @317 RefTypeFixedReg <Reg:rcx>  BB03 regmask=[rcx] minReg=1 wt=800.00>
<RefPosition #484 @317 RefTypeUse <Ivl:85>  BB03 regmask=[rcx] minReg=1 last fixed wt=800.00>
<RefPosition #485 @317 RefTypeFixedReg <Reg:rdx>  BB03 regmask=[rdx] minReg=1 wt=800.00>
<RefPosition #486 @317 RefTypeUse <Ivl:9 V15> LCL_VAR BB03 regmask=[rdx] minReg=1 last fixed wt=4800.00>
<RefPosition #487 @318 RefTypeKill <Reg:rax>  BB03 regmask=[rax] minReg=1 last wt=800.00>
<RefPosition #488 @318 RefTypeKill <Reg:rcx>  BB03 regmask=[rcx] minReg=1 last wt=800.00>
<RefPosition #489 @318 RefTypeKill <Reg:rdx>  BB03 regmask=[rdx] minReg=1 last wt=800.00>
<RefPosition #490 @318 RefTypeKill <Reg:r8 >  BB03 regmask=[r8] minReg=1 last wt=800.00>
<RefPosition #491 @318 RefTypeKill <Reg:r9 >  BB03 regmask=[r9] minReg=1 last wt=800.00>
<RefPosition #492 @318 RefTypeKill <Reg:r10>  BB03 regmask=[r10] minReg=1 last wt=800.00>
<RefPosition #493 @318 RefTypeKill <Reg:r11>  BB03 regmask=[r11] minReg=1 last wt=800.00>
<RefPosition #494 @318 RefTypeKill <Reg:mm0>  BB03 regmask=[mm0] minReg=1 last wt=800.00>
<RefPosition #495 @318 RefTypeKill <Reg:mm1>  BB03 regmask=[mm1] minReg=1 last wt=800.00>
<RefPosition #496 @318 RefTypeKill <Reg:mm2>  BB03 regmask=[mm2] minReg=1 last wt=800.00>
<RefPosition #497 @318 RefTypeKill <Reg:mm3>  BB03 regmask=[mm3] minReg=1 last wt=800.00>
<RefPosition #498 @318 RefTypeKill <Reg:mm4>  BB03 regmask=[mm4] minReg=1 last wt=800.00>
<RefPosition #499 @318 RefTypeKill <Reg:mm5>  BB03 regmask=[mm5] minReg=1 last wt=800.00>
<RefPosition #500 @319 RefTypeBB  BB04 regmask=[] minReg=1 wt=800.00>
<RefPosition #501 @329 RefTypeBB  BB05 regmask=[] minReg=1 wt=400.00>
<RefPosition #502 @332 RefTypeDef <Ivl:86> LCL_VAR BB05 regmask=[rcx] minReg=1 wt=1600.00>
<RefPosition #503 @333 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #504 @333 RefTypeUse <Ivl:86>  BB05 regmask=[rcx] minReg=1 last fixed wt=400.00>
<RefPosition #505 @334 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #506 @334 RefTypeDef <Ivl:87> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=1600.00>
<RefPosition #507 @335 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #508 @335 RefTypeUse <Ivl:87>  BB05 regmask=[rcx] minReg=1 last fixed wt=400.00>
<RefPosition #509 @336 RefTypeKill <Reg:rax>  BB05 regmask=[rax] minReg=1 last wt=400.00>
<RefPosition #510 @336 RefTypeKill <Reg:rcx>  BB05 regmask=[rcx] minReg=1 last wt=400.00>
<RefPosition #511 @336 RefTypeKill <Reg:rdx>  BB05 regmask=[rdx] minReg=1 last wt=400.00>
<RefPosition #512 @336 RefTypeKill <Reg:r8 >  BB05 regmask=[r8] minReg=1 last wt=400.00>
<RefPosition #513 @336 RefTypeKill <Reg:r9 >  BB05 regmask=[r9] minReg=1 last wt=400.00>
<RefPosition #514 @336 RefTypeKill <Reg:r10>  BB05 regmask=[r10] minReg=1 last wt=400.00>
<RefPosition #515 @336 RefTypeKill <Reg:r11>  BB05 regmask=[r11] minReg=1 last wt=400.00>
<RefPosition #516 @337 RefTypeBB  BB06 regmask=[] minReg=1 wt=800.00>
<RefPosition #517 @345 RefTypeUse <Ivl:1 V03> LCL_VAR BB06 regmask=[allIntButFP] minReg=1 last wt=2500.00>
<RefPosition #518 @346 RefTypeDef <Ivl:88> ADD BB06 regmask=[allIntButFP] minReg=1 wt=3200.00>
<RefPosition #519 @347 RefTypeUse <Ivl:88>  BB06 regmask=[allIntButFP] minReg=1 last wt=800.00>
<RefPosition #520 @348 RefTypeDef <Ivl:1 V03> STORE_LCL_VAR BB06 regmask=[allIntButFP] minReg=1 wt=2500.00>
<RefPosition #521 @355 RefTypeUse <Ivl:1 V03> LCL_VAR BB06 regmask=[allIntButFP] minReg=1 regOptional wt=2500.00>
<RefPosition #522 @359 RefTypeExpUse <Ivl:1 V03>  BB06 regmask=[allIntButFP] minReg=1 regOptional wt=800.00>
<RefPosition #523 @359 RefTypeBB  BB07 regmask=[] minReg=1 wt=100.00>
<RefPosition #524 @364 RefTypeKill <Reg:rax>  BB07 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #525 @364 RefTypeKill <Reg:rcx>  BB07 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #526 @364 RefTypeKill <Reg:rdx>  BB07 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #527 @364 RefTypeKill <Reg:r8 >  BB07 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #528 @364 RefTypeKill <Reg:r9 >  BB07 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #529 @364 RefTypeKill <Reg:r10>  BB07 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #530 @364 RefTypeKill <Reg:r11>  BB07 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #531 @364 RefTypeFixedReg <Reg:rax>  BB07 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #532 @364 RefTypeDef <Ivl:89> CALL BB07 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #533 @365 RefTypeUse <Ivl:89>  BB07 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #534 @370 RefTypeDef <Ivl:90> LCL_VAR_ADDR BB07 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #535 @371 RefTypeFixedReg <Reg:rcx>  BB07 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #536 @371 RefTypeUse <Ivl:90>  BB07 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #537 @372 RefTypeFixedReg <Reg:rcx>  BB07 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #538 @372 RefTypeDef <Ivl:91> PUTARG_REG BB07 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #539 @373 RefTypeFixedReg <Reg:rcx>  BB07 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #540 @373 RefTypeUse <Ivl:91>  BB07 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #541 @374 RefTypeKill <Reg:rax>  BB07 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #542 @374 RefTypeKill <Reg:rcx>  BB07 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #543 @374 RefTypeKill <Reg:rdx>  BB07 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #544 @374 RefTypeKill <Reg:r8 >  BB07 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #545 @374 RefTypeKill <Reg:r9 >  BB07 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #546 @374 RefTypeKill <Reg:r10>  BB07 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #547 @374 RefTypeKill <Reg:r11>  BB07 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #548 @374 RefTypeFixedReg <Reg:rax>  BB07 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #549 @374 RefTypeDef <Ivl:92> CALL BB07 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #550 @375 RefTypeUse <Ivl:92>  BB07 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #551 @376 RefTypeDef <Ivl:13 V23> STORE_LCL_VAR BB07 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #552 @379 RefTypeFixedReg <Reg:rcx>  BB07 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #553 @379 RefTypeUse <Ivl:13 V23> LCL_VAR BB07 regmask=[rcx] minReg=1 last fixed wt=400.00>
<RefPosition #554 @380 RefTypeFixedReg <Reg:rcx>  BB07 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #555 @380 RefTypeDef <Ivl:93> PUTARG_REG BB07 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #556 @382 RefTypeDef <Ivl:94> CNS_INT BB07 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #557 @383 RefTypeUse <Ivl:94>  BB07 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #558 @384 RefTypeDef <Ivl:95> IND BB07 regmask=[rdx] minReg=1 wt=400.00>
<RefPosition #559 @385 RefTypeFixedReg <Reg:rdx>  BB07 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #560 @385 RefTypeUse <Ivl:95>  BB07 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #561 @386 RefTypeFixedReg <Reg:rdx>  BB07 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #562 @386 RefTypeDef <Ivl:96> PUTARG_REG BB07 regmask=[rdx] minReg=1 fixed wt=400.00>
<RefPosition #563 @387 RefTypeFixedReg <Reg:rcx>  BB07 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #564 @387 RefTypeUse <Ivl:93>  BB07 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #565 @387 RefTypeFixedReg <Reg:rdx>  BB07 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #566 @387 RefTypeUse <Ivl:96>  BB07 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #567 @388 RefTypeKill <Reg:rax>  BB07 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #568 @388 RefTypeKill <Reg:rcx>  BB07 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #569 @388 RefTypeKill <Reg:rdx>  BB07 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #570 @388 RefTypeKill <Reg:r8 >  BB07 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #571 @388 RefTypeKill <Reg:r9 >  BB07 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #572 @388 RefTypeKill <Reg:r10>  BB07 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #573 @388 RefTypeKill <Reg:r11>  BB07 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #574 @388 RefTypeFixedReg <Reg:rax>  BB07 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #575 @388 RefTypeDef <Ivl:97> CALL BB07 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #576 @389 RefTypeFixedReg <Reg:rcx>  BB07 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #577 @389 RefTypeUse <Ivl:97>  BB07 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #578 @390 RefTypeFixedReg <Reg:rcx>  BB07 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #579 @390 RefTypeDef <Ivl:98> PUTARG_REG BB07 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #580 @391 RefTypeFixedReg <Reg:rcx>  BB07 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #581 @391 RefTypeUse <Ivl:98>  BB07 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #582 @392 RefTypeKill <Reg:rax>  BB07 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #583 @392 RefTypeKill <Reg:rcx>  BB07 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #584 @392 RefTypeKill <Reg:rdx>  BB07 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #585 @392 RefTypeKill <Reg:r8 >  BB07 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #586 @392 RefTypeKill <Reg:r9 >  BB07 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #587 @392 RefTypeKill <Reg:r10>  BB07 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #588 @392 RefTypeKill <Reg:r11>  BB07 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #589 @393 RefTypeBB  BB08 regmask=[] minReg=1 wt=800.00>
<RefPosition #590 @401 RefTypeUse <Ivl:0 V00> LCL_VAR BB08 regmask=[allIntButFP] minReg=1 wt=2350.00>
<RefPosition #591 @402 RefTypeDef <Ivl:99> IND BB08 regmask=[allIntButFP] minReg=1 wt=3200.00>
<RefPosition #592 @403 RefTypeUse <Ivl:99>  BB08 regmask=[allIntButFP] minReg=1 last wt=800.00>
<RefPosition #593 @408 RefTypeDef <Ivl:100> CNS_INT BB08 regmask=[allIntButFP] minReg=1 wt=3200.00>
<RefPosition #594 @409 RefTypeUse <Ivl:100>  BB08 regmask=[allIntButFP] minReg=1 last wt=800.00>
<RefPosition #595 @411 RefTypeBB  BB09 regmask=[] minReg=1 wt=800.00>
<RefPosition #596 @416 RefTypeDef <Ivl:101> LCL_VAR_ADDR BB09 regmask=[rdx] minReg=1 wt=3200.00>
<RefPosition #597 @417 RefTypeFixedReg <Reg:rdx>  BB09 regmask=[rdx] minReg=1 wt=800.00>
<RefPosition #598 @417 RefTypeUse <Ivl:101>  BB09 regmask=[rdx] minReg=1 last fixed wt=800.00>
<RefPosition #599 @418 RefTypeFixedReg <Reg:rdx>  BB09 regmask=[rdx] minReg=1 wt=800.00>
<RefPosition #600 @418 RefTypeDef <Ivl:102> PUTARG_REG BB09 regmask=[rdx] minReg=1 fixed wt=3200.00>
<RefPosition #601 @420 RefTypeDef <Ivl:103> LCL_VAR BB09 regmask=[rcx] minReg=1 wt=3200.00>
<RefPosition #602 @421 RefTypeFixedReg <Reg:rcx>  BB09 regmask=[rcx] minReg=1 wt=800.00>
<RefPosition #603 @421 RefTypeUse <Ivl:103>  BB09 regmask=[rcx] minReg=1 last fixed wt=800.00>
<RefPosition #604 @422 RefTypeFixedReg <Reg:rcx>  BB09 regmask=[rcx] minReg=1 wt=800.00>
<RefPosition #605 @422 RefTypeDef <Ivl:104> PUTARG_REG BB09 regmask=[rcx] minReg=1 fixed wt=3200.00>
<RefPosition #606 @423 RefTypeFixedReg <Reg:rdx>  BB09 regmask=[rdx] minReg=1 wt=800.00>
<RefPosition #607 @423 RefTypeUse <Ivl:102>  BB09 regmask=[rdx] minReg=1 last fixed wt=800.00>
<RefPosition #608 @423 RefTypeFixedReg <Reg:rcx>  BB09 regmask=[rcx] minReg=1 wt=800.00>
<RefPosition #609 @423 RefTypeUse <Ivl:104>  BB09 regmask=[rcx] minReg=1 last fixed wt=800.00>
<RefPosition #610 @424 RefTypeKill <Reg:rax>  BB09 regmask=[rax] minReg=1 last wt=800.00>
<RefPosition #611 @424 RefTypeKill <Reg:rcx>  BB09 regmask=[rcx] minReg=1 last wt=800.00>
<RefPosition #612 @424 RefTypeKill <Reg:rdx>  BB09 regmask=[rdx] minReg=1 last wt=800.00>
<RefPosition #613 @424 RefTypeKill <Reg:r8 >  BB09 regmask=[r8] minReg=1 last wt=800.00>
<RefPosition #614 @424 RefTypeKill <Reg:r9 >  BB09 regmask=[r9] minReg=1 last wt=800.00>
<RefPosition #615 @424 RefTypeKill <Reg:r10>  BB09 regmask=[r10] minReg=1 last wt=800.00>
<RefPosition #616 @424 RefTypeKill <Reg:r11>  BB09 regmask=[r11] minReg=1 last wt=800.00>
<RefPosition #617 @431 RefTypeUse <Ivl:0 V00> LCL_VAR BB09 regmask=[allIntButFP] minReg=1 wt=2350.00>
<RefPosition #618 @432 RefTypeDef <Ivl:105> IND BB09 regmask=[allIntButFP] minReg=1 wt=3200.00>
<RefPosition #619 @433 RefTypeUse <Ivl:105>  BB09 regmask=[allIntButFP] minReg=1 last wt=800.00>
<RefPosition #620 @434 RefTypeDef <Ivl:17 V29> STORE_LCL_VAR BB09 regmask=[allIntButFP] minReg=1 wt=2400.00>
<RefPosition #621 @439 RefTypeUse <Ivl:17 V29> LCL_VAR BB09 regmask=[allIntButFP] minReg=1 wt=2400.00>
<RefPosition #622 @440 RefTypeDef <Ivl:106> IND BB09 regmask=[allIntButFP] minReg=1 wt=3200.00>
<RefPosition #623 @447 RefTypeUse <Ivl:106>  BB09 regmask=[allIntButFP] minReg=1 last wt=800.00>
<RefPosition #624 @447 RefTypeUse <Ivl:17 V29> LCL_VAR BB09 regmask=[allIntButFP] minReg=1 last wt=2400.00>
<RefPosition #625 @451 RefTypeBB  BB10 regmask=[] minReg=1 wt=800.00>
<RefPosition #626 @461 RefTypeBB  BB11 regmask=[] minReg=1 wt=400.00>
<RefPosition #627 @464 RefTypeDef <Ivl:107> LCL_VAR BB11 regmask=[rcx] minReg=1 wt=1600.00>
<RefPosition #628 @465 RefTypeFixedReg <Reg:rcx>  BB11 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #629 @465 RefTypeUse <Ivl:107>  BB11 regmask=[rcx] minReg=1 last fixed wt=400.00>
<RefPosition #630 @466 RefTypeFixedReg <Reg:rcx>  BB11 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #631 @466 RefTypeDef <Ivl:108> PUTARG_REG BB11 regmask=[rcx] minReg=1 fixed wt=1600.00>
<RefPosition #632 @467 RefTypeFixedReg <Reg:rcx>  BB11 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #633 @467 RefTypeUse <Ivl:108>  BB11 regmask=[rcx] minReg=1 last fixed wt=400.00>
<RefPosition #634 @468 RefTypeKill <Reg:rax>  BB11 regmask=[rax] minReg=1 last wt=400.00>
<RefPosition #635 @468 RefTypeKill <Reg:rcx>  BB11 regmask=[rcx] minReg=1 last wt=400.00>
<RefPosition #636 @468 RefTypeKill <Reg:rdx>  BB11 regmask=[rdx] minReg=1 last wt=400.00>
<RefPosition #637 @468 RefTypeKill <Reg:r8 >  BB11 regmask=[r8] minReg=1 last wt=400.00>
<RefPosition #638 @468 RefTypeKill <Reg:r9 >  BB11 regmask=[r9] minReg=1 last wt=400.00>
<RefPosition #639 @468 RefTypeKill <Reg:r10>  BB11 regmask=[r10] minReg=1 last wt=400.00>
<RefPosition #640 @468 RefTypeKill <Reg:r11>  BB11 regmask=[r11] minReg=1 last wt=400.00>
<RefPosition #641 @469 RefTypeBB  BB12 regmask=[] minReg=1 wt=800.00>
<RefPosition #642 @474 RefTypeDef <Ivl:109> CNS_INT BB12 regmask=[rcx] minReg=1 wt=3200.00>
<RefPosition #643 @475 RefTypeFixedReg <Reg:rcx>  BB12 regmask=[rcx] minReg=1 wt=800.00>
<RefPosition #644 @475 RefTypeUse <Ivl:109>  BB12 regmask=[rcx] minReg=1 last fixed wt=800.00>
<RefPosition #645 @476 RefTypeFixedReg <Reg:rcx>  BB12 regmask=[rcx] minReg=1 wt=800.00>
<RefPosition #646 @476 RefTypeDef <Ivl:110> PUTARG_REG BB12 regmask=[rcx] minReg=1 fixed wt=3200.00>
<RefPosition #647 @477 RefTypeFixedReg <Reg:rcx>  BB12 regmask=[rcx] minReg=1 wt=800.00>
<RefPosition #648 @477 RefTypeUse <Ivl:110>  BB12 regmask=[rcx] minReg=1 last fixed wt=800.00>
<RefPosition #649 @478 RefTypeKill <Reg:rax>  BB12 regmask=[rax] minReg=1 last wt=800.00>
<RefPosition #650 @478 RefTypeKill <Reg:rcx>  BB12 regmask=[rcx] minReg=1 last wt=800.00>
<RefPosition #651 @478 RefTypeKill <Reg:rdx>  BB12 regmask=[rdx] minReg=1 last wt=800.00>
<RefPosition #652 @478 RefTypeKill <Reg:r8 >  BB12 regmask=[r8] minReg=1 last wt=800.00>
<RefPosition #653 @478 RefTypeKill <Reg:r9 >  BB12 regmask=[r9] minReg=1 last wt=800.00>
<RefPosition #654 @478 RefTypeKill <Reg:r10>  BB12 regmask=[r10] minReg=1 last wt=800.00>
<RefPosition #655 @478 RefTypeKill <Reg:r11>  BB12 regmask=[r11] minReg=1 last wt=800.00>
<RefPosition #656 @479 RefTypeBB  BB13 regmask=[] minReg=1 wt=100.00>
<RefPosition #657 @481 RefTypeBB  BB30 regmask=[] minReg=1 wt=100.00>
<RefPosition #658 @493 RefTypeBB  BB31 regmask=[] minReg=1 wt=100.00>
<RefPosition #659 @498 RefTypeDef <Ivl:111> LCL_VAR BB31 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #660 @499 RefTypeFixedReg <Reg:rcx>  BB31 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #661 @499 RefTypeUse <Ivl:111>  BB31 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #662 @500 RefTypeFixedReg <Reg:rcx>  BB31 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #663 @500 RefTypeDef <Ivl:112> PUTARG_REG BB31 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #664 @501 RefTypeFixedReg <Reg:rcx>  BB31 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #665 @501 RefTypeUse <Ivl:112>  BB31 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #666 @502 RefTypeKill <Reg:rax>  BB31 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #667 @502 RefTypeKill <Reg:rcx>  BB31 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #668 @502 RefTypeKill <Reg:rdx>  BB31 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #669 @502 RefTypeKill <Reg:r8 >  BB31 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #670 @502 RefTypeKill <Reg:r9 >  BB31 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #671 @502 RefTypeKill <Reg:r10>  BB31 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #672 @502 RefTypeKill <Reg:r11>  BB31 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #673 @503 RefTypeBB  BB32 regmask=[] minReg=1 wt=100.00>
<RefPosition #674 @509 RefTypeBB  BB14 regmask=[] minReg=1 wt=100.00>
<RefPosition #675 @511 RefTypeBB  BB15 regmask=[] minReg=1 wt=100.00>
<RefPosition #676 @516 RefTypeKill <Reg:rax>  BB15 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #677 @516 RefTypeKill <Reg:rcx>  BB15 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #678 @516 RefTypeKill <Reg:rdx>  BB15 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #679 @516 RefTypeKill <Reg:r8 >  BB15 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #680 @516 RefTypeKill <Reg:r9 >  BB15 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #681 @516 RefTypeKill <Reg:r10>  BB15 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #682 @516 RefTypeKill <Reg:r11>  BB15 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #683 @516 RefTypeFixedReg <Reg:rax>  BB15 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #684 @516 RefTypeDef <Ivl:113> CALL BB15 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #685 @517 RefTypeUse <Ivl:113>  BB15 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #686 @522 RefTypeDef <Ivl:114> LCL_VAR_ADDR BB15 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #687 @523 RefTypeFixedReg <Reg:rcx>  BB15 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #688 @523 RefTypeUse <Ivl:114>  BB15 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #689 @524 RefTypeFixedReg <Reg:rcx>  BB15 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #690 @524 RefTypeDef <Ivl:115> PUTARG_REG BB15 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #691 @525 RefTypeFixedReg <Reg:rcx>  BB15 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #692 @525 RefTypeUse <Ivl:115>  BB15 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #693 @526 RefTypeKill <Reg:rax>  BB15 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #694 @526 RefTypeKill <Reg:rcx>  BB15 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #695 @526 RefTypeKill <Reg:rdx>  BB15 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #696 @526 RefTypeKill <Reg:r8 >  BB15 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #697 @526 RefTypeKill <Reg:r9 >  BB15 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #698 @526 RefTypeKill <Reg:r10>  BB15 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #699 @526 RefTypeKill <Reg:r11>  BB15 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #700 @526 RefTypeFixedReg <Reg:rax>  BB15 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #701 @526 RefTypeDef <Ivl:116> CALL BB15 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #702 @527 RefTypeUse <Ivl:116>  BB15 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #703 @528 RefTypeDef <Ivl:14 V24> STORE_LCL_VAR BB15 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #704 @531 RefTypeFixedReg <Reg:rcx>  BB15 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #705 @531 RefTypeUse <Ivl:14 V24> LCL_VAR BB15 regmask=[rcx] minReg=1 last fixed wt=400.00>
<RefPosition #706 @532 RefTypeFixedReg <Reg:rcx>  BB15 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #707 @532 RefTypeDef <Ivl:117> PUTARG_REG BB15 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #708 @534 RefTypeDef <Ivl:118> CNS_INT BB15 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #709 @535 RefTypeUse <Ivl:118>  BB15 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #710 @536 RefTypeDef <Ivl:119> IND BB15 regmask=[rdx] minReg=1 wt=400.00>
<RefPosition #711 @537 RefTypeFixedReg <Reg:rdx>  BB15 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #712 @537 RefTypeUse <Ivl:119>  BB15 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #713 @538 RefTypeFixedReg <Reg:rdx>  BB15 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #714 @538 RefTypeDef <Ivl:120> PUTARG_REG BB15 regmask=[rdx] minReg=1 fixed wt=400.00>
<RefPosition #715 @539 RefTypeFixedReg <Reg:rcx>  BB15 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #716 @539 RefTypeUse <Ivl:117>  BB15 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #717 @539 RefTypeFixedReg <Reg:rdx>  BB15 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #718 @539 RefTypeUse <Ivl:120>  BB15 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #719 @540 RefTypeKill <Reg:rax>  BB15 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #720 @540 RefTypeKill <Reg:rcx>  BB15 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #721 @540 RefTypeKill <Reg:rdx>  BB15 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #722 @540 RefTypeKill <Reg:r8 >  BB15 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #723 @540 RefTypeKill <Reg:r9 >  BB15 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #724 @540 RefTypeKill <Reg:r10>  BB15 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #725 @540 RefTypeKill <Reg:r11>  BB15 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #726 @540 RefTypeFixedReg <Reg:rax>  BB15 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #727 @540 RefTypeDef <Ivl:121> CALL BB15 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #728 @541 RefTypeFixedReg <Reg:rcx>  BB15 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #729 @541 RefTypeUse <Ivl:121>  BB15 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #730 @542 RefTypeFixedReg <Reg:rcx>  BB15 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #731 @542 RefTypeDef <Ivl:122> PUTARG_REG BB15 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #732 @543 RefTypeFixedReg <Reg:rcx>  BB15 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #733 @543 RefTypeUse <Ivl:122>  BB15 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #734 @544 RefTypeKill <Reg:rax>  BB15 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #735 @544 RefTypeKill <Reg:rcx>  BB15 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #736 @544 RefTypeKill <Reg:rdx>  BB15 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #737 @544 RefTypeKill <Reg:r8 >  BB15 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #738 @544 RefTypeKill <Reg:r9 >  BB15 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #739 @544 RefTypeKill <Reg:r10>  BB15 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #740 @544 RefTypeKill <Reg:r11>  BB15 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #741 @548 RefTypeDef <Ivl:123> CNS_INT BB15 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #742 @549 RefTypeUse <Ivl:123>  BB15 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #743 @550 RefTypeDef <Ivl:124> IND BB15 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #744 @551 RefTypeFixedReg <Reg:rcx>  BB15 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #745 @551 RefTypeUse <Ivl:124>  BB15 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #746 @552 RefTypeFixedReg <Reg:rcx>  BB15 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #747 @552 RefTypeDef <Ivl:125> PUTARG_REG BB15 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #748 @553 RefTypeFixedReg <Reg:rcx>  BB15 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #749 @553 RefTypeUse <Ivl:125>  BB15 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #750 @554 RefTypeKill <Reg:rax>  BB15 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #751 @554 RefTypeKill <Reg:rcx>  BB15 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #752 @554 RefTypeKill <Reg:rdx>  BB15 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #753 @554 RefTypeKill <Reg:r8 >  BB15 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #754 @554 RefTypeKill <Reg:r9 >  BB15 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #755 @554 RefTypeKill <Reg:r10>  BB15 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #756 @554 RefTypeKill <Reg:r11>  BB15 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #757 @558 RefTypeDef <Ivl:126> CNS_INT BB15 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #758 @559 RefTypeUse <Ivl:126>  BB15 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #759 @560 RefTypeDef <Ivl:127> IND BB15 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #760 @561 RefTypeFixedReg <Reg:rcx>  BB15 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #761 @561 RefTypeUse <Ivl:127>  BB15 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #762 @562 RefTypeFixedReg <Reg:rcx>  BB15 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #763 @562 RefTypeDef <Ivl:128> PUTARG_REG BB15 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #764 @563 RefTypeFixedReg <Reg:rcx>  BB15 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #765 @563 RefTypeUse <Ivl:128>  BB15 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #766 @564 RefTypeKill <Reg:rax>  BB15 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #767 @564 RefTypeKill <Reg:rcx>  BB15 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #768 @564 RefTypeKill <Reg:rdx>  BB15 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #769 @564 RefTypeKill <Reg:r8 >  BB15 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #770 @564 RefTypeKill <Reg:r9 >  BB15 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #771 @564 RefTypeKill <Reg:r10>  BB15 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #772 @564 RefTypeKill <Reg:r11>  BB15 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #773 @568 RefTypeDef <Ivl:129> CNS_INT BB15 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #774 @569 RefTypeUse <Ivl:129>  BB15 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #775 @570 RefTypeDef <Ivl:130> IND BB15 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #776 @571 RefTypeFixedReg <Reg:rcx>  BB15 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #777 @571 RefTypeUse <Ivl:130>  BB15 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #778 @572 RefTypeFixedReg <Reg:rcx>  BB15 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #779 @572 RefTypeDef <Ivl:131> PUTARG_REG BB15 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #780 @573 RefTypeFixedReg <Reg:rcx>  BB15 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #781 @573 RefTypeUse <Ivl:131>  BB15 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #782 @574 RefTypeKill <Reg:rax>  BB15 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #783 @574 RefTypeKill <Reg:rcx>  BB15 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #784 @574 RefTypeKill <Reg:rdx>  BB15 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #785 @574 RefTypeKill <Reg:r8 >  BB15 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #786 @574 RefTypeKill <Reg:r9 >  BB15 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #787 @574 RefTypeKill <Reg:r10>  BB15 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #788 @574 RefTypeKill <Reg:r11>  BB15 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #789 @578 RefTypeDef <Ivl:132> CNS_INT BB15 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #790 @579 RefTypeUse <Ivl:132>  BB15 regmask=[allIntButFP] minReg=1 last wt=100.00>
<RefPosition #791 @580 RefTypeDef <Ivl:133> IND BB15 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #792 @581 RefTypeFixedReg <Reg:rcx>  BB15 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #793 @581 RefTypeUse <Ivl:133>  BB15 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #794 @582 RefTypeFixedReg <Reg:rcx>  BB15 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #795 @582 RefTypeDef <Ivl:134> PUTARG_REG BB15 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #796 @583 RefTypeFixedReg <Reg:rcx>  BB15 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #797 @583 RefTypeUse <Ivl:134>  BB15 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #798 @584 RefTypeKill <Reg:rax>  BB15 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #799 @584 RefTypeKill <Reg:rcx>  BB15 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #800 @584 RefTypeKill <Reg:rdx>  BB15 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #801 @584 RefTypeKill <Reg:r8 >  BB15 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #802 @584 RefTypeKill <Reg:r9 >  BB15 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #803 @584 RefTypeKill <Reg:r10>  BB15 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #804 @584 RefTypeKill <Reg:r11>  BB15 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #805 @585 RefTypeBB  BB19 regmask=[] minReg=1 wt=800.00>
<RefPosition #806 @588 RefTypeDef <Ivl:135> LCL_VAR_ADDR BB19 regmask=[rcx] minReg=1 wt=3200.00>
<RefPosition #807 @589 RefTypeFixedReg <Reg:rcx>  BB19 regmask=[rcx] minReg=1 wt=800.00>
<RefPosition #808 @589 RefTypeUse <Ivl:135>  BB19 regmask=[rcx] minReg=1 last fixed wt=800.00>
<RefPosition #809 @590 RefTypeFixedReg <Reg:rcx>  BB19 regmask=[rcx] minReg=1 wt=800.00>
<RefPosition #810 @590 RefTypeDef <Ivl:136> PUTARG_REG BB19 regmask=[rcx] minReg=1 fixed wt=3200.00>
<RefPosition #811 @592 RefTypeDef <Ivl:137> CNS_INT BB19 regmask=[rdx] minReg=1 wt=3200.00>
<RefPosition #812 @593 RefTypeFixedReg <Reg:rdx>  BB19 regmask=[rdx] minReg=1 wt=800.00>
<RefPosition #813 @593 RefTypeUse <Ivl:137>  BB19 regmask=[rdx] minReg=1 last fixed wt=800.00>
<RefPosition #814 @594 RefTypeFixedReg <Reg:rdx>  BB19 regmask=[rdx] minReg=1 wt=800.00>
<RefPosition #815 @594 RefTypeDef <Ivl:138> PUTARG_REG BB19 regmask=[rdx] minReg=1 fixed wt=3200.00>
<RefPosition #816 @595 RefTypeFixedReg <Reg:rcx>  BB19 regmask=[rcx] minReg=1 wt=800.00>
<RefPosition #817 @595 RefTypeUse <Ivl:136>  BB19 regmask=[rcx] minReg=1 last fixed wt=800.00>
<RefPosition #818 @595 RefTypeFixedReg <Reg:rdx>  BB19 regmask=[rdx] minReg=1 wt=800.00>
<RefPosition #819 @595 RefTypeUse <Ivl:138>  BB19 regmask=[rdx] minReg=1 last fixed wt=800.00>
<RefPosition #820 @596 RefTypeKill <Reg:rax>  BB19 regmask=[rax] minReg=1 last wt=800.00>
<RefPosition #821 @596 RefTypeKill <Reg:rcx>  BB19 regmask=[rcx] minReg=1 last wt=800.00>
<RefPosition #822 @596 RefTypeKill <Reg:rdx>  BB19 regmask=[rdx] minReg=1 last wt=800.00>
<RefPosition #823 @596 RefTypeKill <Reg:r8 >  BB19 regmask=[r8] minReg=1 last wt=800.00>
<RefPosition #824 @596 RefTypeKill <Reg:r9 >  BB19 regmask=[r9] minReg=1 last wt=800.00>
<RefPosition #825 @596 RefTypeKill <Reg:r10>  BB19 regmask=[r10] minReg=1 last wt=800.00>
<RefPosition #826 @596 RefTypeKill <Reg:r11>  BB19 regmask=[r11] minReg=1 last wt=800.00>
<RefPosition #827 @605 RefTypeBB  BB20 regmask=[] minReg=1 wt=800.00>
<RefPosition #828 @610 RefTypeKill <Reg:rax>  BB20 regmask=[rax] minReg=1 last wt=800.00>
<RefPosition #829 @610 RefTypeKill <Reg:rcx>  BB20 regmask=[rcx] minReg=1 last wt=800.00>
<RefPosition #830 @610 RefTypeKill <Reg:rdx>  BB20 regmask=[rdx] minReg=1 last wt=800.00>
<RefPosition #831 @610 RefTypeKill <Reg:r8 >  BB20 regmask=[r8] minReg=1 last wt=800.00>
<RefPosition #832 @610 RefTypeKill <Reg:r9 >  BB20 regmask=[r9] minReg=1 last wt=800.00>
<RefPosition #833 @610 RefTypeKill <Reg:r10>  BB20 regmask=[r10] minReg=1 last wt=800.00>
<RefPosition #834 @610 RefTypeKill <Reg:r11>  BB20 regmask=[r11] minReg=1 last wt=800.00>
<RefPosition #835 @610 RefTypeFixedReg <Reg:rax>  BB20 regmask=[rax] minReg=1 wt=800.00>
<RefPosition #836 @610 RefTypeDef <Ivl:139> CALL BB20 regmask=[rax] minReg=1 fixed wt=3200.00>
<RefPosition #837 @611 RefTypeFixedReg <Reg:rcx>  BB20 regmask=[rcx] minReg=1 wt=800.00>
<RefPosition #838 @611 RefTypeUse <Ivl:139>  BB20 regmask=[rcx] minReg=1 last fixed wt=800.00>
<RefPosition #839 @612 RefTypeFixedReg <Reg:rcx>  BB20 regmask=[rcx] minReg=1 wt=800.00>
<RefPosition #840 @612 RefTypeDef <Ivl:140> PUTARG_REG BB20 regmask=[rcx] minReg=1 fixed wt=3200.00>
<RefPosition #841 @613 RefTypeFixedReg <Reg:rcx>  BB20 regmask=[rcx] minReg=1 wt=800.00>
<RefPosition #842 @613 RefTypeUse <Ivl:140>  BB20 regmask=[rcx] minReg=1 last fixed wt=800.00>
<RefPosition #843 @614 RefTypeKill <Reg:rax>  BB20 regmask=[rax] minReg=1 last wt=800.00>
<RefPosition #844 @614 RefTypeKill <Reg:rcx>  BB20 regmask=[rcx] minReg=1 last wt=800.00>
<RefPosition #845 @614 RefTypeKill <Reg:rdx>  BB20 regmask=[rdx] minReg=1 last wt=800.00>
<RefPosition #846 @614 RefTypeKill <Reg:r8 >  BB20 regmask=[r8] minReg=1 last wt=800.00>
<RefPosition #847 @614 RefTypeKill <Reg:r9 >  BB20 regmask=[r9] minReg=1 last wt=800.00>
<RefPosition #848 @614 RefTypeKill <Reg:r10>  BB20 regmask=[r10] minReg=1 last wt=800.00>
<RefPosition #849 @614 RefTypeKill <Reg:r11>  BB20 regmask=[r11] minReg=1 last wt=800.00>
<RefPosition #850 @615 RefTypeBB  BB21 regmask=[] minReg=1 wt=100.00>
<RefPosition #851 @625 RefTypeBB  BB22 regmask=[] minReg=1 wt=100.00>
<RefPosition #852 @630 RefTypeKill <Reg:rax>  BB22 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #853 @630 RefTypeKill <Reg:rcx>  BB22 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #854 @630 RefTypeKill <Reg:rdx>  BB22 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #855 @630 RefTypeKill <Reg:r8 >  BB22 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #856 @630 RefTypeKill <Reg:r9 >  BB22 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #857 @630 RefTypeKill <Reg:r10>  BB22 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #858 @630 RefTypeKill <Reg:r11>  BB22 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #859 @631 RefTypeBB  BB23 regmask=[] minReg=1 wt=100.00>
<RefPosition #860 @641 RefTypeBB  BB24 regmask=[] minReg=1 wt=100.00>
<RefPosition #861 @651 RefTypeUse <Ivl:0 V00> LCL_VAR BB24 regmask=[allIntButFP] minReg=1 wt=2350.00>
<RefPosition #862 @653 RefTypeBB  BB25 regmask=[] minReg=1 wt=100.00>
<RefPosition #863 @663 RefTypeBB  BB26 regmask=[] minReg=1 wt=100.00>
<RefPosition #864 @673 RefTypeUse <Ivl:0 V00> LCL_VAR BB26 regmask=[allIntButFP] minReg=1 last wt=2350.00>
<RefPosition #865 @679 RefTypeBB  BB27 regmask=[] minReg=1 wt=0.00>
<RefPosition #866 @691 RefTypeBB  BB28 regmask=[] minReg=1 wt=0.00>
<RefPosition #867 @696 RefTypeDef <Ivl:141> LCL_VAR BB28 regmask=[rcx] minReg=1 wt=0.00>
<RefPosition #868 @697 RefTypeFixedReg <Reg:rcx>  BB28 regmask=[rcx] minReg=1 wt=0.00>
<RefPosition #869 @697 RefTypeUse <Ivl:141>  BB28 regmask=[rcx] minReg=1 last fixed wt=0.00>
<RefPosition #870 @698 RefTypeFixedReg <Reg:rcx>  BB28 regmask=[rcx] minReg=1 wt=0.00>
<RefPosition #871 @698 RefTypeDef <Ivl:142> PUTARG_REG BB28 regmask=[rcx] minReg=1 fixed wt=0.00>
<RefPosition #872 @699 RefTypeFixedReg <Reg:rcx>  BB28 regmask=[rcx] minReg=1 wt=0.00>
<RefPosition #873 @699 RefTypeUse <Ivl:142>  BB28 regmask=[rcx] minReg=1 last fixed wt=0.00>
<RefPosition #874 @700 RefTypeKill <Reg:rax>  BB28 regmask=[rax] minReg=1 last wt=0.00>
<RefPosition #875 @700 RefTypeKill <Reg:rcx>  BB28 regmask=[rcx] minReg=1 last wt=0.00>
<RefPosition #876 @700 RefTypeKill <Reg:rdx>  BB28 regmask=[rdx] minReg=1 last wt=0.00>
<RefPosition #877 @700 RefTypeKill <Reg:r8 >  BB28 regmask=[r8] minReg=1 last wt=0.00>
<RefPosition #878 @700 RefTypeKill <Reg:r9 >  BB28 regmask=[r9] minReg=1 last wt=0.00>
<RefPosition #879 @700 RefTypeKill <Reg:r10>  BB28 regmask=[r10] minReg=1 last wt=0.00>
<RefPosition #880 @700 RefTypeKill <Reg:r11>  BB28 regmask=[r11] minReg=1 last wt=0.00>
<RefPosition #881 @701 RefTypeBB  BB29 regmask=[] minReg=1 wt=0.00>

VAR REFPOSITIONS BEFORE ALLOCATION
--- V00  (Interval 0)
<RefPosition #0   @0   RefTypeParamDef <Ivl:0 V00>  BB00 regmask=[rcx] minReg=1 fixed regOptional wt=100.00>
<RefPosition #98  @55  RefTypeUse <Ivl:0 V00> LCL_VAR BB01 regmask=[allIntButFP] minReg=1 wt=2350.00>
<RefPosition #135 @75  RefTypeUse <Ivl:0 V00> LCL_VAR BB01 regmask=[allIntButFP] minReg=1 wt=2350.00>
<RefPosition #196 @115 RefTypeUse <Ivl:0 V00> LCL_VAR BB01 regmask=[rdx] minReg=1 fixed wt=2350.00>
<RefPosition #336 @197 RefTypeUse <Ivl:0 V00> LCL_VAR BB02 regmask=[allIntButFP] minReg=1 wt=2350.00>
<RefPosition #381 @235 RefTypeUse <Ivl:0 V00> LCL_VAR BB03 regmask=[allIntButFP] minReg=1 wt=2350.00>
<RefPosition #419 @265 RefTypeUse <Ivl:0 V00> LCL_VAR BB03 regmask=[allIntButFP] minReg=1 wt=2350.00>
<RefPosition #590 @401 RefTypeUse <Ivl:0 V00> LCL_VAR BB08 regmask=[allIntButFP] minReg=1 wt=2350.00>
<RefPosition #617 @431 RefTypeUse <Ivl:0 V00> LCL_VAR BB09 regmask=[allIntButFP] minReg=1 wt=2350.00>
<RefPosition #861 @651 RefTypeUse <Ivl:0 V00> LCL_VAR BB24 regmask=[allIntButFP] minReg=1 wt=2350.00>
<RefPosition #864 @673 RefTypeUse <Ivl:0 V00> LCL_VAR BB26 regmask=[allIntButFP] minReg=1 last wt=2350.00>
--- V01
--- V02
--- V03  (Interval 1)
<RefPosition #334 @188 RefTypeDef <Ivl:1 V03> STORE_LCL_VAR BB01 regmask=[allIntButFP] minReg=1 wt=2500.00>
<RefPosition #517 @345 RefTypeUse <Ivl:1 V03> LCL_VAR BB06 regmask=[allIntButFP] minReg=1 last wt=2500.00>
<RefPosition #520 @348 RefTypeDef <Ivl:1 V03> STORE_LCL_VAR BB06 regmask=[allIntButFP] minReg=1 wt=2500.00>
<RefPosition #521 @355 RefTypeUse <Ivl:1 V03> LCL_VAR BB06 regmask=[allIntButFP] minReg=1 regOptional wt=2500.00>
<RefPosition #522 @359 RefTypeExpUse <Ivl:1 V03>  BB06 regmask=[allIntButFP] minReg=1 regOptional wt=800.00>
--- V04
--- V05
--- V06
--- V07
--- V08  (Interval 2)
<RefPosition #84  @44  RefTypeDef <Ivl:2 V08> STORE_LCL_VAR BB01 regmask=[allIntButFP] minReg=1 wt=600.00>
<RefPosition #86  @47  RefTypeUse <Ivl:2 V08> LCL_VAR BB01 regmask=[rcx] minReg=1 fixed wt=600.00>
<RefPosition #103 @59  RefTypeUse <Ivl:2 V08> LCL_VAR BB01 regmask=[rdx] minReg=1 last fixed wt=600.00>
--- V09  (Interval 3)
<RefPosition #134 @70  RefTypeDef <Ivl:3 V09> STORE_LCL_VAR BB01 regmask=[allIntButFP] minReg=1 wt=600.00>
<RefPosition #142 @85  RefTypeUse <Ivl:3 V09> LCL_VAR BB01 regmask=[rcx] minReg=1 fixed wt=600.00>
<RefPosition #159 @97  RefTypeUse <Ivl:3 V09> LCL_VAR BB01 regmask=[rdx] minReg=1 last fixed wt=600.00>
--- V10  (Interval 4)
<RefPosition #140 @82  RefTypeDef <Ivl:4 V10> STORE_LCL_VAR BB01 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #154 @93  RefTypeUse <Ivl:4 V10> LCL_VAR BB01 regmask=[allIntButFP] minReg=1 last wt=400.00>
--- V11  (Interval 5)
<RefPosition #190 @108 RefTypeDef <Ivl:5 V11> STORE_LCL_VAR BB01 regmask=[allIntButFP] minReg=1 wt=600.00>
<RefPosition #192 @111 RefTypeUse <Ivl:5 V11> LCL_VAR BB01 regmask=[rcx] minReg=1 fixed wt=600.00>
<RefPosition #240 @139 RefTypeUse <Ivl:5 V11> LCL_VAR BB01 regmask=[rdx] minReg=1 last fixed wt=600.00>
--- V12  (Interval 6)
<RefPosition #234 @132 RefTypeDef <Ivl:6 V12> STORE_LCL_VAR BB01 regmask=[allIntButFP] minReg=1 wt=600.00>
<RefPosition #236 @135 RefTypeUse <Ivl:6 V12> LCL_VAR BB01 regmask=[rcx] minReg=1 fixed wt=600.00>
<RefPosition #255 @147 RefTypeUse <Ivl:6 V12> LCL_VAR BB01 regmask=[rcx] minReg=1 last fixed wt=600.00>
--- V13  (Interval 7)
<RefPosition #380 @230 RefTypeDef <Ivl:7 V13> STORE_LCL_VAR BB03 regmask=[allIntButFP] minReg=1 wt=4800.00>
<RefPosition #388 @245 RefTypeUse <Ivl:7 V13> LCL_VAR BB03 regmask=[rcx] minReg=1 fixed wt=4800.00>
<RefPosition #405 @257 RefTypeUse <Ivl:7 V13> LCL_VAR BB03 regmask=[rdx] minReg=1 last fixed wt=4800.00>
--- V14  (Interval 8)
<RefPosition #386 @242 RefTypeDef <Ivl:8 V14> STORE_LCL_VAR BB03 regmask=[allIntButFP] minReg=1 wt=3200.00>
<RefPosition #400 @253 RefTypeUse <Ivl:8 V14> LCL_VAR BB03 regmask=[allIntButFP] minReg=1 last wt=3200.00>
--- V15  (Interval 9)
<RefPosition #465 @298 RefTypeDef <Ivl:9 V15> STORE_LCL_VAR BB03 regmask=[allIntButFP] minReg=1 wt=4800.00>
<RefPosition #469 @305 RefTypeUse <Ivl:9 V15> LCL_VAR BB03 regmask=[rcx] minReg=1 fixed wt=4800.00>
<RefPosition #486 @317 RefTypeUse <Ivl:9 V15> LCL_VAR BB03 regmask=[rdx] minReg=1 last fixed wt=4800.00>
--- V16  (Interval 10)
<RefPosition #467 @302 RefTypeDef <Ivl:10 V16> STORE_LCL_VAR BB03 regmask=[allIntButFP] minReg=1 wt=3200.00>
<RefPosition #481 @313 RefTypeUse <Ivl:10 V16> LCL_VAR BB03 regmask=[allIntButFP] minReg=1 last wt=3200.00>
--- V17
--- V18
--- V19
--- V20
--- V21  (Interval 11)
<RefPosition #29  @18  RefTypeDef <Ivl:11 V21> STORE_LCL_VAR BB01 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #31  @21  RefTypeUse <Ivl:11 V21> LCL_VAR BB01 regmask=[rcx] minReg=1 last fixed wt=400.00>
--- V22  (Interval 12)
<RefPosition #294 @166 RefTypeDef <Ivl:12 V22> STORE_LCL_VAR BB01 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #296 @169 RefTypeUse <Ivl:12 V22> LCL_VAR BB01 regmask=[rcx] minReg=1 last fixed wt=400.00>
--- V23  (Interval 13)
<RefPosition #551 @376 RefTypeDef <Ivl:13 V23> STORE_LCL_VAR BB07 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #553 @379 RefTypeUse <Ivl:13 V23> LCL_VAR BB07 regmask=[rcx] minReg=1 last fixed wt=400.00>
--- V24  (Interval 14)
<RefPosition #703 @528 RefTypeDef <Ivl:14 V24> STORE_LCL_VAR BB15 regmask=[allIntButFP] minReg=1 wt=400.00>
<RefPosition #705 @531 RefTypeUse <Ivl:14 V24> LCL_VAR BB15 regmask=[rcx] minReg=1 last fixed wt=400.00>
--- V25
--- V26
--- V27  (Interval 15)
<RefPosition #430 @284 RefTypeDef <Ivl:15 V27> STORE_LCL_VAR BB03 regmask=[allIntButFP] minReg=1 wt=2400.00>
<RefPosition #434 @287 RefTypeUse <Ivl:15 V27> LCL_VAR BB03 regmask=[rdx] minReg=1 fixed wt=2400.00>
<RefPosition #466 @301 RefTypeUse <Ivl:15 V27> LCL_VAR BB03 regmask=[allIntButFP] minReg=1 last wt=2400.00>
--- V28  (Interval 16)
<RefPosition #422 @268 RefTypeDef <Ivl:16 V28> STORE_LCL_VAR BB03 regmask=[allIntButFP] minReg=1 wt=2400.00>
<RefPosition #423 @271 RefTypeUse <Ivl:16 V28> LCL_VAR BB03 regmask=[allIntButFP] minReg=1 wt=2400.00>
<RefPosition #425 @277 RefTypeUse <Ivl:16 V28> LCL_VAR BB03 regmask=[allIntButFP] minReg=1 last wt=2400.00>
--- V29  (Interval 17)
<RefPosition #620 @434 RefTypeDef <Ivl:17 V29> STORE_LCL_VAR BB09 regmask=[allIntButFP] minReg=1 wt=2400.00>
<RefPosition #621 @439 RefTypeUse <Ivl:17 V29> LCL_VAR BB09 regmask=[allIntButFP] minReg=1 wt=2400.00>
<RefPosition #624 @447 RefTypeUse <Ivl:17 V29> LCL_VAR BB09 regmask=[allIntButFP] minReg=1 last wt=2400.00>



Allocating Registers
--------------------
The following table has one or more rows for each RefPosition that is handled during allocation.
The first column provides the basic information about the RefPosition, with its type (e.g. Def,
Use, Fixd) followed by a '*' if it is a last use, and a 'D' if it is delayRegFree, and then the
action taken during allocation (e.g. Alloc a new register, or Keep an existing one).
The subsequent columns show the Interval occupying each register, if any, followed by 'a' if it is
active, a 'p' if it is a large vector that has been partially spilled, and 'i'if it is inactive.
Columns are only printed up to the last modifed register, which may increase during allocation,
in which case additional columns will appear.  
Registers which are not marked modified have ---- in their column.

------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
                                    |     |V0  a|     |     |     |     |     |     |     |
  0.#0   V0    Parm   OWNPR(A) rdx  |     |     |V0  a|     |     |     |     |     |     |
  1.#1   BB1  PredBB0               |     |     |V0  a|     |     |     |     |     |     |
  6.#2   rax   Kill   Keep     rax  |     |     |V0  a|     |     |     |     |     |     |
  6.#3   rcx   Kill   Keep     rcx  |     |     |V0  a|     |     |     |     |     |     |
  6.#4   rdx   Kill   Spill    rdx  |     |     |     |     |     |     |     |     |     |
                      Keep     rdx  |     |     |     |     |     |     |     |     |     |
  6.#5   r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
  6.#6   r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
  6.#7   r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
  6.#8   r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
  6.#9   rax   Fixd   Keep     rax  |     |     |     |     |     |     |     |     |     |
  6.#10  I18   Def    Alloc    rax  |I18 a|     |     |     |     |     |     |     |     |
  7.#11  I18   Use *  Keep     rax  |I18 a|     |     |     |     |     |     |     |     |
 12.#12  I19   Def    Alloc    rcx  |     |I19 a|     |     |     |     |     |     |     |
 13.#13  rcx   Fixd   Keep     rcx  |     |I19 a|     |     |     |     |     |     |     |
 13.#14  I19   Use *  Keep     rcx  |     |I19 a|     |     |     |     |     |     |     |
 14.#15  rcx   Fixd   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 14.#16  I20   Def    Alloc    rcx  |     |I20 a|     |     |     |     |     |     |     |
 15.#17  rcx   Fixd   Keep     rcx  |     |I20 a|     |     |     |     |     |     |     |
 15.#18  I20   Use *  Keep     rcx  |     |I20 a|     |     |     |     |     |     |     |
 16.#19  rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
 16.#20  rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 16.#21  rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
 16.#22  r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
 16.#23  r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
 16.#24  r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
 16.#25  r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
 16.#26  rax   Fixd   Keep     rax  |     |     |     |     |     |     |     |     |     |
 16.#27  I21   Def    Alloc    rax  |I21 a|     |     |     |     |     |     |     |     |
 17.#28  I21   Use *  Keep     rax  |I21 a|     |     |     |     |     |     |     |     |
 18.#29  V21   Def    BSFIT(A) rcx  |     |V21 a|     |     |     |     |     |     |     |
 21.#30  rcx   Fixd   Keep     rcx  |     |V21 a|     |     |     |     |     |     |     |
 21.#31  V21   Use *  Keep     rcx  |     |V21 a|     |     |     |     |     |     |     |
 22.#32  rcx   Fixd   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 22.#33  I22   Def    Alloc    rcx  |     |I22 a|     |     |     |     |     |     |     |
 24.#34  C23   Def    BSFIT(A) rdx  |     |I22 a|C23 a|     |     |     |     |     |     |
 25.#35  C23   Use *  Keep     rdx  |     |I22 a|C23 a|     |     |     |     |     |     |
 26.#36  I24   Def    Alloc    rdx  |     |I22 a|I24 a|     |     |     |     |     |     |
 27.#37  rdx   Fixd   Keep     rdx  |     |I22 a|I24 a|     |     |     |     |     |     |
 27.#38  I24   Use *  Keep     rdx  |     |I22 a|I24 a|     |     |     |     |     |     |
 28.#39  rdx   Fixd   Keep     rdx  |     |I22 a|     |     |     |     |     |     |     |
 28.#40  I25   Def    Alloc    rdx  |     |I22 a|I25 a|     |     |     |     |     |     |
 29.#41  rcx   Fixd   Keep     rcx  |     |I22 a|I25 a|     |     |     |     |     |     |
 29.#42  I22   Use *  Keep     rcx  |     |I22 a|I25 a|     |     |     |     |     |     |
 29.#43  rdx   Fixd   Keep     rdx  |     |I22 a|I25 a|     |     |     |     |     |     |
 29.#44  I25   Use *  Keep     rdx  |     |I22 a|I25 a|     |     |     |     |     |     |
 30.#45  rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
 30.#46  rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 30.#47  rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
 30.#48  r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
 30.#49  r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
 30.#50  r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
 30.#51  r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
 30.#52  rax   Fixd   Keep     rax  |     |     |     |     |     |     |     |     |     |
 30.#53  I26   Def    DUconflict    |     |     |     |     |     |     |     |     |     |
  Case #6 need a copy               |     |     |     |     |     |     |     |     |     |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
                      Alloc    rax  |I26 a|     |     |     |     |     |     |     |     |
 31.#54  rcx   Fixd   Keep     rcx  |I26 a|     |     |     |     |     |     |     |     |
 31.#55  I26   Use *  Copy     rcx  |I26 a|I26 a|     |     |     |     |     |     |     |
 32.#56  rcx   Fixd   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 32.#57  I27   Def    Alloc    rcx  |     |I27 a|     |     |     |     |     |     |     |
 33.#58  rcx   Fixd   Keep     rcx  |     |I27 a|     |     |     |     |     |     |     |
 33.#59  I27   Use *  Keep     rcx  |     |I27 a|     |     |     |     |     |     |     |
 34.#60  rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
 34.#61  rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 34.#62  rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
 34.#63  r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
 34.#64  r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
 34.#65  r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
 34.#66  r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
 38.#67  C28   Def    Alloc    rcx  |     |C28 a|     |     |     |     |     |     |     |
 39.#68  rcx   Fixd   Keep     rcx  |     |C28 a|     |     |     |     |     |     |     |
 39.#69  C28   Use *  Keep     rcx  |     |C28 a|     |     |     |     |     |     |     |
 40.#70  rcx   Fixd   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 40.#71  I29   Def    Alloc    rcx  |     |I29 a|     |     |     |     |     |     |     |
 41.#72  rcx   Fixd   Keep     rcx  |     |I29 a|     |     |     |     |     |     |     |
 41.#73  I29   Use *  Keep     rcx  |     |I29 a|     |     |     |     |     |     |     |
 42.#74  rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
 42.#75  rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 42.#76  rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
 42.#77  r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
 42.#78  r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
 42.#79  r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
 42.#80  r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
 42.#81  rax   Fixd   Keep     rax  |     |     |     |     |     |     |     |     |     |
 42.#82  I30   Def    Alloc    rax  |I30 a|     |     |     |     |     |     |     |     |
 43.#83  I30   Use *  Keep     rax  |I30 a|     |     |     |     |     |     |     |     |
 44.#84  V8    Def    ORDER(A) rsi  |     |     |     |     |     |V8  a|     |     |     |
 47.#85  rcx   Fixd   Keep     rcx  |     |     |     |     |     |V8  a|     |     |     |
 47.#86  V8    Use    Copy     rcx  |     |V8  a|     |     |     |V8  a|     |     |     |
 48.#87  rcx   Fixd   Keep     rcx  |     |V8  a|     |     |     |V8  a|     |     |     |
 48.#88  I31   Def    Alloc    rcx  |     |I31 a|     |     |     |V8  a|     |     |     |
 49.#89  rcx   Fixd   Keep     rcx  |     |I31 a|     |     |     |V8  a|     |     |     |
 49.#90  I31   Use *  Keep     rcx  |     |I31 a|     |     |     |V8  a|     |     |     |
 50.#91  rax   Kill   Keep     rax  |     |     |     |     |     |V8  a|     |     |     |
 50.#92  rcx   Kill   Keep     rcx  |     |     |     |     |     |V8  a|     |     |     |
 50.#93  rdx   Kill   Keep     rdx  |     |     |     |     |     |V8  a|     |     |     |
 50.#94  r8    Kill   Keep     r8   |     |     |     |     |     |V8  a|     |     |     |
 50.#95  r9    Kill   Keep     r9   |     |     |     |     |     |V8  a|     |     |     |
 50.#96  r10   Kill   Keep     r10  |     |     |     |     |     |V8  a|     |     |     |
 50.#97  r11   Kill   Keep     r11  |     |     |     |     |     |V8  a|     |     |     |
 55.#98  V0    Use    ReLod    NA   |     |     |     |     |     |V8  a|     |     |     |
                      THISA(A) rdx  |     |     |V0  a|     |     |V8  a|     |     |     |
 56.#99  I32   Def    Alloc    rcx  |     |I32 a|V0  a|     |     |V8  a|     |     |     |
 59.#100 rcx   Fixd   Keep     rcx  |     |I32 a|V0  a|     |     |V8  a|     |     |     |
 59.#101 I32   Use *  Keep     rcx  |     |I32 a|V0  a|     |     |V8  a|     |     |     |
 59.#102 rdx   Fixd   Keep     rdx  |     |I32 a|V0  a|     |     |V8  a|     |     |     |
 59.#103 V8    Use *  Spill    rdx  |     |I32 a|     |     |     |V8  i|     |     |     |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
                      Copy     rdx  |     |I32 a|V8  a|     |     |V8  a|     |     |     |
 60.#104 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
 60.#105 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 60.#106 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
 60.#107 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
 60.#108 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
 60.#109 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
 60.#110 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
 60.#111 mm0   Kill   Keep     mm0  |     |     |     |     |     |     |     |     |     |
 60.#112 mm1   Kill   Keep     mm1  |     |     |     |     |     |     |     |     |     |
 60.#113 mm2   Kill   Keep     mm2  |     |     |     |     |     |     |     |     |     |
 60.#114 mm3   Kill   Keep     mm3  |     |     |     |     |     |     |     |     |     |
 60.#115 mm4   Kill   Keep     mm4  |     |     |     |     |     |     |     |     |     |
 60.#116 mm5   Kill   Keep     mm5  |     |     |     |     |     |     |     |     |     |
 64.#117 C33   Def    Alloc    rcx  |     |C33 a|     |     |     |     |     |     |     |
 65.#118 rcx   Fixd   Keep     rcx  |     |C33 a|     |     |     |     |     |     |     |
 65.#119 C33   Use *  Keep     rcx  |     |C33 a|     |     |     |     |     |     |     |
 66.#120 rcx   Fixd   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 66.#121 I34   Def    Alloc    rcx  |     |I34 a|     |     |     |     |     |     |     |
 67.#122 rcx   Fixd   Keep     rcx  |     |I34 a|     |     |     |     |     |     |     |
 67.#123 I34   Use *  Keep     rcx  |     |I34 a|     |     |     |     |     |     |     |
 68.#124 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
 68.#125 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 68.#126 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
 68.#127 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
 68.#128 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
 68.#129 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
 68.#130 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
 68.#131 rax   Fixd   Keep     rax  |     |     |     |     |     |     |     |     |     |
 68.#132 I35   Def    Alloc    rax  |I35 a|     |     |     |     |     |     |     |     |
 69.#133 I35   Use *  Keep     rax  |I35 a|     |     |     |     |     |     |     |     |
 70.#134 V9    Def    ORDER(A) rsi  |     |     |     |     |     |V9  a|     |     |     |
 75.#135 V0    Use    ReLod    NA   |     |     |     |     |     |V9  a|     |     |     |
                      THISA(A) rdx  |     |     |V0  a|     |     |V9  a|     |     |     |
 76.#136 I36   Def    BSFIT(A) rcx  |     |I36 a|V0  a|     |     |V9  a|     |     |     |
 79.#137 I36   Use *  Keep     rcx  |     |I36 a|V0  a|     |     |V9  a|     |     |     |
 80.#138 I37   Def    ORDER(A) rdi  |     |     |V0  a|     |     |V9  a|I37 a|     |     |
 81.#139 I37   Use *  Keep     rdi  |     |     |V0  a|     |     |V9  a|I37 a|     |     |
 82.#140 V10   Def    COVRS(A) rdi  |     |     |V0  a|     |     |V9  a|V10 a|     |     |
 85.#141 rcx   Fixd   Keep     rcx  |     |     |V0  a|     |     |V9  a|V10 a|     |     |
 85.#142 V9    Use    Copy     rcx  |     |V9  a|V0  a|     |     |V9  a|V10 a|     |     |
 86.#143 rcx   Fixd   Keep     rcx  |     |V9  a|V0  a|     |     |V9  a|V10 a|     |     |
 86.#144 I38   Def    Alloc    rcx  |     |I38 a|V0  a|     |     |V9  a|V10 a|     |     |
 87.#145 rcx   Fixd   Keep     rcx  |     |I38 a|V0  a|     |     |V9  a|V10 a|     |     |
 87.#146 I38   Use *  Keep     rcx  |     |I38 a|V0  a|     |     |V9  a|V10 a|     |     |
 88.#147 rax   Kill   Keep     rax  |     |     |V0  a|     |     |V9  a|V10 a|     |     |
 88.#148 rcx   Kill   Keep     rcx  |     |     |V0  a|     |     |V9  a|V10 a|     |     |
 88.#149 rdx   Kill   Spill    rdx  |     |     |     |     |     |V9  a|V10 a|     |     |
                      Keep     rdx  |     |     |     |     |     |V9  a|V10 a|     |     |
 88.#150 r8    Kill   Keep     r8   |     |     |     |     |     |V9  a|V10 a|     |     |
 88.#151 r9    Kill   Keep     r9   |     |     |     |     |     |V9  a|V10 a|     |     |
 88.#152 r10   Kill   Keep     r10  |     |     |     |     |     |V9  a|V10 a|     |     |
 88.#153 r11   Kill   Keep     r11  |     |     |     |     |     |V9  a|V10 a|     |     |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
 93.#154 V10   Use *  Keep     rdi  |     |     |     |     |     |V9  a|V10 a|     |     |
 94.#155 I39   Def    Alloc    rcx  |     |I39 a|     |     |     |V9  a|     |     |     |
 97.#156 rcx   Fixd   Keep     rcx  |     |I39 a|     |     |     |V9  a|     |     |     |
 97.#157 I39   Use *  Keep     rcx  |     |I39 a|     |     |     |V9  a|     |     |     |
 97.#158 rdx   Fixd   Keep     rdx  |     |I39 a|     |     |     |V9  a|     |     |     |
 97.#159 V9    Use *  Copy     rdx  |     |I39 a|V9  a|     |     |V9  a|     |     |     |
 98.#160 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
 98.#161 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 98.#162 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
 98.#163 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
 98.#164 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
 98.#165 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
 98.#166 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
 98.#167 mm0   Kill   Keep     mm0  |     |     |     |     |     |     |     |     |     |
 98.#168 mm1   Kill   Keep     mm1  |     |     |     |     |     |     |     |     |     |
 98.#169 mm2   Kill   Keep     mm2  |     |     |     |     |     |     |     |     |     |
 98.#170 mm3   Kill   Keep     mm3  |     |     |     |     |     |     |     |     |     |
 98.#171 mm4   Kill   Keep     mm4  |     |     |     |     |     |     |     |     |     |
 98.#172 mm5   Kill   Keep     mm5  |     |     |     |     |     |     |     |     |     |
102.#173 C40   Def    Alloc    rcx  |     |C40 a|     |     |     |     |     |     |     |
103.#174 rcx   Fixd   Keep     rcx  |     |C40 a|     |     |     |     |     |     |     |
103.#175 C40   Use *  Keep     rcx  |     |C40 a|     |     |     |     |     |     |     |
104.#176 rcx   Fixd   Keep     rcx  |     |     |     |     |     |     |     |     |     |
104.#177 I41   Def    Alloc    rcx  |     |I41 a|     |     |     |     |     |     |     |
105.#178 rcx   Fixd   Keep     rcx  |     |I41 a|     |     |     |     |     |     |     |
105.#179 I41   Use *  Keep     rcx  |     |I41 a|     |     |     |     |     |     |     |
106.#180 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
106.#181 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
106.#182 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
106.#183 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
106.#184 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
106.#185 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
106.#186 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
106.#187 rax   Fixd   Keep     rax  |     |     |     |     |     |     |     |     |     |
106.#188 I42   Def    Alloc    rax  |I42 a|     |     |     |     |     |     |     |     |
107.#189 I42   Use *  Keep     rax  |I42 a|     |     |     |     |     |     |     |     |
108.#190 V11   Def    ORDER(A) rsi  |     |     |     |     |     |V11 a|     |     |     |
111.#191 rcx   Fixd   Keep     rcx  |     |     |     |     |     |V11 a|     |     |     |
111.#192 V11   Use    Copy     rcx  |     |V11 a|     |     |     |V11 a|     |     |     |
112.#193 rcx   Fixd   Keep     rcx  |     |V11 a|     |     |     |V11 a|     |     |     |
112.#194 I43   Def    Alloc    rcx  |     |I43 a|     |     |     |V11 a|     |     |     |
115.#195 rdx   Fixd   Keep     rdx  |     |I43 a|     |     |     |V11 a|     |     |     |
115.#196 V0    Use    ReLod    NA   |     |I43 a|     |     |     |V11 a|     |     |     |
                      Alloc    rdx  |     |I43 a|V0  a|     |     |V11 a|     |     |     |
116.#197 rdx   Fixd   Keep     rdx  |     |I43 a|V0  a|     |     |V11 a|     |     |     |
116.#198 I44   Def    PtArg    rdx  |     |I43 a|V0  a|     |     |V11 a|     |     |     |
118.#199 C45   Def    Alloc    r8   |     |I43 a|V0  a|     |     |V11 a|     |C45 a|     |
119.#200 r8    Fixd   Keep     r8   |     |I43 a|V0  a|     |     |V11 a|     |C45 a|     |
119.#201 C45   Use *  Keep     r8   |     |I43 a|V0  a|     |     |V11 a|     |C45 a|     |
120.#202 r8    Fixd   Keep     r8   |     |I43 a|V0  a|     |     |V11 a|     |     |     |
120.#203 I46   Def    Alloc    r8   |     |I43 a|V0  a|     |     |V11 a|     |I46 a|     |
121.#204 rcx   Fixd   Keep     rcx  |     |I43 a|V0  a|     |     |V11 a|     |I46 a|     |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
121.#205 I43   Use *  Keep     rcx  |     |I43 a|V0  a|     |     |V11 a|     |I46 a|     |
121.#206 rdx   Fixd   Keep     rdx  |     |I43 a|V0  a|     |     |V11 a|     |I46 a|     |
121.#207 I44   Use *  PtArg    rdx  |     |I43 a|V0  a|     |     |V11 a|     |I46 a|     |
121.#208 r8    Fixd   Keep     r8   |     |I43 a|V0  a|     |     |V11 a|     |I46 a|     |
121.#209 I46   Use *  Keep     r8   |     |I43 a|V0  a|     |     |V11 a|     |I46 a|     |
122.#210 rax   Kill   Keep     rax  |     |     |V0  a|     |     |V11 a|     |     |     |
122.#211 rcx   Kill   Keep     rcx  |     |     |V0  a|     |     |V11 a|     |     |     |
122.#212 rdx   Kill   Spill    rdx  |     |     |Busy |     |     |V11 a|     |     |     |
                      Keep     rdx  |     |     |     |     |     |V11 a|     |     |     |
122.#213 r8    Kill   Keep     r8   |     |     |     |     |     |V11 a|     |     |     |
122.#214 r9    Kill   Keep     r9   |     |     |     |     |     |V11 a|     |     |     |
122.#215 r10   Kill   Keep     r10  |     |     |     |     |     |V11 a|     |     |     |
122.#216 r11   Kill   Keep     r11  |     |     |     |     |     |V11 a|     |     |     |
126.#217 C47   Def    Alloc    rcx  |     |C47 a|     |     |     |V11 a|     |     |     |
127.#218 rcx   Fixd   Keep     rcx  |     |C47 a|     |     |     |V11 a|     |     |     |
127.#219 C47   Use *  Keep     rcx  |     |C47 a|     |     |     |V11 a|     |     |     |
128.#220 rcx   Fixd   Keep     rcx  |     |     |     |     |     |V11 a|     |     |     |
128.#221 I48   Def    Alloc    rcx  |     |I48 a|     |     |     |V11 a|     |     |     |
129.#222 rcx   Fixd   Keep     rcx  |     |I48 a|     |     |     |V11 a|     |     |     |
129.#223 I48   Use *  Keep     rcx  |     |I48 a|     |     |     |V11 a|     |     |     |
130.#224 rax   Kill   Keep     rax  |     |     |     |     |     |V11 a|     |     |     |
130.#225 rcx   Kill   Keep     rcx  |     |     |     |     |     |V11 a|     |     |     |
130.#226 rdx   Kill   Keep     rdx  |     |     |     |     |     |V11 a|     |     |     |
130.#227 r8    Kill   Keep     r8   |     |     |     |     |     |V11 a|     |     |     |
130.#228 r9    Kill   Keep     r9   |     |     |     |     |     |V11 a|     |     |     |
130.#229 r10   Kill   Keep     r10  |     |     |     |     |     |V11 a|     |     |     |
130.#230 r11   Kill   Keep     r11  |     |     |     |     |     |V11 a|     |     |     |
130.#231 rax   Fixd   Keep     rax  |     |     |     |     |     |V11 a|     |     |     |
130.#232 I49   Def    Alloc    rax  |I49 a|     |     |     |     |V11 a|     |     |     |
131.#233 I49   Use *  Keep     rax  |I49 a|     |     |     |     |V11 a|     |     |     |
132.#234 V12   Def    ORDER(A) rdi  |     |     |     |     |     |V11 a|V12 a|     |     |
135.#235 rcx   Fixd   Keep     rcx  |     |     |     |     |     |V11 a|V12 a|     |     |
135.#236 V12   Use    Copy     rcx  |     |V12 a|     |     |     |V11 a|V12 a|     |     |
136.#237 rcx   Fixd   Keep     rcx  |     |V12 a|     |     |     |V11 a|V12 a|     |     |
136.#238 I50   Def    Alloc    rcx  |     |I50 a|     |     |     |V11 a|V12 a|     |     |
139.#239 rdx   Fixd   Keep     rdx  |     |I50 a|     |     |     |V11 a|V12 a|     |     |
139.#240 V11   Use *  Copy     rdx  |     |I50 a|V11 a|     |     |V11 a|V12 a|     |     |
140.#241 rdx   Fixd   Keep     rdx  |     |I50 a|     |     |     |     |V12 a|     |     |
140.#242 I51   Def    Alloc    rdx  |     |I50 a|I51 a|     |     |     |V12 a|     |     |
141.#243 rcx   Fixd   Keep     rcx  |     |I50 a|I51 a|     |     |     |V12 a|     |     |
141.#244 I50   Use *  Keep     rcx  |     |I50 a|I51 a|     |     |     |V12 a|     |     |
141.#245 rdx   Fixd   Keep     rdx  |     |I50 a|I51 a|     |     |     |V12 a|     |     |
141.#246 I51   Use *  Keep     rdx  |     |I50 a|I51 a|     |     |     |V12 a|     |     |
142.#247 rax   Kill   Keep     rax  |     |     |     |     |     |     |V12 a|     |     |
142.#248 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |V12 a|     |     |
142.#249 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |V12 a|     |     |
142.#250 r8    Kill   Keep     r8   |     |     |     |     |     |     |V12 a|     |     |
142.#251 r9    Kill   Keep     r9   |     |     |     |     |     |     |V12 a|     |     |
142.#252 r10   Kill   Keep     r10  |     |     |     |     |     |     |V12 a|     |     |
142.#253 r11   Kill   Keep     r11  |     |     |     |     |     |     |V12 a|     |     |
147.#254 rcx   Fixd   Keep     rcx  |     |     |     |     |     |     |V12 a|     |     |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
147.#255 V12   Use *  Copy     rcx  |     |V12 a|     |     |     |     |V12 a|     |     |
148.#256 rcx   Fixd   Keep     rcx  |     |     |     |     |     |     |     |     |     |
148.#257 I52   Def    Alloc    rcx  |     |I52 a|     |     |     |     |     |     |     |
149.#258 rcx   Fixd   Keep     rcx  |     |I52 a|     |     |     |     |     |     |     |
149.#259 I52   Use *  Keep     rcx  |     |I52 a|     |     |     |     |     |     |     |
150.#260 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
150.#261 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
150.#262 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
150.#263 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
150.#264 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
150.#265 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
150.#266 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
154.#267 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
154.#268 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
154.#269 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
154.#270 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
154.#271 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
154.#272 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
154.#273 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
154.#274 rax   Fixd   Keep     rax  |     |     |     |     |     |     |     |     |     |
154.#275 I53   Def    Alloc    rax  |I53 a|     |     |     |     |     |     |     |     |
155.#276 I53   Use *  Keep     rax  |I53 a|     |     |     |     |     |     |     |     |
160.#277 I54   Def    Alloc    rcx  |     |I54 a|     |     |     |     |     |     |     |
161.#278 rcx   Fixd   Keep     rcx  |     |I54 a|     |     |     |     |     |     |     |
161.#279 I54   Use *  Keep     rcx  |     |I54 a|     |     |     |     |     |     |     |
162.#280 rcx   Fixd   Keep     rcx  |     |     |     |     |     |     |     |     |     |
162.#281 I55   Def    Alloc    rcx  |     |I55 a|     |     |     |     |     |     |     |
163.#282 rcx   Fixd   Keep     rcx  |     |I55 a|     |     |     |     |     |     |     |
163.#283 I55   Use *  Keep     rcx  |     |I55 a|     |     |     |     |     |     |     |
164.#284 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
164.#285 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
164.#286 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
164.#287 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
164.#288 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
164.#289 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
164.#290 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
164.#291 rax   Fixd   Keep     rax  |     |     |     |     |     |     |     |     |     |
164.#292 I56   Def    Alloc    rax  |I56 a|     |     |     |     |     |     |     |     |
165.#293 I56   Use *  Keep     rax  |I56 a|     |     |     |     |     |     |     |     |
166.#294 V22   Def    BSFIT(A) rcx  |     |V22 a|     |     |     |     |     |     |     |
169.#295 rcx   Fixd   Keep     rcx  |     |V22 a|     |     |     |     |     |     |     |
169.#296 V22   Use *  Keep     rcx  |     |V22 a|     |     |     |     |     |     |     |
170.#297 rcx   Fixd   Keep     rcx  |     |     |     |     |     |     |     |     |     |
170.#298 I57   Def    Alloc    rcx  |     |I57 a|     |     |     |     |     |     |     |
172.#299 C58   Def    BSFIT(A) rdx  |     |I57 a|C58 a|     |     |     |     |     |     |
173.#300 C58   Use *  Keep     rdx  |     |I57 a|C58 a|     |     |     |     |     |     |
174.#301 I59   Def    Alloc    rdx  |     |I57 a|I59 a|     |     |     |     |     |     |
175.#302 rdx   Fixd   Keep     rdx  |     |I57 a|I59 a|     |     |     |     |     |     |
175.#303 I59   Use *  Keep     rdx  |     |I57 a|I59 a|     |     |     |     |     |     |
176.#304 rdx   Fixd   Keep     rdx  |     |I57 a|     |     |     |     |     |     |     |
176.#305 I60   Def    Alloc    rdx  |     |I57 a|I60 a|     |     |     |     |     |     |
177.#306 rcx   Fixd   Keep     rcx  |     |I57 a|I60 a|     |     |     |     |     |     |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
177.#307 I57   Use *  Keep     rcx  |     |I57 a|I60 a|     |     |     |     |     |     |
177.#308 rdx   Fixd   Keep     rdx  |     |I57 a|I60 a|     |     |     |     |     |     |
177.#309 I60   Use *  Keep     rdx  |     |I57 a|I60 a|     |     |     |     |     |     |
178.#310 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
178.#311 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
178.#312 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
178.#313 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
178.#314 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
178.#315 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
178.#316 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
178.#317 rax   Fixd   Keep     rax  |     |     |     |     |     |     |     |     |     |
178.#318 I61   Def    DUconflict    |     |     |     |     |     |     |     |     |     |
  Case #6 need a copy               |     |     |     |     |     |     |     |     |     |
                      Alloc    rax  |I61 a|     |     |     |     |     |     |     |     |
179.#319 rcx   Fixd   Keep     rcx  |I61 a|     |     |     |     |     |     |     |     |
179.#320 I61   Use *  Copy     rcx  |I61 a|I61 a|     |     |     |     |     |     |     |
180.#321 rcx   Fixd   Keep     rcx  |     |     |     |     |     |     |     |     |     |
180.#322 I62   Def    Alloc    rcx  |     |I62 a|     |     |     |     |     |     |     |
181.#323 rcx   Fixd   Keep     rcx  |     |I62 a|     |     |     |     |     |     |     |
181.#324 I62   Use *  Keep     rcx  |     |I62 a|     |     |     |     |     |     |     |
182.#325 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
182.#326 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
182.#327 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
182.#328 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
182.#329 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
182.#330 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
182.#331 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
186.#332 C63   Def    ORDER(A) rsi  |     |     |     |     |     |C63 a|     |     |     |
187.#333 C63   Use *  Keep     rsi  |     |     |     |     |     |C63 a|     |     |     |
188.#334 V3    Def    COVRS(A) rsi  |     |     |     |     |     |V3  a|     |     |     |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
189.#335 BB2  PredBB1               |     |     |     |     |     |V3  a|     |     |     |
197.#336 V0    Use    ReLod    NA   |     |     |     |     |     |V3  a|     |     |     |
                      THISA(A) rdx  |     |     |V0  a|     |     |V3  a|     |     |     |
198.#337 I64   Def    BSFIT(A) rcx  |     |I64 a|V0  a|     |     |V3  a|     |     |     |
199.#338 I64   Use *  Keep     rcx  |     |I64 a|V0  a|     |     |V3  a|     |     |     |
204.#339 C65   Def    BSFIT(A) rcx  |     |C65 a|V0  a|     |     |V3  a|     |     |     |
205.#340 C65   Use *  Keep     rcx  |     |C65 a|V0  a|     |     |V3  a|     |     |     |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
207.#341 BB3  PredBB2               |     |     |V0  a|     |     |V3  a|     |     |     |
212.#342 I66   Def    Spill    rdx  |     |     |     |     |     |V3  a|     |     |     |
                      Alloc    rdx  |     |     |I66 a|     |     |V3  a|     |     |     |
213.#343 rdx   Fixd   Keep     rdx  |     |     |I66 a|     |     |V3  a|     |     |     |
213.#344 I66   Use *  Keep     rdx  |     |     |I66 a|     |     |V3  a|     |     |     |
214.#345 rdx   Fixd   Keep     rdx  |     |     |     |     |     |V3  a|     |     |     |
214.#346 I67   Def    Alloc    rdx  |     |     |I67 a|     |     |V3  a|     |     |     |
216.#347 I68   Def    Alloc    rcx  |     |I68 a|I67 a|     |     |V3  a|     |     |     |
217.#348 rcx   Fixd   Keep     rcx  |     |I68 a|I67 a|     |     |V3  a|     |     |     |
217.#349 I68   Use *  Keep     rcx  |     |I68 a|I67 a|     |     |V3  a|     |     |     |
218.#350 rcx   Fixd   Keep     rcx  |     |     |I67 a|     |     |V3  a|     |     |     |
218.#351 I69   Def    Alloc    rcx  |     |I69 a|I67 a|     |     |V3  a|     |     |     |
219.#352 rdx   Fixd   Keep     rdx  |     |I69 a|I67 a|     |     |V3  a|     |     |     |
219.#353 I67   Use *  Keep     rdx  |     |I69 a|I67 a|     |     |V3  a|     |     |     |
219.#354 rcx   Fixd   Keep     rcx  |     |I69 a|I67 a|     |     |V3  a|     |     |     |
219.#355 I69   Use *  Keep     rcx  |     |I69 a|I67 a|     |     |V3  a|     |     |     |
220.#356 rax   Kill   Keep     rax  |     |     |     |     |     |V3  a|     |     |     |
220.#357 rcx   Kill   Keep     rcx  |     |     |     |     |     |V3  a|     |     |     |
220.#358 rdx   Kill   Keep     rdx  |     |     |     |     |     |V3  a|     |     |     |
220.#359 r8    Kill   Keep     r8   |     |     |     |     |     |V3  a|     |     |     |
220.#360 r9    Kill   Keep     r9   |     |     |     |     |     |V3  a|     |     |     |
220.#361 r10   Kill   Keep     r10  |     |     |     |     |     |V3  a|     |     |     |
220.#362 r11   Kill   Keep     r11  |     |     |     |     |     |V3  a|     |     |     |
224.#363 C70   Def    Alloc    rcx  |     |C70 a|     |     |     |V3  a|     |     |     |
225.#364 rcx   Fixd   Keep     rcx  |     |C70 a|     |     |     |V3  a|     |     |     |
225.#365 C70   Use *  Keep     rcx  |     |C70 a|     |     |     |V3  a|     |     |     |
226.#366 rcx   Fixd   Keep     rcx  |     |     |     |     |     |V3  a|     |     |     |
226.#367 I71   Def    Alloc    rcx  |     |I71 a|     |     |     |V3  a|     |     |     |
227.#368 rcx   Fixd   Keep     rcx  |     |I71 a|     |     |     |V3  a|     |     |     |
227.#369 I71   Use *  Keep     rcx  |     |I71 a|     |     |     |V3  a|     |     |     |
228.#370 rax   Kill   Keep     rax  |     |     |     |     |     |V3  a|     |     |     |
228.#371 rcx   Kill   Keep     rcx  |     |     |     |     |     |V3  a|     |     |     |
228.#372 rdx   Kill   Keep     rdx  |     |     |     |     |     |V3  a|     |     |     |
228.#373 r8    Kill   Keep     r8   |     |     |     |     |     |V3  a|     |     |     |
228.#374 r9    Kill   Keep     r9   |     |     |     |     |     |V3  a|     |     |     |
228.#375 r10   Kill   Keep     r10  |     |     |     |     |     |V3  a|     |     |     |
228.#376 r11   Kill   Keep     r11  |     |     |     |     |     |V3  a|     |     |     |
228.#377 rax   Fixd   Keep     rax  |     |     |     |     |     |V3  a|     |     |     |
228.#378 I72   Def    Alloc    rax  |I72 a|     |     |     |     |V3  a|     |     |     |
229.#379 I72   Use *  Keep     rax  |I72 a|     |     |     |     |V3  a|     |     |     |
230.#380 V13   Def    ORDER(A) rdi  |     |     |     |     |     |V3  a|V13 a|     |     |
235.#381 V0    Use    ReLod    NA   |     |     |     |     |     |V3  a|V13 a|     |     |
                      THISA(A) rdx  |     |     |V0  a|     |     |V3  a|V13 a|     |     |
236.#382 I73   Def    BSFIT(A) rcx  |     |I73 a|V0  a|     |     |V3  a|V13 a|     |     |
239.#383 I73   Use *  Keep     rcx  |     |I73 a|V0  a|     |     |V3  a|V13 a|     |     |
240.#384 I74   Def    ORDER(A) rbx  |     |     |V0  a|I74 a|     |V3  a|V13 a|     |     |
241.#385 I74   Use *  Keep     rbx  |     |     |V0  a|I74 a|     |V3  a|V13 a|     |     |
242.#386 V14   Def    COVRS(A) rbx  |     |     |V0  a|V14 a|     |V3  a|V13 a|     |     |
245.#387 rcx   Fixd   Keep     rcx  |     |     |V0  a|V14 a|     |V3  a|V13 a|     |     |
245.#388 V13   Use    Copy     rcx  |     |V13 a|V0  a|V14 a|     |V3  a|V13 a|     |     |
246.#389 rcx   Fixd   Keep     rcx  |     |V13 a|V0  a|V14 a|     |V3  a|V13 a|     |     |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
246.#390 I75   Def    Alloc    rcx  |     |I75 a|V0  a|V14 a|     |V3  a|V13 a|     |     |
247.#391 rcx   Fixd   Keep     rcx  |     |I75 a|V0  a|V14 a|     |V3  a|V13 a|     |     |
247.#392 I75   Use *  Keep     rcx  |     |I75 a|V0  a|V14 a|     |V3  a|V13 a|     |     |
248.#393 rax   Kill   Keep     rax  |     |     |V0  a|V14 a|     |V3  a|V13 a|     |     |
248.#394 rcx   Kill   Keep     rcx  |     |     |V0  a|V14 a|     |V3  a|V13 a|     |     |
248.#395 rdx   Kill   Spill    rdx  |     |     |     |V14 a|     |V3  a|V13 a|     |     |
                      Keep     rdx  |     |     |     |V14 a|     |V3  a|V13 a|     |     |
248.#396 r8    Kill   Keep     r8   |     |     |     |V14 a|     |V3  a|V13 a|     |     |
248.#397 r9    Kill   Keep     r9   |     |     |     |V14 a|     |V3  a|V13 a|     |     |
248.#398 r10   Kill   Keep     r10  |     |     |     |V14 a|     |V3  a|V13 a|     |     |
248.#399 r11   Kill   Keep     r11  |     |     |     |V14 a|     |V3  a|V13 a|     |     |
253.#400 V14   Use *  Keep     rbx  |     |     |     |V14 a|     |V3  a|V13 a|     |     |
254.#401 I76   Def    Alloc    rcx  |     |I76 a|     |     |     |V3  a|V13 a|     |     |
257.#402 rcx   Fixd   Keep     rcx  |     |I76 a|     |     |     |V3  a|V13 a|     |     |
257.#403 I76   Use *  Keep     rcx  |     |I76 a|     |     |     |V3  a|V13 a|     |     |
257.#404 rdx   Fixd   Keep     rdx  |     |I76 a|     |     |     |V3  a|V13 a|     |     |
257.#405 V13   Use *  Copy     rdx  |     |I76 a|V13 a|     |     |V3  a|V13 a|     |     |
258.#406 rax   Kill   Keep     rax  |     |     |     |     |     |V3  a|     |     |     |
258.#407 rcx   Kill   Keep     rcx  |     |     |     |     |     |V3  a|     |     |     |
258.#408 rdx   Kill   Keep     rdx  |     |     |     |     |     |V3  a|     |     |     |
258.#409 r8    Kill   Keep     r8   |     |     |     |     |     |V3  a|     |     |     |
258.#410 r9    Kill   Keep     r9   |     |     |     |     |     |V3  a|     |     |     |
258.#411 r10   Kill   Keep     r10  |     |     |     |     |     |V3  a|     |     |     |
258.#412 r11   Kill   Keep     r11  |     |     |     |     |     |V3  a|     |     |     |
258.#413 mm0   Kill   Keep     mm0  |     |     |     |     |     |V3  a|     |     |     |
258.#414 mm1   Kill   Keep     mm1  |     |     |     |     |     |V3  a|     |     |     |
258.#415 mm2   Kill   Keep     mm2  |     |     |     |     |     |V3  a|     |     |     |
258.#416 mm3   Kill   Keep     mm3  |     |     |     |     |     |V3  a|     |     |     |
258.#417 mm4   Kill   Keep     mm4  |     |     |     |     |     |V3  a|     |     |     |
258.#418 mm5   Kill   Keep     mm5  |     |     |     |     |     |V3  a|     |     |     |
265.#419 V0    Use    ReLod    NA   |     |     |     |     |     |V3  a|     |     |     |
                      THISA(A) rdx  |     |     |V0  a|     |     |V3  a|     |     |     |
266.#420 I77   Def    BSFIT(A) rcx  |     |I77 a|V0  a|     |     |V3  a|     |     |     |
267.#421 I77   Use *  Keep     rcx  |     |I77 a|V0  a|     |     |V3  a|     |     |     |
268.#422 V28   Def    COVRS(A) rcx  |     |V28 a|V0  a|     |     |V3  a|     |     |     |
271.#423 V28   Use    Keep     rcx  |     |V28 a|V0  a|     |     |V3  a|     |     |     |
272.#424 I78   Def    Spill    rcx  |     |     |V0  a|     |     |V3  a|     |     |     |
                      Alloc    rcx  |     |I78 a|V0  a|     |     |V3  a|     |     |     |
277.#425 V28   Use *  ReLod    NA   |     |I78 a|V0  a|     |     |V3  a|     |     |     |
                      ORDER(A) rax  |V28 a|I78 a|V0  a|     |     |V3  a|     |     |     |
278.#426 I79   Def    ORDER(A) rax  |I79 a|I78 a|V0  a|     |     |V3  a|     |     |     |
281.#427 I79   Use *  Keep     rax  |I79 a|I78 a|V0  a|     |     |V3  a|     |     |     |
282.#428 I80   Def    ORDER(A) rdi  |     |I78 a|V0  a|     |     |V3  a|I80 a|     |     |
283.#429 I80   Use *  Keep     rdi  |     |I78 a|V0  a|     |     |V3  a|I80 a|     |     |
284.#430 V27   Def    COVRS(A) rdi  |     |I78 a|V0  a|     |     |V3  a|V27 a|     |     |
287.#431 rcx   Fixd   Keep     rcx  |     |I78 a|V0  a|     |     |V3  a|V27 a|     |     |
287.#432 I78   Use *  Keep     rcx  |     |I78 a|V0  a|     |     |V3  a|V27 a|     |     |
287.#433 rdx   Fixd   Keep     rdx  |     |I78 a|V0  a|     |     |V3  a|V27 a|     |     |
287.#434 V27   Use    Spill    rdx  |     |I78 a|     |     |     |V3  a|V27 i|     |     |
                      Copy     rdx  |     |I78 a|V27 a|     |     |V3  a|V27 a|     |     |
288.#435 rax   Kill   Keep     rax  |     |     |V27 a|     |     |V3  a|V27 a|     |     |
288.#436 rcx   Kill   Keep     rcx  |     |     |V27 a|     |     |V3  a|V27 a|     |     |
288.#437 rdx   Kill   Keep     rdx  |     |     |     |     |     |V3  a|V27 a|     |     |
288.#438 r8    Kill   Keep     r8   |     |     |     |     |     |V3  a|V27 a|     |     |
288.#439 r9    Kill   Keep     r9   |     |     |     |     |     |V3  a|V27 a|     |     |
288.#440 r10   Kill   Keep     r10  |     |     |     |     |     |V3  a|V27 a|     |     |
288.#441 r11   Kill   Keep     r11  |     |     |     |     |     |V3  a|V27 a|     |     |
288.#442 mm0   Kill   Keep     mm0  |     |     |     |     |     |V3  a|V27 a|     |     |
288.#443 mm1   Kill   Keep     mm1  |     |     |     |     |     |V3  a|V27 a|     |     |
288.#444 mm2   Kill   Keep     mm2  |     |     |     |     |     |V3  a|V27 a|     |     |
288.#445 mm3   Kill   Keep     mm3  |     |     |     |     |     |V3  a|V27 a|     |     |
288.#446 mm4   Kill   Keep     mm4  |     |     |     |     |     |V3  a|V27 a|     |     |
288.#447 mm5   Kill   Keep     mm5  |     |     |     |     |     |V3  a|V27 a|     |     |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
292.#448 C81   Def    Alloc    rcx  |     |C81 a|     |     |     |V3  a|V27 a|     |     |
293.#449 rcx   Fixd   Keep     rcx  |     |C81 a|     |     |     |V3  a|V27 a|     |     |
293.#450 C81   Use *  Keep     rcx  |     |C81 a|     |     |     |V3  a|V27 a|     |     |
294.#451 rcx   Fixd   Keep     rcx  |     |     |     |     |     |V3  a|V27 a|     |     |
294.#452 I82   Def    Alloc    rcx  |     |I82 a|     |     |     |V3  a|V27 a|     |     |
295.#453 rcx   Fixd   Keep     rcx  |     |I82 a|     |     |     |V3  a|V27 a|     |     |
295.#454 I82   Use *  Keep     rcx  |     |I82 a|     |     |     |V3  a|V27 a|     |     |
296.#455 rax   Kill   Keep     rax  |     |     |     |     |     |V3  a|V27 a|     |     |
296.#456 rcx   Kill   Keep     rcx  |     |     |     |     |     |V3  a|V27 a|     |     |
296.#457 rdx   Kill   Keep     rdx  |     |     |     |     |     |V3  a|V27 a|     |     |
296.#458 r8    Kill   Keep     r8   |     |     |     |     |     |V3  a|V27 a|     |     |
296.#459 r9    Kill   Keep     r9   |     |     |     |     |     |V3  a|V27 a|     |     |
296.#460 r10   Kill   Keep     r10  |     |     |     |     |     |V3  a|V27 a|     |     |
296.#461 r11   Kill   Keep     r11  |     |     |     |     |     |V3  a|V27 a|     |     |
296.#462 rax   Fixd   Keep     rax  |     |     |     |     |     |V3  a|V27 a|     |     |
296.#463 I83   Def    Alloc    rax  |I83 a|     |     |     |     |V3  a|V27 a|     |     |
297.#464 I83   Use *  Keep     rax  |I83 a|     |     |     |     |V3  a|V27 a|     |     |
298.#465 V15   Def    ORDER(A) rbx  |     |     |     |V15 a|     |V3  a|V27 a|     |     |
301.#466 V27   Use *  Keep     rdi  |     |     |     |V15 a|     |V3  a|V27 a|     |     |
302.#467 V16   Def    COVRS(A) rdi  |     |     |     |V15 a|     |V3  a|V16 a|     |     |
305.#468 rcx   Fixd   Keep     rcx  |     |     |     |V15 a|     |V3  a|V16 a|     |     |
305.#469 V15   Use    Copy     rcx  |     |V15 a|     |V15 a|     |V3  a|V16 a|     |     |
306.#470 rcx   Fixd   Keep     rcx  |     |V15 a|     |V15 a|     |V3  a|V16 a|     |     |
306.#471 I84   Def    Alloc    rcx  |     |I84 a|     |V15 a|     |V3  a|V16 a|     |     |
307.#472 rcx   Fixd   Keep     rcx  |     |I84 a|     |V15 a|     |V3  a|V16 a|     |     |
307.#473 I84   Use *  Keep     rcx  |     |I84 a|     |V15 a|     |V3  a|V16 a|     |     |
308.#474 rax   Kill   Keep     rax  |     |     |     |V15 a|     |V3  a|V16 a|     |     |
308.#475 rcx   Kill   Keep     rcx  |     |     |     |V15 a|     |V3  a|V16 a|     |     |
308.#476 rdx   Kill   Keep     rdx  |     |     |     |V15 a|     |V3  a|V16 a|     |     |
308.#477 r8    Kill   Keep     r8   |     |     |     |V15 a|     |V3  a|V16 a|     |     |
308.#478 r9    Kill   Keep     r9   |     |     |     |V15 a|     |V3  a|V16 a|     |     |
308.#479 r10   Kill   Keep     r10  |     |     |     |V15 a|     |V3  a|V16 a|     |     |
308.#480 r11   Kill   Keep     r11  |     |     |     |V15 a|     |V3  a|V16 a|     |     |
313.#481 V16   Use *  Keep     rdi  |     |     |     |V15 a|     |V3  a|V16 a|     |     |
314.#482 I85   Def    Alloc    rcx  |     |I85 a|     |V15 a|     |V3  a|     |     |     |
317.#483 rcx   Fixd   Keep     rcx  |     |I85 a|     |V15 a|     |V3  a|     |     |     |
317.#484 I85   Use *  Keep     rcx  |     |I85 a|     |V15 a|     |V3  a|     |     |     |
317.#485 rdx   Fixd   Keep     rdx  |     |I85 a|     |V15 a|     |V3  a|     |     |     |
317.#486 V15   Use *  Copy     rdx  |     |I85 a|V15 a|V15 a|     |V3  a|     |     |     |
318.#487 rax   Kill   Keep     rax  |     |     |     |     |     |V3  a|     |     |     |
318.#488 rcx   Kill   Keep     rcx  |     |     |     |     |     |V3  a|     |     |     |
318.#489 rdx   Kill   Keep     rdx  |     |     |     |     |     |V3  a|     |     |     |
318.#490 r8    Kill   Keep     r8   |     |     |     |     |     |V3  a|     |     |     |
318.#491 r9    Kill   Keep     r9   |     |     |     |     |     |V3  a|     |     |     |
318.#492 r10   Kill   Keep     r10  |     |     |     |     |     |V3  a|     |     |     |
318.#493 r11   Kill   Keep     r11  |     |     |     |     |     |V3  a|     |     |     |
318.#494 mm0   Kill   Keep     mm0  |     |     |     |     |     |V3  a|     |     |     |
318.#495 mm1   Kill   Keep     mm1  |     |     |     |     |     |V3  a|     |     |     |
318.#496 mm2   Kill   Keep     mm2  |     |     |     |     |     |V3  a|     |     |     |
318.#497 mm3   Kill   Keep     mm3  |     |     |     |     |     |V3  a|     |     |     |
318.#498 mm4   Kill   Keep     mm4  |     |     |     |     |     |V3  a|     |     |     |
318.#499 mm5   Kill   Keep     mm5  |     |     |     |     |     |V3  a|     |     |     |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
319.#500 BB4  PredBB3               |     |     |     |     |     |V3  a|     |     |     |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
329.#501 BB5  PredBB4               |     |     |     |     |     |V3  a|     |     |     |
332.#502 I86   Def    Alloc    rcx  |     |I86 a|     |     |     |V3  a|     |     |     |
333.#503 rcx   Fixd   Keep     rcx  |     |I86 a|     |     |     |V3  a|     |     |     |
333.#504 I86   Use *  Keep     rcx  |     |I86 a|     |     |     |V3  a|     |     |     |
334.#505 rcx   Fixd   Keep     rcx  |     |     |     |     |     |V3  a|     |     |     |
334.#506 I87   Def    Alloc    rcx  |     |I87 a|     |     |     |V3  a|     |     |     |
335.#507 rcx   Fixd   Keep     rcx  |     |I87 a|     |     |     |V3  a|     |     |     |
335.#508 I87   Use *  Keep     rcx  |     |I87 a|     |     |     |V3  a|     |     |     |
336.#509 rax   Kill   Keep     rax  |     |     |     |     |     |V3  a|     |     |     |
336.#510 rcx   Kill   Keep     rcx  |     |     |     |     |     |V3  a|     |     |     |
336.#511 rdx   Kill   Keep     rdx  |     |     |     |     |     |V3  a|     |     |     |
336.#512 r8    Kill   Keep     r8   |     |     |     |     |     |V3  a|     |     |     |
336.#513 r9    Kill   Keep     r9   |     |     |     |     |     |V3  a|     |     |     |
336.#514 r10   Kill   Keep     r10  |     |     |     |     |     |V3  a|     |     |     |
336.#515 r11   Kill   Keep     r11  |     |     |     |     |     |V3  a|     |     |     |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
337.#516 BB6  PredBB4               |     |     |     |     |     |V3  a|     |     |     |
345.#517 V3    Use *  Keep     rsi  |     |     |     |     |     |V3  i|     |     |     |
346.#518 I88   Def    COVRS(A) rsi  |     |     |     |     |     |I88 a|     |     |     |
347.#519 I88   Use *  Keep     rsi  |     |     |     |     |     |I88 a|     |     |     |
                      Restr    rsi  |     |     |     |     |     |V3  i|     |     |     |
348.#520 V3    Def    THISA(A) rsi  |     |     |     |     |     |V3  a|     |     |     |
355.#521 V3    Use    Keep     rsi  |     |     |     |     |     |V3  a|     |     |     |
359.#522 V3    ExpU   Keep     NA   |     |     |     |     |     |V3  a|     |     |     |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
359.#523 BB7  PredBB1               |     |     |     |     |     |     |     |     |     |
364.#524 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
364.#525 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
364.#526 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
364.#527 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
364.#528 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
364.#529 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
364.#530 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
364.#531 rax   Fixd   Keep     rax  |     |     |     |     |     |     |     |     |     |
364.#532 I89   Def    Alloc    rax  |I89 a|     |     |     |     |     |     |     |     |
365.#533 I89   Use *  Keep     rax  |I89 a|     |     |     |     |     |     |     |     |
370.#534 I90   Def    Alloc    rcx  |     |I90 a|     |     |     |     |     |     |     |
371.#535 rcx   Fixd   Keep     rcx  |     |I90 a|     |     |     |     |     |     |     |
371.#536 I90   Use *  Keep     rcx  |     |I90 a|     |     |     |     |     |     |     |
372.#537 rcx   Fixd   Keep     rcx  |     |     |     |     |     |     |     |     |     |
372.#538 I91   Def    Alloc    rcx  |     |I91 a|     |     |     |     |     |     |     |
373.#539 rcx   Fixd   Keep     rcx  |     |I91 a|     |     |     |     |     |     |     |
373.#540 I91   Use *  Keep     rcx  |     |I91 a|     |     |     |     |     |     |     |
374.#541 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
374.#542 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
374.#543 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
374.#544 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
374.#545 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
374.#546 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
374.#547 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
374.#548 rax   Fixd   Keep     rax  |     |     |     |     |     |     |     |     |     |
374.#549 I92   Def    Alloc    rax  |I92 a|     |     |     |     |     |     |     |     |
375.#550 I92   Use *  Keep     rax  |I92 a|     |     |     |     |     |     |     |     |
376.#551 V23   Def    BSFIT(A) rcx  |     |V23 a|     |     |     |     |     |     |     |
379.#552 rcx   Fixd   Keep     rcx  |     |V23 a|     |     |     |     |     |     |     |
379.#553 V23   Use *  Keep     rcx  |     |V23 a|     |     |     |     |     |     |     |
380.#554 rcx   Fixd   Keep     rcx  |     |     |     |     |     |     |     |     |     |
380.#555 I93   Def    Alloc    rcx  |     |I93 a|     |     |     |     |     |     |     |
382.#556 C94   Def    BSFIT(A) rdx  |     |I93 a|C94 a|     |     |     |     |     |     |
383.#557 C94   Use *  Keep     rdx  |     |I93 a|C94 a|     |     |     |     |     |     |
384.#558 I95   Def    Alloc    rdx  |     |I93 a|I95 a|     |     |     |     |     |     |
385.#559 rdx   Fixd   Keep     rdx  |     |I93 a|I95 a|     |     |     |     |     |     |
385.#560 I95   Use *  Keep     rdx  |     |I93 a|I95 a|     |     |     |     |     |     |
386.#561 rdx   Fixd   Keep     rdx  |     |I93 a|     |     |     |     |     |     |     |
386.#562 I96   Def    Alloc    rdx  |     |I93 a|I96 a|     |     |     |     |     |     |
387.#563 rcx   Fixd   Keep     rcx  |     |I93 a|I96 a|     |     |     |     |     |     |
387.#564 I93   Use *  Keep     rcx  |     |I93 a|I96 a|     |     |     |     |     |     |
387.#565 rdx   Fixd   Keep     rdx  |     |I93 a|I96 a|     |     |     |     |     |     |
387.#566 I96   Use *  Keep     rdx  |     |I93 a|I96 a|     |     |     |     |     |     |
388.#567 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
388.#568 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
388.#569 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
388.#570 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
388.#571 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
388.#572 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
388.#573 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
388.#574 rax   Fixd   Keep     rax  |     |     |     |     |     |     |     |     |     |
388.#575 I97   Def    DUconflict    |     |     |     |     |     |     |     |     |     |
  Case #6 need a copy               |     |     |     |     |     |     |     |     |     |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
                      Alloc    rax  |I97 a|     |     |     |     |     |     |     |     |
389.#576 rcx   Fixd   Keep     rcx  |I97 a|     |     |     |     |     |     |     |     |
389.#577 I97   Use *  Copy     rcx  |I97 a|I97 a|     |     |     |     |     |     |     |
390.#578 rcx   Fixd   Keep     rcx  |     |     |     |     |     |     |     |     |     |
390.#579 I98   Def    Alloc    rcx  |     |I98 a|     |     |     |     |     |     |     |
391.#580 rcx   Fixd   Keep     rcx  |     |I98 a|     |     |     |     |     |     |     |
391.#581 I98   Use *  Keep     rcx  |     |I98 a|     |     |     |     |     |     |     |
392.#582 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
392.#583 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
392.#584 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
392.#585 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
392.#586 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
392.#587 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
392.#588 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
393.#589 BB8  PredBB7               |     |     |     |     |     |     |     |     |     |
401.#590 V0    Use    ReLod    NA   |     |     |     |     |     |     |     |     |     |
                      THISA(A) rdx  |     |     |V0  a|     |     |     |     |     |     |
402.#591 I99   Def    BSFIT(A) rcx  |     |I99 a|V0  a|     |     |     |     |     |     |
403.#592 I99   Use *  Keep     rcx  |     |I99 a|V0  a|     |     |     |     |     |     |
408.#593 C100  Def    BSFIT(A) rcx  |     |C100a|V0  a|     |     |     |     |     |     |
409.#594 C100  Use *  Keep     rcx  |     |C100a|V0  a|     |     |     |     |     |     |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
411.#595 BB9  PredBB8               |     |     |V0  a|     |     |     |     |     |     |
416.#596 I101  Def    Spill    rdx  |     |     |     |     |     |     |     |     |     |
                      Alloc    rdx  |     |     |I101a|     |     |     |     |     |     |
417.#597 rdx   Fixd   Keep     rdx  |     |     |I101a|     |     |     |     |     |     |
417.#598 I101  Use *  Keep     rdx  |     |     |I101a|     |     |     |     |     |     |
418.#599 rdx   Fixd   Keep     rdx  |     |     |     |     |     |     |     |     |     |
418.#600 I102  Def    Alloc    rdx  |     |     |I102a|     |     |     |     |     |     |
420.#601 I103  Def    Alloc    rcx  |     |I103a|I102a|     |     |     |     |     |     |
421.#602 rcx   Fixd   Keep     rcx  |     |I103a|I102a|     |     |     |     |     |     |
421.#603 I103  Use *  Keep     rcx  |     |I103a|I102a|     |     |     |     |     |     |
422.#604 rcx   Fixd   Keep     rcx  |     |     |I102a|     |     |     |     |     |     |
422.#605 I104  Def    Alloc    rcx  |     |I104a|I102a|     |     |     |     |     |     |
423.#606 rdx   Fixd   Keep     rdx  |     |I104a|I102a|     |     |     |     |     |     |
423.#607 I102  Use *  Keep     rdx  |     |I104a|I102a|     |     |     |     |     |     |
423.#608 rcx   Fixd   Keep     rcx  |     |I104a|I102a|     |     |     |     |     |     |
423.#609 I104  Use *  Keep     rcx  |     |I104a|I102a|     |     |     |     |     |     |
424.#610 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
424.#611 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
424.#612 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
424.#613 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
424.#614 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
424.#615 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
424.#616 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
431.#617 V0    Use    ReLod    NA   |     |     |     |     |     |     |     |     |     |
                      THISA(A) rdx  |     |     |V0  a|     |     |     |     |     |     |
432.#618 I105  Def    BSFIT(A) rcx  |     |I105a|V0  a|     |     |     |     |     |     |
433.#619 I105  Use *  Keep     rcx  |     |I105a|V0  a|     |     |     |     |     |     |
434.#620 V29   Def    COVRS(A) rcx  |     |V29 a|V0  a|     |     |     |     |     |     |
439.#621 V29   Use    Keep     rcx  |     |V29 a|V0  a|     |     |     |     |     |     |
440.#622 I106  Def    ORDER(A) rax  |I106a|V29 a|V0  a|     |     |     |     |     |     |
447.#623 I106  Use *  Keep     rax  |I106a|V29 a|V0  a|     |     |     |     |     |     |
447.#624 V29   Use *  Keep     rcx  |I106a|V29 a|V0  a|     |     |     |     |     |     |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
451.#625 BB10 PredBB9               |     |     |V0  a|     |     |     |     |     |     |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
461.#626 BB11 PredBB10              |     |     |V0  a|     |     |     |     |     |     |
464.#627 I107  Def    Alloc    rcx  |     |I107a|V0  a|     |     |     |     |     |     |
465.#628 rcx   Fixd   Keep     rcx  |     |I107a|V0  a|     |     |     |     |     |     |
465.#629 I107  Use *  Keep     rcx  |     |I107a|V0  a|     |     |     |     |     |     |
466.#630 rcx   Fixd   Keep     rcx  |     |     |V0  a|     |     |     |     |     |     |
466.#631 I108  Def    Alloc    rcx  |     |I108a|V0  a|     |     |     |     |     |     |
467.#632 rcx   Fixd   Keep     rcx  |     |I108a|V0  a|     |     |     |     |     |     |
467.#633 I108  Use *  Keep     rcx  |     |I108a|V0  a|     |     |     |     |     |     |
468.#634 rax   Kill   Keep     rax  |     |     |V0  a|     |     |     |     |     |     |
468.#635 rcx   Kill   Keep     rcx  |     |     |V0  a|     |     |     |     |     |     |
468.#636 rdx   Kill   Spill    rdx  |     |     |     |     |     |     |     |     |     |
                      Keep     rdx  |     |     |     |     |     |     |     |     |     |
468.#637 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
468.#638 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
468.#639 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
468.#640 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
469.#641 BB12 PredBB10              |     |     |V0  a|     |     |     |     |     |     |
474.#642 C109  Def    Alloc    rcx  |     |C109a|V0  a|     |     |     |     |     |     |
475.#643 rcx   Fixd   Keep     rcx  |     |C109a|V0  a|     |     |     |     |     |     |
475.#644 C109  Use *  Keep     rcx  |     |C109a|V0  a|     |     |     |     |     |     |
476.#645 rcx   Fixd   Keep     rcx  |     |     |V0  a|     |     |     |     |     |     |
476.#646 I110  Def    Alloc    rcx  |     |I110a|V0  a|     |     |     |     |     |     |
477.#647 rcx   Fixd   Keep     rcx  |     |I110a|V0  a|     |     |     |     |     |     |
477.#648 I110  Use *  Keep     rcx  |     |I110a|V0  a|     |     |     |     |     |     |
478.#649 rax   Kill   Keep     rax  |     |     |V0  a|     |     |     |     |     |     |
478.#650 rcx   Kill   Keep     rcx  |     |     |V0  a|     |     |     |     |     |     |
478.#651 rdx   Kill   Spill    rdx  |     |     |     |     |     |     |     |     |     |
                      Keep     rdx  |     |     |     |     |     |     |     |     |     |
478.#652 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
478.#653 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
478.#654 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
478.#655 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
479.#656 BB13 PredBB9               |     |     |V0  a|     |     |     |     |     |     |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
481.#657 BB30 PredBB0               |     |     |     |     |     |     |     |     |     |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
493.#658 BB31 PredBB30              |     |     |     |     |     |     |     |     |     |
498.#659 I111  Def    Alloc    rcx  |     |I111a|     |     |     |     |     |     |     |
499.#660 rcx   Fixd   Keep     rcx  |     |I111a|     |     |     |     |     |     |     |
499.#661 I111  Use *  Keep     rcx  |     |I111a|     |     |     |     |     |     |     |
500.#662 rcx   Fixd   Keep     rcx  |     |     |     |     |     |     |     |     |     |
500.#663 I112  Def    Alloc    rcx  |     |I112a|     |     |     |     |     |     |     |
501.#664 rcx   Fixd   Keep     rcx  |     |I112a|     |     |     |     |     |     |     |
501.#665 I112  Use *  Keep     rcx  |     |I112a|     |     |     |     |     |     |     |
502.#666 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
502.#667 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
502.#668 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
502.#669 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
502.#670 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
502.#671 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
502.#672 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
503.#673 BB32 PredBB30              |     |     |     |     |     |     |     |     |     |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
509.#674 BB14 PredBB0               |     |     |     |     |     |     |     |     |     |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
511.#675 BB15 PredBB0               |     |     |     |     |     |     |     |     |     |
516.#676 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
516.#677 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
516.#678 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
516.#679 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
516.#680 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
516.#681 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
516.#682 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
516.#683 rax   Fixd   Keep     rax  |     |     |     |     |     |     |     |     |     |
516.#684 I113  Def    Alloc    rax  |I113a|     |     |     |     |     |     |     |     |
517.#685 I113  Use *  Keep     rax  |I113a|     |     |     |     |     |     |     |     |
522.#686 I114  Def    Alloc    rcx  |     |I114a|     |     |     |     |     |     |     |
523.#687 rcx   Fixd   Keep     rcx  |     |I114a|     |     |     |     |     |     |     |
523.#688 I114  Use *  Keep     rcx  |     |I114a|     |     |     |     |     |     |     |
524.#689 rcx   Fixd   Keep     rcx  |     |     |     |     |     |     |     |     |     |
524.#690 I115  Def    Alloc    rcx  |     |I115a|     |     |     |     |     |     |     |
525.#691 rcx   Fixd   Keep     rcx  |     |I115a|     |     |     |     |     |     |     |
525.#692 I115  Use *  Keep     rcx  |     |I115a|     |     |     |     |     |     |     |
526.#693 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
526.#694 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
526.#695 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
526.#696 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
526.#697 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
526.#698 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
526.#699 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
526.#700 rax   Fixd   Keep     rax  |     |     |     |     |     |     |     |     |     |
526.#701 I116  Def    Alloc    rax  |I116a|     |     |     |     |     |     |     |     |
527.#702 I116  Use *  Keep     rax  |I116a|     |     |     |     |     |     |     |     |
528.#703 V24   Def    BSFIT(A) rcx  |     |V24 a|     |     |     |     |     |     |     |
531.#704 rcx   Fixd   Keep     rcx  |     |V24 a|     |     |     |     |     |     |     |
531.#705 V24   Use *  Keep     rcx  |     |V24 a|     |     |     |     |     |     |     |
532.#706 rcx   Fixd   Keep     rcx  |     |     |     |     |     |     |     |     |     |
532.#707 I117  Def    Alloc    rcx  |     |I117a|     |     |     |     |     |     |     |
534.#708 C118  Def    BSFIT(A) rdx  |     |I117a|C118a|     |     |     |     |     |     |
535.#709 C118  Use *  Keep     rdx  |     |I117a|C118a|     |     |     |     |     |     |
536.#710 I119  Def    Alloc    rdx  |     |I117a|I119a|     |     |     |     |     |     |
537.#711 rdx   Fixd   Keep     rdx  |     |I117a|I119a|     |     |     |     |     |     |
537.#712 I119  Use *  Keep     rdx  |     |I117a|I119a|     |     |     |     |     |     |
538.#713 rdx   Fixd   Keep     rdx  |     |I117a|     |     |     |     |     |     |     |
538.#714 I120  Def    Alloc    rdx  |     |I117a|I120a|     |     |     |     |     |     |
539.#715 rcx   Fixd   Keep     rcx  |     |I117a|I120a|     |     |     |     |     |     |
539.#716 I117  Use *  Keep     rcx  |     |I117a|I120a|     |     |     |     |     |     |
539.#717 rdx   Fixd   Keep     rdx  |     |I117a|I120a|     |     |     |     |     |     |
539.#718 I120  Use *  Keep     rdx  |     |I117a|I120a|     |     |     |     |     |     |
540.#719 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
540.#720 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
540.#721 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
540.#722 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
540.#723 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
540.#724 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
540.#725 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
540.#726 rax   Fixd   Keep     rax  |     |     |     |     |     |     |     |     |     |
540.#727 I121  Def    DUconflict    |     |     |     |     |     |     |     |     |     |
  Case #6 need a copy               |     |     |     |     |     |     |     |     |     |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
                      Alloc    rax  |I121a|     |     |     |     |     |     |     |     |
541.#728 rcx   Fixd   Keep     rcx  |I121a|     |     |     |     |     |     |     |     |
541.#729 I121  Use *  Copy     rcx  |I121a|I121a|     |     |     |     |     |     |     |
542.#730 rcx   Fixd   Keep     rcx  |     |     |     |     |     |     |     |     |     |
542.#731 I122  Def    Alloc    rcx  |     |I122a|     |     |     |     |     |     |     |
543.#732 rcx   Fixd   Keep     rcx  |     |I122a|     |     |     |     |     |     |     |
543.#733 I122  Use *  Keep     rcx  |     |I122a|     |     |     |     |     |     |     |
544.#734 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
544.#735 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
544.#736 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
544.#737 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
544.#738 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
544.#739 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
544.#740 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
548.#741 C123  Def    BSFIT(A) rcx  |     |C123a|     |     |     |     |     |     |     |
549.#742 C123  Use *  Keep     rcx  |     |C123a|     |     |     |     |     |     |     |
550.#743 I124  Def    Alloc    rcx  |     |I124a|     |     |     |     |     |     |     |
551.#744 rcx   Fixd   Keep     rcx  |     |I124a|     |     |     |     |     |     |     |
551.#745 I124  Use *  Keep     rcx  |     |I124a|     |     |     |     |     |     |     |
552.#746 rcx   Fixd   Keep     rcx  |     |     |     |     |     |     |     |     |     |
552.#747 I125  Def    Alloc    rcx  |     |I125a|     |     |     |     |     |     |     |
553.#748 rcx   Fixd   Keep     rcx  |     |I125a|     |     |     |     |     |     |     |
553.#749 I125  Use *  Keep     rcx  |     |I125a|     |     |     |     |     |     |     |
554.#750 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
554.#751 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
554.#752 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
554.#753 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
554.#754 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
554.#755 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
554.#756 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
558.#757 C126  Def    BSFIT(A) rcx  |     |C126a|     |     |     |     |     |     |     |
559.#758 C126  Use *  Keep     rcx  |     |C126a|     |     |     |     |     |     |     |
560.#759 I127  Def    Alloc    rcx  |     |I127a|     |     |     |     |     |     |     |
561.#760 rcx   Fixd   Keep     rcx  |     |I127a|     |     |     |     |     |     |     |
561.#761 I127  Use *  Keep     rcx  |     |I127a|     |     |     |     |     |     |     |
562.#762 rcx   Fixd   Keep     rcx  |     |     |     |     |     |     |     |     |     |
562.#763 I128  Def    Alloc    rcx  |     |I128a|     |     |     |     |     |     |     |
563.#764 rcx   Fixd   Keep     rcx  |     |I128a|     |     |     |     |     |     |     |
563.#765 I128  Use *  Keep     rcx  |     |I128a|     |     |     |     |     |     |     |
564.#766 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
564.#767 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
564.#768 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
564.#769 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
564.#770 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
564.#771 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
564.#772 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
568.#773 C129  Def    BSFIT(A) rcx  |     |C129a|     |     |     |     |     |     |     |
569.#774 C129  Use *  Keep     rcx  |     |C129a|     |     |     |     |     |     |     |
570.#775 I130  Def    Alloc    rcx  |     |I130a|     |     |     |     |     |     |     |
571.#776 rcx   Fixd   Keep     rcx  |     |I130a|     |     |     |     |     |     |     |
571.#777 I130  Use *  Keep     rcx  |     |I130a|     |     |     |     |     |     |     |
572.#778 rcx   Fixd   Keep     rcx  |     |     |     |     |     |     |     |     |     |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
572.#779 I131  Def    Alloc    rcx  |     |I131a|     |     |     |     |     |     |     |
573.#780 rcx   Fixd   Keep     rcx  |     |I131a|     |     |     |     |     |     |     |
573.#781 I131  Use *  Keep     rcx  |     |I131a|     |     |     |     |     |     |     |
574.#782 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
574.#783 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
574.#784 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
574.#785 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
574.#786 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
574.#787 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
574.#788 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
578.#789 C132  Def    BSFIT(A) rcx  |     |C132a|     |     |     |     |     |     |     |
579.#790 C132  Use *  Keep     rcx  |     |C132a|     |     |     |     |     |     |     |
580.#791 I133  Def    Alloc    rcx  |     |I133a|     |     |     |     |     |     |     |
581.#792 rcx   Fixd   Keep     rcx  |     |I133a|     |     |     |     |     |     |     |
581.#793 I133  Use *  Keep     rcx  |     |I133a|     |     |     |     |     |     |     |
582.#794 rcx   Fixd   Keep     rcx  |     |     |     |     |     |     |     |     |     |
582.#795 I134  Def    Alloc    rcx  |     |I134a|     |     |     |     |     |     |     |
583.#796 rcx   Fixd   Keep     rcx  |     |I134a|     |     |     |     |     |     |     |
583.#797 I134  Use *  Keep     rcx  |     |I134a|     |     |     |     |     |     |     |
584.#798 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
584.#799 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
584.#800 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
584.#801 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
584.#802 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
584.#803 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
584.#804 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
585.#805 BB19 PredBB15              |     |     |     |     |     |     |     |     |     |
588.#806 I135  Def    Alloc    rcx  |     |I135a|     |     |     |     |     |     |     |
589.#807 rcx   Fixd   Keep     rcx  |     |I135a|     |     |     |     |     |     |     |
589.#808 I135  Use *  Keep     rcx  |     |I135a|     |     |     |     |     |     |     |
590.#809 rcx   Fixd   Keep     rcx  |     |     |     |     |     |     |     |     |     |
590.#810 I136  Def    Alloc    rcx  |     |I136a|     |     |     |     |     |     |     |
592.#811 C137  Def    Alloc    rdx  |     |I136a|C137a|     |     |     |     |     |     |
593.#812 rdx   Fixd   Keep     rdx  |     |I136a|C137a|     |     |     |     |     |     |
593.#813 C137  Use *  Keep     rdx  |     |I136a|C137a|     |     |     |     |     |     |
594.#814 rdx   Fixd   Keep     rdx  |     |I136a|     |     |     |     |     |     |     |
594.#815 I138  Def    Alloc    rdx  |     |I136a|I138a|     |     |     |     |     |     |
595.#816 rcx   Fixd   Keep     rcx  |     |I136a|I138a|     |     |     |     |     |     |
595.#817 I136  Use *  Keep     rcx  |     |I136a|I138a|     |     |     |     |     |     |
595.#818 rdx   Fixd   Keep     rdx  |     |I136a|I138a|     |     |     |     |     |     |
595.#819 I138  Use *  Keep     rdx  |     |I136a|I138a|     |     |     |     |     |     |
596.#820 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
596.#821 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
596.#822 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
596.#823 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
596.#824 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
596.#825 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
596.#826 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
605.#827 BB20 PredBB19              |     |     |     |     |     |     |     |     |     |
610.#828 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
610.#829 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
610.#830 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
610.#831 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
610.#832 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
610.#833 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
610.#834 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
610.#835 rax   Fixd   Keep     rax  |     |     |     |     |     |     |     |     |     |
610.#836 I139  Def    DUconflict    |     |     |     |     |     |     |     |     |     |
  Case #6 need a copy               |     |     |     |     |     |     |     |     |     |
                      Alloc    rax  |I139a|     |     |     |     |     |     |     |     |
611.#837 rcx   Fixd   Keep     rcx  |I139a|     |     |     |     |     |     |     |     |
611.#838 I139  Use *  Copy     rcx  |I139a|I139a|     |     |     |     |     |     |     |
612.#839 rcx   Fixd   Keep     rcx  |     |     |     |     |     |     |     |     |     |
612.#840 I140  Def    Alloc    rcx  |     |I140a|     |     |     |     |     |     |     |
613.#841 rcx   Fixd   Keep     rcx  |     |I140a|     |     |     |     |     |     |     |
613.#842 I140  Use *  Keep     rcx  |     |I140a|     |     |     |     |     |     |     |
614.#843 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
614.#844 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
614.#845 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
614.#846 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
614.#847 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
614.#848 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
614.#849 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
615.#850 BB21 PredBB19              |     |     |     |     |     |     |     |     |     |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
625.#851 BB22 PredBB21              |     |     |     |     |     |     |     |     |     |
630.#852 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
630.#853 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
630.#854 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
630.#855 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
630.#856 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
630.#857 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
630.#858 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
631.#859 BB23 PredBB21              |     |     |     |     |     |     |     |     |     |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
641.#860 BB24 PredBB23              |     |     |     |     |     |     |     |     |     |
651.#861 V0    Use    ReLod    NA   |     |     |     |     |     |     |     |     |     |
                      THISA(A) rdx  |     |     |V0  a|     |     |     |     |     |     |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
653.#862 BB25 PredBB23              |     |     |V0  a|     |     |     |     |     |     |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
663.#863 BB26 PredBB15              |     |     |V0  a|     |     |     |     |     |     |
673.#864 V0    Use *  Keep     rdx  |     |     |V0  a|     |     |     |     |     |     |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
679.#865 BB27 PredBB0               |     |     |     |     |     |     |     |     |     |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
691.#866 BB28 PredBB27              |     |     |     |     |     |     |     |     |     |
696.#867 I141  Def    Alloc    rcx  |     |I141a|     |     |     |     |     |     |     |
697.#868 rcx   Fixd   Keep     rcx  |     |I141a|     |     |     |     |     |     |     |
697.#869 I141  Use *  Keep     rcx  |     |I141a|     |     |     |     |     |     |     |
698.#870 rcx   Fixd   Keep     rcx  |     |     |     |     |     |     |     |     |     |
698.#871 I142  Def    Alloc    rcx  |     |I142a|     |     |     |     |     |     |     |
699.#872 rcx   Fixd   Keep     rcx  |     |I142a|     |     |     |     |     |     |     |
699.#873 I142  Use *  Keep     rcx  |     |I142a|     |     |     |     |     |     |     |
700.#874 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
700.#875 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
700.#876 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
700.#877 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
700.#878 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
700.#879 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
700.#880 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
701.#881 BB29 PredBB27              |     |     |     |     |     |     |     |     |     |

------------
REFPOSITIONS AFTER ALLOCATION: 
------------
<RefPosition #0   @0   RefTypeParamDef <Ivl:0 V00>  BB00 regmask=[] minReg=1 singleDefSpill regOptional wt=100.00>
<RefPosition #1   @1   RefTypeBB  BB01 regmask=[] minReg=1 wt=100.00>
<RefPosition #2   @6   RefTypeKill <Reg:rax>  BB01 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #3   @6   RefTypeKill <Reg:rcx>  BB01 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #4   @6   RefTypeKill <Reg:rdx>  BB01 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #5   @6   RefTypeKill <Reg:r8 >  BB01 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #6   @6   RefTypeKill <Reg:r9 >  BB01 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #7   @6   RefTypeKill <Reg:r10>  BB01 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #8   @6   RefTypeKill <Reg:r11>  BB01 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #9   @6   RefTypeFixedReg <Reg:rax>  BB01 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #10  @6   RefTypeDef <Ivl:18> CALL BB01 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #11  @7   RefTypeUse <Ivl:18>  BB01 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #12  @12  RefTypeDef <Ivl:19> LCL_VAR_ADDR BB01 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #13  @13  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #14  @13  RefTypeUse <Ivl:19>  BB01 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #15  @14  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #16  @14  RefTypeDef <Ivl:20> PUTARG_REG BB01 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #17  @15  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #18  @15  RefTypeUse <Ivl:20>  BB01 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #19  @16  RefTypeKill <Reg:rax>  BB01 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #20  @16  RefTypeKill <Reg:rcx>  BB01 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #21  @16  RefTypeKill <Reg:rdx>  BB01 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #22  @16  RefTypeKill <Reg:r8 >  BB01 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #23  @16  RefTypeKill <Reg:r9 >  BB01 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #24  @16  RefTypeKill <Reg:r10>  BB01 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #25  @16  RefTypeKill <Reg:r11>  BB01 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #26  @16  RefTypeFixedReg <Reg:rax>  BB01 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #27  @16  RefTypeDef <Ivl:21> CALL BB01 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #28  @17  RefTypeUse <Ivl:21>  BB01 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #29  @18  RefTypeDef <Ivl:11 V21> STORE_LCL_VAR BB01 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #30  @21  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #31  @21  RefTypeUse <Ivl:11 V21> LCL_VAR BB01 regmask=[rcx] minReg=1 last fixed wt=400.00>
<RefPosition #32  @22  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #33  @22  RefTypeDef <Ivl:22> PUTARG_REG BB01 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #34  @24  RefTypeDef <Ivl:23> CNS_INT BB01 regmask=[rdx] minReg=1 wt=400.00>
<RefPosition #35  @25  RefTypeUse <Ivl:23>  BB01 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #36  @26  RefTypeDef <Ivl:24> IND BB01 regmask=[rdx] minReg=1 wt=400.00>
<RefPosition #37  @27  RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #38  @27  RefTypeUse <Ivl:24>  BB01 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #39  @28  RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #40  @28  RefTypeDef <Ivl:25> PUTARG_REG BB01 regmask=[rdx] minReg=1 fixed wt=400.00>
<RefPosition #41  @29  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #42  @29  RefTypeUse <Ivl:22>  BB01 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #43  @29  RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #44  @29  RefTypeUse <Ivl:25>  BB01 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #45  @30  RefTypeKill <Reg:rax>  BB01 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #46  @30  RefTypeKill <Reg:rcx>  BB01 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #47  @30  RefTypeKill <Reg:rdx>  BB01 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #48  @30  RefTypeKill <Reg:r8 >  BB01 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #49  @30  RefTypeKill <Reg:r9 >  BB01 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #50  @30  RefTypeKill <Reg:r10>  BB01 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #51  @30  RefTypeKill <Reg:r11>  BB01 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #52  @30  RefTypeFixedReg <Reg:rax>  BB01 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #53  @30  RefTypeDef <Ivl:26> CALL BB01 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #54  @31  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #55  @31  RefTypeUse <Ivl:26>  BB01 regmask=[rcx] minReg=1 last move fixed wt=100.00>
<RefPosition #56  @32  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #57  @32  RefTypeDef <Ivl:27> PUTARG_REG BB01 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #58  @33  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #59  @33  RefTypeUse <Ivl:27>  BB01 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #60  @34  RefTypeKill <Reg:rax>  BB01 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #61  @34  RefTypeKill <Reg:rcx>  BB01 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #62  @34  RefTypeKill <Reg:rdx>  BB01 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #63  @34  RefTypeKill <Reg:r8 >  BB01 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #64  @34  RefTypeKill <Reg:r9 >  BB01 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #65  @34  RefTypeKill <Reg:r10>  BB01 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #66  @34  RefTypeKill <Reg:r11>  BB01 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #67  @38  RefTypeDef <Ivl:28> CNS_INT BB01 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #68  @39  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #69  @39  RefTypeUse <Ivl:28>  BB01 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #70  @40  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #71  @40  RefTypeDef <Ivl:29> PUTARG_REG BB01 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #72  @41  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #73  @41  RefTypeUse <Ivl:29>  BB01 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #74  @42  RefTypeKill <Reg:rax>  BB01 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #75  @42  RefTypeKill <Reg:rcx>  BB01 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #76  @42  RefTypeKill <Reg:rdx>  BB01 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #77  @42  RefTypeKill <Reg:r8 >  BB01 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #78  @42  RefTypeKill <Reg:r9 >  BB01 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #79  @42  RefTypeKill <Reg:r10>  BB01 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #80  @42  RefTypeKill <Reg:r11>  BB01 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #81  @42  RefTypeFixedReg <Reg:rax>  BB01 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #82  @42  RefTypeDef <Ivl:30> CALL BB01 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #83  @43  RefTypeUse <Ivl:30>  BB01 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #84  @44  RefTypeDef <Ivl:2 V08> STORE_LCL_VAR BB01 regmask=[rsi] minReg=1 wt=600.00>
<RefPosition #85  @47  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #86  @47  RefTypeUse <Ivl:2 V08> LCL_VAR BB01 regmask=[rcx] minReg=1 copy fixed wt=600.00>
<RefPosition #87  @48  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #88  @48  RefTypeDef <Ivl:31> PUTARG_REG BB01 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #89  @49  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #90  @49  RefTypeUse <Ivl:31>  BB01 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #91  @50  RefTypeKill <Reg:rax>  BB01 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #92  @50  RefTypeKill <Reg:rcx>  BB01 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #93  @50  RefTypeKill <Reg:rdx>  BB01 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #94  @50  RefTypeKill <Reg:r8 >  BB01 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #95  @50  RefTypeKill <Reg:r9 >  BB01 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #96  @50  RefTypeKill <Reg:r10>  BB01 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #97  @50  RefTypeKill <Reg:r11>  BB01 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #98  @55  RefTypeUse <Ivl:0 V00> LCL_VAR BB01 regmask=[rdx] minReg=1 reload spillAfter wt=2350.00>
<RefPosition #99  @56  RefTypeDef <Ivl:32> LEA BB01 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #100 @59  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #101 @59  RefTypeUse <Ivl:32>  BB01 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #102 @59  RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #103 @59  RefTypeUse <Ivl:2 V08> LCL_VAR BB01 regmask=[rdx] minReg=1 last copy fixed wt=600.00>
<RefPosition #104 @60  RefTypeKill <Reg:rax>  BB01 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #105 @60  RefTypeKill <Reg:rcx>  BB01 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #106 @60  RefTypeKill <Reg:rdx>  BB01 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #107 @60  RefTypeKill <Reg:r8 >  BB01 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #108 @60  RefTypeKill <Reg:r9 >  BB01 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #109 @60  RefTypeKill <Reg:r10>  BB01 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #110 @60  RefTypeKill <Reg:r11>  BB01 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #111 @60  RefTypeKill <Reg:mm0>  BB01 regmask=[mm0] minReg=1 last wt=100.00>
<RefPosition #112 @60  RefTypeKill <Reg:mm1>  BB01 regmask=[mm1] minReg=1 last wt=100.00>
<RefPosition #113 @60  RefTypeKill <Reg:mm2>  BB01 regmask=[mm2] minReg=1 last wt=100.00>
<RefPosition #114 @60  RefTypeKill <Reg:mm3>  BB01 regmask=[mm3] minReg=1 last wt=100.00>
<RefPosition #115 @60  RefTypeKill <Reg:mm4>  BB01 regmask=[mm4] minReg=1 last wt=100.00>
<RefPosition #116 @60  RefTypeKill <Reg:mm5>  BB01 regmask=[mm5] minReg=1 last wt=100.00>
<RefPosition #117 @64  RefTypeDef <Ivl:33> CNS_INT BB01 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #118 @65  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #119 @65  RefTypeUse <Ivl:33>  BB01 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #120 @66  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #121 @66  RefTypeDef <Ivl:34> PUTARG_REG BB01 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #122 @67  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #123 @67  RefTypeUse <Ivl:34>  BB01 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #124 @68  RefTypeKill <Reg:rax>  BB01 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #125 @68  RefTypeKill <Reg:rcx>  BB01 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #126 @68  RefTypeKill <Reg:rdx>  BB01 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #127 @68  RefTypeKill <Reg:r8 >  BB01 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #128 @68  RefTypeKill <Reg:r9 >  BB01 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #129 @68  RefTypeKill <Reg:r10>  BB01 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #130 @68  RefTypeKill <Reg:r11>  BB01 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #131 @68  RefTypeFixedReg <Reg:rax>  BB01 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #132 @68  RefTypeDef <Ivl:35> CALL BB01 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #133 @69  RefTypeUse <Ivl:35>  BB01 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #134 @70  RefTypeDef <Ivl:3 V09> STORE_LCL_VAR BB01 regmask=[rsi] minReg=1 wt=600.00>
<RefPosition #135 @75  RefTypeUse <Ivl:0 V00> LCL_VAR BB01 regmask=[rdx] minReg=1 reload spillAfter wt=2350.00>
<RefPosition #136 @76  RefTypeDef <Ivl:36> IND BB01 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #137 @79  RefTypeUse <Ivl:36>  BB01 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #138 @80  RefTypeDef <Ivl:37> IND BB01 regmask=[rdi] minReg=1 wt=400.00>
<RefPosition #139 @81  RefTypeUse <Ivl:37>  BB01 regmask=[rdi] minReg=1 last wt=100.00>
<RefPosition #140 @82  RefTypeDef <Ivl:4 V10> STORE_LCL_VAR BB01 regmask=[rdi] minReg=1 wt=400.00>
<RefPosition #141 @85  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #142 @85  RefTypeUse <Ivl:3 V09> LCL_VAR BB01 regmask=[rcx] minReg=1 copy fixed wt=600.00>
<RefPosition #143 @86  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #144 @86  RefTypeDef <Ivl:38> PUTARG_REG BB01 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #145 @87  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #146 @87  RefTypeUse <Ivl:38>  BB01 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #147 @88  RefTypeKill <Reg:rax>  BB01 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #148 @88  RefTypeKill <Reg:rcx>  BB01 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #149 @88  RefTypeKill <Reg:rdx>  BB01 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #150 @88  RefTypeKill <Reg:r8 >  BB01 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #151 @88  RefTypeKill <Reg:r9 >  BB01 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #152 @88  RefTypeKill <Reg:r10>  BB01 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #153 @88  RefTypeKill <Reg:r11>  BB01 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #154 @93  RefTypeUse <Ivl:4 V10> LCL_VAR BB01 regmask=[rdi] minReg=1 last wt=400.00>
<RefPosition #155 @94  RefTypeDef <Ivl:39> LEA BB01 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #156 @97  RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #157 @97  RefTypeUse <Ivl:39>  BB01 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #158 @97  RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #159 @97  RefTypeUse <Ivl:3 V09> LCL_VAR BB01 regmask=[rdx] minReg=1 last copy fixed wt=600.00>
<RefPosition #160 @98  RefTypeKill <Reg:rax>  BB01 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #161 @98  RefTypeKill <Reg:rcx>  BB01 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #162 @98  RefTypeKill <Reg:rdx>  BB01 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #163 @98  RefTypeKill <Reg:r8 >  BB01 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #164 @98  RefTypeKill <Reg:r9 >  BB01 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #165 @98  RefTypeKill <Reg:r10>  BB01 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #166 @98  RefTypeKill <Reg:r11>  BB01 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #167 @98  RefTypeKill <Reg:mm0>  BB01 regmask=[mm0] minReg=1 last wt=100.00>
<RefPosition #168 @98  RefTypeKill <Reg:mm1>  BB01 regmask=[mm1] minReg=1 last wt=100.00>
<RefPosition #169 @98  RefTypeKill <Reg:mm2>  BB01 regmask=[mm2] minReg=1 last wt=100.00>
<RefPosition #170 @98  RefTypeKill <Reg:mm3>  BB01 regmask=[mm3] minReg=1 last wt=100.00>
<RefPosition #171 @98  RefTypeKill <Reg:mm4>  BB01 regmask=[mm4] minReg=1 last wt=100.00>
<RefPosition #172 @98  RefTypeKill <Reg:mm5>  BB01 regmask=[mm5] minReg=1 last wt=100.00>
<RefPosition #173 @102 RefTypeDef <Ivl:40> CNS_INT BB01 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #174 @103 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #175 @103 RefTypeUse <Ivl:40>  BB01 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #176 @104 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #177 @104 RefTypeDef <Ivl:41> PUTARG_REG BB01 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #178 @105 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #179 @105 RefTypeUse <Ivl:41>  BB01 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #180 @106 RefTypeKill <Reg:rax>  BB01 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #181 @106 RefTypeKill <Reg:rcx>  BB01 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #182 @106 RefTypeKill <Reg:rdx>  BB01 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #183 @106 RefTypeKill <Reg:r8 >  BB01 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #184 @106 RefTypeKill <Reg:r9 >  BB01 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #185 @106 RefTypeKill <Reg:r10>  BB01 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #186 @106 RefTypeKill <Reg:r11>  BB01 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #187 @106 RefTypeFixedReg <Reg:rax>  BB01 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #188 @106 RefTypeDef <Ivl:42> CALL BB01 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #189 @107 RefTypeUse <Ivl:42>  BB01 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #190 @108 RefTypeDef <Ivl:5 V11> STORE_LCL_VAR BB01 regmask=[rsi] minReg=1 wt=600.00>
<RefPosition #191 @111 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #192 @111 RefTypeUse <Ivl:5 V11> LCL_VAR BB01 regmask=[rcx] minReg=1 copy fixed wt=600.00>
<RefPosition #193 @112 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #194 @112 RefTypeDef <Ivl:43> PUTARG_REG BB01 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #195 @115 RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #196 @115 RefTypeUse <Ivl:0 V00> LCL_VAR BB01 regmask=[rdx] minReg=1 reload spillAfter fixed wt=2350.00>
<RefPosition #197 @116 RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #198 @116 RefTypeDef <Ivl:44> PUTARG_REG BB01 regmask=[rdx] minReg=1 fixed wt=400.00>
<RefPosition #199 @118 RefTypeDef <Ivl:45> CNS_INT BB01 regmask=[r8] minReg=1 wt=400.00>
<RefPosition #200 @119 RefTypeFixedReg <Reg:r8 >  BB01 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #201 @119 RefTypeUse <Ivl:45>  BB01 regmask=[r8] minReg=1 last fixed wt=100.00>
<RefPosition #202 @120 RefTypeFixedReg <Reg:r8 >  BB01 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #203 @120 RefTypeDef <Ivl:46> PUTARG_REG BB01 regmask=[r8] minReg=1 fixed wt=400.00>
<RefPosition #204 @121 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #205 @121 RefTypeUse <Ivl:43>  BB01 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #206 @121 RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #207 @121 RefTypeUse <Ivl:44>  BB01 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #208 @121 RefTypeFixedReg <Reg:r8 >  BB01 regmask=[r8] minReg=1 wt=100.00>
<RefPosition #209 @121 RefTypeUse <Ivl:46>  BB01 regmask=[r8] minReg=1 last fixed wt=100.00>
<RefPosition #210 @122 RefTypeKill <Reg:rax>  BB01 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #211 @122 RefTypeKill <Reg:rcx>  BB01 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #212 @122 RefTypeKill <Reg:rdx>  BB01 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #213 @122 RefTypeKill <Reg:r8 >  BB01 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #214 @122 RefTypeKill <Reg:r9 >  BB01 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #215 @122 RefTypeKill <Reg:r10>  BB01 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #216 @122 RefTypeKill <Reg:r11>  BB01 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #217 @126 RefTypeDef <Ivl:47> CNS_INT BB01 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #218 @127 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #219 @127 RefTypeUse <Ivl:47>  BB01 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #220 @128 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #221 @128 RefTypeDef <Ivl:48> PUTARG_REG BB01 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #222 @129 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #223 @129 RefTypeUse <Ivl:48>  BB01 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #224 @130 RefTypeKill <Reg:rax>  BB01 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #225 @130 RefTypeKill <Reg:rcx>  BB01 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #226 @130 RefTypeKill <Reg:rdx>  BB01 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #227 @130 RefTypeKill <Reg:r8 >  BB01 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #228 @130 RefTypeKill <Reg:r9 >  BB01 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #229 @130 RefTypeKill <Reg:r10>  BB01 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #230 @130 RefTypeKill <Reg:r11>  BB01 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #231 @130 RefTypeFixedReg <Reg:rax>  BB01 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #232 @130 RefTypeDef <Ivl:49> CALL BB01 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #233 @131 RefTypeUse <Ivl:49>  BB01 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #234 @132 RefTypeDef <Ivl:6 V12> STORE_LCL_VAR BB01 regmask=[rdi] minReg=1 wt=600.00>
<RefPosition #235 @135 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #236 @135 RefTypeUse <Ivl:6 V12> LCL_VAR BB01 regmask=[rcx] minReg=1 copy fixed wt=600.00>
<RefPosition #237 @136 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #238 @136 RefTypeDef <Ivl:50> PUTARG_REG BB01 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #239 @139 RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #240 @139 RefTypeUse <Ivl:5 V11> LCL_VAR BB01 regmask=[rdx] minReg=1 last copy fixed wt=600.00>
<RefPosition #241 @140 RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #242 @140 RefTypeDef <Ivl:51> PUTARG_REG BB01 regmask=[rdx] minReg=1 fixed wt=400.00>
<RefPosition #243 @141 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #244 @141 RefTypeUse <Ivl:50>  BB01 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #245 @141 RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #246 @141 RefTypeUse <Ivl:51>  BB01 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #247 @142 RefTypeKill <Reg:rax>  BB01 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #248 @142 RefTypeKill <Reg:rcx>  BB01 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #249 @142 RefTypeKill <Reg:rdx>  BB01 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #250 @142 RefTypeKill <Reg:r8 >  BB01 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #251 @142 RefTypeKill <Reg:r9 >  BB01 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #252 @142 RefTypeKill <Reg:r10>  BB01 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #253 @142 RefTypeKill <Reg:r11>  BB01 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #254 @147 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #255 @147 RefTypeUse <Ivl:6 V12> LCL_VAR BB01 regmask=[rcx] minReg=1 last copy fixed wt=600.00>
<RefPosition #256 @148 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #257 @148 RefTypeDef <Ivl:52> PUTARG_REG BB01 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #258 @149 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #259 @149 RefTypeUse <Ivl:52>  BB01 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #260 @150 RefTypeKill <Reg:rax>  BB01 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #261 @150 RefTypeKill <Reg:rcx>  BB01 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #262 @150 RefTypeKill <Reg:rdx>  BB01 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #263 @150 RefTypeKill <Reg:r8 >  BB01 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #264 @150 RefTypeKill <Reg:r9 >  BB01 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #265 @150 RefTypeKill <Reg:r10>  BB01 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #266 @150 RefTypeKill <Reg:r11>  BB01 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #267 @154 RefTypeKill <Reg:rax>  BB01 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #268 @154 RefTypeKill <Reg:rcx>  BB01 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #269 @154 RefTypeKill <Reg:rdx>  BB01 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #270 @154 RefTypeKill <Reg:r8 >  BB01 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #271 @154 RefTypeKill <Reg:r9 >  BB01 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #272 @154 RefTypeKill <Reg:r10>  BB01 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #273 @154 RefTypeKill <Reg:r11>  BB01 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #274 @154 RefTypeFixedReg <Reg:rax>  BB01 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #275 @154 RefTypeDef <Ivl:53> CALL BB01 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #276 @155 RefTypeUse <Ivl:53>  BB01 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #277 @160 RefTypeDef <Ivl:54> LCL_VAR_ADDR BB01 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #278 @161 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #279 @161 RefTypeUse <Ivl:54>  BB01 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #280 @162 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #281 @162 RefTypeDef <Ivl:55> PUTARG_REG BB01 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #282 @163 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #283 @163 RefTypeUse <Ivl:55>  BB01 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #284 @164 RefTypeKill <Reg:rax>  BB01 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #285 @164 RefTypeKill <Reg:rcx>  BB01 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #286 @164 RefTypeKill <Reg:rdx>  BB01 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #287 @164 RefTypeKill <Reg:r8 >  BB01 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #288 @164 RefTypeKill <Reg:r9 >  BB01 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #289 @164 RefTypeKill <Reg:r10>  BB01 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #290 @164 RefTypeKill <Reg:r11>  BB01 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #291 @164 RefTypeFixedReg <Reg:rax>  BB01 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #292 @164 RefTypeDef <Ivl:56> CALL BB01 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #293 @165 RefTypeUse <Ivl:56>  BB01 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #294 @166 RefTypeDef <Ivl:12 V22> STORE_LCL_VAR BB01 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #295 @169 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #296 @169 RefTypeUse <Ivl:12 V22> LCL_VAR BB01 regmask=[rcx] minReg=1 last fixed wt=400.00>
<RefPosition #297 @170 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #298 @170 RefTypeDef <Ivl:57> PUTARG_REG BB01 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #299 @172 RefTypeDef <Ivl:58> CNS_INT BB01 regmask=[rdx] minReg=1 wt=400.00>
<RefPosition #300 @173 RefTypeUse <Ivl:58>  BB01 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #301 @174 RefTypeDef <Ivl:59> IND BB01 regmask=[rdx] minReg=1 wt=400.00>
<RefPosition #302 @175 RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #303 @175 RefTypeUse <Ivl:59>  BB01 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #304 @176 RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #305 @176 RefTypeDef <Ivl:60> PUTARG_REG BB01 regmask=[rdx] minReg=1 fixed wt=400.00>
<RefPosition #306 @177 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #307 @177 RefTypeUse <Ivl:57>  BB01 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #308 @177 RefTypeFixedReg <Reg:rdx>  BB01 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #309 @177 RefTypeUse <Ivl:60>  BB01 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #310 @178 RefTypeKill <Reg:rax>  BB01 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #311 @178 RefTypeKill <Reg:rcx>  BB01 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #312 @178 RefTypeKill <Reg:rdx>  BB01 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #313 @178 RefTypeKill <Reg:r8 >  BB01 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #314 @178 RefTypeKill <Reg:r9 >  BB01 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #315 @178 RefTypeKill <Reg:r10>  BB01 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #316 @178 RefTypeKill <Reg:r11>  BB01 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #317 @178 RefTypeFixedReg <Reg:rax>  BB01 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #318 @178 RefTypeDef <Ivl:61> CALL BB01 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #319 @179 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #320 @179 RefTypeUse <Ivl:61>  BB01 regmask=[rcx] minReg=1 last move fixed wt=100.00>
<RefPosition #321 @180 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #322 @180 RefTypeDef <Ivl:62> PUTARG_REG BB01 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #323 @181 RefTypeFixedReg <Reg:rcx>  BB01 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #324 @181 RefTypeUse <Ivl:62>  BB01 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #325 @182 RefTypeKill <Reg:rax>  BB01 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #326 @182 RefTypeKill <Reg:rcx>  BB01 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #327 @182 RefTypeKill <Reg:rdx>  BB01 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #328 @182 RefTypeKill <Reg:r8 >  BB01 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #329 @182 RefTypeKill <Reg:r9 >  BB01 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #330 @182 RefTypeKill <Reg:r10>  BB01 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #331 @182 RefTypeKill <Reg:r11>  BB01 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #332 @186 RefTypeDef <Ivl:63> CNS_INT BB01 regmask=[rsi] minReg=1 wt=400.00>
<RefPosition #333 @187 RefTypeUse <Ivl:63>  BB01 regmask=[rsi] minReg=1 last wt=100.00>
<RefPosition #334 @188 RefTypeDef <Ivl:1 V03> STORE_LCL_VAR BB01 regmask=[rsi] minReg=1 wt=2500.00>
<RefPosition #335 @189 RefTypeBB  BB02 regmask=[] minReg=1 wt=800.00>
<RefPosition #336 @197 RefTypeUse <Ivl:0 V00> LCL_VAR BB02 regmask=[rdx] minReg=1 reload spillAfter wt=2350.00>
<RefPosition #337 @198 RefTypeDef <Ivl:64> IND BB02 regmask=[rcx] minReg=1 wt=3200.00>
<RefPosition #338 @199 RefTypeUse <Ivl:64>  BB02 regmask=[rcx] minReg=1 last wt=800.00>
<RefPosition #339 @204 RefTypeDef <Ivl:65> CNS_INT BB02 regmask=[rcx] minReg=1 wt=3200.00>
<RefPosition #340 @205 RefTypeUse <Ivl:65>  BB02 regmask=[rcx] minReg=1 last wt=800.00>
<RefPosition #341 @207 RefTypeBB  BB03 regmask=[] minReg=1 wt=800.00>
<RefPosition #342 @212 RefTypeDef <Ivl:66> LCL_VAR_ADDR BB03 regmask=[rdx] minReg=1 wt=3200.00>
<RefPosition #343 @213 RefTypeFixedReg <Reg:rdx>  BB03 regmask=[rdx] minReg=1 wt=800.00>
<RefPosition #344 @213 RefTypeUse <Ivl:66>  BB03 regmask=[rdx] minReg=1 last fixed wt=800.00>
<RefPosition #345 @214 RefTypeFixedReg <Reg:rdx>  BB03 regmask=[rdx] minReg=1 wt=800.00>
<RefPosition #346 @214 RefTypeDef <Ivl:67> PUTARG_REG BB03 regmask=[rdx] minReg=1 fixed wt=3200.00>
<RefPosition #347 @216 RefTypeDef <Ivl:68> LCL_VAR BB03 regmask=[rcx] minReg=1 wt=3200.00>
<RefPosition #348 @217 RefTypeFixedReg <Reg:rcx>  BB03 regmask=[rcx] minReg=1 wt=800.00>
<RefPosition #349 @217 RefTypeUse <Ivl:68>  BB03 regmask=[rcx] minReg=1 last fixed wt=800.00>
<RefPosition #350 @218 RefTypeFixedReg <Reg:rcx>  BB03 regmask=[rcx] minReg=1 wt=800.00>
<RefPosition #351 @218 RefTypeDef <Ivl:69> PUTARG_REG BB03 regmask=[rcx] minReg=1 fixed wt=3200.00>
<RefPosition #352 @219 RefTypeFixedReg <Reg:rdx>  BB03 regmask=[rdx] minReg=1 wt=800.00>
<RefPosition #353 @219 RefTypeUse <Ivl:67>  BB03 regmask=[rdx] minReg=1 last fixed wt=800.00>
<RefPosition #354 @219 RefTypeFixedReg <Reg:rcx>  BB03 regmask=[rcx] minReg=1 wt=800.00>
<RefPosition #355 @219 RefTypeUse <Ivl:69>  BB03 regmask=[rcx] minReg=1 last fixed wt=800.00>
<RefPosition #356 @220 RefTypeKill <Reg:rax>  BB03 regmask=[rax] minReg=1 last wt=800.00>
<RefPosition #357 @220 RefTypeKill <Reg:rcx>  BB03 regmask=[rcx] minReg=1 last wt=800.00>
<RefPosition #358 @220 RefTypeKill <Reg:rdx>  BB03 regmask=[rdx] minReg=1 last wt=800.00>
<RefPosition #359 @220 RefTypeKill <Reg:r8 >  BB03 regmask=[r8] minReg=1 last wt=800.00>
<RefPosition #360 @220 RefTypeKill <Reg:r9 >  BB03 regmask=[r9] minReg=1 last wt=800.00>
<RefPosition #361 @220 RefTypeKill <Reg:r10>  BB03 regmask=[r10] minReg=1 last wt=800.00>
<RefPosition #362 @220 RefTypeKill <Reg:r11>  BB03 regmask=[r11] minReg=1 last wt=800.00>
<RefPosition #363 @224 RefTypeDef <Ivl:70> CNS_INT BB03 regmask=[rcx] minReg=1 wt=3200.00>
<RefPosition #364 @225 RefTypeFixedReg <Reg:rcx>  BB03 regmask=[rcx] minReg=1 wt=800.00>
<RefPosition #365 @225 RefTypeUse <Ivl:70>  BB03 regmask=[rcx] minReg=1 last fixed wt=800.00>
<RefPosition #366 @226 RefTypeFixedReg <Reg:rcx>  BB03 regmask=[rcx] minReg=1 wt=800.00>
<RefPosition #367 @226 RefTypeDef <Ivl:71> PUTARG_REG BB03 regmask=[rcx] minReg=1 fixed wt=3200.00>
<RefPosition #368 @227 RefTypeFixedReg <Reg:rcx>  BB03 regmask=[rcx] minReg=1 wt=800.00>
<RefPosition #369 @227 RefTypeUse <Ivl:71>  BB03 regmask=[rcx] minReg=1 last fixed wt=800.00>
<RefPosition #370 @228 RefTypeKill <Reg:rax>  BB03 regmask=[rax] minReg=1 last wt=800.00>
<RefPosition #371 @228 RefTypeKill <Reg:rcx>  BB03 regmask=[rcx] minReg=1 last wt=800.00>
<RefPosition #372 @228 RefTypeKill <Reg:rdx>  BB03 regmask=[rdx] minReg=1 last wt=800.00>
<RefPosition #373 @228 RefTypeKill <Reg:r8 >  BB03 regmask=[r8] minReg=1 last wt=800.00>
<RefPosition #374 @228 RefTypeKill <Reg:r9 >  BB03 regmask=[r9] minReg=1 last wt=800.00>
<RefPosition #375 @228 RefTypeKill <Reg:r10>  BB03 regmask=[r10] minReg=1 last wt=800.00>
<RefPosition #376 @228 RefTypeKill <Reg:r11>  BB03 regmask=[r11] minReg=1 last wt=800.00>
<RefPosition #377 @228 RefTypeFixedReg <Reg:rax>  BB03 regmask=[rax] minReg=1 wt=800.00>
<RefPosition #378 @228 RefTypeDef <Ivl:72> CALL BB03 regmask=[rax] minReg=1 fixed wt=3200.00>
<RefPosition #379 @229 RefTypeUse <Ivl:72>  BB03 regmask=[rax] minReg=1 last wt=800.00>
<RefPosition #380 @230 RefTypeDef <Ivl:7 V13> STORE_LCL_VAR BB03 regmask=[rdi] minReg=1 wt=4800.00>
<RefPosition #381 @235 RefTypeUse <Ivl:0 V00> LCL_VAR BB03 regmask=[rdx] minReg=1 reload spillAfter wt=2350.00>
<RefPosition #382 @236 RefTypeDef <Ivl:73> IND BB03 regmask=[rcx] minReg=1 wt=3200.00>
<RefPosition #383 @239 RefTypeUse <Ivl:73>  BB03 regmask=[rcx] minReg=1 last wt=800.00>
<RefPosition #384 @240 RefTypeDef <Ivl:74> IND BB03 regmask=[rbx] minReg=1 wt=3200.00>
<RefPosition #385 @241 RefTypeUse <Ivl:74>  BB03 regmask=[rbx] minReg=1 last wt=800.00>
<RefPosition #386 @242 RefTypeDef <Ivl:8 V14> STORE_LCL_VAR BB03 regmask=[rbx] minReg=1 wt=3200.00>
<RefPosition #387 @245 RefTypeFixedReg <Reg:rcx>  BB03 regmask=[rcx] minReg=1 wt=800.00>
<RefPosition #388 @245 RefTypeUse <Ivl:7 V13> LCL_VAR BB03 regmask=[rcx] minReg=1 copy fixed wt=4800.00>
<RefPosition #389 @246 RefTypeFixedReg <Reg:rcx>  BB03 regmask=[rcx] minReg=1 wt=800.00>
<RefPosition #390 @246 RefTypeDef <Ivl:75> PUTARG_REG BB03 regmask=[rcx] minReg=1 fixed wt=3200.00>
<RefPosition #391 @247 RefTypeFixedReg <Reg:rcx>  BB03 regmask=[rcx] minReg=1 wt=800.00>
<RefPosition #392 @247 RefTypeUse <Ivl:75>  BB03 regmask=[rcx] minReg=1 last fixed wt=800.00>
<RefPosition #393 @248 RefTypeKill <Reg:rax>  BB03 regmask=[rax] minReg=1 last wt=800.00>
<RefPosition #394 @248 RefTypeKill <Reg:rcx>  BB03 regmask=[rcx] minReg=1 last wt=800.00>
<RefPosition #395 @248 RefTypeKill <Reg:rdx>  BB03 regmask=[rdx] minReg=1 last wt=800.00>
<RefPosition #396 @248 RefTypeKill <Reg:r8 >  BB03 regmask=[r8] minReg=1 last wt=800.00>
<RefPosition #397 @248 RefTypeKill <Reg:r9 >  BB03 regmask=[r9] minReg=1 last wt=800.00>
<RefPosition #398 @248 RefTypeKill <Reg:r10>  BB03 regmask=[r10] minReg=1 last wt=800.00>
<RefPosition #399 @248 RefTypeKill <Reg:r11>  BB03 regmask=[r11] minReg=1 last wt=800.00>
<RefPosition #400 @253 RefTypeUse <Ivl:8 V14> LCL_VAR BB03 regmask=[rbx] minReg=1 last wt=3200.00>
<RefPosition #401 @254 RefTypeDef <Ivl:76> LEA BB03 regmask=[rcx] minReg=1 wt=3200.00>
<RefPosition #402 @257 RefTypeFixedReg <Reg:rcx>  BB03 regmask=[rcx] minReg=1 wt=800.00>
<RefPosition #403 @257 RefTypeUse <Ivl:76>  BB03 regmask=[rcx] minReg=1 last fixed wt=800.00>
<RefPosition #404 @257 RefTypeFixedReg <Reg:rdx>  BB03 regmask=[rdx] minReg=1 wt=800.00>
<RefPosition #405 @257 RefTypeUse <Ivl:7 V13> LCL_VAR BB03 regmask=[rdx] minReg=1 last copy fixed wt=4800.00>
<RefPosition #406 @258 RefTypeKill <Reg:rax>  BB03 regmask=[rax] minReg=1 last wt=800.00>
<RefPosition #407 @258 RefTypeKill <Reg:rcx>  BB03 regmask=[rcx] minReg=1 last wt=800.00>
<RefPosition #408 @258 RefTypeKill <Reg:rdx>  BB03 regmask=[rdx] minReg=1 last wt=800.00>
<RefPosition #409 @258 RefTypeKill <Reg:r8 >  BB03 regmask=[r8] minReg=1 last wt=800.00>
<RefPosition #410 @258 RefTypeKill <Reg:r9 >  BB03 regmask=[r9] minReg=1 last wt=800.00>
<RefPosition #411 @258 RefTypeKill <Reg:r10>  BB03 regmask=[r10] minReg=1 last wt=800.00>
<RefPosition #412 @258 RefTypeKill <Reg:r11>  BB03 regmask=[r11] minReg=1 last wt=800.00>
<RefPosition #413 @258 RefTypeKill <Reg:mm0>  BB03 regmask=[mm0] minReg=1 last wt=800.00>
<RefPosition #414 @258 RefTypeKill <Reg:mm1>  BB03 regmask=[mm1] minReg=1 last wt=800.00>
<RefPosition #415 @258 RefTypeKill <Reg:mm2>  BB03 regmask=[mm2] minReg=1 last wt=800.00>
<RefPosition #416 @258 RefTypeKill <Reg:mm3>  BB03 regmask=[mm3] minReg=1 last wt=800.00>
<RefPosition #417 @258 RefTypeKill <Reg:mm4>  BB03 regmask=[mm4] minReg=1 last wt=800.00>
<RefPosition #418 @258 RefTypeKill <Reg:mm5>  BB03 regmask=[mm5] minReg=1 last wt=800.00>
<RefPosition #419 @265 RefTypeUse <Ivl:0 V00> LCL_VAR BB03 regmask=[rdx] minReg=1 reload spillAfter wt=2350.00>
<RefPosition #420 @266 RefTypeDef <Ivl:77> IND BB03 regmask=[rcx] minReg=1 wt=3200.00>
<RefPosition #421 @267 RefTypeUse <Ivl:77>  BB03 regmask=[rcx] minReg=1 last wt=800.00>
<RefPosition #422 @268 RefTypeDef <Ivl:16 V28> STORE_LCL_VAR BB03 regmask=[rcx] minReg=1 singleDefSpill wt=1200.00>
<RefPosition #423 @271 RefTypeUse <Ivl:16 V28> LCL_VAR BB03 regmask=[rcx] minReg=1 spillAfter wt=1200.00>
<RefPosition #424 @272 RefTypeDef <Ivl:78> LEA BB03 regmask=[rcx] minReg=1 wt=3200.00>
<RefPosition #425 @277 RefTypeUse <Ivl:16 V28> LCL_VAR BB03 regmask=[rax] minReg=1 last reload wt=1200.00>
<RefPosition #426 @278 RefTypeDef <Ivl:79> IND BB03 regmask=[rax] minReg=1 wt=3200.00>
<RefPosition #427 @281 RefTypeUse <Ivl:79>  BB03 regmask=[rax] minReg=1 last wt=800.00>
<RefPosition #428 @282 RefTypeDef <Ivl:80> IND BB03 regmask=[rdi] minReg=1 wt=3200.00>
<RefPosition #429 @283 RefTypeUse <Ivl:80>  BB03 regmask=[rdi] minReg=1 last wt=800.00>
<RefPosition #430 @284 RefTypeDef <Ivl:15 V27> STORE_LCL_VAR BB03 regmask=[rdi] minReg=1 wt=2400.00>
<RefPosition #431 @287 RefTypeFixedReg <Reg:rcx>  BB03 regmask=[rcx] minReg=1 wt=800.00>
<RefPosition #432 @287 RefTypeUse <Ivl:78>  BB03 regmask=[rcx] minReg=1 last fixed wt=800.00>
<RefPosition #433 @287 RefTypeFixedReg <Reg:rdx>  BB03 regmask=[rdx] minReg=1 wt=800.00>
<RefPosition #434 @287 RefTypeUse <Ivl:15 V27> LCL_VAR BB03 regmask=[rdx] minReg=1 copy fixed wt=2400.00>
<RefPosition #435 @288 RefTypeKill <Reg:rax>  BB03 regmask=[rax] minReg=1 last wt=800.00>
<RefPosition #436 @288 RefTypeKill <Reg:rcx>  BB03 regmask=[rcx] minReg=1 last wt=800.00>
<RefPosition #437 @288 RefTypeKill <Reg:rdx>  BB03 regmask=[rdx] minReg=1 last wt=800.00>
<RefPosition #438 @288 RefTypeKill <Reg:r8 >  BB03 regmask=[r8] minReg=1 last wt=800.00>
<RefPosition #439 @288 RefTypeKill <Reg:r9 >  BB03 regmask=[r9] minReg=1 last wt=800.00>
<RefPosition #440 @288 RefTypeKill <Reg:r10>  BB03 regmask=[r10] minReg=1 last wt=800.00>
<RefPosition #441 @288 RefTypeKill <Reg:r11>  BB03 regmask=[r11] minReg=1 last wt=800.00>
<RefPosition #442 @288 RefTypeKill <Reg:mm0>  BB03 regmask=[mm0] minReg=1 last wt=800.00>
<RefPosition #443 @288 RefTypeKill <Reg:mm1>  BB03 regmask=[mm1] minReg=1 last wt=800.00>
<RefPosition #444 @288 RefTypeKill <Reg:mm2>  BB03 regmask=[mm2] minReg=1 last wt=800.00>
<RefPosition #445 @288 RefTypeKill <Reg:mm3>  BB03 regmask=[mm3] minReg=1 last wt=800.00>
<RefPosition #446 @288 RefTypeKill <Reg:mm4>  BB03 regmask=[mm4] minReg=1 last wt=800.00>
<RefPosition #447 @288 RefTypeKill <Reg:mm5>  BB03 regmask=[mm5] minReg=1 last wt=800.00>
<RefPosition #448 @292 RefTypeDef <Ivl:81> CNS_INT BB03 regmask=[rcx] minReg=1 wt=3200.00>
<RefPosition #449 @293 RefTypeFixedReg <Reg:rcx>  BB03 regmask=[rcx] minReg=1 wt=800.00>
<RefPosition #450 @293 RefTypeUse <Ivl:81>  BB03 regmask=[rcx] minReg=1 last fixed wt=800.00>
<RefPosition #451 @294 RefTypeFixedReg <Reg:rcx>  BB03 regmask=[rcx] minReg=1 wt=800.00>
<RefPosition #452 @294 RefTypeDef <Ivl:82> PUTARG_REG BB03 regmask=[rcx] minReg=1 fixed wt=3200.00>
<RefPosition #453 @295 RefTypeFixedReg <Reg:rcx>  BB03 regmask=[rcx] minReg=1 wt=800.00>
<RefPosition #454 @295 RefTypeUse <Ivl:82>  BB03 regmask=[rcx] minReg=1 last fixed wt=800.00>
<RefPosition #455 @296 RefTypeKill <Reg:rax>  BB03 regmask=[rax] minReg=1 last wt=800.00>
<RefPosition #456 @296 RefTypeKill <Reg:rcx>  BB03 regmask=[rcx] minReg=1 last wt=800.00>
<RefPosition #457 @296 RefTypeKill <Reg:rdx>  BB03 regmask=[rdx] minReg=1 last wt=800.00>
<RefPosition #458 @296 RefTypeKill <Reg:r8 >  BB03 regmask=[r8] minReg=1 last wt=800.00>
<RefPosition #459 @296 RefTypeKill <Reg:r9 >  BB03 regmask=[r9] minReg=1 last wt=800.00>
<RefPosition #460 @296 RefTypeKill <Reg:r10>  BB03 regmask=[r10] minReg=1 last wt=800.00>
<RefPosition #461 @296 RefTypeKill <Reg:r11>  BB03 regmask=[r11] minReg=1 last wt=800.00>
<RefPosition #462 @296 RefTypeFixedReg <Reg:rax>  BB03 regmask=[rax] minReg=1 wt=800.00>
<RefPosition #463 @296 RefTypeDef <Ivl:83> CALL BB03 regmask=[rax] minReg=1 fixed wt=3200.00>
<RefPosition #464 @297 RefTypeUse <Ivl:83>  BB03 regmask=[rax] minReg=1 last wt=800.00>
<RefPosition #465 @298 RefTypeDef <Ivl:9 V15> STORE_LCL_VAR BB03 regmask=[rbx] minReg=1 wt=4800.00>
<RefPosition #466 @301 RefTypeUse <Ivl:15 V27> LCL_VAR BB03 regmask=[rdi] minReg=1 last wt=2400.00>
<RefPosition #467 @302 RefTypeDef <Ivl:10 V16> STORE_LCL_VAR BB03 regmask=[rdi] minReg=1 wt=3200.00>
<RefPosition #468 @305 RefTypeFixedReg <Reg:rcx>  BB03 regmask=[rcx] minReg=1 wt=800.00>
<RefPosition #469 @305 RefTypeUse <Ivl:9 V15> LCL_VAR BB03 regmask=[rcx] minReg=1 copy fixed wt=4800.00>
<RefPosition #470 @306 RefTypeFixedReg <Reg:rcx>  BB03 regmask=[rcx] minReg=1 wt=800.00>
<RefPosition #471 @306 RefTypeDef <Ivl:84> PUTARG_REG BB03 regmask=[rcx] minReg=1 fixed wt=3200.00>
<RefPosition #472 @307 RefTypeFixedReg <Reg:rcx>  BB03 regmask=[rcx] minReg=1 wt=800.00>
<RefPosition #473 @307 RefTypeUse <Ivl:84>  BB03 regmask=[rcx] minReg=1 last fixed wt=800.00>
<RefPosition #474 @308 RefTypeKill <Reg:rax>  BB03 regmask=[rax] minReg=1 last wt=800.00>
<RefPosition #475 @308 RefTypeKill <Reg:rcx>  BB03 regmask=[rcx] minReg=1 last wt=800.00>
<RefPosition #476 @308 RefTypeKill <Reg:rdx>  BB03 regmask=[rdx] minReg=1 last wt=800.00>
<RefPosition #477 @308 RefTypeKill <Reg:r8 >  BB03 regmask=[r8] minReg=1 last wt=800.00>
<RefPosition #478 @308 RefTypeKill <Reg:r9 >  BB03 regmask=[r9] minReg=1 last wt=800.00>
<RefPosition #479 @308 RefTypeKill <Reg:r10>  BB03 regmask=[r10] minReg=1 last wt=800.00>
<RefPosition #480 @308 RefTypeKill <Reg:r11>  BB03 regmask=[r11] minReg=1 last wt=800.00>
<RefPosition #481 @313 RefTypeUse <Ivl:10 V16> LCL_VAR BB03 regmask=[rdi] minReg=1 last wt=3200.00>
<RefPosition #482 @314 RefTypeDef <Ivl:85> LEA BB03 regmask=[rcx] minReg=1 wt=3200.00>
<RefPosition #483 @317 RefTypeFixedReg <Reg:rcx>  BB03 regmask=[rcx] minReg=1 wt=800.00>
<RefPosition #484 @317 RefTypeUse <Ivl:85>  BB03 regmask=[rcx] minReg=1 last fixed wt=800.00>
<RefPosition #485 @317 RefTypeFixedReg <Reg:rdx>  BB03 regmask=[rdx] minReg=1 wt=800.00>
<RefPosition #486 @317 RefTypeUse <Ivl:9 V15> LCL_VAR BB03 regmask=[rdx] minReg=1 last copy fixed wt=4800.00>
<RefPosition #487 @318 RefTypeKill <Reg:rax>  BB03 regmask=[rax] minReg=1 last wt=800.00>
<RefPosition #488 @318 RefTypeKill <Reg:rcx>  BB03 regmask=[rcx] minReg=1 last wt=800.00>
<RefPosition #489 @318 RefTypeKill <Reg:rdx>  BB03 regmask=[rdx] minReg=1 last wt=800.00>
<RefPosition #490 @318 RefTypeKill <Reg:r8 >  BB03 regmask=[r8] minReg=1 last wt=800.00>
<RefPosition #491 @318 RefTypeKill <Reg:r9 >  BB03 regmask=[r9] minReg=1 last wt=800.00>
<RefPosition #492 @318 RefTypeKill <Reg:r10>  BB03 regmask=[r10] minReg=1 last wt=800.00>
<RefPosition #493 @318 RefTypeKill <Reg:r11>  BB03 regmask=[r11] minReg=1 last wt=800.00>
<RefPosition #494 @318 RefTypeKill <Reg:mm0>  BB03 regmask=[mm0] minReg=1 last wt=800.00>
<RefPosition #495 @318 RefTypeKill <Reg:mm1>  BB03 regmask=[mm1] minReg=1 last wt=800.00>
<RefPosition #496 @318 RefTypeKill <Reg:mm2>  BB03 regmask=[mm2] minReg=1 last wt=800.00>
<RefPosition #497 @318 RefTypeKill <Reg:mm3>  BB03 regmask=[mm3] minReg=1 last wt=800.00>
<RefPosition #498 @318 RefTypeKill <Reg:mm4>  BB03 regmask=[mm4] minReg=1 last wt=800.00>
<RefPosition #499 @318 RefTypeKill <Reg:mm5>  BB03 regmask=[mm5] minReg=1 last wt=800.00>
<RefPosition #500 @319 RefTypeBB  BB04 regmask=[] minReg=1 wt=800.00>
<RefPosition #501 @329 RefTypeBB  BB05 regmask=[] minReg=1 wt=400.00>
<RefPosition #502 @332 RefTypeDef <Ivl:86> LCL_VAR BB05 regmask=[rcx] minReg=1 wt=1600.00>
<RefPosition #503 @333 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #504 @333 RefTypeUse <Ivl:86>  BB05 regmask=[rcx] minReg=1 last fixed wt=400.00>
<RefPosition #505 @334 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #506 @334 RefTypeDef <Ivl:87> PUTARG_REG BB05 regmask=[rcx] minReg=1 fixed wt=1600.00>
<RefPosition #507 @335 RefTypeFixedReg <Reg:rcx>  BB05 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #508 @335 RefTypeUse <Ivl:87>  BB05 regmask=[rcx] minReg=1 last fixed wt=400.00>
<RefPosition #509 @336 RefTypeKill <Reg:rax>  BB05 regmask=[rax] minReg=1 last wt=400.00>
<RefPosition #510 @336 RefTypeKill <Reg:rcx>  BB05 regmask=[rcx] minReg=1 last wt=400.00>
<RefPosition #511 @336 RefTypeKill <Reg:rdx>  BB05 regmask=[rdx] minReg=1 last wt=400.00>
<RefPosition #512 @336 RefTypeKill <Reg:r8 >  BB05 regmask=[r8] minReg=1 last wt=400.00>
<RefPosition #513 @336 RefTypeKill <Reg:r9 >  BB05 regmask=[r9] minReg=1 last wt=400.00>
<RefPosition #514 @336 RefTypeKill <Reg:r10>  BB05 regmask=[r10] minReg=1 last wt=400.00>
<RefPosition #515 @336 RefTypeKill <Reg:r11>  BB05 regmask=[r11] minReg=1 last wt=400.00>
<RefPosition #516 @337 RefTypeBB  BB06 regmask=[] minReg=1 wt=800.00>
<RefPosition #517 @345 RefTypeUse <Ivl:1 V03> LCL_VAR BB06 regmask=[rsi] minReg=1 last wt=2500.00>
<RefPosition #518 @346 RefTypeDef <Ivl:88> ADD BB06 regmask=[rsi] minReg=1 wt=3200.00>
<RefPosition #519 @347 RefTypeUse <Ivl:88>  BB06 regmask=[rsi] minReg=1 last wt=800.00>
<RefPosition #520 @348 RefTypeDef <Ivl:1 V03> STORE_LCL_VAR BB06 regmask=[rsi] minReg=1 wt=2500.00>
<RefPosition #521 @355 RefTypeUse <Ivl:1 V03> LCL_VAR BB06 regmask=[rsi] minReg=1 regOptional wt=2500.00>
<RefPosition #522 @359 RefTypeExpUse <Ivl:1 V03>  BB06 regmask=[allIntButFP] minReg=1 regOptional wt=800.00>
<RefPosition #523 @359 RefTypeBB  BB07 regmask=[] minReg=1 wt=100.00>
<RefPosition #524 @364 RefTypeKill <Reg:rax>  BB07 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #525 @364 RefTypeKill <Reg:rcx>  BB07 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #526 @364 RefTypeKill <Reg:rdx>  BB07 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #527 @364 RefTypeKill <Reg:r8 >  BB07 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #528 @364 RefTypeKill <Reg:r9 >  BB07 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #529 @364 RefTypeKill <Reg:r10>  BB07 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #530 @364 RefTypeKill <Reg:r11>  BB07 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #531 @364 RefTypeFixedReg <Reg:rax>  BB07 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #532 @364 RefTypeDef <Ivl:89> CALL BB07 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #533 @365 RefTypeUse <Ivl:89>  BB07 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #534 @370 RefTypeDef <Ivl:90> LCL_VAR_ADDR BB07 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #535 @371 RefTypeFixedReg <Reg:rcx>  BB07 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #536 @371 RefTypeUse <Ivl:90>  BB07 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #537 @372 RefTypeFixedReg <Reg:rcx>  BB07 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #538 @372 RefTypeDef <Ivl:91> PUTARG_REG BB07 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #539 @373 RefTypeFixedReg <Reg:rcx>  BB07 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #540 @373 RefTypeUse <Ivl:91>  BB07 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #541 @374 RefTypeKill <Reg:rax>  BB07 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #542 @374 RefTypeKill <Reg:rcx>  BB07 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #543 @374 RefTypeKill <Reg:rdx>  BB07 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #544 @374 RefTypeKill <Reg:r8 >  BB07 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #545 @374 RefTypeKill <Reg:r9 >  BB07 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #546 @374 RefTypeKill <Reg:r10>  BB07 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #547 @374 RefTypeKill <Reg:r11>  BB07 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #548 @374 RefTypeFixedReg <Reg:rax>  BB07 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #549 @374 RefTypeDef <Ivl:92> CALL BB07 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #550 @375 RefTypeUse <Ivl:92>  BB07 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #551 @376 RefTypeDef <Ivl:13 V23> STORE_LCL_VAR BB07 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #552 @379 RefTypeFixedReg <Reg:rcx>  BB07 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #553 @379 RefTypeUse <Ivl:13 V23> LCL_VAR BB07 regmask=[rcx] minReg=1 last fixed wt=400.00>
<RefPosition #554 @380 RefTypeFixedReg <Reg:rcx>  BB07 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #555 @380 RefTypeDef <Ivl:93> PUTARG_REG BB07 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #556 @382 RefTypeDef <Ivl:94> CNS_INT BB07 regmask=[rdx] minReg=1 wt=400.00>
<RefPosition #557 @383 RefTypeUse <Ivl:94>  BB07 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #558 @384 RefTypeDef <Ivl:95> IND BB07 regmask=[rdx] minReg=1 wt=400.00>
<RefPosition #559 @385 RefTypeFixedReg <Reg:rdx>  BB07 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #560 @385 RefTypeUse <Ivl:95>  BB07 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #561 @386 RefTypeFixedReg <Reg:rdx>  BB07 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #562 @386 RefTypeDef <Ivl:96> PUTARG_REG BB07 regmask=[rdx] minReg=1 fixed wt=400.00>
<RefPosition #563 @387 RefTypeFixedReg <Reg:rcx>  BB07 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #564 @387 RefTypeUse <Ivl:93>  BB07 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #565 @387 RefTypeFixedReg <Reg:rdx>  BB07 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #566 @387 RefTypeUse <Ivl:96>  BB07 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #567 @388 RefTypeKill <Reg:rax>  BB07 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #568 @388 RefTypeKill <Reg:rcx>  BB07 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #569 @388 RefTypeKill <Reg:rdx>  BB07 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #570 @388 RefTypeKill <Reg:r8 >  BB07 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #571 @388 RefTypeKill <Reg:r9 >  BB07 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #572 @388 RefTypeKill <Reg:r10>  BB07 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #573 @388 RefTypeKill <Reg:r11>  BB07 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #574 @388 RefTypeFixedReg <Reg:rax>  BB07 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #575 @388 RefTypeDef <Ivl:97> CALL BB07 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #576 @389 RefTypeFixedReg <Reg:rcx>  BB07 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #577 @389 RefTypeUse <Ivl:97>  BB07 regmask=[rcx] minReg=1 last move fixed wt=100.00>
<RefPosition #578 @390 RefTypeFixedReg <Reg:rcx>  BB07 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #579 @390 RefTypeDef <Ivl:98> PUTARG_REG BB07 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #580 @391 RefTypeFixedReg <Reg:rcx>  BB07 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #581 @391 RefTypeUse <Ivl:98>  BB07 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #582 @392 RefTypeKill <Reg:rax>  BB07 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #583 @392 RefTypeKill <Reg:rcx>  BB07 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #584 @392 RefTypeKill <Reg:rdx>  BB07 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #585 @392 RefTypeKill <Reg:r8 >  BB07 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #586 @392 RefTypeKill <Reg:r9 >  BB07 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #587 @392 RefTypeKill <Reg:r10>  BB07 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #588 @392 RefTypeKill <Reg:r11>  BB07 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #589 @393 RefTypeBB  BB08 regmask=[] minReg=1 wt=800.00>
<RefPosition #590 @401 RefTypeUse <Ivl:0 V00> LCL_VAR BB08 regmask=[rdx] minReg=1 reload spillAfter wt=2350.00>
<RefPosition #591 @402 RefTypeDef <Ivl:99> IND BB08 regmask=[rcx] minReg=1 wt=3200.00>
<RefPosition #592 @403 RefTypeUse <Ivl:99>  BB08 regmask=[rcx] minReg=1 last wt=800.00>
<RefPosition #593 @408 RefTypeDef <Ivl:100> CNS_INT BB08 regmask=[rcx] minReg=1 wt=3200.00>
<RefPosition #594 @409 RefTypeUse <Ivl:100>  BB08 regmask=[rcx] minReg=1 last wt=800.00>
<RefPosition #595 @411 RefTypeBB  BB09 regmask=[] minReg=1 wt=800.00>
<RefPosition #596 @416 RefTypeDef <Ivl:101> LCL_VAR_ADDR BB09 regmask=[rdx] minReg=1 wt=3200.00>
<RefPosition #597 @417 RefTypeFixedReg <Reg:rdx>  BB09 regmask=[rdx] minReg=1 wt=800.00>
<RefPosition #598 @417 RefTypeUse <Ivl:101>  BB09 regmask=[rdx] minReg=1 last fixed wt=800.00>
<RefPosition #599 @418 RefTypeFixedReg <Reg:rdx>  BB09 regmask=[rdx] minReg=1 wt=800.00>
<RefPosition #600 @418 RefTypeDef <Ivl:102> PUTARG_REG BB09 regmask=[rdx] minReg=1 fixed wt=3200.00>
<RefPosition #601 @420 RefTypeDef <Ivl:103> LCL_VAR BB09 regmask=[rcx] minReg=1 wt=3200.00>
<RefPosition #602 @421 RefTypeFixedReg <Reg:rcx>  BB09 regmask=[rcx] minReg=1 wt=800.00>
<RefPosition #603 @421 RefTypeUse <Ivl:103>  BB09 regmask=[rcx] minReg=1 last fixed wt=800.00>
<RefPosition #604 @422 RefTypeFixedReg <Reg:rcx>  BB09 regmask=[rcx] minReg=1 wt=800.00>
<RefPosition #605 @422 RefTypeDef <Ivl:104> PUTARG_REG BB09 regmask=[rcx] minReg=1 fixed wt=3200.00>
<RefPosition #606 @423 RefTypeFixedReg <Reg:rdx>  BB09 regmask=[rdx] minReg=1 wt=800.00>
<RefPosition #607 @423 RefTypeUse <Ivl:102>  BB09 regmask=[rdx] minReg=1 last fixed wt=800.00>
<RefPosition #608 @423 RefTypeFixedReg <Reg:rcx>  BB09 regmask=[rcx] minReg=1 wt=800.00>
<RefPosition #609 @423 RefTypeUse <Ivl:104>  BB09 regmask=[rcx] minReg=1 last fixed wt=800.00>
<RefPosition #610 @424 RefTypeKill <Reg:rax>  BB09 regmask=[rax] minReg=1 last wt=800.00>
<RefPosition #611 @424 RefTypeKill <Reg:rcx>  BB09 regmask=[rcx] minReg=1 last wt=800.00>
<RefPosition #612 @424 RefTypeKill <Reg:rdx>  BB09 regmask=[rdx] minReg=1 last wt=800.00>
<RefPosition #613 @424 RefTypeKill <Reg:r8 >  BB09 regmask=[r8] minReg=1 last wt=800.00>
<RefPosition #614 @424 RefTypeKill <Reg:r9 >  BB09 regmask=[r9] minReg=1 last wt=800.00>
<RefPosition #615 @424 RefTypeKill <Reg:r10>  BB09 regmask=[r10] minReg=1 last wt=800.00>
<RefPosition #616 @424 RefTypeKill <Reg:r11>  BB09 regmask=[r11] minReg=1 last wt=800.00>
<RefPosition #617 @431 RefTypeUse <Ivl:0 V00> LCL_VAR BB09 regmask=[rdx] minReg=1 reload spillAfter wt=2350.00>
<RefPosition #618 @432 RefTypeDef <Ivl:105> IND BB09 regmask=[rcx] minReg=1 wt=3200.00>
<RefPosition #619 @433 RefTypeUse <Ivl:105>  BB09 regmask=[rcx] minReg=1 last wt=800.00>
<RefPosition #620 @434 RefTypeDef <Ivl:17 V29> STORE_LCL_VAR BB09 regmask=[rcx] minReg=1 wt=2400.00>
<RefPosition #621 @439 RefTypeUse <Ivl:17 V29> LCL_VAR BB09 regmask=[rcx] minReg=1 wt=2400.00>
<RefPosition #622 @440 RefTypeDef <Ivl:106> IND BB09 regmask=[rax] minReg=1 wt=3200.00>
<RefPosition #623 @447 RefTypeUse <Ivl:106>  BB09 regmask=[rax] minReg=1 last wt=800.00>
<RefPosition #624 @447 RefTypeUse <Ivl:17 V29> LCL_VAR BB09 regmask=[rcx] minReg=1 last wt=2400.00>
<RefPosition #625 @451 RefTypeBB  BB10 regmask=[] minReg=1 wt=800.00>
<RefPosition #626 @461 RefTypeBB  BB11 regmask=[] minReg=1 wt=400.00>
<RefPosition #627 @464 RefTypeDef <Ivl:107> LCL_VAR BB11 regmask=[rcx] minReg=1 wt=1600.00>
<RefPosition #628 @465 RefTypeFixedReg <Reg:rcx>  BB11 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #629 @465 RefTypeUse <Ivl:107>  BB11 regmask=[rcx] minReg=1 last fixed wt=400.00>
<RefPosition #630 @466 RefTypeFixedReg <Reg:rcx>  BB11 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #631 @466 RefTypeDef <Ivl:108> PUTARG_REG BB11 regmask=[rcx] minReg=1 fixed wt=1600.00>
<RefPosition #632 @467 RefTypeFixedReg <Reg:rcx>  BB11 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #633 @467 RefTypeUse <Ivl:108>  BB11 regmask=[rcx] minReg=1 last fixed wt=400.00>
<RefPosition #634 @468 RefTypeKill <Reg:rax>  BB11 regmask=[rax] minReg=1 last wt=400.00>
<RefPosition #635 @468 RefTypeKill <Reg:rcx>  BB11 regmask=[rcx] minReg=1 last wt=400.00>
<RefPosition #636 @468 RefTypeKill <Reg:rdx>  BB11 regmask=[rdx] minReg=1 last wt=400.00>
<RefPosition #637 @468 RefTypeKill <Reg:r8 >  BB11 regmask=[r8] minReg=1 last wt=400.00>
<RefPosition #638 @468 RefTypeKill <Reg:r9 >  BB11 regmask=[r9] minReg=1 last wt=400.00>
<RefPosition #639 @468 RefTypeKill <Reg:r10>  BB11 regmask=[r10] minReg=1 last wt=400.00>
<RefPosition #640 @468 RefTypeKill <Reg:r11>  BB11 regmask=[r11] minReg=1 last wt=400.00>
<RefPosition #641 @469 RefTypeBB  BB12 regmask=[] minReg=1 wt=800.00>
<RefPosition #642 @474 RefTypeDef <Ivl:109> CNS_INT BB12 regmask=[rcx] minReg=1 wt=3200.00>
<RefPosition #643 @475 RefTypeFixedReg <Reg:rcx>  BB12 regmask=[rcx] minReg=1 wt=800.00>
<RefPosition #644 @475 RefTypeUse <Ivl:109>  BB12 regmask=[rcx] minReg=1 last fixed wt=800.00>
<RefPosition #645 @476 RefTypeFixedReg <Reg:rcx>  BB12 regmask=[rcx] minReg=1 wt=800.00>
<RefPosition #646 @476 RefTypeDef <Ivl:110> PUTARG_REG BB12 regmask=[rcx] minReg=1 fixed wt=3200.00>
<RefPosition #647 @477 RefTypeFixedReg <Reg:rcx>  BB12 regmask=[rcx] minReg=1 wt=800.00>
<RefPosition #648 @477 RefTypeUse <Ivl:110>  BB12 regmask=[rcx] minReg=1 last fixed wt=800.00>
<RefPosition #649 @478 RefTypeKill <Reg:rax>  BB12 regmask=[rax] minReg=1 last wt=800.00>
<RefPosition #650 @478 RefTypeKill <Reg:rcx>  BB12 regmask=[rcx] minReg=1 last wt=800.00>
<RefPosition #651 @478 RefTypeKill <Reg:rdx>  BB12 regmask=[rdx] minReg=1 last wt=800.00>
<RefPosition #652 @478 RefTypeKill <Reg:r8 >  BB12 regmask=[r8] minReg=1 last wt=800.00>
<RefPosition #653 @478 RefTypeKill <Reg:r9 >  BB12 regmask=[r9] minReg=1 last wt=800.00>
<RefPosition #654 @478 RefTypeKill <Reg:r10>  BB12 regmask=[r10] minReg=1 last wt=800.00>
<RefPosition #655 @478 RefTypeKill <Reg:r11>  BB12 regmask=[r11] minReg=1 last wt=800.00>
<RefPosition #656 @479 RefTypeBB  BB13 regmask=[] minReg=1 wt=100.00>
<RefPosition #657 @481 RefTypeBB  BB30 regmask=[] minReg=1 wt=100.00>
<RefPosition #658 @493 RefTypeBB  BB31 regmask=[] minReg=1 wt=100.00>
<RefPosition #659 @498 RefTypeDef <Ivl:111> LCL_VAR BB31 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #660 @499 RefTypeFixedReg <Reg:rcx>  BB31 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #661 @499 RefTypeUse <Ivl:111>  BB31 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #662 @500 RefTypeFixedReg <Reg:rcx>  BB31 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #663 @500 RefTypeDef <Ivl:112> PUTARG_REG BB31 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #664 @501 RefTypeFixedReg <Reg:rcx>  BB31 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #665 @501 RefTypeUse <Ivl:112>  BB31 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #666 @502 RefTypeKill <Reg:rax>  BB31 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #667 @502 RefTypeKill <Reg:rcx>  BB31 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #668 @502 RefTypeKill <Reg:rdx>  BB31 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #669 @502 RefTypeKill <Reg:r8 >  BB31 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #670 @502 RefTypeKill <Reg:r9 >  BB31 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #671 @502 RefTypeKill <Reg:r10>  BB31 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #672 @502 RefTypeKill <Reg:r11>  BB31 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #673 @503 RefTypeBB  BB32 regmask=[] minReg=1 wt=100.00>
<RefPosition #674 @509 RefTypeBB  BB14 regmask=[] minReg=1 wt=100.00>
<RefPosition #675 @511 RefTypeBB  BB15 regmask=[] minReg=1 wt=100.00>
<RefPosition #676 @516 RefTypeKill <Reg:rax>  BB15 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #677 @516 RefTypeKill <Reg:rcx>  BB15 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #678 @516 RefTypeKill <Reg:rdx>  BB15 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #679 @516 RefTypeKill <Reg:r8 >  BB15 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #680 @516 RefTypeKill <Reg:r9 >  BB15 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #681 @516 RefTypeKill <Reg:r10>  BB15 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #682 @516 RefTypeKill <Reg:r11>  BB15 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #683 @516 RefTypeFixedReg <Reg:rax>  BB15 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #684 @516 RefTypeDef <Ivl:113> CALL BB15 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #685 @517 RefTypeUse <Ivl:113>  BB15 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #686 @522 RefTypeDef <Ivl:114> LCL_VAR_ADDR BB15 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #687 @523 RefTypeFixedReg <Reg:rcx>  BB15 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #688 @523 RefTypeUse <Ivl:114>  BB15 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #689 @524 RefTypeFixedReg <Reg:rcx>  BB15 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #690 @524 RefTypeDef <Ivl:115> PUTARG_REG BB15 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #691 @525 RefTypeFixedReg <Reg:rcx>  BB15 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #692 @525 RefTypeUse <Ivl:115>  BB15 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #693 @526 RefTypeKill <Reg:rax>  BB15 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #694 @526 RefTypeKill <Reg:rcx>  BB15 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #695 @526 RefTypeKill <Reg:rdx>  BB15 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #696 @526 RefTypeKill <Reg:r8 >  BB15 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #697 @526 RefTypeKill <Reg:r9 >  BB15 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #698 @526 RefTypeKill <Reg:r10>  BB15 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #699 @526 RefTypeKill <Reg:r11>  BB15 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #700 @526 RefTypeFixedReg <Reg:rax>  BB15 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #701 @526 RefTypeDef <Ivl:116> CALL BB15 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #702 @527 RefTypeUse <Ivl:116>  BB15 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #703 @528 RefTypeDef <Ivl:14 V24> STORE_LCL_VAR BB15 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #704 @531 RefTypeFixedReg <Reg:rcx>  BB15 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #705 @531 RefTypeUse <Ivl:14 V24> LCL_VAR BB15 regmask=[rcx] minReg=1 last fixed wt=400.00>
<RefPosition #706 @532 RefTypeFixedReg <Reg:rcx>  BB15 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #707 @532 RefTypeDef <Ivl:117> PUTARG_REG BB15 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #708 @534 RefTypeDef <Ivl:118> CNS_INT BB15 regmask=[rdx] minReg=1 wt=400.00>
<RefPosition #709 @535 RefTypeUse <Ivl:118>  BB15 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #710 @536 RefTypeDef <Ivl:119> IND BB15 regmask=[rdx] minReg=1 wt=400.00>
<RefPosition #711 @537 RefTypeFixedReg <Reg:rdx>  BB15 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #712 @537 RefTypeUse <Ivl:119>  BB15 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #713 @538 RefTypeFixedReg <Reg:rdx>  BB15 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #714 @538 RefTypeDef <Ivl:120> PUTARG_REG BB15 regmask=[rdx] minReg=1 fixed wt=400.00>
<RefPosition #715 @539 RefTypeFixedReg <Reg:rcx>  BB15 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #716 @539 RefTypeUse <Ivl:117>  BB15 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #717 @539 RefTypeFixedReg <Reg:rdx>  BB15 regmask=[rdx] minReg=1 wt=100.00>
<RefPosition #718 @539 RefTypeUse <Ivl:120>  BB15 regmask=[rdx] minReg=1 last fixed wt=100.00>
<RefPosition #719 @540 RefTypeKill <Reg:rax>  BB15 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #720 @540 RefTypeKill <Reg:rcx>  BB15 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #721 @540 RefTypeKill <Reg:rdx>  BB15 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #722 @540 RefTypeKill <Reg:r8 >  BB15 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #723 @540 RefTypeKill <Reg:r9 >  BB15 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #724 @540 RefTypeKill <Reg:r10>  BB15 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #725 @540 RefTypeKill <Reg:r11>  BB15 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #726 @540 RefTypeFixedReg <Reg:rax>  BB15 regmask=[rax] minReg=1 wt=100.00>
<RefPosition #727 @540 RefTypeDef <Ivl:121> CALL BB15 regmask=[rax] minReg=1 fixed wt=400.00>
<RefPosition #728 @541 RefTypeFixedReg <Reg:rcx>  BB15 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #729 @541 RefTypeUse <Ivl:121>  BB15 regmask=[rcx] minReg=1 last move fixed wt=100.00>
<RefPosition #730 @542 RefTypeFixedReg <Reg:rcx>  BB15 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #731 @542 RefTypeDef <Ivl:122> PUTARG_REG BB15 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #732 @543 RefTypeFixedReg <Reg:rcx>  BB15 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #733 @543 RefTypeUse <Ivl:122>  BB15 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #734 @544 RefTypeKill <Reg:rax>  BB15 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #735 @544 RefTypeKill <Reg:rcx>  BB15 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #736 @544 RefTypeKill <Reg:rdx>  BB15 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #737 @544 RefTypeKill <Reg:r8 >  BB15 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #738 @544 RefTypeKill <Reg:r9 >  BB15 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #739 @544 RefTypeKill <Reg:r10>  BB15 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #740 @544 RefTypeKill <Reg:r11>  BB15 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #741 @548 RefTypeDef <Ivl:123> CNS_INT BB15 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #742 @549 RefTypeUse <Ivl:123>  BB15 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #743 @550 RefTypeDef <Ivl:124> IND BB15 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #744 @551 RefTypeFixedReg <Reg:rcx>  BB15 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #745 @551 RefTypeUse <Ivl:124>  BB15 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #746 @552 RefTypeFixedReg <Reg:rcx>  BB15 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #747 @552 RefTypeDef <Ivl:125> PUTARG_REG BB15 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #748 @553 RefTypeFixedReg <Reg:rcx>  BB15 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #749 @553 RefTypeUse <Ivl:125>  BB15 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #750 @554 RefTypeKill <Reg:rax>  BB15 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #751 @554 RefTypeKill <Reg:rcx>  BB15 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #752 @554 RefTypeKill <Reg:rdx>  BB15 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #753 @554 RefTypeKill <Reg:r8 >  BB15 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #754 @554 RefTypeKill <Reg:r9 >  BB15 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #755 @554 RefTypeKill <Reg:r10>  BB15 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #756 @554 RefTypeKill <Reg:r11>  BB15 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #757 @558 RefTypeDef <Ivl:126> CNS_INT BB15 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #758 @559 RefTypeUse <Ivl:126>  BB15 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #759 @560 RefTypeDef <Ivl:127> IND BB15 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #760 @561 RefTypeFixedReg <Reg:rcx>  BB15 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #761 @561 RefTypeUse <Ivl:127>  BB15 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #762 @562 RefTypeFixedReg <Reg:rcx>  BB15 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #763 @562 RefTypeDef <Ivl:128> PUTARG_REG BB15 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #764 @563 RefTypeFixedReg <Reg:rcx>  BB15 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #765 @563 RefTypeUse <Ivl:128>  BB15 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #766 @564 RefTypeKill <Reg:rax>  BB15 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #767 @564 RefTypeKill <Reg:rcx>  BB15 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #768 @564 RefTypeKill <Reg:rdx>  BB15 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #769 @564 RefTypeKill <Reg:r8 >  BB15 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #770 @564 RefTypeKill <Reg:r9 >  BB15 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #771 @564 RefTypeKill <Reg:r10>  BB15 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #772 @564 RefTypeKill <Reg:r11>  BB15 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #773 @568 RefTypeDef <Ivl:129> CNS_INT BB15 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #774 @569 RefTypeUse <Ivl:129>  BB15 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #775 @570 RefTypeDef <Ivl:130> IND BB15 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #776 @571 RefTypeFixedReg <Reg:rcx>  BB15 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #777 @571 RefTypeUse <Ivl:130>  BB15 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #778 @572 RefTypeFixedReg <Reg:rcx>  BB15 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #779 @572 RefTypeDef <Ivl:131> PUTARG_REG BB15 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #780 @573 RefTypeFixedReg <Reg:rcx>  BB15 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #781 @573 RefTypeUse <Ivl:131>  BB15 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #782 @574 RefTypeKill <Reg:rax>  BB15 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #783 @574 RefTypeKill <Reg:rcx>  BB15 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #784 @574 RefTypeKill <Reg:rdx>  BB15 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #785 @574 RefTypeKill <Reg:r8 >  BB15 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #786 @574 RefTypeKill <Reg:r9 >  BB15 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #787 @574 RefTypeKill <Reg:r10>  BB15 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #788 @574 RefTypeKill <Reg:r11>  BB15 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #789 @578 RefTypeDef <Ivl:132> CNS_INT BB15 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #790 @579 RefTypeUse <Ivl:132>  BB15 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #791 @580 RefTypeDef <Ivl:133> IND BB15 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #792 @581 RefTypeFixedReg <Reg:rcx>  BB15 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #793 @581 RefTypeUse <Ivl:133>  BB15 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #794 @582 RefTypeFixedReg <Reg:rcx>  BB15 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #795 @582 RefTypeDef <Ivl:134> PUTARG_REG BB15 regmask=[rcx] minReg=1 fixed wt=400.00>
<RefPosition #796 @583 RefTypeFixedReg <Reg:rcx>  BB15 regmask=[rcx] minReg=1 wt=100.00>
<RefPosition #797 @583 RefTypeUse <Ivl:134>  BB15 regmask=[rcx] minReg=1 last fixed wt=100.00>
<RefPosition #798 @584 RefTypeKill <Reg:rax>  BB15 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #799 @584 RefTypeKill <Reg:rcx>  BB15 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #800 @584 RefTypeKill <Reg:rdx>  BB15 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #801 @584 RefTypeKill <Reg:r8 >  BB15 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #802 @584 RefTypeKill <Reg:r9 >  BB15 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #803 @584 RefTypeKill <Reg:r10>  BB15 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #804 @584 RefTypeKill <Reg:r11>  BB15 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #805 @585 RefTypeBB  BB19 regmask=[] minReg=1 wt=800.00>
<RefPosition #806 @588 RefTypeDef <Ivl:135> LCL_VAR_ADDR BB19 regmask=[rcx] minReg=1 wt=3200.00>
<RefPosition #807 @589 RefTypeFixedReg <Reg:rcx>  BB19 regmask=[rcx] minReg=1 wt=800.00>
<RefPosition #808 @589 RefTypeUse <Ivl:135>  BB19 regmask=[rcx] minReg=1 last fixed wt=800.00>
<RefPosition #809 @590 RefTypeFixedReg <Reg:rcx>  BB19 regmask=[rcx] minReg=1 wt=800.00>
<RefPosition #810 @590 RefTypeDef <Ivl:136> PUTARG_REG BB19 regmask=[rcx] minReg=1 fixed wt=3200.00>
<RefPosition #811 @592 RefTypeDef <Ivl:137> CNS_INT BB19 regmask=[rdx] minReg=1 wt=3200.00>
<RefPosition #812 @593 RefTypeFixedReg <Reg:rdx>  BB19 regmask=[rdx] minReg=1 wt=800.00>
<RefPosition #813 @593 RefTypeUse <Ivl:137>  BB19 regmask=[rdx] minReg=1 last fixed wt=800.00>
<RefPosition #814 @594 RefTypeFixedReg <Reg:rdx>  BB19 regmask=[rdx] minReg=1 wt=800.00>
<RefPosition #815 @594 RefTypeDef <Ivl:138> PUTARG_REG BB19 regmask=[rdx] minReg=1 fixed wt=3200.00>
<RefPosition #816 @595 RefTypeFixedReg <Reg:rcx>  BB19 regmask=[rcx] minReg=1 wt=800.00>
<RefPosition #817 @595 RefTypeUse <Ivl:136>  BB19 regmask=[rcx] minReg=1 last fixed wt=800.00>
<RefPosition #818 @595 RefTypeFixedReg <Reg:rdx>  BB19 regmask=[rdx] minReg=1 wt=800.00>
<RefPosition #819 @595 RefTypeUse <Ivl:138>  BB19 regmask=[rdx] minReg=1 last fixed wt=800.00>
<RefPosition #820 @596 RefTypeKill <Reg:rax>  BB19 regmask=[rax] minReg=1 last wt=800.00>
<RefPosition #821 @596 RefTypeKill <Reg:rcx>  BB19 regmask=[rcx] minReg=1 last wt=800.00>
<RefPosition #822 @596 RefTypeKill <Reg:rdx>  BB19 regmask=[rdx] minReg=1 last wt=800.00>
<RefPosition #823 @596 RefTypeKill <Reg:r8 >  BB19 regmask=[r8] minReg=1 last wt=800.00>
<RefPosition #824 @596 RefTypeKill <Reg:r9 >  BB19 regmask=[r9] minReg=1 last wt=800.00>
<RefPosition #825 @596 RefTypeKill <Reg:r10>  BB19 regmask=[r10] minReg=1 last wt=800.00>
<RefPosition #826 @596 RefTypeKill <Reg:r11>  BB19 regmask=[r11] minReg=1 last wt=800.00>
<RefPosition #827 @605 RefTypeBB  BB20 regmask=[] minReg=1 wt=800.00>
<RefPosition #828 @610 RefTypeKill <Reg:rax>  BB20 regmask=[rax] minReg=1 last wt=800.00>
<RefPosition #829 @610 RefTypeKill <Reg:rcx>  BB20 regmask=[rcx] minReg=1 last wt=800.00>
<RefPosition #830 @610 RefTypeKill <Reg:rdx>  BB20 regmask=[rdx] minReg=1 last wt=800.00>
<RefPosition #831 @610 RefTypeKill <Reg:r8 >  BB20 regmask=[r8] minReg=1 last wt=800.00>
<RefPosition #832 @610 RefTypeKill <Reg:r9 >  BB20 regmask=[r9] minReg=1 last wt=800.00>
<RefPosition #833 @610 RefTypeKill <Reg:r10>  BB20 regmask=[r10] minReg=1 last wt=800.00>
<RefPosition #834 @610 RefTypeKill <Reg:r11>  BB20 regmask=[r11] minReg=1 last wt=800.00>
<RefPosition #835 @610 RefTypeFixedReg <Reg:rax>  BB20 regmask=[rax] minReg=1 wt=800.00>
<RefPosition #836 @610 RefTypeDef <Ivl:139> CALL BB20 regmask=[rax] minReg=1 fixed wt=3200.00>
<RefPosition #837 @611 RefTypeFixedReg <Reg:rcx>  BB20 regmask=[rcx] minReg=1 wt=800.00>
<RefPosition #838 @611 RefTypeUse <Ivl:139>  BB20 regmask=[rcx] minReg=1 last move fixed wt=800.00>
<RefPosition #839 @612 RefTypeFixedReg <Reg:rcx>  BB20 regmask=[rcx] minReg=1 wt=800.00>
<RefPosition #840 @612 RefTypeDef <Ivl:140> PUTARG_REG BB20 regmask=[rcx] minReg=1 fixed wt=3200.00>
<RefPosition #841 @613 RefTypeFixedReg <Reg:rcx>  BB20 regmask=[rcx] minReg=1 wt=800.00>
<RefPosition #842 @613 RefTypeUse <Ivl:140>  BB20 regmask=[rcx] minReg=1 last fixed wt=800.00>
<RefPosition #843 @614 RefTypeKill <Reg:rax>  BB20 regmask=[rax] minReg=1 last wt=800.00>
<RefPosition #844 @614 RefTypeKill <Reg:rcx>  BB20 regmask=[rcx] minReg=1 last wt=800.00>
<RefPosition #845 @614 RefTypeKill <Reg:rdx>  BB20 regmask=[rdx] minReg=1 last wt=800.00>
<RefPosition #846 @614 RefTypeKill <Reg:r8 >  BB20 regmask=[r8] minReg=1 last wt=800.00>
<RefPosition #847 @614 RefTypeKill <Reg:r9 >  BB20 regmask=[r9] minReg=1 last wt=800.00>
<RefPosition #848 @614 RefTypeKill <Reg:r10>  BB20 regmask=[r10] minReg=1 last wt=800.00>
<RefPosition #849 @614 RefTypeKill <Reg:r11>  BB20 regmask=[r11] minReg=1 last wt=800.00>
<RefPosition #850 @615 RefTypeBB  BB21 regmask=[] minReg=1 wt=100.00>
<RefPosition #851 @625 RefTypeBB  BB22 regmask=[] minReg=1 wt=100.00>
<RefPosition #852 @630 RefTypeKill <Reg:rax>  BB22 regmask=[rax] minReg=1 last wt=100.00>
<RefPosition #853 @630 RefTypeKill <Reg:rcx>  BB22 regmask=[rcx] minReg=1 last wt=100.00>
<RefPosition #854 @630 RefTypeKill <Reg:rdx>  BB22 regmask=[rdx] minReg=1 last wt=100.00>
<RefPosition #855 @630 RefTypeKill <Reg:r8 >  BB22 regmask=[r8] minReg=1 last wt=100.00>
<RefPosition #856 @630 RefTypeKill <Reg:r9 >  BB22 regmask=[r9] minReg=1 last wt=100.00>
<RefPosition #857 @630 RefTypeKill <Reg:r10>  BB22 regmask=[r10] minReg=1 last wt=100.00>
<RefPosition #858 @630 RefTypeKill <Reg:r11>  BB22 regmask=[r11] minReg=1 last wt=100.00>
<RefPosition #859 @631 RefTypeBB  BB23 regmask=[] minReg=1 wt=100.00>
<RefPosition #860 @641 RefTypeBB  BB24 regmask=[] minReg=1 wt=100.00>
<RefPosition #861 @651 RefTypeUse <Ivl:0 V00> LCL_VAR BB24 regmask=[rdx] minReg=1 reload wt=2350.00>
<RefPosition #862 @653 RefTypeBB  BB25 regmask=[] minReg=1 wt=100.00>
<RefPosition #863 @663 RefTypeBB  BB26 regmask=[] minReg=1 wt=100.00>
<RefPosition #864 @673 RefTypeUse <Ivl:0 V00> LCL_VAR BB26 regmask=[rdx] minReg=1 last wt=2350.00>
<RefPosition #865 @679 RefTypeBB  BB27 regmask=[] minReg=1 wt=0.00>
<RefPosition #866 @691 RefTypeBB  BB28 regmask=[] minReg=1 wt=0.00>
<RefPosition #867 @696 RefTypeDef <Ivl:141> LCL_VAR BB28 regmask=[rcx] minReg=1 wt=0.00>
<RefPosition #868 @697 RefTypeFixedReg <Reg:rcx>  BB28 regmask=[rcx] minReg=1 wt=0.00>
<RefPosition #869 @697 RefTypeUse <Ivl:141>  BB28 regmask=[rcx] minReg=1 last fixed wt=0.00>
<RefPosition #870 @698 RefTypeFixedReg <Reg:rcx>  BB28 regmask=[rcx] minReg=1 wt=0.00>
<RefPosition #871 @698 RefTypeDef <Ivl:142> PUTARG_REG BB28 regmask=[rcx] minReg=1 fixed wt=0.00>
<RefPosition #872 @699 RefTypeFixedReg <Reg:rcx>  BB28 regmask=[rcx] minReg=1 wt=0.00>
<RefPosition #873 @699 RefTypeUse <Ivl:142>  BB28 regmask=[rcx] minReg=1 last fixed wt=0.00>
<RefPosition #874 @700 RefTypeKill <Reg:rax>  BB28 regmask=[rax] minReg=1 last wt=0.00>
<RefPosition #875 @700 RefTypeKill <Reg:rcx>  BB28 regmask=[rcx] minReg=1 last wt=0.00>
<RefPosition #876 @700 RefTypeKill <Reg:rdx>  BB28 regmask=[rdx] minReg=1 last wt=0.00>
<RefPosition #877 @700 RefTypeKill <Reg:r8 >  BB28 regmask=[r8] minReg=1 last wt=0.00>
<RefPosition #878 @700 RefTypeKill <Reg:r9 >  BB28 regmask=[r9] minReg=1 last wt=0.00>
<RefPosition #879 @700 RefTypeKill <Reg:r10>  BB28 regmask=[r10] minReg=1 last wt=0.00>
<RefPosition #880 @700 RefTypeKill <Reg:r11>  BB28 regmask=[r11] minReg=1 last wt=0.00>
<RefPosition #881 @701 RefTypeBB  BB29 regmask=[] minReg=1 wt=0.00>

VAR REFPOSITIONS AFTER ALLOCATION
--- V00  (Interval 0)
<RefPosition #0   @0   RefTypeParamDef <Ivl:0 V00>  BB00 regmask=[] minReg=1 singleDefSpill regOptional wt=100.00>
<RefPosition #98  @55  RefTypeUse <Ivl:0 V00> LCL_VAR BB01 regmask=[rdx] minReg=1 reload spillAfter wt=2350.00>
<RefPosition #135 @75  RefTypeUse <Ivl:0 V00> LCL_VAR BB01 regmask=[rdx] minReg=1 reload spillAfter wt=2350.00>
<RefPosition #196 @115 RefTypeUse <Ivl:0 V00> LCL_VAR BB01 regmask=[rdx] minReg=1 reload spillAfter fixed wt=2350.00>
<RefPosition #336 @197 RefTypeUse <Ivl:0 V00> LCL_VAR BB02 regmask=[rdx] minReg=1 reload spillAfter wt=2350.00>
<RefPosition #381 @235 RefTypeUse <Ivl:0 V00> LCL_VAR BB03 regmask=[rdx] minReg=1 reload spillAfter wt=2350.00>
<RefPosition #419 @265 RefTypeUse <Ivl:0 V00> LCL_VAR BB03 regmask=[rdx] minReg=1 reload spillAfter wt=2350.00>
<RefPosition #590 @401 RefTypeUse <Ivl:0 V00> LCL_VAR BB08 regmask=[rdx] minReg=1 reload spillAfter wt=2350.00>
<RefPosition #617 @431 RefTypeUse <Ivl:0 V00> LCL_VAR BB09 regmask=[rdx] minReg=1 reload spillAfter wt=2350.00>
<RefPosition #861 @651 RefTypeUse <Ivl:0 V00> LCL_VAR BB24 regmask=[rdx] minReg=1 reload wt=2350.00>
<RefPosition #864 @673 RefTypeUse <Ivl:0 V00> LCL_VAR BB26 regmask=[rdx] minReg=1 last wt=2350.00>
--- V01
--- V02
--- V03  (Interval 1)
<RefPosition #334 @188 RefTypeDef <Ivl:1 V03> STORE_LCL_VAR BB01 regmask=[rsi] minReg=1 wt=2500.00>
<RefPosition #517 @345 RefTypeUse <Ivl:1 V03> LCL_VAR BB06 regmask=[rsi] minReg=1 last wt=2500.00>
<RefPosition #520 @348 RefTypeDef <Ivl:1 V03> STORE_LCL_VAR BB06 regmask=[rsi] minReg=1 wt=2500.00>
<RefPosition #521 @355 RefTypeUse <Ivl:1 V03> LCL_VAR BB06 regmask=[rsi] minReg=1 regOptional wt=2500.00>
<RefPosition #522 @359 RefTypeExpUse <Ivl:1 V03>  BB06 regmask=[allIntButFP] minReg=1 regOptional wt=800.00>
--- V04
--- V05
--- V06
--- V07
--- V08  (Interval 2)
<RefPosition #84  @44  RefTypeDef <Ivl:2 V08> STORE_LCL_VAR BB01 regmask=[rsi] minReg=1 wt=600.00>
<RefPosition #86  @47  RefTypeUse <Ivl:2 V08> LCL_VAR BB01 regmask=[rcx] minReg=1 copy fixed wt=600.00>
<RefPosition #103 @59  RefTypeUse <Ivl:2 V08> LCL_VAR BB01 regmask=[rdx] minReg=1 last copy fixed wt=600.00>
--- V09  (Interval 3)
<RefPosition #134 @70  RefTypeDef <Ivl:3 V09> STORE_LCL_VAR BB01 regmask=[rsi] minReg=1 wt=600.00>
<RefPosition #142 @85  RefTypeUse <Ivl:3 V09> LCL_VAR BB01 regmask=[rcx] minReg=1 copy fixed wt=600.00>
<RefPosition #159 @97  RefTypeUse <Ivl:3 V09> LCL_VAR BB01 regmask=[rdx] minReg=1 last copy fixed wt=600.00>
--- V10  (Interval 4)
<RefPosition #140 @82  RefTypeDef <Ivl:4 V10> STORE_LCL_VAR BB01 regmask=[rdi] minReg=1 wt=400.00>
<RefPosition #154 @93  RefTypeUse <Ivl:4 V10> LCL_VAR BB01 regmask=[rdi] minReg=1 last wt=400.00>
--- V11  (Interval 5)
<RefPosition #190 @108 RefTypeDef <Ivl:5 V11> STORE_LCL_VAR BB01 regmask=[rsi] minReg=1 wt=600.00>
<RefPosition #192 @111 RefTypeUse <Ivl:5 V11> LCL_VAR BB01 regmask=[rcx] minReg=1 copy fixed wt=600.00>
<RefPosition #240 @139 RefTypeUse <Ivl:5 V11> LCL_VAR BB01 regmask=[rdx] minReg=1 last copy fixed wt=600.00>
--- V12  (Interval 6)
<RefPosition #234 @132 RefTypeDef <Ivl:6 V12> STORE_LCL_VAR BB01 regmask=[rdi] minReg=1 wt=600.00>
<RefPosition #236 @135 RefTypeUse <Ivl:6 V12> LCL_VAR BB01 regmask=[rcx] minReg=1 copy fixed wt=600.00>
<RefPosition #255 @147 RefTypeUse <Ivl:6 V12> LCL_VAR BB01 regmask=[rcx] minReg=1 last copy fixed wt=600.00>
--- V13  (Interval 7)
<RefPosition #380 @230 RefTypeDef <Ivl:7 V13> STORE_LCL_VAR BB03 regmask=[rdi] minReg=1 wt=4800.00>
<RefPosition #388 @245 RefTypeUse <Ivl:7 V13> LCL_VAR BB03 regmask=[rcx] minReg=1 copy fixed wt=4800.00>
<RefPosition #405 @257 RefTypeUse <Ivl:7 V13> LCL_VAR BB03 regmask=[rdx] minReg=1 last copy fixed wt=4800.00>
--- V14  (Interval 8)
<RefPosition #386 @242 RefTypeDef <Ivl:8 V14> STORE_LCL_VAR BB03 regmask=[rbx] minReg=1 wt=3200.00>
<RefPosition #400 @253 RefTypeUse <Ivl:8 V14> LCL_VAR BB03 regmask=[rbx] minReg=1 last wt=3200.00>
--- V15  (Interval 9)
<RefPosition #465 @298 RefTypeDef <Ivl:9 V15> STORE_LCL_VAR BB03 regmask=[rbx] minReg=1 wt=4800.00>
<RefPosition #469 @305 RefTypeUse <Ivl:9 V15> LCL_VAR BB03 regmask=[rcx] minReg=1 copy fixed wt=4800.00>
<RefPosition #486 @317 RefTypeUse <Ivl:9 V15> LCL_VAR BB03 regmask=[rdx] minReg=1 last copy fixed wt=4800.00>
--- V16  (Interval 10)
<RefPosition #467 @302 RefTypeDef <Ivl:10 V16> STORE_LCL_VAR BB03 regmask=[rdi] minReg=1 wt=3200.00>
<RefPosition #481 @313 RefTypeUse <Ivl:10 V16> LCL_VAR BB03 regmask=[rdi] minReg=1 last wt=3200.00>
--- V17
--- V18
--- V19
--- V20
--- V21  (Interval 11)
<RefPosition #29  @18  RefTypeDef <Ivl:11 V21> STORE_LCL_VAR BB01 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #31  @21  RefTypeUse <Ivl:11 V21> LCL_VAR BB01 regmask=[rcx] minReg=1 last fixed wt=400.00>
--- V22  (Interval 12)
<RefPosition #294 @166 RefTypeDef <Ivl:12 V22> STORE_LCL_VAR BB01 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #296 @169 RefTypeUse <Ivl:12 V22> LCL_VAR BB01 regmask=[rcx] minReg=1 last fixed wt=400.00>
--- V23  (Interval 13)
<RefPosition #551 @376 RefTypeDef <Ivl:13 V23> STORE_LCL_VAR BB07 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #553 @379 RefTypeUse <Ivl:13 V23> LCL_VAR BB07 regmask=[rcx] minReg=1 last fixed wt=400.00>
--- V24  (Interval 14)
<RefPosition #703 @528 RefTypeDef <Ivl:14 V24> STORE_LCL_VAR BB15 regmask=[rcx] minReg=1 wt=400.00>
<RefPosition #705 @531 RefTypeUse <Ivl:14 V24> LCL_VAR BB15 regmask=[rcx] minReg=1 last fixed wt=400.00>
--- V25
--- V26
--- V27  (Interval 15)
<RefPosition #430 @284 RefTypeDef <Ivl:15 V27> STORE_LCL_VAR BB03 regmask=[rdi] minReg=1 wt=2400.00>
<RefPosition #434 @287 RefTypeUse <Ivl:15 V27> LCL_VAR BB03 regmask=[rdx] minReg=1 copy fixed wt=2400.00>
<RefPosition #466 @301 RefTypeUse <Ivl:15 V27> LCL_VAR BB03 regmask=[rdi] minReg=1 last wt=2400.00>
--- V28  (Interval 16)
<RefPosition #422 @268 RefTypeDef <Ivl:16 V28> STORE_LCL_VAR BB03 regmask=[rcx] minReg=1 singleDefSpill wt=1200.00>
<RefPosition #423 @271 RefTypeUse <Ivl:16 V28> LCL_VAR BB03 regmask=[rcx] minReg=1 spillAfter wt=1200.00>
<RefPosition #425 @277 RefTypeUse <Ivl:16 V28> LCL_VAR BB03 regmask=[rax] minReg=1 last reload wt=1200.00>
--- V29  (Interval 17)
<RefPosition #620 @434 RefTypeDef <Ivl:17 V29> STORE_LCL_VAR BB09 regmask=[rcx] minReg=1 wt=2400.00>
<RefPosition #621 @439 RefTypeUse <Ivl:17 V29> LCL_VAR BB09 regmask=[rcx] minReg=1 wt=2400.00>
<RefPosition #624 @447 RefTypeUse <Ivl:17 V29> LCL_VAR BB09 regmask=[rcx] minReg=1 last wt=2400.00>

Active intervals at end of allocation:

-----------------------
RESOLVING BB BOUNDARIES
-----------------------
Resolution Candidates: {V00 V03}
Has Critical Edges

Prior to Resolution

BB01
use def in out
{V00}
{V03 V08 V09 V10 V11 V12 V21 V22}
{V00}
{V00 V03}
Var=Reg beg of BB01: none
Var=Reg end of BB01: V03=rsi 

BB02
use def in out
{V00}
{V04}
{V00 V03}
{V00 V03 V04}
Var=Reg beg of BB02: V03=rsi 
Var=Reg end of BB02: V03=rsi 

BB03
use def in out
{V00 V04}
{V13 V14 V15 V16 V27 V28}
{V00 V03 V04}
{V00 V03 V04}
Var=Reg beg of BB03: V03=rsi 
Var=Reg end of BB03: V03=rsi 

BB04
use def in out
{}
{}
{V00 V03 V04}
{V00 V03 V04}
Var=Reg beg of BB04: V03=rsi 
Var=Reg end of BB04: V03=rsi 

BB05
use def in out
{V04}
{}
{V00 V03 V04}
{V00 V03}
Var=Reg beg of BB05: V03=rsi 
Var=Reg end of BB05: V03=rsi 

BB06
use def in out
{V03}
{V03}
{V00 V03}
{V00 V03}
Var=Reg beg of BB06: V03=rsi 
Var=Reg end of BB06: V03=rsi 

BB07
use def in out
{}
{V23}
{V00}
{V00}
Var=Reg beg of BB07: none
Var=Reg end of BB07: none

BB08
use def in out
{V00}
{V04}
{V00}
{V00 V04}
Var=Reg beg of BB08: none
Var=Reg end of BB08: none

BB09
use def in out
{V00 V04}
{V29}
{V00 V04}
{V00 V04}
Var=Reg beg of BB09: none
Var=Reg end of BB09: none

BB10
use def in out
{}
{}
{V00 V04}
{V00 V04}
Var=Reg beg of BB10: none
Var=Reg end of BB10: none

BB11
use def in out
{V04}
{}
{V00 V04}
{V00}
Var=Reg beg of BB11: none
Var=Reg end of BB11: none

BB12
use def in out
{}
{}
{V00}
{V00}
Var=Reg beg of BB12: none
Var=Reg end of BB12: none

BB13
use def in out
{}
{}
{V00 V04}
{V00 V04}
Var=Reg beg of BB13: none
Var=Reg end of BB13: none

BB14
use def in out
{}
{}
{V00}
{V00}
Var=Reg beg of BB14: none
Var=Reg end of BB14: none

BB15
use def in out
{}
{V24}
{V00}
{V00}
Var=Reg beg of BB15: none
Var=Reg end of BB15: none

BB19
use def in out
{}
{}
{V00}
{V00}
Var=Reg beg of BB19: none
Var=Reg end of BB19: none

BB20
use def in out
{}
{}
{V00}
{V00}
Var=Reg beg of BB20: none
Var=Reg end of BB20: none

BB21
use def in out
{}
{}
{V00}
{V00}
Var=Reg beg of BB21: none
Var=Reg end of BB21: none

BB22
use def in out
{}
{}
{V00}
{V00}
Var=Reg beg of BB22: none
Var=Reg end of BB22: none

BB23
use def in out
{}
{}
{V00}
{V00}
Var=Reg beg of BB23: none
Var=Reg end of BB23: none

BB24
use def in out
{V00}
{}
{V00}
{V00}
Var=Reg beg of BB24: none
Var=Reg end of BB24: V00=rdx 

BB25
use def in out
{}
{}
{V00}
{V00}
Var=Reg beg of BB25: none
Var=Reg end of BB25: none

BB26
use def in out
{V00}
{}
{V00}
{}
Var=Reg beg of BB26: none
Var=Reg end of BB26: none

BB27  EH flow in
use def in out
{}
{}
{V04}
{V04}
Var=Reg beg of BB27: none
Var=Reg end of BB27: none

BB28
use def in out
{V04}
{}
{V04}
{}
Var=Reg beg of BB28: none
Var=Reg end of BB28: none

BB29  EH flow out
use def in out
{}
{}
{}
{}
Var=Reg beg of BB29: none
Var=Reg end of BB29: none

BB30  EH flow in
use def in out
{}
{}
{V00 V04}
{V00 V04}
Var=Reg beg of BB30: none
Var=Reg end of BB30: none

BB31
use def in out
{V04}
{}
{V00 V04}
{V00}
Var=Reg beg of BB31: none
Var=Reg end of BB31: none

BB32  EH flow out
use def in out
{}
{}
{V00}
{V00}
Var=Reg beg of BB32: none
Var=Reg end of BB32: none


RESOLVING EDGES
   BB24 bottom: move V00 from rdx to STK (EH DUMMY)

  Set V00 argument initial register to STK
Trees after linear scan register allocator (LSRA)

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..072)                                     i hascall gcsafe newobj LIR 
BB02 [0001]  2       BB01,BB06             8     0 [072..07B)                                     i Loop gcsafe bwd bwd-target LIR 
BB03 [0002]  1  0    BB02                  8     0 [07B..0CA)                 T0      try { }     keep i try hascall gcsafe newobj bwd LIR 
BB04 [0038]  1       BB03                  8     0 [0CA..0CD)-> BB06 ( cond )                     keep i gcsafe bwd LIR cfb 
BB05 [0039]  1       BB04                  4     0 [0CD..0D4)                                     i hascall gcsafe bwd LIR 
BB06 [0006]  2       BB04,BB05             8     0 [0D4..0DD)-> BB02 ( cond )                     i gcsafe bwd LIR 
BB07 [0008]  1       BB06                  1       [0DD..0F9)                                     i hascall gcsafe LIR 
BB08 [0009]  2       BB07,BB12             8     1 [0F9..102)                                     i Loop gcsafe bwd bwd-target LIR 
BB09 [0010]  1  1    BB08                  8     1 [102..122)-> BB13 ( cond ) T1      try { }     keep i try hascall gcsafe bwd LIR 
BB10 [0041]  1       BB09                  8     1 [126..129)-> BB12 ( cond )                     keep i gcsafe bwd LIR cfb 
BB11 [0042]  1       BB10                  4     1 [129..130)                                     i hascall gcsafe bwd LIR 
BB12 [0016]  2       BB10,BB11             8     1 [130..139)-> BB08 (always)                     i hascall gcsafe bwd LIR 
BB13 [0030]  1       BB09                  1       [???..???)-> BB30 (callf )                     i internal gcsafe LIR 
BB14 [0031]  1       BB32                  1       [???..???)-> BB15 (ALWAYS)                     i internal gcsafe LIR KEEP 
BB15 [0017]  1       BB14                  1       [139..17D)                                     i hascall gcsafe LIR 
BB19 [0018]  5       BB15,BB20,BB22,BB24,BB25   8     5 [17D..18F)-> BB21 ( cond )                     i Loop hascall gcsafe bwd bwd-target LIR 
BB20 [0019]  1       BB19                  8     5 [18F..19B)-> BB19 (always)                     i hascall gcsafe bwd LIR 
BB21 [0020]  1       BB19                  1     4 [19B..1A6)-> BB23 ( cond )                     i gcsafe bwd LIR 
BB22 [0021]  1       BB21                  1     4 [1A6..1AD)-> BB19 (always)                     i hascall gcsafe bwd LIR 
BB23 [0022]  1       BB21                  1     3 [1AD..1B8)-> BB25 ( cond )                     i gcsafe bwd LIR 
BB24 [0023]  1       BB23                  1     3 [1B8..1C1)-> BB19 (always)                     i gcsafe bwd LIR 
BB25 [0024]  1       BB23                  1     2 [1C1..1CC)-> BB19 ( cond )                     i gcsafe bwd LIR 
BB26 [0025]  1       BB25                  1       [1CC..1D4)        (return)                     i gcsafe LIR 
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ funclets follow
BB27 [0003]  1     0                       0       [0CA..0CD)-> BB29 ( cond )    H0 F fault {     keep i rare flet bwd LIR 
BB28 [0004]  1     0 BB27                  0       [0CD..0D3)                    H0               i rare hascall bwd LIR 
BB29 [0005]  2     0 BB27,BB28             0       [0D3..0D4)        (finret)    H0   }           i rare bwd LIR 
BB30 [0013]  2     1 BB13                  1       [126..129)-> BB32 ( cond )    H1 F finally {   keep i gcsafe flet bwd LIR 
BB31 [0014]  1     1 BB30                  1       [129..12F)                    H1               i hascall gcsafe bwd LIR 
BB32 [0015]  2     1 BB30,BB31             1       [12F..130)        (finret)    H1   }           i gcsafe bwd LIR 
-----------------------------------------------------------------------------------------------------------------------------------------

------------ BB01 [000..072), preds={} succs={BB02}
N003 (???,???) [000425] ------------                 IL_OFFSET void   IL offset: 0x0 REG NA
N005 ( 14,  5) [000000] --CXG-------         t0 =    CALL      long   System.DateTime.get_Now REG rax $c0
                                                  /--*  t0     long   
N007 ( 18,  8) [000003] DA-XG-------              *  STORE_LCL_VAR struct<System.DateTime, 8>(AX)(P) V02 loc0          NA
                                                  *    long   V02._dateData (offs=0x00) -> V17 tmp10         REG NA
N009 (???,???) [000426] ------------                 IL_OFFSET void   IL offset: 0x6 REG NA
N011 (  3,  2) [000004] -------N----         t4 =    LCL_VAR_ADDR byref  V02 loc0          rcx
                                                  *    long   V02._dateData (offs=0x00) -> V17 tmp10         REG rcx
                                                  /--*  t4     byref  
N013 (???,???) [000478] ------------       t478 = *  PUTARG_REG byref  REG rcx
                                                  /--*  t478   byref  this in rcx
N015 ( 17, 10) [000006] --CXG-------         t6 = *  CALL      ref    System.DateTime.ToString REG rax $84
                                                  /--*  t6     ref    
N017 ( 17, 10) [000272] DA-XG-----L-              *  STORE_LCL_VAR ref    V21 tmp14        d:2 rcx REG rcx
N019 (  1,  1) [000273] ------------       t273 =    LCL_VAR   ref    V21 tmp14        u:2 rcx (last use) REG rcx $84
                                                  /--*  t273   ref    
N021 (???,???) [000479] ------------       t479 = *  PUTARG_REG ref    REG rcx
N023 (  2, 10) [000269] H-----------       t269 =    CNS_INT(h) long   0x750031F0 "	 Created list" REG rdx $1c0
                                                  /--*  t269   long   
N025 (  4, 12) [000270] #---G-------       t270 = *  IND       ref    REG rdx $88
                                                  /--*  t270   ref    
N027 (???,???) [000480] ----G-------       t480 = *  PUTARG_REG ref    REG rdx
                                                  /--*  t479   ref    arg0 in rcx
                                                  +--*  t480   ref    arg1 in rdx
N029 ( 39, 30) [000008] --CXG-------         t8 = *  CALL      ref    System.String.Concat REG rax $89
                                                  /--*  t8     ref    
               [000526] --CXG-------       t526 = *  COPY      ref    REG rcx
                                                  /--*  t526   ref    
N031 (???,???) [000481] --CXG-------       t481 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t481   ref    arg0 in rcx
N033 ( 53, 36) [000009] --CXG-------              *  CALL      void   System.Console.WriteLine REG NA $VN.Void
N035 (???,???) [000427] ------------                 IL_OFFSET void   IL offset: 0x1c REG NA
N037 (  2, 10) [000011] H-----------        t11 =    CNS_INT(h) long   0x7ffdb3ee2350 method REG rcx $1c1
                                                  /--*  t11    long   
N039 (???,???) [000482] ------------       t482 = *  PUTARG_REG long   REG rcx
                                                  /--*  t482   long   arg0 in rcx
N041 ( 16, 16) [000012] --C---------        t12 = *  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST REG rax $240
                                                  /--*  t12    ref    
N043 ( 16, 16) [000014] DA----------              *  STORE_LCL_VAR ref    V08 tmp1         d:2 rsi REG rsi
N045 (  1,  1) [000015] ------------        t15 =    LCL_VAR   ref    V08 tmp1         u:2 rsi REG rsi $240
                                                  /--*  t15    ref    
N047 (???,???) [000483] ------------       t483 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t483   ref    this in rcx
N049 ( 15,  8) [000016] --CXG-------              *  CALL      void   FalseLeakRepro.List..ctor REG NA $VN.Void
N051 (???,???) [000428] ------------                 IL_OFFSET void   IL offset: 0x22 REG NA
N053 (  1,  1) [000010] -----------z        t10 =    LCL_VAR   ref    V00 this         u:1 rdx REG rdx $80
                                                  /--*  t10    ref    
N055 (  2,  2) [000279] ------------       t279 = *  LEA(b+8)  byref  REG rcx
N057 (  1,  1) [000017] ------------        t17 =    LCL_VAR   ref    V08 tmp1         u:2 rsi (last use) REG rsi $240
                                                  /--*  t279   byref  
                                                  +--*  t17    ref    
N059 (???,???) [000429] -A-XG-------              *  STOREIND  ref    REG NA
N061 (???,???) [000430] ------------                 IL_OFFSET void   IL offset: 0x27 REG NA
N063 (  2, 10) [000023] H-----------        t23 =    CNS_INT(h) long   0x7ffdb3b058b8 token REG rcx $1c3
                                                  /--*  t23    long   
N065 (???,???) [000484] ------------       t484 = *  PUTARG_REG long   REG rcx
                                                  /--*  t484   long   arg0 in rcx
N067 ( 16, 16) [000024] --C---------        t24 = *  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST REG rax $243
                                                  /--*  t24    ref    
N069 ( 16, 16) [000026] DA----------              *  STORE_LCL_VAR ref    V09 tmp2         d:2 rsi REG rsi
N071 (  1,  1) [000020] -----------z        t20 =    LCL_VAR   ref    V00 this         u:1 rdx REG rdx $80
                                                  /--*  t20    ref    
N073 (  2,  2) [000284] -c----------       t284 = *  LEA(b+8)  byref  REG NA
                                                  /--*  t284   byref  
N075 (  4,  4) [000021] n---GO------        t21 = *  IND       ref    REG rcx <l:$246, c:$245>
                                                  /--*  t21    ref    
N077 (  5,  5) [000282] -c----------       t282 = *  LEA(b+8)  byref  REG NA
                                                  /--*  t282   byref  
N079 (  7,  7) [000022] ---XGO------        t22 = *  IND       ref    REG rdi <l:$250, c:$24f>
                                                  /--*  t22    ref    
N081 (  7,  7) [000030] DA-XGO------              *  STORE_LCL_VAR ref    V10 tmp3         d:2 rdi REG rdi
N083 (  1,  1) [000027] ------------        t27 =    LCL_VAR   ref    V09 tmp2         u:2 rsi REG rsi $243
                                                  /--*  t27    ref    
N085 (???,???) [000485] ------------       t485 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t485   ref    this in rcx
N087 ( 15,  8) [000028] --CXG-------              *  CALL      void   System.Object..ctor REG NA $VN.Void
N089 (???,???) [000431] ------------                 IL_OFFSET void   IL offset: 0x37 REG NA
N091 (  1,  1) [000031] ------------        t31 =    LCL_VAR   ref    V10 tmp3         u:2 rdi (last use) REG rdi <l:$248, c:$94>
                                                  /--*  t31    ref    
N093 (  2,  2) [000287] ------------       t287 = *  LEA(b+16) byref  REG rcx
N095 (  1,  1) [000032] ------------        t32 =    LCL_VAR   ref    V09 tmp2         u:2 rsi (last use) REG rsi $243
                                                  /--*  t287   byref  
                                                  +--*  t32    ref    
N097 (???,???) [000432] -A-XG-------              *  STOREIND  ref    REG NA
N099 (???,???) [000433] ------------                 IL_OFFSET void   IL offset: 0x3c REG NA
N101 (  2, 10) [000037] H-----------        t37 =    CNS_INT(h) long   0x7ffdb3ee6200 token REG rcx $1c6
                                                  /--*  t37    long   
N103 (???,???) [000486] ------------       t486 = *  PUTARG_REG long   REG rcx
                                                  /--*  t486   long   arg0 in rcx
N105 ( 16, 16) [000038] --C---------        t38 = *  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST REG rax $253
                                                  /--*  t38    ref    
N107 ( 16, 16) [000040] DA----------              *  STORE_LCL_VAR ref    V11 tmp4         d:2 rsi REG rsi
N109 (  1,  1) [000041] ------------        t41 =    LCL_VAR   ref    V11 tmp4         u:2 rsi REG rsi $253
                                                  /--*  t41    ref    
N111 (???,???) [000487] ------------       t487 = *  PUTARG_REG ref    REG rcx
N113 (  1,  1) [000035] -----------z        t35 =    LCL_VAR   ref    V00 this         u:1 rdx REG rdx $80
                                                  /--*  t35    ref    
N115 (???,???) [000488] ------------       t488 = *  PUTARG_REG ref    REG rdx
N117 (  2, 10) [000036] H-----------        t36 =    CNS_INT(h) long   0x7ffdb3b213f8 ftn REG r8 $1c7
                                                  /--*  t36    long   
N119 (???,???) [000489] ------------       t489 = *  PUTARG_REG long   REG r8
                                                  /--*  t487   ref    this in rcx
                                                  +--*  t488   ref    arg1 in rdx
                                                  +--*  t489   long   arg2 in r8
N121 ( 18, 21) [000042] --CXG-------              *  CALL      void   System.MulticastDelegate.CtorClosed REG NA $VN.Void
N123 (???,???) [000434] ------------                 IL_OFFSET void   IL offset: 0x48 REG NA
N125 (  2, 10) [000044] H-----------        t44 =    CNS_INT(h) long   0x7ffdb3c84e80 token REG rcx $1c8
                                                  /--*  t44    long   
N127 (???,???) [000490] ------------       t490 = *  PUTARG_REG long   REG rcx
                                                  /--*  t490   long   arg0 in rcx
N129 ( 16, 16) [000045] --C---------        t45 = *  CALL help ref    HELPER.CORINFO_HELP_NEWFAST REG rax $254
                                                  /--*  t45    ref    
N131 ( 16, 16) [000047] DA----------              *  STORE_LCL_VAR ref    V12 tmp5         d:2 rdi REG rdi
N133 (  1,  1) [000048] ------------        t48 =    LCL_VAR   ref    V12 tmp5         u:2 rdi REG rdi $254
                                                  /--*  t48    ref    
N135 (???,???) [000491] ------------       t491 = *  PUTARG_REG ref    REG rcx
N137 (  1,  1) [000043] ------------        t43 =    LCL_VAR   ref    V11 tmp4         u:2 rsi (last use) REG rsi $253
                                                  /--*  t43    ref    
N139 (???,???) [000492] ------------       t492 = *  PUTARG_REG ref    REG rdx
                                                  /--*  t491   ref    this in rcx
                                                  +--*  t492   ref    arg1 in rdx
N141 ( 16, 10) [000049] --CXG-------              *  CALL      void   System.Threading.Thread..ctor REG NA $VN.Void
N143 (???,???) [000435] ------------                 IL_OFFSET void   IL offset: 0x4d REG NA
N145 (  1,  1) [000050] ------------        t50 =    LCL_VAR   ref    V12 tmp5         u:2 rdi (last use) REG rdi $254
                                                  /--*  t50    ref    
N147 (???,???) [000493] ------------       t493 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t493   ref    this in rcx
N149 ( 15,  8) [000051] --CXG-------              *  CALL      void   System.Threading.Thread.Start REG NA $VN.Void
N151 (???,???) [000436] ------------                 IL_OFFSET void   IL offset: 0x52 REG NA
N153 ( 14,  5) [000052] --CXG-------        t52 =    CALL      long   System.DateTime.get_Now REG rax $c2
                                                  /--*  t52    long   
N155 ( 18,  8) [000055] DA-XG-------              *  STORE_LCL_VAR struct<System.DateTime, 8>(AX)(P) V02 loc0          NA
                                                  *    long   V02._dateData (offs=0x00) -> V17 tmp10         REG NA
N157 (???,???) [000437] ------------                 IL_OFFSET void   IL offset: 0x58 REG NA
N159 (  3,  2) [000056] -------N----        t56 =    LCL_VAR_ADDR byref  V02 loc0          rcx
                                                  *    long   V02._dateData (offs=0x00) -> V17 tmp10         REG rcx
                                                  /--*  t56    byref  
N161 (???,???) [000494] ------------       t494 = *  PUTARG_REG byref  REG rcx
                                                  /--*  t494   byref  this in rcx
N163 ( 17, 10) [000058] --CXG-------        t58 = *  CALL      ref    System.DateTime.ToString REG rax $a8
                                                  /--*  t58    ref    
N165 ( 17, 10) [000300] DA-XG-----L-              *  STORE_LCL_VAR ref    V22 tmp15        d:2 rcx REG rcx
N167 (  1,  1) [000301] ------------       t301 =    LCL_VAR   ref    V22 tmp15        u:2 rcx (last use) REG rcx $a8
                                                  /--*  t301   ref    
N169 (???,???) [000495] ------------       t495 = *  PUTARG_REG ref    REG rcx
N171 (  2, 10) [000297] H-----------       t297 =    CNS_INT(h) long   0x750031F8 "	 Consumer thread started, adding items..." REG rdx $1c9
                                                  /--*  t297   long   
N173 (  4, 12) [000298] #---G-------       t298 = *  IND       ref    REG rdx $ac
                                                  /--*  t298   ref    
N175 (???,???) [000496] ----G-------       t496 = *  PUTARG_REG ref    REG rdx
                                                  /--*  t495   ref    arg0 in rcx
                                                  +--*  t496   ref    arg1 in rdx
N177 ( 39, 30) [000060] --CXG-------        t60 = *  CALL      ref    System.String.Concat REG rax $ad
                                                  /--*  t60    ref    
               [000527] --CXG-------       t527 = *  COPY      ref    REG rcx
                                                  /--*  t527   ref    
N179 (???,???) [000497] --CXG-------       t497 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t497   ref    arg0 in rcx
N181 ( 53, 36) [000061] --CXG-------              *  CALL      void   System.Console.WriteLine REG NA $VN.Void
N183 (???,???) [000438] ------------                 IL_OFFSET void   IL offset: 0x6e REG NA
N185 (  1,  1) [000062] ------------        t62 =    CNS_INT   int    0 REG rsi $40
                                                  /--*  t62    int    
N187 (  1,  3) [000064] DA----------              *  STORE_LCL_VAR int    V03 loc1         d:2 rsi REG rsi

------------ BB02 [072..07B), preds={BB01,BB06} succs={BB03}
N191 (???,???) [000439] ------------                 IL_OFFSET void   IL offset: 0x72 REG NA
N193 (  1,  1) [000069] -----------z        t69 =    LCL_VAR   ref    V00 this         u:1 rdx REG rdx $80
                                                  /--*  t69    ref    
N195 (  2,  2) [000305] -c----------       t305 = *  LEA(b+8)  byref  REG NA
                                                  /--*  t305   byref  
N197 (  4,  4) [000070] n---GO------        t70 = *  IND       ref    REG rcx <l:$258, c:$257>
                                                  /--*  t70    ref    
N199 (  8,  7) [000072] DA--GO------              *  STORE_LCL_VAR ref    V04 loc2         d:3 NA REG NA
N201 (???,???) [000440] ------------                 IL_OFFSET void   IL offset: 0x79 REG NA
N203 (  1,  1) [000073] ------------        t73 =    CNS_INT   int    0 REG rcx $40
                                                  /--*  t73    int    
N205 (  5,  4) [000075] DA--G-------              *  STORE_LCL_VAR int   (AX) V05 loc3          NA REG NA

------------ BB03 [07B..0CA), preds={BB02} succs={BB04}
N209 (???,???) [000441] ------------                 IL_OFFSET void   IL offset: 0x7b REG NA
N211 (  3,  3) [000078] ------------        t78 =    LCL_VAR_ADDR long   V05 loc3          rdx REG rdx $206
                                                  /--*  t78    long   
N213 (???,???) [000498] ------------       t498 = *  PUTARG_REG long   REG rdx
N215 (  1,  1) [000076] ------------        t76 =    LCL_VAR   ref    V04 loc2         u:3 rcx REG rcx <l:$256, c:$b2>
                                                  /--*  t76    ref    
N217 (???,???) [000499] ------------       t499 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t498   long   arg1 in rdx
                                                  +--*  t499   ref    arg0 in rcx
N219 ( 18, 11) [000079] --CXG-------              *  CALL      void   System.Threading.Monitor.Enter REG NA $VN.Void
N221 (???,???) [000442] ------------                 IL_OFFSET void   IL offset: 0x83 REG NA
N223 (  2, 10) [000083] H-----------        t83 =    CNS_INT(h) long   0x7ffdb3ee58a8 method REG rcx $1ca
                                                  /--*  t83    long   
N225 (???,???) [000500] ------------       t500 = *  PUTARG_REG long   REG rcx
                                                  /--*  t500   long   arg0 in rcx
N227 ( 16, 16) [000084] --C---------        t84 = *  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST REG rax $259
                                                  /--*  t84    ref    
N229 ( 16, 16) [000086] DA----------              *  STORE_LCL_VAR ref    V13 tmp6         d:2 rdi REG rdi
N231 (  1,  1) [000080] -----------z        t80 =    LCL_VAR   ref    V00 this         u:1 rdx REG rdx $80
                                                  /--*  t80    ref    
N233 (  2,  2) [000312] -c----------       t312 = *  LEA(b+8)  byref  REG NA
                                                  /--*  t312   byref  
N235 (  4,  4) [000081] n---GO------        t81 = *  IND       ref    REG rcx <l:$25d, c:$25c>
                                                  /--*  t81    ref    
N237 (  5,  5) [000310] -c----------       t310 = *  LEA(b+8)  byref  REG NA
                                                  /--*  t310   byref  
N239 (  7,  7) [000082] ---XGO------        t82 = *  IND       ref    REG rbx <l:$267, c:$266>
                                                  /--*  t82    ref    
N241 (  7,  7) [000090] DA-XGO------              *  STORE_LCL_VAR ref    V14 tmp7         d:2 rbx REG rbx
N243 (  1,  1) [000087] ------------        t87 =    LCL_VAR   ref    V13 tmp6         u:2 rdi REG rdi $259
                                                  /--*  t87    ref    
N245 (???,???) [000501] ------------       t501 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t501   ref    this in rcx
N247 ( 15,  8) [000230] --CXG-------              *  CALL      void   System.Object..ctor REG NA $VN.Void
N249 (???,???) [000443] ------------                 IL_OFFSET void   IL offset: 0x93 REG NA
N251 (  1,  1) [000091] ------------        t91 =    LCL_VAR   ref    V14 tmp7         u:2 rbx (last use) REG rbx <l:$25f, c:$b9>
                                                  /--*  t91    ref    
N253 (  2,  2) [000315] ------------       t315 = *  LEA(b+8)  byref  REG rcx
N255 (  1,  1) [000092] ------------        t92 =    LCL_VAR   ref    V13 tmp6         u:2 rdi (last use) REG rdi $259
                                                  /--*  t315   byref  
                                                  +--*  t92    ref    
N257 (???,???) [000444] -A-XG-------              *  STOREIND  ref    REG NA
N259 (???,???) [000445] ------------                 IL_OFFSET void   IL offset: 0x98 REG NA
N261 (  1,  1) [000095] -----------z        t95 =    LCL_VAR   ref    V00 this         u:1 rdx REG rdx $80
                                                  /--*  t95    ref    
N263 (  2,  2) [000319] -c----------       t319 = *  LEA(b+8)  byref  REG NA
                                                  /--*  t319   byref  
N265 (  4,  4) [000096] n---GO------        t96 = *  IND       ref    REG rcx <l:$26d, c:$26c>
                                                  /--*  t96    ref    
N267 (  4,  4) [000414] DA--GO-----z              *  STORE_LCL_VAR ref    V28 cse1         d:1 rcx REG rcx
N269 (  1,  1) [000415] -----------Z       t415 =    LCL_VAR   ref    V28 cse1         u:1 rcx REG rcx <l:$26d, c:$26c>
                                                  /--*  t415   ref    
N271 (  6,  6) [000317] ------------       t317 = *  LEA(b+8)  byref  REG rcx
N273 (  1,  1) [000417] -----------z       t417 =    LCL_VAR   ref    V28 cse1         u:1 rax (last use) REG rax <l:$26b, c:$bf>
                                                  /--*  t417   ref    
N275 (  2,  2) [000323] -c----------       t323 = *  LEA(b+8)  byref  REG NA
                                                  /--*  t323   byref  
N277 (  4,  4) [000099] ---XG-------        t99 = *  IND       ref    REG rax <l:$278, c:$277>
                                                  /--*  t99    ref    
N279 (  5,  5) [000321] -c----------       t321 = *  LEA(b+8)  byref  REG NA
                                                  /--*  t321   byref  
N281 (  7,  7) [000100] ---XG-------       t100 = *  IND       ref    REG rdi <l:$403, c:$402>
                                                  /--*  t100   ref    
N283 (  7,  7) [000409] DA-XG-------              *  STORE_LCL_VAR ref    V27 cse0         d:1 rdi REG rdi
N285 (  1,  1) [000410] ------------       t410 =    LCL_VAR   ref    V27 cse0         u:1 rdi REG rdi <l:$403, c:$402>
                                                  /--*  t317   byref  
                                                  +--*  t410   ref    
N287 (???,???) [000446] -A-XGO------              *  STOREIND  ref    REG NA
N289 (???,???) [000447] ------------                 IL_OFFSET void   IL offset: 0xb3 REG NA
N291 (  2, 10) [000106] H-----------       t106 =    CNS_INT(h) long   0x7ffdb3b058b8 token REG rcx $1c3
                                                  /--*  t106   long   
N293 (???,???) [000502] ------------       t502 = *  PUTARG_REG long   REG rcx
                                                  /--*  t502   long   arg0 in rcx
N295 ( 16, 16) [000107] --C---------       t107 = *  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST REG rax $404
                                                  /--*  t107   ref    
N297 ( 16, 16) [000109] DA----------              *  STORE_LCL_VAR ref    V15 tmp8         d:2 rbx REG rbx
N299 (  1,  1) [000412] ------------       t412 =    LCL_VAR   ref    V27 cse0         u:1 rdi (last use) REG rdi <l:$279, c:$3c4>
                                                  /--*  t412   ref    
N301 (  1,  3) [000113] DA--G-------              *  STORE_LCL_VAR ref    V16 tmp9         d:2 rdi REG rdi
N303 (  1,  1) [000110] ------------       t110 =    LCL_VAR   ref    V15 tmp8         u:2 rbx REG rbx $404
                                                  /--*  t110   ref    
N305 (???,???) [000503] ------------       t503 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t503   ref    this in rcx
N307 ( 15,  8) [000111] --CXG-------              *  CALL      void   System.Object..ctor REG NA $VN.Void
N309 (???,???) [000448] ------------                 IL_OFFSET void   IL offset: 0xc3 REG NA
N311 (  1,  1) [000114] ------------       t114 =    LCL_VAR   ref    V16 tmp9         u:2 rdi (last use) REG rdi <l:$279, c:$3ca>
                                                  /--*  t114   ref    
N313 (  2,  2) [000333] ------------       t333 = *  LEA(b+16) byref  REG rcx
N315 (  1,  1) [000115] ------------       t115 =    LCL_VAR   ref    V15 tmp8         u:2 rbx (last use) REG rbx $404
                                                  /--*  t333   byref  
                                                  +--*  t115   ref    
N317 (???,???) [000449] -A-XG-------              *  STOREIND  ref    REG NA

------------ BB04 [0CA..0CD) -> BB06 (cond), preds={BB03} succs={BB05,BB06}
N321 (  3,  2) [000256] -c----------       t256 =    LCL_VAR   bool  (AX) V05 loc3          NA REG NA $382
N323 (  1,  1) [000257] -c----------       t257 =    CNS_INT   bool   0 REG NA $40
                                                  /--*  t256   bool   
                                                  +--*  t257   bool   
N325 (  6,  6) [000255] J---G--N-U--              *  EQ        void   REG NA $344
N327 (  8,  8) [000254] ----G-------              *  JTRUE     void   REG NA

------------ BB05 [0CD..0D4), preds={BB04} succs={BB06}
N331 (  1,  1) [000259] ------------       t259 =    LCL_VAR   ref    V04 loc2         u:3 rcx (last use) REG rcx <l:$256, c:$b2>
                                                  /--*  t259   ref    
N333 (???,???) [000504] ------------       t504 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t504   ref    arg0 in rcx
N335 ( 15,  7) [000258] --CXG-------              *  CALL      void   System.Threading.Monitor.Exit REG NA $VN.Void

------------ BB06 [0D4..0DD) -> BB02 (cond), preds={BB04,BB05} succs={BB07,BB02}
N339 (???,???) [000450] ------------                 IL_OFFSET void   IL offset: 0xd4 REG NA
N341 (  1,  1) [000118] ------------       t118 =    LCL_VAR   int    V03 loc1         u:3 rsi (last use) REG rsi $380
N343 (  1,  1) [000119] -c----------       t119 =    CNS_INT   int    1 REG NA $4e
                                                  /--*  t118   int    
                                                  +--*  t119   int    
N345 (  3,  3) [000120] ------------       t120 = *  ADD       int    REG rsi $345
                                                  /--*  t120   int    
N347 (  3,  3) [000122] DA----------              *  STORE_LCL_VAR int    V03 loc1         d:4 rsi REG rsi
N349 (???,???) [000451] ------------                 IL_OFFSET void   IL offset: 0xd8 REG NA
N351 (  1,  1) [000065] ------------        t65 =    LCL_VAR   int    V03 loc1         u:4 rsi REG rsi $345
N353 (  1,  1) [000066] -c----------        t66 =    CNS_INT   int    10 REG NA $43
                                                  /--*  t65    int    
                                                  +--*  t66    int    
N355 (  3,  3) [000067] J------N----              *  LT        void   REG NA $346
N357 (  5,  5) [000068] ------------              *  JTRUE     void   REG NA

------------ BB07 [0DD..0F9), preds={BB06} succs={BB08}
N361 (???,???) [000452] ------------                 IL_OFFSET void   IL offset: 0xdd REG NA
N363 ( 14,  5) [000130] --CXG-------       t130 =    CALL      long   System.DateTime.get_Now REG rax $c4
                                                  /--*  t130   long   
N365 ( 18,  8) [000133] DA-XG-------              *  STORE_LCL_VAR struct<System.DateTime, 8>(AX)(P) V02 loc0          NA
                                                  *    long   V02._dateData (offs=0x00) -> V17 tmp10         REG NA
N367 (???,???) [000453] ------------                 IL_OFFSET void   IL offset: 0xe3 REG NA
N369 (  3,  2) [000134] -------N----       t134 =    LCL_VAR_ADDR byref  V02 loc0          rcx
                                                  *    long   V02._dateData (offs=0x00) -> V17 tmp10         REG rcx
                                                  /--*  t134   byref  
N371 (???,???) [000505] ------------       t505 = *  PUTARG_REG byref  REG rcx
                                                  /--*  t505   byref  this in rcx
N373 ( 17, 10) [000136] --CXG-------       t136 = *  CALL      ref    System.DateTime.ToString REG rax $3d5
                                                  /--*  t136   ref    
N375 ( 17, 10) [000342] DA-XG-----L-              *  STORE_LCL_VAR ref    V23 tmp16        d:2 rcx REG rcx
N377 (  1,  1) [000343] ------------       t343 =    LCL_VAR   ref    V23 tmp16        u:2 rcx (last use) REG rcx $3d5
                                                  /--*  t343   ref    
N379 (???,???) [000506] ------------       t506 = *  PUTARG_REG ref    REG rcx
N381 (  2, 10) [000339] H-----------       t339 =    CNS_INT(h) long   0x75003200 "	 Waiting for list processing to complete..." REG rdx $1cf
                                                  /--*  t339   long   
N383 (  4, 12) [000340] #---G-------       t340 = *  IND       ref    REG rdx $3d9
                                                  /--*  t340   ref    
N385 (???,???) [000507] ----G-------       t507 = *  PUTARG_REG ref    REG rdx
                                                  /--*  t506   ref    arg0 in rcx
                                                  +--*  t507   ref    arg1 in rdx
N387 ( 39, 30) [000138] --CXG-------       t138 = *  CALL      ref    System.String.Concat REG rax $3da
                                                  /--*  t138   ref    
               [000528] --CXG-------       t528 = *  COPY      ref    REG rcx
                                                  /--*  t528   ref    
N389 (???,???) [000508] --CXG-------       t508 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t508   ref    arg0 in rcx
N391 ( 53, 36) [000139] --CXG-------              *  CALL      void   System.Console.WriteLine REG NA $VN.Void

------------ BB08 [0F9..102), preds={BB07,BB12} succs={BB09}
N395 (???,???) [000454] ------------                 IL_OFFSET void   IL offset: 0xf9 REG NA
N397 (  1,  1) [000140] -----------z       t140 =    LCL_VAR   ref    V00 this         u:1 rdx REG rdx $80
                                                  /--*  t140   ref    
N399 (  2,  2) [000347] -c----------       t347 = *  LEA(b+8)  byref  REG NA
                                                  /--*  t347   byref  
N401 (  4,  4) [000141] n---GO------       t141 = *  IND       ref    REG rcx <l:$41c, c:$41b>
                                                  /--*  t141   ref    
N403 (  8,  7) [000143] DA--GO------              *  STORE_LCL_VAR ref    V04 loc2         d:2 NA REG NA
N405 (???,???) [000455] ------------                 IL_OFFSET void   IL offset: 0x100 REG NA
N407 (  1,  1) [000144] ------------       t144 =    CNS_INT   int    0 REG rcx $40
                                                  /--*  t144   int    
N409 (  5,  4) [000146] DA--G-------              *  STORE_LCL_VAR int   (AX) V05 loc3          NA REG NA

------------ BB09 [102..122) -> BB13 (cond), preds={BB08} succs={BB10,BB13}
N413 (???,???) [000456] ------------                 IL_OFFSET void   IL offset: 0x102 REG NA
N415 (  3,  3) [000149] ------------       t149 =    LCL_VAR_ADDR long   V05 loc3          rdx REG rdx $20a
                                                  /--*  t149   long   
N417 (???,???) [000509] ------------       t509 = *  PUTARG_REG long   REG rdx
N419 (  1,  1) [000147] ------------       t147 =    LCL_VAR   ref    V04 loc2         u:2 rcx REG rcx <l:$41a, c:$3df>
                                                  /--*  t147   ref    
N421 (???,???) [000510] ------------       t510 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t509   long   arg1 in rdx
                                                  +--*  t510   ref    arg0 in rcx
N423 ( 18, 11) [000150] --CXG-------              *  CALL      void   System.Threading.Monitor.Enter REG NA $VN.Void
N425 (???,???) [000457] ------------                 IL_OFFSET void   IL offset: 0x10a REG NA
N427 (  1,  1) [000151] -----------z       t151 =    LCL_VAR   ref    V00 this         u:1 rdx REG rdx $80
                                                  /--*  t151   ref    
N429 (  2,  2) [000353] -c----------       t353 = *  LEA(b+8)  byref  REG NA
                                                  /--*  t353   byref  
N431 (  4,  4) [000152] n---GO------       t152 = *  IND       ref    REG rcx <l:$420, c:$41f>
                                                  /--*  t152   ref    
N433 (  4,  4) [000419] DA--GO------              *  STORE_LCL_VAR ref    V29 cse2         d:1 rcx REG rcx
N435 (  1,  1) [000420] ------------       t420 =    LCL_VAR   ref    V29 cse2         u:1 rcx REG rcx <l:$420, c:$41f>
                                                  /--*  t420   ref    
N437 (  6,  6) [000351] -c----------       t351 = *  LEA(b+8)  byref  REG NA
                                                  /--*  t351   byref  
N439 (  8,  8) [000153] ---XGO------       t153 = *  IND       ref    REG rax <l:$42a, c:$429>
N441 (  1,  1) [000422] ------------       t422 =    LCL_VAR   ref    V29 cse2         u:1 rcx (last use) REG rcx <l:$41e, c:$3e3>
                                                  /--*  t422   ref    
N443 (  2,  2) [000355] -c----------       t355 = *  LEA(b+16) byref  REG NA
                                                  /--*  t355   byref  
N445 (  4,  4) [000156] -c-XG-------       t156 = *  IND       ref    REG NA <l:$435, c:$434>
                                                  /--*  t153   ref    
                                                  +--*  t156   ref    
N447 ( 13, 13) [000157] N--XGO-N-U--              *  EQ        void   REG NA <l:$34a, c:$349>
N449 ( 15, 15) [000158] ---XGO------              *  JTRUE     void   REG NA

------------ BB10 [126..129) -> BB12 (cond), preds={BB09} succs={BB11,BB12}
N453 (  3,  2) [000263] -c----------       t263 =    LCL_VAR   bool  (AX) V05 loc3          NA REG NA $384
N455 (  1,  1) [000264] -c----------       t264 =    CNS_INT   bool   0 REG NA $40
                                                  /--*  t263   bool   
                                                  +--*  t264   bool   
N457 (  6,  6) [000262] J---G--N-U--              *  EQ        void   REG NA $34e
N459 (  8,  8) [000261] ----G-------              *  JTRUE     void   REG NA

------------ BB11 [129..130), preds={BB10} succs={BB12}
N463 (  1,  1) [000266] ------------       t266 =    LCL_VAR   ref    V04 loc2         u:2 rcx (last use) REG rcx <l:$41a, c:$3df>
                                                  /--*  t266   ref    
N465 (???,???) [000511] ------------       t511 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t511   ref    arg0 in rcx
N467 ( 15,  7) [000265] --CXG-------              *  CALL      void   System.Threading.Monitor.Exit REG NA $VN.Void

------------ BB12 [130..139) -> BB08 (always), preds={BB10,BB11} succs={BB08}
N471 (???,???) [000458] ------------                 IL_OFFSET void   IL offset: 0x130 REG NA
N473 (  1,  1) [000159] ------------       t159 =    CNS_INT   int    100 REG rcx $5b
                                                  /--*  t159   int    
N475 (???,???) [000512] ------------       t512 = *  PUTARG_REG int    REG rcx
                                                  /--*  t512   int    arg0 in rcx
N477 ( 15,  7) [000160] --CXG-------              *  CALL      void   System.Threading.Thread.Sleep REG NA $VN.Void

------------ BB13 [???..???) -> BB30 (callf), preds={BB09} succs={BB30}

------------ BB14 [???..???) -> BB15 (ALWAYS), preds={BB32} succs={BB15}

------------ BB15 [139..17D), preds={BB14} succs={BB19}
N513 (???,???) [000459] ------------                 IL_OFFSET void   IL offset: 0x139 REG NA
N515 ( 14,  5) [000161] --CXG-------       t161 =    CALL      long   System.DateTime.get_Now REG rax $c6
                                                  /--*  t161   long   
N517 ( 18,  8) [000164] DA-XG-------              *  STORE_LCL_VAR struct<System.DateTime, 8>(AX)(P) V02 loc0          NA
                                                  *    long   V02._dateData (offs=0x00) -> V17 tmp10         REG NA
N519 (???,???) [000460] ------------                 IL_OFFSET void   IL offset: 0x13f REG NA
N521 (  3,  2) [000165] -------N----       t165 =    LCL_VAR_ADDR byref  V02 loc0          rcx
                                                  *    long   V02._dateData (offs=0x00) -> V17 tmp10         REG rcx
                                                  /--*  t165   byref  
N523 (???,???) [000513] ------------       t513 = *  PUTARG_REG byref  REG rcx
                                                  /--*  t513   byref  this in rcx
N525 ( 17, 10) [000167] --CXG-------       t167 = *  CALL      ref    System.DateTime.ToString REG rax $3ef
                                                  /--*  t167   ref    
N527 ( 17, 10) [000367] DA-XG-----L-              *  STORE_LCL_VAR ref    V24 tmp17        d:2 rcx REG rcx
N529 (  1,  1) [000368] ------------       t368 =    LCL_VAR   ref    V24 tmp17        u:2 rcx (last use) REG rcx $3ef
                                                  /--*  t368   ref    
N531 (???,???) [000514] ------------       t514 = *  PUTARG_REG ref    REG rcx
N533 (  2, 10) [000364] H-----------       t364 =    CNS_INT(h) long   0x75003208 "	 Done.  Profiler is active, available options:" REG rdx $1d3
                                                  /--*  t364   long   
N535 (  4, 12) [000365] #---G-------       t365 = *  IND       ref    REG rdx $3f3
                                                  /--*  t365   ref    
N537 (???,???) [000515] ----G-------       t515 = *  PUTARG_REG ref    REG rdx
                                                  /--*  t514   ref    arg0 in rcx
                                                  +--*  t515   ref    arg1 in rdx
N539 ( 39, 30) [000169] --CXG-------       t169 = *  CALL      ref    System.String.Concat REG rax $3f4
                                                  /--*  t169   ref    
               [000529] --CXG-------       t529 = *  COPY      ref    REG rcx
                                                  /--*  t529   ref    
N541 (???,???) [000516] --CXG-------       t516 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t516   ref    arg0 in rcx
N543 ( 53, 36) [000170] --CXG-------              *  CALL      void   System.Console.WriteLine REG NA $VN.Void
N545 (???,???) [000461] ------------                 IL_OFFSET void   IL offset: 0x155 REG NA
N547 (  2, 10) [000371] H-----------       t371 =    CNS_INT(h) long   0x75003210 "   Q = quit" REG rcx $1d4
                                                  /--*  t371   long   
N549 (  4, 12) [000372] #---G-------       t372 = *  IND       ref    REG rcx $3f8
                                                  /--*  t372   ref    
N551 (???,???) [000517] ----G-------       t517 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t517   ref    arg0 in rcx
N553 ( 18, 18) [000172] --CXG-------              *  CALL      void   System.Console.WriteLine REG NA $VN.Void
N555 (???,???) [000462] ------------                 IL_OFFSET void   IL offset: 0x15f REG NA
N557 (  2, 10) [000374] H-----------       t374 =    CNS_INT(h) long   0x75003218 "   H = heap snapshot" REG rcx $1d5
                                                  /--*  t374   long   
N559 (  4, 12) [000375] #---G-------       t375 = *  IND       ref    REG rcx $3fb
                                                  /--*  t375   ref    
N561 (???,???) [000518] ----G-------       t518 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t518   ref    arg0 in rcx
N563 ( 18, 18) [000174] --CXG-------              *  CALL      void   System.Console.WriteLine REG NA $VN.Void
N565 (???,???) [000463] ------------                 IL_OFFSET void   IL offset: 0x169 REG NA
N567 (  2, 10) [000377] H-----------       t377 =    CNS_INT(h) long   0x75003220 "   G = GC (max gen)" REG rcx $1d6
                                                  /--*  t377   long   
N569 (  4, 12) [000378] #---G-------       t378 = *  IND       ref    REG rcx $3fe
                                                  /--*  t378   ref    
N571 (???,???) [000519] ----G-------       t519 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t519   ref    arg0 in rcx
N573 ( 18, 18) [000176] --CXG-------              *  CALL      void   System.Console.WriteLine REG NA $VN.Void
N575 (???,???) [000464] ------------                 IL_OFFSET void   IL offset: 0x173 REG NA
N577 (  2, 10) [000380] H-----------       t380 =    CNS_INT(h) long   0x75003228 "   R = clear the running flag to stop the consumer thread" REG rcx $1d7
                                                  /--*  t380   long   
N579 (  4, 12) [000381] #---G-------       t381 = *  IND       ref    REG rcx $4c1
                                                  /--*  t381   ref    
N581 (???,???) [000520] ----G-------       t520 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t520   ref    arg0 in rcx
N583 ( 18, 18) [000178] --CXG-------              *  CALL      void   System.Console.WriteLine REG NA $VN.Void

------------ BB19 [17D..18F) -> BB21 (cond), preds={BB15,BB20,BB22,BB24,BB25} succs={BB20,BB21}
N587 (  3,  2) [000236] -------N----       t236 =    LCL_VAR_ADDR byref  V06 loc4          rcx
                                                  *    ushort V06._keyChar (offs=0x00) -> V18 tmp11        
                                                  *    int    V06._key (offs=0x04) -> V19 tmp12        
                                                  *    int    V06._mods (offs=0x08) -> V20 tmp13         REG rcx
                                                  /--*  t236   byref  
N589 (???,???) [000521] ------------       t521 = *  PUTARG_REG byref  REG rcx
N591 (  1,  1) [000232] ------------       t232 =    CNS_INT   int    0 REG rdx $40
                                                  /--*  t232   int    
N593 (???,???) [000522] ------------       t522 = *  PUTARG_REG int    REG rdx
                                                  /--*  t521   byref  arg0 in rcx
                                                  +--*  t522   int    arg1 in rdx
N595 ( 18, 11) [000233] S-CXG-------              *  CALL      void   System.ConsolePal.ReadKey REG NA $VN.Void
N597 (  3,  2) [000240] -c----------       t240 =    LCL_VAR   int   (AX) V19 tmp12         NA REG NA $385
N599 (  1,  1) [000187] -c----------       t187 =    CNS_INT   int    71 REG NA $5e
                                                  /--*  t240   int    
                                                  +--*  t187   int    
N601 (  5,  4) [000188] N---G--N-U--              *  NE        void   REG NA $34f
N603 (  7,  6) [000189] ----G-------              *  JTRUE     void   REG NA

------------ BB20 [18F..19B) -> BB19 (always), preds={BB19} succs={BB19}
N607 (???,???) [000465] ------------                 IL_OFFSET void   IL offset: 0x18f REG NA
N609 ( 14,  5) [000221] --CXG-------       t221 =    CALL      int    System.GC.get_MaxGeneration REG rax $305
                                                  /--*  t221   int    
               [000530] --CXG-------       t530 = *  COPY      int    REG rcx
                                                  /--*  t530   int    
N611 (???,???) [000523] --CXG-------       t523 = *  PUTARG_REG int    REG rcx
                                                  /--*  t523   int    arg0 in rcx
N613 ( 28, 11) [000222] --CXG-------              *  CALL      void   System.GC.Collect REG NA $VN.Void

------------ BB21 [19B..1A6) -> BB23 (cond), preds={BB19} succs={BB22,BB23}
N617 (  3,  2) [000244] -c----------       t244 =    LCL_VAR   int   (AX) V19 tmp12         NA REG NA $385
N619 (  1,  1) [000194] -c----------       t194 =    CNS_INT   int    72 REG NA $5f
                                                  /--*  t244   int    
                                                  +--*  t194   int    
N621 (  5,  4) [000195] N---G--N-U--              *  NE        void   REG NA $350
N623 (  7,  6) [000196] ----G-------              *  JTRUE     void   REG NA

------------ BB22 [1A6..1AD) -> BB19 (always), preds={BB21} succs={BB19}
N627 (???,???) [000466] ------------                 IL_OFFSET void   IL offset: 0x1a6 REG NA
N629 ( 14,  5) [000220] --CXG-------                 CALL      void   System.Diagnostics.Debugger.Break REG NA $VN.Void

------------ BB23 [1AD..1B8) -> BB25 (cond), preds={BB21} succs={BB24,BB25}
N633 (  3,  2) [000248] -c----------       t248 =    LCL_VAR   int   (AX) V19 tmp12         NA REG NA $385
N635 (  1,  1) [000201] -c----------       t201 =    CNS_INT   int    82 REG NA $60
                                                  /--*  t248   int    
                                                  +--*  t201   int    
N637 (  5,  4) [000202] N---G--N-U--              *  NE        void   REG NA $351
N639 (  7,  6) [000203] ----G-------              *  JTRUE     void   REG NA

------------ BB24 [1B8..1C1) -> BB19 (always), preds={BB23} succs={BB19}
N643 (???,???) [000467] ------------                 IL_OFFSET void   IL offset: 0x1b8 REG NA
N645 (  1,  1) [000216] -----------z       t216 =    LCL_VAR   ref    V00 this         u:1 rdx REG rdx $80
                                                  /--*  t216   ref    
N647 (  2,  2) [000387] -c----------       t387 = *  LEA(b+16) byref  REG NA
N649 (  1,  1) [000217] -c----------       t217 =    CNS_INT   int    0 REG NA $40
                                                  /--*  t387   byref  
                                                  +--*  t217   int    
N651 (???,???) [000468] -A--GO------              *  STOREIND  bool   REG NA
N001 (  1,  1) [000531] -----------Z       t531 =    LCL_VAR   ref    V00 this          rdx REG rdx

------------ BB25 [1C1..1CC) -> BB19 (cond), preds={BB23} succs={BB26,BB19}
N655 (  3,  2) [000252] -c----------       t252 =    LCL_VAR   int   (AX) V19 tmp12         NA REG NA $385
N657 (  1,  1) [000208] -c----------       t208 =    CNS_INT   int    81 REG NA $61
                                                  /--*  t252   int    
                                                  +--*  t208   int    
N659 (  5,  4) [000209] N---G--N-U--              *  NE        void   REG NA $352
N661 (  7,  6) [000210] ----G-------              *  JTRUE     void   REG NA

------------ BB26 [1CC..1D4) (return), preds={BB25} succs={}
N665 (???,???) [000469] ------------                 IL_OFFSET void   IL offset: 0x1cc REG NA
N667 (  1,  1) [000211] -----------z       t211 =    LCL_VAR   ref    V00 this         u:1 rdx (last use) REG rdx $80
                                                  /--*  t211   ref    
N669 (  2,  2) [000389] -c----------       t389 = *  LEA(b+16) byref  REG NA
N671 (  1,  1) [000212] -c----------       t212 =    CNS_INT   int    0 REG NA $40
                                                  /--*  t389   byref  
                                                  +--*  t212   int    
N673 (???,???) [000470] -A--GO------              *  STOREIND  bool   REG NA
N675 (???,???) [000471] ------------                 IL_OFFSET void   IL offset: 0x1d3 REG NA
N677 (  0,  0) [000215] ------------                 RETURN    void   REG NA $442

------------ BB27 [0CA..0CD) -> BB29 (cond), preds={} succs={BB28,BB29}
N681 (???,???) [000472] ------------                 IL_OFFSET void   IL offset: 0xca REG NA
N683 (  3,  2) [000123] -c----------       t123 =    LCL_VAR   bool  (AX) V05 loc3          NA REG NA $381
N685 (  1,  1) [000124] -c----------       t124 =    CNS_INT   bool   0 REG NA $40
                                                  /--*  t123   bool   
                                                  +--*  t124   bool   
N687 (  6,  6) [000125] J---G--N-U--              *  EQ        void   REG NA $342
N689 (  8,  8) [000126] ----G-------              *  JTRUE     void   REG NA

------------ BB28 [0CD..0D3), preds={BB27} succs={BB29}
N693 (???,???) [000473] ------------                 IL_OFFSET void   IL offset: 0xcd REG NA
N695 (  1,  1) [000128] ------------       t128 =    LCL_VAR   ref    V04 loc2         u:3 rcx (last use) REG rcx <l:$256, c:$b2>
                                                  /--*  t128   ref    
N697 (???,???) [000524] ------------       t524 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t524   ref    arg0 in rcx
N699 ( 15,  7) [000129] --CXG-------              *  CALL      void   System.Threading.Monitor.Exit REG NA $VN.Void

------------ BB29 [0D3..0D4) (finret), preds={BB27,BB28} succs={}
N703 (???,???) [000474] ------------                 IL_OFFSET void   IL offset: 0xd3 REG NA
N705 (  0,  0) [000127] ------------                 RETFILT   void   REG NA $440

------------ BB30 [126..129) -> BB32 (cond), preds={BB13} succs={BB31,BB32}
N483 (???,???) [000475] ------------                 IL_OFFSET void   IL offset: 0x126 REG NA
N485 (  3,  2) [000223] -c----------       t223 =    LCL_VAR   bool  (AX) V05 loc3          NA REG NA $383
N487 (  1,  1) [000224] -c----------       t224 =    CNS_INT   bool   0 REG NA $40
                                                  /--*  t223   bool   
                                                  +--*  t224   bool   
N489 (  6,  6) [000225] J---G--N-U--              *  EQ        void   REG NA $34c
N491 (  8,  8) [000226] ----G-------              *  JTRUE     void   REG NA

------------ BB31 [129..12F), preds={BB30} succs={BB32}
N495 (???,???) [000476] ------------                 IL_OFFSET void   IL offset: 0x129 REG NA
N497 (  1,  1) [000228] ------------       t228 =    LCL_VAR   ref    V04 loc2         u:2 rcx (last use) REG rcx <l:$41a, c:$3df>
                                                  /--*  t228   ref    
N499 (???,???) [000525] ------------       t525 = *  PUTARG_REG ref    REG rcx
                                                  /--*  t525   ref    arg0 in rcx
N501 ( 15,  7) [000229] --CXG-------              *  CALL      void   System.Threading.Monitor.Exit REG NA $VN.Void

------------ BB32 [12F..130) (finret), preds={BB30,BB31} succs={BB14}
N505 (???,???) [000477] ------------                 IL_OFFSET void   IL offset: 0x12f REG NA
N507 (  0,  0) [000227] ------------                 RETFILT   void   REG NA $441

-------------------------------------------------------------------------------------------------------------------

Final allocation
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
  0.#0   V0    Parm   NoReg         |     |     |     |     |     |     |     |     |     |
  1.#1   BB1  PredBB0               |     |     |     |     |     |     |     |     |     |
  6.#2   rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
  6.#3   rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
  6.#4   rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
  6.#5   r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
  6.#6   r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
  6.#7   r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
  6.#8   r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
  6.#9   rax   Fixd   Keep     rax  |     |     |     |     |     |     |     |     |     |
  6.#10  I18   Def    Alloc    rax  |I18 a|     |     |     |     |     |     |     |     |
  7.#11  I18   Use *  Keep     rax  |I18 i|     |     |     |     |     |     |     |     |
 12.#12  I19   Def    Alloc    rcx  |     |I19 a|     |     |     |     |     |     |     |
 13.#13  rcx   Fixd   Keep     rcx  |     |I19 a|     |     |     |     |     |     |     |
 13.#14  I19   Use *  Keep     rcx  |     |I19 i|     |     |     |     |     |     |     |
 14.#15  rcx   Fixd   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 14.#16  I20   Def    Alloc    rcx  |     |I20 a|     |     |     |     |     |     |     |
 15.#17  rcx   Fixd   Keep     rcx  |     |I20 a|     |     |     |     |     |     |     |
 15.#18  I20   Use *  Keep     rcx  |     |I20 i|     |     |     |     |     |     |     |
 16.#19  rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
 16.#20  rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 16.#21  rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
 16.#22  r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
 16.#23  r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
 16.#24  r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
 16.#25  r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
 16.#26  rax   Fixd   Keep     rax  |     |     |     |     |     |     |     |     |     |
 16.#27  I21   Def    Alloc    rax  |I21 a|     |     |     |     |     |     |     |     |
 17.#28  I21   Use *  Keep     rax  |I21 i|     |     |     |     |     |     |     |     |
 18.#29  V21   Def    Alloc    rcx  |     |V21 a|     |     |     |     |     |     |     |
 21.#30  rcx   Fixd   Keep     rcx  |     |V21 a|     |     |     |     |     |     |     |
 21.#31  V21   Use *  Keep     rcx  |     |V21 i|     |     |     |     |     |     |     |
 22.#32  rcx   Fixd   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 22.#33  I22   Def    Alloc    rcx  |     |I22 a|     |     |     |     |     |     |     |
 24.#34  C23   Def    Alloc    rdx  |     |I22 a|C23 a|     |     |     |     |     |     |
 25.#35  C23   Use *  Keep     rdx  |     |I22 a|C23 i|     |     |     |     |     |     |
 26.#36  I24   Def    Alloc    rdx  |     |I22 a|I24 a|     |     |     |     |     |     |
 27.#37  rdx   Fixd   Keep     rdx  |     |I22 a|I24 a|     |     |     |     |     |     |
 27.#38  I24   Use *  Keep     rdx  |     |I22 a|I24 i|     |     |     |     |     |     |
 28.#39  rdx   Fixd   Keep     rdx  |     |I22 a|     |     |     |     |     |     |     |
 28.#40  I25   Def    Alloc    rdx  |     |I22 a|I25 a|     |     |     |     |     |     |
 29.#41  rcx   Fixd   Keep     rcx  |     |I22 a|I25 a|     |     |     |     |     |     |
 29.#42  I22   Use *  Keep     rcx  |     |I22 i|I25 a|     |     |     |     |     |     |
 29.#43  rdx   Fixd   Keep     rdx  |     |     |I25 a|     |     |     |     |     |     |
 29.#44  I25   Use *  Keep     rdx  |     |     |I25 i|     |     |     |     |     |     |
 30.#45  rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
 30.#46  rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 30.#47  rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
 30.#48  r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
 30.#49  r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
 30.#50  r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
 30.#51  r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
 30.#52  rax   Fixd   Keep     rax  |     |     |     |     |     |     |     |     |     |
 30.#53  I26   Def    Alloc    rax  |I26 a|     |     |     |     |     |     |     |     |
 31.#54  rcx   Fixd   Keep     rcx  |I26 a|     |     |     |     |     |     |     |     |
                      Move     rcx  |     |I26 i|     |     |     |     |     |     |     |
 32.#56  rcx   Fixd   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 32.#57  I27   Def    Alloc    rcx  |     |I27 a|     |     |     |     |     |     |     |
 33.#58  rcx   Fixd   Keep     rcx  |     |I27 a|     |     |     |     |     |     |     |
 33.#59  I27   Use *  Keep     rcx  |     |I27 i|     |     |     |     |     |     |     |
 34.#60  rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
 34.#61  rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 34.#62  rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
 34.#63  r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
 34.#64  r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
 34.#65  r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
 34.#66  r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
 38.#67  C28   Def    Alloc    rcx  |     |C28 a|     |     |     |     |     |     |     |
 39.#68  rcx   Fixd   Keep     rcx  |     |C28 a|     |     |     |     |     |     |     |
 39.#69  C28   Use *  Keep     rcx  |     |C28 i|     |     |     |     |     |     |     |
 40.#70  rcx   Fixd   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 40.#71  I29   Def    Alloc    rcx  |     |I29 a|     |     |     |     |     |     |     |
 41.#72  rcx   Fixd   Keep     rcx  |     |I29 a|     |     |     |     |     |     |     |
 41.#73  I29   Use *  Keep     rcx  |     |I29 i|     |     |     |     |     |     |     |
 42.#74  rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
 42.#75  rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 42.#76  rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
 42.#77  r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
 42.#78  r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
 42.#79  r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
 42.#80  r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
 42.#81  rax   Fixd   Keep     rax  |     |     |     |     |     |     |     |     |     |
 42.#82  I30   Def    Alloc    rax  |I30 a|     |     |     |     |     |     |     |     |
 43.#83  I30   Use *  Keep     rax  |I30 i|     |     |     |     |     |     |     |     |
 44.#84  V8    Def    Alloc    rsi  |     |     |     |     |     |V8  a|     |     |     |
 47.#85  rcx   Fixd   Keep     rcx  |     |     |     |     |     |V8  a|     |     |     |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
 47.#86  V8    Use    Copy     rcx  |     |V8  a|     |     |     |V8  a|     |     |     |
 48.#87  rcx   Fixd   Keep     rcx  |     |     |     |     |     |V8  a|     |     |     |
 48.#88  I31   Def    Alloc    rcx  |     |I31 a|     |     |     |V8  a|     |     |     |
 49.#89  rcx   Fixd   Keep     rcx  |     |I31 a|     |     |     |V8  a|     |     |     |
 49.#90  I31   Use *  Keep     rcx  |     |I31 i|     |     |     |V8  a|     |     |     |
 50.#91  rax   Kill   Keep     rax  |     |     |     |     |     |V8  a|     |     |     |
 50.#92  rcx   Kill   Keep     rcx  |     |     |     |     |     |V8  a|     |     |     |
 50.#93  rdx   Kill   Keep     rdx  |     |     |     |     |     |V8  a|     |     |     |
 50.#94  r8    Kill   Keep     r8   |     |     |     |     |     |V8  a|     |     |     |
 50.#95  r9    Kill   Keep     r9   |     |     |     |     |     |V8  a|     |     |     |
 50.#96  r10   Kill   Keep     r10  |     |     |     |     |     |V8  a|     |     |     |
 50.#97  r11   Kill   Keep     r11  |     |     |     |     |     |V8  a|     |     |     |
 55.#98  V0    Use    ReLod    rdx  |     |     |V0  a|     |     |V8  a|     |     |     |
                      Keep     rdx  |     |     |V0  i|     |     |V8  a|     |     |     |
                      Spill    rdx  |     |     |V0  i|     |     |V8  a|     |     |     |
 56.#99  I32   Def    Alloc    rcx  |     |I32 a|     |     |     |V8  a|     |     |     |
 59.#100 rcx   Fixd   Keep     rcx  |     |I32 a|     |     |     |V8  a|     |     |     |
 59.#101 I32   Use *  Keep     rcx  |     |I32 i|     |     |     |V8  a|     |     |     |
 59.#102 rdx   Fixd   Keep     rdx  |     |     |     |     |     |V8  a|     |     |     |
 59.#103 V8    Use *  Copy     rdx  |     |     |V8  i|     |     |V8  i|     |     |     |
 60.#104 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
 60.#105 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 60.#106 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
 60.#107 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
 60.#108 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
 60.#109 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
 60.#110 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
 60.#111 mm0   Kill   Keep     mm0  |     |     |     |     |     |     |     |     |     |
 60.#112 mm1   Kill   Keep     mm1  |     |     |     |     |     |     |     |     |     |
 60.#113 mm2   Kill   Keep     mm2  |     |     |     |     |     |     |     |     |     |
 60.#114 mm3   Kill   Keep     mm3  |     |     |     |     |     |     |     |     |     |
 60.#115 mm4   Kill   Keep     mm4  |     |     |     |     |     |     |     |     |     |
 60.#116 mm5   Kill   Keep     mm5  |     |     |     |     |     |     |     |     |     |
 64.#117 C33   Def    Alloc    rcx  |     |C33 a|     |     |     |     |     |     |     |
 65.#118 rcx   Fixd   Keep     rcx  |     |C33 a|     |     |     |     |     |     |     |
 65.#119 C33   Use *  Keep     rcx  |     |C33 i|     |     |     |     |     |     |     |
 66.#120 rcx   Fixd   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 66.#121 I34   Def    Alloc    rcx  |     |I34 a|     |     |     |     |     |     |     |
 67.#122 rcx   Fixd   Keep     rcx  |     |I34 a|     |     |     |     |     |     |     |
 67.#123 I34   Use *  Keep     rcx  |     |I34 i|     |     |     |     |     |     |     |
 68.#124 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
 68.#125 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 68.#126 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
 68.#127 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
 68.#128 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
 68.#129 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
 68.#130 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
 68.#131 rax   Fixd   Keep     rax  |     |     |     |     |     |     |     |     |     |
 68.#132 I35   Def    Alloc    rax  |I35 a|     |     |     |     |     |     |     |     |
 69.#133 I35   Use *  Keep     rax  |I35 i|     |     |     |     |     |     |     |     |
 70.#134 V9    Def    Alloc    rsi  |     |     |     |     |     |V9  a|     |     |     |
 75.#135 V0    Use    ReLod    rdx  |     |     |V0  a|     |     |V9  a|     |     |     |
                      Keep     rdx  |     |     |V0  i|     |     |V9  a|     |     |     |
                      Spill    rdx  |     |     |V0  i|     |     |V9  a|     |     |     |
 76.#136 I36   Def    Alloc    rcx  |     |I36 a|     |     |     |V9  a|     |     |     |
 79.#137 I36   Use *  Keep     rcx  |     |I36 i|     |     |     |V9  a|     |     |     |
 80.#138 I37   Def    Alloc    rdi  |     |     |     |     |     |V9  a|I37 a|     |     |
 81.#139 I37   Use *  Keep     rdi  |     |     |     |     |     |V9  a|I37 i|     |     |
 82.#140 V10   Def    Alloc    rdi  |     |     |     |     |     |V9  a|V10 a|     |     |
 85.#141 rcx   Fixd   Keep     rcx  |     |     |     |     |     |V9  a|V10 a|     |     |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
 85.#142 V9    Use    Copy     rcx  |     |V9  a|     |     |     |V9  a|V10 a|     |     |
 86.#143 rcx   Fixd   Keep     rcx  |     |     |     |     |     |V9  a|V10 a|     |     |
 86.#144 I38   Def    Alloc    rcx  |     |I38 a|     |     |     |V9  a|V10 a|     |     |
 87.#145 rcx   Fixd   Keep     rcx  |     |I38 a|     |     |     |V9  a|V10 a|     |     |
 87.#146 I38   Use *  Keep     rcx  |     |I38 i|     |     |     |V9  a|V10 a|     |     |
 88.#147 rax   Kill   Keep     rax  |     |     |     |     |     |V9  a|V10 a|     |     |
 88.#148 rcx   Kill   Keep     rcx  |     |     |     |     |     |V9  a|V10 a|     |     |
 88.#149 rdx   Kill   Keep     rdx  |     |     |     |     |     |V9  a|V10 a|     |     |
 88.#150 r8    Kill   Keep     r8   |     |     |     |     |     |V9  a|V10 a|     |     |
 88.#151 r9    Kill   Keep     r9   |     |     |     |     |     |V9  a|V10 a|     |     |
 88.#152 r10   Kill   Keep     r10  |     |     |     |     |     |V9  a|V10 a|     |     |
 88.#153 r11   Kill   Keep     r11  |     |     |     |     |     |V9  a|V10 a|     |     |
 93.#154 V10   Use *  Keep     rdi  |     |     |     |     |     |V9  a|V10 i|     |     |
 94.#155 I39   Def    Alloc    rcx  |     |I39 a|     |     |     |V9  a|     |     |     |
 97.#156 rcx   Fixd   Keep     rcx  |     |I39 a|     |     |     |V9  a|     |     |     |
 97.#157 I39   Use *  Keep     rcx  |     |I39 i|     |     |     |V9  a|     |     |     |
 97.#158 rdx   Fixd   Keep     rdx  |     |     |     |     |     |V9  a|     |     |     |
 97.#159 V9    Use *  Copy     rdx  |     |     |V9  i|     |     |V9  i|     |     |     |
 98.#160 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
 98.#161 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
 98.#162 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
 98.#163 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
 98.#164 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
 98.#165 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
 98.#166 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
 98.#167 mm0   Kill   Keep     mm0  |     |     |     |     |     |     |     |     |     |
 98.#168 mm1   Kill   Keep     mm1  |     |     |     |     |     |     |     |     |     |
 98.#169 mm2   Kill   Keep     mm2  |     |     |     |     |     |     |     |     |     |
 98.#170 mm3   Kill   Keep     mm3  |     |     |     |     |     |     |     |     |     |
 98.#171 mm4   Kill   Keep     mm4  |     |     |     |     |     |     |     |     |     |
 98.#172 mm5   Kill   Keep     mm5  |     |     |     |     |     |     |     |     |     |
102.#173 C40   Def    Alloc    rcx  |     |C40 a|     |     |     |     |     |     |     |
103.#174 rcx   Fixd   Keep     rcx  |     |C40 a|     |     |     |     |     |     |     |
103.#175 C40   Use *  Keep     rcx  |     |C40 i|     |     |     |     |     |     |     |
104.#176 rcx   Fixd   Keep     rcx  |     |     |     |     |     |     |     |     |     |
104.#177 I41   Def    Alloc    rcx  |     |I41 a|     |     |     |     |     |     |     |
105.#178 rcx   Fixd   Keep     rcx  |     |I41 a|     |     |     |     |     |     |     |
105.#179 I41   Use *  Keep     rcx  |     |I41 i|     |     |     |     |     |     |     |
106.#180 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
106.#181 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
106.#182 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
106.#183 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
106.#184 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
106.#185 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
106.#186 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
106.#187 rax   Fixd   Keep     rax  |     |     |     |     |     |     |     |     |     |
106.#188 I42   Def    Alloc    rax  |I42 a|     |     |     |     |     |     |     |     |
107.#189 I42   Use *  Keep     rax  |I42 i|     |     |     |     |     |     |     |     |
108.#190 V11   Def    Alloc    rsi  |     |     |     |     |     |V11 a|     |     |     |
111.#191 rcx   Fixd   Keep     rcx  |     |     |     |     |     |V11 a|     |     |     |
111.#192 V11   Use    Copy     rcx  |     |V11 a|     |     |     |V11 a|     |     |     |
112.#193 rcx   Fixd   Keep     rcx  |     |     |     |     |     |V11 a|     |     |     |
112.#194 I43   Def    Alloc    rcx  |     |I43 a|     |     |     |V11 a|     |     |     |
115.#195 rdx   Fixd   Keep     rdx  |     |I43 a|     |     |     |V11 a|     |     |     |
115.#196 V0    Use    ReLod    rdx  |     |I43 a|V0  a|     |     |V11 a|     |     |     |
                      Keep     rdx  |     |I43 a|V0  i|     |     |V11 a|     |     |     |
                      Spill    rdx  |     |I43 a|V0  i|     |     |V11 a|     |     |     |
116.#197 rdx   Fixd   Keep     rdx  |     |I43 a|     |     |     |V11 a|     |     |     |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
116.#198 I44   Def    PtArg    rdx  |     |I43 a|     |     |     |V11 a|     |     |     |
118.#199 C45   Def    Alloc    r8   |     |I43 a|     |     |     |V11 a|     |C45 a|     |
119.#200 r8    Fixd   Keep     r8   |     |I43 a|     |     |     |V11 a|     |C45 a|     |
119.#201 C45   Use *  Keep     r8   |     |I43 a|     |     |     |V11 a|     |C45 i|     |
120.#202 r8    Fixd   Keep     r8   |     |I43 a|     |     |     |V11 a|     |     |     |
120.#203 I46   Def    Alloc    r8   |     |I43 a|     |     |     |V11 a|     |I46 a|     |
121.#204 rcx   Fixd   Keep     rcx  |     |I43 a|     |     |     |V11 a|     |I46 a|     |
121.#205 I43   Use *  Keep     rcx  |     |I43 i|     |     |     |V11 a|     |I46 a|     |
121.#206 rdx   Fixd   Keep     rdx  |     |     |     |     |     |V11 a|     |I46 a|     |
121.#207 I44   Use *  PtArg    rdx  |     |     |     |     |     |V11 a|     |I46 a|     |
121.#208 r8    Fixd   Keep     r8   |     |     |     |     |     |V11 a|     |I46 a|     |
121.#209 I46   Use *  Keep     r8   |     |     |     |     |     |V11 a|     |I46 i|     |
122.#210 rax   Kill   Keep     rax  |     |     |     |     |     |V11 a|     |     |     |
122.#211 rcx   Kill   Keep     rcx  |     |     |     |     |     |V11 a|     |     |     |
122.#212 rdx   Kill   Keep     rdx  |     |     |     |     |     |V11 a|     |     |     |
122.#213 r8    Kill   Keep     r8   |     |     |     |     |     |V11 a|     |     |     |
122.#214 r9    Kill   Keep     r9   |     |     |     |     |     |V11 a|     |     |     |
122.#215 r10   Kill   Keep     r10  |     |     |     |     |     |V11 a|     |     |     |
122.#216 r11   Kill   Keep     r11  |     |     |     |     |     |V11 a|     |     |     |
126.#217 C47   Def    Alloc    rcx  |     |C47 a|     |     |     |V11 a|     |     |     |
127.#218 rcx   Fixd   Keep     rcx  |     |C47 a|     |     |     |V11 a|     |     |     |
127.#219 C47   Use *  Keep     rcx  |     |C47 i|     |     |     |V11 a|     |     |     |
128.#220 rcx   Fixd   Keep     rcx  |     |     |     |     |     |V11 a|     |     |     |
128.#221 I48   Def    Alloc    rcx  |     |I48 a|     |     |     |V11 a|     |     |     |
129.#222 rcx   Fixd   Keep     rcx  |     |I48 a|     |     |     |V11 a|     |     |     |
129.#223 I48   Use *  Keep     rcx  |     |I48 i|     |     |     |V11 a|     |     |     |
130.#224 rax   Kill   Keep     rax  |     |     |     |     |     |V11 a|     |     |     |
130.#225 rcx   Kill   Keep     rcx  |     |     |     |     |     |V11 a|     |     |     |
130.#226 rdx   Kill   Keep     rdx  |     |     |     |     |     |V11 a|     |     |     |
130.#227 r8    Kill   Keep     r8   |     |     |     |     |     |V11 a|     |     |     |
130.#228 r9    Kill   Keep     r9   |     |     |     |     |     |V11 a|     |     |     |
130.#229 r10   Kill   Keep     r10  |     |     |     |     |     |V11 a|     |     |     |
130.#230 r11   Kill   Keep     r11  |     |     |     |     |     |V11 a|     |     |     |
130.#231 rax   Fixd   Keep     rax  |     |     |     |     |     |V11 a|     |     |     |
130.#232 I49   Def    Alloc    rax  |I49 a|     |     |     |     |V11 a|     |     |     |
131.#233 I49   Use *  Keep     rax  |I49 i|     |     |     |     |V11 a|     |     |     |
132.#234 V12   Def    Alloc    rdi  |     |     |     |     |     |V11 a|V12 a|     |     |
135.#235 rcx   Fixd   Keep     rcx  |     |     |     |     |     |V11 a|V12 a|     |     |
135.#236 V12   Use    Copy     rcx  |     |V12 a|     |     |     |V11 a|V12 a|     |     |
136.#237 rcx   Fixd   Keep     rcx  |     |     |     |     |     |V11 a|V12 a|     |     |
136.#238 I50   Def    Alloc    rcx  |     |I50 a|     |     |     |V11 a|V12 a|     |     |
139.#239 rdx   Fixd   Keep     rdx  |     |I50 a|     |     |     |V11 a|V12 a|     |     |
139.#240 V11   Use *  Copy     rdx  |     |I50 a|V11 i|     |     |V11 i|V12 a|     |     |
140.#241 rdx   Fixd   Keep     rdx  |     |I50 a|     |     |     |     |V12 a|     |     |
140.#242 I51   Def    Alloc    rdx  |     |I50 a|I51 a|     |     |     |V12 a|     |     |
141.#243 rcx   Fixd   Keep     rcx  |     |I50 a|I51 a|     |     |     |V12 a|     |     |
141.#244 I50   Use *  Keep     rcx  |     |I50 i|I51 a|     |     |     |V12 a|     |     |
141.#245 rdx   Fixd   Keep     rdx  |     |     |I51 a|     |     |     |V12 a|     |     |
141.#246 I51   Use *  Keep     rdx  |     |     |I51 i|     |     |     |V12 a|     |     |
142.#247 rax   Kill   Keep     rax  |     |     |     |     |     |     |V12 a|     |     |
142.#248 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |V12 a|     |     |
142.#249 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |V12 a|     |     |
142.#250 r8    Kill   Keep     r8   |     |     |     |     |     |     |V12 a|     |     |
142.#251 r9    Kill   Keep     r9   |     |     |     |     |     |     |V12 a|     |     |
142.#252 r10   Kill   Keep     r10  |     |     |     |     |     |     |V12 a|     |     |
142.#253 r11   Kill   Keep     r11  |     |     |     |     |     |     |V12 a|     |     |
147.#254 rcx   Fixd   Keep     rcx  |     |     |     |     |     |     |V12 a|     |     |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
147.#255 V12   Use *  Copy     rcx  |     |V12 i|     |     |     |     |V12 i|     |     |
148.#256 rcx   Fixd   Keep     rcx  |     |     |     |     |     |     |     |     |     |
148.#257 I52   Def    Alloc    rcx  |     |I52 a|     |     |     |     |     |     |     |
149.#258 rcx   Fixd   Keep     rcx  |     |I52 a|     |     |     |     |     |     |     |
149.#259 I52   Use *  Keep     rcx  |     |I52 i|     |     |     |     |     |     |     |
150.#260 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
150.#261 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
150.#262 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
150.#263 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
150.#264 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
150.#265 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
150.#266 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
154.#267 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
154.#268 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
154.#269 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
154.#270 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
154.#271 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
154.#272 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
154.#273 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
154.#274 rax   Fixd   Keep     rax  |     |     |     |     |     |     |     |     |     |
154.#275 I53   Def    Alloc    rax  |I53 a|     |     |     |     |     |     |     |     |
155.#276 I53   Use *  Keep     rax  |I53 i|     |     |     |     |     |     |     |     |
160.#277 I54   Def    Alloc    rcx  |     |I54 a|     |     |     |     |     |     |     |
161.#278 rcx   Fixd   Keep     rcx  |     |I54 a|     |     |     |     |     |     |     |
161.#279 I54   Use *  Keep     rcx  |     |I54 i|     |     |     |     |     |     |     |
162.#280 rcx   Fixd   Keep     rcx  |     |     |     |     |     |     |     |     |     |
162.#281 I55   Def    Alloc    rcx  |     |I55 a|     |     |     |     |     |     |     |
163.#282 rcx   Fixd   Keep     rcx  |     |I55 a|     |     |     |     |     |     |     |
163.#283 I55   Use *  Keep     rcx  |     |I55 i|     |     |     |     |     |     |     |
164.#284 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
164.#285 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
164.#286 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
164.#287 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
164.#288 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
164.#289 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
164.#290 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
164.#291 rax   Fixd   Keep     rax  |     |     |     |     |     |     |     |     |     |
164.#292 I56   Def    Alloc    rax  |I56 a|     |     |     |     |     |     |     |     |
165.#293 I56   Use *  Keep     rax  |I56 i|     |     |     |     |     |     |     |     |
166.#294 V22   Def    Alloc    rcx  |     |V22 a|     |     |     |     |     |     |     |
169.#295 rcx   Fixd   Keep     rcx  |     |V22 a|     |     |     |     |     |     |     |
169.#296 V22   Use *  Keep     rcx  |     |V22 i|     |     |     |     |     |     |     |
170.#297 rcx   Fixd   Keep     rcx  |     |     |     |     |     |     |     |     |     |
170.#298 I57   Def    Alloc    rcx  |     |I57 a|     |     |     |     |     |     |     |
172.#299 C58   Def    Alloc    rdx  |     |I57 a|C58 a|     |     |     |     |     |     |
173.#300 C58   Use *  Keep     rdx  |     |I57 a|C58 i|     |     |     |     |     |     |
174.#301 I59   Def    Alloc    rdx  |     |I57 a|I59 a|     |     |     |     |     |     |
175.#302 rdx   Fixd   Keep     rdx  |     |I57 a|I59 a|     |     |     |     |     |     |
175.#303 I59   Use *  Keep     rdx  |     |I57 a|I59 i|     |     |     |     |     |     |
176.#304 rdx   Fixd   Keep     rdx  |     |I57 a|     |     |     |     |     |     |     |
176.#305 I60   Def    Alloc    rdx  |     |I57 a|I60 a|     |     |     |     |     |     |
177.#306 rcx   Fixd   Keep     rcx  |     |I57 a|I60 a|     |     |     |     |     |     |
177.#307 I57   Use *  Keep     rcx  |     |I57 i|I60 a|     |     |     |     |     |     |
177.#308 rdx   Fixd   Keep     rdx  |     |     |I60 a|     |     |     |     |     |     |
177.#309 I60   Use *  Keep     rdx  |     |     |I60 i|     |     |     |     |     |     |
178.#310 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
178.#311 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
178.#312 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
178.#313 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
178.#314 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
178.#315 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
178.#316 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
178.#317 rax   Fixd   Keep     rax  |     |     |     |     |     |     |     |     |     |
178.#318 I61   Def    Alloc    rax  |I61 a|     |     |     |     |     |     |     |     |
179.#319 rcx   Fixd   Keep     rcx  |I61 a|     |     |     |     |     |     |     |     |
                      Move     rcx  |     |I61 i|     |     |     |     |     |     |     |
180.#321 rcx   Fixd   Keep     rcx  |     |     |     |     |     |     |     |     |     |
180.#322 I62   Def    Alloc    rcx  |     |I62 a|     |     |     |     |     |     |     |
181.#323 rcx   Fixd   Keep     rcx  |     |I62 a|     |     |     |     |     |     |     |
181.#324 I62   Use *  Keep     rcx  |     |I62 i|     |     |     |     |     |     |     |
182.#325 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
182.#326 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
182.#327 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
182.#328 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
182.#329 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
182.#330 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
182.#331 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
186.#332 C63   Def    Alloc    rsi  |     |     |     |     |     |C63 a|     |     |     |
187.#333 C63   Use *  Keep     rsi  |     |     |     |     |     |C63 i|     |     |     |
188.#334 V3    Def    Alloc    rsi  |     |     |     |     |     |V3  a|     |     |     |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
189.#335 BB2  PredBB1               |     |     |     |     |     |V3  a|     |     |     |
197.#336 V0    Use    ReLod    rdx  |     |     |V0  a|     |     |V3  a|     |     |     |
                      Keep     rdx  |     |     |V0  i|     |     |V3  a|     |     |     |
                      Spill    rdx  |     |     |V0  i|     |     |V3  a|     |     |     |
198.#337 I64   Def    Alloc    rcx  |     |I64 a|     |     |     |V3  a|     |     |     |
199.#338 I64   Use *  Keep     rcx  |     |I64 i|     |     |     |V3  a|     |     |     |
204.#339 C65   Def    Alloc    rcx  |     |C65 a|     |     |     |V3  a|     |     |     |
205.#340 C65   Use *  Keep     rcx  |     |C65 i|     |     |     |V3  a|     |     |     |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
207.#341 BB3  PredBB2               |     |     |     |     |     |V3  a|     |     |     |
212.#342 I66   Def    Alloc    rdx  |     |     |I66 a|     |     |V3  a|     |     |     |
213.#343 rdx   Fixd   Keep     rdx  |     |     |I66 a|     |     |V3  a|     |     |     |
213.#344 I66   Use *  Keep     rdx  |     |     |I66 i|     |     |V3  a|     |     |     |
214.#345 rdx   Fixd   Keep     rdx  |     |     |     |     |     |V3  a|     |     |     |
214.#346 I67   Def    Alloc    rdx  |     |     |I67 a|     |     |V3  a|     |     |     |
216.#347 I68   Def    Alloc    rcx  |     |I68 a|I67 a|     |     |V3  a|     |     |     |
217.#348 rcx   Fixd   Keep     rcx  |     |I68 a|I67 a|     |     |V3  a|     |     |     |
217.#349 I68   Use *  Keep     rcx  |     |I68 i|I67 a|     |     |V3  a|     |     |     |
218.#350 rcx   Fixd   Keep     rcx  |     |     |I67 a|     |     |V3  a|     |     |     |
218.#351 I69   Def    Alloc    rcx  |     |I69 a|I67 a|     |     |V3  a|     |     |     |
219.#352 rdx   Fixd   Keep     rdx  |     |I69 a|I67 a|     |     |V3  a|     |     |     |
219.#353 I67   Use *  Keep     rdx  |     |I69 a|I67 i|     |     |V3  a|     |     |     |
219.#354 rcx   Fixd   Keep     rcx  |     |I69 a|     |     |     |V3  a|     |     |     |
219.#355 I69   Use *  Keep     rcx  |     |I69 i|     |     |     |V3  a|     |     |     |
220.#356 rax   Kill   Keep     rax  |     |     |     |     |     |V3  a|     |     |     |
220.#357 rcx   Kill   Keep     rcx  |     |     |     |     |     |V3  a|     |     |     |
220.#358 rdx   Kill   Keep     rdx  |     |     |     |     |     |V3  a|     |     |     |
220.#359 r8    Kill   Keep     r8   |     |     |     |     |     |V3  a|     |     |     |
220.#360 r9    Kill   Keep     r9   |     |     |     |     |     |V3  a|     |     |     |
220.#361 r10   Kill   Keep     r10  |     |     |     |     |     |V3  a|     |     |     |
220.#362 r11   Kill   Keep     r11  |     |     |     |     |     |V3  a|     |     |     |
224.#363 C70   Def    Alloc    rcx  |     |C70 a|     |     |     |V3  a|     |     |     |
225.#364 rcx   Fixd   Keep     rcx  |     |C70 a|     |     |     |V3  a|     |     |     |
225.#365 C70   Use *  Keep     rcx  |     |C70 i|     |     |     |V3  a|     |     |     |
226.#366 rcx   Fixd   Keep     rcx  |     |     |     |     |     |V3  a|     |     |     |
226.#367 I71   Def    Alloc    rcx  |     |I71 a|     |     |     |V3  a|     |     |     |
227.#368 rcx   Fixd   Keep     rcx  |     |I71 a|     |     |     |V3  a|     |     |     |
227.#369 I71   Use *  Keep     rcx  |     |I71 i|     |     |     |V3  a|     |     |     |
228.#370 rax   Kill   Keep     rax  |     |     |     |     |     |V3  a|     |     |     |
228.#371 rcx   Kill   Keep     rcx  |     |     |     |     |     |V3  a|     |     |     |
228.#372 rdx   Kill   Keep     rdx  |     |     |     |     |     |V3  a|     |     |     |
228.#373 r8    Kill   Keep     r8   |     |     |     |     |     |V3  a|     |     |     |
228.#374 r9    Kill   Keep     r9   |     |     |     |     |     |V3  a|     |     |     |
228.#375 r10   Kill   Keep     r10  |     |     |     |     |     |V3  a|     |     |     |
228.#376 r11   Kill   Keep     r11  |     |     |     |     |     |V3  a|     |     |     |
228.#377 rax   Fixd   Keep     rax  |     |     |     |     |     |V3  a|     |     |     |
228.#378 I72   Def    Alloc    rax  |I72 a|     |     |     |     |V3  a|     |     |     |
229.#379 I72   Use *  Keep     rax  |I72 i|     |     |     |     |V3  a|     |     |     |
230.#380 V13   Def    Alloc    rdi  |     |     |     |     |     |V3  a|V13 a|     |     |
235.#381 V0    Use    ReLod    rdx  |     |     |V0  a|     |     |V3  a|V13 a|     |     |
                      Keep     rdx  |     |     |V0  i|     |     |V3  a|V13 a|     |     |
                      Spill    rdx  |     |     |V0  i|     |     |V3  a|V13 a|     |     |
236.#382 I73   Def    Alloc    rcx  |     |I73 a|     |     |     |V3  a|V13 a|     |     |
239.#383 I73   Use *  Keep     rcx  |     |I73 i|     |     |     |V3  a|V13 a|     |     |
240.#384 I74   Def    Alloc    rbx  |     |     |     |I74 a|     |V3  a|V13 a|     |     |
241.#385 I74   Use *  Keep     rbx  |     |     |     |I74 i|     |V3  a|V13 a|     |     |
242.#386 V14   Def    Alloc    rbx  |     |     |     |V14 a|     |V3  a|V13 a|     |     |
245.#387 rcx   Fixd   Keep     rcx  |     |     |     |V14 a|     |V3  a|V13 a|     |     |
245.#388 V13   Use    Copy     rcx  |     |V13 a|     |V14 a|     |V3  a|V13 a|     |     |
246.#389 rcx   Fixd   Keep     rcx  |     |     |     |V14 a|     |V3  a|V13 a|     |     |
246.#390 I75   Def    Alloc    rcx  |     |I75 a|     |V14 a|     |V3  a|V13 a|     |     |
247.#391 rcx   Fixd   Keep     rcx  |     |I75 a|     |V14 a|     |V3  a|V13 a|     |     |
247.#392 I75   Use *  Keep     rcx  |     |I75 i|     |V14 a|     |V3  a|V13 a|     |     |
248.#393 rax   Kill   Keep     rax  |     |     |     |V14 a|     |V3  a|V13 a|     |     |
248.#394 rcx   Kill   Keep     rcx  |     |     |     |V14 a|     |V3  a|V13 a|     |     |
248.#395 rdx   Kill   Keep     rdx  |     |     |     |V14 a|     |V3  a|V13 a|     |     |
248.#396 r8    Kill   Keep     r8   |     |     |     |V14 a|     |V3  a|V13 a|     |     |
248.#397 r9    Kill   Keep     r9   |     |     |     |V14 a|     |V3  a|V13 a|     |     |
248.#398 r10   Kill   Keep     r10  |     |     |     |V14 a|     |V3  a|V13 a|     |     |
248.#399 r11   Kill   Keep     r11  |     |     |     |V14 a|     |V3  a|V13 a|     |     |
253.#400 V14   Use *  Keep     rbx  |     |     |     |V14 i|     |V3  a|V13 a|     |     |
254.#401 I76   Def    Alloc    rcx  |     |I76 a|     |     |     |V3  a|V13 a|     |     |
257.#402 rcx   Fixd   Keep     rcx  |     |I76 a|     |     |     |V3  a|V13 a|     |     |
257.#403 I76   Use *  Keep     rcx  |     |I76 i|     |     |     |V3  a|V13 a|     |     |
257.#404 rdx   Fixd   Keep     rdx  |     |     |     |     |     |V3  a|V13 a|     |     |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
257.#405 V13   Use *  Copy     rdx  |     |     |V13 i|     |     |V3  a|V13 i|     |     |
258.#406 rax   Kill   Keep     rax  |     |     |     |     |     |V3  a|     |     |     |
258.#407 rcx   Kill   Keep     rcx  |     |     |     |     |     |V3  a|     |     |     |
258.#408 rdx   Kill   Keep     rdx  |     |     |     |     |     |V3  a|     |     |     |
258.#409 r8    Kill   Keep     r8   |     |     |     |     |     |V3  a|     |     |     |
258.#410 r9    Kill   Keep     r9   |     |     |     |     |     |V3  a|     |     |     |
258.#411 r10   Kill   Keep     r10  |     |     |     |     |     |V3  a|     |     |     |
258.#412 r11   Kill   Keep     r11  |     |     |     |     |     |V3  a|     |     |     |
258.#413 mm0   Kill   Keep     mm0  |     |     |     |     |     |V3  a|     |     |     |
258.#414 mm1   Kill   Keep     mm1  |     |     |     |     |     |V3  a|     |     |     |
258.#415 mm2   Kill   Keep     mm2  |     |     |     |     |     |V3  a|     |     |     |
258.#416 mm3   Kill   Keep     mm3  |     |     |     |     |     |V3  a|     |     |     |
258.#417 mm4   Kill   Keep     mm4  |     |     |     |     |     |V3  a|     |     |     |
258.#418 mm5   Kill   Keep     mm5  |     |     |     |     |     |V3  a|     |     |     |
265.#419 V0    Use    ReLod    rdx  |     |     |V0  a|     |     |V3  a|     |     |     |
                      Keep     rdx  |     |     |V0  i|     |     |V3  a|     |     |     |
                      Spill    rdx  |     |     |V0  i|     |     |V3  a|     |     |     |
266.#420 I77   Def    Alloc    rcx  |     |I77 a|     |     |     |V3  a|     |     |     |
267.#421 I77   Use *  Keep     rcx  |     |I77 i|     |     |     |V3  a|     |     |     |
268.#422 V28   Def    Alloc    rcx  |     |V28 a|     |     |     |V3  a|     |     |     |
271.#423 V28   Use    Keep     rcx  |     |V28 i|     |     |     |V3  a|     |     |     |
                      Spill    rcx  |     |V28 i|     |     |     |V3  a|     |     |     |
272.#424 I78   Def    Alloc    rcx  |     |I78 a|     |     |     |V3  a|     |     |     |
277.#425 V28   Use *  ReLod    rax  |V28 a|I78 a|     |     |     |V3  a|     |     |     |
                      Keep     rax  |V28 i|I78 a|     |     |     |V3  a|     |     |     |
278.#426 I79   Def    Alloc    rax  |I79 a|I78 a|     |     |     |V3  a|     |     |     |
281.#427 I79   Use *  Keep     rax  |I79 i|I78 a|     |     |     |V3  a|     |     |     |
282.#428 I80   Def    Alloc    rdi  |     |I78 a|     |     |     |V3  a|I80 a|     |     |
283.#429 I80   Use *  Keep     rdi  |     |I78 a|     |     |     |V3  a|I80 i|     |     |
284.#430 V27   Def    Alloc    rdi  |     |I78 a|     |     |     |V3  a|V27 a|     |     |
287.#431 rcx   Fixd   Keep     rcx  |     |I78 a|     |     |     |V3  a|V27 a|     |     |
287.#432 I78   Use *  Keep     rcx  |     |I78 i|     |     |     |V3  a|V27 a|     |     |
287.#433 rdx   Fixd   Keep     rdx  |     |     |     |     |     |V3  a|V27 a|     |     |
287.#434 V27   Use    Copy     rdx  |     |     |V27 a|     |     |V3  a|V27 a|     |     |
288.#435 rax   Kill   Keep     rax  |     |     |     |     |     |V3  a|V27 a|     |     |
288.#436 rcx   Kill   Keep     rcx  |     |     |     |     |     |V3  a|V27 a|     |     |
288.#437 rdx   Kill   Keep     rdx  |     |     |     |     |     |V3  a|V27 a|     |     |
288.#438 r8    Kill   Keep     r8   |     |     |     |     |     |V3  a|V27 a|     |     |
288.#439 r9    Kill   Keep     r9   |     |     |     |     |     |V3  a|V27 a|     |     |
288.#440 r10   Kill   Keep     r10  |     |     |     |     |     |V3  a|V27 a|     |     |
288.#441 r11   Kill   Keep     r11  |     |     |     |     |     |V3  a|V27 a|     |     |
288.#442 mm0   Kill   Keep     mm0  |     |     |     |     |     |V3  a|V27 a|     |     |
288.#443 mm1   Kill   Keep     mm1  |     |     |     |     |     |V3  a|V27 a|     |     |
288.#444 mm2   Kill   Keep     mm2  |     |     |     |     |     |V3  a|V27 a|     |     |
288.#445 mm3   Kill   Keep     mm3  |     |     |     |     |     |V3  a|V27 a|     |     |
288.#446 mm4   Kill   Keep     mm4  |     |     |     |     |     |V3  a|V27 a|     |     |
288.#447 mm5   Kill   Keep     mm5  |     |     |     |     |     |V3  a|V27 a|     |     |
292.#448 C81   Def    Alloc    rcx  |     |C81 a|     |     |     |V3  a|V27 a|     |     |
293.#449 rcx   Fixd   Keep     rcx  |     |C81 a|     |     |     |V3  a|V27 a|     |     |
293.#450 C81   Use *  Keep     rcx  |     |C81 i|     |     |     |V3  a|V27 a|     |     |
294.#451 rcx   Fixd   Keep     rcx  |     |     |     |     |     |V3  a|V27 a|     |     |
294.#452 I82   Def    Alloc    rcx  |     |I82 a|     |     |     |V3  a|V27 a|     |     |
295.#453 rcx   Fixd   Keep     rcx  |     |I82 a|     |     |     |V3  a|V27 a|     |     |
295.#454 I82   Use *  Keep     rcx  |     |I82 i|     |     |     |V3  a|V27 a|     |     |
296.#455 rax   Kill   Keep     rax  |     |     |     |     |     |V3  a|V27 a|     |     |
296.#456 rcx   Kill   Keep     rcx  |     |     |     |     |     |V3  a|V27 a|     |     |
296.#457 rdx   Kill   Keep     rdx  |     |     |     |     |     |V3  a|V27 a|     |     |
296.#458 r8    Kill   Keep     r8   |     |     |     |     |     |V3  a|V27 a|     |     |
296.#459 r9    Kill   Keep     r9   |     |     |     |     |     |V3  a|V27 a|     |     |
296.#460 r10   Kill   Keep     r10  |     |     |     |     |     |V3  a|V27 a|     |     |
296.#461 r11   Kill   Keep     r11  |     |     |     |     |     |V3  a|V27 a|     |     |
296.#462 rax   Fixd   Keep     rax  |     |     |     |     |     |V3  a|V27 a|     |     |
296.#463 I83   Def    Alloc    rax  |I83 a|     |     |     |     |V3  a|V27 a|     |     |
297.#464 I83   Use *  Keep     rax  |I83 i|     |     |     |     |V3  a|V27 a|     |     |
298.#465 V15   Def    Alloc    rbx  |     |     |     |V15 a|     |V3  a|V27 a|     |     |
301.#466 V27   Use *  Keep     rdi  |     |     |     |V15 a|     |V3  a|V27 i|     |     |
302.#467 V16   Def    Alloc    rdi  |     |     |     |V15 a|     |V3  a|V16 a|     |     |
305.#468 rcx   Fixd   Keep     rcx  |     |     |     |V15 a|     |V3  a|V16 a|     |     |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
305.#469 V15   Use    Copy     rcx  |     |V15 a|     |V15 a|     |V3  a|V16 a|     |     |
306.#470 rcx   Fixd   Keep     rcx  |     |     |     |V15 a|     |V3  a|V16 a|     |     |
306.#471 I84   Def    Alloc    rcx  |     |I84 a|     |V15 a|     |V3  a|V16 a|     |     |
307.#472 rcx   Fixd   Keep     rcx  |     |I84 a|     |V15 a|     |V3  a|V16 a|     |     |
307.#473 I84   Use *  Keep     rcx  |     |I84 i|     |V15 a|     |V3  a|V16 a|     |     |
308.#474 rax   Kill   Keep     rax  |     |     |     |V15 a|     |V3  a|V16 a|     |     |
308.#475 rcx   Kill   Keep     rcx  |     |     |     |V15 a|     |V3  a|V16 a|     |     |
308.#476 rdx   Kill   Keep     rdx  |     |     |     |V15 a|     |V3  a|V16 a|     |     |
308.#477 r8    Kill   Keep     r8   |     |     |     |V15 a|     |V3  a|V16 a|     |     |
308.#478 r9    Kill   Keep     r9   |     |     |     |V15 a|     |V3  a|V16 a|     |     |
308.#479 r10   Kill   Keep     r10  |     |     |     |V15 a|     |V3  a|V16 a|     |     |
308.#480 r11   Kill   Keep     r11  |     |     |     |V15 a|     |V3  a|V16 a|     |     |
313.#481 V16   Use *  Keep     rdi  |     |     |     |V15 a|     |V3  a|V16 i|     |     |
314.#482 I85   Def    Alloc    rcx  |     |I85 a|     |V15 a|     |V3  a|     |     |     |
317.#483 rcx   Fixd   Keep     rcx  |     |I85 a|     |V15 a|     |V3  a|     |     |     |
317.#484 I85   Use *  Keep     rcx  |     |I85 i|     |V15 a|     |V3  a|     |     |     |
317.#485 rdx   Fixd   Keep     rdx  |     |     |     |V15 a|     |V3  a|     |     |     |
317.#486 V15   Use *  Copy     rdx  |     |     |V15 i|V15 i|     |V3  a|     |     |     |
318.#487 rax   Kill   Keep     rax  |     |     |     |     |     |V3  a|     |     |     |
318.#488 rcx   Kill   Keep     rcx  |     |     |     |     |     |V3  a|     |     |     |
318.#489 rdx   Kill   Keep     rdx  |     |     |     |     |     |V3  a|     |     |     |
318.#490 r8    Kill   Keep     r8   |     |     |     |     |     |V3  a|     |     |     |
318.#491 r9    Kill   Keep     r9   |     |     |     |     |     |V3  a|     |     |     |
318.#492 r10   Kill   Keep     r10  |     |     |     |     |     |V3  a|     |     |     |
318.#493 r11   Kill   Keep     r11  |     |     |     |     |     |V3  a|     |     |     |
318.#494 mm0   Kill   Keep     mm0  |     |     |     |     |     |V3  a|     |     |     |
318.#495 mm1   Kill   Keep     mm1  |     |     |     |     |     |V3  a|     |     |     |
318.#496 mm2   Kill   Keep     mm2  |     |     |     |     |     |V3  a|     |     |     |
318.#497 mm3   Kill   Keep     mm3  |     |     |     |     |     |V3  a|     |     |     |
318.#498 mm4   Kill   Keep     mm4  |     |     |     |     |     |V3  a|     |     |     |
318.#499 mm5   Kill   Keep     mm5  |     |     |     |     |     |V3  a|     |     |     |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
319.#500 BB4  PredBB3               |     |     |     |     |     |V3  a|     |     |     |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
329.#501 BB5  PredBB4               |     |     |     |     |     |V3  a|     |     |     |
332.#502 I86   Def    Alloc    rcx  |     |I86 a|     |     |     |V3  a|     |     |     |
333.#503 rcx   Fixd   Keep     rcx  |     |I86 a|     |     |     |V3  a|     |     |     |
333.#504 I86   Use *  Keep     rcx  |     |I86 i|     |     |     |V3  a|     |     |     |
334.#505 rcx   Fixd   Keep     rcx  |     |     |     |     |     |V3  a|     |     |     |
334.#506 I87   Def    Alloc    rcx  |     |I87 a|     |     |     |V3  a|     |     |     |
335.#507 rcx   Fixd   Keep     rcx  |     |I87 a|     |     |     |V3  a|     |     |     |
335.#508 I87   Use *  Keep     rcx  |     |I87 i|     |     |     |V3  a|     |     |     |
336.#509 rax   Kill   Keep     rax  |     |     |     |     |     |V3  a|     |     |     |
336.#510 rcx   Kill   Keep     rcx  |     |     |     |     |     |V3  a|     |     |     |
336.#511 rdx   Kill   Keep     rdx  |     |     |     |     |     |V3  a|     |     |     |
336.#512 r8    Kill   Keep     r8   |     |     |     |     |     |V3  a|     |     |     |
336.#513 r9    Kill   Keep     r9   |     |     |     |     |     |V3  a|     |     |     |
336.#514 r10   Kill   Keep     r10  |     |     |     |     |     |V3  a|     |     |     |
336.#515 r11   Kill   Keep     r11  |     |     |     |     |     |V3  a|     |     |     |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
337.#516 BB6  PredBB4               |     |     |     |     |     |V3  a|     |     |     |
345.#517 V3    Use *  Keep     rsi  |     |     |     |     |     |V3  i|     |     |     |
346.#518 I88   Def    Alloc    rsi  |     |     |     |     |     |I88 a|     |     |     |
347.#519 I88   Use *  Keep     rsi  |     |     |     |     |     |I88 i|     |     |     |
348.#520 V3    Def    Alloc    rsi  |     |     |     |     |     |V3  a|     |     |     |
355.#521 V3    Use    Keep     rsi  |     |     |     |     |     |V3  a|     |     |     |
359.#522 V3    ExpU                 |     |     |     |     |     |V3  a|     |     |     |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
359.#523 BB7  PredBB1               |     |     |     |     |     |     |     |     |     |
364.#524 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
364.#525 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
364.#526 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
364.#527 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
364.#528 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
364.#529 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
364.#530 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
364.#531 rax   Fixd   Keep     rax  |     |     |     |     |     |     |     |     |     |
364.#532 I89   Def    Alloc    rax  |I89 a|     |     |     |     |     |     |     |     |
365.#533 I89   Use *  Keep     rax  |I89 i|     |     |     |     |     |     |     |     |
370.#534 I90   Def    Alloc    rcx  |     |I90 a|     |     |     |     |     |     |     |
371.#535 rcx   Fixd   Keep     rcx  |     |I90 a|     |     |     |     |     |     |     |
371.#536 I90   Use *  Keep     rcx  |     |I90 i|     |     |     |     |     |     |     |
372.#537 rcx   Fixd   Keep     rcx  |     |     |     |     |     |     |     |     |     |
372.#538 I91   Def    Alloc    rcx  |     |I91 a|     |     |     |     |     |     |     |
373.#539 rcx   Fixd   Keep     rcx  |     |I91 a|     |     |     |     |     |     |     |
373.#540 I91   Use *  Keep     rcx  |     |I91 i|     |     |     |     |     |     |     |
374.#541 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
374.#542 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
374.#543 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
374.#544 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
374.#545 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
374.#546 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
374.#547 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
374.#548 rax   Fixd   Keep     rax  |     |     |     |     |     |     |     |     |     |
374.#549 I92   Def    Alloc    rax  |I92 a|     |     |     |     |     |     |     |     |
375.#550 I92   Use *  Keep     rax  |I92 i|     |     |     |     |     |     |     |     |
376.#551 V23   Def    Alloc    rcx  |     |V23 a|     |     |     |     |     |     |     |
379.#552 rcx   Fixd   Keep     rcx  |     |V23 a|     |     |     |     |     |     |     |
379.#553 V23   Use *  Keep     rcx  |     |V23 i|     |     |     |     |     |     |     |
380.#554 rcx   Fixd   Keep     rcx  |     |     |     |     |     |     |     |     |     |
380.#555 I93   Def    Alloc    rcx  |     |I93 a|     |     |     |     |     |     |     |
382.#556 C94   Def    Alloc    rdx  |     |I93 a|C94 a|     |     |     |     |     |     |
383.#557 C94   Use *  Keep     rdx  |     |I93 a|C94 i|     |     |     |     |     |     |
384.#558 I95   Def    Alloc    rdx  |     |I93 a|I95 a|     |     |     |     |     |     |
385.#559 rdx   Fixd   Keep     rdx  |     |I93 a|I95 a|     |     |     |     |     |     |
385.#560 I95   Use *  Keep     rdx  |     |I93 a|I95 i|     |     |     |     |     |     |
386.#561 rdx   Fixd   Keep     rdx  |     |I93 a|     |     |     |     |     |     |     |
386.#562 I96   Def    Alloc    rdx  |     |I93 a|I96 a|     |     |     |     |     |     |
387.#563 rcx   Fixd   Keep     rcx  |     |I93 a|I96 a|     |     |     |     |     |     |
387.#564 I93   Use *  Keep     rcx  |     |I93 i|I96 a|     |     |     |     |     |     |
387.#565 rdx   Fixd   Keep     rdx  |     |     |I96 a|     |     |     |     |     |     |
387.#566 I96   Use *  Keep     rdx  |     |     |I96 i|     |     |     |     |     |     |
388.#567 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
388.#568 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
388.#569 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
388.#570 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
388.#571 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
388.#572 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
388.#573 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
388.#574 rax   Fixd   Keep     rax  |     |     |     |     |     |     |     |     |     |
388.#575 I97   Def    Alloc    rax  |I97 a|     |     |     |     |     |     |     |     |
389.#576 rcx   Fixd   Keep     rcx  |I97 a|     |     |     |     |     |     |     |     |
                      Move     rcx  |     |I97 i|     |     |     |     |     |     |     |
390.#578 rcx   Fixd   Keep     rcx  |     |     |     |     |     |     |     |     |     |
390.#579 I98   Def    Alloc    rcx  |     |I98 a|     |     |     |     |     |     |     |
391.#580 rcx   Fixd   Keep     rcx  |     |I98 a|     |     |     |     |     |     |     |
391.#581 I98   Use *  Keep     rcx  |     |I98 i|     |     |     |     |     |     |     |
392.#582 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
392.#583 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
392.#584 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
392.#585 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
392.#586 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
392.#587 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
392.#588 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
393.#589 BB8  PredBB7               |     |     |     |     |     |     |     |     |     |
401.#590 V0    Use    ReLod    rdx  |     |     |V0  a|     |     |     |     |     |     |
                      Keep     rdx  |     |     |V0  i|     |     |     |     |     |     |
                      Spill    rdx  |     |     |V0  i|     |     |     |     |     |     |
402.#591 I99   Def    Alloc    rcx  |     |I99 a|     |     |     |     |     |     |     |
403.#592 I99   Use *  Keep     rcx  |     |I99 i|     |     |     |     |     |     |     |
408.#593 C100  Def    Alloc    rcx  |     |C100a|     |     |     |     |     |     |     |
409.#594 C100  Use *  Keep     rcx  |     |C100i|     |     |     |     |     |     |     |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
411.#595 BB9  PredBB8               |     |     |     |     |     |     |     |     |     |
416.#596 I101  Def    Alloc    rdx  |     |     |I101a|     |     |     |     |     |     |
417.#597 rdx   Fixd   Keep     rdx  |     |     |I101a|     |     |     |     |     |     |
417.#598 I101  Use *  Keep     rdx  |     |     |I101i|     |     |     |     |     |     |
418.#599 rdx   Fixd   Keep     rdx  |     |     |     |     |     |     |     |     |     |
418.#600 I102  Def    Alloc    rdx  |     |     |I102a|     |     |     |     |     |     |
420.#601 I103  Def    Alloc    rcx  |     |I103a|I102a|     |     |     |     |     |     |
421.#602 rcx   Fixd   Keep     rcx  |     |I103a|I102a|     |     |     |     |     |     |
421.#603 I103  Use *  Keep     rcx  |     |I103i|I102a|     |     |     |     |     |     |
422.#604 rcx   Fixd   Keep     rcx  |     |     |I102a|     |     |     |     |     |     |
422.#605 I104  Def    Alloc    rcx  |     |I104a|I102a|     |     |     |     |     |     |
423.#606 rdx   Fixd   Keep     rdx  |     |I104a|I102a|     |     |     |     |     |     |
423.#607 I102  Use *  Keep     rdx  |     |I104a|I102i|     |     |     |     |     |     |
423.#608 rcx   Fixd   Keep     rcx  |     |I104a|     |     |     |     |     |     |     |
423.#609 I104  Use *  Keep     rcx  |     |I104i|     |     |     |     |     |     |     |
424.#610 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
424.#611 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
424.#612 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
424.#613 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
424.#614 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
424.#615 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
424.#616 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
431.#617 V0    Use    ReLod    rdx  |     |     |V0  a|     |     |     |     |     |     |
                      Keep     rdx  |     |     |V0  i|     |     |     |     |     |     |
                      Spill    rdx  |     |     |V0  i|     |     |     |     |     |     |
432.#618 I105  Def    Alloc    rcx  |     |I105a|     |     |     |     |     |     |     |
433.#619 I105  Use *  Keep     rcx  |     |I105i|     |     |     |     |     |     |     |
434.#620 V29   Def    Alloc    rcx  |     |V29 a|     |     |     |     |     |     |     |
439.#621 V29   Use    Keep     rcx  |     |V29 a|     |     |     |     |     |     |     |
440.#622 I106  Def    Alloc    rax  |I106a|V29 a|     |     |     |     |     |     |     |
447.#623 I106  Use *  Keep     rax  |I106i|V29 a|     |     |     |     |     |     |     |
447.#624 V29   Use *  Keep     rcx  |     |V29 i|     |     |     |     |     |     |     |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
451.#625 BB10 PredBB9               |     |     |     |     |     |     |     |     |     |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
461.#626 BB11 PredBB10              |     |     |     |     |     |     |     |     |     |
464.#627 I107  Def    Alloc    rcx  |     |I107a|     |     |     |     |     |     |     |
465.#628 rcx   Fixd   Keep     rcx  |     |I107a|     |     |     |     |     |     |     |
465.#629 I107  Use *  Keep     rcx  |     |I107i|     |     |     |     |     |     |     |
466.#630 rcx   Fixd   Keep     rcx  |     |     |     |     |     |     |     |     |     |
466.#631 I108  Def    Alloc    rcx  |     |I108a|     |     |     |     |     |     |     |
467.#632 rcx   Fixd   Keep     rcx  |     |I108a|     |     |     |     |     |     |     |
467.#633 I108  Use *  Keep     rcx  |     |I108i|     |     |     |     |     |     |     |
468.#634 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
468.#635 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
468.#636 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
468.#637 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
468.#638 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
468.#639 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
468.#640 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
469.#641 BB12 PredBB10              |     |     |     |     |     |     |     |     |     |
474.#642 C109  Def    Alloc    rcx  |     |C109a|     |     |     |     |     |     |     |
475.#643 rcx   Fixd   Keep     rcx  |     |C109a|     |     |     |     |     |     |     |
475.#644 C109  Use *  Keep     rcx  |     |C109i|     |     |     |     |     |     |     |
476.#645 rcx   Fixd   Keep     rcx  |     |     |     |     |     |     |     |     |     |
476.#646 I110  Def    Alloc    rcx  |     |I110a|     |     |     |     |     |     |     |
477.#647 rcx   Fixd   Keep     rcx  |     |I110a|     |     |     |     |     |     |     |
477.#648 I110  Use *  Keep     rcx  |     |I110i|     |     |     |     |     |     |     |
478.#649 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
478.#650 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
478.#651 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
478.#652 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
478.#653 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
478.#654 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
478.#655 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
479.#656 BB13 PredBB9               |     |     |     |     |     |     |     |     |     |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
481.#657 BB30 PredBB0               |     |     |     |     |     |     |     |     |     |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
493.#658 BB31 PredBB30              |     |     |     |     |     |     |     |     |     |
498.#659 I111  Def    Alloc    rcx  |     |I111a|     |     |     |     |     |     |     |
499.#660 rcx   Fixd   Keep     rcx  |     |I111a|     |     |     |     |     |     |     |
499.#661 I111  Use *  Keep     rcx  |     |I111i|     |     |     |     |     |     |     |
500.#662 rcx   Fixd   Keep     rcx  |     |     |     |     |     |     |     |     |     |
500.#663 I112  Def    Alloc    rcx  |     |I112a|     |     |     |     |     |     |     |
501.#664 rcx   Fixd   Keep     rcx  |     |I112a|     |     |     |     |     |     |     |
501.#665 I112  Use *  Keep     rcx  |     |I112i|     |     |     |     |     |     |     |
502.#666 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
502.#667 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
502.#668 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
502.#669 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
502.#670 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
502.#671 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
502.#672 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
503.#673 BB32 PredBB30              |     |     |     |     |     |     |     |     |     |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
509.#674 BB14 PredBB0               |     |     |     |     |     |     |     |     |     |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
511.#675 BB15 PredBB0               |     |     |     |     |     |     |     |     |     |
516.#676 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
516.#677 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
516.#678 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
516.#679 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
516.#680 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
516.#681 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
516.#682 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
516.#683 rax   Fixd   Keep     rax  |     |     |     |     |     |     |     |     |     |
516.#684 I113  Def    Alloc    rax  |I113a|     |     |     |     |     |     |     |     |
517.#685 I113  Use *  Keep     rax  |I113i|     |     |     |     |     |     |     |     |
522.#686 I114  Def    Alloc    rcx  |     |I114a|     |     |     |     |     |     |     |
523.#687 rcx   Fixd   Keep     rcx  |     |I114a|     |     |     |     |     |     |     |
523.#688 I114  Use *  Keep     rcx  |     |I114i|     |     |     |     |     |     |     |
524.#689 rcx   Fixd   Keep     rcx  |     |     |     |     |     |     |     |     |     |
524.#690 I115  Def    Alloc    rcx  |     |I115a|     |     |     |     |     |     |     |
525.#691 rcx   Fixd   Keep     rcx  |     |I115a|     |     |     |     |     |     |     |
525.#692 I115  Use *  Keep     rcx  |     |I115i|     |     |     |     |     |     |     |
526.#693 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
526.#694 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
526.#695 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
526.#696 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
526.#697 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
526.#698 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
526.#699 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
526.#700 rax   Fixd   Keep     rax  |     |     |     |     |     |     |     |     |     |
526.#701 I116  Def    Alloc    rax  |I116a|     |     |     |     |     |     |     |     |
527.#702 I116  Use *  Keep     rax  |I116i|     |     |     |     |     |     |     |     |
528.#703 V24   Def    Alloc    rcx  |     |V24 a|     |     |     |     |     |     |     |
531.#704 rcx   Fixd   Keep     rcx  |     |V24 a|     |     |     |     |     |     |     |
531.#705 V24   Use *  Keep     rcx  |     |V24 i|     |     |     |     |     |     |     |
532.#706 rcx   Fixd   Keep     rcx  |     |     |     |     |     |     |     |     |     |
532.#707 I117  Def    Alloc    rcx  |     |I117a|     |     |     |     |     |     |     |
534.#708 C118  Def    Alloc    rdx  |     |I117a|C118a|     |     |     |     |     |     |
535.#709 C118  Use *  Keep     rdx  |     |I117a|C118i|     |     |     |     |     |     |
536.#710 I119  Def    Alloc    rdx  |     |I117a|I119a|     |     |     |     |     |     |
537.#711 rdx   Fixd   Keep     rdx  |     |I117a|I119a|     |     |     |     |     |     |
537.#712 I119  Use *  Keep     rdx  |     |I117a|I119i|     |     |     |     |     |     |
538.#713 rdx   Fixd   Keep     rdx  |     |I117a|     |     |     |     |     |     |     |
538.#714 I120  Def    Alloc    rdx  |     |I117a|I120a|     |     |     |     |     |     |
539.#715 rcx   Fixd   Keep     rcx  |     |I117a|I120a|     |     |     |     |     |     |
539.#716 I117  Use *  Keep     rcx  |     |I117i|I120a|     |     |     |     |     |     |
539.#717 rdx   Fixd   Keep     rdx  |     |     |I120a|     |     |     |     |     |     |
539.#718 I120  Use *  Keep     rdx  |     |     |I120i|     |     |     |     |     |     |
540.#719 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
540.#720 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
540.#721 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
540.#722 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
540.#723 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
540.#724 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
540.#725 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
540.#726 rax   Fixd   Keep     rax  |     |     |     |     |     |     |     |     |     |
540.#727 I121  Def    Alloc    rax  |I121a|     |     |     |     |     |     |     |     |
541.#728 rcx   Fixd   Keep     rcx  |I121a|     |     |     |     |     |     |     |     |
                      Move     rcx  |     |I121i|     |     |     |     |     |     |     |
542.#730 rcx   Fixd   Keep     rcx  |     |     |     |     |     |     |     |     |     |
542.#731 I122  Def    Alloc    rcx  |     |I122a|     |     |     |     |     |     |     |
543.#732 rcx   Fixd   Keep     rcx  |     |I122a|     |     |     |     |     |     |     |
543.#733 I122  Use *  Keep     rcx  |     |I122i|     |     |     |     |     |     |     |
544.#734 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
544.#735 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
544.#736 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
544.#737 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
544.#738 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
544.#739 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
544.#740 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
548.#741 C123  Def    Alloc    rcx  |     |C123a|     |     |     |     |     |     |     |
549.#742 C123  Use *  Keep     rcx  |     |C123i|     |     |     |     |     |     |     |
550.#743 I124  Def    Alloc    rcx  |     |I124a|     |     |     |     |     |     |     |
551.#744 rcx   Fixd   Keep     rcx  |     |I124a|     |     |     |     |     |     |     |
551.#745 I124  Use *  Keep     rcx  |     |I124i|     |     |     |     |     |     |     |
552.#746 rcx   Fixd   Keep     rcx  |     |     |     |     |     |     |     |     |     |
552.#747 I125  Def    Alloc    rcx  |     |I125a|     |     |     |     |     |     |     |
553.#748 rcx   Fixd   Keep     rcx  |     |I125a|     |     |     |     |     |     |     |
553.#749 I125  Use *  Keep     rcx  |     |I125i|     |     |     |     |     |     |     |
554.#750 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
554.#751 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
554.#752 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
554.#753 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
554.#754 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
554.#755 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
554.#756 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
558.#757 C126  Def    Alloc    rcx  |     |C126a|     |     |     |     |     |     |     |
559.#758 C126  Use *  Keep     rcx  |     |C126i|     |     |     |     |     |     |     |
560.#759 I127  Def    Alloc    rcx  |     |I127a|     |     |     |     |     |     |     |
561.#760 rcx   Fixd   Keep     rcx  |     |I127a|     |     |     |     |     |     |     |
561.#761 I127  Use *  Keep     rcx  |     |I127i|     |     |     |     |     |     |     |
562.#762 rcx   Fixd   Keep     rcx  |     |     |     |     |     |     |     |     |     |
562.#763 I128  Def    Alloc    rcx  |     |I128a|     |     |     |     |     |     |     |
563.#764 rcx   Fixd   Keep     rcx  |     |I128a|     |     |     |     |     |     |     |
563.#765 I128  Use *  Keep     rcx  |     |I128i|     |     |     |     |     |     |     |
564.#766 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
564.#767 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
564.#768 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
564.#769 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
564.#770 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
564.#771 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
564.#772 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
568.#773 C129  Def    Alloc    rcx  |     |C129a|     |     |     |     |     |     |     |
569.#774 C129  Use *  Keep     rcx  |     |C129i|     |     |     |     |     |     |     |
570.#775 I130  Def    Alloc    rcx  |     |I130a|     |     |     |     |     |     |     |
571.#776 rcx   Fixd   Keep     rcx  |     |I130a|     |     |     |     |     |     |     |
571.#777 I130  Use *  Keep     rcx  |     |I130i|     |     |     |     |     |     |     |
572.#778 rcx   Fixd   Keep     rcx  |     |     |     |     |     |     |     |     |     |
572.#779 I131  Def    Alloc    rcx  |     |I131a|     |     |     |     |     |     |     |
573.#780 rcx   Fixd   Keep     rcx  |     |I131a|     |     |     |     |     |     |     |
573.#781 I131  Use *  Keep     rcx  |     |I131i|     |     |     |     |     |     |     |
574.#782 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
574.#783 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
574.#784 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
574.#785 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
574.#786 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
574.#787 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
574.#788 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
578.#789 C132  Def    Alloc    rcx  |     |C132a|     |     |     |     |     |     |     |
579.#790 C132  Use *  Keep     rcx  |     |C132i|     |     |     |     |     |     |     |
580.#791 I133  Def    Alloc    rcx  |     |I133a|     |     |     |     |     |     |     |
581.#792 rcx   Fixd   Keep     rcx  |     |I133a|     |     |     |     |     |     |     |
581.#793 I133  Use *  Keep     rcx  |     |I133i|     |     |     |     |     |     |     |
582.#794 rcx   Fixd   Keep     rcx  |     |     |     |     |     |     |     |     |     |
582.#795 I134  Def    Alloc    rcx  |     |I134a|     |     |     |     |     |     |     |
583.#796 rcx   Fixd   Keep     rcx  |     |I134a|     |     |     |     |     |     |     |
583.#797 I134  Use *  Keep     rcx  |     |I134i|     |     |     |     |     |     |     |
584.#798 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
584.#799 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
584.#800 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
584.#801 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
584.#802 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
584.#803 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
584.#804 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
585.#805 BB19 PredBB15              |     |     |     |     |     |     |     |     |     |
588.#806 I135  Def    Alloc    rcx  |     |I135a|     |     |     |     |     |     |     |
589.#807 rcx   Fixd   Keep     rcx  |     |I135a|     |     |     |     |     |     |     |
589.#808 I135  Use *  Keep     rcx  |     |I135i|     |     |     |     |     |     |     |
590.#809 rcx   Fixd   Keep     rcx  |     |     |     |     |     |     |     |     |     |
590.#810 I136  Def    Alloc    rcx  |     |I136a|     |     |     |     |     |     |     |
592.#811 C137  Def    Alloc    rdx  |     |I136a|C137a|     |     |     |     |     |     |
593.#812 rdx   Fixd   Keep     rdx  |     |I136a|C137a|     |     |     |     |     |     |
593.#813 C137  Use *  Keep     rdx  |     |I136a|C137i|     |     |     |     |     |     |
594.#814 rdx   Fixd   Keep     rdx  |     |I136a|     |     |     |     |     |     |     |
594.#815 I138  Def    Alloc    rdx  |     |I136a|I138a|     |     |     |     |     |     |
595.#816 rcx   Fixd   Keep     rcx  |     |I136a|I138a|     |     |     |     |     |     |
595.#817 I136  Use *  Keep     rcx  |     |I136i|I138a|     |     |     |     |     |     |
595.#818 rdx   Fixd   Keep     rdx  |     |     |I138a|     |     |     |     |     |     |
595.#819 I138  Use *  Keep     rdx  |     |     |I138i|     |     |     |     |     |     |
596.#820 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
596.#821 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
596.#822 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
596.#823 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
596.#824 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
596.#825 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
596.#826 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
605.#827 BB20 PredBB19              |     |     |     |     |     |     |     |     |     |
610.#828 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
610.#829 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
610.#830 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
610.#831 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
610.#832 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
610.#833 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
610.#834 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
610.#835 rax   Fixd   Keep     rax  |     |     |     |     |     |     |     |     |     |
610.#836 I139  Def    Alloc    rax  |I139a|     |     |     |     |     |     |     |     |
611.#837 rcx   Fixd   Keep     rcx  |I139a|     |     |     |     |     |     |     |     |
                      Move     rcx  |     |I139i|     |     |     |     |     |     |     |
612.#839 rcx   Fixd   Keep     rcx  |     |     |     |     |     |     |     |     |     |
612.#840 I140  Def    Alloc    rcx  |     |I140a|     |     |     |     |     |     |     |
613.#841 rcx   Fixd   Keep     rcx  |     |I140a|     |     |     |     |     |     |     |
613.#842 I140  Use *  Keep     rcx  |     |I140i|     |     |     |     |     |     |     |
614.#843 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
614.#844 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
614.#845 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
614.#846 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
614.#847 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
614.#848 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
614.#849 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
615.#850 BB21 PredBB19              |     |     |     |     |     |     |     |     |     |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
625.#851 BB22 PredBB21              |     |     |     |     |     |     |     |     |     |
630.#852 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
630.#853 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
630.#854 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
630.#855 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
630.#856 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
630.#857 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
630.#858 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
631.#859 BB23 PredBB21              |     |     |     |     |     |     |     |     |     |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
641.#860 BB24 PredBB23              |     |     |     |     |     |     |     |     |     |
651.#861 V0    Use    ReLod    rdx  |     |     |V0  a|     |     |     |     |     |     |
                      Keep     rdx  |     |     |V0  a|     |     |     |     |     |     |
653.#0   V0    Move            STK  |     |     |     |     |     |     |     |     |     |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
653.#862 BB25 PredBB23              |     |     |     |     |     |     |     |     |     |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
663.#863 BB26 PredBB15              |     |     |     |     |     |     |     |     |     |
673.#864 V0    Use *  ReLod    rdx  |     |     |V0  a|     |     |     |     |     |     |
                      Keep     rdx  |     |     |V0  i|     |     |     |     |     |     |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
679.#865 BB27 PredBB0               |     |     |     |     |     |     |     |     |     |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
691.#866 BB28 PredBB27              |     |     |     |     |     |     |     |     |     |
696.#867 I141  Def    Alloc    rcx  |     |I141a|     |     |     |     |     |     |     |
697.#868 rcx   Fixd   Keep     rcx  |     |I141a|     |     |     |     |     |     |     |
697.#869 I141  Use *  Keep     rcx  |     |I141i|     |     |     |     |     |     |     |
698.#870 rcx   Fixd   Keep     rcx  |     |     |     |     |     |     |     |     |     |
698.#871 I142  Def    Alloc    rcx  |     |I142a|     |     |     |     |     |     |     |
699.#872 rcx   Fixd   Keep     rcx  |     |I142a|     |     |     |     |     |     |     |
699.#873 I142  Use *  Keep     rcx  |     |I142i|     |     |     |     |     |     |     |
700.#874 rax   Kill   Keep     rax  |     |     |     |     |     |     |     |     |     |
700.#875 rcx   Kill   Keep     rcx  |     |     |     |     |     |     |     |     |     |
700.#876 rdx   Kill   Keep     rdx  |     |     |     |     |     |     |     |     |     |
700.#877 r8    Kill   Keep     r8   |     |     |     |     |     |     |     |     |     |
700.#878 r9    Kill   Keep     r9   |     |     |     |     |     |     |     |     |     |
700.#879 r10   Kill   Keep     r10  |     |     |     |     |     |     |     |     |     |
700.#880 r11   Kill   Keep     r11  |     |     |     |     |     |     |     |     |     |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
Loc RP#  Name  Type  Action    Reg  |rax  |rcx  |rdx  |rbx  |rbp  |rsi  |rdi  |r8   |r9   |
------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+
701.#881 BB29 PredBB27              |     |     |     |     |     |     |     |     |     |

Recording the maximum number of concurrent spills:

----------
LSRA Stats
----------
Register selection order: ABCDEFGHIJKLMNOPQ
Total Tracked Vars:  19
Total Reg Cand Vars: 18
Total number of Intervals: 142
Total number of RefPositions: 881
Total Number of spill temps created: 0
..........
BB00 [  100.00]: SpillCount = 1, OWN_PREFERENCE = 1
BB01 [  100.00]: SpillCount = 3, CopyReg = 2, THIS_ASSIGNED = 2, COVERS = 2, BEST_FIT = 5, REG_ORDER = 6
BB02 [  800.00]: SpillCount = 1, THIS_ASSIGNED = 1, BEST_FIT = 2
BB03 [  800.00]: SpillCount = 3, THIS_ASSIGNED = 2, COVERS = 4, BEST_FIT = 2, REG_ORDER = 6
BB06 [  800.00]: COVERS = 1
BB07 [  100.00]: CopyReg = 1, BEST_FIT = 2
BB08 [  800.00]: SpillCount = 1, THIS_ASSIGNED = 1, BEST_FIT = 2
BB09 [  800.00]: SpillCount = 2, THIS_ASSIGNED = 1, COVERS = 1, BEST_FIT = 1, REG_ORDER = 1
BB15 [  100.00]: CopyReg = 1, BEST_FIT = 6
BB20 [  800.00]: CopyReg = 1
BB24 [  100.00]: ResolutionMovs = 1, THIS_ASSIGNED = 1
..........
Total SpillCount : 11   Weighted: 6000.000000
Total CopyReg : 5   Weighted: 1200.000000
Total ResolutionMovs : 1   Weighted: 100.000000
Total SplitEdges : 0   Weighted: 0.000000
..........
Total THIS_ASSIGNED [# 3] : 8   Weighted: 4300.000000
Total COVERS [# 4] : 8   Weighted: 5000.000000
Total OWN_PREFERENCE [# 5] : 1   Weighted: 100.000000
Total BEST_FIT [#11] : 20   Weighted: 6900.000000
Total REG_ORDER [#13] : 13   Weighted: 6200.000000

TUPLE STYLE DUMP WITH REGISTER ASSIGNMENTS
Incoming Parameters:  V00(rcx=>STK)
BB01 [000..072), preds={} succs={BB02}
=====
  N003.                    IL_OFFSET IL offset: 0x0
  N005. rax             =  CALL     
  N007.                    V02 MEM; rax
  N009.                    IL_OFFSET IL offset: 0x6
  N011. rcx             =  LCL_VAR_ADDR V02 loc0          rcx
                                                      long   V02._dateData (offs=0x00) -> V17 tmp10        
  N013. rcx             =  PUTARG_REG; rcx
  N015. rax             =  CALL     ; rcx
* N017.                    V21(rcx); rax
  N019.                    V21(rcx*)
  N021. rcx             =  PUTARG_REG; rcx*
  N023. rdx             =  CNS_INT(h) 0x750031F0 "	 Created list"
  N025. rdx             =  IND      ; rdx
  N027. rdx             =  PUTARG_REG; rdx
  N029. rax             =  CALL     ; rcx,rdx
  N000. rcx             =  COPY     ; rax
  N031. rcx             =  PUTARG_REG; rcx
  N033.                    CALL     ; rcx
  N035.                    IL_OFFSET IL offset: 0x1c
  N037. rcx             =  CNS_INT(h) 0x7ffdb3ee2350 method
  N039. rcx             =  PUTARG_REG; rcx
  N041. rax             =  CALL help; rcx
* N043.                    V08(rsi); rax
  N045.                    V08(rsi)
  N047. rcx             =  PUTARG_REG; rsi
  N049.                    CALL     ; rcx
  N051.                    IL_OFFSET IL offset: 0x22
S N053.                    V00(rdx)R
  N055. rcx             =  LEA(b+8) ; rdx
  N057.                    V08(rsi*)
  N059.                    STOREIND ; rcx,rsi*
  N061.                    IL_OFFSET IL offset: 0x27
  N063. rcx             =  CNS_INT(h) 0x7ffdb3b058b8 token
  N065. rcx             =  PUTARG_REG; rcx
  N067. rax             =  CALL help; rcx
* N069.                    V09(rsi); rax
S N071.                    V00(rdx)R
  N073. STK             =  LEA(b+8) ; rdx
  N075. rcx             =  IND      ; STK
  N077. STK             =  LEA(b+8) ; rcx
  N079. rdi             =  IND      ; STK
* N081.                    V10(rdi); rdi
  N083.                    V09(rsi)
  N085. rcx             =  PUTARG_REG; rsi
  N087.                    CALL     ; rcx
  N089.                    IL_OFFSET IL offset: 0x37
  N091.                    V10(rdi*)
  N093. rcx             =  LEA(b+16); rdi*
  N095.                    V09(rsi*)
  N097.                    STOREIND ; rcx,rsi*
  N099.                    IL_OFFSET IL offset: 0x3c
  N101. rcx             =  CNS_INT(h) 0x7ffdb3ee6200 token
  N103. rcx             =  PUTARG_REG; rcx
  N105. rax             =  CALL help; rcx
* N107.                    V11(rsi); rax
  N109.                    V11(rsi)
  N111. rcx             =  PUTARG_REG; rsi
S N113.                    V00(rdx)R
  N115. rdx             =  PUTARG_REG; rdx
  N117. r8              =  CNS_INT(h) 0x7ffdb3b213f8 ftn
  N119. r8              =  PUTARG_REG; r8
  N121.                    CALL     ; rcx,rdx,r8
  N123.                    IL_OFFSET IL offset: 0x48
  N125. rcx             =  CNS_INT(h) 0x7ffdb3c84e80 token
  N127. rcx             =  PUTARG_REG; rcx
  N129. rax             =  CALL help; rcx
* N131.                    V12(rdi); rax
  N133.                    V12(rdi)
  N135. rcx             =  PUTARG_REG; rdi
  N137.                    V11(rsi*)
  N139. rdx             =  PUTARG_REG; rsi*
  N141.                    CALL     ; rcx,rdx
  N143.                    IL_OFFSET IL offset: 0x4d
  N145.                    V12(rdi*)
  N147. rcx             =  PUTARG_REG; rdi*
  N149.                    CALL     ; rcx
  N151.                    IL_OFFSET IL offset: 0x52
  N153. rax             =  CALL     
  N155.                    V02 MEM; rax
  N157.                    IL_OFFSET IL offset: 0x58
  N159. rcx             =  LCL_VAR_ADDR V02 loc0          rcx
                                                      long   V02._dateData (offs=0x00) -> V17 tmp10        
  N161. rcx             =  PUTARG_REG; rcx
  N163. rax             =  CALL     ; rcx
* N165.                    V22(rcx); rax
  N167.                    V22(rcx*)
  N169. rcx             =  PUTARG_REG; rcx*
  N171. rdx             =  CNS_INT(h) 0x750031F8 "	 Consumer thread started, adding items..."
  N173. rdx             =  IND      ; rdx
  N175. rdx             =  PUTARG_REG; rdx
  N177. rax             =  CALL     ; rcx,rdx
  N000. rcx             =  COPY     ; rax
  N179. rcx             =  PUTARG_REG; rcx
  N181.                    CALL     ; rcx
  N183.                    IL_OFFSET IL offset: 0x6e
  N185. rsi             =  CNS_INT   0
* N187.                    V03(rsi); rsi
Var=Reg end of BB01: V03=rsi 

BB02 [072..07B), preds={BB01,BB06} succs={BB03}
=====
Predecessor for variable locations: BB01
Var=Reg beg of BB02: V03=rsi 
  N191.                    IL_OFFSET IL offset: 0x72
S N193.                    V00(rdx)R
  N195. STK             =  LEA(b+8) ; rdx
  N197. rcx             =  IND      ; STK
  N199.                    V04 MEM; rcx
  N201.                    IL_OFFSET IL offset: 0x79
  N203. rcx             =  CNS_INT   0
  N205.                    V05 MEM; rcx
Var=Reg end of BB02: V03=rsi 

BB03 [07B..0CA), preds={BB02} succs={BB04}
=====
Predecessor for variable locations: BB02
Var=Reg beg of BB03: V03=rsi 
  N209.                    IL_OFFSET IL offset: 0x7b
  N211. rdx             =  LCL_VAR_ADDR V05 loc3          rdx
  N213. rdx             =  PUTARG_REG; rdx
  N215. rcx             =  V04 MEM
  N217. rcx             =  PUTARG_REG; rcx
  N219.                    CALL     ; rdx,rcx
  N221.                    IL_OFFSET IL offset: 0x83
  N223. rcx             =  CNS_INT(h) 0x7ffdb3ee58a8 method
  N225. rcx             =  PUTARG_REG; rcx
  N227. rax             =  CALL help; rcx
* N229.                    V13(rdi); rax
S N231.                    V00(rdx)R
  N233. STK             =  LEA(b+8) ; rdx
  N235. rcx             =  IND      ; STK
  N237. STK             =  LEA(b+8) ; rcx
  N239. rbx             =  IND      ; STK
* N241.                    V14(rbx); rbx
  N243.                    V13(rdi)
  N245. rcx             =  PUTARG_REG; rdi
  N247.                    CALL     ; rcx
  N249.                    IL_OFFSET IL offset: 0x93
  N251.                    V14(rbx*)
  N253. rcx             =  LEA(b+8) ; rbx*
  N255.                    V13(rdi*)
  N257.                    STOREIND ; rcx,rdi*
  N259.                    IL_OFFSET IL offset: 0x98
S N261.                    V00(rdx)R
  N263. STK             =  LEA(b+8) ; rdx
  N265. rcx             =  IND      ; STK
$ N267.                    V28(rcx)R; rcx
S N269.                    V28(rcx)
  N271. rcx             =  LEA(b+8) ; rcx
  N273.                    V28(rax*)R
  N275. STK             =  LEA(b+8) ; rax*
  N277. rax             =  IND      ; STK
  N279. STK             =  LEA(b+8) ; rax
  N281. rdi             =  IND      ; STK
* N283.                    V27(rdi); rdi
  N285.                    V27(rdi)
  N287.                    STOREIND ; rcx,rdi
  N289.                    IL_OFFSET IL offset: 0xb3
  N291. rcx             =  CNS_INT(h) 0x7ffdb3b058b8 token
  N293. rcx             =  PUTARG_REG; rcx
  N295. rax             =  CALL help; rcx
* N297.                    V15(rbx); rax
  N299.                    V27(rdi*)
* N301.                    V16(rdi); rdi*
  N303.                    V15(rbx)
  N305. rcx             =  PUTARG_REG; rbx
  N307.                    CALL     ; rcx
  N309.                    IL_OFFSET IL offset: 0xc3
  N311.                    V16(rdi*)
  N313. rcx             =  LEA(b+16); rdi*
  N315.                    V15(rbx*)
  N317.                    STOREIND ; rcx,rbx*
Var=Reg end of BB03: V03=rsi 

BB04 [0CA..0CD) -> BB06 (cond), preds={BB03} succs={BB05,BB06}
=====
Predecessor for variable locations: BB03
Var=Reg beg of BB04: V03=rsi 
  N321.                    V05 MEM
  N323.                    CNS_INT   0
  N325.                    EQ       
  N327.                    JTRUE    
Var=Reg end of BB04: V03=rsi 

BB05 [0CD..0D4), preds={BB04} succs={BB06}
=====
Predecessor for variable locations: BB04
Var=Reg beg of BB05: V03=rsi 
  N331. rcx*            =  V04 MEM
  N333. rcx             =  PUTARG_REG; rcx*
  N335.                    CALL     ; rcx
Var=Reg end of BB05: V03=rsi 

BB06 [0D4..0DD) -> BB02 (cond), preds={BB04,BB05} succs={BB07,BB02}
=====
Predecessor for variable locations: BB04
Var=Reg beg of BB06: V03=rsi 
  N339.                    IL_OFFSET IL offset: 0xd4
  N341.                    V03(rsi*)
  N343.                    CNS_INT   1
  N345. rsi             =  ADD      ; rsi*
* N347.                    V03(rsi); rsi
  N349.                    IL_OFFSET IL offset: 0xd8
  N351.                    V03(rsi)
  N353.                    CNS_INT   10
  N355.                    LT       ; rsi
  N357.                    JTRUE    
Var=Reg end of BB06: V03=rsi 

BB07 [0DD..0F9), preds={BB06} succs={BB08}
=====
Predecessor for variable locations: BB01
Var=Reg beg of BB07: none
  N361.                    IL_OFFSET IL offset: 0xdd
  N363. rax             =  CALL     
  N365.                    V02 MEM; rax
  N367.                    IL_OFFSET IL offset: 0xe3
  N369. rcx             =  LCL_VAR_ADDR V02 loc0          rcx
                                                      long   V02._dateData (offs=0x00) -> V17 tmp10        
  N371. rcx             =  PUTARG_REG; rcx
  N373. rax             =  CALL     ; rcx
* N375.                    V23(rcx); rax
  N377.                    V23(rcx*)
  N379. rcx             =  PUTARG_REG; rcx*
  N381. rdx             =  CNS_INT(h) 0x75003200 "	 Waiting for list processing to complete..."
  N383. rdx             =  IND      ; rdx
  N385. rdx             =  PUTARG_REG; rdx
  N387. rax             =  CALL     ; rcx,rdx
  N000. rcx             =  COPY     ; rax
  N389. rcx             =  PUTARG_REG; rcx
  N391.                    CALL     ; rcx
Var=Reg end of BB07: none

BB08 [0F9..102), preds={BB07,BB12} succs={BB09}
=====
Predecessor for variable locations: BB07
Var=Reg beg of BB08: none
  N395.                    IL_OFFSET IL offset: 0xf9
S N397.                    V00(rdx)R
  N399. STK             =  LEA(b+8) ; rdx
  N401. rcx             =  IND      ; STK
  N403.                    V04 MEM; rcx
  N405.                    IL_OFFSET IL offset: 0x100
  N407. rcx             =  CNS_INT   0
  N409.                    V05 MEM; rcx
Var=Reg end of BB08: none

BB09 [102..122) -> BB13 (cond), preds={BB08} succs={BB10,BB13}
=====
Predecessor for variable locations: BB08
Var=Reg beg of BB09: none
  N413.                    IL_OFFSET IL offset: 0x102
  N415. rdx             =  LCL_VAR_ADDR V05 loc3          rdx
  N417. rdx             =  PUTARG_REG; rdx
  N419. rcx             =  V04 MEM
  N421. rcx             =  PUTARG_REG; rcx
  N423.                    CALL     ; rdx,rcx
  N425.                    IL_OFFSET IL offset: 0x10a
S N427.                    V00(rdx)R
  N429. STK             =  LEA(b+8) ; rdx
  N431. rcx             =  IND      ; STK
* N433.                    V29(rcx); rcx
  N435.                    V29(rcx)
  N437. STK             =  LEA(b+8) ; rcx
  N439. rax             =  IND      ; STK
  N441.                    V29(rcx*)
  N443. STK             =  LEA(b+16); rcx*
  N445. STK             =  IND      ; STK
  N447.                    EQ       ; rax,STK
  N449.                    JTRUE    
Var=Reg end of BB09: none

BB10 [126..129) -> BB12 (cond), preds={BB09} succs={BB11,BB12}
=====
Predecessor for variable locations: BB09
Var=Reg beg of BB10: none
  N453.                    V05 MEM
  N455.                    CNS_INT   0
  N457.                    EQ       
  N459.                    JTRUE    
Var=Reg end of BB10: none

BB11 [129..130), preds={BB10} succs={BB12}
=====
Predecessor for variable locations: BB10
Var=Reg beg of BB11: none
  N463. rcx*            =  V04 MEM
  N465. rcx             =  PUTARG_REG; rcx*
  N467.                    CALL     ; rcx
Var=Reg end of BB11: none

BB12 [130..139) -> BB08 (always), preds={BB10,BB11} succs={BB08}
=====
Predecessor for variable locations: BB10
Var=Reg beg of BB12: none
  N471.                    IL_OFFSET IL offset: 0x130
  N473. rcx             =  CNS_INT   100
  N475. rcx             =  PUTARG_REG; rcx
  N477.                    CALL     ; rcx
Var=Reg end of BB12: none

BB13 [???..???) -> BB30 (callf), preds={BB09} succs={BB30}
=====
Predecessor for variable locations: BB09
Var=Reg beg of BB13: none
Var=Reg end of BB13: none

BB30 [126..129) -> BB32 (cond), preds={BB13} succs={BB31,BB32}
=====
Predecessor for variable locations: BB00
Var=Reg beg of BB30: none
  N483.                    IL_OFFSET IL offset: 0x126
  N485.                    V05 MEM
  N487.                    CNS_INT   0
  N489.                    EQ       
  N491.                    JTRUE    
Var=Reg end of BB30: none

BB31 [129..12F), preds={BB30} succs={BB32}
=====
Predecessor for variable locations: BB30
Var=Reg beg of BB31: none
  N495.                    IL_OFFSET IL offset: 0x129
  N497. rcx*            =  V04 MEM
  N499. rcx             =  PUTARG_REG; rcx*
  N501.                    CALL     ; rcx
Var=Reg end of BB31: none

BB32 [12F..130) (finret), preds={BB30,BB31} succs={BB14}
=====
Predecessor for variable locations: BB30
Var=Reg beg of BB32: none
  N505.                    IL_OFFSET IL offset: 0x12f
  N507.                    RETFILT  
Var=Reg end of BB32: none

BB14 [???..???) -> BB15 (ALWAYS), preds={BB32} succs={BB15}
=====
Predecessor for variable locations: BB00
Var=Reg beg of BB14: none
Var=Reg end of BB14: none

BB15 [139..17D), preds={BB14} succs={BB19}
=====
Predecessor for variable locations: BB00
Var=Reg beg of BB15: none
  N513.                    IL_OFFSET IL offset: 0x139
  N515. rax             =  CALL     
  N517.                    V02 MEM; rax
  N519.                    IL_OFFSET IL offset: 0x13f
  N521. rcx             =  LCL_VAR_ADDR V02 loc0          rcx
                                                      long   V02._dateData (offs=0x00) -> V17 tmp10        
  N523. rcx             =  PUTARG_REG; rcx
  N525. rax             =  CALL     ; rcx
* N527.                    V24(rcx); rax
  N529.                    V24(rcx*)
  N531. rcx             =  PUTARG_REG; rcx*
  N533. rdx             =  CNS_INT(h) 0x75003208 "	 Done.  Profiler is active, available options:"
  N535. rdx             =  IND      ; rdx
  N537. rdx             =  PUTARG_REG; rdx
  N539. rax             =  CALL     ; rcx,rdx
  N000. rcx             =  COPY     ; rax
  N541. rcx             =  PUTARG_REG; rcx
  N543.                    CALL     ; rcx
  N545.                    IL_OFFSET IL offset: 0x155
  N547. rcx             =  CNS_INT(h) 0x75003210 "   Q = quit"
  N549. rcx             =  IND      ; rcx
  N551. rcx             =  PUTARG_REG; rcx
  N553.                    CALL     ; rcx
  N555.                    IL_OFFSET IL offset: 0x15f
  N557. rcx             =  CNS_INT(h) 0x75003218 "   H = heap snapshot"
  N559. rcx             =  IND      ; rcx
  N561. rcx             =  PUTARG_REG; rcx
  N563.                    CALL     ; rcx
  N565.                    IL_OFFSET IL offset: 0x169
  N567. rcx             =  CNS_INT(h) 0x75003220 "   G = GC (max gen)"
  N569. rcx             =  IND      ; rcx
  N571. rcx             =  PUTARG_REG; rcx
  N573.                    CALL     ; rcx
  N575.                    IL_OFFSET IL offset: 0x173
  N577. rcx             =  CNS_INT(h) 0x75003228 "   R = clear the running flag to stop the consumer thread"
  N579. rcx             =  IND      ; rcx
  N581. rcx             =  PUTARG_REG; rcx
  N583.                    CALL     ; rcx
Var=Reg end of BB15: none

BB19 [17D..18F) -> BB21 (cond), preds={BB15,BB20,BB22,BB24,BB25} succs={BB20,BB21}
=====
Predecessor for variable locations: BB15
Var=Reg beg of BB19: none
  N587. rcx             =  LCL_VAR_ADDR V06 loc4          rcx
                                                      ushort V06._keyChar (offs=0x00) -> V18 tmp11        
                                                      int    V06._key (offs=0x04) -> V19 tmp12        
                                                      int    V06._mods (offs=0x08) -> V20 tmp13        
  N589. rcx             =  PUTARG_REG; rcx
  N591. rdx             =  CNS_INT   0
  N593. rdx             =  PUTARG_REG; rdx
  N595.                    CALL     ; rcx,rdx
  N597.                    V19 MEM
  N599.                    CNS_INT   71
  N601.                    NE       
  N603.                    JTRUE    
Var=Reg end of BB19: none

BB20 [18F..19B) -> BB19 (always), preds={BB19} succs={BB19}
=====
Predecessor for variable locations: BB19
Var=Reg beg of BB20: none
  N607.                    IL_OFFSET IL offset: 0x18f
  N609. rax             =  CALL     
  N000. rcx             =  COPY     ; rax
  N611. rcx             =  PUTARG_REG; rcx
  N613.                    CALL     ; rcx
Var=Reg end of BB20: none

BB21 [19B..1A6) -> BB23 (cond), preds={BB19} succs={BB22,BB23}
=====
Predecessor for variable locations: BB19
Var=Reg beg of BB21: none
  N617.                    V19 MEM
  N619.                    CNS_INT   72
  N621.                    NE       
  N623.                    JTRUE    
Var=Reg end of BB21: none

BB22 [1A6..1AD) -> BB19 (always), preds={BB21} succs={BB19}
=====
Predecessor for variable locations: BB21
Var=Reg beg of BB22: none
  N627.                    IL_OFFSET IL offset: 0x1a6
  N629.                    CALL     
Var=Reg end of BB22: none

BB23 [1AD..1B8) -> BB25 (cond), preds={BB21} succs={BB24,BB25}
=====
Predecessor for variable locations: BB21
Var=Reg beg of BB23: none
  N633.                    V19 MEM
  N635.                    CNS_INT   82
  N637.                    NE       
  N639.                    JTRUE    
Var=Reg end of BB23: none

BB24 [1B8..1C1) -> BB19 (always), preds={BB23} succs={BB19}
=====
Predecessor for variable locations: BB23
Var=Reg beg of BB24: none
  N643.                    IL_OFFSET IL offset: 0x1b8
  N645.                    V00(rdx)R
  N647. STK             =  LEA(b+16); rdx
  N649.                    CNS_INT   0
  N651.                    STOREIND ; STK
$ N001.                    V00(rdx)
Var=Reg end of BB24: none

BB25 [1C1..1CC) -> BB19 (cond), preds={BB23} succs={BB26,BB19}
=====
Predecessor for variable locations: BB23
Var=Reg beg of BB25: none
  N655.                    V19 MEM
  N657.                    CNS_INT   81
  N659.                    NE       
  N661.                    JTRUE    
Var=Reg end of BB25: none

BB26 [1CC..1D4) (return), preds={BB25} succs={}
=====
Predecessor for variable locations: BB15
Var=Reg beg of BB26: none
  N665.                    IL_OFFSET IL offset: 0x1cc
  N667.                    V00(rdx*)R
  N669. STK             =  LEA(b+16); rdx*
  N671.                    CNS_INT   0
  N673.                    STOREIND ; STK
  N675.                    IL_OFFSET IL offset: 0x1d3
  N677.                    RETURN   
Var=Reg end of BB26: none

BB27 [0CA..0CD) -> BB29 (cond), preds={} succs={BB28,BB29}
=====
Predecessor for variable locations: BB00
Var=Reg beg of BB27: none
  N681.                    IL_OFFSET IL offset: 0xca
  N683.                    V05 MEM
  N685.                    CNS_INT   0
  N687.                    EQ       
  N689.                    JTRUE    
Var=Reg end of BB27: none

BB28 [0CD..0D3), preds={BB27} succs={BB29}
=====
Predecessor for variable locations: BB27
Var=Reg beg of BB28: none
  N693.                    IL_OFFSET IL offset: 0xcd
  N695. rcx*            =  V04 MEM
  N697. rcx             =  PUTARG_REG; rcx*
  N699.                    CALL     ; rcx
Var=Reg end of BB28: none

BB29 [0D3..0D4) (finret), preds={BB27,BB28} succs={}
=====
Predecessor for variable locations: BB27
Var=Reg beg of BB29: none
  N703.                    IL_OFFSET IL offset: 0xd3
  N705.                    RETFILT  
Var=Reg end of BB29: none




*************** Finishing PHASE Linear scan register alloc
*************** In genGenerateCode()

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..072)                                     i hascall gcsafe newobj LIR 
BB02 [0001]  2       BB01,BB06             8     0 [072..07B)                                     i Loop gcsafe bwd bwd-target LIR 
BB03 [0002]  1  0    BB02                  8     0 [07B..0CA)                 T0      try { }     keep i try hascall gcsafe newobj bwd LIR 
BB04 [0038]  1       BB03                  8     0 [0CA..0CD)-> BB06 ( cond )                     keep i gcsafe bwd LIR cfb 
BB05 [0039]  1       BB04                  4     0 [0CD..0D4)                                     i hascall gcsafe bwd LIR 
BB06 [0006]  2       BB04,BB05             8     0 [0D4..0DD)-> BB02 ( cond )                     i gcsafe bwd LIR 
BB07 [0008]  1       BB06                  1       [0DD..0F9)                                     i hascall gcsafe LIR 
BB08 [0009]  2       BB07,BB12             8     1 [0F9..102)                                     i Loop gcsafe bwd bwd-target LIR 
BB09 [0010]  1  1    BB08                  8     1 [102..122)-> BB13 ( cond ) T1      try { }     keep i try hascall gcsafe bwd LIR 
BB10 [0041]  1       BB09                  8     1 [126..129)-> BB12 ( cond )                     keep i gcsafe bwd LIR cfb 
BB11 [0042]  1       BB10                  4     1 [129..130)                                     i hascall gcsafe bwd LIR 
BB12 [0016]  2       BB10,BB11             8     1 [130..139)-> BB08 (always)                     i hascall gcsafe bwd LIR 
BB13 [0030]  1       BB09                  1       [???..???)-> BB30 (callf )                     i internal gcsafe LIR 
BB14 [0031]  1       BB32                  1       [???..???)-> BB15 (ALWAYS)                     i internal gcsafe LIR KEEP 
BB15 [0017]  1       BB14                  1       [139..17D)                                     i hascall gcsafe LIR 
BB19 [0018]  5       BB15,BB20,BB22,BB24,BB25   8     5 [17D..18F)-> BB21 ( cond )                     i Loop hascall gcsafe bwd bwd-target LIR 
BB20 [0019]  1       BB19                  8     5 [18F..19B)-> BB19 (always)                     i hascall gcsafe bwd LIR 
BB21 [0020]  1       BB19                  1     4 [19B..1A6)-> BB23 ( cond )                     i gcsafe bwd LIR 
BB22 [0021]  1       BB21                  1     4 [1A6..1AD)-> BB19 (always)                     i hascall gcsafe bwd LIR 
BB23 [0022]  1       BB21                  1     3 [1AD..1B8)-> BB25 ( cond )                     i gcsafe bwd LIR 
BB24 [0023]  1       BB23                  1     3 [1B8..1C1)-> BB19 (always)                     i gcsafe bwd LIR 
BB25 [0024]  1       BB23                  1     2 [1C1..1CC)-> BB19 ( cond )                     i gcsafe bwd LIR 
BB26 [0025]  1       BB25                  1       [1CC..1D4)        (return)                     i gcsafe LIR 
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ funclets follow
BB27 [0003]  1     0                       0       [0CA..0CD)-> BB29 ( cond )    H0 F fault {     keep i rare flet bwd LIR 
BB28 [0004]  1     0 BB27                  0       [0CD..0D3)                    H0               i rare hascall bwd LIR 
BB29 [0005]  2     0 BB27,BB28             0       [0D3..0D4)        (finret)    H0   }           i rare bwd LIR 
BB30 [0013]  2     1 BB13                  1       [126..129)-> BB32 ( cond )    H1 F finally {   keep i gcsafe flet bwd LIR 
BB31 [0014]  1     1 BB30                  1       [129..12F)                    H1               i hascall gcsafe bwd LIR 
BB32 [0015]  2     1 BB30,BB31             1       [12F..130)        (finret)    H1   }           i gcsafe bwd LIR 
-----------------------------------------------------------------------------------------------------------------------------------------

*************** Starting PHASE Generate code
*************** In fgDebugCheckBBlist
Finalizing stack frame
Recording Var Locations at start of BB01
  <none>

must init V05 because compInitMem is set and it is not a temp
must init V06 because compInitMem is set and it is not a temp
Modified regs: [rax rcx rdx rbx rsi rdi r8-r11 mm0-mm5]
Callee-saved registers pushed: 3 [rbx rsi rdi]
*************** In lvaAssignFrameOffsets(FINAL_FRAME_LAYOUT)
Assign V02 loc0, size=8, stkOffs=-0x30
Assign V05 loc3, size=8, stkOffs=-0x38
Assign V06 loc4, size=16, stkOffs=-0x48
Assign V04 loc2, size=8, stkOffs=-0x50
Assign V28 cse1, size=8, stkOffs=-0x58
Assign V25 PSPSym, size=8, stkOffs=-0x60
Assign V07 OutArgs, size=32, stkOffs=-0x80
--- delta bump 8 for RA
--- delta bump 8 for FP
--- delta bump 0 for RBP frame
--- virtual stack offset to actual stack offset delta is 16
-- V00 was 0, now 16
-- V01 was 8, now 24
-- V02 was -48, now -32
-- V04 was -80, now -64
-- V05 was -56, now -40
-- V06 was -72, now -56
-- V07 was -128, now -112
-- V25 was -96, now -80
-- V28 was -88, now -72
; Final local variable assignments
;
;  V00 this         [V00,T00] ( 12, 47   )     ref  ->  [rbp+10H]   this class-hnd EH-live single-def
;* V01 arg1         [V01    ] (  0,  0   )     ref  ->  zero-ref    class-hnd single-def
;  V02 loc0         [V02    ] (  8,  8   )  struct ( 8) [rbp-20H]   do-not-enreg[XSB] addr-exposed ld-addr-op
;  V03 loc1         [V03,T06] (  4, 25   )     int  ->  rsi        
;  V04 loc2         [V04,T03] (  8, 41   )     ref  ->  [rbp-40H]   do-not-enreg[Z] class-hnd EH-live
;  V05 loc3         [V05    ] (  8, 49   )    bool  ->  [rbp-28H]   do-not-enreg[XB] must-init addr-exposed ld-addr-op
;  V06 loc4         [V06    ] (  5, 19   )  struct (16) [rbp-38H]   do-not-enreg[XSB] must-init addr-exposed ld-addr-op
;  V07 OutArgs      [V07    ] (  1,  1   )  lclBlk (32) [rsp+00H]   "OutgoingArgSpace"
;  V08 tmp1         [V08,T10] (  3,  6   )     ref  ->  rsi         class-hnd exact single-def "NewObj constructor temp"
;  V09 tmp2         [V09,T11] (  3,  6   )     ref  ->  rsi         class-hnd exact single-def "NewObj constructor temp"
;  V10 tmp3         [V10,T14] (  2,  4   )     ref  ->  rdi         class-hnd single-def "impAppendStmt"
;  V11 tmp4         [V11,T12] (  3,  6   )     ref  ->  rsi         class-hnd exact single-def "NewObj constructor temp"
;  V12 tmp5         [V12,T13] (  3,  6   )     ref  ->  rdi         class-hnd exact single-def "NewObj constructor temp"
;  V13 tmp6         [V13,T01] (  3, 48   )     ref  ->  rdi         class-hnd exact "NewObj constructor temp"
;  V14 tmp7         [V14,T04] (  2, 32   )     ref  ->  rbx         class-hnd "impAppendStmt"
;  V15 tmp8         [V15,T02] (  3, 48   )     ref  ->  rbx         class-hnd exact "NewObj constructor temp"
;  V16 tmp9         [V16,T05] (  2, 32   )     ref  ->  rdi         class-hnd "impAppendStmt"
;  V17 tmp10        [V17    ] (  8,  8   )    long  ->  [rbp-20H]   do-not-enreg[X] addr-exposed V02._dateData(offs=0x00) P-DEP "field V02._dateData (fldOffset=0x0)"
;  V18 tmp11        [V18    ] (  1,  8   )  ushort  ->  [rbp-38H]   do-not-enreg[X] addr-exposed V06._keyChar(offs=0x00) P-DEP "field V06._keyChar (fldOffset=0x0)"
;  V19 tmp12        [V19    ] (  5, 19   )     int  ->  [rbp-34H]   do-not-enreg[X] addr-exposed V06._key(offs=0x04) P-DEP "field V06._key (fldOffset=0x4)"
;  V20 tmp13        [V20    ] (  1,  8   )     int  ->  [rbp-30H]   do-not-enreg[X] addr-exposed V06._mods(offs=0x08) P-DEP "field V06._mods (fldOffset=0x8)"
;  V21 tmp14        [V21,T15] (  2,  4   )     ref  ->  rcx         single-def "argument with side effect"
;  V22 tmp15        [V22,T16] (  2,  4   )     ref  ->  rcx         single-def "argument with side effect"
;  V23 tmp16        [V23,T17] (  2,  4   )     ref  ->  rcx         single-def "argument with side effect"
;  V24 tmp17        [V24,T18] (  2,  4   )     ref  ->  rcx         single-def "argument with side effect"
;  V25 PSPSym       [V25    ] (  1,  1   )    long  ->  [rbp-50H]   do-not-enreg[X] addr-exposed "PSPSym"
;* V26 tmp19        [V26    ] (  0,  0   )     ref  ->  zero-ref    "optAddCopies"
;  V27 cse0         [V27,T07] (  3, 24   )     ref  ->  rdi         "CSE - aggressive"
;  V28 cse1         [V28,T08] (  3, 24   )     ref  ->  [rbp-48H]   spill-single-def "CSE - aggressive"
;  V29 cse2         [V29,T09] (  3, 24   )     ref  ->  rcx         "CSE - aggressive"
;
; Lcl frame size = 88
Mark labels for codegen
  BB01 : first block
  BB06 : branch target
  BB02 : branch target
  BB13 : branch target
  BB12 : branch target
  BB08 : branch target
  BB15 : callfinally thunk region end
  BB15 : branch target
  BB21 : branch target
  BB19 : branch target
  BB23 : branch target
  BB19 : branch target
  BB25 : branch target
  BB19 : branch target
  BB19 : branch target
  BB29 : branch target
  BB32 : branch target
  BB03 : try begin
  BB27 : hnd begin
  BB04 : try end
  BB30 : hnd end
  BB09 : try begin
  BB30 : hnd begin
  BB10 : try end
*************** After genMarkLabelsForCodegen()

-----------------------------------------------------------------------------------------------------------------------------------------
BBnum BBid ref try hnd preds           weight    lp [IL range]     [jump]      [EH region]         [flags]
-----------------------------------------------------------------------------------------------------------------------------------------
BB01 [0000]  1                             1       [000..072)                                     i label hascall gcsafe newobj LIR 
BB02 [0001]  2       BB01,BB06             8     0 [072..07B)                                     i Loop label gcsafe bwd bwd-target LIR 
BB03 [0002]  1  0    BB02                  8     0 [07B..0CA)                 T0      try { }     keep i try label hascall gcsafe newobj bwd LIR 
BB04 [0038]  1       BB03                  8     0 [0CA..0CD)-> BB06 ( cond )                     keep i label gcsafe bwd LIR cfb 
BB05 [0039]  1       BB04                  4     0 [0CD..0D4)                                     i hascall gcsafe bwd LIR 
BB06 [0006]  2       BB04,BB05             8     0 [0D4..0DD)-> BB02 ( cond )                     i label gcsafe bwd LIR 
BB07 [0008]  1       BB06                  1       [0DD..0F9)                                     i hascall gcsafe LIR 
BB08 [0009]  2       BB07,BB12             8     1 [0F9..102)                                     i Loop label gcsafe bwd bwd-target LIR 
BB09 [0010]  1  1    BB08                  8     1 [102..122)-> BB13 ( cond ) T1      try { }     keep i try label hascall gcsafe bwd LIR 
BB10 [0041]  1       BB09                  8     1 [126..129)-> BB12 ( cond )                     keep i label gcsafe bwd LIR cfb 
BB11 [0042]  1       BB10                  4     1 [129..130)                                     i hascall gcsafe bwd LIR 
BB12 [0016]  2       BB10,BB11             8     1 [130..139)-> BB08 (always)                     i label hascall gcsafe bwd LIR 
BB13 [0030]  1       BB09                  1       [???..???)-> BB30 (callf )                     i internal label gcsafe LIR 
BB14 [0031]  1       BB32                  1       [???..???)-> BB15 (ALWAYS)                     i internal gcsafe LIR KEEP 
BB15 [0017]  1       BB14                  1       [139..17D)                                     i label hascall gcsafe LIR 
BB19 [0018]  5       BB15,BB20,BB22,BB24,BB25   8     5 [17D..18F)-> BB21 ( cond )                     i Loop label hascall gcsafe bwd bwd-target LIR 
BB20 [0019]  1       BB19                  8     5 [18F..19B)-> BB19 (always)                     i hascall gcsafe bwd LIR 
BB21 [0020]  1       BB19                  1     4 [19B..1A6)-> BB23 ( cond )                     i label gcsafe bwd LIR 
BB22 [0021]  1       BB21                  1     4 [1A6..1AD)-> BB19 (always)                     i hascall gcsafe bwd LIR 
BB23 [0022]  1       BB21                  1     3 [1AD..1B8)-> BB25 ( cond )                     i label gcsafe bwd LIR 
BB24 [0023]  1       BB23                  1     3 [1B8..1C1)-> BB19 (always)                     i gcsafe bwd LIR 
BB25 [0024]  1       BB23                  1     2 [1C1..1CC)-> BB19 ( cond )                     i label gcsafe bwd LIR 
BB26 [0025]  1       BB25                  1       [1CC..1D4)        (return)                     i gcsafe LIR 
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ funclets follow
BB27 [0003]  1     0                       0       [0CA..0CD)-> BB29 ( cond )    H0 F fault {     keep i rare label flet bwd LIR 
BB28 [0004]  1     0 BB27                  0       [0CD..0D3)                    H0               i rare hascall bwd LIR 
BB29 [0005]  2     0 BB27,BB28             0       [0D3..0D4)        (finret)    H0   }           i rare label bwd LIR 
BB30 [0013]  2     1 BB13                  1       [126..129)-> BB32 ( cond )    H1 F finally {   keep i label gcsafe flet bwd LIR 
BB31 [0014]  1     1 BB30                  1       [129..12F)                    H1               i hascall gcsafe bwd LIR 
BB32 [0015]  2     1 BB30,BB31             1       [12F..130)        (finret)    H1   }           i label gcsafe bwd LIR 
-----------------------------------------------------------------------------------------------------------------------------------------
Setting stack level from -572662307 to 0

=============== Generating BB01 [000..072), preds={} succs={BB02} flags=0x00000002.20490020: i label hascall gcsafe newobj LIR 
BB01 IN (1)={V00    } + ByrefExposed + GcHeap
     OUT(2)={V00 V03} + ByrefExposed + GcHeap

Recording Var Locations at start of BB01
  <none>

Change life 0000000000000000 {} -> 0000000000000001 {V00}
							V00 becoming live
New debug range: first
							Live regs: (unchanged) 00000000 {}
							GC regs: (unchanged) 00000000 {}
							Byref regs: (unchanged) 00000000 {}

      L_M48562_BB01:
Mapped BB01 to G_M48562_IG02
Label: IG02, GCvars=0000000000000001 {V00}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}

Scope info: begin block BB01, IL range [000..072)
Added IP mapping: 0x0000 STACK_EMPTY (G_M48562_IG02,ins#0,ofs#0) label
Generating: N003 (???,???) [000425] ------------                 IL_OFFSET void   IL offset: 0x0 REG NA
Generating: N005 ( 14,  5) [000000] --CXG-------         t0 =    CALL      long   System.DateTime.get_Now REG rax $c0
							Call: GCvars=0000000000000001 {V00}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}
IN0001:        call     System.DateTime:get_Now():System.DateTime
                                                              /--*  t0     long   
Generating: N007 ( 18,  8) [000003] DA-XG-------              *  STORE_LCL_VAR struct<System.DateTime, 8>(AX)(P) V02 loc0          NA
                                                  *    long   V02._dateData (offs=0x00) -> V17 tmp10         REG NA
IN0002:        mov      qword ptr [V02 rbp-20H], rax
Added IP mapping: 0x0006 STACK_EMPTY (G_M48562_IG02,ins#2,ofs#9)
Generating: N009 (???,???) [000426] ------------                 IL_OFFSET void   IL offset: 0x6 REG NA
Generating: N011 (  3,  2) [000004] -------N----         t4 =    LCL_VAR_ADDR byref  V02 loc0          rcx
                                                  *    long   V02._dateData (offs=0x00) -> V17 tmp10         REG rcx
IN0003:        lea      rcx, bword ptr [V02 rbp-20H]
							Byref regs: 00000000 {} => 00000002 {rcx}
                                                              /--*  t4     byref  
Generating: N013 (???,???) [000478] ------------       t478 = *  PUTARG_REG byref  REG rcx
							Byref regs: 00000002 {rcx} => 00000000 {}
							Byref regs: 00000000 {} => 00000002 {rcx}
                                                              /--*  t478   byref  this in rcx
Generating: N015 ( 17, 10) [000006] --CXG-------         t6 = *  CALL      ref    System.DateTime.ToString REG rax $84
							Byref regs: 00000002 {rcx} => 00000000 {}
							Call: GCvars=0000000000000001 {V00}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}
IN0004:        call     System.DateTime:ToString():System.String:this
							GC regs: 00000000 {} => 00000001 {rax}
                                                              /--*  t6     ref    
Generating: N017 ( 17, 10) [000272] DA-XG-----L-              *  STORE_LCL_VAR ref    V21 tmp14        d:2 rcx REG rcx
							GC regs: 00000001 {rax} => 00000000 {}
IN0005:        mov      rcx, rax
							V21 in reg rcx is becoming live  [000272]
							Live regs: 00000000 {} => 00000002 {rcx}
							Live vars: {V00} => {V00 V21}
							GC regs: 00000000 {} => 00000002 {rcx}
Generating: N019 (  1,  1) [000273] ------------       t273 =    LCL_VAR   ref    V21 tmp14        u:2 rcx (last use) REG rcx $84
                                                              /--*  t273   ref    
Generating: N021 (???,???) [000479] ------------       t479 = *  PUTARG_REG ref    REG rcx
							V21 in reg rcx is becoming dead  [000273]
							Live regs: 00000002 {rcx} => 00000000 {}
							Live vars: {V00 V21} => {V00}
							GC regs: 00000002 {rcx} => 00000000 {}
							GC regs: 00000000 {} => 00000002 {rcx}
Generating: N023 (  2, 10) [000269] H-----------       t269 =    CNS_INT(h) long   0x750031F0 "	 Created list" REG rdx $1c0
IN0006:        mov      rdx, 0x16D750031F0      ; "	 Created list"
                                                              /--*  t269   long   
Generating: N025 (  4, 12) [000270] #---G-------       t270 = *  IND       ref    REG rdx $88
IN0007:        mov      rdx, gword ptr [rdx]
							GC regs: 00000002 {rcx} => 00000006 {rcx rdx}
                                                              /--*  t270   ref    
Generating: N027 (???,???) [000480] ----G-------       t480 = *  PUTARG_REG ref    REG rdx
							GC regs: 00000006 {rcx rdx} => 00000002 {rcx}
							GC regs: 00000002 {rcx} => 00000006 {rcx rdx}
                                                              /--*  t479   ref    arg0 in rcx
                                                              +--*  t480   ref    arg1 in rdx
Generating: N029 ( 39, 30) [000008] --CXG-------         t8 = *  CALL      ref    System.String.Concat REG rax $89
							GC regs: 00000006 {rcx rdx} => 00000004 {rdx}
							GC regs: 00000004 {rdx} => 00000000 {}
							Call: GCvars=0000000000000001 {V00}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}
IN0008:        call     System.String:Concat(System.String,System.String):System.String
							GC regs: 00000000 {} => 00000001 {rax}
                                                              /--*  t8     ref    
Generating:                [000526] --CXG-------       t526 = *  COPY      ref    REG rcx
                                                              /--*  t526   ref    
Generating: N031 (???,???) [000481] --CXG-------       t481 = *  PUTARG_REG ref    REG rcx
							GC regs: 00000001 {rax} => 00000000 {}
IN0009:        mov      rcx, rax
							GC regs: 00000000 {} => 00000002 {rcx}
							GC regs: 00000002 {rcx} => 00000000 {}
							GC regs: 00000000 {} => 00000002 {rcx}
                                                              /--*  t481   ref    arg0 in rcx
Generating: N033 ( 53, 36) [000009] --CXG-------              *  CALL      void   System.Console.WriteLine REG NA $VN.Void
							GC regs: 00000002 {rcx} => 00000000 {}
							Call: GCvars=0000000000000001 {V00}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}
IN000a:        call     System.Console:WriteLine(System.String)
Added IP mapping: 0x001C STACK_EMPTY (G_M48562_IG02,ins#10,ofs#47)
Generating: N035 (???,???) [000427] ------------                 IL_OFFSET void   IL offset: 0x1c REG NA
Generating: N037 (  2, 10) [000011] H-----------        t11 =    CNS_INT(h) long   0x7ffdb3ee2350 method REG rcx $1c1
IN000b:        mov      rcx, 0x7FFDB3EE2350
                                                              /--*  t11    long   
Generating: N039 (???,???) [000482] ------------       t482 = *  PUTARG_REG long   REG rcx
                                                              /--*  t482   long   arg0 in rcx
Generating: N041 ( 16, 16) [000012] --C---------        t12 = *  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST REG rax $240
							Call: GCvars=0000000000000001 {V00}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}
IN000c:        call     CORINFO_HELP_NEWSFAST
							GC regs: 00000000 {} => 00000001 {rax}
                                                              /--*  t12    ref    
Generating: N043 ( 16, 16) [000014] DA----------              *  STORE_LCL_VAR ref    V08 tmp1         d:2 rsi REG rsi
							GC regs: 00000001 {rax} => 00000000 {}
IN000d:        mov      rsi, rax
							V08 in reg rsi is becoming live  [000014]
							Live regs: 00000000 {} => 00000040 {rsi}
							Live vars: {V00} => {V00 V08}
							GC regs: 00000000 {} => 00000040 {rsi}
Generating: N045 (  1,  1) [000015] ------------        t15 =    LCL_VAR   ref    V08 tmp1         u:2 rsi REG rsi $240
                                                              /--*  t15    ref    
Generating: N047 (???,???) [000483] ------------       t483 = *  PUTARG_REG ref    REG rcx
IN000e:        mov      rcx, rsi
							GC regs: 00000040 {rsi} => 00000042 {rcx rsi}
                                                              /--*  t483   ref    this in rcx
Generating: N049 ( 15,  8) [000016] --CXG-------              *  CALL      void   FalseLeakRepro.List..ctor REG NA $VN.Void
							GC regs: 00000042 {rcx rsi} => 00000040 {rsi}
							Call: GCvars=0000000000000001 {V00}, gcrefRegs=00000040 {rsi}, byrefRegs=00000000 {}
IN000f:        call     FalseLeakRepro.List:.ctor():this
Added IP mapping: 0x0022 (G_M48562_IG02,ins#15,ofs#73)
Generating: N051 (???,???) [000428] ------------                 IL_OFFSET void   IL offset: 0x22 REG NA
Generating: N053 (  1,  1) [000010] -----------z        t10 =    LCL_VAR   ref    V00 this         u:1 rdx REG rdx $80
                                                              /--*  t10    ref    
Generating: N055 (  2,  2) [000279] ------------       t279 = *  LEA(b+8)  byref  REG rcx
IN0010:        mov      rdx, gword ptr [V00 rbp+10H]
							GC regs: 00000040 {rsi} => 00000044 {rdx rsi}
							GC regs: 00000044 {rdx rsi} => 00000040 {rsi}
IN0011:        lea      rcx, bword ptr [rdx+8]
							Byref regs: 00000000 {} => 00000002 {rcx}
Generating: N057 (  1,  1) [000017] ------------        t17 =    LCL_VAR   ref    V08 tmp1         u:2 rsi (last use) REG rsi $240
                                                              /--*  t279   byref  
                                                              +--*  t17    ref    
Generating: N059 (???,???) [000429] -A-XG-------              *  STOREIND  ref    REG NA
							Byref regs: 00000002 {rcx} => 00000000 {}
							V08 in reg rsi is becoming dead  [000017]
							Live regs: 00000040 {rsi} => 00000000 {}
							Live vars: {V00 V08} => {V00}
							GC regs: 00000040 {rsi} => 00000000 {}
IN0012:        mov      rdx, rsi
NoGC Call: savedSet=0000F0E8 {rbx rbp rsi rdi r12 r13 r14 r15}
							Call: GCvars=0000000000000001 {V00}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}
IN0013:        call     CORINFO_HELP_ASSIGN_REF
Added IP mapping: 0x0027 STACK_EMPTY (G_M48562_IG02,ins#19,ofs#89)
Generating: N061 (???,???) [000430] ------------                 IL_OFFSET void   IL offset: 0x27 REG NA
Generating: N063 (  2, 10) [000023] H-----------        t23 =    CNS_INT(h) long   0x7ffdb3b058b8 token REG rcx $1c3
IN0014:        mov      rcx, 0x7FFDB3B058B8
                                                              /--*  t23    long   
Generating: N065 (???,???) [000484] ------------       t484 = *  PUTARG_REG long   REG rcx
                                                              /--*  t484   long   arg0 in rcx
Generating: N067 ( 16, 16) [000024] --C---------        t24 = *  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST REG rax $243
							Call: GCvars=0000000000000001 {V00}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}
IN0015:        call     CORINFO_HELP_NEWSFAST
							GC regs: 00000000 {} => 00000001 {rax}
                                                              /--*  t24    ref    
Generating: N069 ( 16, 16) [000026] DA----------              *  STORE_LCL_VAR ref    V09 tmp2         d:2 rsi REG rsi
							GC regs: 00000001 {rax} => 00000000 {}
IN0016:        mov      rsi, rax
							V09 in reg rsi is becoming live  [000026]
							Live regs: 00000000 {} => 00000040 {rsi}
							Live vars: {V00} => {V00 V09}
							GC regs: 00000000 {} => 00000040 {rsi}
Generating: N071 (  1,  1) [000020] -----------z        t20 =    LCL_VAR   ref    V00 this         u:1 rdx REG rdx $80
                                                              /--*  t20    ref    
Generating: N073 (  2,  2) [000284] -c----------       t284 = *  LEA(b+8)  byref  REG NA
                                                              /--*  t284   byref  
Generating: N075 (  4,  4) [000021] n---GO------        t21 = *  IND       ref    REG rcx <l:$246, c:$245>
IN0017:        mov      rdx, gword ptr [V00 rbp+10H]
							GC regs: 00000040 {rsi} => 00000044 {rdx rsi}
							GC regs: 00000044 {rdx rsi} => 00000040 {rsi}
IN0018:        mov      rcx, gword ptr [rdx+8]
							GC regs: 00000040 {rsi} => 00000042 {rcx rsi}
                                                              /--*  t21    ref    
Generating: N077 (  5,  5) [000282] -c----------       t282 = *  LEA(b+8)  byref  REG NA
                                                              /--*  t282   byref  
Generating: N079 (  7,  7) [000022] ---XGO------        t22 = *  IND       ref    REG rdi <l:$250, c:$24f>
							GC regs: 00000042 {rcx rsi} => 00000040 {rsi}
IN0019:        mov      rdi, gword ptr [rcx+8]
							GC regs: 00000040 {rsi} => 000000C0 {rsi rdi}
                                                              /--*  t22    ref    
Generating: N081 (  7,  7) [000030] DA-XGO------              *  STORE_LCL_VAR ref    V10 tmp3         d:2 rdi REG rdi
							GC regs: 000000C0 {rsi rdi} => 00000040 {rsi}
							V10 in reg rdi is becoming live  [000030]
							Live regs: 00000040 {rsi} => 000000C0 {rsi rdi}
							Live vars: {V00 V09} => {V00 V09 V10}
							GC regs: 00000040 {rsi} => 000000C0 {rsi rdi}
Generating: N083 (  1,  1) [000027] ------------        t27 =    LCL_VAR   ref    V09 tmp2         u:2 rsi REG rsi $243
                                                              /--*  t27    ref    
Generating: N085 (???,???) [000485] ------------       t485 = *  PUTARG_REG ref    REG rcx
IN001a:        mov      rcx, rsi
							GC regs: 000000C0 {rsi rdi} => 000000C2 {rcx rsi rdi}
                                                              /--*  t485   ref    this in rcx
Generating: N087 ( 15,  8) [000028] --CXG-------              *  CALL      void   System.Object..ctor REG NA $VN.Void
							GC regs: 000000C2 {rcx rsi rdi} => 000000C0 {rsi rdi}
							Call: GCvars=0000000000000001 {V00}, gcrefRegs=000000C0 {rsi rdi}, byrefRegs=00000000 {}
IN001b:        call     System.Object:.ctor():this
Added IP mapping: 0x0037 (G_M48562_IG02,ins#27,ofs#127)
Generating: N089 (???,???) [000431] ------------                 IL_OFFSET void   IL offset: 0x37 REG NA
Generating: N091 (  1,  1) [000031] ------------        t31 =    LCL_VAR   ref    V10 tmp3         u:2 rdi (last use) REG rdi <l:$248, c:$94>
                                                              /--*  t31    ref    
Generating: N093 (  2,  2) [000287] ------------       t287 = *  LEA(b+16) byref  REG rcx
							V10 in reg rdi is becoming dead  [000031]
							Live regs: 000000C0 {rsi rdi} => 00000040 {rsi}
							Live vars: {V00 V09 V10} => {V00 V09}
							GC regs: 000000C0 {rsi rdi} => 00000040 {rsi}
IN001c:        lea      rcx, bword ptr [rdi+16]
							Byref regs: 00000000 {} => 00000002 {rcx}
Generating: N095 (  1,  1) [000032] ------------        t32 =    LCL_VAR   ref    V09 tmp2         u:2 rsi (last use) REG rsi $243
                                                              /--*  t287   byref  
                                                              +--*  t32    ref    
Generating: N097 (???,???) [000432] -A-XG-------              *  STOREIND  ref    REG NA
							Byref regs: 00000002 {rcx} => 00000000 {}
							V09 in reg rsi is becoming dead  [000032]
							Live regs: 00000040 {rsi} => 00000000 {}
							Live vars: {V00 V09} => {V00}
							GC regs: 00000040 {rsi} => 00000000 {}
IN001d:        mov      rdx, rsi
NoGC Call: savedSet=0000F0E8 {rbx rbp rsi rdi r12 r13 r14 r15}
							Call: GCvars=0000000000000001 {V00}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}
IN001e:        call     CORINFO_HELP_ASSIGN_REF
Added IP mapping: 0x003C STACK_EMPTY (G_M48562_IG02,ins#30,ofs#139)
Generating: N099 (???,???) [000433] ------------                 IL_OFFSET void   IL offset: 0x3c REG NA
Generating: N101 (  2, 10) [000037] H-----------        t37 =    CNS_INT(h) long   0x7ffdb3ee6200 token REG rcx $1c6
IN001f:        mov      rcx, 0x7FFDB3EE6200
                                                              /--*  t37    long   
Generating: N103 (???,???) [000486] ------------       t486 = *  PUTARG_REG long   REG rcx
                                                              /--*  t486   long   arg0 in rcx
Generating: N105 ( 16, 16) [000038] --C---------        t38 = *  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST REG rax $253
							Call: GCvars=0000000000000001 {V00}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}
IN0020:        call     CORINFO_HELP_NEWSFAST
							GC regs: 00000000 {} => 00000001 {rax}
                                                              /--*  t38    ref    
Generating: N107 ( 16, 16) [000040] DA----------              *  STORE_LCL_VAR ref    V11 tmp4         d:2 rsi REG rsi
							GC regs: 00000001 {rax} => 00000000 {}
IN0021:        mov      rsi, rax
							V11 in reg rsi is becoming live  [000040]
							Live regs: 00000000 {} => 00000040 {rsi}
							Live vars: {V00} => {V00 V11}
							GC regs: 00000000 {} => 00000040 {rsi}
Generating: N109 (  1,  1) [000041] ------------        t41 =    LCL_VAR   ref    V11 tmp4         u:2 rsi REG rsi $253
                                                              /--*  t41    ref    
Generating: N111 (???,???) [000487] ------------       t487 = *  PUTARG_REG ref    REG rcx
IN0022:        mov      rcx, rsi
							GC regs: 00000040 {rsi} => 00000042 {rcx rsi}
Generating: N113 (  1,  1) [000035] -----------z        t35 =    LCL_VAR   ref    V00 this         u:1 rdx REG rdx $80
                                                              /--*  t35    ref    
Generating: N115 (???,???) [000488] ------------       t488 = *  PUTARG_REG ref    REG rdx
IN0023:        mov      rdx, gword ptr [V00 rbp+10H]
							GC regs: 00000042 {rcx rsi} => 00000046 {rcx rdx rsi}
							GC regs: 00000046 {rcx rdx rsi} => 00000042 {rcx rsi}
							GC regs: 00000042 {rcx rsi} => 00000046 {rcx rdx rsi}
Generating: N117 (  2, 10) [000036] H-----------        t36 =    CNS_INT(h) long   0x7ffdb3b213f8 ftn REG r8 $1c7
IN0024:        mov      r8, 0x7FFDB3B213F8
                                                              /--*  t36    long   
Generating: N119 (???,???) [000489] ------------       t489 = *  PUTARG_REG long   REG r8
                                                              /--*  t487   ref    this in rcx
                                                              +--*  t488   ref    arg1 in rdx
                                                              +--*  t489   long   arg2 in r8
Generating: N121 ( 18, 21) [000042] --CXG-------              *  CALL      void   System.MulticastDelegate.CtorClosed REG NA $VN.Void
							GC regs: 00000046 {rcx rdx rsi} => 00000044 {rdx rsi}
							GC regs: 00000044 {rdx rsi} => 00000040 {rsi}
							Call: GCvars=0000000000000001 {V00}, gcrefRegs=00000040 {rsi}, byrefRegs=00000000 {}
IN0025:        call     System.MulticastDelegate:CtorClosed(System.Object,long):this
Added IP mapping: 0x0048 (G_M48562_IG02,ins#37,ofs#179)
Generating: N123 (???,???) [000434] ------------                 IL_OFFSET void   IL offset: 0x48 REG NA
Generating: N125 (  2, 10) [000044] H-----------        t44 =    CNS_INT(h) long   0x7ffdb3c84e80 token REG rcx $1c8
IN0026:        mov      rcx, 0x7FFDB3C84E80
                                                              /--*  t44    long   
Generating: N127 (???,???) [000490] ------------       t490 = *  PUTARG_REG long   REG rcx
                                                              /--*  t490   long   arg0 in rcx
Generating: N129 ( 16, 16) [000045] --C---------        t45 = *  CALL help ref    HELPER.CORINFO_HELP_NEWFAST REG rax $254
							Call: GCvars=0000000000000001 {V00}, gcrefRegs=00000040 {rsi}, byrefRegs=00000000 {}
IN0027:        call     CORINFO_HELP_NEWFAST
							GC regs: 00000040 {rsi} => 00000041 {rax rsi}
                                                              /--*  t45    ref    
Generating: N131 ( 16, 16) [000047] DA----------              *  STORE_LCL_VAR ref    V12 tmp5         d:2 rdi REG rdi
							GC regs: 00000041 {rax rsi} => 00000040 {rsi}
IN0028:        mov      rdi, rax
							V12 in reg rdi is becoming live  [000047]
							Live regs: 00000040 {rsi} => 000000C0 {rsi rdi}
							Live vars: {V00 V11} => {V00 V11 V12}
							GC regs: 00000040 {rsi} => 000000C0 {rsi rdi}
Generating: N133 (  1,  1) [000048] ------------        t48 =    LCL_VAR   ref    V12 tmp5         u:2 rdi REG rdi $254
                                                              /--*  t48    ref    
Generating: N135 (???,???) [000491] ------------       t491 = *  PUTARG_REG ref    REG rcx
IN0029:        mov      rcx, rdi
							GC regs: 000000C0 {rsi rdi} => 000000C2 {rcx rsi rdi}
Generating: N137 (  1,  1) [000043] ------------        t43 =    LCL_VAR   ref    V11 tmp4         u:2 rsi (last use) REG rsi $253
                                                              /--*  t43    ref    
Generating: N139 (???,???) [000492] ------------       t492 = *  PUTARG_REG ref    REG rdx
							V11 in reg rsi is becoming dead  [000043]
							Live regs: 000000C0 {rsi rdi} => 00000080 {rdi}
							Live vars: {V00 V11 V12} => {V00 V12}
							GC regs: 000000C2 {rcx rsi rdi} => 00000082 {rcx rdi}
IN002a:        mov      rdx, rsi
							GC regs: 00000082 {rcx rdi} => 00000086 {rcx rdx rdi}
                                                              /--*  t491   ref    this in rcx
                                                              +--*  t492   ref    arg1 in rdx
Generating: N141 ( 16, 10) [000049] --CXG-------              *  CALL      void   System.Threading.Thread..ctor REG NA $VN.Void
							GC regs: 00000086 {rcx rdx rdi} => 00000084 {rdx rdi}
							GC regs: 00000084 {rdx rdi} => 00000080 {rdi}
							Call: GCvars=0000000000000001 {V00}, gcrefRegs=00000080 {rdi}, byrefRegs=00000000 {}

      G_M48562_IG02:        ; offs=000000H, funclet=00, bbWeight=1   
IN002b:        call     System.Threading.Thread:.ctor(System.Threading.ParameterizedThreadStart):this
Added IP mapping: 0x004D (G_M48562_IG03,ins#1,ofs#5)
Generating: N143 (???,???) [000435] ------------                 IL_OFFSET void   IL offset: 0x4d REG NA
Generating: N145 (  1,  1) [000050] ------------        t50 =    LCL_VAR   ref    V12 tmp5         u:2 rdi (last use) REG rdi $254
                                                              /--*  t50    ref    
Generating: N147 (???,???) [000493] ------------       t493 = *  PUTARG_REG ref    REG rcx
							V12 in reg rdi is becoming dead  [000050]
							Live regs: 00000080 {rdi} => 00000000 {}
							Live vars: {V00 V12} => {V00}
							GC regs: 00000080 {rdi} => 00000000 {}
IN002c:        mov      rcx, rdi
							GC regs: 00000000 {} => 00000002 {rcx}
                                                              /--*  t493   ref    this in rcx
Generating: N149 ( 15,  8) [000051] --CXG-------              *  CALL      void   System.Threading.Thread.Start REG NA $VN.Void
							GC regs: 00000002 {rcx} => 00000000 {}
							Call: GCvars=0000000000000001 {V00}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}
IN002d:        call     System.Threading.Thread:Start():this
Added IP mapping: 0x0052 STACK_EMPTY (G_M48562_IG03,ins#3,ofs#13)
Generating: N151 (???,???) [000436] ------------                 IL_OFFSET void   IL offset: 0x52 REG NA
Generating: N153 ( 14,  5) [000052] --CXG-------        t52 =    CALL      long   System.DateTime.get_Now REG rax $c2
							Call: GCvars=0000000000000001 {V00}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}
IN002e:        call     System.DateTime:get_Now():System.DateTime
                                                              /--*  t52    long   
Generating: N155 ( 18,  8) [000055] DA-XG-------              *  STORE_LCL_VAR struct<System.DateTime, 8>(AX)(P) V02 loc0          NA
                                                  *    long   V02._dateData (offs=0x00) -> V17 tmp10         REG NA
IN002f:        mov      qword ptr [V02 rbp-20H], rax
Added IP mapping: 0x0058 STACK_EMPTY (G_M48562_IG03,ins#5,ofs#22)
Generating: N157 (???,???) [000437] ------------                 IL_OFFSET void   IL offset: 0x58 REG NA
Generating: N159 (  3,  2) [000056] -------N----        t56 =    LCL_VAR_ADDR byref  V02 loc0          rcx
                                                  *    long   V02._dateData (offs=0x00) -> V17 tmp10         REG rcx
IN0030:        lea      rcx, bword ptr [V02 rbp-20H]
							Byref regs: 00000000 {} => 00000002 {rcx}
                                                              /--*  t56    byref  
Generating: N161 (???,???) [000494] ------------       t494 = *  PUTARG_REG byref  REG rcx
							Byref regs: 00000002 {rcx} => 00000000 {}
							Byref regs: 00000000 {} => 00000002 {rcx}
                                                              /--*  t494   byref  this in rcx
Generating: N163 ( 17, 10) [000058] --CXG-------        t58 = *  CALL      ref    System.DateTime.ToString REG rax $a8
							Byref regs: 00000002 {rcx} => 00000000 {}
							Call: GCvars=0000000000000001 {V00}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}
IN0031:        call     System.DateTime:ToString():System.String:this
							GC regs: 00000000 {} => 00000001 {rax}
                                                              /--*  t58    ref    
Generating: N165 ( 17, 10) [000300] DA-XG-----L-              *  STORE_LCL_VAR ref    V22 tmp15        d:2 rcx REG rcx
							GC regs: 00000001 {rax} => 00000000 {}
IN0032:        mov      rcx, rax
							V22 in reg rcx is becoming live  [000300]
							Live regs: 00000000 {} => 00000002 {rcx}
							Live vars: {V00} => {V00 V22}
							GC regs: 00000000 {} => 00000002 {rcx}
Generating: N167 (  1,  1) [000301] ------------       t301 =    LCL_VAR   ref    V22 tmp15        u:2 rcx (last use) REG rcx $a8
                                                              /--*  t301   ref    
Generating: N169 (???,???) [000495] ------------       t495 = *  PUTARG_REG ref    REG rcx
							V22 in reg rcx is becoming dead  [000301]
							Live regs: 00000002 {rcx} => 00000000 {}
							Live vars: {V00 V22} => {V00}
							GC regs: 00000002 {rcx} => 00000000 {}
							GC regs: 00000000 {} => 00000002 {rcx}
Generating: N171 (  2, 10) [000297] H-----------       t297 =    CNS_INT(h) long   0x750031F8 "	 Consumer thread started, adding items..." REG rdx $1c9
IN0033:        mov      rdx, 0x16D750031F8      ; "	 Consumer thread started, adding items..."
                                                              /--*  t297   long   
Generating: N173 (  4, 12) [000298] #---G-------       t298 = *  IND       ref    REG rdx $ac
IN0034:        mov      rdx, gword ptr [rdx]
							GC regs: 00000002 {rcx} => 00000006 {rcx rdx}
                                                              /--*  t298   ref    
Generating: N175 (???,???) [000496] ----G-------       t496 = *  PUTARG_REG ref    REG rdx
							GC regs: 00000006 {rcx rdx} => 00000002 {rcx}
							GC regs: 00000002 {rcx} => 00000006 {rcx rdx}
                                                              /--*  t495   ref    arg0 in rcx
                                                              +--*  t496   ref    arg1 in rdx
Generating: N177 ( 39, 30) [000060] --CXG-------        t60 = *  CALL      ref    System.String.Concat REG rax $ad
							GC regs: 00000006 {rcx rdx} => 00000004 {rdx}
							GC regs: 00000004 {rdx} => 00000000 {}
							Call: GCvars=0000000000000001 {V00}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}
IN0035:        call     System.String:Concat(System.String,System.String):System.String
							GC regs: 00000000 {} => 00000001 {rax}
                                                              /--*  t60    ref    
Generating:                [000527] --CXG-------       t527 = *  COPY      ref    REG rcx
                                                              /--*  t527   ref    
Generating: N179 (???,???) [000497] --CXG-------       t497 = *  PUTARG_REG ref    REG rcx
							GC regs: 00000001 {rax} => 00000000 {}
IN0036:        mov      rcx, rax
							GC regs: 00000000 {} => 00000002 {rcx}
							GC regs: 00000002 {rcx} => 00000000 {}
							GC regs: 00000000 {} => 00000002 {rcx}
                                                              /--*  t497   ref    arg0 in rcx
Generating: N181 ( 53, 36) [000061] --CXG-------              *  CALL      void   System.Console.WriteLine REG NA $VN.Void
							GC regs: 00000002 {rcx} => 00000000 {}
							Call: GCvars=0000000000000001 {V00}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}
IN0037:        call     System.Console:WriteLine(System.String)
Added IP mapping: 0x006E STACK_EMPTY (G_M48562_IG03,ins#13,ofs#60)
Generating: N183 (???,???) [000438] ------------                 IL_OFFSET void   IL offset: 0x6e REG NA
Generating: N185 (  1,  1) [000062] ------------        t62 =    CNS_INT   int    0 REG rsi $40
IN0038:        xor      esi, esi
                                                              /--*  t62    int    
Generating: N187 (  1,  3) [000064] DA----------              *  STORE_LCL_VAR int    V03 loc1         d:2 rsi REG rsi
							V03 in reg rsi is becoming live  [000064]
							Live regs: 00000000 {} => 00000040 {rsi}
							Live vars: {V00} => {V00 V03}
New debug range: first

Variable Live Range History Dump for BB01
V00 this: rbp[16] (1 slot) [(G_M48562_IG02,ins#0,ofs#0), ...]
V03 loc1: rsi [(G_M48562_IG03,ins#14,ofs#62), ...]

=============== Generating BB02 [072..07B), preds={BB01,BB06} succs={BB03} flags=0x00000008.21092020: i Loop label gcsafe bwd bwd-target LIR 
BB02 IN (2)={V00     V03} + ByrefExposed + GcHeap
     OUT(3)={V00 V04 V03} + ByrefExposed + GcHeap

Recording Var Locations at start of BB02
  V03(rsi)
Liveness not changing: 0000000000000041 {V00 V03}
							Live regs: 00000000 {} => 00000040 {rsi}
							GC regs: (unchanged) 00000000 {}
							Byref regs: (unchanged) 00000000 {}

      L_M48562_BB02:

      G_M48562_IG03:        ; offs=0000CBH, funclet=00, bbWeight=1   
Mapped BB02 to G_M48562_IG04
Label: IG04, GCvars=0000000000000001 {V00}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}

Scope info: begin block BB02, IL range [072..07B)
Added IP mapping: 0x0072 STACK_EMPTY (G_M48562_IG04,ins#0,ofs#0) label
Generating: N191 (???,???) [000439] ------------                 IL_OFFSET void   IL offset: 0x72 REG NA
Generating: N193 (  1,  1) [000069] -----------z        t69 =    LCL_VAR   ref    V00 this         u:1 rdx REG rdx $80
                                                              /--*  t69    ref    
Generating: N195 (  2,  2) [000305] -c----------       t305 = *  LEA(b+8)  byref  REG NA
                                                              /--*  t305   byref  
Generating: N197 (  4,  4) [000070] n---GO------        t70 = *  IND       ref    REG rcx <l:$258, c:$257>
IN0039:        mov      rdx, gword ptr [V00 rbp+10H]
							GC regs: 00000000 {} => 00000004 {rdx}
							GC regs: 00000004 {rdx} => 00000000 {}
IN003a:        mov      rcx, gword ptr [rdx+8]
							GC regs: 00000000 {} => 00000002 {rcx}
                                                              /--*  t70    ref    
Generating: N199 (  8,  7) [000072] DA--GO------              *  STORE_LCL_VAR ref    V04 loc2         d:3 NA REG NA
							GC regs: 00000002 {rcx} => 00000000 {}
IN003b:        mov      gword ptr [V04 rbp-40H], rcx
							Live vars: {V00 V03} => {V00 V03 V04}
							GCvars: {V00} => {V00 V04}
New debug range: first
Added IP mapping: 0x0079 STACK_EMPTY (G_M48562_IG04,ins#3,ofs#12)
Generating: N201 (???,???) [000440] ------------                 IL_OFFSET void   IL offset: 0x79 REG NA
Generating: N203 (  1,  1) [000073] ------------        t73 =    CNS_INT   int    0 REG rcx $40
IN003c:        xor      ecx, ecx
                                                              /--*  t73    int    
Generating: N205 (  5,  4) [000075] DA--G-------              *  STORE_LCL_VAR int   (AX) V05 loc3          NA REG NA
IN003d:        mov      dword ptr [V05 rbp-28H], ecx

Variable Live Range History Dump for BB02
V00 this: rbp[16] (1 slot) [(G_M48562_IG02,ins#0,ofs#0), ...]
V03 loc1: rsi [(G_M48562_IG03,ins#14,ofs#62), ...]
V04 loc2: rbp[-64] (1 slot) [(G_M48562_IG04,ins#3,ofs#12), ...]

=============== Generating BB03 [07B..0CA), preds={BB02} succs={BB04} flags=0x00000002.21490130: keep i try label hascall gcsafe newobj bwd LIR 
BB03 IN (3)={V00 V04 V03} + ByrefExposed + GcHeap
     OUT(3)={V00 V04 V03} + ByrefExposed + GcHeap

Recording Var Locations at start of BB03
  V03(rsi)
Liveness not changing: 0000000000000049 {V00 V03 V04}
							Live regs: 00000000 {} => 00000040 {rsi}
							GC regs: (unchanged) 00000000 {}
							Byref regs: (unchanged) 00000000 {}

      L_M48562_BB03:

      G_M48562_IG04:        ; offs=000109H, funclet=00, bbWeight=8   
Mapped BB03 to G_M48562_IG05
Label: IG05, GCvars=0000000000000009 {V00 V04}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}

Scope info: begin block BB03, IL range [07B..0CA)
Added IP mapping: 0x007B STACK_EMPTY (G_M48562_IG05,ins#0,ofs#0) label
Generating: N209 (???,???) [000441] ------------                 IL_OFFSET void   IL offset: 0x7b REG NA
Generating: N211 (  3,  3) [000078] ------------        t78 =    LCL_VAR_ADDR long   V05 loc3          rdx REG rdx $206
IN003e:        lea      rdx, [V05 rbp-28H]
                                                              /--*  t78    long   
Generating: N213 (???,???) [000498] ------------       t498 = *  PUTARG_REG long   REG rdx
Generating: N215 (  1,  1) [000076] ------------        t76 =    LCL_VAR   ref    V04 loc2         u:3 rcx REG rcx <l:$256, c:$b2>
IN003f:        mov      rcx, gword ptr [V04 rbp-40H]
							GC regs: 00000000 {} => 00000002 {rcx}
                                                              /--*  t76    ref    
Generating: N217 (???,???) [000499] ------------       t499 = *  PUTARG_REG ref    REG rcx
							GC regs: 00000002 {rcx} => 00000000 {}
							GC regs: 00000000 {} => 00000002 {rcx}
                                                              /--*  t498   long   arg1 in rdx
                                                              +--*  t499   ref    arg0 in rcx
Generating: N219 ( 18, 11) [000079] --CXG-------              *  CALL      void   System.Threading.Monitor.Enter REG NA $VN.Void
							GC regs: 00000002 {rcx} => 00000000 {}
							Call: GCvars=0000000000000009 {V00 V04}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}
IN0040:        call     System.Threading.Monitor:Enter(System.Object,byref)
Added IP mapping: 0x0083 STACK_EMPTY (G_M48562_IG05,ins#3,ofs#13)
Generating: N221 (???,???) [000442] ------------                 IL_OFFSET void   IL offset: 0x83 REG NA
Generating: N223 (  2, 10) [000083] H-----------        t83 =    CNS_INT(h) long   0x7ffdb3ee58a8 method REG rcx $1ca
IN0041:        mov      rcx, 0x7FFDB3EE58A8
                                                              /--*  t83    long   
Generating: N225 (???,???) [000500] ------------       t500 = *  PUTARG_REG long   REG rcx
                                                              /--*  t500   long   arg0 in rcx
Generating: N227 ( 16, 16) [000084] --C---------        t84 = *  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST REG rax $259
							Call: GCvars=0000000000000009 {V00 V04}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}
IN0042:        call     CORINFO_HELP_NEWSFAST
							GC regs: 00000000 {} => 00000001 {rax}
                                                              /--*  t84    ref    
Generating: N229 ( 16, 16) [000086] DA----------              *  STORE_LCL_VAR ref    V13 tmp6         d:2 rdi REG rdi
							GC regs: 00000001 {rax} => 00000000 {}
IN0043:        mov      rdi, rax
							V13 in reg rdi is becoming live  [000086]
							Live regs: 00000040 {rsi} => 000000C0 {rsi rdi}
							Live vars: {V00 V03 V04} => {V00 V03 V04 V13}
							GC regs: 00000000 {} => 00000080 {rdi}
Generating: N231 (  1,  1) [000080] -----------z        t80 =    LCL_VAR   ref    V00 this         u:1 rdx REG rdx $80
                                                              /--*  t80    ref    
Generating: N233 (  2,  2) [000312] -c----------       t312 = *  LEA(b+8)  byref  REG NA
                                                              /--*  t312   byref  
Generating: N235 (  4,  4) [000081] n---GO------        t81 = *  IND       ref    REG rcx <l:$25d, c:$25c>
IN0044:        mov      rdx, gword ptr [V00 rbp+10H]
							GC regs: 00000080 {rdi} => 00000084 {rdx rdi}
							GC regs: 00000084 {rdx rdi} => 00000080 {rdi}
IN0045:        mov      rcx, gword ptr [rdx+8]
							GC regs: 00000080 {rdi} => 00000082 {rcx rdi}
                                                              /--*  t81    ref    
Generating: N237 (  5,  5) [000310] -c----------       t310 = *  LEA(b+8)  byref  REG NA
                                                              /--*  t310   byref  
Generating: N239 (  7,  7) [000082] ---XGO------        t82 = *  IND       ref    REG rbx <l:$267, c:$266>
							GC regs: 00000082 {rcx rdi} => 00000080 {rdi}
IN0046:        mov      rbx, gword ptr [rcx+8]
							GC regs: 00000080 {rdi} => 00000088 {rbx rdi}
                                                              /--*  t82    ref    
Generating: N241 (  7,  7) [000090] DA-XGO------              *  STORE_LCL_VAR ref    V14 tmp7         d:2 rbx REG rbx
							GC regs: 00000088 {rbx rdi} => 00000080 {rdi}
							V14 in reg rbx is becoming live  [000090]
							Live regs: 000000C0 {rsi rdi} => 000000C8 {rbx rsi rdi}
							Live vars: {V00 V03 V04 V13} => {V00 V03 V04 V13 V14}
							GC regs: 00000080 {rdi} => 00000088 {rbx rdi}
Generating: N243 (  1,  1) [000087] ------------        t87 =    LCL_VAR   ref    V13 tmp6         u:2 rdi REG rdi $259
                                                              /--*  t87    ref    
Generating: N245 (???,???) [000501] ------------       t501 = *  PUTARG_REG ref    REG rcx
IN0047:        mov      rcx, rdi
							GC regs: 00000088 {rbx rdi} => 0000008A {rcx rbx rdi}
                                                              /--*  t501   ref    this in rcx
Generating: N247 ( 15,  8) [000230] --CXG-------              *  CALL      void   System.Object..ctor REG NA $VN.Void
							GC regs: 0000008A {rcx rbx rdi} => 00000088 {rbx rdi}
							Call: GCvars=0000000000000009 {V00 V04}, gcrefRegs=00000088 {rbx rdi}, byrefRegs=00000000 {}
IN0048:        call     System.Object:.ctor():this
Added IP mapping: 0x0093 (G_M48562_IG05,ins#11,ofs#51)
Generating: N249 (???,???) [000443] ------------                 IL_OFFSET void   IL offset: 0x93 REG NA
Generating: N251 (  1,  1) [000091] ------------        t91 =    LCL_VAR   ref    V14 tmp7         u:2 rbx (last use) REG rbx <l:$25f, c:$b9>
                                                              /--*  t91    ref    
Generating: N253 (  2,  2) [000315] ------------       t315 = *  LEA(b+8)  byref  REG rcx
							V14 in reg rbx is becoming dead  [000091]
							Live regs: 000000C8 {rbx rsi rdi} => 000000C0 {rsi rdi}
							Live vars: {V00 V03 V04 V13 V14} => {V00 V03 V04 V13}
							GC regs: 00000088 {rbx rdi} => 00000080 {rdi}
IN0049:        lea      rcx, bword ptr [rbx+8]
							Byref regs: 00000000 {} => 00000002 {rcx}
Generating: N255 (  1,  1) [000092] ------------        t92 =    LCL_VAR   ref    V13 tmp6         u:2 rdi (last use) REG rdi $259
                                                              /--*  t315   byref  
                                                              +--*  t92    ref    
Generating: N257 (???,???) [000444] -A-XG-------              *  STOREIND  ref    REG NA
							Byref regs: 00000002 {rcx} => 00000000 {}
							V13 in reg rdi is becoming dead  [000092]
							Live regs: 000000C0 {rsi rdi} => 00000040 {rsi}
							Live vars: {V00 V03 V04 V13} => {V00 V03 V04}
							GC regs: 00000080 {rdi} => 00000000 {}
IN004a:        mov      rdx, rdi
NoGC Call: savedSet=0000F0E8 {rbx rbp rsi rdi r12 r13 r14 r15}
							Call: GCvars=0000000000000009 {V00 V04}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}
IN004b:        call     CORINFO_HELP_ASSIGN_REF
Added IP mapping: 0x0098 STACK_EMPTY (G_M48562_IG05,ins#14,ofs#63)
Generating: N259 (???,???) [000445] ------------                 IL_OFFSET void   IL offset: 0x98 REG NA
Generating: N261 (  1,  1) [000095] -----------z        t95 =    LCL_VAR   ref    V00 this         u:1 rdx REG rdx $80
                                                              /--*  t95    ref    
Generating: N263 (  2,  2) [000319] -c----------       t319 = *  LEA(b+8)  byref  REG NA
                                                              /--*  t319   byref  
Generating: N265 (  4,  4) [000096] n---GO------        t96 = *  IND       ref    REG rcx <l:$26d, c:$26c>
IN004c:        mov      rdx, gword ptr [V00 rbp+10H]
							GC regs: 00000000 {} => 00000004 {rdx}
							GC regs: 00000004 {rdx} => 00000000 {}
IN004d:        mov      rcx, gword ptr [rdx+8]
							GC regs: 00000000 {} => 00000002 {rcx}
                                                              /--*  t96    ref    
Generating: N267 (  4,  4) [000414] DA--GO-----z              *  STORE_LCL_VAR ref    V28 cse1         d:1 rcx REG rcx
							GC regs: 00000002 {rcx} => 00000000 {}
IN004e:        mov      gword ptr [V28 rbp-48H], rcx
							V28 in reg rcx is becoming live  [000414]
							Live regs: 00000040 {rsi} => 00000042 {rcx rsi}
							Live vars: {V00 V03 V04} => {V00 V03 V04 V28}
							GCvars: {V00 V04} => {V00 V04 V28}
							GC regs: 00000000 {} => 00000002 {rcx}
Generating: N269 (  1,  1) [000415] -----------Z       t415 =    LCL_VAR   ref    V28 cse1         u:1 rcx REG rcx <l:$26d, c:$26c>
                                                              /--*  t415   ref    
Generating: N271 (  6,  6) [000317] ------------       t317 = *  LEA(b+8)  byref  REG rcx
							V28 in reg rcx is becoming dead  [000415]
							Live regs: 00000042 {rcx rsi} => 00000040 {rsi}
							GC regs: 00000002 {rcx} => 00000000 {}
							Var V28 continuing live
IN004f:        lea      rcx, bword ptr [rcx+8]
							Byref regs: 00000000 {} => 00000002 {rcx}
Generating: N273 (  1,  1) [000417] -----------z       t417 =    LCL_VAR   ref    V28 cse1         u:1 rax (last use) REG rax <l:$26b, c:$bf>
                                                              /--*  t417   ref    
Generating: N275 (  2,  2) [000323] -c----------       t323 = *  LEA(b+8)  byref  REG NA
                                                              /--*  t323   byref  
Generating: N277 (  4,  4) [000099] ---XG-------        t99 = *  IND       ref    REG rax <l:$278, c:$277>
IN0050:        mov      rax, gword ptr [V28 rbp-48H]
							V28 in reg rax is becoming live  [000417]
							Live regs: 00000040 {rsi} => 00000041 {rax rsi}
							GC regs: 00000000 {} => 00000001 {rax}
							V28 in reg rax is becoming dead  [000417]
							Live regs: 00000041 {rax rsi} => 00000040 {rsi}
							Live vars: {V00 V03 V04 V28} => {V00 V03 V04}
							GCvars: {V00 V04 V28} => {V00 V04}
							GC regs: 00000001 {rax} => 00000000 {}
IN0051:        mov      rax, gword ptr [rax+8]
							GC regs: 00000000 {} => 00000001 {rax}
                                                              /--*  t99    ref    
Generating: N279 (  5,  5) [000321] -c----------       t321 = *  LEA(b+8)  byref  REG NA
                                                              /--*  t321   byref  
Generating: N281 (  7,  7) [000100] ---XG-------       t100 = *  IND       ref    REG rdi <l:$403, c:$402>
							GC regs: 00000001 {rax} => 00000000 {}
IN0052:        mov      rdi, gword ptr [rax+8]
							GC regs: 00000000 {} => 00000080 {rdi}
                                                              /--*  t100   ref    
Generating: N283 (  7,  7) [000409] DA-XG-------              *  STORE_LCL_VAR ref    V27 cse0         d:1 rdi REG rdi
							GC regs: 00000080 {rdi} => 00000000 {}
							V27 in reg rdi is becoming live  [000409]
							Live regs: 00000040 {rsi} => 000000C0 {rsi rdi}
							Live vars: {V00 V03 V04} => {V00 V03 V04 V27}
							GC regs: 00000000 {} => 00000080 {rdi}
Generating: N285 (  1,  1) [000410] ------------       t410 =    LCL_VAR   ref    V27 cse0         u:1 rdi REG rdi <l:$403, c:$402>
                                                              /--*  t317   byref  
                                                              +--*  t410   ref    
Generating: N287 (???,???) [000446] -A-XGO------              *  STOREIND  ref    REG NA
							Byref regs: 00000002 {rcx} => 00000000 {}
IN0053:        mov      rdx, rdi
NoGC Call: savedSet=0000F0E8 {rbx rbp rsi rdi r12 r13 r14 r15}
							Call: GCvars=0000000000000009 {V00 V04}, gcrefRegs=00000080 {rdi}, byrefRegs=00000000 {}
IN0054:        call     CORINFO_HELP_ASSIGN_REF
Added IP mapping: 0x00B3 STACK_EMPTY (G_M48562_IG05,ins#23,ofs#99)
Generating: N289 (???,???) [000447] ------------                 IL_OFFSET void   IL offset: 0xb3 REG NA
Generating: N291 (  2, 10) [000106] H-----------       t106 =    CNS_INT(h) long   0x7ffdb3b058b8 token REG rcx $1c3
IN0055:        mov      rcx, 0x7FFDB3B058B8
                                                              /--*  t106   long   
Generating: N293 (???,???) [000502] ------------       t502 = *  PUTARG_REG long   REG rcx
                                                              /--*  t502   long   arg0 in rcx
Generating: N295 ( 16, 16) [000107] --C---------       t107 = *  CALL help ref    HELPER.CORINFO_HELP_NEWSFAST REG rax $404
							Call: GCvars=0000000000000009 {V00 V04}, gcrefRegs=00000080 {rdi}, byrefRegs=00000000 {}
IN0056:        call     CORINFO_HELP_NEWSFAST
							GC regs: 00000080 {rdi} => 00000081 {rax rdi}
                                                              /--*  t107   ref    
Generating: N297 ( 16, 16) [000109] DA----------              *  STORE_LCL_VAR ref    V15 tmp8         d:2 rbx REG rbx
							GC regs: 00000081 {rax rdi} => 00000080 {rdi}
IN0057:        mov      rbx, rax
							V15 in reg rbx is becoming live  [000109]
							Live regs: 000000C0 {rsi rdi} => 000000C8 {rbx rsi rdi}
							Live vars: {V00 V03 V04 V27} => {V00 V03 V04 V15 V27}
							GC regs: 00000080 {rdi} => 00000088 {rbx rdi}
Generating: N299 (  1,  1) [000412] ------------       t412 =    LCL_VAR   ref    V27 cse0         u:1 rdi (last use) REG rdi <l:$279, c:$3c4>
                                                              /--*  t412   ref    
Generating: N301 (  1,  3) [000113] DA--G-------              *  STORE_LCL_VAR ref    V16 tmp9         d:2 rdi REG rdi
							V27 in reg rdi is becoming dead  [000412]
							Live regs: 000000C8 {rbx rsi rdi} => 00000048 {rbx rsi}
							Live vars: {V00 V03 V04 V15 V27} => {V00 V03 V04 V15}
							GC regs: 00000088 {rbx rdi} => 00000008 {rbx}
							V16 in reg rdi is becoming live  [000113]
							Live regs: 00000048 {rbx rsi} => 000000C8 {rbx rsi rdi}
							Live vars: {V00 V03 V04 V15} => {V00 V03 V04 V15 V16}
							GC regs: 00000008 {rbx} => 00000088 {rbx rdi}
Generating: N303 (  1,  1) [000110] ------------       t110 =    LCL_VAR   ref    V15 tmp8         u:2 rbx REG rbx $404
                                                              /--*  t110   ref    
Generating: N305 (???,???) [000503] ------------       t503 = *  PUTARG_REG ref    REG rcx
IN0058:        mov      rcx, rbx
							GC regs: 00000088 {rbx rdi} => 0000008A {rcx rbx rdi}
                                                              /--*  t503   ref    this in rcx
Generating: N307 ( 15,  8) [000111] --CXG-------              *  CALL      void   System.Object..ctor REG NA $VN.Void
							GC regs: 0000008A {rcx rbx rdi} => 00000088 {rbx rdi}
							Call: GCvars=0000000000000009 {V00 V04}, gcrefRegs=00000088 {rbx rdi}, byrefRegs=00000000 {}
IN0059:        call     System.Object:.ctor():this
Added IP mapping: 0x00C3 (G_M48562_IG05,ins#28,ofs#125)
Generating: N309 (???,???) [000448] ------------                 IL_OFFSET void   IL offset: 0xc3 REG NA
Generating: N311 (  1,  1) [000114] ------------       t114 =    LCL_VAR   ref    V16 tmp9         u:2 rdi (last use) REG rdi <l:$279, c:$3ca>
                                                              /--*  t114   ref    
Generating: N313 (  2,  2) [000333] ------------       t333 = *  LEA(b+16) byref  REG rcx
							V16 in reg rdi is becoming dead  [000114]
							Live regs: 000000C8 {rbx rsi rdi} => 00000048 {rbx rsi}
							Live vars: {V00 V03 V04 V15 V16} => {V00 V03 V04 V15}
							GC regs: 00000088 {rbx rdi} => 00000008 {rbx}
IN005a:        lea      rcx, bword ptr [rdi+16]
							Byref regs: 00000000 {} => 00000002 {rcx}
Generating: N315 (  1,  1) [000115] ------------       t115 =    LCL_VAR   ref    V15 tmp8         u:2 rbx (last use) REG rbx $404
                                                              /--*  t333   byref  
                                                              +--*  t115   ref    
Generating: N317 (???,???) [000449] -A-XG-------              *  STOREIND  ref    REG NA
							Byref regs: 00000002 {rcx} => 00000000 {}
							V15 in reg rbx is becoming dead  [000115]
							Live regs: 00000048 {rbx rsi} => 00000040 {rsi}
							Live vars: {V00 V03 V04 V15} => {V00 V03 V04}
							GC regs: 00000008 {rbx} => 00000000 {}
IN005b:        mov      rdx, rbx
NoGC Call: savedSet=0000F0E8 {rbx rbp rsi rdi r12 r13 r14 r15}
							Call: GCvars=0000000000000009 {V00 V04}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}
IN005c:        call     CORINFO_HELP_ASSIGN_REF
IN005d:        nop      

Variable Live Range History Dump for BB03
V00 this: rbp[16] (1 slot) [(G_M48562_IG02,ins#0,ofs#0), ...]
V03 loc1: rsi [(G_M48562_IG03,ins#14,ofs#62), ...]
V04 loc2: rbp[-64] (1 slot) [(G_M48562_IG04,ins#3,ofs#12), ...]

=============== Generating BB04 [0CA..0CD) -> BB06 (cond), preds={BB03} succs={BB05,BB06} flags=0x00000000.a1090030: keep i label gcsafe bwd LIR cfb 
BB04 IN (3)={V00 V04 V03} + ByrefExposed + GcHeap
     OUT(3)={V00 V04 V03} + ByrefExposed + GcHeap

Recording Var Locations at start of BB04
  V03(rsi)
Liveness not changing: 0000000000000049 {V00 V03 V04}
							Live regs: 00000000 {} => 00000040 {rsi}
							GC regs: (unchanged) 00000000 {}
							Byref regs: (unchanged) 00000000 {}

      L_M48562_BB04:

      G_M48562_IG05:        ; offs=00011AH, funclet=00, bbWeight=8   
Mapped BB04 to G_M48562_IG06
Label: IG06, GCvars=0000000000000009 {V00 V04}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}

Scope info: begin block BB04, IL range [0CA..0CD)
Generating: N321 (  3,  2) [000256] -c----------       t256 =    LCL_VAR   bool  (AX) V05 loc3          NA REG NA $382
Generating: N323 (  1,  1) [000257] -c----------       t257 =    CNS_INT   bool   0 REG NA $40
                                                              /--*  t256   bool   
                                                              +--*  t257   bool   
Generating: N325 (  6,  6) [000255] J---G--N-U--              *  EQ        void   REG NA $344
IN005e:        cmp      byte  ptr [V05 rbp-28H], 0
Generating: N327 (  8,  8) [000254] ----G-------              *  JTRUE     void   REG NA
IN005f:        je       L_M48562_BB06

Variable Live Range History Dump for BB04
V00 this: rbp[16] (1 slot) [(G_M48562_IG02,ins#0,ofs#0), ...]
V03 loc1: rsi [(G_M48562_IG03,ins#14,ofs#62), ...]
V04 loc2: rbp[-64] (1 slot) [(G_M48562_IG04,ins#3,ofs#12), ...]

=============== Generating BB05 [0CD..0D4), preds={BB04} succs={BB06} flags=0x00000002.21080020: i hascall gcsafe bwd LIR 
BB05 IN (3)={V00 V04 V03} + ByrefExposed + GcHeap
     OUT(2)={V00     V03} + ByrefExposed + GcHeap

Recording Var Locations at start of BB05
  V03(rsi)
Liveness not changing: 0000000000000049 {V00 V03 V04}
							Live regs: 00000000 {} => 00000040 {rsi}
							GC regs: (unchanged) 00000000 {}
							Byref regs: (unchanged) 00000000 {}

      L_M48562_BB05:
Adding label due to BB weight difference: BBJ_COND BB04 with weight 800 different from BB05 with weight 400

      G_M48562_IG06:        ; offs=0001A4H, funclet=00, bbWeight=8   
Mapped BB05 to G_M48562_IG07
Label: IG07, GCvars=0000000000000009 {V00 V04}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}

Scope info: begin block BB05, IL range [0CD..0D4)
Generating: N331 (  1,  1) [000259] ------------       t259 =    LCL_VAR   ref    V04 loc2         u:3 rcx (last use) REG rcx <l:$256, c:$b2>
IN0060:        mov      rcx, gword ptr [V04 rbp-40H]
							Live vars: {V00 V03 V04} => {V00 V03}
							GCvars: {V00 V04} => {V00}
							GC regs: 00000000 {} => 00000002 {rcx}
                                                              /--*  t259   ref    
Generating: N333 (???,???) [000504] ------------       t504 = *  PUTARG_REG ref    REG rcx
							GC regs: 00000002 {rcx} => 00000000 {}
							GC regs: 00000000 {} => 00000002 {rcx}
                                                              /--*  t504   ref    arg0 in rcx
Generating: N335 ( 15,  7) [000258] --CXG-------              *  CALL      void   System.Threading.Monitor.Exit REG NA $VN.Void
							GC regs: 00000002 {rcx} => 00000000 {}
							Call: GCvars=0000000000000001 {V00}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}
IN0061:        call     System.Threading.Monitor:Exit(System.Object)

Variable Live Range History Dump for BB05
V00 this: rbp[16] (1 slot) [(G_M48562_IG02,ins#0,ofs#0), ...]
V03 loc1: rsi [(G_M48562_IG03,ins#14,ofs#62), ...]
V04 loc2: rbp[-64] (1 slot) [(G_M48562_IG04,ins#3,ofs#12), (G_M48562_IG07,ins#1,ofs#4)]

=============== Generating BB06 [0D4..0DD) -> BB02 (cond), preds={BB04,BB05} succs={BB07,BB02} flags=0x00000000.21090020: i label gcsafe bwd LIR 
BB06 IN (2)={V00 V03} + ByrefExposed + GcHeap
     OUT(2)={V00 V03} + ByrefExposed + GcHeap

Recording Var Locations at start of BB06
  V03(rsi)
Liveness not changing: 0000000000000041 {V00 V03}
							Live regs: 00000000 {} => 00000040 {rsi}
							GC regs: (unchanged) 00000000 {}
							Byref regs: (unchanged) 00000000 {}

      L_M48562_BB06:

      G_M48562_IG07:        ; offs=0001AEH, funclet=00, bbWeight=4   
Mapped BB06 to G_M48562_IG08
Label: IG08, GCvars=0000000000000001 {V00}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}

Scope info: begin block BB06, IL range [0D4..0DD)
Added IP mapping: 0x00D4 STACK_EMPTY (G_M48562_IG08,ins#0,ofs#0) label
Generating: N339 (???,???) [000450] ------------                 IL_OFFSET void   IL offset: 0xd4 REG NA
Generating: N341 (  1,  1) [000118] ------------       t118 =    LCL_VAR   int    V03 loc1         u:3 rsi (last use) REG rsi $380
Generating: N343 (  1,  1) [000119] -c----------       t119 =    CNS_INT   int    1 REG NA $4e
                                                              /--*  t118   int    
                                                              +--*  t119   int    
Generating: N345 (  3,  3) [000120] ------------       t120 = *  ADD       int    REG rsi $345
							V03 in reg rsi is becoming dead  [000118]
							Live regs: 00000040 {rsi} => 00000000 {}
							Live vars: {V00 V03} => {V00}
IN0062:        inc      esi
                                                              /--*  t120   int    
Generating: N347 (  3,  3) [000122] DA----------              *  STORE_LCL_VAR int    V03 loc1         d:4 rsi REG rsi
							V03 in reg rsi is becoming live  [000122]
							Live regs: 00000000 {} => 00000040 {rsi}
							Live vars: {V00} => {V00 V03}
Extending debug range...
Added IP mapping: 0x00D8 STACK_EMPTY (G_M48562_IG08,ins#1,ofs#2)
Generating: N349 (???,???) [000451] ------------                 IL_OFFSET void   IL offset: 0xd8 REG NA
Generating: N351 (  1,  1) [000065] ------------        t65 =    LCL_VAR   int    V03 loc1         u:4 rsi REG rsi $345
Generating: N353 (  1,  1) [000066] -c----------        t66 =    CNS_INT   int    10 REG NA $43
                                                              /--*  t65    int    
                                                              +--*  t66    int    
Generating: N355 (  3,  3) [000067] J------N----              *  LT        void   REG NA $346
IN0063:        cmp      esi, 10
Generating: N357 (  5,  5) [000068] ------------              *  JTRUE     void   REG NA
IN0064:        jl       L_M48562_BB02

Variable Live Range History Dump for BB06
V00 this: rbp[16] (1 slot) [(G_M48562_IG02,ins#0,ofs#0), ...]
V03 loc1: rsi [(G_M48562_IG03,ins#14,ofs#62), ...]

=============== Generating BB07 [0DD..0F9), preds={BB06} succs={BB08} flags=0x00000002.20080020: i hascall gcsafe LIR 
BB07 IN (1)={V00} + ByrefExposed + GcHeap
     OUT(1)={V00} + ByrefExposed + GcHeap

Recording Var Locations at start of BB07
  <none>

Change life 0000000000000041 {V00 V03} -> 0000000000000001 {V00}
							V03 in reg rsi is becoming dead  [------]
							Live regs: (unchanged) 00000000 {}
							Live regs: (unchanged) 00000000 {}
							GC regs: (unchanged) 00000000 {}
							Byref regs: (unchanged) 00000000 {}

      L_M48562_BB07:
Adding label due to BB weight difference: BBJ_COND BB06 with weight 800 different from BB07 with weight 100

      G_M48562_IG08:        ; offs=0001B7H, funclet=00, bbWeight=8   
Mapped BB07 to G_M48562_IG09
Label: IG09, GCvars=0000000000000001 {V00}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}

Scope info: begin block BB07, IL range [0DD..0F9)
Added IP mapping: 0x00DD STACK_EMPTY (G_M48562_IG09,ins#0,ofs#0) label
Generating: N361 (???,???) [000452] ------------                 IL_OFFSET void   IL offset: 0xdd REG NA
Generating: N363 ( 14,  5) [000130] --CXG-------       t130 =    CALL      long   System.DateTime.get_Now REG rax $c4
							Call: GCvars=0000000000000001 {V00}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}
IN0065:        call     System.DateTime:get_Now():System.DateTime
                                                              /--*  t130   long   
Generating: N365 ( 18,  8) [000133] DA-XG-------              *  STORE_LCL_VAR struct<System.DateTime, 8>(AX)(P) V02 loc0          NA
                                                  *    long   V02._dateData (offs=0x00) -> V17 tmp10         REG NA
IN0066:        mov      qword ptr [V02 rbp-20H], rax
Added IP mapping: 0x00E3 STACK_EMPTY (G_M48562_IG09,ins#2,ofs#9)
Generating: N367 (???,???) [000453] ------------                 IL_OFFSET void   IL offset: 0xe3 REG NA
Generating: N369 (  3,  2) [000134] -------N----       t134 =    LCL_VAR_ADDR byref  V02 loc0          rcx
                                                  *    long   V02._dateData (offs=0x00) -> V17 tmp10         REG rcx
IN0067:        lea      rcx, bword ptr [V02 rbp-20H]
							Byref regs: 00000000 {} => 00000002 {rcx}
                                                              /--*  t134   byref  
Generating: N371 (???,???) [000505] ------------       t505 = *  PUTARG_REG byref  REG rcx
							Byref regs: 00000002 {rcx} => 00000000 {}
							Byref regs: 00000000 {} => 00000002 {rcx}
                                                              /--*  t505   byref  this in rcx
Generating: N373 ( 17, 10) [000136] --CXG-------       t136 = *  CALL      ref    System.DateTime.ToString REG rax $3d5
							Byref regs: 00000002 {rcx} => 00000000 {}
							Call: GCvars=0000000000000001 {V00}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}
IN0068:        call     System.DateTime:ToString():System.String:this
							GC regs: 00000000 {} => 00000001 {rax}
                                                              /--*  t136   ref    
Generating: N375 ( 17, 10) [000342] DA-XG-----L-              *  STORE_LCL_VAR ref    V23 tmp16        d:2 rcx REG rcx
							GC regs: 00000001 {rax} => 00000000 {}
IN0069:        mov      rcx, rax
							V23 in reg rcx is becoming live  [000342]
							Live regs: 00000000 {} => 00000002 {rcx}
							Live vars: {V00} => {V00 V23}
							GC regs: 00000000 {} => 00000002 {rcx}
Generating: N377 (  1,  1) [000343] ------------       t343 =    LCL_VAR   ref    V23 tmp16        u:2 rcx (last use) REG rcx $3d5
                                                              /--*  t343   ref    
Generating: N379 (???,???) [000506] ------------       t506 = *  PUTARG_REG ref    REG rcx
							V23 in reg rcx is becoming dead  [000343]
							Live regs: 00000002 {rcx} => 00000000 {}
							Live vars: {V00 V23} => {V00}
							GC regs: 00000002 {rcx} => 00000000 {}
							GC regs: 00000000 {} => 00000002 {rcx}
Generating: N381 (  2, 10) [000339] H-----------       t339 =    CNS_INT(h) long   0x75003200 "	 Waiting for list processing to complete..." REG rdx $1cf
IN006a:        mov      rdx, 0x16D75003200      ; "	 Waiting for list processing to complete..."
                                                              /--*  t339   long   
Generating: N383 (  4, 12) [000340] #---G-------       t340 = *  IND       ref    REG rdx $3d9
IN006b:        mov      rdx, gword ptr [rdx]
							GC regs: 00000002 {rcx} => 00000006 {rcx rdx}
                                                              /--*  t340   ref    
Generating: N385 (???,???) [000507] ----G-------       t507 = *  PUTARG_REG ref    REG rdx
							GC regs: 00000006 {rcx rdx} => 00000002 {rcx}
							GC regs: 00000002 {rcx} => 00000006 {rcx rdx}
                                                              /--*  t506   ref    arg0 in rcx
                                                              +--*  t507   ref    arg1 in rdx
Generating: N387 ( 39, 30) [000138] --CXG-------       t138 = *  CALL      ref    System.String.Concat REG rax $3da
							GC regs: 00000006 {rcx rdx} => 00000004 {rdx}
							GC regs: 00000004 {rdx} => 00000000 {}
							Call: GCvars=0000000000000001 {V00}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}
IN006c:        call     System.String:Concat(System.String,System.String):System.String
							GC regs: 00000000 {} => 00000001 {rax}
                                                              /--*  t138   ref    
Generating:                [000528] --CXG-------       t528 = *  COPY      ref    REG rcx
                                                              /--*  t528   ref    
Generating: N389 (???,???) [000508] --CXG-------       t508 = *  PUTARG_REG ref    REG rcx
							GC regs: 00000001 {rax} => 00000000 {}
IN006d:        mov      rcx, rax
							GC regs: 00000000 {} => 00000002 {rcx}
							GC regs: 00000002 {rcx} => 00000000 {}
							GC regs: 00000000 {} => 00000002 {rcx}
                                                              /--*  t508   ref    arg0 in rcx
Generating: N391 ( 53, 36) [000139] --CXG-------              *  CALL      void   System.Console.WriteLine REG NA $VN.Void
							GC regs: 00000002 {rcx} => 00000000 {}
							Call: GCvars=0000000000000001 {V00}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}
IN006e:        call     System.Console:WriteLine(System.String)

Variable Live Range History Dump for BB07
V00 this: rbp[16] (1 slot) [(G_M48562_IG02,ins#0,ofs#0), ...]
V03 loc1: rsi [(G_M48562_IG03,ins#14,ofs#62), (G_M48562_IG08,ins#3,ofs#11)]

=============== Generating BB08 [0F9..102), preds={BB07,BB12} succs={BB09} flags=0x00000008.21092020: i Loop label gcsafe bwd bwd-target LIR 
BB08 IN (1)={V00    } + ByrefExposed + GcHeap
     OUT(2)={V00 V04} + ByrefExposed + GcHeap

Recording Var Locations at start of BB08
  <none>

Liveness not changing: 0000000000000001 {V00}
							Live regs: (unchanged) 00000000 {}
							GC regs: (unchanged) 00000000 {}
							Byref regs: (unchanged) 00000000 {}

      L_M48562_BB08:

      G_M48562_IG09:        ; offs=0001C2H, funclet=00, bbWeight=1   
Mapped BB08 to G_M48562_IG10
Label: IG10, GCvars=0000000000000001 {V00}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}

Scope info: begin block BB08, IL range [0F9..102)
Added IP mapping: 0x00F9 STACK_EMPTY (G_M48562_IG10,ins#0,ofs#0) label
Generating: N395 (???,???) [000454] ------------                 IL_OFFSET void   IL offset: 0xf9 REG NA
Generating: N397 (  1,  1) [000140] -----------z       t140 =    LCL_VAR   ref    V00 this         u:1 rdx REG rdx $80
                                                              /--*  t140   ref    
Generating: N399 (  2,  2) [000347] -c----------       t347 = *  LEA(b+8)  byref  REG NA
                                                              /--*  t347   byref  
Generating: N401 (  4,  4) [000141] n---GO------       t141 = *  IND       ref    REG rcx <l:$41c, c:$41b>
IN006f:        mov      rdx, gword ptr [V00 rbp+10H]
							GC regs: 00000000 {} => 00000004 {rdx}
							GC regs: 00000004 {rdx} => 00000000 {}
IN0070:        mov      rcx, gword ptr [rdx+8]
							GC regs: 00000000 {} => 00000002 {rcx}
                                                              /--*  t141   ref    
Generating: N403 (  8,  7) [000143] DA--GO------              *  STORE_LCL_VAR ref    V04 loc2         d:2 NA REG NA
							GC regs: 00000002 {rcx} => 00000000 {}
IN0071:        mov      gword ptr [V04 rbp-40H], rcx
							Live vars: {V00} => {V00 V04}
							GCvars: {V00} => {V00 V04}
New debug range: new var or location
Added IP mapping: 0x0100 STACK_EMPTY (G_M48562_IG10,ins#3,ofs#12)
Generating: N405 (???,???) [000455] ------------                 IL_OFFSET void   IL offset: 0x100 REG NA
Generating: N407 (  1,  1) [000144] ------------       t144 =    CNS_INT   int    0 REG rcx $40
IN0072:        xor      ecx, ecx
                                                              /--*  t144   int    
Generating: N409 (  5,  4) [000146] DA--G-------              *  STORE_LCL_VAR int   (AX) V05 loc3          NA REG NA
IN0073:        mov      dword ptr [V05 rbp-28H], ecx

Variable Live Range History Dump for BB08
V00 this: rbp[16] (1 slot) [(G_M48562_IG02,ins#0,ofs#0), ...]
V04 loc2: rbp[-64] (1 slot) [(G_M48562_IG10,ins#3,ofs#12), ...]

=============== Generating BB09 [102..122) -> BB13 (cond), preds={BB08} succs={BB10,BB13} flags=0x00000002.21090130: keep i try label hascall gcsafe bwd LIR 
BB09 IN (2)={V00 V04} + ByrefExposed + GcHeap
     OUT(2)={V00 V04} + ByrefExposed + GcHeap

Recording Var Locations at start of BB09
  <none>

Liveness not changing: 0000000000000009 {V00 V04}
							Live regs: (unchanged) 00000000 {}
							GC regs: (unchanged) 00000000 {}
							Byref regs: (unchanged) 00000000 {}

      L_M48562_BB09:

      G_M48562_IG10:        ; offs=0001F1H, funclet=00, bbWeight=8   
Mapped BB09 to G_M48562_IG11
Label: IG11, GCvars=0000000000000009 {V00 V04}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}

Scope info: begin block BB09, IL range [102..122)
Added IP mapping: 0x0102 STACK_EMPTY (G_M48562_IG11,ins#0,ofs#0) label
Generating: N413 (???,???) [000456] ------------                 IL_OFFSET void   IL offset: 0x102 REG NA
Generating: N415 (  3,  3) [000149] ------------       t149 =    LCL_VAR_ADDR long   V05 loc3          rdx REG rdx $20a
IN0074:        lea      rdx, [V05 rbp-28H]
                                                              /--*  t149   long   
Generating: N417 (???,???) [000509] ------------       t509 = *  PUTARG_REG long   REG rdx
Generating: N419 (  1,  1) [000147] ------------       t147 =    LCL_VAR   ref    V04 loc2         u:2 rcx REG rcx <l:$41a, c:$3df>
IN0075:        mov      rcx, gword ptr [V04 rbp-40H]
							GC regs: 00000000 {} => 00000002 {rcx}
                                                              /--*  t147   ref    
Generating: N421 (???,???) [000510] ------------       t510 = *  PUTARG_REG ref    REG rcx
							GC regs: 00000002 {rcx} => 00000000 {}
							GC regs: 00000000 {} => 00000002 {rcx}
                                                              /--*  t509   long   arg1 in rdx
                                                              +--*  t510   ref    arg0 in rcx
Generating: N423 ( 18, 11) [000150] --CXG-------              *  CALL      void   System.Threading.Monitor.Enter REG NA $VN.Void
							GC regs: 00000002 {rcx} => 00000000 {}
							Call: GCvars=0000000000000009 {V00 V04}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}
IN0076:        call     System.Threading.Monitor:Enter(System.Object,byref)
Added IP mapping: 0x010A STACK_EMPTY (G_M48562_IG11,ins#3,ofs#13)
Generating: N425 (???,???) [000457] ------------                 IL_OFFSET void   IL offset: 0x10a REG NA
Generating: N427 (  1,  1) [000151] -----------z       t151 =    LCL_VAR   ref    V00 this         u:1 rdx REG rdx $80
                                                              /--*  t151   ref    
Generating: N429 (  2,  2) [000353] -c----------       t353 = *  LEA(b+8)  byref  REG NA
                                                              /--*  t353   byref  
Generating: N431 (  4,  4) [000152] n---GO------       t152 = *  IND       ref    REG rcx <l:$420, c:$41f>
IN0077:        mov      rdx, gword ptr [V00 rbp+10H]
							GC regs: 00000000 {} => 00000004 {rdx}
							GC regs: 00000004 {rdx} => 00000000 {}
IN0078:        mov      rcx, gword ptr [rdx+8]
							GC regs: 00000000 {} => 00000002 {rcx}
                                                              /--*  t152   ref    
Generating: N433 (  4,  4) [000419] DA--GO------              *  STORE_LCL_VAR ref    V29 cse2         d:1 rcx REG rcx
							GC regs: 00000002 {rcx} => 00000000 {}
							V29 in reg rcx is becoming live  [000419]
							Live regs: 00000000 {} => 00000002 {rcx}
							Live vars: {V00 V04} => {V00 V04 V29}
							GC regs: 00000000 {} => 00000002 {rcx}
Generating: N435 (  1,  1) [000420] ------------       t420 =    LCL_VAR   ref    V29 cse2         u:1 rcx REG rcx <l:$420, c:$41f>
                                                              /--*  t420   ref    
Generating: N437 (  6,  6) [000351] -c----------       t351 = *  LEA(b+8)  byref  REG NA
                                                              /--*  t351   byref  
Generating: N439 (  8,  8) [000153] ---XGO------       t153 = *  IND       ref    REG rax <l:$42a, c:$429>
IN0079:        mov      rax, gword ptr [rcx+8]
							GC regs: 00000002 {rcx} => 00000003 {rax rcx}
Generating: N441 (  1,  1) [000422] ------------       t422 =    LCL_VAR   ref    V29 cse2         u:1 rcx (last use) REG rcx <l:$41e, c:$3e3>
                                                              /--*  t422   ref    
Generating: N443 (  2,  2) [000355] -c----------       t355 = *  LEA(b+16) byref  REG NA
                                                              /--*  t355   byref  
Generating: N445 (  4,  4) [000156] -c-XG-------       t156 = *  IND       ref    REG NA <l:$435, c:$434>
                                                              /--*  t153   ref    
                                                              +--*  t156   ref    
Generating: N447 ( 13, 13) [000157] N--XGO-N-U--              *  EQ        void   REG NA <l:$34a, c:$349>
							GC regs: 00000003 {rax rcx} => 00000002 {rcx}
							V29 in reg rcx is becoming dead  [000422]
							Live regs: 00000002 {rcx} => 00000000 {}
							Live vars: {V00 V04 V29} => {V00 V04}
							GC regs: 00000002 {rcx} => 00000000 {}
IN007a:        cmp      rax, gword ptr [rcx+16]
Generating: N449 ( 15, 15) [000158] ---XGO------              *  JTRUE     void   REG NA
IN007b:        je       L_M48562_BB13

Variable Live Range History Dump for BB09
V00 this: rbp[16] (1 slot) [(G_M48562_IG02,ins#0,ofs#0), ...]
V04 loc2: rbp[-64] (1 slot) [(G_M48562_IG10,ins#3,ofs#12), ...]

=============== Generating BB10 [126..129) -> BB12 (cond), preds={BB09} succs={BB11,BB12} flags=0x00000000.a1090030: keep i label gcsafe bwd LIR cfb 
BB10 IN (2)={V00 V04} + ByrefExposed + GcHeap
     OUT(2)={V00 V04} + ByrefExposed + GcHeap

Recording Var Locations at start of BB10
  <none>

Liveness not changing: 0000000000000009 {V00 V04}
							Live regs: (unchanged) 00000000 {}
							GC regs: (unchanged) 00000000 {}
							Byref regs: (unchanged) 00000000 {}

      L_M48562_BB10:

      G_M48562_IG11:        ; offs=000202H, funclet=00, bbWeight=8   
Mapped BB10 to G_M48562_IG12
Label: IG12, GCvars=0000000000000009 {V00 V04}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}

Scope info: begin block BB10, IL range [126..129)
Generating: N453 (  3,  2) [000263] -c----------       t263 =    LCL_VAR   bool  (AX) V05 loc3          NA REG NA $384
Generating: N455 (  1,  1) [000264] -c----------       t264 =    CNS_INT   bool   0 REG NA $40
                                                              /--*  t263   bool   
                                                              +--*  t264   bool   
Generating: N457 (  6,  6) [000262] J---G--N-U--              *  EQ        void   REG NA $34e
IN007c:        cmp      byte  ptr [V05 rbp-28H], 0
Generating: N459 (  8,  8) [000261] ----G-------              *  JTRUE     void   REG NA
IN007d:        je       L_M48562_BB12

Variable Live Range History Dump for BB10
V00 this: rbp[16] (1 slot) [(G_M48562_IG02,ins#0,ofs#0), ...]
V04 loc2: rbp[-64] (1 slot) [(G_M48562_IG10,ins#3,ofs#12), ...]

=============== Generating BB11 [129..130), preds={BB10} succs={BB12} flags=0x00000002.21080020: i hascall gcsafe bwd LIR 
BB11 IN (2)={V00 V04} + ByrefExposed + GcHeap
     OUT(1)={V00    } + ByrefExposed + GcHeap

Recording Var Locations at start of BB11
  <none>

Liveness not changing: 0000000000000009 {V00 V04}
							Live regs: (unchanged) 00000000 {}
							GC regs: (unchanged) 00000000 {}
							Byref regs: (unchanged) 00000000 {}

      L_M48562_BB11:
Adding label due to BB weight difference: BBJ_COND BB10 with weight 800 different from BB11 with weight 400

      G_M48562_IG12:        ; offs=000225H, funclet=00, bbWeight=8   
Mapped BB11 to G_M48562_IG13
Label: IG13, GCvars=0000000000000009 {V00 V04}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}

Scope info: begin block BB11, IL range [129..130)
Generating: N463 (  1,  1) [000266] ------------       t266 =    LCL_VAR   ref    V04 loc2         u:2 rcx (last use) REG rcx <l:$41a, c:$3df>
IN007e:        mov      rcx, gword ptr [V04 rbp-40H]
							Live vars: {V00 V04} => {V00}
							GCvars: {V00 V04} => {V00}
							GC regs: 00000000 {} => 00000002 {rcx}
                                                              /--*  t266   ref    
Generating: N465 (???,???) [000511] ------------       t511 = *  PUTARG_REG ref    REG rcx
							GC regs: 00000002 {rcx} => 00000000 {}
							GC regs: 00000000 {} => 00000002 {rcx}
                                                              /--*  t511   ref    arg0 in rcx
Generating: N467 ( 15,  7) [000265] --CXG-------              *  CALL      void   System.Threading.Monitor.Exit REG NA $VN.Void
							GC regs: 00000002 {rcx} => 00000000 {}
							Call: GCvars=0000000000000001 {V00}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}
IN007f:        call     System.Threading.Monitor:Exit(System.Object)

Variable Live Range History Dump for BB11
V00 this: rbp[16] (1 slot) [(G_M48562_IG02,ins#0,ofs#0), ...]
V04 loc2: rbp[-64] (1 slot) [(G_M48562_IG10,ins#3,ofs#12), (G_M48562_IG13,ins#1,ofs#4)]

=============== Generating BB12 [130..139) -> BB08 (always), preds={BB10,BB11} succs={BB08} flags=0x00000002.21090020: i label hascall gcsafe bwd LIR 
BB12 IN (1)={V00} + ByrefExposed + GcHeap
     OUT(1)={V00} + ByrefExposed + GcHeap

Recording Var Locations at start of BB12
  <none>

Liveness not changing: 0000000000000001 {V00}
							Live regs: (unchanged) 00000000 {}
							GC regs: (unchanged) 00000000 {}
							Byref regs: (unchanged) 00000000 {}

      L_M48562_BB12:

      G_M48562_IG13:        ; offs=00022FH, funclet=00, bbWeight=4   
Mapped BB12 to G_M48562_IG14
Label: IG14, GCvars=0000000000000001 {V00}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}

Scope info: begin block BB12, IL range [130..139)
Added IP mapping: 0x0130 STACK_EMPTY (G_M48562_IG14,ins#0,ofs#0) label
Generating: N471 (???,???) [000458] ------------                 IL_OFFSET void   IL offset: 0x130 REG NA
Generating: N473 (  1,  1) [000159] ------------       t159 =    CNS_INT   int    100 REG rcx $5b
IN0080:        mov      ecx, 100
                                                              /--*  t159   int    
Generating: N475 (???,???) [000512] ------------       t512 = *  PUTARG_REG int    REG rcx
                                                              /--*  t512   int    arg0 in rcx
Generating: N477 ( 15,  7) [000160] --CXG-------              *  CALL      void   System.Threading.Thread.Sleep REG NA $VN.Void
							Call: GCvars=0000000000000001 {V00}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}
IN0081:        call     System.Threading.Thread:Sleep(int)
IN0082:        jmp      SHORT L_M48562_BB08

Variable Live Range History Dump for BB12
V00 this: rbp[16] (1 slot) [(G_M48562_IG02,ins#0,ofs#0), ...]

=============== Generating BB13 [???..???) -> BB30 (callf), preds={BB09} succs={BB30} flags=0x00000000.20090060: i internal label gcsafe LIR 
BB13 IN (2)={V00 V04} + ByrefExposed + GcHeap
     OUT(2)={V00 V04} + ByrefExposed + GcHeap

Recording Var Locations at start of BB13
  <none>

Change life 0000000000000001 {V00} -> 0000000000000009 {V00 V04}
							V04 becoming live
New debug range: new var or location
							Live regs: (unchanged) 00000000 {}
							GC regs: (unchanged) 00000000 {}
							Byref regs: (unchanged) 00000000 {}

      L_M48562_BB13:

      G_M48562_IG14:        ; offs=000238H, funclet=00, bbWeight=8   
Mapped BB13 to G_M48562_IG15
Label: IG15, GCvars=0000000000000009 {V00 V04}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}

Scope info: begin block BB13, IL range [???..???)
Scope info: ignoring block beginning
Added IP mapping: NO_MAP STACK_EMPTY (G_M48562_IG15,ins#0,ofs#0) label
Scope info: ignoring block end
IN0083:        mov      rcx, rsp
IN0084:        call     L_M48562_BB30

      G_M48562_IG15:        ; offs=000244H, funclet=00, bbWeight=1   
IN0085:        nop      

Variable Live Range History Dump for BB14
V00 this: rbp[16] (1 slot) [(G_M48562_IG02,ins#0,ofs#0), ...]
V04 loc2: rbp[-64] (1 slot) [(G_M48562_IG14,ins#3,ofs#12), ...]

=============== Generating BB15 [139..17D), preds={BB14} succs={BB19} flags=0x00000006.20090020: i label hascall gcsafe LIR 
BB15 IN (1)={V00} + ByrefExposed + GcHeap
     OUT(1)={V00} + ByrefExposed + GcHeap

Recording Var Locations at start of BB15
  <none>

Change life 0000000000000009 {V00 V04} -> 0000000000000001 {V00}
							V04 becoming dead
							Live regs: (unchanged) 00000000 {}
							GC regs: (unchanged) 00000000 {}
							Byref regs: (unchanged) 00000000 {}

      L_M48562_BB15:

      G_M48562_IG16:        ; offs=00024CH, funclet=00, bbWeight=1   
Mapped BB15 to G_M48562_IG17
Label: IG17, GCvars=0000000000000001 {V00}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}

Scope info: begin block BB15, IL range [139..17D)
Added IP mapping: 0x0139 STACK_EMPTY (G_M48562_IG17,ins#0,ofs#0) label
Generating: N513 (???,???) [000459] ------------                 IL_OFFSET void   IL offset: 0x139 REG NA
Generating: N515 ( 14,  5) [000161] --CXG-------       t161 =    CALL      long   System.DateTime.get_Now REG rax $c6
							Call: GCvars=0000000000000001 {V00}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}
IN0086:        call     System.DateTime:get_Now():System.DateTime
                                                              /--*  t161   long   
Generating: N517 ( 18,  8) [000164] DA-XG-------              *  STORE_LCL_VAR struct<System.DateTime, 8>(AX)(P) V02 loc0          NA
                                                  *    long   V02._dateData (offs=0x00) -> V17 tmp10         REG NA
IN0087:        mov      qword ptr [V02 rbp-20H], rax
Added IP mapping: 0x013F STACK_EMPTY (G_M48562_IG17,ins#2,ofs#9)
Generating: N519 (???,???) [000460] ------------                 IL_OFFSET void   IL offset: 0x13f REG NA
Generating: N521 (  3,  2) [000165] -------N----       t165 =    LCL_VAR_ADDR byref  V02 loc0          rcx
                                                  *    long   V02._dateData (offs=0x00) -> V17 tmp10         REG rcx
IN0088:        lea      rcx, bword ptr [V02 rbp-20H]
							Byref regs: 00000000 {} => 00000002 {rcx}
                                                              /--*  t165   byref  
Generating: N523 (???,???) [000513] ------------       t513 = *  PUTARG_REG byref  REG rcx
							Byref regs: 00000002 {rcx} => 00000000 {}
							Byref regs: 00000000 {} => 00000002 {rcx}
                                                              /--*  t513   byref  this in rcx
Generating: N525 ( 17, 10) [000167] --CXG-------       t167 = *  CALL      ref    System.DateTime.ToString REG rax $3ef
							Byref regs: 00000002 {rcx} => 00000000 {}
							Call: GCvars=0000000000000001 {V00}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}
IN0089:        call     System.DateTime:ToString():System.String:this
							GC regs: 00000000 {} => 00000001 {rax}
                                                              /--*  t167   ref    
Generating: N527 ( 17, 10) [000367] DA-XG-----L-              *  STORE_LCL_VAR ref    V24 tmp17        d:2 rcx REG rcx
							GC regs: 00000001 {rax} => 00000000 {}
IN008a:        mov      rcx, rax
							V24 in reg rcx is becoming live  [000367]
							Live regs: 00000000 {} => 00000002 {rcx}
							Live vars: {V00} => {V00 V24}
							GC regs: 00000000 {} => 00000002 {rcx}
Generating: N529 (  1,  1) [000368] ------------       t368 =    LCL_VAR   ref    V24 tmp17        u:2 rcx (last use) REG rcx $3ef
                                                              /--*  t368   ref    
Generating: N531 (???,???) [000514] ------------       t514 = *  PUTARG_REG ref    REG rcx
							V24 in reg rcx is becoming dead  [000368]
							Live regs: 00000002 {rcx} => 00000000 {}
							Live vars: {V00 V24} => {V00}
							GC regs: 00000002 {rcx} => 00000000 {}
							GC regs: 00000000 {} => 00000002 {rcx}
Generating: N533 (  2, 10) [000364] H-----------       t364 =    CNS_INT(h) long   0x75003208 "	 Done.  Profiler is active, available options:" REG rdx $1d3
IN008b:        mov      rdx, 0x16D75003208      ; "	 Done.  Profiler is active, available options:"
                                                              /--*  t364   long   
Generating: N535 (  4, 12) [000365] #---G-------       t365 = *  IND       ref    REG rdx $3f3
IN008c:        mov      rdx, gword ptr [rdx]
							GC regs: 00000002 {rcx} => 00000006 {rcx rdx}
                                                              /--*  t365   ref    
Generating: N537 (???,???) [000515] ----G-------       t515 = *  PUTARG_REG ref    REG rdx
							GC regs: 00000006 {rcx rdx} => 00000002 {rcx}
							GC regs: 00000002 {rcx} => 00000006 {rcx rdx}
                                                              /--*  t514   ref    arg0 in rcx
                                                              +--*  t515   ref    arg1 in rdx
Generating: N539 ( 39, 30) [000169] --CXG-------       t169 = *  CALL      ref    System.String.Concat REG rax $3f4
							GC regs: 00000006 {rcx rdx} => 00000004 {rdx}
							GC regs: 00000004 {rdx} => 00000000 {}
							Call: GCvars=0000000000000001 {V00}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}
IN008d:        call     System.String:Concat(System.String,System.String):System.String
							GC regs: 00000000 {} => 00000001 {rax}
                                                              /--*  t169   ref    
Generating:                [000529] --CXG-------       t529 = *  COPY      ref    REG rcx
                                                              /--*  t529   ref    
Generating: N541 (???,???) [000516] --CXG-------       t516 = *  PUTARG_REG ref    REG rcx
							GC regs: 00000001 {rax} => 00000000 {}
IN008e:        mov      rcx, rax
							GC regs: 00000000 {} => 00000002 {rcx}
							GC regs: 00000002 {rcx} => 00000000 {}
							GC regs: 00000000 {} => 00000002 {rcx}
                                                              /--*  t516   ref    arg0 in rcx
Generating: N543 ( 53, 36) [000170] --CXG-------              *  CALL      void   System.Console.WriteLine REG NA $VN.Void
							GC regs: 00000002 {rcx} => 00000000 {}
							Call: GCvars=0000000000000001 {V00}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}
IN008f:        call     System.Console:WriteLine(System.String)
Added IP mapping: 0x0155 STACK_EMPTY (G_M48562_IG17,ins#10,ofs#47)
Generating: N545 (???,???) [000461] ------------                 IL_OFFSET void   IL offset: 0x155 REG NA
Generating: N547 (  2, 10) [000371] H-----------       t371 =    CNS_INT(h) long   0x75003210 "   Q = quit" REG rcx $1d4
IN0090:        mov      rcx, 0x16D75003210      ; "   Q = quit"
                                                              /--*  t371   long   
Generating: N549 (  4, 12) [000372] #---G-------       t372 = *  IND       ref    REG rcx $3f8
IN0091:        mov      rcx, gword ptr [rcx]
							GC regs: 00000000 {} => 00000002 {rcx}
                                                              /--*  t372   ref    
Generating: N551 (???,???) [000517] ----G-------       t517 = *  PUTARG_REG ref    REG rcx
							GC regs: 00000002 {rcx} => 00000000 {}
							GC regs: 00000000 {} => 00000002 {rcx}
                                                              /--*  t517   ref    arg0 in rcx
Generating: N553 ( 18, 18) [000172] --CXG-------              *  CALL      void   System.Console.WriteLine REG NA $VN.Void
							GC regs: 00000002 {rcx} => 00000000 {}
							Call: GCvars=0000000000000001 {V00}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}
IN0092:        call     System.Console:WriteLine(System.String)
Added IP mapping: 0x015F STACK_EMPTY (G_M48562_IG17,ins#13,ofs#65)
Generating: N555 (???,???) [000462] ------------                 IL_OFFSET void   IL offset: 0x15f REG NA
Generating: N557 (  2, 10) [000374] H-----------       t374 =    CNS_INT(h) long   0x75003218 "   H = heap snapshot" REG rcx $1d5
IN0093:        mov      rcx, 0x16D75003218      ; "   H = heap snapshot"
                                                              /--*  t374   long   
Generating: N559 (  4, 12) [000375] #---G-------       t375 = *  IND       ref    REG rcx $3fb
IN0094:        mov      rcx, gword ptr [rcx]
							GC regs: 00000000 {} => 00000002 {rcx}
                                                              /--*  t375   ref    
Generating: N561 (???,???) [000518] ----G-------       t518 = *  PUTARG_REG ref    REG rcx
							GC regs: 00000002 {rcx} => 00000000 {}
							GC regs: 00000000 {} => 00000002 {rcx}
                                                              /--*  t518   ref    arg0 in rcx
Generating: N563 ( 18, 18) [000174] --CXG-------              *  CALL      void   System.Console.WriteLine REG NA $VN.Void
							GC regs: 00000002 {rcx} => 00000000 {}
							Call: GCvars=0000000000000001 {V00}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}
IN0095:        call     System.Console:WriteLine(System.String)
Added IP mapping: 0x0169 STACK_EMPTY (G_M48562_IG17,ins#16,ofs#83)
Generating: N565 (???,???) [000463] ------------                 IL_OFFSET void   IL offset: 0x169 REG NA
Generating: N567 (  2, 10) [000377] H-----------       t377 =    CNS_INT(h) long   0x75003220 "   G = GC (max gen)" REG rcx $1d6
IN0096:        mov      rcx, 0x16D75003220      ; "   G = GC (max gen)"
                                                              /--*  t377   long   
Generating: N569 (  4, 12) [000378] #---G-------       t378 = *  IND       ref    REG rcx $3fe
IN0097:        mov      rcx, gword ptr [rcx]
							GC regs: 00000000 {} => 00000002 {rcx}
                                                              /--*  t378   ref    
Generating: N571 (???,???) [000519] ----G-------       t519 = *  PUTARG_REG ref    REG rcx
							GC regs: 00000002 {rcx} => 00000000 {}
							GC regs: 00000000 {} => 00000002 {rcx}
                                                              /--*  t519   ref    arg0 in rcx
Generating: N573 ( 18, 18) [000176] --CXG-------              *  CALL      void   System.Console.WriteLine REG NA $VN.Void
							GC regs: 00000002 {rcx} => 00000000 {}
							Call: GCvars=0000000000000001 {V00}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}
IN0098:        call     System.Console:WriteLine(System.String)
Added IP mapping: 0x0173 STACK_EMPTY (G_M48562_IG17,ins#19,ofs#101)
Generating: N575 (???,???) [000464] ------------                 IL_OFFSET void   IL offset: 0x173 REG NA
Generating: N577 (  2, 10) [000380] H-----------       t380 =    CNS_INT(h) long   0x75003228 "   R = clear the running flag to stop the consumer thread" REG rcx $1d7
IN0099:        mov      rcx, 0x16D75003228      ; "   R = clear the running flag to stop the consumer thread"
                                                              /--*  t380   long   
Generating: N579 (  4, 12) [000381] #---G-------       t381 = *  IND       ref    REG rcx $4c1
IN009a:        mov      rcx, gword ptr [rcx]
							GC regs: 00000000 {} => 00000002 {rcx}
                                                              /--*  t381   ref    
Generating: N581 (???,???) [000520] ----G-------       t520 = *  PUTARG_REG ref    REG rcx
							GC regs: 00000002 {rcx} => 00000000 {}
							GC regs: 00000000 {} => 00000002 {rcx}
                                                              /--*  t520   ref    arg0 in rcx
Generating: N583 ( 18, 18) [000178] --CXG-------              *  CALL      void   System.Console.WriteLine REG NA $VN.Void
							GC regs: 00000002 {rcx} => 00000000 {}
							Call: GCvars=0000000000000001 {V00}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}
IN009b:        call     System.Console:WriteLine(System.String)

Variable Live Range History Dump for BB15
V00 this: rbp[16] (1 slot) [(G_M48562_IG02,ins#0,ofs#0), ...]
V04 loc2: rbp[-64] (1 slot) [(G_M48562_IG14,ins#3,ofs#12), (G_M48562_IG16,ins#1,ofs#1)]

=============== Generating BB19 [17D..18F) -> BB21 (cond), preds={BB15,BB20,BB22,BB24,BB25} succs={BB20,BB21} flags=0x0000000e.21092020: i Loop label hascall gcsafe bwd bwd-target LIR 
BB19 IN (1)={V00} + ByrefExposed + GcHeap
     OUT(1)={V00} + ByrefExposed + GcHeap

Recording Var Locations at start of BB19
  <none>

Liveness not changing: 0000000000000001 {V00}
							Live regs: (unchanged) 00000000 {}
							GC regs: (unchanged) 00000000 {}
							Byref regs: (unchanged) 00000000 {}

      L_M48562_BB19:

      G_M48562_IG17:        ; offs=00024DH, funclet=00, bbWeight=1   
Mapped BB19 to G_M48562_IG18
Label: IG18, GCvars=0000000000000001 {V00}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}

Scope info: begin block BB19, IL range [17D..18F)
Generating: N587 (  3,  2) [000236] -------N----       t236 =    LCL_VAR_ADDR byref  V06 loc4          rcx
                                                  *    ushort V06._keyChar (offs=0x00) -> V18 tmp11        
                                                  *    int    V06._key (offs=0x04) -> V19 tmp12        
                                                  *    int    V06._mods (offs=0x08) -> V20 tmp13         REG rcx
IN009c:        lea      rcx, bword ptr [V06 rbp-38H]
							Byref regs: 00000000 {} => 00000002 {rcx}
                                                              /--*  t236   byref  
Generating: N589 (???,???) [000521] ------------       t521 = *  PUTARG_REG byref  REG rcx
							Byref regs: 00000002 {rcx} => 00000000 {}
							Byref regs: 00000000 {} => 00000002 {rcx}
Generating: N591 (  1,  1) [000232] ------------       t232 =    CNS_INT   int    0 REG rdx $40
IN009d:        xor      edx, edx
                                                              /--*  t232   int    
Generating: N593 (???,???) [000522] ------------       t522 = *  PUTARG_REG int    REG rdx
                                                              /--*  t521   byref  arg0 in rcx
                                                              +--*  t522   int    arg1 in rdx
Generating: N595 ( 18, 11) [000233] S-CXG-------              *  CALL      void   System.ConsolePal.ReadKey REG NA $VN.Void
							Byref regs: 00000002 {rcx} => 00000000 {}
							Call: GCvars=0000000000000001 {V00}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}
IN009e:        call     System.ConsolePal:ReadKey(bool):System.ConsoleKeyInfo
Generating: N597 (  3,  2) [000240] -c----------       t240 =    LCL_VAR   int   (AX) V19 tmp12         NA REG NA $385
Generating: N599 (  1,  1) [000187] -c----------       t187 =    CNS_INT   int    71 REG NA $5e
                                                              /--*  t240   int    
                                                              +--*  t187   int    
Generating: N601 (  5,  4) [000188] N---G--N-U--              *  NE        void   REG NA $34f
IN009f:        cmp      dword ptr [V19 rbp-34H], 71
Generating: N603 (  7,  6) [000189] ----G-------              *  JTRUE     void   REG NA
IN00a0:        jne      L_M48562_BB21

Variable Live Range History Dump for BB19
V00 this: rbp[16] (1 slot) [(G_M48562_IG02,ins#0,ofs#0), ...]

=============== Generating BB20 [18F..19B) -> BB19 (always), preds={BB19} succs={BB19} flags=0x00000006.21080020: i hascall gcsafe bwd LIR 
BB20 IN (1)={V00} + ByrefExposed + GcHeap
     OUT(1)={V00} + ByrefExposed + GcHeap

Recording Var Locations at start of BB20
  <none>

Liveness not changing: 0000000000000001 {V00}
							Live regs: (unchanged) 00000000 {}
							GC regs: (unchanged) 00000000 {}
							Byref regs: (unchanged) 00000000 {}

      L_M48562_BB20:

Scope info: begin block BB20, IL range [18F..19B)
Added IP mapping: 0x018F STACK_EMPTY (G_M48562_IG18,ins#5,ofs#21) label
Generating: N607 (???,???) [000465] ------------                 IL_OFFSET void   IL offset: 0x18f REG NA
Generating: N609 ( 14,  5) [000221] --CXG-------       t221 =    CALL      int    System.GC.get_MaxGeneration REG rax $305
							Call: GCvars=0000000000000001 {V00}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}
IN00a1:        call     System.GC:get_MaxGeneration():int
                                                              /--*  t221   int    
Generating:                [000530] --CXG-------       t530 = *  COPY      int    REG rcx
                                                              /--*  t530   int    
Generating: N611 (???,???) [000523] --CXG-------       t523 = *  PUTARG_REG int    REG rcx
IN00a2:        mov      ecx, eax
                                                              /--*  t523   int    arg0 in rcx
Generating: N613 ( 28, 11) [000222] --CXG-------              *  CALL      void   System.GC.Collect REG NA $VN.Void
							Call: GCvars=0000000000000001 {V00}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}
IN00a3:        call     System.GC:Collect(int)
IN00a4:        jmp      SHORT L_M48562_BB19

Variable Live Range History Dump for BB20
V00 this: rbp[16] (1 slot) [(G_M48562_IG02,ins#0,ofs#0), ...]

=============== Generating BB21 [19B..1A6) -> BB23 (cond), preds={BB19} succs={BB22,BB23} flags=0x00000004.21090020: i label gcsafe bwd LIR 
BB21 IN (1)={V00} + ByrefExposed + GcHeap
     OUT(1)={V00} + ByrefExposed + GcHeap

Recording Var Locations at start of BB21
  <none>

Liveness not changing: 0000000000000001 {V00}
							Live regs: (unchanged) 00000000 {}
							GC regs: (unchanged) 00000000 {}
							Byref regs: (unchanged) 00000000 {}

      L_M48562_BB21:

      G_M48562_IG18:        ; offs=0002C4H, funclet=00, bbWeight=8   
Mapped BB21 to G_M48562_IG19
Label: IG19, GCvars=0000000000000001 {V00}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}

Scope info: begin block BB21, IL range [19B..1A6)
Generating: N617 (  3,  2) [000244] -c----------       t244 =    LCL_VAR   int   (AX) V19 tmp12         NA REG NA $385
Generating: N619 (  1,  1) [000194] -c----------       t194 =    CNS_INT   int    72 REG NA $5f
                                                              /--*  t244   int    
                                                              +--*  t194   int    
Generating: N621 (  5,  4) [000195] N---G--N-U--              *  NE        void   REG NA $350
IN00a5:        cmp      dword ptr [V19 rbp-34H], 72
Generating: N623 (  7,  6) [000196] ----G-------              *  JTRUE     void   REG NA
IN00a6:        jne      L_M48562_BB23

Variable Live Range History Dump for BB21
V00 this: rbp[16] (1 slot) [(G_M48562_IG02,ins#0,ofs#0), ...]

=============== Generating BB22 [1A6..1AD) -> BB19 (always), preds={BB21} succs={BB19} flags=0x00000006.21080020: i hascall gcsafe bwd LIR 
BB22 IN (1)={V00} + ByrefExposed + GcHeap
     OUT(1)={V00} + ByrefExposed + GcHeap

Recording Var Locations at start of BB22
  <none>

Liveness not changing: 0000000000000001 {V00}
							Live regs: (unchanged) 00000000 {}
							GC regs: (unchanged) 00000000 {}
							Byref regs: (unchanged) 00000000 {}

      L_M48562_BB22:

Scope info: begin block BB22, IL range [1A6..1AD)
Added IP mapping: 0x01A6 STACK_EMPTY (G_M48562_IG19,ins#2,ofs#10) label
Generating: N627 (???,???) [000466] ------------                 IL_OFFSET void   IL offset: 0x1a6 REG NA
Generating: N629 ( 14,  5) [000220] --CXG-------                 CALL      void   System.Diagnostics.Debugger.Break REG NA $VN.Void
							Call: GCvars=0000000000000001 {V00}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}
IN00a7:        call     System.Diagnostics.Debugger:Break()
IN00a8:        jmp      SHORT L_M48562_BB19

Variable Live Range History Dump for BB22
V00 this: rbp[16] (1 slot) [(G_M48562_IG02,ins#0,ofs#0), ...]

=============== Generating BB23 [1AD..1B8) -> BB25 (cond), preds={BB21} succs={BB24,BB25} flags=0x00000004.21090020: i label gcsafe bwd LIR 
BB23 IN (1)={V00} + ByrefExposed + GcHeap
     OUT(1)={V00} + ByrefExposed + GcHeap

Recording Var Locations at start of BB23
  <none>

Liveness not changing: 0000000000000001 {V00}
							Live regs: (unchanged) 00000000 {}
							GC regs: (unchanged) 00000000 {}
							Byref regs: (unchanged) 00000000 {}

      L_M48562_BB23:

      G_M48562_IG19:        ; offs=0002E7H, funclet=00, bbWeight=1   
Mapped BB23 to G_M48562_IG20
Label: IG20, GCvars=0000000000000001 {V00}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}

Scope info: begin block BB23, IL range [1AD..1B8)
Generating: N633 (  3,  2) [000248] -c----------       t248 =    LCL_VAR   int   (AX) V19 tmp12         NA REG NA $385
Generating: N635 (  1,  1) [000201] -c----------       t201 =    CNS_INT   int    82 REG NA $60
                                                              /--*  t248   int    
                                                              +--*  t201   int    
Generating: N637 (  5,  4) [000202] N---G--N-U--              *  NE        void   REG NA $351
IN00a9:        cmp      dword ptr [V19 rbp-34H], 82
Generating: N639 (  7,  6) [000203] ----G-------              *  JTRUE     void   REG NA
IN00aa:        jne      L_M48562_BB25

Variable Live Range History Dump for BB23
V00 this: rbp[16] (1 slot) [(G_M48562_IG02,ins#0,ofs#0), ...]

=============== Generating BB24 [1B8..1C1) -> BB19 (always), preds={BB23} succs={BB19} flags=0x00000004.21080020: i gcsafe bwd LIR 
BB24 IN (1)={V00} + ByrefExposed + GcHeap
     OUT(1)={V00} + ByrefExposed + GcHeap

Recording Var Locations at start of BB24
  <none>

Liveness not changing: 0000000000000001 {V00}
							Live regs: (unchanged) 00000000 {}
							GC regs: (unchanged) 00000000 {}
							Byref regs: (unchanged) 00000000 {}

      L_M48562_BB24:

Scope info: begin block BB24, IL range [1B8..1C1)
Added IP mapping: 0x01B8 STACK_EMPTY (G_M48562_IG20,ins#2,ofs#10) label
Generating: N643 (???,???) [000467] ------------                 IL_OFFSET void   IL offset: 0x1b8 REG NA
Generating: N645 (  1,  1) [000216] -----------z       t216 =    LCL_VAR   ref    V00 this         u:1 rdx REG rdx $80
                                                              /--*  t216   ref    
Generating: N647 (  2,  2) [000387] -c----------       t387 = *  LEA(b+16) byref  REG NA
Generating: N649 (  1,  1) [000217] -c----------       t217 =    CNS_INT   int    0 REG NA $40
                                                              /--*  t387   byref  
                                                              +--*  t217   int    
Generating: N651 (???,???) [000468] -A--GO------              *  STOREIND  bool   REG NA
IN00ab:        mov      rdx, gword ptr [V00 rbp+10H]
New debug range: not adjacent
							V00 in reg rdx is becoming live  [000216]
							Live regs: 00000000 {} => 00000004 {rdx}
							GC regs: 00000000 {} => 00000004 {rdx}
IN00ac:        mov      byte  ptr [rdx+16], 0
Generating: N001 (  1,  1) [000531] -----------Z       t531 =    LCL_VAR   ref    V00 this          rdx REG rdx
							V00 in reg rdx is becoming dead  [000531]
							Live regs: 00000004 {rdx} => 00000000 {}
							GC regs: 00000004 {rdx} => 00000000 {}
							Var V00 continuing live
New debug range: not adjacent
IN00ad:        jmp      SHORT L_M48562_BB19

Variable Live Range History Dump for BB24
V00 this: rbp[16] (1 slot) [(G_M48562_IG02,ins#0,ofs#0), (G_M48562_IG20,ins#3,ofs#14)]; rdx [(G_M48562_IG20,ins#3,ofs#14), (G_M48562_IG20,ins#4,ofs#18)]; rbp[16] (1 slot) [(G_M48562_IG20,ins#4,ofs#18), ...]

=============== Generating BB25 [1C1..1CC) -> BB19 (cond), preds={BB23} succs={BB26,BB19} flags=0x00000004.21090020: i label gcsafe bwd LIR 
BB25 IN (1)={V00} + ByrefExposed + GcHeap
     OUT(1)={V00} + ByrefExposed + GcHeap

Recording Var Locations at start of BB25
  <none>

Liveness not changing: 0000000000000001 {V00}
							Live regs: (unchanged) 00000000 {}
							GC regs: (unchanged) 00000000 {}
							Byref regs: (unchanged) 00000000 {}

      L_M48562_BB25:

      G_M48562_IG20:        ; offs=0002F8H, funclet=00, bbWeight=1   
Mapped BB25 to G_M48562_IG21
Label: IG21, GCvars=0000000000000001 {V00}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}

Scope info: begin block BB25, IL range [1C1..1CC)
Generating: N655 (  3,  2) [000252] -c----------       t252 =    LCL_VAR   int   (AX) V19 tmp12         NA REG NA $385
Generating: N657 (  1,  1) [000208] -c----------       t208 =    CNS_INT   int    81 REG NA $61
                                                              /--*  t252   int    
                                                              +--*  t208   int    
Generating: N659 (  5,  4) [000209] N---G--N-U--              *  NE        void   REG NA $352
IN00ae:        cmp      dword ptr [V19 rbp-34H], 81
Generating: N661 (  7,  6) [000210] ----G-------              *  JTRUE     void   REG NA
IN00af:        jne      SHORT L_M48562_BB19

Variable Live Range History Dump for BB25
V00 this: rbp[16] (1 slot) [(G_M48562_IG20,ins#4,ofs#18), ...]

=============== Generating BB26 [1CC..1D4) (return), preds={BB25} succs={} flags=0x00000004.20080020: i gcsafe LIR 
BB26 IN (1)={V00}
     OUT(0)={   }

Recording Var Locations at start of BB26
  <none>

Liveness not changing: 0000000000000001 {V00}
							Live regs: (unchanged) 00000000 {}
							GC regs: (unchanged) 00000000 {}
							Byref regs: (unchanged) 00000000 {}

      L_M48562_BB26:

Scope info: begin block BB26, IL range [1CC..1D4)
Added IP mapping: 0x01CC STACK_EMPTY (G_M48562_IG21,ins#2,ofs#6) label
Generating: N665 (???,???) [000469] ------------                 IL_OFFSET void   IL offset: 0x1cc REG NA
Generating: N667 (  1,  1) [000211] -----------z       t211 =    LCL_VAR   ref    V00 this         u:1 rdx (last use) REG rdx $80
                                                              /--*  t211   ref    
Generating: N669 (  2,  2) [000389] -c----------       t389 = *  LEA(b+16) byref  REG NA
Generating: N671 (  1,  1) [000212] -c----------       t212 =    CNS_INT   int    0 REG NA $40
                                                              /--*  t389   byref  
                                                              +--*  t212   int    
Generating: N673 (???,???) [000470] -A--GO------              *  STOREIND  bool   REG NA
IN00b0:        mov      rdx, gword ptr [V00 rbp+10H]
							V00 in reg rdx is becoming live  [000211]
							Live regs: 00000000 {} => 00000004 {rdx}
							GC regs: 00000000 {} => 00000004 {rdx}
							V00 in reg rdx is becoming dead  [000211]
							Live regs: 00000004 {rdx} => 00000000 {}
							Live vars: {V00} => {}
							GCvars: {V00} => {}
							GC regs: 00000004 {rdx} => 00000000 {}
IN00b1:        mov      byte  ptr [rdx+16], 0
Added IP mapping: 0x01D3 STACK_EMPTY (G_M48562_IG21,ins#4,ofs#14)
Generating: N675 (???,???) [000471] ------------                 IL_OFFSET void   IL offset: 0x1d3 REG NA
Generating: N677 (  0,  0) [000215] ------------                 RETURN    void   REG NA $442
Added IP mapping: EPILOG STACK_EMPTY (G_M48562_IG21,ins#4,ofs#14) label
Reserving epilog IG for block BB26

      G_M48562_IG21:        ; offs=00030CH, funclet=00, bbWeight=1   
*************** After placeholder IG creation
G_M48562_IG01:        ; func=00, offs=000000H, size=0000H, gcrefRegs=00000000 {} <-- Prolog IG
G_M48562_IG02:        ; offs=000000H, size=00CBH, gcVars=0000000000000001 {V00}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB01 [0000], gcvars, byref
G_M48562_IG03:        ; offs=0000CBH, size=003EH, BB01 [0000], extend
G_M48562_IG04:        ; offs=000109H, size=0011H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB02 [0001], byref
G_M48562_IG05:        ; offs=00011AH, size=008AH, gcVars=0000000000000009 {V00 V04}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB03 [0002], gcvars, byref
G_M48562_IG06:        ; offs=0001A4H, size=000AH, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB04 [0038], byref
G_M48562_IG07:        ; offs=0001AEH, size=0009H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB05 [0039], byref
G_M48562_IG08:        ; offs=0001B7H, size=000BH, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB06 [0006], byref
G_M48562_IG09:        ; offs=0001C2H, size=002FH, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB07 [0008], byref
G_M48562_IG10:        ; offs=0001F1H, size=0011H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB08 [0009], byref
G_M48562_IG11:        ; offs=000202H, size=0023H, gcVars=0000000000000009 {V00 V04}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB09 [0010], gcvars, byref
G_M48562_IG12:        ; offs=000225H, size=000AH, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB10 [0041], byref
G_M48562_IG13:        ; offs=00022FH, size=0009H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB11 [0042], byref
G_M48562_IG14:        ; offs=000238H, size=000CH, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB12 [0016], byref
G_M48562_IG15:        ; offs=000244H, size=0008H, gcVars=0000000000000009 {V00 V04}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB13 [0030], gcvars, byref
G_M48562_IG16:        ; offs=00024CH, size=0001H, BB13 [0030], nogc, extend
G_M48562_IG17:        ; offs=00024DH, size=0077H, gcVars=0000000000000001 {V00}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB15 [0017], gcvars, byref
G_M48562_IG18:        ; offs=0002C4H, size=0023H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB19 [0018], BB20 [0019], byref
G_M48562_IG19:        ; offs=0002E7H, size=0011H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB21 [0020], BB22 [0021], byref
G_M48562_IG20:        ; offs=0002F8H, size=0014H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB23 [0022], BB24 [0023], byref
G_M48562_IG21:        ; offs=00030CH, size=000EH, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB25 [0024], BB26 [0025], byref
G_M48562_IG22:        ; epilog placeholder, next placeholder=<END>, BB26 [0025], epilog, extend <-- First placeholder <-- Last placeholder
                      ;   PrevGCVars=0000000000000001 {V00}, PrevGCrefRegs=00000000 {}, PrevByrefRegs=00000000 {}
                      ;   InitGCVars=0000000000000001 {V00}, InitGCrefRegs=00000000 {}, InitByrefRegs=00000000 {}
G_M48562_IG23:        ; offs=00041AH, size=0000H, gcrefRegs=00000000 {} <-- Current IG

Variable Live Range History Dump for BB26
V00 this: rbp[16] (1 slot) [(G_M48562_IG20,ins#4,ofs#18), (G_M48562_IG21,ins#3,ofs#10)]

=============== Generating BB27 [0CA..0CD) -> BB29 (cond), preds={} succs={BB28,BB29} flags=0x00000004.21011230: keep i rare label flet bwd LIR 
BB27 IN (1)={V04} + ByrefExposed + GcHeap
     OUT(1)={V04} + ByrefExposed + GcHeap

Recording Var Locations at start of BB27
  <none>

Change life 0000000000000000 {} -> 0000000000000008 {V04}
							V04 becoming live
New debug range: new var or location
							Live regs: (unchanged) 00000000 {}
							GC regs: (unchanged) 00000000 {}
							Byref regs: (unchanged) 00000000 {}

      L_M48562_BB27:
Mapped BB27 to G_M48562_IG23
Label: IG23, GCvars=0000000000000008 {V04}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}
Scope info: found beginning of funclet region at block BB27; ignoring following blocks
Reserving funclet prolog IG for block BB27
Added IP mapping: PROLOG STACK_EMPTY (G_M48562_IG23,ins#0,ofs#256) label
*************** After placeholder IG creation
G_M48562_IG01:        ; func=00, offs=000000H, size=0000H, gcrefRegs=00000000 {} <-- Prolog IG
G_M48562_IG02:        ; offs=000000H, size=00CBH, gcVars=0000000000000001 {V00}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB01 [0000], gcvars, byref
G_M48562_IG03:        ; offs=0000CBH, size=003EH, BB01 [0000], extend
G_M48562_IG04:        ; offs=000109H, size=0011H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB02 [0001], byref
G_M48562_IG05:        ; offs=00011AH, size=008AH, gcVars=0000000000000009 {V00 V04}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB03 [0002], gcvars, byref
G_M48562_IG06:        ; offs=0001A4H, size=000AH, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB04 [0038], byref
G_M48562_IG07:        ; offs=0001AEH, size=0009H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB05 [0039], byref
G_M48562_IG08:        ; offs=0001B7H, size=000BH, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB06 [0006], byref
G_M48562_IG09:        ; offs=0001C2H, size=002FH, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB07 [0008], byref
G_M48562_IG10:        ; offs=0001F1H, size=0011H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB08 [0009], byref
G_M48562_IG11:        ; offs=000202H, size=0023H, gcVars=0000000000000009 {V00 V04}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB09 [0010], gcvars, byref
G_M48562_IG12:        ; offs=000225H, size=000AH, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB10 [0041], byref
G_M48562_IG13:        ; offs=00022FH, size=0009H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB11 [0042], byref
G_M48562_IG14:        ; offs=000238H, size=000CH, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB12 [0016], byref
G_M48562_IG15:        ; offs=000244H, size=0008H, gcVars=0000000000000009 {V00 V04}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB13 [0030], gcvars, byref
G_M48562_IG16:        ; offs=00024CH, size=0001H, BB13 [0030], nogc, extend
G_M48562_IG17:        ; offs=00024DH, size=0077H, gcVars=0000000000000001 {V00}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB15 [0017], gcvars, byref
G_M48562_IG18:        ; offs=0002C4H, size=0023H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB19 [0018], BB20 [0019], byref
G_M48562_IG19:        ; offs=0002E7H, size=0011H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB21 [0020], BB22 [0021], byref
G_M48562_IG20:        ; offs=0002F8H, size=0014H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB23 [0022], BB24 [0023], byref
G_M48562_IG21:        ; offs=00030CH, size=000EH, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB25 [0024], BB26 [0025], byref
G_M48562_IG22:        ; epilog placeholder, next placeholder=IG23 , BB26 [0025], epilog, extend <-- First placeholder
                      ;   PrevGCVars=0000000000000001 {V00}, PrevGCrefRegs=00000000 {}, PrevByrefRegs=00000000 {}
                      ;   InitGCVars=0000000000000001 {V00}, InitGCrefRegs=00000000 {}, InitByrefRegs=00000000 {}
G_M48562_IG23:        ; func=01, funclet prolog placeholder, next placeholder=<END>, BB27 [0003], funclet prolog <-- Last placeholder
                      ;   PrevGCVars=0000000000000001 {V00}, PrevGCrefRegs=00000000 {}, PrevByrefRegs=00000000 {}
                      ;   InitGCVars=0000000000000008 {V04}, InitGCrefRegs=00000000 {}, InitByrefRegs=00000000 {}
G_M48562_IG24:        ; offs=00051AH, size=0000H, gcrefRegs=00000000 {} <-- Current IG
Added IP mapping: 0x00CA STACK_EMPTY (G_M48562_IG24,ins#0,ofs#0) label
Generating: N681 (???,???) [000472] ------------                 IL_OFFSET void   IL offset: 0xca REG NA
Generating: N683 (  3,  2) [000123] -c----------       t123 =    LCL_VAR   bool  (AX) V05 loc3          NA REG NA $381
Generating: N685 (  1,  1) [000124] -c----------       t124 =    CNS_INT   bool   0 REG NA $40
                                                              /--*  t123   bool   
                                                              +--*  t124   bool   
Generating: N687 (  6,  6) [000125] J---G--N-U--              *  EQ        void   REG NA $342
IN00b2:        cmp      byte  ptr [V05 rbp-28H], 0
Generating: N689 (  8,  8) [000126] ----G-------              *  JTRUE     void   REG NA
IN00b3:        je       L_M48562_BB29

Variable Live Range History Dump for BB27
V04 loc2: rbp[-64] (1 slot) [(G_M48562_IG23,ins#0,ofs#0), ...]

=============== Generating BB28 [0CD..0D3), preds={BB27} succs={BB29} flags=0x00000006.21001020: i rare hascall bwd LIR 
BB28 IN (1)={V04} + ByrefExposed + GcHeap
     OUT(0)={   }

Recording Var Locations at start of BB28
  <none>

Liveness not changing: 0000000000000008 {V04}
							Live regs: (unchanged) 00000000 {}
							GC regs: (unchanged) 00000000 {}
							Byref regs: (unchanged) 00000000 {}

      L_M48562_BB28:
Added IP mapping: 0x00CD STACK_EMPTY (G_M48562_IG24,ins#2,ofs#10) label
Generating: N693 (???,???) [000473] ------------                 IL_OFFSET void   IL offset: 0xcd REG NA
Generating: N695 (  1,  1) [000128] ------------       t128 =    LCL_VAR   ref    V04 loc2         u:3 rcx (last use) REG rcx <l:$256, c:$b2>
IN00b4:        mov      rcx, gword ptr [V04 rbp-40H]
							Live vars: {V04} => {}
							GCvars: {V04} => {}
							GC regs: 00000000 {} => 00000002 {rcx}
                                                              /--*  t128   ref    
Generating: N697 (???,???) [000524] ------------       t524 = *  PUTARG_REG ref    REG rcx
							GC regs: 00000002 {rcx} => 00000000 {}
							GC regs: 00000000 {} => 00000002 {rcx}
                                                              /--*  t524   ref    arg0 in rcx
Generating: N699 ( 15,  7) [000129] --CXG-------              *  CALL      void   System.Threading.Monitor.Exit REG NA $VN.Void
							GC regs: 00000002 {rcx} => 00000000 {}
							Call: GCvars=0000000000000000 {}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}
IN00b5:        call     System.Threading.Monitor:Exit(System.Object)

Variable Live Range History Dump for BB28
V04 loc2: rbp[-64] (1 slot) [(G_M48562_IG23,ins#0,ofs#0), (G_M48562_IG24,ins#3,ofs#14)]

=============== Generating BB29 [0D3..0D4) (finret), preds={BB27,BB28} succs={} flags=0x00000004.21011020: i rare label bwd LIR 
BB29 IN (0)={}
     OUT(0)={}

Recording Var Locations at start of BB29
  <none>

Liveness not changing: 0000000000000000 {}
							Live regs: (unchanged) 00000000 {}
							GC regs: (unchanged) 00000000 {}
							Byref regs: (unchanged) 00000000 {}

      L_M48562_BB29:

      G_M48562_IG24:        ; offs=00051AH, funclet=01, bbWeight=0   
Mapped BB29 to G_M48562_IG25
Label: IG25, GCvars=0000000000000000 {}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}
Added IP mapping: 0x00D3 STACK_EMPTY (G_M48562_IG25,ins#0,ofs#0) label
Generating: N703 (???,???) [000474] ------------                 IL_OFFSET void   IL offset: 0xd3 REG NA
Generating: N705 (  0,  0) [000127] ------------                 RETFILT   void   REG NA $440
Reserving funclet epilog IG for block BB29
IN00b6:        nop      

      G_M48562_IG25:        ; offs=00052DH, funclet=01, bbWeight=0   
Added IP mapping: EPILOG STACK_EMPTY (G_M48562_IG26,ins#0,ofs#256) label
*************** After placeholder IG creation
G_M48562_IG01:        ; func=00, offs=000000H, size=0000H, gcrefRegs=00000000 {} <-- Prolog IG
G_M48562_IG02:        ; offs=000000H, size=00CBH, gcVars=0000000000000001 {V00}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB01 [0000], gcvars, byref
G_M48562_IG03:        ; offs=0000CBH, size=003EH, BB01 [0000], extend
G_M48562_IG04:        ; offs=000109H, size=0011H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB02 [0001], byref
G_M48562_IG05:        ; offs=00011AH, size=008AH, gcVars=0000000000000009 {V00 V04}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB03 [0002], gcvars, byref
G_M48562_IG06:        ; offs=0001A4H, size=000AH, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB04 [0038], byref
G_M48562_IG07:        ; offs=0001AEH, size=0009H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB05 [0039], byref
G_M48562_IG08:        ; offs=0001B7H, size=000BH, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB06 [0006], byref
G_M48562_IG09:        ; offs=0001C2H, size=002FH, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB07 [0008], byref
G_M48562_IG10:        ; offs=0001F1H, size=0011H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB08 [0009], byref
G_M48562_IG11:        ; offs=000202H, size=0023H, gcVars=0000000000000009 {V00 V04}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB09 [0010], gcvars, byref
G_M48562_IG12:        ; offs=000225H, size=000AH, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB10 [0041], byref
G_M48562_IG13:        ; offs=00022FH, size=0009H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB11 [0042], byref
G_M48562_IG14:        ; offs=000238H, size=000CH, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB12 [0016], byref
G_M48562_IG15:        ; offs=000244H, size=0008H, gcVars=0000000000000009 {V00 V04}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB13 [0030], gcvars, byref
G_M48562_IG16:        ; offs=00024CH, size=0001H, BB13 [0030], nogc, extend
G_M48562_IG17:        ; offs=00024DH, size=0077H, gcVars=0000000000000001 {V00}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB15 [0017], gcvars, byref
G_M48562_IG18:        ; offs=0002C4H, size=0023H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB19 [0018], BB20 [0019], byref
G_M48562_IG19:        ; offs=0002E7H, size=0011H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB21 [0020], BB22 [0021], byref
G_M48562_IG20:        ; offs=0002F8H, size=0014H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB23 [0022], BB24 [0023], byref
G_M48562_IG21:        ; offs=00030CH, size=000EH, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB25 [0024], BB26 [0025], byref
G_M48562_IG22:        ; epilog placeholder, next placeholder=IG23 , BB26 [0025], epilog, extend <-- First placeholder
                      ;   PrevGCVars=0000000000000001 {V00}, PrevGCrefRegs=00000000 {}, PrevByrefRegs=00000000 {}
                      ;   InitGCVars=0000000000000001 {V00}, InitGCrefRegs=00000000 {}, InitByrefRegs=00000000 {}
G_M48562_IG23:        ; func=01, funclet prolog placeholder, next placeholder=IG26 , BB27 [0003], funclet prolog
                      ;   PrevGCVars=0000000000000001 {V00}, PrevGCrefRegs=00000000 {}, PrevByrefRegs=00000000 {}
                      ;   InitGCVars=0000000000000008 {V04}, InitGCrefRegs=00000000 {}, InitByrefRegs=00000000 {}
G_M48562_IG24:        ; offs=00051AH, size=0013H, gcVars=0000000000000008 {V04}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB27 [0003], BB28 [0004], gcvars, byref
G_M48562_IG25:        ; offs=00052DH, size=0001H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB29 [0005], byref
G_M48562_IG26:        ; funclet epilog placeholder, next placeholder=<END>, BB29 [0005], funclet epilog, extend <-- Last placeholder
                      ;   PrevGCVars=0000000000000000 {}, PrevGCrefRegs=00000000 {}, PrevByrefRegs=00000000 {}
                      ;   InitGCVars=0000000000000000 {}, InitGCrefRegs=00000000 {}, InitByrefRegs=00000000 {}
G_M48562_IG27:        ; offs=00062EH, size=0000H, gcrefRegs=00000000 {} <-- Current IG

Variable Live Range History Dump for BB29
..None..

=============== Generating BB30 [126..129) -> BB32 (cond), preds={BB13} succs={BB31,BB32} flags=0x00000004.21090230: keep i label gcsafe flet bwd LIR 
BB30 IN (2)={V00 V04} + ByrefExposed + GcHeap
     OUT(2)={V00 V04} + ByrefExposed + GcHeap

Recording Var Locations at start of BB30
  V00(rdx->STK)
Change life 0000000000000000 {} -> 0000000000000009 {V00 V04}
							V00 becoming live
New debug range: new var or location
							V04 becoming live
New debug range: new var or location
							Live regs: (unchanged) 00000000 {}
							GC regs: (unchanged) 00000000 {}
							Byref regs: (unchanged) 00000000 {}

      L_M48562_BB30:
Mapped BB30 to G_M48562_IG27
Label: IG27, GCvars=0000000000000009 {V00 V04}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}
Reserving funclet prolog IG for block BB30
Added IP mapping: PROLOG STACK_EMPTY (G_M48562_IG27,ins#0,ofs#256) label
*************** After placeholder IG creation
G_M48562_IG01:        ; func=00, offs=000000H, size=0000H, gcrefRegs=00000000 {} <-- Prolog IG
G_M48562_IG02:        ; offs=000000H, size=00CBH, gcVars=0000000000000001 {V00}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB01 [0000], gcvars, byref
G_M48562_IG03:        ; offs=0000CBH, size=003EH, BB01 [0000], extend
G_M48562_IG04:        ; offs=000109H, size=0011H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB02 [0001], byref
G_M48562_IG05:        ; offs=00011AH, size=008AH, gcVars=0000000000000009 {V00 V04}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB03 [0002], gcvars, byref
G_M48562_IG06:        ; offs=0001A4H, size=000AH, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB04 [0038], byref
G_M48562_IG07:        ; offs=0001AEH, size=0009H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB05 [0039], byref
G_M48562_IG08:        ; offs=0001B7H, size=000BH, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB06 [0006], byref
G_M48562_IG09:        ; offs=0001C2H, size=002FH, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB07 [0008], byref
G_M48562_IG10:        ; offs=0001F1H, size=0011H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB08 [0009], byref
G_M48562_IG11:        ; offs=000202H, size=0023H, gcVars=0000000000000009 {V00 V04}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB09 [0010], gcvars, byref
G_M48562_IG12:        ; offs=000225H, size=000AH, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB10 [0041], byref
G_M48562_IG13:        ; offs=00022FH, size=0009H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB11 [0042], byref
G_M48562_IG14:        ; offs=000238H, size=000CH, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB12 [0016], byref
G_M48562_IG15:        ; offs=000244H, size=0008H, gcVars=0000000000000009 {V00 V04}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB13 [0030], gcvars, byref
G_M48562_IG16:        ; offs=00024CH, size=0001H, BB13 [0030], nogc, extend
G_M48562_IG17:        ; offs=00024DH, size=0077H, gcVars=0000000000000001 {V00}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB15 [0017], gcvars, byref
G_M48562_IG18:        ; offs=0002C4H, size=0023H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB19 [0018], BB20 [0019], byref
G_M48562_IG19:        ; offs=0002E7H, size=0011H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB21 [0020], BB22 [0021], byref
G_M48562_IG20:        ; offs=0002F8H, size=0014H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB23 [0022], BB24 [0023], byref
G_M48562_IG21:        ; offs=00030CH, size=000EH, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB25 [0024], BB26 [0025], byref
G_M48562_IG22:        ; epilog placeholder, next placeholder=IG23 , BB26 [0025], epilog, extend <-- First placeholder
                      ;   PrevGCVars=0000000000000001 {V00}, PrevGCrefRegs=00000000 {}, PrevByrefRegs=00000000 {}
                      ;   InitGCVars=0000000000000001 {V00}, InitGCrefRegs=00000000 {}, InitByrefRegs=00000000 {}
G_M48562_IG23:        ; func=01, funclet prolog placeholder, next placeholder=IG26 , BB27 [0003], funclet prolog
                      ;   PrevGCVars=0000000000000001 {V00}, PrevGCrefRegs=00000000 {}, PrevByrefRegs=00000000 {}
                      ;   InitGCVars=0000000000000008 {V04}, InitGCrefRegs=00000000 {}, InitByrefRegs=00000000 {}
G_M48562_IG24:        ; offs=00051AH, size=0013H, gcVars=0000000000000008 {V04}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB27 [0003], BB28 [0004], gcvars, byref
G_M48562_IG25:        ; offs=00052DH, size=0001H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB29 [0005], byref
G_M48562_IG26:        ; funclet epilog placeholder, next placeholder=IG27 , BB29 [0005], funclet epilog, extend
                      ;   PrevGCVars=0000000000000000 {}, PrevGCrefRegs=00000000 {}, PrevByrefRegs=00000000 {}
                      ;   InitGCVars=0000000000000000 {}, InitGCrefRegs=00000000 {}, InitByrefRegs=00000000 {}
G_M48562_IG27:        ; func=02, funclet prolog placeholder, next placeholder=<END>, BB30 [0013], funclet prolog <-- Last placeholder
                      ;   PrevGCVars=0000000000000000 {}, PrevGCrefRegs=00000000 {}, PrevByrefRegs=00000000 {}
                      ;   InitGCVars=0000000000000009 {V00 V04}, InitGCrefRegs=00000000 {}, InitByrefRegs=00000000 {}
G_M48562_IG28:        ; offs=00072EH, size=0000H, gcrefRegs=00000000 {} <-- Current IG
Added IP mapping: 0x0126 STACK_EMPTY (G_M48562_IG28,ins#0,ofs#0) label
Generating: N483 (???,???) [000475] ------------                 IL_OFFSET void   IL offset: 0x126 REG NA
Generating: N485 (  3,  2) [000223] -c----------       t223 =    LCL_VAR   bool  (AX) V05 loc3          NA REG NA $383
Generating: N487 (  1,  1) [000224] -c----------       t224 =    CNS_INT   bool   0 REG NA $40
                                                              /--*  t223   bool   
                                                              +--*  t224   bool   
Generating: N489 (  6,  6) [000225] J---G--N-U--              *  EQ        void   REG NA $34c
IN00b7:        cmp      byte  ptr [V05 rbp-28H], 0
Generating: N491 (  8,  8) [000226] ----G-------              *  JTRUE     void   REG NA
IN00b8:        je       L_M48562_BB32

Variable Live Range History Dump for BB30
V00 this: rbp[16] (1 slot) [(G_M48562_IG27,ins#0,ofs#0), ...]
V04 loc2: rbp[-64] (1 slot) [(G_M48562_IG27,ins#0,ofs#0), ...]

=============== Generating BB31 [129..12F), preds={BB30} succs={BB32} flags=0x00000006.21080020: i hascall gcsafe bwd LIR 
BB31 IN (2)={V00 V04} + ByrefExposed + GcHeap
     OUT(1)={V00    } + ByrefExposed + GcHeap

Recording Var Locations at start of BB31
  <none>

Liveness not changing: 0000000000000009 {V00 V04}
							Live regs: (unchanged) 00000000 {}
							GC regs: (unchanged) 00000000 {}
							Byref regs: (unchanged) 00000000 {}

      L_M48562_BB31:
Added IP mapping: 0x0129 STACK_EMPTY (G_M48562_IG28,ins#2,ofs#10) label
Generating: N495 (???,???) [000476] ------------                 IL_OFFSET void   IL offset: 0x129 REG NA
Generating: N497 (  1,  1) [000228] ------------       t228 =    LCL_VAR   ref    V04 loc2         u:2 rcx (last use) REG rcx <l:$41a, c:$3df>
IN00b9:        mov      rcx, gword ptr [V04 rbp-40H]
							Live vars: {V00 V04} => {V00}
							GCvars: {V00 V04} => {V00}
							GC regs: 00000000 {} => 00000002 {rcx}
                                                              /--*  t228   ref    
Generating: N499 (???,???) [000525] ------------       t525 = *  PUTARG_REG ref    REG rcx
							GC regs: 00000002 {rcx} => 00000000 {}
							GC regs: 00000000 {} => 00000002 {rcx}
                                                              /--*  t525   ref    arg0 in rcx
Generating: N501 ( 15,  7) [000229] --CXG-------              *  CALL      void   System.Threading.Monitor.Exit REG NA $VN.Void
							GC regs: 00000002 {rcx} => 00000000 {}
							Call: GCvars=0000000000000001 {V00}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}
IN00ba:        call     System.Threading.Monitor:Exit(System.Object)

Variable Live Range History Dump for BB31
V00 this: rbp[16] (1 slot) [(G_M48562_IG27,ins#0,ofs#0), ...]
V04 loc2: rbp[-64] (1 slot) [(G_M48562_IG27,ins#0,ofs#0), (G_M48562_IG28,ins#3,ofs#14)]

=============== Generating BB32 [12F..130) (finret), preds={BB30,BB31} succs={BB14} flags=0x00000004.21090020: i label gcsafe bwd LIR 
BB32 IN (1)={V00} + ByrefExposed + GcHeap
     OUT(1)={V00} + ByrefExposed + GcHeap

Recording Var Locations at start of BB32
  <none>

Liveness not changing: 0000000000000001 {V00}
							Live regs: (unchanged) 00000000 {}
							GC regs: (unchanged) 00000000 {}
							Byref regs: (unchanged) 00000000 {}

      L_M48562_BB32:

      G_M48562_IG28:        ; offs=00072EH, funclet=02, bbWeight=1   
Mapped BB32 to G_M48562_IG29
Label: IG29, GCvars=0000000000000001 {V00}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}
Added IP mapping: 0x012F STACK_EMPTY (G_M48562_IG29,ins#0,ofs#0) label
Generating: N505 (???,???) [000477] ------------                 IL_OFFSET void   IL offset: 0x12f REG NA
Generating: N507 (  0,  0) [000227] ------------                 RETFILT   void   REG NA $441
Reserving funclet epilog IG for block BB32
IN00bb:        nop      

      G_M48562_IG29:        ; offs=000741H, funclet=02, bbWeight=1   
Added IP mapping: EPILOG STACK_EMPTY (G_M48562_IG30,ins#0,ofs#256) label
*************** After placeholder IG creation
G_M48562_IG01:        ; func=00, offs=000000H, size=0000H, gcrefRegs=00000000 {} <-- Prolog IG
G_M48562_IG02:        ; offs=000000H, size=00CBH, gcVars=0000000000000001 {V00}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB01 [0000], gcvars, byref
G_M48562_IG03:        ; offs=0000CBH, size=003EH, BB01 [0000], extend
G_M48562_IG04:        ; offs=000109H, size=0011H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB02 [0001], byref
G_M48562_IG05:        ; offs=00011AH, size=008AH, gcVars=0000000000000009 {V00 V04}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB03 [0002], gcvars, byref
G_M48562_IG06:        ; offs=0001A4H, size=000AH, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB04 [0038], byref
G_M48562_IG07:        ; offs=0001AEH, size=0009H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB05 [0039], byref
G_M48562_IG08:        ; offs=0001B7H, size=000BH, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB06 [0006], byref
G_M48562_IG09:        ; offs=0001C2H, size=002FH, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB07 [0008], byref
G_M48562_IG10:        ; offs=0001F1H, size=0011H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB08 [0009], byref
G_M48562_IG11:        ; offs=000202H, size=0023H, gcVars=0000000000000009 {V00 V04}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB09 [0010], gcvars, byref
G_M48562_IG12:        ; offs=000225H, size=000AH, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB10 [0041], byref
G_M48562_IG13:        ; offs=00022FH, size=0009H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB11 [0042], byref
G_M48562_IG14:        ; offs=000238H, size=000CH, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB12 [0016], byref
G_M48562_IG15:        ; offs=000244H, size=0008H, gcVars=0000000000000009 {V00 V04}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB13 [0030], gcvars, byref
G_M48562_IG16:        ; offs=00024CH, size=0001H, BB13 [0030], nogc, extend
G_M48562_IG17:        ; offs=00024DH, size=0077H, gcVars=0000000000000001 {V00}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB15 [0017], gcvars, byref
G_M48562_IG18:        ; offs=0002C4H, size=0023H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB19 [0018], BB20 [0019], byref
G_M48562_IG19:        ; offs=0002E7H, size=0011H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB21 [0020], BB22 [0021], byref
G_M48562_IG20:        ; offs=0002F8H, size=0014H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB23 [0022], BB24 [0023], byref
G_M48562_IG21:        ; offs=00030CH, size=000EH, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB25 [0024], BB26 [0025], byref
G_M48562_IG22:        ; epilog placeholder, next placeholder=IG23 , BB26 [0025], epilog, extend <-- First placeholder
                      ;   PrevGCVars=0000000000000001 {V00}, PrevGCrefRegs=00000000 {}, PrevByrefRegs=00000000 {}
                      ;   InitGCVars=0000000000000001 {V00}, InitGCrefRegs=00000000 {}, InitByrefRegs=00000000 {}
G_M48562_IG23:        ; func=01, funclet prolog placeholder, next placeholder=IG26 , BB27 [0003], funclet prolog
                      ;   PrevGCVars=0000000000000001 {V00}, PrevGCrefRegs=00000000 {}, PrevByrefRegs=00000000 {}
                      ;   InitGCVars=0000000000000008 {V04}, InitGCrefRegs=00000000 {}, InitByrefRegs=00000000 {}
G_M48562_IG24:        ; offs=00051AH, size=0013H, gcVars=0000000000000008 {V04}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB27 [0003], BB28 [0004], gcvars, byref
G_M48562_IG25:        ; offs=00052DH, size=0001H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB29 [0005], byref
G_M48562_IG26:        ; funclet epilog placeholder, next placeholder=IG27 , BB29 [0005], funclet epilog, extend
                      ;   PrevGCVars=0000000000000000 {}, PrevGCrefRegs=00000000 {}, PrevByrefRegs=00000000 {}
                      ;   InitGCVars=0000000000000000 {}, InitGCrefRegs=00000000 {}, InitByrefRegs=00000000 {}
G_M48562_IG27:        ; func=02, funclet prolog placeholder, next placeholder=IG30 , BB30 [0013], funclet prolog
                      ;   PrevGCVars=0000000000000000 {}, PrevGCrefRegs=00000000 {}, PrevByrefRegs=00000000 {}
                      ;   InitGCVars=0000000000000009 {V00 V04}, InitGCrefRegs=00000000 {}, InitByrefRegs=00000000 {}
G_M48562_IG28:        ; offs=00072EH, size=0013H, gcVars=0000000000000009 {V00 V04}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB30 [0013], BB31 [0014], gcvars, byref
G_M48562_IG29:        ; offs=000741H, size=0001H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB32 [0015], byref
G_M48562_IG30:        ; funclet epilog placeholder, next placeholder=<END>, BB32 [0015], funclet epilog, extend <-- Last placeholder
                      ;   PrevGCVars=0000000000000001 {V00}, PrevGCrefRegs=00000000 {}, PrevByrefRegs=00000000 {}
                      ;   InitGCVars=0000000000000001 {V00}, InitGCrefRegs=00000000 {}, InitByrefRegs=00000000 {}

Variable Live Range History Dump for BB32
V00 this: rbp[16] (1 slot) [(G_M48562_IG27,ins#0,ofs#0), (G_M48562_IG29,ins#0,ofs#0)]
Change life 0000000000000001 {V00} -> 0000000000000000 {}
							V00 becoming dead

# compCycleEstimate =    916, compSizeEstimate =   695 FalseLeakRepro.Program:Run(System.String[]):this
; Final local variable assignments
;
;  V00 this         [V00,T00] ( 12, 47   )     ref  ->  [rbp+10H]   this class-hnd EH-live single-def
;* V01 arg1         [V01    ] (  0,  0   )     ref  ->  zero-ref    class-hnd single-def
;  V02 loc0         [V02    ] (  8,  8   )  struct ( 8) [rbp-20H]   do-not-enreg[XSB] addr-exposed ld-addr-op
;  V03 loc1         [V03,T06] (  4, 25   )     int  ->  rsi        
;  V04 loc2         [V04,T03] (  8, 41   )     ref  ->  [rbp-40H]   do-not-enreg[Z] class-hnd EH-live
;  V05 loc3         [V05    ] (  8, 49   )    bool  ->  [rbp-28H]   do-not-enreg[XB] must-init addr-exposed ld-addr-op
;  V06 loc4         [V06    ] (  5, 19   )  struct (16) [rbp-38H]   do-not-enreg[XSB] must-init addr-exposed ld-addr-op
;  V07 OutArgs      [V07    ] (  1,  1   )  lclBlk (32) [rsp+00H]   "OutgoingArgSpace"
;  V08 tmp1         [V08,T10] (  3,  6   )     ref  ->  rsi         class-hnd exact single-def "NewObj constructor temp"
;  V09 tmp2         [V09,T11] (  3,  6   )     ref  ->  rsi         class-hnd exact single-def "NewObj constructor temp"
;  V10 tmp3         [V10,T14] (  2,  4   )     ref  ->  rdi         class-hnd single-def "impAppendStmt"
;  V11 tmp4         [V11,T12] (  3,  6   )     ref  ->  rsi         class-hnd exact single-def "NewObj constructor temp"
;  V12 tmp5         [V12,T13] (  3,  6   )     ref  ->  rdi         class-hnd exact single-def "NewObj constructor temp"
;  V13 tmp6         [V13,T01] (  3, 48   )     ref  ->  rdi         class-hnd exact "NewObj constructor temp"
;  V14 tmp7         [V14,T04] (  2, 32   )     ref  ->  rbx         class-hnd "impAppendStmt"
;  V15 tmp8         [V15,T02] (  3, 48   )     ref  ->  rbx         class-hnd exact "NewObj constructor temp"
;  V16 tmp9         [V16,T05] (  2, 32   )     ref  ->  rdi         class-hnd "impAppendStmt"
;  V17 tmp10        [V17    ] (  8,  8   )    long  ->  [rbp-20H]   do-not-enreg[X] addr-exposed V02._dateData(offs=0x00) P-DEP "field V02._dateData (fldOffset=0x0)"
;  V18 tmp11        [V18    ] (  1,  8   )  ushort  ->  [rbp-38H]   do-not-enreg[X] addr-exposed V06._keyChar(offs=0x00) P-DEP "field V06._keyChar (fldOffset=0x0)"
;  V19 tmp12        [V19    ] (  5, 19   )     int  ->  [rbp-34H]   do-not-enreg[X] addr-exposed V06._key(offs=0x04) P-DEP "field V06._key (fldOffset=0x4)"
;  V20 tmp13        [V20    ] (  1,  8   )     int  ->  [rbp-30H]   do-not-enreg[X] addr-exposed V06._mods(offs=0x08) P-DEP "field V06._mods (fldOffset=0x8)"
;  V21 tmp14        [V21,T15] (  2,  4   )     ref  ->  rcx         single-def "argument with side effect"
;  V22 tmp15        [V22,T16] (  2,  4   )     ref  ->  rcx         single-def "argument with side effect"
;  V23 tmp16        [V23,T17] (  2,  4   )     ref  ->  rcx         single-def "argument with side effect"
;  V24 tmp17        [V24,T18] (  2,  4   )     ref  ->  rcx         single-def "argument with side effect"
;  V25 PSPSym       [V25    ] (  1,  1   )    long  ->  [rbp-50H]   do-not-enreg[X] addr-exposed "PSPSym"
;* V26 tmp19        [V26    ] (  0,  0   )     ref  ->  zero-ref    "optAddCopies"
;  V27 cse0         [V27,T07] (  3, 24   )     ref  ->  rdi         "CSE - aggressive"
;  V28 cse1         [V28,T08] (  3, 24   )     ref  ->  [rbp-48H]   spill-single-def "CSE - aggressive"
;  V29 cse2         [V29,T09] (  3, 24   )     ref  ->  rcx         "CSE - aggressive"
;
; Lcl frame size = 88
*************** Before prolog / epilog generation
G_M48562_IG01:        ; func=00, offs=000000H, size=0000H, gcrefRegs=00000000 {} <-- Prolog IG
G_M48562_IG02:        ; offs=000000H, size=00CBH, gcVars=0000000000000001 {V00}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB01 [0000], gcvars, byref
G_M48562_IG03:        ; offs=0000CBH, size=003EH, BB01 [0000], extend
G_M48562_IG04:        ; offs=000109H, size=0011H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB02 [0001], byref
G_M48562_IG05:        ; offs=00011AH, size=008AH, gcVars=0000000000000009 {V00 V04}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB03 [0002], gcvars, byref
G_M48562_IG06:        ; offs=0001A4H, size=000AH, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB04 [0038], byref
G_M48562_IG07:        ; offs=0001AEH, size=0009H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB05 [0039], byref
G_M48562_IG08:        ; offs=0001B7H, size=000BH, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB06 [0006], byref
G_M48562_IG09:        ; offs=0001C2H, size=002FH, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB07 [0008], byref
G_M48562_IG10:        ; offs=0001F1H, size=0011H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB08 [0009], byref
G_M48562_IG11:        ; offs=000202H, size=0023H, gcVars=0000000000000009 {V00 V04}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB09 [0010], gcvars, byref
G_M48562_IG12:        ; offs=000225H, size=000AH, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB10 [0041], byref
G_M48562_IG13:        ; offs=00022FH, size=0009H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB11 [0042], byref
G_M48562_IG14:        ; offs=000238H, size=000CH, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB12 [0016], byref
G_M48562_IG15:        ; offs=000244H, size=0008H, gcVars=0000000000000009 {V00 V04}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB13 [0030], gcvars, byref
G_M48562_IG16:        ; offs=00024CH, size=0001H, BB13 [0030], nogc, extend
G_M48562_IG17:        ; offs=00024DH, size=0077H, gcVars=0000000000000001 {V00}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB15 [0017], gcvars, byref
G_M48562_IG18:        ; offs=0002C4H, size=0023H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB19 [0018], BB20 [0019], byref
G_M48562_IG19:        ; offs=0002E7H, size=0011H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB21 [0020], BB22 [0021], byref
G_M48562_IG20:        ; offs=0002F8H, size=0014H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB23 [0022], BB24 [0023], byref
G_M48562_IG21:        ; offs=00030CH, size=000EH, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB25 [0024], BB26 [0025], byref
G_M48562_IG22:        ; epilog placeholder, next placeholder=IG23 , BB26 [0025], epilog, extend <-- First placeholder
                      ;   PrevGCVars=0000000000000001 {V00}, PrevGCrefRegs=00000000 {}, PrevByrefRegs=00000000 {}
                      ;   InitGCVars=0000000000000001 {V00}, InitGCrefRegs=00000000 {}, InitByrefRegs=00000000 {}
G_M48562_IG23:        ; func=01, funclet prolog placeholder, next placeholder=IG26 , BB27 [0003], funclet prolog
                      ;   PrevGCVars=0000000000000001 {V00}, PrevGCrefRegs=00000000 {}, PrevByrefRegs=00000000 {}
                      ;   InitGCVars=0000000000000008 {V04}, InitGCrefRegs=00000000 {}, InitByrefRegs=00000000 {}
G_M48562_IG24:        ; offs=00051AH, size=0013H, gcVars=0000000000000008 {V04}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB27 [0003], BB28 [0004], gcvars, byref
G_M48562_IG25:        ; offs=00052DH, size=0001H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB29 [0005], byref
G_M48562_IG26:        ; funclet epilog placeholder, next placeholder=IG27 , BB29 [0005], funclet epilog, extend
                      ;   PrevGCVars=0000000000000000 {}, PrevGCrefRegs=00000000 {}, PrevByrefRegs=00000000 {}
                      ;   InitGCVars=0000000000000000 {}, InitGCrefRegs=00000000 {}, InitByrefRegs=00000000 {}
G_M48562_IG27:        ; func=02, funclet prolog placeholder, next placeholder=IG30 , BB30 [0013], funclet prolog
                      ;   PrevGCVars=0000000000000000 {}, PrevGCrefRegs=00000000 {}, PrevByrefRegs=00000000 {}
                      ;   InitGCVars=0000000000000009 {V00 V04}, InitGCrefRegs=00000000 {}, InitByrefRegs=00000000 {}
G_M48562_IG28:        ; offs=00072EH, size=0013H, gcVars=0000000000000009 {V00 V04}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB30 [0013], BB31 [0014], gcvars, byref
G_M48562_IG29:        ; offs=000741H, size=0001H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB32 [0015], byref
G_M48562_IG30:        ; funclet epilog placeholder, next placeholder=<END>, BB32 [0015], funclet epilog, extend <-- Last placeholder
                      ;   PrevGCVars=0000000000000001 {V00}, PrevGCrefRegs=00000000 {}, PrevByrefRegs=00000000 {}
                      ;   InitGCVars=0000000000000001 {V00}, InitGCrefRegs=00000000 {}, InitByrefRegs=00000000 {}
Recording Var Locations at start of BB01
  <none>

*************** In genFnProlog()
Added IP mapping to front: PROLOG STACK_EMPTY (G_M48562_IG01,ins#0,ofs#0) label

__prolog:
New debug range: first
New debug range: first
Found 6 lvMustInit int-sized stack slots, frame offsets 56 through 32
IN00bc:        push     rbp
IN00bd:        push     rdi
IN00be:        push     rsi
IN00bf:        push     rbx
IN00c0:        sub      rsp, 88
IN00c1:        lea      rbp, [rsp+70H]
Notify VM instruction set (AVX2) must be supported.
IN00c2:        vxorps   xmm4, xmm4
IN00c3:        vmovdqu  xmmword ptr [rbp-38H], xmm4
IN00c4:        xor      rax, rax
IN00c5:        mov      qword ptr [rbp-28H], rax
IN00c6:        mov      qword ptr [V25 rbp-50H], rsp
*************** In genFnPrologCalleeRegArgs() for int regs
IN00c7:        mov      gword ptr [V00 rbp+10H], rcx
*************** In genEnregisterIncomingStackArgs()
12 tracked GC refs are at stack offsets -0048 ... 0018


      G_M48562_IG01:        ; offs=000000H, funclet=00, bbWeight=1   

Funclet prolog / epilog info
   Function InitialSP-to-FP delta: 112
                         SP delta: 40
       PSP slot Initial SP offset: 32
*************** In genFnEpilog()

__epilog:
gcVarPtrSetCur=0000000000000001 {V00}, gcRegGCrefSetCur=00000000 {}, gcRegByrefSetCur=00000000 {}
IN00c8:        add      rsp, 88
IN00c9:        pop      rbx
IN00ca:        pop      rsi
IN00cb:        pop      rdi
IN00cc:        pop      rbp
IN00cd:        ret      

      G_M48562_IG22:        ; offs=00031AH, funclet=00, bbWeight=1   
*************** In genFuncletProlog()
IN00ce:        push     rbp
IN00cf:        push     rdi
IN00d0:        push     rsi
IN00d1:        push     rbx
IN00d2:        sub      rsp, 40
IN00d3:        mov      rbp, qword ptr [rcx+32]
Marking regs modified: [rbp] ([rax rcx rdx rbx rsi rdi r8-r11 mm0-mm5] => [rax rcx rdx rbx rbp rsi rdi r8-r11 mm0-mm5])
IN00d4:        mov      qword ptr [rsp+20H], rbp
IN00d5:        lea      rbp, [rbp+70H]
Removing modified regs: [rbp] ([rax rcx rdx rbx rbp rsi rdi r8-r11 mm0-mm5] => [rax rcx rdx rbx rsi rdi r8-r11 mm0-mm5])

      G_M48562_IG23:        ; offs=00041AH, funclet=01, bbWeight=0   
*************** In genFuncletEpilog()
IN00d6:        add      rsp, 40
IN00d7:        pop      rbx
IN00d8:        pop      rsi
IN00d9:        pop      rdi
IN00da:        pop      rbp
IN00db:        ret      

      G_M48562_IG26:        ; offs=00052EH, funclet=01, bbWeight=0   
*************** In genFuncletProlog()
IN00dc:        push     rbp
IN00dd:        push     rdi
IN00de:        push     rsi
IN00df:        push     rbx
IN00e0:        sub      rsp, 40
IN00e1:        mov      rbp, qword ptr [rcx+32]
Marking regs modified: [rbp] ([rax rcx rdx rbx rsi rdi r8-r11 mm0-mm5] => [rax rcx rdx rbx rbp rsi rdi r8-r11 mm0-mm5])
IN00e2:        mov      qword ptr [rsp+20H], rbp
IN00e3:        lea      rbp, [rbp+70H]
Removing modified regs: [rbp] ([rax rcx rdx rbx rbp rsi rdi r8-r11 mm0-mm5] => [rax rcx rdx rbx rsi rdi r8-r11 mm0-mm5])

      G_M48562_IG27:        ; offs=00062EH, funclet=02, bbWeight=1   
*************** In genFuncletEpilog()
IN00e4:        add      rsp, 40
IN00e5:        pop      rbx
IN00e6:        pop      rsi
IN00e7:        pop      rdi
IN00e8:        pop      rbp
IN00e9:        ret      

      G_M48562_IG30:        ; offs=000742H, funclet=02, bbWeight=1   
0 prologs, 1 epilogs, 2 funclet prologs, 2 funclet epilogs
*************** After prolog / epilog generation
G_M48562_IG01:        ; func=00, offs=000000H, size=0026H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, byref, nogc <-- Prolog IG
G_M48562_IG02:        ; offs=000026H, size=00CBH, gcVars=0000000000000001 {V00}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB01 [0000], gcvars, byref
G_M48562_IG03:        ; offs=0000F1H, size=003EH, BB01 [0000], extend
G_M48562_IG04:        ; offs=00012FH, size=0011H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB02 [0001], byref
G_M48562_IG05:        ; offs=000140H, size=008AH, gcVars=0000000000000009 {V00 V04}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB03 [0002], gcvars, byref
G_M48562_IG06:        ; offs=0001CAH, size=000AH, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB04 [0038], byref
G_M48562_IG07:        ; offs=0001D4H, size=0009H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB05 [0039], byref
G_M48562_IG08:        ; offs=0001DDH, size=000BH, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB06 [0006], byref
G_M48562_IG09:        ; offs=0001E8H, size=002FH, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB07 [0008], byref
G_M48562_IG10:        ; offs=000217H, size=0011H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB08 [0009], byref
G_M48562_IG11:        ; offs=000228H, size=0023H, gcVars=0000000000000009 {V00 V04}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB09 [0010], gcvars, byref
G_M48562_IG12:        ; offs=00024BH, size=000AH, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB10 [0041], byref
G_M48562_IG13:        ; offs=000255H, size=0009H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB11 [0042], byref
G_M48562_IG14:        ; offs=00025EH, size=000CH, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB12 [0016], byref
G_M48562_IG15:        ; offs=00026AH, size=0008H, gcVars=0000000000000009 {V00 V04}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB13 [0030], gcvars, byref
G_M48562_IG16:        ; offs=000272H, size=0001H, BB13 [0030], nogc, extend
G_M48562_IG17:        ; offs=000273H, size=0077H, gcVars=0000000000000001 {V00}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB15 [0017], gcvars, byref
G_M48562_IG18:        ; offs=0002EAH, size=0023H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB19 [0018], BB20 [0019], byref
G_M48562_IG19:        ; offs=00030DH, size=0011H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB21 [0020], BB22 [0021], byref
G_M48562_IG20:        ; offs=00031EH, size=0014H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB23 [0022], BB24 [0023], byref
G_M48562_IG21:        ; offs=000332H, size=000EH, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB25 [0024], BB26 [0025], byref
G_M48562_IG22:        ; offs=000340H, size=0009H, epilog, nogc, extend
G_M48562_IG23:        ; func=01, offs=000349H, size=0015H, gcVars=0000000000000008 {V04}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, gcvars, byref, funclet prolog, nogc
G_M48562_IG24:        ; offs=00035EH, size=0013H, gcVars=0000000000000008 {V04}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB27 [0003], BB28 [0004], gcvars, byref
G_M48562_IG25:        ; offs=000371H, size=0001H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB29 [0005], byref
G_M48562_IG26:        ; offs=000372H, size=0009H, funclet epilog, nogc, extend
G_M48562_IG27:        ; func=02, offs=00037BH, size=0015H, gcVars=0000000000000009 {V00 V04}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, gcvars, byref, funclet prolog, nogc
G_M48562_IG28:        ; offs=000390H, size=0013H, gcVars=0000000000000009 {V00 V04}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB30 [0013], BB31 [0014], gcvars, byref
G_M48562_IG29:        ; offs=0003A3H, size=0001H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB32 [0015], byref
G_M48562_IG30:        ; offs=0003A4H, size=0009H, funclet epilog, nogc, extend
*************** In emitJumpDistBind()
Binding: IN005f: 000000 je       L_M48562_BB06
Binding L_M48562_BB06 to G_M48562_IG08
Estimate of fwd jump [5CF0FCEC/095]: 01CE -> 01DD = 000D
Shrinking jump [5CF0FCEC/095]
Adjusted offset of BB07 from 01D4 to 01D0
Adjusted offset of BB08 from 01DD to 01D9
Binding: IN0064: 000000 jl       L_M48562_BB02
Binding L_M48562_BB02 to G_M48562_IG04
Estimate of bwd jump [5CF100CC/100]: 01DE -> 012F = 00B1
Adjusted offset of BB09 from 01E8 to 01E4
Adjusted offset of BB10 from 0217 to 0213
Adjusted offset of BB11 from 0228 to 0224
Binding: IN007b: 000000 je       L_M48562_BB13
Binding L_M48562_BB13 to G_M48562_IG15
Estimate of fwd jump [5CF10D14/123]: 0241 -> 0266 = 0023
Shrinking jump [5CF10D14/123]
Adjusted offset of BB12 from 024B to 0243
Binding: IN007d: 000000 je       L_M48562_BB12
Binding L_M48562_BB12 to G_M48562_IG14
Estimate of fwd jump [5CF10E94/125]: 0247 -> 0256 = 000D
Shrinking jump [5CF10E94/125]
Adjusted offset of BB13 from 0255 to 0249
Adjusted offset of BB14 from 025E to 0252
Binding: IN0082: 000000 jmp      SHORT L_M48562_BB08
Binding L_M48562_BB08 to G_M48562_IG10
Estimate of bwd jump [5CF1130C/130]: 025C -> 0213 = 004B
Shrinking jump [5CF1130C/130]
Adjusted offset of BB15 from 026A to 025E
Binding: IN0084: 000000 call     L_M48562_BB30
Binding L_M48562_BB30 to G_M48562_IG27
Adjusted offset of BB16 from 0272 to 0266
Adjusted offset of BB17 from 0273 to 0267
Adjusted offset of BB18 from 02EA to 02DE
Binding: IN00a0: 000000 jne      L_M48562_BB21
Binding L_M48562_BB21 to G_M48562_IG19
Estimate of fwd jump [5CF12534/160]: 02ED -> 0301 = 0012
Shrinking jump [5CF12534/160]
Binding: IN00a4: 000000 jmp      SHORT L_M48562_BB19
Binding L_M48562_BB19 to G_M48562_IG18
Estimate of bwd jump [5CF125EC/164]: 02FB -> 02DE = 001F
Shrinking jump [5CF125EC/164]
Adjusted offset of BB19 from 030D to 02FD
Binding: IN00a6: 000000 jne      L_M48562_BB23
Binding L_M48562_BB23 to G_M48562_IG20
Estimate of fwd jump [5CF1285C/166]: 0301 -> 030E = 000B
Shrinking jump [5CF1285C/166]
Binding: IN00a8: 000000 jmp      SHORT L_M48562_BB19
Binding L_M48562_BB19 to G_M48562_IG18
Estimate of bwd jump [5CF128CC/168]: 0308 -> 02DE = 002C
Shrinking jump [5CF128CC/168]
Adjusted offset of BB20 from 031E to 030A
Binding: IN00aa: 000000 jne      L_M48562_BB25
Binding L_M48562_BB25 to G_M48562_IG21
Estimate of fwd jump [5CF12BBC/170]: 030E -> 031E = 000E
Shrinking jump [5CF12BBC/170]
Binding: IN00ad: 000000 jmp      SHORT L_M48562_BB19
Binding L_M48562_BB19 to G_M48562_IG18
Estimate of bwd jump [5CF12C24/173]: 0318 -> 02DE = 003C
Shrinking jump [5CF12C24/173]
Adjusted offset of BB21 from 0332 to 031A
Binding: IN00af: 000000 jne      SHORT L_M48562_BB19
Binding L_M48562_BB19 to G_M48562_IG18
Estimate of bwd jump [5CF12E7C/175]: 031E -> 02DE = 0042
Shrinking jump [5CF12E7C/175]
Adjusted offset of BB22 from 0340 to 0328
Adjusted offset of BB23 from 0349 to 0331
Adjusted offset of BB24 from 035E to 0346
Binding: IN00b3: 000000 je       L_M48562_BB29
Binding L_M48562_BB29 to G_M48562_IG25
Estimate of fwd jump [5CF134DC/179]: 034A -> 0359 = 000D
Shrinking jump [5CF134DC/179]
Adjusted offset of BB25 from 0371 to 0355
Adjusted offset of BB26 from 0372 to 0356
Adjusted offset of BB27 from 037B to 035F
Adjusted offset of BB28 from 0390 to 0374
Binding: IN00b8: 000000 je       L_M48562_BB32
Binding L_M48562_BB32 to G_M48562_IG29
Estimate of fwd jump [5CF13DB4/184]: 0378 -> 0387 = 000D
Shrinking jump [5CF13DB4/184]
Adjusted offset of BB29 from 03A3 to 0383
Adjusted offset of BB30 from 03A4 to 0384
Total shrinkage =  32, min extra jump size =  49

*************** Finishing PHASE Generate code

*************** Starting PHASE Emit code

Hot  code size = 0x38D bytes
Cold code size = 0x0 bytes
reserveUnwindInfo(isFunclet=false, isColdCode=false, unwindSize=0xe)
reserveUnwindInfo(isFunclet=true, isColdCode=false, unwindSize=0xe)
reserveUnwindInfo(isFunclet=true, isColdCode=false, unwindSize=0xe)
*************** In emitEndCodeGen()
Converting emitMaxStackDepth from bytes (0) to elements (0)

***************************************************************************
Instructions as they come out of the scheduler


G_M48562_IG01:        ; func=00, offs=000000H, size=0026H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, byref, nogc <-- Prolog IG
IN00bc: 000000 55                   push     rbp
IN00bd: 000001 57                   push     rdi
IN00be: 000002 56                   push     rsi
IN00bf: 000003 53                   push     rbx
IN00c0: 000004 4883EC58             sub      rsp, 88
IN00c1: 000008 488D6C2470           lea      rbp, [rsp+70H]
IN00c2: 00000D C5D857E4             vxorps   xmm4, xmm4 (ECS:5, ACS:4)
Instruction predicted size = 5, actual = 4
Increasing size adj 0 by 1 => 1
IN00c3: 000011 C5FA7F65C8           vmovdqu  xmmword ptr [rbp-38H], xmm4 (ECS:6, ACS:5)
Instruction predicted size = 6, actual = 5
Increasing size adj 1 by 1 => 2
IN00c4: 000016 33C0                 xor      eax, eax
IN00c5: 000018 488945D8             mov      qword ptr [rbp-28H], rax
IN00c6: 00001C 488965B0             mov      qword ptr [rbp-50H], rsp
IN00c7: 000020 48894D10             mov      gword ptr [rbp+10H], rcx
                            ; GC ptr vars +{V00}
						;; bbWeight=1    PerfScore 9.33
G_M48562_IG02:        ; func=00, offs=000026H, size=00CBH, gcVars=0000000000000001 {V00}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB01 [0000], gcvars, byref
Block predicted offs = 00000026, actual = 00000024 -> size adj = 2
IN0001: 000024 E8C7F2FFFF           call     System.DateTime:get_Now():System.DateTime
                            ; gcr arg pop 0
IN0002: 000029 488945E0             mov      qword ptr [rbp-20H], rax
IN0003: 00002D 488D4DE0             lea      rcx, bword ptr [rbp-20H]
                            ; byrRegs +[rcx]
IN0004: 000031 E892F1FFFF           call     System.DateTime:ToString():System.String:this
                            ; gcrRegs +[rax]
                            ; byrRegs -[rcx]
                            ; gcr arg pop 0
IN0005: 000036 488BC8               mov      rcx, rax
                            ; gcrRegs +[rcx]
IN0006: 000039 48BAF03100756D010000 mov      rdx, 0x16D750031F0      ; "	 Created list"
IN0007: 000043 488B12               mov      rdx, gword ptr [rdx]
                            ; gcrRegs +[rdx]
IN0008: 000046 E8D58BFEFF           call     System.String:Concat(System.String,System.String):System.String
                            ; gcrRegs -[rcx rdx]
                            ; gcr arg pop 0
IN0009: 00004B 488BC8               mov      rcx, rax
                            ; gcrRegs +[rcx]
IN000a: 00004E E805F7FFFF           call     System.Console:WriteLine(System.String)
                            ; gcrRegs -[rax rcx]
                            ; gcr arg pop 0
IN000b: 000053 48B95023EEB3FD7F0000 mov      rcx, 0x7FFDB3EE2350
IN000c: 00005D E80E62EB5E           call     CORINFO_HELP_NEWSFAST
                            ; gcrRegs +[rax]
                            ; gcr arg pop 0
IN000d: 000062 488BF0               mov      rsi, rax
                            ; gcrRegs +[rsi]
IN000e: 000065 488BCE               mov      rcx, rsi
                            ; gcrRegs +[rcx]
IN000f: 000068 E85BEFFFFF           call     FalseLeakRepro.List:.ctor():this
                            ; gcrRegs -[rax rcx]
                            ; gcr arg pop 0
IN0010: 00006D 488B5510             mov      rdx, gword ptr [rbp+10H]
                            ; gcrRegs +[rdx]
IN0011: 000071 488D4A08             lea      rcx, bword ptr [rdx+8]
                            ; byrRegs +[rcx]
IN0012: 000075 488BD6               mov      rdx, rsi
IN0013: 000078 E8735DEB5E           call     CORINFO_HELP_ASSIGN_REF
                            ; gcrRegs -[rdx rsi]
                            ; byrRegs -[rcx]
IN0014: 00007D 48B9B858B0B3FD7F0000 mov      rcx, 0x7FFDB3B058B8
IN0015: 000087 E8E461EB5E           call     CORINFO_HELP_NEWSFAST
                            ; gcrRegs +[rax]
                            ; gcr arg pop 0
IN0016: 00008C 488BF0               mov      rsi, rax
                            ; gcrRegs +[rsi]
IN0017: 00008F 488B5510             mov      rdx, gword ptr [rbp+10H]
                            ; gcrRegs +[rdx]
IN0018: 000093 488B4A08             mov      rcx, gword ptr [rdx+8]
                            ; gcrRegs +[rcx]
IN0019: 000097 488B7908             mov      rdi, gword ptr [rcx+8]
                            ; gcrRegs +[rdi]
IN001a: 00009B 488BCE               mov      rcx, rsi
IN001b: 00009E E86505FEFF           call     System.Object:.ctor():this
                            ; gcrRegs -[rax rcx rdx]
                            ; gcr arg pop 0
IN001c: 0000A3 488D4F10             lea      rcx, bword ptr [rdi+16]
                            ; byrRegs +[rcx]
IN001d: 0000A7 488BD6               mov      rdx, rsi
                            ; gcrRegs +[rdx]
IN001e: 0000AA E8415DEB5E           call     CORINFO_HELP_ASSIGN_REF
                            ; gcrRegs -[rdx rsi rdi]
                            ; byrRegs -[rcx]
IN001f: 0000AF 48B90062EEB3FD7F0000 mov      rcx, 0x7FFDB3EE6200
IN0020: 0000B9 E8B261EB5E           call     CORINFO_HELP_NEWSFAST
                            ; gcrRegs +[rax]
                            ; gcr arg pop 0
IN0021: 0000BE 488BF0               mov      rsi, rax
                            ; gcrRegs +[rsi]
IN0022: 0000C1 488BCE               mov      rcx, rsi
                            ; gcrRegs +[rcx]
IN0023: 0000C4 488B5510             mov      rdx, gword ptr [rbp+10H]
                            ; gcrRegs +[rdx]
IN0024: 0000C8 49B8F813B2B3FD7F0000 mov      r8, 0x7FFDB3B213F8
IN0025: 0000D2 E8F175FEFF           call     System.MulticastDelegate:CtorClosed(System.Object,long):this
                            ; gcrRegs -[rax rcx rdx]
                            ; gcr arg pop 0
IN0026: 0000D7 48B9804EC8B3FD7F0000 mov      rcx, 0x7FFDB3C84E80
IN0027: 0000E1 E8FA66A35E           call     CORINFO_HELP_NEWFAST
                            ; gcrRegs +[rax]
                            ; gcr arg pop 0
IN0028: 0000E6 488BF8               mov      rdi, rax
                            ; gcrRegs +[rdi]
IN0029: 0000E9 488BCF               mov      rcx, rdi
                            ; gcrRegs +[rcx]
IN002a: 0000EC 488BD6               mov      rdx, rsi
                            ; gcrRegs +[rdx]
						;; bbWeight=1    PerfScore 29.25
G_M48562_IG03:        ; func=00, offs=0000F1H, size=003EH, BB01 [0000], extend
Block predicted offs = 000000F1, actual = 000000EF -> size adj = 2
IN002b: 0000EF E8C49AFEFF           call     System.Threading.Thread:.ctor(System.Threading.ParameterizedThreadStart):this
                            ; gcrRegs -[rax rcx rdx rsi]
                            ; gcr arg pop 0
IN002c: 0000F4 488BCF               mov      rcx, rdi
                            ; gcrRegs +[rcx]
IN002d: 0000F7 E8EC9AFEFF           call     System.Threading.Thread:Start():this
                            ; gcrRegs -[rcx rdi]
                            ; gcr arg pop 0
IN002e: 0000FC E8EFF1FFFF           call     System.DateTime:get_Now():System.DateTime
                            ; gcr arg pop 0
IN002f: 000101 488945E0             mov      qword ptr [rbp-20H], rax
IN0030: 000105 488D4DE0             lea      rcx, bword ptr [rbp-20H]
                            ; byrRegs +[rcx]
IN0031: 000109 E8BAF0FFFF           call     System.DateTime:ToString():System.String:this
                            ; gcrRegs +[rax]
                            ; byrRegs -[rcx]
                            ; gcr arg pop 0
IN0032: 00010E 488BC8               mov      rcx, rax
                            ; gcrRegs +[rcx]
IN0033: 000111 48BAF83100756D010000 mov      rdx, 0x16D750031F8      ; "	 Consumer thread started, adding items..."
IN0034: 00011B 488B12               mov      rdx, gword ptr [rdx]
                            ; gcrRegs +[rdx]
IN0035: 00011E E8FD8AFEFF           call     System.String:Concat(System.String,System.String):System.String
                            ; gcrRegs -[rcx rdx]
                            ; gcr arg pop 0
IN0036: 000123 488BC8               mov      rcx, rax
                            ; gcrRegs +[rcx]
IN0037: 000126 E82DF6FFFF           call     System.Console:WriteLine(System.String)
                            ; gcrRegs -[rax rcx]
                            ; gcr arg pop 0
IN0038: 00012B 33F6                 xor      esi, esi
						;; bbWeight=1    PerfScore 10.75
G_M48562_IG04:        ; func=00, offs=00012FH, size=0011H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB02 [0001], byref
Block predicted offs = 0000012F, actual = 0000012D -> size adj = 2
IN0039: 00012D 488B5510             mov      rdx, gword ptr [rbp+10H]
                            ; gcrRegs +[rdx]
IN003a: 000131 488B4A08             mov      rcx, gword ptr [rdx+8]
                            ; gcrRegs +[rcx]
IN003b: 000135 48894DC0             mov      gword ptr [rbp-40H], rcx
                            ; GC ptr vars +{V04}
IN003c: 000139 33C9                 xor      ecx, ecx
                            ; gcrRegs -[rcx]
IN003d: 00013B 894DD8               mov      dword ptr [rbp-28H], ecx
						;; bbWeight=8    PerfScore 42.00
G_M48562_IG05:        ; func=00, offs=000140H, size=008AH, gcVars=0000000000000009 {V00 V04}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB03 [0002], gcvars, byref
Block predicted offs = 00000140, actual = 0000013E -> size adj = 2
                            ; gcrRegs -[rdx]
IN003e: 00013E 488D55D8             lea      rdx, [rbp-28H]
IN003f: 000142 488B4DC0             mov      rcx, gword ptr [rbp-40H]
                            ; gcrRegs +[rcx]
IN0040: 000146 E8F59BFEFF           call     System.Threading.Monitor:Enter(System.Object,byref)
                            ; gcrRegs -[rcx]
                            ; gcr arg pop 0
IN0041: 00014B 48B9A858EEB3FD7F0000 mov      rcx, 0x7FFDB3EE58A8
IN0042: 000155 E81661EB5E           call     CORINFO_HELP_NEWSFAST
                            ; gcrRegs +[rax]
                            ; gcr arg pop 0
IN0043: 00015A 488BF8               mov      rdi, rax
                            ; gcrRegs +[rdi]
IN0044: 00015D 488B5510             mov      rdx, gword ptr [rbp+10H]
                            ; gcrRegs +[rdx]
IN0045: 000161 488B4A08             mov      rcx, gword ptr [rdx+8]
                            ; gcrRegs +[rcx]
IN0046: 000165 488B5908             mov      rbx, gword ptr [rcx+8]
                            ; gcrRegs +[rbx]
IN0047: 000169 488BCF               mov      rcx, rdi
IN0048: 00016C E89704FEFF           call     System.Object:.ctor():this
                            ; gcrRegs -[rax rcx rdx]
                            ; gcr arg pop 0
IN0049: 000171 488D4B08             lea      rcx, bword ptr [rbx+8]
                            ; byrRegs +[rcx]
IN004a: 000175 488BD7               mov      rdx, rdi
                            ; gcrRegs +[rdx]
IN004b: 000178 E8735CEB5E           call     CORINFO_HELP_ASSIGN_REF
                            ; gcrRegs -[rdx rbx rdi]
                            ; byrRegs -[rcx]
IN004c: 00017D 488B5510             mov      rdx, gword ptr [rbp+10H]
                            ; gcrRegs +[rdx]
IN004d: 000181 488B4A08             mov      rcx, gword ptr [rdx+8]
                            ; gcrRegs +[rcx]
IN004e: 000185 48894DB8             mov      gword ptr [rbp-48H], rcx
                            ; GC ptr vars +{V28}
IN004f: 000189 488D4908             lea      rcx, bword ptr [rcx+8]
                            ; gcrRegs -[rcx]
                            ; byrRegs +[rcx]
IN0050: 00018D 488B45B8             mov      rax, gword ptr [rbp-48H]
                            ; gcrRegs +[rax]
IN0051: 000191 488B4008             mov      rax, gword ptr [rax+8]
IN0052: 000195 488B7808             mov      rdi, gword ptr [rax+8]
                            ; gcrRegs +[rdi]
IN0053: 000199 488BD7               mov      rdx, rdi
                            ; GC ptr vars -{V28}
IN0054: 00019C E84F5CEB5E           call     CORINFO_HELP_ASSIGN_REF
                            ; gcrRegs -[rax rdx]
                            ; byrRegs -[rcx]
IN0055: 0001A1 48B9B858B0B3FD7F0000 mov      rcx, 0x7FFDB3B058B8
IN0056: 0001AB E8C060EB5E           call     CORINFO_HELP_NEWSFAST
                            ; gcrRegs +[rax]
                            ; gcr arg pop 0
IN0057: 0001B0 488BD8               mov      rbx, rax
                            ; gcrRegs +[rbx]
IN0058: 0001B3 488BCB               mov      rcx, rbx
                            ; gcrRegs +[rcx]
IN0059: 0001B6 E84D04FEFF           call     System.Object:.ctor():this
                            ; gcrRegs -[rax rcx]
                            ; gcr arg pop 0
IN005a: 0001BB 488D4F10             lea      rcx, bword ptr [rdi+16]
                            ; byrRegs +[rcx]
IN005b: 0001BF 488BD3               mov      rdx, rbx
                            ; gcrRegs +[rdx]
IN005c: 0001C2 E8295CEB5E           call     CORINFO_HELP_ASSIGN_REF
                            ; gcrRegs -[rdx rbx rdi]
                            ; byrRegs -[rcx]
IN005d: 0001C7 90                   nop      
						;; bbWeight=8    PerfScore 220.00
G_M48562_IG06:        ; func=00, offs=0001CAH, size=0006H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB04 [0038], byref, isz
Block predicted offs = 000001CA, actual = 000001C8 -> size adj = 2
IN005e: 0001C8 807DD800             cmp      byte  ptr [rbp-28H], 0
IN005f: 0001CC 7409                 je       SHORT G_M48562_IG08
						;; bbWeight=8    PerfScore 16.00
G_M48562_IG07:        ; func=00, offs=0001D0H, size=0009H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB05 [0039], byref
Block predicted offs = 000001D0, actual = 000001CE -> size adj = 2
IN0060: 0001CE 488B4DC0             mov      rcx, gword ptr [rbp-40H]
                            ; gcrRegs +[rcx]
                            ; GC ptr vars -{V04}
IN0061: 0001D2 E85927A55E           call     System.Threading.Monitor:Exit(System.Object)
                            ; gcrRegs -[rcx]
                            ; gcr arg pop 0
						;; bbWeight=4    PerfScore 8.00
G_M48562_IG08:        ; func=00, offs=0001D9H, size=000BH, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB06 [0006], byref
Block predicted offs = 000001D9, actual = 000001D7 -> size adj = 2
IN0062: 0001D7 FFC6                 inc      esi
IN0063: 0001D9 83FE0A               cmp      esi, 10
IN0064: 0001DC 0F8C4BFFFFFF         jl       G_M48562_IG04
						;; bbWeight=8    PerfScore 12.00
G_M48562_IG09:        ; func=00, offs=0001E4H, size=002FH, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB07 [0008], byref
Block predicted offs = 000001E4, actual = 000001E2 -> size adj = 2
IN0065: 0001E2 E809F1FFFF           call     System.DateTime:get_Now():System.DateTime
                            ; gcr arg pop 0
IN0066: 0001E7 488945E0             mov      qword ptr [rbp-20H], rax
IN0067: 0001EB 488D4DE0             lea      rcx, bword ptr [rbp-20H]
                            ; byrRegs +[rcx]
IN0068: 0001EF E8D4EFFFFF           call     System.DateTime:ToString():System.String:this
                            ; gcrRegs +[rax]
                            ; byrRegs -[rcx]
                            ; gcr arg pop 0
IN0069: 0001F4 488BC8               mov      rcx, rax
                            ; gcrRegs +[rcx]
IN006a: 0001F7 48BA003200756D010000 mov      rdx, 0x16D75003200      ; "	 Waiting for list processing to complete..."
IN006b: 000201 488B12               mov      rdx, gword ptr [rdx]
                            ; gcrRegs +[rdx]
IN006c: 000204 E8178AFEFF           call     System.String:Concat(System.String,System.String):System.String
                            ; gcrRegs -[rcx rdx]
                            ; gcr arg pop 0
IN006d: 000209 488BC8               mov      rcx, rax
                            ; gcrRegs +[rcx]
IN006e: 00020C E847F5FFFF           call     System.Console:WriteLine(System.String)
                            ; gcrRegs -[rax rcx]
                            ; gcr arg pop 0
						;; bbWeight=1    PerfScore 8.25
G_M48562_IG10:        ; func=00, offs=000213H, size=0011H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB08 [0009], byref
Block predicted offs = 00000213, actual = 00000211 -> size adj = 2
IN006f: 000211 488B5510             mov      rdx, gword ptr [rbp+10H]
                            ; gcrRegs +[rdx]
IN0070: 000215 488B4A08             mov      rcx, gword ptr [rdx+8]
                            ; gcrRegs +[rcx]
IN0071: 000219 48894DC0             mov      gword ptr [rbp-40H], rcx
                            ; GC ptr vars +{V04}
IN0072: 00021D 33C9                 xor      ecx, ecx
                            ; gcrRegs -[rcx]
IN0073: 00021F 894DD8               mov      dword ptr [rbp-28H], ecx
						;; bbWeight=8    PerfScore 42.00
G_M48562_IG11:        ; func=00, offs=000224H, size=001FH, gcVars=0000000000000009 {V00 V04}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB09 [0010], gcvars, byref, isz
Block predicted offs = 00000224, actual = 00000222 -> size adj = 2
                            ; gcrRegs -[rdx]
IN0074: 000222 488D55D8             lea      rdx, [rbp-28H]
IN0075: 000226 488B4DC0             mov      rcx, gword ptr [rbp-40H]
                            ; gcrRegs +[rcx]
IN0076: 00022A E8119BFEFF           call     System.Threading.Monitor:Enter(System.Object,byref)
                            ; gcrRegs -[rcx]
                            ; gcr arg pop 0
IN0077: 00022F 488B5510             mov      rdx, gword ptr [rbp+10H]
                            ; gcrRegs +[rdx]
IN0078: 000233 488B4A08             mov      rcx, gword ptr [rdx+8]
                            ; gcrRegs +[rcx]
IN0079: 000237 488B4108             mov      rax, gword ptr [rcx+8]
                            ; gcrRegs +[rax]
IN007a: 00023B 483B4110             cmp      rax, gword ptr [rcx+16]
IN007b: 00023F 741B                 je       SHORT G_M48562_IG15
						;; bbWeight=8    PerfScore 84.00
G_M48562_IG12:        ; func=00, offs=000243H, size=0006H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB10 [0041], byref, isz
Block predicted offs = 00000243, actual = 00000241 -> size adj = 2
                            ; gcrRegs -[rax rcx rdx]
IN007c: 000241 807DD800             cmp      byte  ptr [rbp-28H], 0
IN007d: 000245 7409                 je       SHORT G_M48562_IG14
						;; bbWeight=8    PerfScore 16.00
G_M48562_IG13:        ; func=00, offs=000249H, size=0009H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB11 [0042], byref
Block predicted offs = 00000249, actual = 00000247 -> size adj = 2
IN007e: 000247 488B4DC0             mov      rcx, gword ptr [rbp-40H]
                            ; gcrRegs +[rcx]
                            ; GC ptr vars -{V04}
IN007f: 00024B E8E026A55E           call     System.Threading.Monitor:Exit(System.Object)
                            ; gcrRegs -[rcx]
                            ; gcr arg pop 0
						;; bbWeight=4    PerfScore 8.00
G_M48562_IG14:        ; func=00, offs=000252H, size=000CH, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB12 [0016], byref, isz
Block predicted offs = 00000252, actual = 00000250 -> size adj = 2
IN0080: 000250 B964000000           mov      ecx, 100
IN0081: 000255 E83697FEFF           call     System.Threading.Thread:Sleep(int)
                            ; gcr arg pop 0
IN0082: 00025A EBB5                 jmp      SHORT G_M48562_IG10
						;; bbWeight=8    PerfScore 26.00
G_M48562_IG15:        ; func=00, offs=00025EH, size=0008H, gcVars=0000000000000009 {V00 V04}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB13 [0030], gcvars, byref
Block predicted offs = 0000025E, actual = 0000025C -> size adj = 2
                            ; GC ptr vars +{V03 V04}
IN0083: 00025C 488BCC               mov      rcx, rsp
IN0084: 00025F E8F9000000           call     G_M48562_IG27
						;; bbWeight=1    PerfScore 1.25
G_M48562_IG16:        ; func=00, offs=000266H, size=0001H, BB13 [0030], nogc, extend
Block predicted offs = 00000266, actual = 00000264 -> size adj = 2
IN0085: 000264 90                   nop      
						;; bbWeight=1    PerfScore 0.25
G_M48562_IG17:        ; func=00, offs=000267H, size=0077H, gcVars=0000000000000001 {V00}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB15 [0017], gcvars, byref
Block predicted offs = 00000267, actual = 00000265 -> size adj = 2
                            ; GC ptr vars -{V03 V04}
IN0086: 000265 E886F0FFFF           call     System.DateTime:get_Now():System.DateTime
                            ; gcr arg pop 0
IN0087: 00026A 488945E0             mov      qword ptr [rbp-20H], rax
IN0088: 00026E 488D4DE0             lea      rcx, bword ptr [rbp-20H]
                            ; byrRegs +[rcx]
IN0089: 000272 E851EFFFFF           call     System.DateTime:ToString():System.String:this
                            ; gcrRegs +[rax]
                            ; byrRegs -[rcx]
                            ; gcr arg pop 0
IN008a: 000277 488BC8               mov      rcx, rax
                            ; gcrRegs +[rcx]
IN008b: 00027A 48BA083200756D010000 mov      rdx, 0x16D75003208      ; "	 Done.  Profiler is active, available options:"
IN008c: 000284 488B12               mov      rdx, gword ptr [rdx]
                            ; gcrRegs +[rdx]
IN008d: 000287 E89489FEFF           call     System.String:Concat(System.String,System.String):System.String
                            ; gcrRegs -[rcx rdx]
                            ; gcr arg pop 0
IN008e: 00028C 488BC8               mov      rcx, rax
                            ; gcrRegs +[rcx]
IN008f: 00028F E8C4F4FFFF           call     System.Console:WriteLine(System.String)
                            ; gcrRegs -[rax rcx]
                            ; gcr arg pop 0
IN0090: 000294 48B9103200756D010000 mov      rcx, 0x16D75003210      ; "   Q = quit"
IN0091: 00029E 488B09               mov      rcx, gword ptr [rcx]
                            ; gcrRegs +[rcx]
IN0092: 0002A1 E8B2F4FFFF           call     System.Console:WriteLine(System.String)
                            ; gcrRegs -[rcx]
                            ; gcr arg pop 0
IN0093: 0002A6 48B9183200756D010000 mov      rcx, 0x16D75003218      ; "   H = heap snapshot"
IN0094: 0002B0 488B09               mov      rcx, gword ptr [rcx]
                            ; gcrRegs +[rcx]
IN0095: 0002B3 E8A0F4FFFF           call     System.Console:WriteLine(System.String)
                            ; gcrRegs -[rcx]
                            ; gcr arg pop 0
IN0096: 0002B8 48B9203200756D010000 mov      rcx, 0x16D75003220      ; "   G = GC (max gen)"
IN0097: 0002C2 488B09               mov      rcx, gword ptr [rcx]
                            ; gcrRegs +[rcx]
IN0098: 0002C5 E88EF4FFFF           call     System.Console:WriteLine(System.String)
                            ; gcrRegs -[rcx]
                            ; gcr arg pop 0
IN0099: 0002CA 48B9283200756D010000 mov      rcx, 0x16D75003228      ; "   R = clear the running flag to stop the consumer thread"
IN009a: 0002D4 488B09               mov      rcx, gword ptr [rcx]
                            ; gcrRegs +[rcx]
IN009b: 0002D7 E87CF4FFFF           call     System.Console:WriteLine(System.String)
                            ; gcrRegs -[rcx]
                            ; gcr arg pop 0
						;; bbWeight=1    PerfScore 21.25
G_M48562_IG18:        ; func=00, offs=0002DEH, size=001FH, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB19 [0018], BB20 [0019], byref, isz
Block predicted offs = 000002DE, actual = 000002DC -> size adj = 2
IN009c: 0002DC 488D4DC8             lea      rcx, bword ptr [rbp-38H]
                            ; byrRegs +[rcx]
IN009d: 0002E0 33D2                 xor      edx, edx
IN009e: 0002E2 E8C1FCFFFF           call     System.ConsolePal:ReadKey(bool):System.ConsoleKeyInfo
                            ; byrRegs -[rcx]
                            ; gcr arg pop 0
IN009f: 0002E7 837DCC47             cmp      dword ptr [rbp-34H], 71
IN00a0: 0002EB 750E                 jne      SHORT G_M48562_IG19
IN00a1: 0002ED E846F8FFFF           call     System.GC:get_MaxGeneration():int
                            ; gcr arg pop 0
IN00a2: 0002F2 8BC8                 mov      ecx, eax
IN00a3: 0002F4 E8C7F9FFFF           call     System.GC:Collect(int)
                            ; gcr arg pop 0
IN00a4: 0002F9 EBE1                 jmp      SHORT G_M48562_IG18
						;; bbWeight=8    PerfScore 64.00
G_M48562_IG19:        ; func=00, offs=0002FDH, size=000DH, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB21 [0020], BB22 [0021], byref, isz
Block predicted offs = 000002FD, actual = 000002FB -> size adj = 2
IN00a5: 0002FB 837DCC48             cmp      dword ptr [rbp-34H], 72
IN00a6: 0002FF 7507                 jne      SHORT G_M48562_IG20
IN00a7: 000301 E80AF6FFFF           call     System.Diagnostics.Debugger:Break()
                            ; gcr arg pop 0
IN00a8: 000306 EBD4                 jmp      SHORT G_M48562_IG18
						;; bbWeight=1    PerfScore 5.00
G_M48562_IG20:        ; func=00, offs=00030AH, size=0010H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB23 [0022], BB24 [0023], byref, isz
Block predicted offs = 0000030A, actual = 00000308 -> size adj = 2
IN00a9: 000308 837DCC52             cmp      dword ptr [rbp-34H], 82
IN00aa: 00030C 750A                 jne      SHORT G_M48562_IG21
IN00ab: 00030E 488B5510             mov      rdx, gword ptr [rbp+10H]
                            ; gcrRegs +[rdx]
IN00ac: 000312 C6421000             mov      byte  ptr [rdx+16], 0
IN00ad: 000316 EBC4                 jmp      SHORT G_M48562_IG18
						;; bbWeight=1    PerfScore 6.00
G_M48562_IG21:        ; func=00, offs=00031AH, size=000EH, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB25 [0024], BB26 [0025], byref, isz
Block predicted offs = 0000031A, actual = 00000318 -> size adj = 2
                            ; gcrRegs -[rdx]
IN00ae: 000318 837DCC51             cmp      dword ptr [rbp-34H], 81
IN00af: 00031C 75BE                 jne      SHORT G_M48562_IG18
IN00b0: 00031E 488B5510             mov      rdx, gword ptr [rbp+10H]
                            ; gcrRegs +[rdx]
IN00b1: 000322 C6421000             mov      byte  ptr [rdx+16], 0
						;; bbWeight=1    PerfScore 4.00
G_M48562_IG22:        ; func=00, offs=000328H, size=0009H, epilog, nogc, extend
Block predicted offs = 00000328, actual = 00000326 -> size adj = 2
IN00c8: 000326 4883C458             add      rsp, 88
IN00c9: 00032A 5B                   pop      rbx
IN00ca: 00032B 5E                   pop      rsi
IN00cb: 00032C 5F                   pop      rdi
IN00cc: 00032D 5D                   pop      rbp
IN00cd: 00032E C3                   ret      
						;; bbWeight=1    PerfScore 3.25
G_M48562_IG23:        ; func=01, offs=000331H, size=0015H, gcVars=0000000000000008 {V04}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, gcvars, byref, funclet prolog, nogc
Block predicted offs = 00000331, actual = 0000032F -> size adj = 2
                            ; gcrRegs -[rdx]
                            ; GC ptr vars -{V00} +{V03 V04}
IN00ce: 00032F 55                   push     rbp
IN00cf: 000330 57                   push     rdi
IN00d0: 000331 56                   push     rsi
IN00d1: 000332 53                   push     rbx
IN00d2: 000333 4883EC28             sub      rsp, 40
IN00d3: 000337 488B6920             mov      rbp, qword ptr [rcx+32]
IN00d4: 00033B 48896C2420           mov      qword ptr [rsp+20H], rbp
IN00d5: 000340 488D6D70             lea      rbp, [rbp+70H]
						;; bbWeight=0    PerfScore 0.00
G_M48562_IG24:        ; func=01, offs=000346H, size=000FH, gcVars=0000000000000008 {V04}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB27 [0003], BB28 [0004], gcvars, byref, isz
Block predicted offs = 00000346, actual = 00000344 -> size adj = 2
IN00b2: 000344 807DD800             cmp      byte  ptr [rbp-28H], 0
IN00b3: 000348 7409                 je       SHORT G_M48562_IG25
IN00b4: 00034A 488B4DC0             mov      rcx, gword ptr [rbp-40H]
                            ; gcrRegs +[rcx]
                            ; GC ptr vars -{V03 V04}
IN00b5: 00034E E8DD25A55E           call     System.Threading.Monitor:Exit(System.Object)
                            ; gcrRegs -[rcx]
                            ; gcr arg pop 0
						;; bbWeight=0    PerfScore 0.00
G_M48562_IG25:        ; func=01, offs=000355H, size=0001H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB29 [0005], byref
Block predicted offs = 00000355, actual = 00000353 -> size adj = 2
IN00b6: 000353 90                   nop      
						;; bbWeight=0    PerfScore 0.00
G_M48562_IG26:        ; func=01, offs=000356H, size=0009H, funclet epilog, nogc, extend
Block predicted offs = 00000356, actual = 00000354 -> size adj = 2
IN00d6: 000354 4883C428             add      rsp, 40
IN00d7: 000358 5B                   pop      rbx
IN00d8: 000359 5E                   pop      rsi
IN00d9: 00035A 5F                   pop      rdi
IN00da: 00035B 5D                   pop      rbp
IN00db: 00035C C3                   ret      
						;; bbWeight=0    PerfScore 0.00
G_M48562_IG27:        ; func=02, offs=00035FH, size=0015H, gcVars=0000000000000009 {V00 V04}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, gcvars, byref, funclet prolog, nogc
Block predicted offs = 0000035F, actual = 0000035D -> size adj = 2
                            ; GC ptr vars +{V00 V03 V04}
IN00dc: 00035D 55                   push     rbp
IN00dd: 00035E 57                   push     rdi
IN00de: 00035F 56                   push     rsi
IN00df: 000360 53                   push     rbx
IN00e0: 000361 4883EC28             sub      rsp, 40
IN00e1: 000365 488B6920             mov      rbp, qword ptr [rcx+32]
IN00e2: 000369 48896C2420           mov      qword ptr [rsp+20H], rbp
IN00e3: 00036E 488D6D70             lea      rbp, [rbp+70H]
						;; bbWeight=1    PerfScore 7.75
G_M48562_IG28:        ; func=02, offs=000374H, size=000FH, gcVars=0000000000000009 {V00 V04}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB30 [0013], BB31 [0014], gcvars, byref, isz
Block predicted offs = 00000374, actual = 00000372 -> size adj = 2
IN00b7: 000372 807DD800             cmp      byte  ptr [rbp-28H], 0
IN00b8: 000376 7409                 je       SHORT G_M48562_IG29
IN00b9: 000378 488B4DC0             mov      rcx, gword ptr [rbp-40H]
                            ; gcrRegs +[rcx]
                            ; GC ptr vars -{V03 V04}
IN00ba: 00037C E8AF25A55E           call     System.Threading.Monitor:Exit(System.Object)
                            ; gcrRegs -[rcx]
                            ; gcr arg pop 0
						;; bbWeight=1    PerfScore 4.00
G_M48562_IG29:        ; func=02, offs=000383H, size=0001H, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB32 [0015], byref
Block predicted offs = 00000383, actual = 00000381 -> size adj = 2
IN00bb: 000381 90                   nop      
						;; bbWeight=1    PerfScore 0.25
G_M48562_IG30:        ; func=02, offs=000384H, size=0009H, funclet epilog, nogc, extend
Block predicted offs = 00000384, actual = 00000382 -> size adj = 2
IN00e4: 000382 4883C428             add      rsp, 40
IN00e5: 000386 5B                   pop      rbx
IN00e6: 000387 5E                   pop      rsi
IN00e7: 000388 5F                   pop      rdi
IN00e8: 000389 5D                   pop      rbp
IN00e9: 00038A C3                   ret      
						;; bbWeight=1    PerfScore 3.25Allocated method code size =  909 , actual size =  907, unused size =    2

; Total bytes of code 907, prolog size 36, PerfScore 742.73, instruction count 233, allocated bytes for code 909 (MethodHash=6911424d) for method FalseLeakRepro.Program:Run(System.String[]):this
; ============================================================

*************** After end code gen, before unwindEmit()
G_M48562_IG01:        ; func=00, offs=000000H, size=0024H, bbWeight=1    PerfScore 9.33, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, byref, nogc, isz <-- Prolog IG

IN00bc: 000000 push     rbp
IN00bd: 000001 push     rdi
IN00be: 000002 push     rsi
IN00bf: 000003 push     rbx
IN00c0: 000004 sub      rsp, 88
IN00c1: 000008 lea      rbp, [rsp+70H]
IN00c2: 00000D vxorps   xmm4, xmm4
IN00c3: 000011 vmovdqu  xmmword ptr [rbp-38H], xmm4
IN00c4: 000016 xor      eax, eax
IN00c5: 000018 mov      qword ptr [rbp-28H], rax
IN00c6: 00001C mov      qword ptr [V25 rbp-50H], rsp
IN00c7: 000020 mov      gword ptr [V00 rbp+10H], rcx

G_M48562_IG02:        ; offs=000024H, size=00CBH, bbWeight=1    PerfScore 29.25, gcVars=0000000000000001 {V00}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB01 [0000], gcvars, byref

IN0001: 000024 call     System.DateTime:get_Now():System.DateTime
IN0002: 000029 mov      qword ptr [V02 rbp-20H], rax
IN0003: 00002D lea      rcx, bword ptr [V02 rbp-20H]
IN0004: 000031 call     System.DateTime:ToString():System.String:this
IN0005: 000036 mov      rcx, rax
IN0006: 000039 mov      rdx, 0x16D750031F0      ; "	 Created list"
IN0007: 000043 mov      rdx, gword ptr [rdx]
IN0008: 000046 call     System.String:Concat(System.String,System.String):System.String
IN0009: 00004B mov      rcx, rax
IN000a: 00004E call     System.Console:WriteLine(System.String)
IN000b: 000053 mov      rcx, 0x7FFDB3EE2350
IN000c: 00005D call     CORINFO_HELP_NEWSFAST
IN000d: 000062 mov      rsi, rax
IN000e: 000065 mov      rcx, rsi
IN000f: 000068 call     FalseLeakRepro.List:.ctor():this
IN0010: 00006D mov      rdx, gword ptr [V00 rbp+10H]
IN0011: 000071 lea      rcx, bword ptr [rdx+8]
IN0012: 000075 mov      rdx, rsi
IN0013: 000078 call     CORINFO_HELP_ASSIGN_REF
IN0014: 00007D mov      rcx, 0x7FFDB3B058B8
IN0015: 000087 call     CORINFO_HELP_NEWSFAST
IN0016: 00008C mov      rsi, rax
IN0017: 00008F mov      rdx, gword ptr [V00 rbp+10H]
IN0018: 000093 mov      rcx, gword ptr [rdx+8]
IN0019: 000097 mov      rdi, gword ptr [rcx+8]
IN001a: 00009B mov      rcx, rsi
IN001b: 00009E call     System.Object:.ctor():this
IN001c: 0000A3 lea      rcx, bword ptr [rdi+16]
IN001d: 0000A7 mov      rdx, rsi
IN001e: 0000AA call     CORINFO_HELP_ASSIGN_REF
IN001f: 0000AF mov      rcx, 0x7FFDB3EE6200
IN0020: 0000B9 call     CORINFO_HELP_NEWSFAST
IN0021: 0000BE mov      rsi, rax
IN0022: 0000C1 mov      rcx, rsi
IN0023: 0000C4 mov      rdx, gword ptr [V00 rbp+10H]
IN0024: 0000C8 mov      r8, 0x7FFDB3B213F8
IN0025: 0000D2 call     System.MulticastDelegate:CtorClosed(System.Object,long):this
IN0026: 0000D7 mov      rcx, 0x7FFDB3C84E80
IN0027: 0000E1 call     CORINFO_HELP_NEWFAST
IN0028: 0000E6 mov      rdi, rax
IN0029: 0000E9 mov      rcx, rdi
IN002a: 0000EC mov      rdx, rsi

G_M48562_IG03:        ; offs=0000EFH, size=003EH, bbWeight=1    PerfScore 10.75, BB01 [0000], extend

IN002b: 0000EF call     System.Threading.Thread:.ctor(System.Threading.ParameterizedThreadStart):this
IN002c: 0000F4 mov      rcx, rdi
IN002d: 0000F7 call     System.Threading.Thread:Start():this
IN002e: 0000FC call     System.DateTime:get_Now():System.DateTime
IN002f: 000101 mov      qword ptr [V02 rbp-20H], rax
IN0030: 000105 lea      rcx, bword ptr [V02 rbp-20H]
IN0031: 000109 call     System.DateTime:ToString():System.String:this
IN0032: 00010E mov      rcx, rax
IN0033: 000111 mov      rdx, 0x16D750031F8      ; "	 Consumer thread started, adding items..."
IN0034: 00011B mov      rdx, gword ptr [rdx]
IN0035: 00011E call     System.String:Concat(System.String,System.String):System.String
IN0036: 000123 mov      rcx, rax
IN0037: 000126 call     System.Console:WriteLine(System.String)
IN0038: 00012B xor      esi, esi

G_M48562_IG04:        ; offs=00012DH, size=0011H, bbWeight=8    PerfScore 42.00, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB02 [0001], byref

IN0039: 00012D mov      rdx, gword ptr [V00 rbp+10H]
IN003a: 000131 mov      rcx, gword ptr [rdx+8]
IN003b: 000135 mov      gword ptr [V04 rbp-40H], rcx
IN003c: 000139 xor      ecx, ecx
IN003d: 00013B mov      dword ptr [V05 rbp-28H], ecx

G_M48562_IG05:        ; offs=00013EH, size=008AH, bbWeight=8    PerfScore 220.00, gcVars=0000000000000009 {V00 V04}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB03 [0002], gcvars, byref

IN003e: 00013E lea      rdx, [V05 rbp-28H]
IN003f: 000142 mov      rcx, gword ptr [V04 rbp-40H]
IN0040: 000146 call     System.Threading.Monitor:Enter(System.Object,byref)
IN0041: 00014B mov      rcx, 0x7FFDB3EE58A8
IN0042: 000155 call     CORINFO_HELP_NEWSFAST
IN0043: 00015A mov      rdi, rax
IN0044: 00015D mov      rdx, gword ptr [V00 rbp+10H]
IN0045: 000161 mov      rcx, gword ptr [rdx+8]
IN0046: 000165 mov      rbx, gword ptr [rcx+8]
IN0047: 000169 mov      rcx, rdi
IN0048: 00016C call     System.Object:.ctor():this
IN0049: 000171 lea      rcx, bword ptr [rbx+8]
IN004a: 000175 mov      rdx, rdi
IN004b: 000178 call     CORINFO_HELP_ASSIGN_REF
IN004c: 00017D mov      rdx, gword ptr [V00 rbp+10H]
IN004d: 000181 mov      rcx, gword ptr [rdx+8]
IN004e: 000185 mov      gword ptr [V28 rbp-48H], rcx
IN004f: 000189 lea      rcx, bword ptr [rcx+8]
IN0050: 00018D mov      rax, gword ptr [V28 rbp-48H]
IN0051: 000191 mov      rax, gword ptr [rax+8]
IN0052: 000195 mov      rdi, gword ptr [rax+8]
IN0053: 000199 mov      rdx, rdi
IN0054: 00019C call     CORINFO_HELP_ASSIGN_REF
IN0055: 0001A1 mov      rcx, 0x7FFDB3B058B8
IN0056: 0001AB call     CORINFO_HELP_NEWSFAST
IN0057: 0001B0 mov      rbx, rax
IN0058: 0001B3 mov      rcx, rbx
IN0059: 0001B6 call     System.Object:.ctor():this
IN005a: 0001BB lea      rcx, bword ptr [rdi+16]
IN005b: 0001BF mov      rdx, rbx
IN005c: 0001C2 call     CORINFO_HELP_ASSIGN_REF
IN005d: 0001C7 nop      

G_M48562_IG06:        ; offs=0001C8H, size=0006H, bbWeight=8    PerfScore 16.00, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB04 [0038], byref, isz

IN005e: 0001C8 cmp      byte  ptr [V05 rbp-28H], 0
IN005f: 0001CC je       SHORT G_M48562_IG08

G_M48562_IG07:        ; offs=0001CEH, size=0009H, bbWeight=4    PerfScore 8.00, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB05 [0039], byref

IN0060: 0001CE mov      rcx, gword ptr [V04 rbp-40H]
IN0061: 0001D2 call     System.Threading.Monitor:Exit(System.Object)

G_M48562_IG08:        ; offs=0001D7H, size=000BH, bbWeight=8    PerfScore 12.00, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB06 [0006], byref

IN0062: 0001D7 inc      esi
IN0063: 0001D9 cmp      esi, 10
IN0064: 0001DC jl       G_M48562_IG04

G_M48562_IG09:        ; offs=0001E2H, size=002FH, bbWeight=1    PerfScore 8.25, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB07 [0008], byref

IN0065: 0001E2 call     System.DateTime:get_Now():System.DateTime
IN0066: 0001E7 mov      qword ptr [V02 rbp-20H], rax
IN0067: 0001EB lea      rcx, bword ptr [V02 rbp-20H]
IN0068: 0001EF call     System.DateTime:ToString():System.String:this
IN0069: 0001F4 mov      rcx, rax
IN006a: 0001F7 mov      rdx, 0x16D75003200      ; "	 Waiting for list processing to complete..."
IN006b: 000201 mov      rdx, gword ptr [rdx]
IN006c: 000204 call     System.String:Concat(System.String,System.String):System.String
IN006d: 000209 mov      rcx, rax
IN006e: 00020C call     System.Console:WriteLine(System.String)

G_M48562_IG10:        ; offs=000211H, size=0011H, bbWeight=8    PerfScore 42.00, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB08 [0009], byref

IN006f: 000211 mov      rdx, gword ptr [V00 rbp+10H]
IN0070: 000215 mov      rcx, gword ptr [rdx+8]
IN0071: 000219 mov      gword ptr [V04 rbp-40H], rcx
IN0072: 00021D xor      ecx, ecx
IN0073: 00021F mov      dword ptr [V05 rbp-28H], ecx

G_M48562_IG11:        ; offs=000222H, size=001FH, bbWeight=8    PerfScore 84.00, gcVars=0000000000000009 {V00 V04}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB09 [0010], gcvars, byref, isz

IN0074: 000222 lea      rdx, [V05 rbp-28H]
IN0075: 000226 mov      rcx, gword ptr [V04 rbp-40H]
IN0076: 00022A call     System.Threading.Monitor:Enter(System.Object,byref)
IN0077: 00022F mov      rdx, gword ptr [V00 rbp+10H]
IN0078: 000233 mov      rcx, gword ptr [rdx+8]
IN0079: 000237 mov      rax, gword ptr [rcx+8]
IN007a: 00023B cmp      rax, gword ptr [rcx+16]
IN007b: 00023F je       SHORT G_M48562_IG15

G_M48562_IG12:        ; offs=000241H, size=0006H, bbWeight=8    PerfScore 16.00, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB10 [0041], byref, isz

IN007c: 000241 cmp      byte  ptr [V05 rbp-28H], 0
IN007d: 000245 je       SHORT G_M48562_IG14

G_M48562_IG13:        ; offs=000247H, size=0009H, bbWeight=4    PerfScore 8.00, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB11 [0042], byref

IN007e: 000247 mov      rcx, gword ptr [V04 rbp-40H]
IN007f: 00024B call     System.Threading.Monitor:Exit(System.Object)

G_M48562_IG14:        ; offs=000250H, size=000CH, bbWeight=8    PerfScore 26.00, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB12 [0016], byref, isz

IN0080: 000250 mov      ecx, 100
IN0081: 000255 call     System.Threading.Thread:Sleep(int)
IN0082: 00025A jmp      SHORT G_M48562_IG10

G_M48562_IG15:        ; offs=00025CH, size=0008H, bbWeight=1    PerfScore 1.25, gcVars=0000000000000009 {V00 V04}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB13 [0030], gcvars, byref

IN0083: 00025C mov      rcx, rsp
IN0084: 00025F call     G_M48562_IG27

G_M48562_IG16:        ; offs=000264H, size=0001H, bbWeight=1    PerfScore 0.25, BB13 [0030], nogc, extend

IN0085: 000264 nop      

G_M48562_IG17:        ; offs=000265H, size=0077H, bbWeight=1    PerfScore 21.25, gcVars=0000000000000001 {V00}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB15 [0017], gcvars, byref

IN0086: 000265 call     System.DateTime:get_Now():System.DateTime
IN0087: 00026A mov      qword ptr [V02 rbp-20H], rax
IN0088: 00026E lea      rcx, bword ptr [V02 rbp-20H]
IN0089: 000272 call     System.DateTime:ToString():System.String:this
IN008a: 000277 mov      rcx, rax
IN008b: 00027A mov      rdx, 0x16D75003208      ; "	 Done.  Profiler is active, available options:"
IN008c: 000284 mov      rdx, gword ptr [rdx]
IN008d: 000287 call     System.String:Concat(System.String,System.String):System.String
IN008e: 00028C mov      rcx, rax
IN008f: 00028F call     System.Console:WriteLine(System.String)
IN0090: 000294 mov      rcx, 0x16D75003210      ; "   Q = quit"
IN0091: 00029E mov      rcx, gword ptr [rcx]
IN0092: 0002A1 call     System.Console:WriteLine(System.String)
IN0093: 0002A6 mov      rcx, 0x16D75003218      ; "   H = heap snapshot"
IN0094: 0002B0 mov      rcx, gword ptr [rcx]
IN0095: 0002B3 call     System.Console:WriteLine(System.String)
IN0096: 0002B8 mov      rcx, 0x16D75003220      ; "   G = GC (max gen)"
IN0097: 0002C2 mov      rcx, gword ptr [rcx]
IN0098: 0002C5 call     System.Console:WriteLine(System.String)
IN0099: 0002CA mov      rcx, 0x16D75003228      ; "   R = clear the running flag to stop the consumer thread"
IN009a: 0002D4 mov      rcx, gword ptr [rcx]
IN009b: 0002D7 call     System.Console:WriteLine(System.String)

G_M48562_IG18:        ; offs=0002DCH, size=001FH, bbWeight=8    PerfScore 64.00, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB19 [0018], BB20 [0019], byref, isz

IN009c: 0002DC lea      rcx, bword ptr [V06 rbp-38H]
IN009d: 0002E0 xor      edx, edx
IN009e: 0002E2 call     System.ConsolePal:ReadKey(bool):System.ConsoleKeyInfo
IN009f: 0002E7 cmp      dword ptr [V19 rbp-34H], 71
IN00a0: 0002EB jne      SHORT G_M48562_IG19
IN00a1: 0002ED call     System.GC:get_MaxGeneration():int
IN00a2: 0002F2 mov      ecx, eax
IN00a3: 0002F4 call     System.GC:Collect(int)
IN00a4: 0002F9 jmp      SHORT G_M48562_IG18

G_M48562_IG19:        ; offs=0002FBH, size=000DH, bbWeight=1    PerfScore 5.00, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB21 [0020], BB22 [0021], byref, isz

IN00a5: 0002FB cmp      dword ptr [V19 rbp-34H], 72
IN00a6: 0002FF jne      SHORT G_M48562_IG20
IN00a7: 000301 call     System.Diagnostics.Debugger:Break()
IN00a8: 000306 jmp      SHORT G_M48562_IG18

G_M48562_IG20:        ; offs=000308H, size=0010H, bbWeight=1    PerfScore 6.00, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB23 [0022], BB24 [0023], byref, isz

IN00a9: 000308 cmp      dword ptr [V19 rbp-34H], 82
IN00aa: 00030C jne      SHORT G_M48562_IG21
IN00ab: 00030E mov      rdx, gword ptr [V00 rbp+10H]
IN00ac: 000312 mov      byte  ptr [rdx+16], 0
IN00ad: 000316 jmp      SHORT G_M48562_IG18

G_M48562_IG21:        ; offs=000318H, size=000EH, bbWeight=1    PerfScore 4.00, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB25 [0024], BB26 [0025], byref, isz

IN00ae: 000318 cmp      dword ptr [V19 rbp-34H], 81
IN00af: 00031C jne      SHORT G_M48562_IG18
IN00b0: 00031E mov      rdx, gword ptr [V00 rbp+10H]
IN00b1: 000322 mov      byte  ptr [rdx+16], 0

G_M48562_IG22:        ; offs=000326H, size=0009H, bbWeight=1    PerfScore 3.25, epilog, nogc, extend

IN00c8: 000326 add      rsp, 88
IN00c9: 00032A pop      rbx
IN00ca: 00032B pop      rsi
IN00cb: 00032C pop      rdi
IN00cc: 00032D pop      rbp
IN00cd: 00032E ret      

G_M48562_IG23:        ; func=01, offs=00032FH, size=0015H, bbWeight=0    PerfScore 0.00, gcVars=0000000000000008 {V04}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, gcvars, byref, funclet prolog, nogc

IN00ce: 00032F push     rbp
IN00cf: 000330 push     rdi
IN00d0: 000331 push     rsi
IN00d1: 000332 push     rbx
IN00d2: 000333 sub      rsp, 40
IN00d3: 000337 mov      rbp, qword ptr [rcx+32]
IN00d4: 00033B mov      qword ptr [rsp+20H], rbp
IN00d5: 000340 lea      rbp, [rbp+70H]

G_M48562_IG24:        ; offs=000344H, size=000FH, bbWeight=0    PerfScore 0.00, gcVars=0000000000000008 {V04}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB27 [0003], BB28 [0004], gcvars, byref, isz

IN00b2: 000344 cmp      byte  ptr [V05 rbp-28H], 0
IN00b3: 000348 je       SHORT G_M48562_IG25
IN00b4: 00034A mov      rcx, gword ptr [V04 rbp-40H]
IN00b5: 00034E call     System.Threading.Monitor:Exit(System.Object)

G_M48562_IG25:        ; offs=000353H, size=0001H, bbWeight=0    PerfScore 0.00, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB29 [0005], byref

IN00b6: 000353 nop      

G_M48562_IG26:        ; offs=000354H, size=0009H, bbWeight=0    PerfScore 0.00, funclet epilog, nogc, extend

IN00d6: 000354 add      rsp, 40
IN00d7: 000358 pop      rbx
IN00d8: 000359 pop      rsi
IN00d9: 00035A pop      rdi
IN00da: 00035B pop      rbp
IN00db: 00035C ret      

G_M48562_IG27:        ; func=02, offs=00035DH, size=0015H, bbWeight=1    PerfScore 7.75, gcVars=0000000000000009 {V00 V04}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, gcvars, byref, funclet prolog, nogc

IN00dc: 00035D push     rbp
IN00dd: 00035E push     rdi
IN00de: 00035F push     rsi
IN00df: 000360 push     rbx
IN00e0: 000361 sub      rsp, 40
IN00e1: 000365 mov      rbp, qword ptr [rcx+32]
IN00e2: 000369 mov      qword ptr [rsp+20H], rbp
IN00e3: 00036E lea      rbp, [rbp+70H]

G_M48562_IG28:        ; offs=000372H, size=000FH, bbWeight=1    PerfScore 4.00, gcVars=0000000000000009 {V00 V04}, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB30 [0013], BB31 [0014], gcvars, byref, isz

IN00b7: 000372 cmp      byte  ptr [V05 rbp-28H], 0
IN00b8: 000376 je       SHORT G_M48562_IG29
IN00b9: 000378 mov      rcx, gword ptr [V04 rbp-40H]
IN00ba: 00037C call     System.Threading.Monitor:Exit(System.Object)

G_M48562_IG29:        ; offs=000381H, size=0001H, bbWeight=1    PerfScore 0.25, gcrefRegs=00000000 {}, byrefRegs=00000000 {}, BB32 [0015], byref

IN00bb: 000381 nop      

G_M48562_IG30:        ; offs=000382H, size=0009H, bbWeight=1    PerfScore 3.25, funclet epilog, nogc, extend

IN00e4: 000382 add      rsp, 40
IN00e5: 000386 pop      rbx
IN00e6: 000387 pop      rsi
IN00e7: 000388 pop      rdi
IN00e8: 000389 pop      rbp
IN00e9: 00038A ret      


*************** Finishing PHASE Emit code

*************** Starting PHASE Emit GC+EH tables
Unwind Info:
  >> Start offset   : 0x000000 (not in unwind data)
  >>   End offset   : 0x00032f (not in unwind data)
  Version           : 1
  Flags             : 0x00
  SizeOfProlog      : 0x08
  CountOfUnwindCodes: 5
  FrameRegister     : none (0)
  FrameOffset       : N/A (no FrameRegister) (Value=0)
  UnwindCodes       :
    CodeOffset: 0x08 UnwindOp: UWOP_ALLOC_SMALL (2)     OpInfo: 10 * 8 + 8 = 88 = 0x58
    CodeOffset: 0x04 UnwindOp: UWOP_PUSH_NONVOL (0)     OpInfo: rbx (3)
    CodeOffset: 0x03 UnwindOp: UWOP_PUSH_NONVOL (0)     OpInfo: rsi (6)
    CodeOffset: 0x02 UnwindOp: UWOP_PUSH_NONVOL (0)     OpInfo: rdi (7)
    CodeOffset: 0x01 UnwindOp: UWOP_PUSH_NONVOL (0)     OpInfo: rbp (5)
allocUnwindInfo(pHotCode=0x00007FFDB3B2FA20, pColdCode=0x0000000000000000, startOffset=0x0, endOffset=0x32f, unwindSize=0xe, pUnwindBlock=0x0000016D5CE85DCA, funKind=0 (main function))
Unwind Info:
  >> Start offset   : 0x00032f (not in unwind data)
  >>   End offset   : 0x00035d (not in unwind data)
  Version           : 1
  Flags             : 0x00
  SizeOfProlog      : 0x08
  CountOfUnwindCodes: 5
  FrameRegister     : none (0)
  FrameOffset       : N/A (no FrameRegister) (Value=0)
  UnwindCodes       :
    CodeOffset: 0x08 UnwindOp: UWOP_ALLOC_SMALL (2)     OpInfo: 4 * 8 + 8 = 40 = 0x28
    CodeOffset: 0x04 UnwindOp: UWOP_PUSH_NONVOL (0)     OpInfo: rbx (3)
    CodeOffset: 0x03 UnwindOp: UWOP_PUSH_NONVOL (0)     OpInfo: rsi (6)
    CodeOffset: 0x02 UnwindOp: UWOP_PUSH_NONVOL (0)     OpInfo: rdi (7)
    CodeOffset: 0x01 UnwindOp: UWOP_PUSH_NONVOL (0)     OpInfo: rbp (5)
allocUnwindInfo(pHotCode=0x00007FFDB3B2FA20, pColdCode=0x0000000000000000, startOffset=0x32f, endOffset=0x35d, unwindSize=0xe, pUnwindBlock=0x0000016D5CE86002, funKind=1 (handler))
Unwind Info:
  >> Start offset   : 0x00035d (not in unwind data)
  >>   End offset   : 0x00038b (not in unwind data)
  Version           : 1
  Flags             : 0x00
  SizeOfProlog      : 0x08
  CountOfUnwindCodes: 5
  FrameRegister     : none (0)
  FrameOffset       : N/A (no FrameRegister) (Value=0)
  UnwindCodes       :
    CodeOffset: 0x08 UnwindOp: UWOP_ALLOC_SMALL (2)     OpInfo: 4 * 8 + 8 = 40 = 0x28
    CodeOffset: 0x04 UnwindOp: UWOP_PUSH_NONVOL (0)     OpInfo: rbx (3)
    CodeOffset: 0x03 UnwindOp: UWOP_PUSH_NONVOL (0)     OpInfo: rsi (6)
    CodeOffset: 0x02 UnwindOp: UWOP_PUSH_NONVOL (0)     OpInfo: rdi (7)
    CodeOffset: 0x01 UnwindOp: UWOP_PUSH_NONVOL (0)     OpInfo: rbp (5)
allocUnwindInfo(pHotCode=0x00007FFDB3B2FA20, pColdCode=0x0000000000000000, startOffset=0x35d, endOffset=0x38b, unwindSize=0xe, pUnwindBlock=0x0000016D5CE8623A, funKind=1 (handler))
*************** In genIPmappingGen()
IP mapping count : 53
IL offs PROLOG : 0x00000000 ( STACK_EMPTY )
IL offs 0x0000 : 0x00000024 ( STACK_EMPTY )
IL offs 0x0006 : 0x0000002D ( STACK_EMPTY )
IL offs 0x001C : 0x00000053 ( STACK_EMPTY )
IL offs 0x0022 : 0x0000006D
IL offs 0x0027 : 0x0000007D ( STACK_EMPTY )
IL offs 0x0037 : 0x000000A3
IL offs 0x003C : 0x000000AF ( STACK_EMPTY )
IL offs 0x0048 : 0x000000D7
IL offs 0x004D : 0x000000F4
IL offs 0x0052 : 0x000000FC ( STACK_EMPTY )
IL offs 0x0058 : 0x00000105 ( STACK_EMPTY )
IL offs 0x006E : 0x0000012B ( STACK_EMPTY )
IL offs 0x0072 : 0x0000012D ( STACK_EMPTY )
IL offs 0x0079 : 0x00000139 ( STACK_EMPTY )
IL offs 0x007B : 0x0000013E ( STACK_EMPTY )
IL offs 0x0083 : 0x0000014B ( STACK_EMPTY )
IL offs 0x0093 : 0x00000171
IL offs 0x0098 : 0x0000017D ( STACK_EMPTY )
IL offs 0x00B3 : 0x000001A1 ( STACK_EMPTY )
IL offs 0x00C3 : 0x000001BB
IL offs 0x00D4 : 0x000001D7 ( STACK_EMPTY )
IL offs 0x00D8 : 0x000001D9 ( STACK_EMPTY )
IL offs 0x00DD : 0x000001E2 ( STACK_EMPTY )
IL offs 0x00E3 : 0x000001EB ( STACK_EMPTY )
IL offs 0x00F9 : 0x00000211 ( STACK_EMPTY )
IL offs 0x0100 : 0x0000021D ( STACK_EMPTY )
IL offs 0x0102 : 0x00000222 ( STACK_EMPTY )
IL offs 0x010A : 0x0000022F ( STACK_EMPTY )
IL offs 0x0130 : 0x00000250 ( STACK_EMPTY )
IL offs NO_MAP : 0x0000025C ( STACK_EMPTY )
IL offs 0x0139 : 0x00000265 ( STACK_EMPTY )
IL offs 0x013F : 0x0000026E ( STACK_EMPTY )
IL offs 0x0155 : 0x00000294 ( STACK_EMPTY )
IL offs 0x015F : 0x000002A6 ( STACK_EMPTY )
IL offs 0x0169 : 0x000002B8 ( STACK_EMPTY )
IL offs 0x0173 : 0x000002CA ( STACK_EMPTY )
IL offs 0x018F : 0x000002ED ( STACK_EMPTY )
IL offs 0x01A6 : 0x00000301 ( STACK_EMPTY )
IL offs 0x01B8 : 0x0000030E ( STACK_EMPTY )
IL offs 0x01CC : 0x0000031E ( STACK_EMPTY )
IL offs 0x01D3 : 0x00000326 ( STACK_EMPTY )
IL offs EPILOG : 0x00000326 ( STACK_EMPTY )
IL offs PROLOG : 0x0000032F ( STACK_EMPTY )
IL offs 0x00CA : 0x00000344 ( STACK_EMPTY )
IL offs 0x00CD : 0x0000034A ( STACK_EMPTY )
IL offs 0x00D3 : 0x00000353 ( STACK_EMPTY )
IL offs EPILOG : 0x00000354 ( STACK_EMPTY )
IL offs PROLOG : 0x0000035D ( STACK_EMPTY )
IL offs 0x0126 : 0x00000372 ( STACK_EMPTY )
IL offs 0x0129 : 0x00000378 ( STACK_EMPTY )
IL offs 0x012F : 0x00000381 ( STACK_EMPTY )
IL offs EPILOG : 0x00000382 ( STACK_EMPTY )

*************** In genSetScopeInfo()
VarLocInfo count is 12
; Variable debug info: 12 live ranges, 4 vars for method FalseLeakRepro.Program:Run(System.String[]):this
  0(   UNKNOWN) : From 00000000h to 00000024h, in rcx
  0(   UNKNOWN) : From 00000024h to 00000312h, in rbp[16] (1 slot)
  0(   UNKNOWN) : From 00000312h to 00000316h, in rdx
  0(   UNKNOWN) : From 00000316h to 00000322h, in rbp[16] (1 slot)
  0(   UNKNOWN) : From 0000035Dh to 00000381h, in rbp[16] (1 slot)
  1(   UNKNOWN) : From 00000000h to 00000024h, in rdx
  3(   UNKNOWN) : From 0000012Dh to 000001E2h, in rsi
  4(   UNKNOWN) : From 00000139h to 000001D2h, in rbp[-64] (1 slot)
  4(   UNKNOWN) : From 0000021Dh to 0000024Bh, in rbp[-64] (1 slot)
  4(   UNKNOWN) : From 0000025Ch to 00000265h, in rbp[-64] (1 slot)
  4(   UNKNOWN) : From 0000032Fh to 0000034Eh, in rbp[-64] (1 slot)
  4(   UNKNOWN) : From 0000035Dh to 0000037Ch, in rbp[-64] (1 slot)
VARIABLE LIVE RANGES:
V00 this: rbp[16] (1 slot) [24, 312); rdx [312, 316); rbp[16] (1 slot) [316, 322); rbp[16] (1 slot) [35D, 381)
V03 loc1: rsi [12D, 1E2)
V04 loc2: rbp[-64] (1 slot) [139, 1D2); rbp[-64] (1 slot) [21D, 24B); rbp[-64] (1 slot) [25C, 265); rbp[-64] (1 slot) [32F, 34E); rbp[-64] (1 slot) [35D, 37C)
*************** EH table for FalseLeakRepro.Program:Run(System.String[]):this
2 EH table entries, 0 duplicate clauses, 1 cloned finallys, 3 total EH entries reported to VM
setEHcount(cEH=3)
EH#0: try [013E..01C8) handled by [032F..035D) (fault)
EH#1: try [0222..0241) handled by [035D..038B) (finally)
EH#2: try [025C..025C) handled by [025C..0265) (finally) cloned finally
*************** In gcInfoBlockHdrSave()
Set code length to 907.
Set ReturnKind to Scalar.
Set stack base register to rbp.
Set PSPSym stack slot to 32.
Set WantsReportOnlyLeaf.
Set Outgoing stack arg area size to 32.
Stack slot id for offset 16 (0x10) (frame) = 0.
Stack slot id for offset -64 (-0x40) (frame) = 1.
Stack slot id for offset -72 (-0x48) (frame) = 2.
Register slot id for reg rcx (byref) = 3.
Register slot id for reg rax = 4.
Register slot id for reg rcx = 5.
Register slot id for reg rdx = 6.
Register slot id for reg rsi = 7.
Register slot id for reg rdi = 8.
Register slot id for reg rbx = 9.
Set state of slot 0 at instr offset 0x24 to Live.
Set state of slot 0 at instr offset 0x32f to Dead.
Set state of slot 1 at instr offset 0x139 to Live.
Set state of slot 1 at instr offset 0x1d2 to Dead.
Set state of slot 2 at instr offset 0x189 to Live.
Set state of slot 2 at instr offset 0x19c to Dead.
Set state of slot 1 at instr offset 0x21d to Live.
Set state of slot 1 at instr offset 0x24b to Dead.
Set state of slot 1 at instr offset 0x25c to Live.
Set state of slot 1 at instr offset 0x265 to Dead.
Set state of slot 1 at instr offset 0x32f to Live.
Set state of slot 1 at instr offset 0x34e to Dead.
Set state of slot 0 at instr offset 0x35d to Live.
Set state of slot 0 at instr offset 0x38b to Dead.
Set state of slot 1 at instr offset 0x35d to Live.
Set state of slot 1 at instr offset 0x37c to Dead.
Set state of slot 3 at instr offset 0x31 to Live.
Set state of slot 4 at instr offset 0x36 to Live.
Set state of slot 3 at instr offset 0x36 to Dead.
Set state of slot 5 at instr offset 0x39 to Live.
Set state of slot 6 at instr offset 0x46 to Live.
Set state of slot 5 at instr offset 0x4b to Dead.
Set state of slot 6 at instr offset 0x4b to Dead.
Set state of slot 5 at instr offset 0x4e to Live.
Set state of slot 4 at instr offset 0x53 to Dead.
Set state of slot 5 at instr offset 0x53 to Dead.
Set state of slot 4 at instr offset 0x62 to Live.
Set state of slot 7 at instr offset 0x65 to Live.
Set state of slot 5 at instr offset 0x68 to Live.
Set state of slot 4 at instr offset 0x6d to Dead.
Set state of slot 5 at instr offset 0x6d to Dead.
Set state of slot 6 at instr offset 0x71 to Live.
Set state of slot 3 at instr offset 0x75 to Live.
Set state of slot 6 at instr offset 0x7d to Dead.
Set state of slot 7 at instr offset 0x7d to Dead.
Set state of slot 3 at instr offset 0x7d to Dead.
Set state of slot 4 at instr offset 0x8c to Live.
Set state of slot 7 at instr offset 0x8f to Live.
Set state of slot 6 at instr offset 0x93 to Live.
Set state of slot 5 at instr offset 0x97 to Live.
Set state of slot 8 at instr offset 0x9b to Live.
Set state of slot 4 at instr offset 0xa3 to Dead.
Set state of slot 5 at instr offset 0xa3 to Dead.
Set state of slot 6 at instr offset 0xa3 to Dead.
Set state of slot 3 at instr offset 0xa7 to Live.
Set state of slot 6 at instr offset 0xaa to Live.
Set state of slot 6 at instr offset 0xaf to Dead.
Set state of slot 7 at instr offset 0xaf to Dead.
Set state of slot 8 at instr offset 0xaf to Dead.
Set state of slot 3 at instr offset 0xaf to Dead.
Set state of slot 4 at instr offset 0xbe to Live.
Set state of slot 7 at instr offset 0xc1 to Live.
Set state of slot 5 at instr offset 0xc4 to Live.
Set state of slot 6 at instr offset 0xc8 to Live.
Set state of slot 4 at instr offset 0xd7 to Dead.
Set state of slot 5 at instr offset 0xd7 to Dead.
Set state of slot 6 at instr offset 0xd7 to Dead.
Set state of slot 4 at instr offset 0xe6 to Live.
Set state of slot 8 at instr offset 0xe9 to Live.
Set state of slot 5 at instr offset 0xec to Live.
Set state of slot 6 at instr offset 0xef to Live.
Set state of slot 4 at instr offset 0xf4 to Dead.
Set state of slot 5 at instr offset 0xf4 to Dead.
Set state of slot 6 at instr offset 0xf4 to Dead.
Set state of slot 7 at instr offset 0xf4 to Dead.
Set state of slot 5 at instr offset 0xf7 to Live.
Set state of slot 5 at instr offset 0xfc to Dead.
Set state of slot 8 at instr offset 0xfc to Dead.
Set state of slot 3 at instr offset 0x109 to Live.
Set state of slot 4 at instr offset 0x10e to Live.
Set state of slot 3 at instr offset 0x10e to Dead.
Set state of slot 5 at instr offset 0x111 to Live.
Set state of slot 6 at instr offset 0x11e to Live.
Set state of slot 5 at instr offset 0x123 to Dead.
Set state of slot 6 at instr offset 0x123 to Dead.
Set state of slot 5 at instr offset 0x126 to Live.
Set state of slot 4 at instr offset 0x12b to Dead.
Set state of slot 5 at instr offset 0x12b to Dead.
Set state of slot 6 at instr offset 0x131 to Live.
Set state of slot 5 at instr offset 0x135 to Live.
Set state of slot 5 at instr offset 0x13b to Dead.
Set state of slot 6 at instr offset 0x13e to Dead.
Set state of slot 5 at instr offset 0x146 to Live.
Set state of slot 5 at instr offset 0x14b to Dead.
Set state of slot 4 at instr offset 0x15a to Live.
Set state of slot 8 at instr offset 0x15d to Live.
Set state of slot 6 at instr offset 0x161 to Live.
Set state of slot 5 at instr offset 0x165 to Live.
Set state of slot 9 at instr offset 0x169 to Live.
Set state of slot 4 at instr offset 0x171 to Dead.
Set state of slot 5 at instr offset 0x171 to Dead.
Set state of slot 6 at instr offset 0x171 to Dead.
Set state of slot 3 at instr offset 0x175 to Live.
Set state of slot 6 at instr offset 0x178 to Live.
Set state of slot 6 at instr offset 0x17d to Dead.
Set state of slot 9 at instr offset 0x17d to Dead.
Set state of slot 8 at instr offset 0x17d to Dead.
Set state of slot 3 at instr offset 0x17d to Dead.
Set state of slot 6 at instr offset 0x181 to Live.
Set state of slot 5 at instr offset 0x185 to Live.
Set state of slot 5 at instr offset 0x18d to Dead.
Set state of slot 3 at instr offset 0x18d to Live.
Set state of slot 4 at instr offset 0x191 to Live.
Set state of slot 8 at instr offset 0x199 to Live.
Set state of slot 4 at instr offset 0x1a1 to Dead.
Set state of slot 6 at instr offset 0x1a1 to Dead.
Set state of slot 3 at instr offset 0x1a1 to Dead.
Set state of slot 4 at instr offset 0x1b0 to Live.
Set state of slot 9 at instr offset 0x1b3 to Live.
Set state of slot 5 at instr offset 0x1b6 to Live.
Set state of slot 4 at instr offset 0x1bb to Dead.
Set state of slot 5 at instr offset 0x1bb to Dead.
Set state of slot 3 at instr offset 0x1bf to Live.
Set state of slot 6 at instr offset 0x1c2 to Live.
Set state of slot 6 at instr offset 0x1c7 to Dead.
Set state of slot 9 at instr offset 0x1c7 to Dead.
Set state of slot 8 at instr offset 0x1c7 to Dead.
Set state of slot 3 at instr offset 0x1c7 to Dead.
Set state of slot 5 at instr offset 0x1d2 to Live.
Set state of slot 5 at instr offset 0x1d7 to Dead.
Set state of slot 3 at instr offset 0x1ef to Live.
Set state of slot 4 at instr offset 0x1f4 to Live.
Set state of slot 3 at instr offset 0x1f4 to Dead.
Set state of slot 5 at instr offset 0x1f7 to Live.
Set state of slot 6 at instr offset 0x204 to Live.
Set state of slot 5 at instr offset 0x209 to Dead.
Set state of slot 6 at instr offset 0x209 to Dead.
Set state of slot 5 at instr offset 0x20c to Live.
Set state of slot 4 at instr offset 0x211 to Dead.
Set state of slot 5 at instr offset 0x211 to Dead.
Set state of slot 6 at instr offset 0x215 to Live.
Set state of slot 5 at instr offset 0x219 to Live.
Set state of slot 5 at instr offset 0x21f to Dead.
Set state of slot 6 at instr offset 0x222 to Dead.
Set state of slot 5 at instr offset 0x22a to Live.
Set state of slot 5 at instr offset 0x22f to Dead.
Set state of slot 6 at instr offset 0x233 to Live.
Set state of slot 5 at instr offset 0x237 to Live.
Set state of slot 4 at instr offset 0x23b to Live.
Set state of slot 4 at instr offset 0x241 to Dead.
Set state of slot 5 at instr offset 0x241 to Dead.
Set state of slot 6 at instr offset 0x241 to Dead.
Set state of slot 5 at instr offset 0x24b to Live.
Set state of slot 5 at instr offset 0x250 to Dead.
Set state of slot 3 at instr offset 0x272 to Live.
Set state of slot 4 at instr offset 0x277 to Live.
Set state of slot 3 at instr offset 0x277 to Dead.
Set state of slot 5 at instr offset 0x27a to Live.
Set state of slot 6 at instr offset 0x287 to Live.
Set state of slot 5 at instr offset 0x28c to Dead.
Set state of slot 6 at instr offset 0x28c to Dead.
Set state of slot 5 at instr offset 0x28f to Live.
Set state of slot 4 at instr offset 0x294 to Dead.
Set state of slot 5 at instr offset 0x294 to Dead.
Set state of slot 5 at instr offset 0x2a1 to Live.
Set state of slot 5 at instr offset 0x2a6 to Dead.
Set state of slot 5 at instr offset 0x2b3 to Live.
Set state of slot 5 at instr offset 0x2b8 to Dead.
Set state of slot 5 at instr offset 0x2c5 to Live.
Set state of slot 5 at instr offset 0x2ca to Dead.
Set state of slot 5 at instr offset 0x2d7 to Live.
Set state of slot 5 at instr offset 0x2dc to Dead.
Set state of slot 3 at instr offset 0x2e0 to Live.
Set state of slot 3 at instr offset 0x2e7 to Dead.
Set state of slot 6 at instr offset 0x312 to Live.
Set state of slot 6 at instr offset 0x318 to Dead.
Set state of slot 6 at instr offset 0x322 to Live.
Set state of slot 6 at instr offset 0x32f to Dead.
Set state of slot 5 at instr offset 0x34e to Live.
Set state of slot 5 at instr offset 0x353 to Dead.
Set state of slot 5 at instr offset 0x37c to Live.
Set state of slot 5 at instr offset 0x381 to Dead.
Defining interruptible range: [0x24, 0x264).
Defining interruptible range: [0x265, 0x326).
Defining interruptible range: [0x344, 0x354).
Defining interruptible range: [0x372, 0x382).

*************** Finishing PHASE Emit GC+EH tables
Method code size: 907

Allocations for FalseLeakRepro.Program:Run(System.String[]):this (MethodHash=6911424d)
count:       7279, size:     521749, max =      10240
allocateMemory:     589824, nraUsed:     529184

Alloc'd bytes by kind:
                  kind |       size |     pct
  ---------------------+------------+--------
         AssertionProp |       7092 |   1.36%
               ASTNode |      73160 |  14.02%
              InstDesc |      24256 |   4.65%
              ImpStack |        384 |   0.07%
            BasicBlock |      15768 |   3.02%
             fgArgInfo |       3072 |   0.59%
       fgArgInfoPtrArr |        384 |   0.07%
              FlowList |       3640 |   0.70%
     TreeStatementList |        224 |   0.04%
               SiScope |          0 |   0.00%
       DominatorMemory |       2544 |   0.49%
                  LSRA |      10068 |   1.93%
         LSRA_Interval |      11440 |   2.19%
      LSRA_RefPosition |      56448 |  10.82%
          Reachability |         16 |   0.00%
                   SSA |       8000 |   1.53%
           ValueNumber |      34481 |   6.61%
              LvaTable |      10340 |   1.98%
            UnwindInfo |         64 |   0.01%
                hashBv |       1200 |   0.23%
                bitset |       1360 |   0.26%
          FixedBitVect |        120 |   0.02%
               Generic |      10060 |   1.93%
   LocalAddressVisitor |          0 |   0.00%
         FieldSeqStore |        416 |   0.08%
    ZeroOffsetFieldMap |        280 |   0.05%
          ArrayInfoMap |         80 |   0.02%
          MemoryPhiArg |        768 |   0.15%
                   CSE |       3888 |   0.75%
                    GC |      12912 |   2.47%
       CorTailCallInfo |          0 |   0.00%
              Inlining |      21944 |   4.21%
            ArrayStack |       1664 |   0.32%
             DebugInfo |       1976 |   0.38%
             DebugOnly |     179253 |  34.36%
               Codegen |        848 |   0.16%
               LoopOpt |      11656 |   2.23%
             LoopClone |        192 |   0.04%
             LoopHoist |       3184 |   0.61%
               Unknown |       3599 |   0.69%
            RangeCheck |          0 |   0.00%
              CopyProp |       2160 |   0.41%
           SideEffects |          0 |   0.00%
       ObjectAllocator |          0 |   0.00%
    VariableLiveRanges |       1912 |   0.37%
           ClassLayout |         96 |   0.02%
       TailMergeThrows |          0 |   0.00%
             EarlyProp |          0 |   0.00%
              ZeroInit |        800 |   0.15%
                   Pgo |          0 |   0.00%

****** DONE compiling FalseLeakRepro.Program:Run(System.String[]):this
8/13/2021 3:11:47 PM	 Created list
8/13/2021 3:11:47 PM	 Consumer thread started, adding items...
8/13/2021 3:11:47 PM	 Waiting for list processing to complete...
8/13/2021 3:11:47 PM	 Done.  Profiler is active, available options:
   Q = quit
   H = heap snapshot
   G = GC (max gen)
   R = clear the running flag to stop the consumer thread
q